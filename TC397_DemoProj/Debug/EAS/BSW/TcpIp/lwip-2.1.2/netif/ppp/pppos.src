	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc17168a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.pppos.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppos.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppos.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppos.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppos.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4548
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppos.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	169
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	171
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	194
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	194
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	241
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	278
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	194
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	194
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	241
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	377
	.byte	3
	.word	194
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	471
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	500
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	194
	.byte	8,4
	.word	278
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	605
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	614
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	241
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	605
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	687
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	194
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	614
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	614
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	929
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	194
	.byte	8,3
	.word	194
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1086
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1095
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	241
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1229
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	194
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	194
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	194
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1340
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	194
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	194
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	194
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	194
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	194
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	194
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	241
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	241
	.byte	8,1
	.word	194
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1794
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1794
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1803
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1879
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	687
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2015
	.byte	12
	.word	194
	.byte	3
	.word	2129
	.byte	12
	.word	194
	.byte	3
	.word	2139
	.byte	12
	.word	194
	.byte	3
	.word	2149
	.byte	12
	.word	1879
	.byte	3
	.word	2159
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	241
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	194
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	194
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	194
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	194
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	687
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2134
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2144
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2154
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2164
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2169
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	278
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	278
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	278
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2521
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	278
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2671
	.byte	12
	.word	2521
	.byte	3
	.word	2808
	.byte	12
	.word	2671
	.byte	3
	.word	2818
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	194
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	194
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	241
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2164
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2813
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2823
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2828
	.byte	12
	.word	194
	.byte	3
	.word	3113
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3118
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3118
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3123
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1879
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	194
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	194
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3287
	.byte	3
	.word	1803
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	278
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	194
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	194
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	241
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3432
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	471
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3437
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	278
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1879
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	194
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	194
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3432
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3652
	.byte	12
	.word	3437
	.byte	3
	.word	3822
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	241
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	471
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	241
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	241
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3118
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3827
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3832
	.byte	12
	.word	3652
	.byte	3
	.word	4056
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4061
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4066
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	471
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4166
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	471
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4263
	.byte	8,8
	.word	194
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4357
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4066
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4066
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4263
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4166
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4366
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	194
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppos.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     3   * Network Point to Point Protocol over Serial file.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     4   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     5   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     6  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     7  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     8   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	     9   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    10   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    11   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    12   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    13   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    14   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    15   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    16   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    17   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    18   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    19   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    20   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    21   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    22   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    23   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    24   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    25   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    26   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    27   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    28   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    29   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    30   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    31   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    32   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    33  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    34  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    35  #if PPP_SUPPORT && PPPOS_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    36  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    37  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    38  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    39  #include "lwip/arch.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    40  #include "lwip/err.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    41  #include "lwip/pbuf.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    42  #include "lwip/sys.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    43  #include "lwip/memp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    44  #include "lwip/netif.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    45  #include "lwip/snmp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    46  #include "lwip/priv/tcpip_priv.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    47  #include "lwip/api.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    48  #include "lwip/ip4.h" /* for ip4_input() */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    49  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    50  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    51  #include "netif/ppp/pppos.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    52  #include "netif/ppp/vj.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    53  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    54  /* Memory pool */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    55  LWIP_MEMPOOL_DECLARE(PPPOS_PCB, MEMP_NUM_PPPOS_INTERFACES, sizeof(pppos_pcb), "PPPOS_PCB")
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    56  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    57  /* callbacks called from PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    58  static err_t pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    59  static err_t pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    60  static void pppos_connect(ppp_pcb *ppp, void *ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    61  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    62  static void pppos_listen(ppp_pcb *ppp, void *ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    63  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    64  static void pppos_disconnect(ppp_pcb *ppp, void *ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    65  static err_t pppos_destroy(ppp_pcb *ppp, void *ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    66  static void pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    67  static void pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    68  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    69  /* Prototypes for procedures local to this file. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    70  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    71  static void pppos_input_callback(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    72  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    73  static void pppos_input_free_current_packet(pppos_pcb *pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    74  static void pppos_input_drop(pppos_pcb *pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    75  static err_t pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    76  static err_t pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    77  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    78  /* Callbacks structure for PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    79  static const struct link_callbacks pppos_callbacks = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    80    pppos_connect,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    81  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    82    pppos_listen,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    83  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    84    pppos_disconnect,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    85    pppos_destroy,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    86    pppos_write,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    87    pppos_netif_output,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    88    pppos_send_config,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    89    pppos_recv_config
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    90  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    91  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    92  /* PPP's Asynchronous-Control-Character-Map.  The mask array is used
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    93   * to select the specific bit for a character. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    94  #define ESCAPE_P(accm, c) ((accm)[(c) >> 3] & 1 << (c & 0x07))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    95  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    96  #if PPP_FCS_TABLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    97  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    98   * FCS lookup table as calculated by genfcstab.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	    99   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   100  static const u16_t fcstab[256] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   101    0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   102    0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   103    0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   104    0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   105    0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   106    0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   107    0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   108    0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   109    0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   110    0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   111    0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   112    0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   113    0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   114    0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   115    0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   116    0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   117    0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   118    0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   119    0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   120    0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   121    0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   122    0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   123    0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   124    0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   125    0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   126    0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   127    0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   128    0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   129    0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   130    0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   131    0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   132    0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   133  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   134  #define PPP_FCS(fcs, c) (((fcs) >> 8) ^ fcstab[((fcs) ^ (c)) & 0xff])
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   135  #else /* PPP_FCS_TABLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   136  /* The HDLC polynomial: X**0 + X**5 + X**12 + X**16 (0x8408) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   137  #define PPP_FCS_POLYNOMIAL 0x8408
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   138  static u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   139  ppp_get_fcs(u8_t byte)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   140  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   141    unsigned int octet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   142    int bit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   143    octet = byte;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   144    for (bit = 8; bit-- > 0; ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   145      octet = (octet & 0x01) ? ((octet >> 1) ^ PPP_FCS_POLYNOMIAL) : (octet >> 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   146    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   147    return octet & 0xffff;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   148  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   149  #define PPP_FCS(fcs, c) (((fcs) >> 8) ^ ppp_get_fcs(((fcs) ^ (c)) & 0xff))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   150  #endif /* PPP_FCS_TABLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   151  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   152  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   153   * Values for FCS calculations.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   154   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   155  #define PPP_INITFCS     0xffff  /* Initial FCS value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   156  #define PPP_GOODFCS     0xf0b8  /* Good final FCS value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   157  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   158  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   159  #define PPPOS_DECL_PROTECT(lev) SYS_ARCH_DECL_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   160  #define PPPOS_PROTECT(lev) SYS_ARCH_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   161  #define PPPOS_UNPROTECT(lev) SYS_ARCH_UNPROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   162  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   163  #define PPPOS_DECL_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   164  #define PPPOS_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   165  #define PPPOS_UNPROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   166  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   167  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   168  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   169  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   170   * Create a new PPP connection using the given serial I/O device.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   171   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   172   * Return 0 on success, an error code on failure.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   173   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   174  ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   175         ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   176  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   177    pppos_pcb *pppos;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   178    ppp_pcb *ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   179    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   181    pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   182    if (pppos == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   183      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   184    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   185  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   186    ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   187    if (ppp == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   188      LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   189      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   190    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   191  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   192    memset(pppos, 0, sizeof(pppos_pcb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   193    pppos->ppp = ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   194    pppos->output_cb = output_cb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   195    return ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   196  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   197  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   198  /* Called by PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   199  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   200  pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   201  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   202    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   203    u8_t *s;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   204    struct pbuf *nb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   205    u16_t n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   206    u16_t fcs_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   207    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   208    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   209  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   210    /* Grab an output buffer. Using PBUF_POOL here for tx is ok since the pbuf
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   211       gets freed by 'pppos_output_last' before this function returns and thus
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   212       cannot starve rx. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   213    nb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   214    if (nb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   215      PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   216      LINK_STATS_INC(link.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   217      LINK_STATS_INC(link.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   218      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   219      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   220      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   221    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   222  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   223    /* Set nb->tot_len to actual payload length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   224    nb->tot_len = p->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   225  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   226    /* If the link has been idle, we'll send a fresh flag character to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   227     * flush any noise. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   228    err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   229    if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   230      err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   231    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   232  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   233    /* Load output buffer. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   234    fcs_out = PPP_INITFCS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   235    s = (u8_t*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   236    n = p->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   237    while (n-- > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   238      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   239    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   240  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   241    err = pppos_output_last(pppos, err, nb, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   242    if (err == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   243      PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   244    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   245      PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   246    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   247    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   248    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   249  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   250  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   251  /* Called by PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   252  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   253  pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   254  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   255    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   256    struct pbuf *nb, *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   257    u16_t fcs_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   258    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   259    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   260  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   261    /* Grab an output buffer. Using PBUF_POOL here for tx is ok since the pbuf
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   262       gets freed by 'pppos_output_last' before this function returns and thus
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   263       cannot starve rx. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   264    nb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   265    if (nb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   266      PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   267      LINK_STATS_INC(link.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   268      LINK_STATS_INC(link.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   269      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   270      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   271    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   272  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   273    /* Set nb->tot_len to actual payload length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   274    nb->tot_len = pb->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   275  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   276    /* If the link has been idle, we'll send a fresh flag character to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   277     * flush any noise. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   278    err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   279    if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   280      err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   281    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   282  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   283    fcs_out = PPP_INITFCS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   284    if (!pppos->accomp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   285      err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   286      err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   287    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   288    if (!pppos->pcomp || protocol > 0xFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   289      err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   290    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   291    err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   292  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   293    /* Load packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   294    for(p = pb; p; p = p->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   295      u16_t n = p->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   296      u8_t *s = (u8_t*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   297  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   298      while (n-- > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   299        err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   300      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   301    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   302  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   303    err = pppos_output_last(pppos, err, nb, &fcs_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   304    if (err == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   305      PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   306    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   307      PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   308    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   309    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   310  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   311  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   312  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   313  pppos_connect(ppp_pcb *ppp, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   314  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   315    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   316    PPPOS_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   317  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   318  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   319    /* input pbuf left over from last session? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   320    pppos_input_free_current_packet(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   321  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   322  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   323    /* reset PPPoS control block to its initial state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   324    memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   325  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   326    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   327     * Default the in and out accm so that escape and flag characters
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   328     * are always escaped.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   329     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   330    pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   331    pppos->out_accm[15] = 0x60;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   332    PPPOS_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   333    pppos->open = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   334    PPPOS_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   335  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   336    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   337     * Start the connection and handle incoming events (packet or timeout).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   338     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   339    PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   340    ppp_start(ppp); /* notify upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   341  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   342  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   343  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   344  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   345  pppos_listen(ppp_pcb *ppp, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   346  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   347    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   348    PPPOS_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   349  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   350  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   351    /* input pbuf left over from last session? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   352    pppos_input_free_current_packet(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   353  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   355    /* reset PPPoS control block to its initial state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   356    memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   357  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   358    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   359     * Default the in and out accm so that escape and flag characters
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   360     * are always escaped.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   361     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   362    pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   363    pppos->out_accm[15] = 0x60;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   364    PPPOS_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   365    pppos->open = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   366    PPPOS_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   367  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   368    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   369     * Wait for something to happen.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   370     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   371    PPPDEBUG(LOG_INFO, ("pppos_listen: unit %d: listening\n", ppp->netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   372    ppp_start(ppp); /* notify upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   373  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   374  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   375  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   376  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   377  pppos_disconnect(ppp_pcb *ppp, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   378  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   379    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   380    PPPOS_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   381  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   382    PPPOS_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   383    pppos->open = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   384    PPPOS_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   385  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   386    /* If PPP_INPROC_IRQ_SAFE is used we cannot call
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   387     * pppos_input_free_current_packet() here because
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   388     * rx IRQ might still call pppos_input().
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   389     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   390  #if !PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   391    /* input pbuf left ? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   392    pppos_input_free_current_packet(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   393  #endif /* !PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   394  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   395    ppp_link_end(ppp); /* notify upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   396  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   397  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   398  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   399  pppos_destroy(ppp_pcb *ppp, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   400  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   401    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   402    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   403  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   404  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   405    /* input pbuf left ? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   406    pppos_input_free_current_packet(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   407  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   408  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   409    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   410    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   411  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   412  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   413  #if !NO_SYS && !PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   414  /** Pass received raw characters to PPPoS to be decoded through lwIP TCPIP thread.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   415   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   416   * This is one of the only functions that may be called outside of the TCPIP thread!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   417   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   418   * @param ppp PPP descriptor index, returned by pppos_create()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   419   * @param s received data
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   420   * @param l length of received data
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   421   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   422  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   423  pppos_input_tcpip(ppp_pcb *ppp, u8_t *s, int l)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   424  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   425    struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   426    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   427  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   428    p = pbuf_alloc(PBUF_RAW, l, PBUF_POOL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   429    if (!p) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   430      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   431    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   432    pbuf_take(p, s, l);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   433  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   434    err = tcpip_inpkt(p, ppp_netif(ppp), pppos_input_sys);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   435    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   436       pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   437    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   438    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   439  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   440  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   441  /* called from TCPIP thread */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   442  err_t pppos_input_sys(struct pbuf *p, struct netif *inp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   443    ppp_pcb *ppp = (ppp_pcb*)inp->state;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   444    struct pbuf *n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   445    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   446  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   447    for (n = p; n; n = n->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   448      pppos_input(ppp, (u8_t*)n->payload, n->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   449    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   450    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   451    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   452  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   453  #endif /* !NO_SYS && !PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   455  /** PPPoS input helper struct, must be packed since it is stored
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   456   * to pbuf->payload, which might be unaligned. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   457  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   458  #ifdef PACK_STRUCT_USE_INCLUDES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   459  #  include "arch/bpstruct.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   460  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   461  PACK_STRUCT_BEGIN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   462  struct pppos_input_header {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   463    PACK_STRUCT_FIELD(ppp_pcb *ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   464  } PACK_STRUCT_STRUCT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   465  PACK_STRUCT_END
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   466  #ifdef PACK_STRUCT_USE_INCLUDES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   467  #  include "arch/epstruct.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   468  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   469  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   470  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   471  /** Pass received raw characters to PPPoS to be decoded.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   472   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   473   * @param ppp PPP descriptor index, returned by pppos_create()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   474   * @param s received data
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   475   * @param l length of received data
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   476   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   477  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   478  pppos_input(ppp_pcb *ppp, u8_t *s, int l)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   479  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   480    pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   481    struct pbuf *next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   482    u8_t cur_char;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   483    u8_t escaped;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   484    PPPOS_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   485  #if !PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   486    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   487  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   488  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   489    PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   490    while (l-- > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   491      cur_char = *s++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   492  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   493      PPPOS_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   494      /* ppp_input can disconnect the interface, we need to abort to prevent a memory
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   495       * leak if there are remaining bytes because pppos_connect and pppos_listen
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   496       * functions expect input buffer to be free. Furthermore there are no real
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   497       * reason to continue reading bytes if we are disconnected.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   498       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   499      if (!pppos->open) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   500        PPPOS_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   501        return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   502      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   503      escaped = ESCAPE_P(pppos->in_accm, cur_char);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   504      PPPOS_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   505      /* Handle special characters. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   506      if (escaped) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   507        /* Check for escape sequences. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   508        /* XXX Note that this does not handle an escaped 0x5d character which
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   509         * would appear as an escape character.  Since this is an ASCII ']'
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   510         * and there is no reason that I know of to escape it, I won't complicate
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   511         * the code to handle this case. GLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   512        if (cur_char == PPP_ESCAPE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   513          pppos->in_escaped = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   514        /* Check for the flag character. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   515        } else if (cur_char == PPP_FLAG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   516          /* If this is just an extra flag character, ignore it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   517          if (pppos->in_state <= PDADDRESS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   518            /* ignore it */;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   519          /* If we haven't received the packet header, drop what has come in. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   520          } else if (pppos->in_state < PDDATA) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   521            PPPDEBUG(LOG_WARNING,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   522                     ("pppos_input[%d]: Dropping incomplete packet %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   523                      ppp->netif->num, pppos->in_state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   524            LINK_STATS_INC(link.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   525            pppos_input_drop(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   526          /* If the fcs is invalid, drop the packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   527          } else if (pppos->in_fcs != PPP_GOODFCS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   528            PPPDEBUG(LOG_INFO,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   529                     ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   530                      ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   531            /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   532            LINK_STATS_INC(link.chkerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   533            pppos_input_drop(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   534          /* Otherwise it's a good packet so pass it on. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   535          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   536            struct pbuf *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   537            /* Trim off the checksum. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   538            if(pppos->in_tail->len > 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   539              pppos->in_tail->len -= 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   540  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   541              pppos->in_tail->tot_len = pppos->in_tail->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   542              if (pppos->in_tail != pppos->in_head) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   543                pbuf_cat(pppos->in_head, pppos->in_tail);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   544              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   545            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   546              pppos->in_tail->tot_len = pppos->in_tail->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   547              if (pppos->in_tail != pppos->in_head) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   548                pbuf_cat(pppos->in_head, pppos->in_tail);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   549              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   550  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   551              pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   552            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   553  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   554            /* Dispatch the packet thereby consuming it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   555            inp = pppos->in_head;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   556            /* Packet consumed, release our references. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   557            pppos->in_head = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   558            pppos->in_tail = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   559  #if IP_FORWARD || LWIP_IPV6_FORWARD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   560            /* hide the room for Ethernet forwarding header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   561            pbuf_remove_header(inp, PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   562  #endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   563  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   564            if(tcpip_try_callback(pppos_input_callback, inp) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   565              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: tcpip_callback() failed, dropping packet\n", ppp->netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   566              pbuf_free(inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   567              LINK_STATS_INC(link.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   568              MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   569            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   570  #else /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   571            ppp_input(ppp, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   572  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   573          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   574  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   575          /* Prepare for a new packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   576          pppos->in_fcs = PPP_INITFCS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   577          pppos->in_state = PDADDRESS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   578          pppos->in_escaped = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   579        /* Other characters are usually control characters that may have
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   580         * been inserted by the physical layer so here we just drop them. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   581        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   582          PPPDEBUG(LOG_WARNING,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   583                   ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   584        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   585      /* Process other characters. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   586      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   587        /* Unencode escaped characters. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   588        if (pppos->in_escaped) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   589          pppos->in_escaped = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   590          cur_char ^= PPP_TRANS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   591        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   592  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   593        /* Process character relative to current state. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   594        switch(pppos->in_state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   595          case PDIDLE:                    /* Idle state - waiting. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   596            /* Drop the character if it's not 0xff
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   597             * we would have processed a flag character above. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   598            if (cur_char != PPP_ALLSTATIONS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   599              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   600            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   601            /* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   602            /* Fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   603  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   604          case PDSTART:                   /* Process start flag. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   605            /* Prepare for a new packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   606            pppos->in_fcs = PPP_INITFCS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   607            /* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   608            /* Fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   609  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   610          case PDADDRESS:                 /* Process address field. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   611            if (cur_char == PPP_ALLSTATIONS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   612              pppos->in_state = PDCONTROL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   613              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   614            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   615            /* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   616  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   617            /* Else assume compressed address and control fields so
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   618             * fall through to get the protocol... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   619            /* Fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   620          case PDCONTROL:                 /* Process control field. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   621            /* If we don't get a valid control code, restart. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   622            if (cur_char == PPP_UI) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   623              pppos->in_state = PDPROTOCOL1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   624              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   625            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   626            /* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   627  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   628  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   629            else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   630              PPPDEBUG(LOG_WARNING,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   631                       ("pppos_input[%d]: Invalid control <%d>\n", ppp->netif->num, cur_char));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   632              pppos->in_state = PDSTART;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   633            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   634  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   635            /* Fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   636  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   637        case PDPROTOCOL1:               /* Process protocol field 1. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   638            /* If the lower bit is set, this is the end of the protocol
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   639             * field. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   640            if (cur_char & 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   641              pppos->in_protocol = cur_char;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   642              pppos->in_state = PDDATA;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   643            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   644              pppos->in_protocol = (u16_t)cur_char << 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   645              pppos->in_state = PDPROTOCOL2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   646            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   647            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   648          case PDPROTOCOL2:               /* Process protocol field 2. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   649            pppos->in_protocol |= cur_char;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   650            pppos->in_state = PDDATA;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   651            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   652          case PDDATA:                    /* Process data byte. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   653            /* Make space to receive processed data. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   654            if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   655              u16_t pbuf_alloc_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   656              if (pppos->in_tail != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   657                pppos->in_tail->tot_len = pppos->in_tail->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   658                if (pppos->in_tail != pppos->in_head) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   659                  pbuf_cat(pppos->in_head, pppos->in_tail);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   660                  /* give up the in_tail reference now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   661                  pppos->in_tail = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   662                }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   663              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   664              /* If we haven't started a packet, we need a packet header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   665              pbuf_alloc_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   666  #if IP_FORWARD || LWIP_IPV6_FORWARD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   667              /* If IP forwarding is enabled we are reserving PBUF_LINK_ENCAPSULATION_HLEN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   668               * + PBUF_LINK_HLEN bytes so the packet is being allocated with enough header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   669               * space to be forwarded (to Ethernet for example).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   670               */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   671              if (pppos->in_head == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   672                pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   673              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   674  #endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   675              next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   676              if (next_pbuf == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   677                /* No free buffers.  Drop the input packet and let the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   678                 * higher layers deal with it.  Continue processing
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   679                 * the received pbuf chain in case a new packet starts. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   680                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   681                LINK_STATS_INC(link.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   682                pppos_input_drop(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   683                pppos->in_state = PDSTART;  /* Wait for flag sequence. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   684                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   685              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   686              if (pppos->in_head == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   687                u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   688  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   689                ((struct pppos_input_header*)payload)->ppp = ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   690                payload += sizeof(struct pppos_input_header);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   691                next_pbuf->len += sizeof(struct pppos_input_header);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   692  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   693                next_pbuf->len += sizeof(pppos->in_protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   694                *(payload++) = pppos->in_protocol >> 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   695                *(payload) = pppos->in_protocol & 0xFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   696                pppos->in_head = next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   697              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   698              pppos->in_tail = next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   699            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   700            /* Load character into buffer. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   701            ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   702            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   703          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   704            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   705        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   706  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   707        /* update the frame check sequence number. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   708        pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   709      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   710    } /* while (l-- > 0), all bytes processed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   711  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   712  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   713  #if PPP_INPROC_IRQ_SAFE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   714  /* PPPoS input callback using one input pointer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   715   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   716  static void pppos_input_callback(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   717    struct pbuf *pb = (struct pbuf*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   718    ppp_pcb *ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   719  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   720    ppp = ((struct pppos_input_header*)pb->payload)->ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   721    if(pbuf_remove_header(pb, sizeof(struct pppos_input_header))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   722      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   723      goto drop;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   724    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   725  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   726    /* Dispatch the packet thereby consuming it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   727    ppp_input(ppp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   728    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   729  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   730  drop:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   731    LINK_STATS_INC(link.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   732    MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   733    pbuf_free(pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   734  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   735  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   736  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   737  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   738  pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   739  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   740    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   741    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   742    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   743  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   744    pppos->pcomp = pcomp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   745    pppos->accomp = accomp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   746  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   747    /* Load the ACCM bits for the 32 control codes. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   748    for (i = 0; i < 32/8; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   749      pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   750    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   751  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   752    PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   753              pppos->ppp->netif->num,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   754              pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   755  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   756  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   757  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   758  pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   759  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   760    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   761    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   762    PPPOS_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   763    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   764    LWIP_UNUSED_ARG(pcomp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   765    LWIP_UNUSED_ARG(accomp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   766  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   767    /* Load the ACCM bits for the 32 control codes. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   768    PPPOS_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   769    for (i = 0; i < 32 / 8; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   770      pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   771    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   772    PPPOS_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   773  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   774    PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   775              pppos->ppp->netif->num,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   776              pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   777  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   778  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   779  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   780   * Drop the input packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   781   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   782  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   783  pppos_input_free_current_packet(pppos_pcb *pppos)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   784  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   785    if (pppos->in_head != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   786      if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   787        pbuf_free(pppos->in_tail);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   788      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   789      pbuf_free(pppos->in_head);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   790      pppos->in_head = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   791    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   792    pppos->in_tail = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   793  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   794  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   795  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   796   * Drop the input packet and increase error counters.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   797   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   798  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   799  pppos_input_drop(pppos_pcb *pppos)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   800  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   801    if (pppos->in_head != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   802  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   803      PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   804  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   805      PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   806    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   807    pppos_input_free_current_packet(pppos);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   808  #if VJ_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   809    vj_uncompress_err(&pppos->ppp->vj_comp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   810  #endif /* VJ_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   811  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   812    LINK_STATS_INC(link.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   813    MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   814  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   815  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   816  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   817   * pppos_output_append - append given character to end of given pbuf.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   818   * If out_accm is not 0 and the character needs to be escaped, do so.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   819   * If pbuf is full, send the pbuf and reuse it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   820   * Return the current pbuf.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   821   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   822  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   823  pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   824  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   825    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   826      return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   827    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   828  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   829    /* Make sure there is room for the character and an escape code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   830     * Sure we don't quite fill the buffer if the character doesn't
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   831     * get escaped but is one character worth complicating this? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   832    if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   833      u32_t l = pppos->output_cb(pppos->ppp, (u8_t*)nb->payload, nb->len, pppos->ppp->ctx_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   834      if (l != nb->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   835        return ERR_IF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   836      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   837      nb->len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   838    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   839  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   840    /* Update FCS before checking for special characters. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   841    if (fcs) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   842      *fcs = PPP_FCS(*fcs, c);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   843    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   844  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   845    /* Copy to output buffer escaping special characters. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   846    if (accm && ESCAPE_P(pppos->out_accm, c)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   847      *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   848      *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   849    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   850      *((u8_t*)nb->payload + nb->len++) = c;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   851    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   852  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   853    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   854  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   855  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   856  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   857  pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   858  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   859    ppp_pcb *ppp = pppos->ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   860  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   861    /* Add FCS and trailing flag. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   862    err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   863    err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   864    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   865  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   866    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   867      goto failed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   868    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   869  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   870    /* Send remaining buffer if not empty */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   871    if (nb->len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   872      u32_t l = pppos->output_cb(ppp, (u8_t*)nb->payload, nb->len, ppp->ctx_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   873      if (l != nb->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   874        err = ERR_IF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   875        goto failed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   876      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   877    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   878  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   879    pppos->last_xmit = sys_now();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   880    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   881    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   882    LINK_STATS_INC(link.xmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   883    pbuf_free(nb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   884    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   885  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   886  failed:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   887    pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   888    LINK_STATS_INC(link.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   889    LINK_STATS_INC(link.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   890    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   891    pbuf_free(nb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   892    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   893  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   894  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppos.c	   895  #endif /* PPP_SUPPORT && PPPOS_SUPPORT */

	; Module end
