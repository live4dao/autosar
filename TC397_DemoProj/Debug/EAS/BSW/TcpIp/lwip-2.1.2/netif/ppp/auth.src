	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc29580a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.auth.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\auth.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\auth.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\auth.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\auth.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4547
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\auth.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	168
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	170
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	193
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	193
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	240
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	277
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	193
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	193
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	240
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	376
	.byte	3
	.word	193
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	470
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	499
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	193
	.byte	8,4
	.word	277
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	604
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	613
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	240
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	604
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	686
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	193
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	613
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	613
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	928
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	193
	.byte	8,3
	.word	193
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1085
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1094
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	240
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1228
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	193
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	193
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	193
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1339
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	193
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	193
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	193
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	193
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	193
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	193
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	240
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	240
	.byte	8,1
	.word	193
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1793
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1793
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1802
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1878
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	686
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2014
	.byte	12
	.word	193
	.byte	3
	.word	2128
	.byte	12
	.word	193
	.byte	3
	.word	2138
	.byte	12
	.word	193
	.byte	3
	.word	2148
	.byte	12
	.word	1878
	.byte	3
	.word	2158
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	240
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	193
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	193
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	193
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	193
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	686
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2133
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2143
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2153
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2163
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2168
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	277
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	277
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	277
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2520
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	277
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2670
	.byte	12
	.word	2520
	.byte	3
	.word	2807
	.byte	12
	.word	2670
	.byte	3
	.word	2817
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	193
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	193
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	240
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2163
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2812
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2822
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2827
	.byte	12
	.word	193
	.byte	3
	.word	3112
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3117
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3117
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3122
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1878
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	193
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	193
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3286
	.byte	3
	.word	1802
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	277
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	193
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	193
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	240
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3431
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	470
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3436
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	277
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1878
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	193
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	193
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3431
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3651
	.byte	12
	.word	3436
	.byte	3
	.word	3821
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	240
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	470
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	240
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	240
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3117
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3826
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3831
	.byte	12
	.word	3651
	.byte	3
	.word	4055
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4060
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4065
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	470
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4165
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	470
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4262
	.byte	8,8
	.word	193
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4356
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4065
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4065
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4262
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4165
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4365
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	193
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\auth.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     1  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     2   * auth.c - PPP authentication and phase control.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     4   * Copyright (c) 1993-2002 Paul Mackerras. All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     5   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     7   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     8   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    12   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    13   * 2. The name(s) of the authors of this software must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    14   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    15   *    prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    16   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    17   * 3. Redistributions of any form whatsoever must retain the following
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    18   *    acknowledgment:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    19   *    "This product includes software developed by Paul Mackerras
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    20   *     <paulus@samba.org>".
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    21   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    22   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    23   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    24   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    25   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    26   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    27   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    28   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    29   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    30   * Derived from main.c, which is:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    31   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    32   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    34   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    35   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    36   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    37   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    38   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    39   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    40   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    41   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    42   *    notice, this list of conditions and the following disclaimer in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    43   *    the documentation and/or other materials provided with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    44   *    distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    45   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    46   * 3. The name "Carnegie Mellon University" must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    47   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    48   *    prior written permission. For permission or any legal
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    49   *    details, please contact
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    50   *      Office of Technology Transfer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    51   *      Carnegie Mellon University
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    52   *      5000 Forbes Avenue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    53   *      Pittsburgh, PA  15213-3890
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    54   *      (412) 268-4387, fax: (412) 268-7395
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    55   *      tech-transfer@andrew.cmu.edu
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    56   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    57   * 4. Redistributions of any form whatsoever must retain the following
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    58   *    acknowledgment:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    59   *    "This product includes software developed by Computing Services
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    60   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    61   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    62   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    63   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    64   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    65   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    66   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    67   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    68   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    69   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    70  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    71  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    72  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    73  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    74  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    75  #include <stdio.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    76  #include <stddef.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    77  #include <stdlib.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    78  #include <unistd.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    79  #include <errno.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    80  #include <pwd.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    81  #include <grp.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    82  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    83  #include <sys/types.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    84  #include <sys/stat.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    85  #include <sys/socket.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    86  #include <utmp.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    87  #include <fcntl.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    88  #if defined(_PATH_LASTLOG) && defined(__linux__)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    89  #include <lastlog.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    90  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    91  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    92  #include <netdb.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    93  #include <netinet/in.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    94  #include <arpa/inet.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    95  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    96  #ifdef HAS_SHADOW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    97  #include <shadow.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    98  #ifndef PW_PPP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	    99  #define PW_PPP PW_LOGIN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   100  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   101  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   102  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   103  #include <time.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   104  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   105  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   106  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   107  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   108  #include "netif/ppp/fsm.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   109  #include "netif/ppp/lcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   110  #if CCP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   111  #include "netif/ppp/ccp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   112  #endif /* CCP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   113  #if ECP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   114  #include "netif/ppp/ecp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   115  #endif /* ECP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   116  #include "netif/ppp/ipcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   117  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   118  #include "netif/ppp/upap.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   119  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   120  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   121  #include "netif/ppp/chap-new.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   122  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   123  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   124  #include "netif/ppp/eap.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   125  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   126  #if CBCP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   127  #include "netif/ppp/cbcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   128  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   129  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   130  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   131  #include "session.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   132  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   133  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   134  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   135  /* Bits in scan_authfile return value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   136  #define NONWILD_SERVER	1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   137  #define NONWILD_CLIENT	2
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   138  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   139  #define ISWILD(word)	(word[0] == '*' && word[1] == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   140  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   141  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   142  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   143  /* List of addresses which the peer may use. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   144  static struct permitted_ip *addresses[NUM_PPP];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   145  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   146  /* Wordlist giving addresses which the peer may use
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   147     without authenticating itself. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   148  static struct wordlist *noauth_addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   149  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   150  /* Remote telephone number, if available */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   151  char remote_number[MAXNAMELEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   152  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   153  /* Wordlist giving remote telephone numbers which may connect. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   154  static struct wordlist *permitted_numbers;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   155  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   156  /* Extra options to apply, from the secrets file entry for the peer. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   157  static struct wordlist *extra_options;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   158  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   159  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   160  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   161  /* Set if we require authentication only because we have a default route. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   162  static bool default_auth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   163  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   164  /* Hook to enable a plugin to control the idle time limit */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   165  int (*idle_time_hook) (struct ppp_idle *) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   166  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   167  /* Hook for a plugin to say whether we can possibly authenticate any peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   168  int (*pap_check_hook) (void) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   169  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   170  /* Hook for a plugin to check the PAP user and password */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   171  int (*pap_auth_hook) (char *user, char *passwd, char **msgp,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   172  			  struct wordlist **paddrs,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   173  			  struct wordlist **popts) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   174  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   175  /* Hook for a plugin to know about the PAP user logout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   176  void (*pap_logout_hook) (void) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   177  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   178  /* Hook for a plugin to get the PAP password for authenticating us */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   179  int (*pap_passwd_hook) (char *user, char *passwd) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   181  /* Hook for a plugin to say if we can possibly authenticate a peer using CHAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   182  int (*chap_check_hook) (void) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   183  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   184  /* Hook for a plugin to get the CHAP password for authenticating us */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   185  int (*chap_passwd_hook) (char *user, char *passwd) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   186  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   187  /* Hook for a plugin to say whether it is OK if the peer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   188     refuses to authenticate. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   189  int (*null_auth_hook) (struct wordlist **paddrs,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   190  			   struct wordlist **popts) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   191  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   192  int (*allowed_address_hook) (u32_t addr) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   193  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   194  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   195  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   196  /* Hook for plugin to hear when an interface joins a multilink bundle */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   197  void (*multilink_join_hook) (void) = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   198  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   199  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   200  #if PPP_NOTIFY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   201  /* A notifier for when the peer has authenticated itself,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   202     and we are proceeding to the network phase. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   203  struct notifier *auth_up_notifier = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   204  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   205  /* A notifier for when the link goes down. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   206  struct notifier *link_down_notifier = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   207  #endif /* PPP_NOTIFY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   208  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   209  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   210   * Option variables.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   211   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   212  #if 0 /* MOVED TO ppp_settings */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   213  bool uselogin = 0;		/* Use /etc/passwd for checking PAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   214  bool session_mgmt = 0;		/* Do session management (login records) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   215  bool cryptpap = 0;		/* Passwords in pap-secrets are encrypted */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   216  bool refuse_pap = 0;		/* Don't wanna auth. ourselves with PAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   217  bool refuse_chap = 0;		/* Don't wanna auth. ourselves with CHAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   218  bool refuse_eap = 0;		/* Don't wanna auth. ourselves with EAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   219  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   220  bool refuse_mschap = 0;		/* Don't wanna auth. ourselves with MS-CHAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   221  bool refuse_mschap_v2 = 0;	/* Don't wanna auth. ourselves with MS-CHAPv2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   222  #else /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   223  bool refuse_mschap = 1;		/* Don't wanna auth. ourselves with MS-CHAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   224  bool refuse_mschap_v2 = 1;	/* Don't wanna auth. ourselves with MS-CHAPv2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   225  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   226  bool usehostname = 0;		/* Use hostname for our_name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   227  bool auth_required = 0;		/* Always require authentication from peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   228  bool allow_any_ip = 0;		/* Allow peer to use any IP address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   229  bool explicit_remote = 0;	/* User specified explicit remote name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   230  bool explicit_user = 0;		/* Set if "user" option supplied */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   231  bool explicit_passwd = 0;	/* Set if "password" option supplied */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   232  char remote_name[MAXNAMELEN];	/* Peer's name for authentication */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   233  static char *uafname;		/* name of most recent +ua file */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   234  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   235  extern char *crypt (const char *, const char *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   236  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   237  /* Prototypes for procedures local to this file. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   238  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   239  static void network_phase(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   240  #if PPP_IDLETIMELIMIT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   241  static void check_idle(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   242  #endif /* PPP_IDLETIMELIMIT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   243  #if PPP_MAXCONNECT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   244  static void connect_time_expired(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   245  #endif /* PPP_MAXCONNECT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   246  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   247  static int  null_login (int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   248  /* static int  get_pap_passwd (char *); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   249  static int  have_pap_secret (int *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   250  static int  have_chap_secret (char *, char *, int, int *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   251  static int  have_srp_secret (char *client, char *server, int need_ip,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   252      int *lacks_ipp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   253  static int  ip_addr_check (u32_t, struct permitted_ip *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   254  static int  scan_authfile (FILE *, char *, char *, char *,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   255  			       struct wordlist **, struct wordlist **,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   256  			       char *, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   257  static void free_wordlist (struct wordlist *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   258  static void set_allowed_addrs (int, struct wordlist *, struct wordlist *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   259  static int  some_ip_ok (struct wordlist *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   260  static int  setupapfile (char **);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   261  static int  privgroup (char **);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   262  static int  set_noauth_addr (char **);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   263  static int  set_permitted_number (char **);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   264  static void check_access (FILE *, char *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   265  static int  wordlist_count (struct wordlist *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   266  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   267  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   268  #ifdef MAXOCTETS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   269  static void check_maxoctets (void *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   270  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   271  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   272  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   273  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   274   * Authentication-related options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   275   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   276  option_t auth_options[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   277      { "auth", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   278        "Require authentication from peer", OPT_PRIO | 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   279      { "noauth", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   280        "Don't require peer to authenticate", OPT_PRIOSUB | OPT_PRIV,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   281        &allow_any_ip },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   282      { "require-pap", o_bool, &lcp_wantoptions[0].neg_upap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   283        "Require PAP authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   284        OPT_PRIOSUB | 1, &auth_required },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   285      { "+pap", o_bool, &lcp_wantoptions[0].neg_upap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   286        "Require PAP authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   287        OPT_ALIAS | OPT_PRIOSUB | 1, &auth_required },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   288      { "require-chap", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   289        "Require CHAP authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   290        OPT_PRIOSUB | OPT_A2OR | MDTYPE_MD5,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   291        &lcp_wantoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   292      { "+chap", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   293        "Require CHAP authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   294        OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MD5,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   295        &lcp_wantoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   296  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   297      { "require-mschap", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   298        "Require MS-CHAP authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   299        OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   300        &lcp_wantoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   301      { "+mschap", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   302        "Require MS-CHAP authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   303        OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   304        &lcp_wantoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   305      { "require-mschap-v2", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   306        "Require MS-CHAPv2 authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   307        OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT_V2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   308        &lcp_wantoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   309      { "+mschap-v2", o_bool, &auth_required,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   310        "Require MS-CHAPv2 authentication from peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   311        OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT_V2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   312        &lcp_wantoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   313  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   314  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   315      { "refuse-pap", o_bool, &refuse_pap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   316        "Don't agree to auth to peer with PAP", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   317      { "-pap", o_bool, &refuse_pap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   318        "Don't allow PAP authentication with peer", OPT_ALIAS | 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   319      { "refuse-chap", o_bool, &refuse_chap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   320        "Don't agree to auth to peer with CHAP",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   321        OPT_A2CLRB | MDTYPE_MD5,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   322        &lcp_allowoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   323      { "-chap", o_bool, &refuse_chap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   324        "Don't allow CHAP authentication with peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   325        OPT_ALIAS | OPT_A2CLRB | MDTYPE_MD5,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   326        &lcp_allowoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   327  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   328  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   329  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   330      { "refuse-mschap", o_bool, &refuse_mschap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   331        "Don't agree to auth to peer with MS-CHAP",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   332        OPT_A2CLRB | MDTYPE_MICROSOFT,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   333        &lcp_allowoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   334      { "-mschap", o_bool, &refuse_mschap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   335        "Don't allow MS-CHAP authentication with peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   336        OPT_ALIAS | OPT_A2CLRB | MDTYPE_MICROSOFT,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   337        &lcp_allowoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   338      { "refuse-mschap-v2", o_bool, &refuse_mschap_v2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   339        "Don't agree to auth to peer with MS-CHAPv2",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   340        OPT_A2CLRB | MDTYPE_MICROSOFT_V2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   341        &lcp_allowoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   342      { "-mschap-v2", o_bool, &refuse_mschap_v2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   343        "Don't allow MS-CHAPv2 authentication with peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   344        OPT_ALIAS | OPT_A2CLRB | MDTYPE_MICROSOFT_V2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   345        &lcp_allowoptions[0].chap_mdtype },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   346  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   347  #endif /* MSCHAP_SUPPORT*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   348  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   349      { "require-eap", o_bool, &lcp_wantoptions[0].neg_eap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   350        "Require EAP authentication from peer", OPT_PRIOSUB | 1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   351        &auth_required },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   352  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   353      { "refuse-eap", o_bool, &refuse_eap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   354        "Don't agree to authenticate to peer with EAP", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   355  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   356  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   357      { "name", o_string, our_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   358        "Set local name for authentication",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   359        OPT_PRIO | OPT_PRIV | OPT_STATIC, NULL, MAXNAMELEN },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   360  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   361      { "+ua", o_special, (void *)setupapfile,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   362        "Get PAP user and password from file",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   363        OPT_PRIO | OPT_A2STRVAL, &uafname },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   364  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   365  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   366      { "user", o_string, user,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   367        "Set name for auth with peer", OPT_PRIO | OPT_STATIC,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   368        &explicit_user, MAXNAMELEN },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   369  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   370      { "password", o_string, passwd,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   371        "Password for authenticating us to the peer",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   372        OPT_PRIO | OPT_STATIC | OPT_HIDE,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   373        &explicit_passwd, MAXSECRETLEN },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   374  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   375  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   376      { "usehostname", o_bool, &usehostname,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   377        "Must use hostname for authentication", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   378  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   379      { "remotename", o_string, remote_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   380        "Set remote name for authentication", OPT_PRIO | OPT_STATIC,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   381        &explicit_remote, MAXNAMELEN },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   383      { "login", o_bool, &uselogin,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   384        "Use system password database for PAP", OPT_A2COPY | 1 ,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   385        &session_mgmt },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   386      { "enable-session", o_bool, &session_mgmt,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   387        "Enable session accounting for remote peers", OPT_PRIV | 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   388  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   389      { "papcrypt", o_bool, &cryptpap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   390        "PAP passwords are encrypted", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   391  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   392      { "privgroup", o_special, (void *)privgroup,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   393        "Allow group members to use privileged options", OPT_PRIV | OPT_A2LIST },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   394  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   395      { "allow-ip", o_special, (void *)set_noauth_addr,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   396        "Set IP address(es) which can be used without authentication",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   397        OPT_PRIV | OPT_A2LIST },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   398  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   399      { "remotenumber", o_string, remote_number,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   400        "Set remote telephone number for authentication", OPT_PRIO | OPT_STATIC,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   401        NULL, MAXNAMELEN },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   403      { "allow-number", o_special, (void *)set_permitted_number,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   404        "Set telephone number(s) which are allowed to connect",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   405        OPT_PRIV | OPT_A2LIST },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   406  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   407      { NULL }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   408  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   409  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   410  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   411  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   412  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   413   * setupapfile - specifies UPAP info for authenticating with peer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   414   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   415  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   416  setupapfile(argv)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   417      char **argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   418  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   419      FILE *ufile;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   420      int l;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   421      uid_t euid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   422      char u[MAXNAMELEN], p[MAXSECRETLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   423      char *fname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   424  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   425      lcp_allowoptions[0].neg_upap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   426  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   427      /* open user info file */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   428      fname = strdup(*argv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   429      if (fname == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   430  	novm("+ua file name");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   431      euid = geteuid();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   432      if (seteuid(getuid()) == -1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   433  	option_error("unable to reset uid before opening %s: %m", fname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   434  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   435      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   436      ufile = fopen(fname, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   437      if (seteuid(euid) == -1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   438  	fatal("unable to regain privileges: %m");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   439      if (ufile == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   440  	option_error("unable to open user login data file %s", fname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   441  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   442      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   443      check_access(ufile, fname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   444      uafname = fname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   445  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   446      /* get username */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   447      if (fgets(u, MAXNAMELEN - 1, ufile) == NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   448  	|| fgets(p, MAXSECRETLEN - 1, ufile) == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   449  	fclose(ufile);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   450  	option_error("unable to read user login data file %s", fname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   451  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   452      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   453      fclose(ufile);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   455      /* get rid of newlines */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   456      l = strlen(u);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   457      if (l > 0 && u[l-1] == '\n')
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   458  	u[l-1] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   459      l = strlen(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   460      if (l > 0 && p[l-1] == '\n')
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   461  	p[l-1] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   462  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   463      if (override_value("user", option_priority, fname)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   464  	strlcpy(ppp_settings.user, u, sizeof(ppp_settings.user));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   465  	explicit_user = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   466      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   467      if (override_value("passwd", option_priority, fname)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   468  	strlcpy(ppp_settings.passwd, p, sizeof(ppp_settings.passwd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   469  	explicit_passwd = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   470      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   471  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   472      return (1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   473  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   474  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   475  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   476   * privgroup - allow members of the group to have privileged access.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   477   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   478  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   479  privgroup(argv)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   480      char **argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   481  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   482      struct group *g;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   483      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   484  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   485      g = getgrnam(*argv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   486      if (g == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   487  	option_error("group %s is unknown", *argv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   488  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   489      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   490      for (i = 0; i < ngroups; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   491  	if (groups[i] == g->gr_gid) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   492  	    privileged = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   493  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   494  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   495      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   496      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   497  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   498  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   499  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   500  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   501   * set_noauth_addr - set address(es) that can be used without authentication.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   502   * Equivalent to specifying an entry like `"" * "" addr' in pap-secrets.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   503   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   504  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   505  set_noauth_addr(argv)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   506      char **argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   507  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   508      char *addr = *argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   509      int l = strlen(addr) + 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   510      struct wordlist *wp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   511  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   512      wp = (struct wordlist *) malloc(sizeof(struct wordlist) + l);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   513      if (wp == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   514  	novm("allow-ip argument");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   515      wp->word = (char *) (wp + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   516      wp->next = noauth_addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   517      MEMCPY(wp->word, addr, l);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   518      noauth_addrs = wp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   519      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   520  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   521  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   522  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   523  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   524   * set_permitted_number - set remote telephone number(s) that may connect.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   525   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   526  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   527  set_permitted_number(argv)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   528      char **argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   529  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   530      char *number = *argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   531      int l = strlen(number) + 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   532      struct wordlist *wp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   533  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   534      wp = (struct wordlist *) malloc(sizeof(struct wordlist) + l);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   535      if (wp == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   536  	novm("allow-number argument");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   537      wp->word = (char *) (wp + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   538      wp->next = permitted_numbers;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   539      MEMCPY(wp->word, number, l);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   540      permitted_numbers = wp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   541      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   542  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   543  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   544  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   545  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   546   * An Open on LCP has requested a change from Dead to Establish phase.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   547   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   548  void link_required(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   549      LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   550  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   551  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   552  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   553  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   554   * Bring the link up to the point of being able to do ppp.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   555   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   556  void start_link(unit)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   557      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   558  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   559      ppp_pcb *pcb = &ppp_pcb_list[unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   560      char *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   561  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   562      status = EXIT_NEGOTIATION_FAILED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   563      new_phase(pcb, PPP_PHASE_SERIALCONN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   564  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   565      hungup = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   566      devfd = the_channel->connect();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   567      msg = "Connect script failed";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   568      if (devfd < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   569  	goto fail;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   570  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   571      /* set up the serial device as a ppp interface */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   572      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   573       * N.B. we used to do tdb_writelock/tdb_writeunlock around this
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   574       * (from establish_ppp to set_ifunit).  However, we won't be
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   575       * doing the set_ifunit in multilink mode, which is the only time
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   576       * we need the atomicity that the tdb_writelock/tdb_writeunlock
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   577       * gives us.  Thus we don't need the tdb_writelock/tdb_writeunlock.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   578       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   579      fd_ppp = the_channel->establish_ppp(devfd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   580      msg = "ppp establishment failed";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   581      if (fd_ppp < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   582  	status = EXIT_FATAL_ERROR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   583  	goto disconnect;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   584      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   585  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   586      if (!demand && ifunit >= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   587  	set_ifunit(1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   588  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   589      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   590       * Start opening the connection and wait for
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   591       * incoming events (reply, timeout, etc.).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   592       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   593      if (ifunit >= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   594  	ppp_notice("Connect: %s <--> %s", ifname, ppp_devnam);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   595      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   596  	ppp_notice("Starting negotiation on %s", ppp_devnam);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   597      add_fd(fd_ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   598  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   599      new_phase(pcb, PPP_PHASE_ESTABLISH);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   600  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   601      lcp_lowerup(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   602      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   603  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   604   disconnect:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   605      new_phase(pcb, PPP_PHASE_DISCONNECT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   606      if (the_channel->disconnect)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   607  	the_channel->disconnect();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   608  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   609   fail:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   610      new_phase(pcb, PPP_PHASE_DEAD);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   611      if (the_channel->cleanup)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   612  	(*the_channel->cleanup)();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   613  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   614  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   615  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   616  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   617   * LCP has terminated the link; go to the Dead phase and take the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   618   * physical layer down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   619   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   620  void link_terminated(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   621      if (pcb->phase == PPP_PHASE_DEAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   622  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   623      || pcb->phase == PPP_PHASE_MASTER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   624  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   625      )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   626  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   627      new_phase(pcb, PPP_PHASE_DISCONNECT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   628  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   629  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   630      if (pap_logout_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   631  	pap_logout_hook();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   632      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   633      session_end(devnam);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   634  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   635  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   636      if (!doing_multilink) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   637  	ppp_notice("Connection terminated.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   638  #if PPP_STATS_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   639  	print_link_stats();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   640  #endif /* PPP_STATS_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   641      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   642  	ppp_notice("Link terminated.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   643  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   644      lcp_lowerdown(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   645  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   646      ppp_link_terminated(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   647  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   648      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   649       * Delete pid files before disestablishing ppp.  Otherwise it
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   650       * can happen that another pppd gets the same unit and then
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   651       * we delete its pid file.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   652       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   653      if (!doing_multilink && !demand)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   654  	remove_pidfiles();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   655  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   656      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   657       * If we may want to bring the link up again, transfer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   658       * the ppp unit back to the loopback.  Set the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   659       * real serial device back to its normal mode of operation.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   660       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   661      if (fd_ppp >= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   662  	remove_fd(fd_ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   663  	clean_check();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   664  	the_channel->disestablish_ppp(devfd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   665  	if (doing_multilink)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   666  	    mp_exit_bundle();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   667  	fd_ppp = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   668      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   669      if (!hungup)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   670  	lcp_lowerdown(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   671      if (!doing_multilink && !demand)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   672  	script_unsetenv("IFNAME");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   673  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   674      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   675       * Run disconnector script, if requested.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   676       * XXX we may not be able to do this if the line has hung up!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   677       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   678      if (devfd >= 0 && the_channel->disconnect) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   679  	the_channel->disconnect();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   680  	devfd = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   681      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   682      if (the_channel->cleanup)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   683  	(*the_channel->cleanup)();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   684  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   685      if (doing_multilink && multilink_master) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   686  	if (!bundle_terminating)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   687  	    new_phase(pcb, PPP_PHASE_MASTER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   688  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   689  	    mp_bundle_terminated();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   690      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   691  	new_phase(pcb, PPP_PHASE_DEAD);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   692  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   693  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   694  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   695  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   696   * LCP has gone down; it will either die or try to re-establish.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   697   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   698  void link_down(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   699  #if PPP_NOTIFY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   700      notify(link_down_notifier, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   701  #endif /* PPP_NOTIFY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   702  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   703      if (!doing_multilink) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   704  	upper_layers_down(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   705  	if (pcb->phase != PPP_PHASE_DEAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   706  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   707  	&& pcb->phase != PPP_PHASE_MASTER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   708  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   709  	)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   710  	    new_phase(pcb, PPP_PHASE_ESTABLISH);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   711      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   712      /* XXX if doing_multilink, should do something to stop
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   713         network-layer traffic on the link */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   714  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   715  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   716  void upper_layers_down(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   717      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   718      const struct protent *protp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   719  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   720      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   721          if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   722  	    (*protp->lowerdown)(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   723          if (protp->protocol < 0xC000 && protp->close != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   724  	    (*protp->close)(pcb, "LCP down");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   725      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   726      pcb->num_np_open = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   727      pcb->num_np_up = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   728  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   729  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   730  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   731   * The link is established.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   732   * Proceed to the Dead, Authenticate or Network phase as appropriate.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   733   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   734  void link_established(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   735  #if PPP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   736      int auth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   737  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   738  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   739      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   740  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   741      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   742  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   743      lcp_options *ho = &pcb->lcp_hisoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   744  #endif /* PPP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   745      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   746      const struct protent *protp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   747  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   748      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   749       * Tell higher-level protocols that LCP is up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   750       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   751      if (!doing_multilink) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   752  	for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   753  	    if (protp->protocol != PPP_LCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   754  		&& protp->lowerup != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   755  		(*protp->lowerup)(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   756      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   757  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   758  #if PPP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   759  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   760  #if PPP_ALLOWED_ADDRS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   761      if (!auth_required && noauth_addrs != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   762  	set_allowed_addrs(unit, NULL, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   763  #endif /* PPP_ALLOWED_ADDRS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   764  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   765      if (pcb->settings.auth_required && !(0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   766  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   767  	|| go->neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   768  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   769  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   770  	|| go->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   771  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   772  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   773  	|| go->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   774  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   775  	)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   776  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   777  #if PPP_ALLOWED_ADDRS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   778  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   779  	 * We wanted the peer to authenticate itself, and it refused:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   780  	 * if we have some address(es) it can use without auth, fine,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   781  	 * otherwise treat it as though it authenticated with PAP using
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   782  	 * a username of "" and a password of "".  If that's not OK,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   783  	 * boot it out.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   784  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   785  	if (noauth_addrs != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   786  	    set_allowed_addrs(unit, NULL, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   787  	} else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   788  #endif /* PPP_ALLOWED_ADDRS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   789  	if (!pcb->settings.null_login
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   790  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   791  	    || !wo->neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   792  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   793  	    ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   794  	    ppp_warn("peer refused to authenticate: terminating link");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   795  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   796  	    status = EXIT_PEER_AUTH_FAILED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   797  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   798  	    pcb->err_code = PPPERR_AUTHFAIL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   799  	    lcp_close(pcb, "peer refused to authenticate");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   800  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   801  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   802      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   803  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   804  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   805      new_phase(pcb, PPP_PHASE_AUTHENTICATE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   806      auth = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   807  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   808  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   809      if (go->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   810  	eap_authpeer(pcb, PPP_OUR_NAME);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   811  	auth |= EAP_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   812      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   813  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   814  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   815      if (go->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   816  	chap_auth_peer(pcb, PPP_OUR_NAME, CHAP_DIGEST(go->chap_mdtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   817  	auth |= CHAP_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   818      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   819  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   820  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   821      if (go->neg_upap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   822  	upap_authpeer(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   823  	auth |= PAP_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   824      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   825  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   826      {}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   827  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   828  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   829  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   830      if (ho->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   831  	eap_authwithpeer(pcb, pcb->settings.user);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   832  	auth |= EAP_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   833      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   834  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   835  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   836      if (ho->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   837  	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   838  	auth |= CHAP_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   839      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   840  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   841  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   842      if (ho->neg_upap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   843  	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   844  	auth |= PAP_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   845      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   846  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   847      {}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   848  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   849      pcb->auth_pending = auth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   850      pcb->auth_done = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   851  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   852      if (!auth)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   853  #endif /* PPP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   854  	network_phase(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   855  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   856  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   857  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   858   * Proceed to the network phase.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   859   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   860  static void network_phase(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   861  #if CBCP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   862      ppp_pcb *pcb = &ppp_pcb_list[unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   863  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   864  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   865      lcp_options *go = &lcp_gotoptions[unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   866  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   867  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   868  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   869      /* Log calling number. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   870      if (*remote_number)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   871  	ppp_notice("peer from calling number %q authorized", remote_number);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   872  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   873  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   874  #if PPP_NOTIFY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   875      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   876       * If the peer had to authenticate, notify it now.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   877       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   878      if (0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   879  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   880  	|| go->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   881  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   882  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   883  	|| go->neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   884  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   885  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   886  	|| go->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   887  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   888  	) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   889  	notify(auth_up_notifier, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   890      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   891  #endif /* PPP_NOTIFY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   892  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   893  #if CBCP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   894      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   895       * If we negotiated callback, do it now.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   896       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   897      if (go->neg_cbcp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   898  	new_phase(pcb, PPP_PHASE_CALLBACK);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   899  	(*cbcp_protent.open)(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   900  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   901      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   902  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   903  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   904  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   905      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   906       * Process extra options from the secrets file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   907       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   908      if (extra_options) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   909  	options_from_list(extra_options, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   910  	free_wordlist(extra_options);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   911  	extra_options = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   912      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   913  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   914      start_networks(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   915  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   916  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   917  void start_networks(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   918  #if CCP_SUPPORT || ECP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   919      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   920      const struct protent *protp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   921  #endif /* CCP_SUPPORT || ECP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   922  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   923      new_phase(pcb, PPP_PHASE_NETWORK);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   924  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   925  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   926      if (multilink) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   927  	if (mp_join_bundle()) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   928  	    if (multilink_join_hook)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   929  		(*multilink_join_hook)();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   930  	    if (updetach && !nodetach)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   931  		detach();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   932  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   933  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   934      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   935  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   936  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   937  #ifdef PPP_FILTER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   938      if (!demand)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   939  	set_filters(&pass_filter, &active_filter);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   940  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   941  #if CCP_SUPPORT || ECP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   942      /* Start CCP and ECP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   943      for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   944  	if (
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   945  	    (0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   946  #if ECP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   947  	    || protp->protocol == PPP_ECP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   948  #endif /* ECP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   949  #if CCP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   950  	    || protp->protocol == PPP_CCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   951  #endif /* CCP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   952  	    )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   953  	    && protp->open != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   954  	    (*protp->open)(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   955  #endif /* CCP_SUPPORT || ECP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   956  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   957      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   958       * Bring up other network protocols iff encryption is not required.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   959       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   960      if (1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   961  #if ECP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   962          && !ecp_gotoptions[unit].required
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   963  #endif /* ECP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   964  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   965          && !pcb->ccp_gotoptions.mppe
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   966  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   967          )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   968  	continue_networks(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   969  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   970  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   971  void continue_networks(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   972      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   973      const struct protent *protp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   974  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   975      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   976       * Start the "real" network protocols.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   977       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   978      for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   979  	if (protp->protocol < 0xC000
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   980  #if CCP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   981  	    && protp->protocol != PPP_CCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   982  #endif /* CCP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   983  #if ECP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   984  	    && protp->protocol != PPP_ECP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   985  #endif /* ECP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   986  	    && protp->open != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   987  	    (*protp->open)(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   988  	    ++pcb->num_np_open;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   989  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   990  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   991      if (pcb->num_np_open == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   992  	/* nothing to do */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   993  	lcp_close(pcb, "No network protocols running");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   994  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   995  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   996  #if PPP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   997  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   998  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	   999   * auth_check_passwd - Check the user name and passwd against configuration.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1000   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1001   * returns:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1002   *      0: Authentication failed.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1003   *      1: Authentication succeeded.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1004   * In either case, msg points to an appropriate message and msglen to the message len.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1005   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1006  int auth_check_passwd(ppp_pcb *pcb, char *auser, int userlen, char *apasswd, int passwdlen, const char **msg, int *msglen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1007    int secretuserlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1008    int secretpasswdlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1009  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1010    if (pcb->settings.user && pcb->settings.passwd) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1011      secretuserlen = (int)strlen(pcb->settings.user);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1012      secretpasswdlen = (int)strlen(pcb->settings.passwd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1013      if (secretuserlen == userlen
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1014          && secretpasswdlen == passwdlen
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1015          && !memcmp(auser, pcb->settings.user, userlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1016          && !memcmp(apasswd, pcb->settings.passwd, passwdlen) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1017        *msg = "Login ok";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1018        *msglen = sizeof("Login ok")-1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1019        return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1020      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1021    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1022  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1023    *msg = "Login incorrect";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1024    *msglen = sizeof("Login incorrect")-1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1025    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1026  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1027  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1028  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1029   * The peer has failed to authenticate himself using `protocol'.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1030   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1031  void auth_peer_fail(ppp_pcb *pcb, int protocol) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1032      LWIP_UNUSED_ARG(protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1033      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1034       * Authentication failure: take the link down
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1035       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1036  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1037      status = EXIT_PEER_AUTH_FAILED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1038  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1039      pcb->err_code = PPPERR_AUTHFAIL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1040      lcp_close(pcb, "Authentication failed");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1041  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1042  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1043  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1044   * The peer has been successfully authenticated using `protocol'.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1045   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1046  void auth_peer_success(ppp_pcb *pcb, int protocol, int prot_flavor, const char *name, int namelen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1047      int bit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1048  #ifndef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1049      LWIP_UNUSED_ARG(name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1050      LWIP_UNUSED_ARG(namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1051  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1052  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1053      switch (protocol) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1054  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1055      case PPP_CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1056  	bit = CHAP_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1057  	switch (prot_flavor) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1058  	case CHAP_MD5:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1059  	    bit |= CHAP_MD5_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1060  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1061  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1062  	case CHAP_MICROSOFT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1063  	    bit |= CHAP_MS_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1064  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1065  	case CHAP_MICROSOFT_V2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1066  	    bit |= CHAP_MS2_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1067  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1068  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1069  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1070  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1071  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1072  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1073  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1074  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1075      case PPP_PAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1076  	bit = PAP_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1077  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1078  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1079  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1080      case PPP_EAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1081  	bit = EAP_PEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1082  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1083  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1084      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1085  	ppp_warn("auth_peer_success: unknown protocol %x", protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1086  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1087      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1088  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1089  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1090      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1091       * Save the authenticated name of the peer for later.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1092       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1093      if (namelen > (int)sizeof(pcb->peer_authname) - 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1094  	namelen = (int)sizeof(pcb->peer_authname) - 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1095      MEMCPY(pcb->peer_authname, name, namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1096      pcb->peer_authname[namelen] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1097  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1098  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1099      script_setenv("PEERNAME", , 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1100  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1101  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1102      /* Save the authentication method for later. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1103      pcb->auth_done |= bit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1104  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1105      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1106       * If there is no more authentication still to be done,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1107       * proceed to the network (or callback) phase.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1108       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1109      if ((pcb->auth_pending &= ~bit) == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1110          network_phase(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1111  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1112  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1113  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1114  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1115   * We have failed to authenticate ourselves to the peer using `protocol'.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1116   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1117  void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1118      LWIP_UNUSED_ARG(protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1119      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1120       * We've failed to authenticate ourselves to our peer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1121       *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1122       * Some servers keep sending CHAP challenges, but there
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1123       * is no point in persisting without any way to get updated
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1124       * authentication secrets.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1125       *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1126       * He'll probably take the link down, and there's not much
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1127       * we can do except wait for that.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1128       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1129      pcb->err_code = PPPERR_AUTHFAIL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1130      lcp_close(pcb, "Failed to authenticate ourselves to peer");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1131  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1132  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1133  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1134   * We have successfully authenticated ourselves with the peer using `protocol'.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1135   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1136  void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1137      int bit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1138      const char *prot = "";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1140      switch (protocol) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1141  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1142      case PPP_CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1143  	bit = CHAP_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1144  	prot = "CHAP";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1145  	switch (prot_flavor) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1146  	case CHAP_MD5:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1147  	    bit |= CHAP_MD5_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1148  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1149  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1150  	case CHAP_MICROSOFT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1151  	    bit |= CHAP_MS_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1152  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1153  	case CHAP_MICROSOFT_V2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1154  	    bit |= CHAP_MS2_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1155  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1156  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1157  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1158  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1159  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1160  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1161  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1162  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1163      case PPP_PAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1164  	bit = PAP_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1165  	prot = "PAP";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1166  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1167  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1168  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1169      case PPP_EAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1170  	bit = EAP_WITHPEER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1171  	prot = "EAP";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1172  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1173  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1174      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1175  	ppp_warn("auth_withpeer_success: unknown protocol %x", protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1176  	bit = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1177  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1178      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1179  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1180      ppp_notice("%s authentication succeeded", prot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1181  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1182      /* Save the authentication method for later. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1183      pcb->auth_done |= bit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1184  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1185      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1186       * If there is no more authentication still being done,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1187       * proceed to the network (or callback) phase.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1188       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1189      if ((pcb->auth_pending &= ~bit) == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1190  	network_phase(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1191  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1192  #endif /* PPP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1193  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1194  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1195  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1196   * np_up - a network protocol has come up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1197   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1198  void np_up(ppp_pcb *pcb, int proto) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1199  #if PPP_IDLETIMELIMIT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1200      int tlim;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1201  #endif /* PPP_IDLETIMELIMIT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1202      LWIP_UNUSED_ARG(proto);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1203  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1204      if (pcb->num_np_up == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1205  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1206  	 * At this point we consider that the link has come up successfully.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1207  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1208  	new_phase(pcb, PPP_PHASE_RUNNING);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1209  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1210  #if PPP_IDLETIMELIMIT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1211  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1212  	if (idle_time_hook != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1213  	    tlim = (*idle_time_hook)(NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1214  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1215  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1216  	    tlim = pcb->settings.idle_time_limit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1217  	if (tlim > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1218  	    TIMEOUT(check_idle, (void*)pcb, tlim);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1219  #endif /* PPP_IDLETIMELIMIT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1220  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1221  #if PPP_MAXCONNECT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1222  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1223  	 * Set a timeout to close the connection once the maximum
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1224  	 * connect time has expired.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1225  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1226  	if (pcb->settings.maxconnect > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1227  	    TIMEOUT(connect_time_expired, (void*)pcb, pcb->settings.maxconnect);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1228  #endif /* PPP_MAXCONNECT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1229  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1230  #ifdef MAXOCTETS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1231  	if (maxoctets > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1232  	    TIMEOUT(check_maxoctets, NULL, maxoctets_timeout);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1233  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1234  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1235  #if 0 /* Unused */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1236  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1237  	 * Detach now, if the updetach option was given.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1238  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1239  	if (updetach && !nodetach)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1240  	    detach();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1241  #endif /* Unused */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1242      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1243      ++pcb->num_np_up;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1244  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1245  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1246  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1247   * np_down - a network protocol has gone down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1248   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1249  void np_down(ppp_pcb *pcb, int proto) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1250      LWIP_UNUSED_ARG(proto);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1251      if (--pcb->num_np_up == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1252  #if PPP_IDLETIMELIMIT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1253  	UNTIMEOUT(check_idle, (void*)pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1254  #endif /* PPP_IDLETIMELIMIT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1255  #if PPP_MAXCONNECT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1256  	UNTIMEOUT(connect_time_expired, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1257  #endif /* PPP_MAXCONNECT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1258  #ifdef MAXOCTETS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1259  	UNTIMEOUT(check_maxoctets, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1260  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1261  	new_phase(pcb, PPP_PHASE_NETWORK);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1262      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1263  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1264  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1265  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1266   * np_finished - a network protocol has finished using the link.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1267   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1268  void np_finished(ppp_pcb *pcb, int proto) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1269      LWIP_UNUSED_ARG(proto);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1270      if (--pcb->num_np_open <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1271  	/* no further use for the link: shut up shop. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1272  	lcp_close(pcb, "No network protocols running");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1273      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1274  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1275  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1276  #ifdef MAXOCTETS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1277  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1278  check_maxoctets(arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1279      void *arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1280  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1281  #if PPP_STATS_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1282      unsigned int used;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1283  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1284      update_link_stats(ifunit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1285      link_stats_valid=0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1287      switch(maxoctets_dir) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1288  	case PPP_OCTETS_DIRECTION_IN:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1289  	    used = link_stats.bytes_in;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1290  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1291  	case PPP_OCTETS_DIRECTION_OUT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1292  	    used = link_stats.bytes_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1293  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1294  	case PPP_OCTETS_DIRECTION_MAXOVERAL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1295  	case PPP_OCTETS_DIRECTION_MAXSESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1296  	    used = (link_stats.bytes_in > link_stats.bytes_out) ? link_stats.bytes_in : link_stats.bytes_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1297  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1298  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1299  	    used = link_stats.bytes_in+link_stats.bytes_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1300  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1301      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1302      if (used > maxoctets) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1303  	ppp_notice("Traffic limit reached. Limit: %u Used: %u", maxoctets, used);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1304  	status = EXIT_TRAFFIC_LIMIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1305  	lcp_close(pcb, "Traffic limit");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1306  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1307  	need_holdoff = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1308  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1309      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1310          TIMEOUT(check_maxoctets, NULL, maxoctets_timeout);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1311      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1312  #endif /* PPP_STATS_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1313  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1314  #endif /* MAXOCTETS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1315  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1316  #if PPP_IDLETIMELIMIT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1317  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1318   * check_idle - check whether the link has been idle for long
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1319   * enough that we can shut it down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1320   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1321  static void check_idle(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1322      ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1323      struct ppp_idle idle;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1324      time_t itime;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1325      int tlim;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1326  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1327      if (!get_idle_time(pcb, &idle))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1328  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1329  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1330      if (idle_time_hook != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1331  	tlim = idle_time_hook(&idle);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1332      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1333  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1334  	itime = LWIP_MIN(idle.xmit_idle, idle.recv_idle);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1335  	tlim = pcb->settings.idle_time_limit - itime;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1336  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1337      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1338  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1339      if (tlim <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1340  	/* link is idle: shut it down. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1341  	ppp_notice("Terminating connection due to lack of activity.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1342  	pcb->err_code = PPPERR_IDLETIMEOUT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1343  	lcp_close(pcb, "Link inactive");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1344  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1345  	need_holdoff = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1346  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1347      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1348  	TIMEOUT(check_idle, (void*)pcb, tlim);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1349      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1350  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1351  #endif /* PPP_IDLETIMELIMIT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1352  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1353  #if PPP_MAXCONNECT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1354  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1355   * connect_time_expired - log a message and close the connection.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1356   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1357  static void connect_time_expired(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1358      ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1359      ppp_info("Connect time expired");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1360      pcb->err_code = PPPERR_CONNECTTIME;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1361      lcp_close(pcb, "Connect time expired");	/* Close connection */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1362  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1363  #endif /* PPP_MAXCONNECT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1364  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1365  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1366  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1367   * auth_check_options - called to check authentication options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1368   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1369  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1370  auth_check_options()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1371  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1372      lcp_options *wo = &lcp_wantoptions[0];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1373      int can_auth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1374      int lacks_ip;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1375  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1376      /* Default our_name to hostname, and user to our_name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1377      if (our_name[0] == 0 || usehostname)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1378  	strlcpy(our_name, hostname, sizeof(our_name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1379      /* If a blank username was explicitly given as an option, trust
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1380         the user and don't use our_name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1381      if (ppp_settings.user[0] == 0 && !explicit_user)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1382  	strlcpy(ppp_settings.user, our_name, sizeof(ppp_settings.user));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1383  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1384      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1385       * If we have a default route, require the peer to authenticate
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1386       * unless the noauth option was given or the real user is root.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1387       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1388      if (!auth_required && !allow_any_ip && have_route_to(0) && !privileged) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1389  	auth_required = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1390  	default_auth = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1391      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1392  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1393  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1394      /* If we selected any CHAP flavors, we should probably negotiate it. :-) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1395      if (wo->chap_mdtype)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1396  	wo->neg_chap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1397  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1398  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1399      /* If authentication is required, ask peer for CHAP, PAP, or EAP. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1400      if (auth_required) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1401  	allow_any_ip = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1402  	if (1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1403  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1404  	    && !wo->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1405  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1406  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1407  	    && !wo->neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1408  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1409  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1410  	    && !wo->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1411  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1412  	    ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1413  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1414  	    wo->neg_chap = CHAP_MDTYPE_SUPPORTED != MDTYPE_NONE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1415  	    wo->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1416  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1417  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1418  	    wo->neg_upap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1419  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1420  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1421  	    wo->neg_eap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1422  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1423  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1424      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1425  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1426  	wo->neg_chap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1427  	wo->chap_mdtype = MDTYPE_NONE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1428  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1429  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1430  	wo->neg_upap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1431  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1432  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1433  	wo->neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1434  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1435      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1436  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1437      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1438       * Check whether we have appropriate secrets to use
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1439       * to authenticate the peer.  Note that EAP can authenticate by way
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1440       * of a CHAP-like exchanges as well as SRP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1441       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1442      lacks_ip = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1443  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1444      can_auth = wo->neg_upap && (uselogin || have_pap_secret(&lacks_ip));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1445  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1446      can_auth = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1447  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1448      if (!can_auth && (0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1449  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1450  	|| wo->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1451  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1452  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1453  	|| wo->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1454  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1455  	)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1456  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1457  	can_auth = have_chap_secret((explicit_remote? remote_name: NULL),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1458  				    our_name, 1, &lacks_ip);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1459  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1460  	can_auth = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1461  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1462      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1463      if (!can_auth
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1464  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1465  	&& wo->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1466  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1467  	) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1468  	can_auth = have_srp_secret((explicit_remote? remote_name: NULL),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1469  				    our_name, 1, &lacks_ip);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1470      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1471  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1472      if (auth_required && !can_auth && noauth_addrs == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1473  	if (default_auth) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1474  	    option_error(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1475  "By default the remote system is required to authenticate itself");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1476  	    option_error(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1477  "(because this system has a default route to the internet)");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1478  	} else if (explicit_remote)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1479  	    option_error(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1480  "The remote system (%s) is required to authenticate itself",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1481  			 remote_name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1482  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1483  	    option_error(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1484  "The remote system is required to authenticate itself");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1485  	option_error(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1486  "but I couldn't find any suitable secret (password) for it to use to do so.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1487  	if (lacks_ip)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1488  	    option_error(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1489  "(None of the available passwords would let it use an IP address.)");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1490  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1491  	exit(1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1492      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1493  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1494      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1495       * Early check for remote number authorization.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1496       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1497      if (!auth_number()) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1498  	ppp_warn("calling number %q is not authorized", remote_number);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1499  	exit(EXIT_CNID_AUTH_FAILED);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1500      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1501  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1502  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1503  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1504  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1505  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1506   * auth_reset - called when LCP is starting negotiations to recheck
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1507   * authentication options, i.e. whether we have appropriate secrets
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1508   * to use for authenticating ourselves and/or the peer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1509   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1510  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1511  auth_reset(unit)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1512      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1513  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1514      lcp_options *go = &lcp_gotoptions[unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1515      lcp_options *ao = &lcp_allowoptions[unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1516      int hadchap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1517  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1518      hadchap = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1519      ao->neg_upap = !refuse_pap && (passwd[0] != 0 || get_pap_passwd(NULL));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1520      ao->neg_chap = (!refuse_chap || !refuse_mschap || !refuse_mschap_v2)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1521  	&& (passwd[0] != 0 ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1522  	    (hadchap = have_chap_secret(user, (explicit_remote? remote_name:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1523  					       NULL), 0, NULL)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1524      ao->neg_eap = !refuse_eap && (
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1525  	passwd[0] != 0 ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1526  	(hadchap == 1 || (hadchap == -1 && have_chap_secret(user,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1527  	    (explicit_remote? remote_name: NULL), 0, NULL))) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1528  	have_srp_secret(user, (explicit_remote? remote_name: NULL), 0, NULL));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1529  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1530      hadchap = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1531      if (go->neg_upap && !uselogin && !have_pap_secret(NULL))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1532  	go->neg_upap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1533      if (go->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1534  	if (!(hadchap = have_chap_secret((explicit_remote? remote_name: NULL),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1535  			      our_name, 1, NULL)))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1536  	    go->neg_chap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1537      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1538      if (go->neg_eap &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1539  	(hadchap == 0 || (hadchap == -1 &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1540  	    !have_chap_secret((explicit_remote? remote_name: NULL), our_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1541  		1, NULL))) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1542  	!have_srp_secret((explicit_remote? remote_name: NULL), our_name, 1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1543  	    NULL))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1544  	go->neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1545  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1546  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1547  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1548   * check_passwd - Check the user name and passwd against the PAP secrets
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1549   * file.  If requested, also check against the system password database,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1550   * and login the user if OK.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1551   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1552   * returns:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1553   *	UPAP_AUTHNAK: Authentication failed.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1554   *	UPAP_AUTHACK: Authentication succeeded.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1555   * In either case, msg points to an appropriate message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1556   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1557  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1558  check_passwd(unit, auser, userlen, apasswd, passwdlen, msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1559      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1560      char *auser;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1561      int userlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1562      char *apasswd;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1563      int passwdlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1564      char **msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1565  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1566    return UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1567      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1568      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1569      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1570      struct wordlist *addrs = NULL, *opts = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1571      char passwd[256], user[256];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1572      char secret[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1573      static int attempts = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1574  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1575      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1576       * Make copies of apasswd and auser, then null-terminate them.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1577       * If there are unprintable characters in the password, make
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1578       * them visible.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1579       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1580      slprintf(ppp_settings.passwd, sizeof(ppp_settings.passwd), "%.*v", passwdlen, apasswd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1581      slprintf(ppp_settings.user, sizeof(ppp_settings.user), "%.*v", userlen, auser);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1582      *msg = "";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1584      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1585       * Check if a plugin wants to handle this.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1586       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1587      if (pap_auth_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1588  	ret = (*pap_auth_hook)(ppp_settings.user, ppp_settings.passwd, msg, &addrs, &opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1589  	if (ret >= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1590  	    /* note: set_allowed_addrs() saves opts (but not addrs):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1591  	       don't free it! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1592  	    if (ret)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1593  		set_allowed_addrs(unit, addrs, opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1594  	    else if (opts != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1595  		free_wordlist(opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1596  	    if (addrs != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1597  		free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1598  	    BZERO(ppp_settings.passwd, sizeof(ppp_settings.passwd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1599  	    return ret? UPAP_AUTHACK: UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1600  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1601      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1602  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1603      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1604       * Open the file of pap secrets and scan for a suitable secret
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1605       * for authenticating this user.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1606       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1607      filename = _PATH_UPAPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1608      addrs = opts = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1609      ret = UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1610      f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1611      if (f == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1612  	ppp_error("Can't open PAP password file %s: %m", filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1613  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1614      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1615  	check_access(f, filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1616  	if (scan_authfile(f, ppp_settings.user, our_name, secret, &addrs, &opts, filename, 0) < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1617  	    ppp_warn("no PAP secret found for %s", user);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1618  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1619  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1620  	     * If the secret is "@login", it means to check
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1621  	     * the password against the login database.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1622  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1623  	    int login_secret = strcmp(secret, "@login") == 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1624  	    ret = UPAP_AUTHACK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1625  	    if (uselogin || login_secret) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1626  		/* login option or secret is @login */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1627  		if (session_full(ppp_settings.user, ppp_settings.passwd, devnam, msg) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1628  		    ret = UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1629  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1630  	    } else if (session_mgmt) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1631  		if (session_check(ppp_settings.user, NULL, devnam, NULL) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1632  		    ppp_warn("Peer %q failed PAP Session verification", user);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1633  		    ret = UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1634  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1635  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1636  	    if (secret[0] != 0 && !login_secret) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1637  		/* password given in pap-secrets - must match */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1638  		if ((cryptpap || strcmp(ppp_settings.passwd, secret) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1639  		    && strcmp(crypt(ppp_settings.passwd, secret), secret) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1640  		    ret = UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1641  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1642  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1643  	fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1644      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1645  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1646      if (ret == UPAP_AUTHNAK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1647          if (**msg == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1648  	    *msg = "Login incorrect";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1649  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1650  	 * XXX can we ever get here more than once??
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1651  	 * Frustrate passwd stealer programs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1652  	 * Allow 10 tries, but start backing off after 3 (stolen from login).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1653  	 * On 10'th, drop the connection.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1654  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1655  	if (attempts++ >= 10) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1656  	    ppp_warn("%d LOGIN FAILURES ON %s, %s", attempts, devnam, user);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1657  	    lcp_close(pcb, "login failed");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1658  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1659  	if (attempts > 3)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1660  	    sleep((u_int) (attempts - 3) * 5);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1661  	if (opts != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1662  	    free_wordlist(opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1663  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1664      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1665  	attempts = 0;			/* Reset count */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1666  	if (**msg == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1667  	    *msg = "Login ok";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1668  	set_allowed_addrs(unit, addrs, opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1669      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1670  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1671      if (addrs != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1672  	free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1673      BZERO(ppp_settings.passwd, sizeof(ppp_settings.passwd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1674      BZERO(secret, sizeof(secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1675  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1676      return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1677  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1678  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1679  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1680   * null_login - Check if a username of "" and a password of "" are
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1681   * acceptable, and iff so, set the list of acceptable IP addresses
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1682   * and return 1.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1683   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1684  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1685  null_login(unit)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1686      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1687  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1688      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1689      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1690      int i, ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1691      struct wordlist *addrs, *opts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1692      char secret[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1693  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1694      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1695       * Check if a plugin wants to handle this.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1696       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1697      ret = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1698      if (null_auth_hook)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1699  	ret = (*null_auth_hook)(&addrs, &opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1700  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1701      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1702       * Open the file of pap secrets and scan for a suitable secret.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1703       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1704      if (ret <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1705  	filename = _PATH_UPAPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1706  	addrs = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1707  	f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1708  	if (f == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1709  	    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1710  	check_access(f, filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1711  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1712  	i = scan_authfile(f, "", our_name, secret, &addrs, &opts, filename, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1713  	ret = i >= 0 && secret[0] == 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1714  	BZERO(secret, sizeof(secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1715  	fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1716      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1717  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1718      if (ret)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1719  	set_allowed_addrs(unit, addrs, opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1720      else if (opts != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1721  	free_wordlist(opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1722      if (addrs != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1723  	free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1724  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1725      return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1726  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1727  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1728  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1729   * get_pap_passwd - get a password for authenticating ourselves with
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1730   * our peer using PAP.  Returns 1 on success, 0 if no suitable password
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1731   * could be found.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1732   * Assumes passwd points to MAXSECRETLEN bytes of space (if non-null).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1733   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1734  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1735  get_pap_passwd(passwd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1736      char *passwd;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1737  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1738      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1739      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1740      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1741      char secret[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1742  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1743      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1744       * Check whether a plugin wants to supply this.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1745       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1746      if (pap_passwd_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1747  	ret = (*pap_passwd_hook)(ppp_settings,user, ppp_settings.passwd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1748  	if (ret >= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1749  	    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1750      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1751  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1752      filename = _PATH_UPAPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1753      f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1754      if (f == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1755  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1756      check_access(f, filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1757      ret = scan_authfile(f, user,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1758  			(remote_name[0]? remote_name: NULL),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1759  			secret, NULL, NULL, filename, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1760      fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1761      if (ret < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1762  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1763      if (passwd != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1764  	strlcpy(passwd, secret, MAXSECRETLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1765      BZERO(secret, sizeof(secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1766      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1767  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1768  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1769  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1770   * have_pap_secret - check whether we have a PAP file with any
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1771   * secrets that we could possibly use for authenticating the peer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1772   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1773  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1774  have_pap_secret(lacks_ipp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1775      int *lacks_ipp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1776  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1777      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1778      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1779      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1780      struct wordlist *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1781  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1782      /* let the plugin decide, if there is one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1783      if (pap_check_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1784  	ret = (*pap_check_hook)();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1785  	if (ret >= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1786  	    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1787      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1788  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1789      filename = _PATH_UPAPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1790      f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1791      if (f == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1792  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1793  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1794      ret = scan_authfile(f, (explicit_remote? remote_name: NULL), our_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1795  			NULL, &addrs, NULL, filename, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1796      fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1797      if (ret >= 0 && !some_ip_ok(addrs)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1798  	if (lacks_ipp != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1799  	    *lacks_ipp = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1800  	ret = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1801      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1802      if (addrs != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1803  	free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1804  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1805      return ret >= 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1806  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1807  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1808  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1809   * have_chap_secret - check whether we have a CHAP file with a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1810   * secret that we could possibly use for authenticating `client'
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1811   * on `server'.  Either can be the null string, meaning we don't
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1812   * know the identity yet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1813   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1814  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1815  have_chap_secret(client, server, need_ip, lacks_ipp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1816      char *client;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1817      char *server;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1818      int need_ip;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1819      int *lacks_ipp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1820  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1821      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1822      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1823      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1824      struct wordlist *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1825  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1826      if (chap_check_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1827  	ret = (*chap_check_hook)();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1828  	if (ret >= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1829  	    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1830  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1831      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1832  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1833      filename = _PATH_CHAPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1834      f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1835      if (f == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1836  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1837  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1838      if (client != NULL && client[0] == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1839  	client = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1840      else if (server != NULL && server[0] == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1841  	server = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1842  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1843      ret = scan_authfile(f, client, server, NULL, &addrs, NULL, filename, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1844      fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1845      if (ret >= 0 && need_ip && !some_ip_ok(addrs)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1846  	if (lacks_ipp != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1847  	    *lacks_ipp = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1848  	ret = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1849      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1850      if (addrs != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1851  	free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1852  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1853      return ret >= 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1854  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1855  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1856  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1857   * have_srp_secret - check whether we have a SRP file with a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1858   * secret that we could possibly use for authenticating `client'
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1859   * on `server'.  Either can be the null string, meaning we don't
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1860   * know the identity yet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1861   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1862  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1863  have_srp_secret(client, server, need_ip, lacks_ipp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1864      char *client;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1865      char *server;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1866      int need_ip;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1867      int *lacks_ipp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1868  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1869      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1870      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1871      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1872      struct wordlist *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1873  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1874      filename = _PATH_SRPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1875      f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1876      if (f == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1877  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1878  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1879      if (client != NULL && client[0] == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1880  	client = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1881      else if (server != NULL && server[0] == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1882  	server = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1883  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1884      ret = scan_authfile(f, client, server, NULL, &addrs, NULL, filename, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1885      fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1886      if (ret >= 0 && need_ip && !some_ip_ok(addrs)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1887  	if (lacks_ipp != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1888  	    *lacks_ipp = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1889  	ret = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1890      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1891      if (addrs != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1892  	free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1893  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1894      return ret >= 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1895  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1896  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1897  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1898  #if PPP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1899  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1900   * get_secret - open the CHAP secret file and return the secret
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1901   * for authenticating the given client on the given server.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1902   * (We could be either client or server).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1903   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1904  int get_secret(ppp_pcb *pcb, const char *client, const char *server, char *secret, int *secret_len, int am_server) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1905    int len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1906    LWIP_UNUSED_ARG(server);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1907    LWIP_UNUSED_ARG(am_server);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1908  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1909    if (!client || !client[0] || !pcb->settings.user || !pcb->settings.passwd || strcmp(client, pcb->settings.user)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1910      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1911    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1912  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1913    len = (int)strlen(pcb->settings.passwd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1914    if (len > MAXSECRETLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1915      ppp_error("Secret for %s on %s is too long", client, server);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1916      len = MAXSECRETLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1917    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1918  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1919    MEMCPY(secret, pcb->settings.passwd, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1920    *secret_len = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1921    return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1922  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1923  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1924      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1925      int ret, len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1926      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1927      struct wordlist *addrs, *opts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1928      char secbuf[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1929      struct wordlist *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1930      addrs = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1931  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1932      if (!am_server && ppp_settings.passwd[0] != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1933  	strlcpy(secbuf, ppp_settings.passwd, sizeof(secbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1934      } else if (!am_server && chap_passwd_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1935  	if ( (*chap_passwd_hook)(client, secbuf) < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1936  	    ppp_error("Unable to obtain CHAP password for %s on %s from plugin",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1937  		  client, server);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1938  	    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1939  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1940      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1941  	filename = _PATH_CHAPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1942  	addrs = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1943  	secbuf[0] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1944  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1945  	f = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1946  	if (f == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1947  	    ppp_error("Can't open chap secret file %s: %m", filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1948  	    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1949  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1950  	check_access(f, filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1951  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1952  	ret = scan_authfile(f, client, server, secbuf, &addrs, &opts, filename, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1953  	fclose(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1954  	if (ret < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1955  	    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1956  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1957  	if (am_server)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1958  	    set_allowed_addrs(unit, addrs, opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1959  	else if (opts != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1960  	    free_wordlist(opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1961  	if (addrs != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1962  	    free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1963      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1964  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1965      len = strlen(secbuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1966      if (len > MAXSECRETLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1967  	ppp_error("Secret for %s on %s is too long", client, server);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1968  	len = MAXSECRETLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1969      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1970      MEMCPY(secret, secbuf, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1971      BZERO(secbuf, sizeof(secbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1972      *secret_len = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1973  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1974      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1975  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1976  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1977  #endif /* PPP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1978  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1979  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1980  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1981  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1982   * get_srp_secret - open the SRP secret file and return the secret
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1983   * for authenticating the given client on the given server.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1984   * (We could be either client or server).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1985   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1986  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1987  get_srp_secret(unit, client, server, secret, am_server)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1988      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1989      char *client;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1990      char *server;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1991      char *secret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1992      int am_server;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1993  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1994      FILE *fp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1995      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1996      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1997      struct wordlist *addrs, *opts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1998  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  1999      if (!am_server && ppp_settings.passwd[0] != '\0') {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2000  	strlcpy(secret, ppp_settings.passwd, MAXWORDLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2001      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2002  	filename = _PATH_SRPFILE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2003  	addrs = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2004  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2005  	fp = fopen(filename, "r");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2006  	if (fp == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2007  	    ppp_error("Can't open srp secret file %s: %m", filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2008  	    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2009  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2010  	check_access(fp, filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2011  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2012  	secret[0] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2013  	ret = scan_authfile(fp, client, server, secret, &addrs, &opts,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2014  	    filename, am_server);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2015  	fclose(fp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2016  	if (ret < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2017  	    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2018  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2019  	if (am_server)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2020  	    set_allowed_addrs(unit, addrs, opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2021  	else if (opts != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2022  	    free_wordlist(opts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2023  	if (addrs != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2024  	    free_wordlist(addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2025      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2026  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2027      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2028  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2029  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2030  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2031   * set_allowed_addrs() - set the list of allowed addresses.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2032   * Also looks for `--' indicating options to apply for this peer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2033   * and leaves the following words in extra_options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2034   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2035  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2036  set_allowed_addrs(unit, addrs, opts)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2037      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2038      struct wordlist *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2039      struct wordlist *opts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2040  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2041      int n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2042      struct wordlist *ap, **plink;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2043      struct permitted_ip *ip;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2044      char *ptr_word, *ptr_mask;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2045      struct hostent *hp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2046      struct netent *np;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2047      u32_t a, mask, ah, offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2048      struct ipcp_options *wo = &ipcp_wantoptions[unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2049      u32_t suggested_ip = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2050  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2051      if (addresses[unit] != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2052  	free(addresses[unit]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2053      addresses[unit] = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2054      if (extra_options != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2055  	free_wordlist(extra_options);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2056      extra_options = opts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2057  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2058      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2059       * Count the number of IP addresses given.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2060       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2061      n = wordlist_count(addrs) + wordlist_count(noauth_addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2062      if (n == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2063  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2064      ip = (struct permitted_ip *) malloc((n + 1) * sizeof(struct permitted_ip));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2065      if (ip == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2066  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2067  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2068      /* temporarily append the noauth_addrs list to addrs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2069      for (plink = &addrs; *plink != NULL; plink = &(*plink)->next)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2070  	;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2071      *plink = noauth_addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2072  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2073      n = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2074      for (ap = addrs; ap != NULL; ap = ap->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2075  	/* "-" means no addresses authorized, "*" means any address allowed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2076  	ptr_word = ap->word;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2077  	if (strcmp(ptr_word, "-") == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2078  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2079  	if (strcmp(ptr_word, "*") == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2080  	    ip[n].permit = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2081  	    ip[n].base = ip[n].mask = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2082  	    ++n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2083  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2084  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2085  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2086  	ip[n].permit = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2087  	if (*ptr_word == '!') {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2088  	    ip[n].permit = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2089  	    ++ptr_word;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2090  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2091  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2092  	mask = ~ (u32_t) 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2093  	offset = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2094  	ptr_mask = strchr (ptr_word, '/');
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2095  	if (ptr_mask != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2096  	    int bit_count;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2097  	    char *endp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2098  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2099  	    bit_count = (int) strtol (ptr_mask+1, &endp, 10);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2100  	    if (bit_count <= 0 || bit_count > 32) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2101  		ppp_warn("invalid address length %v in auth. address list",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2102  		     ptr_mask+1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2103  		continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2104  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2105  	    bit_count = 32 - bit_count;	/* # bits in host part */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2106  	    if (*endp == '+') {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2107  		offset = ifunit + 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2108  		++endp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2109  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2110  	    if (*endp != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2111  		ppp_warn("invalid address length syntax: %v", ptr_mask+1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2112  		continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2113  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2114  	    *ptr_mask = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2115  	    mask <<= bit_count;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2116  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2117  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2118  	hp = gethostbyname(ptr_word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2119  	if (hp != NULL && hp->h_addrtype == AF_INET) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2120  	    a = *(u32_t *)hp->h_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2121  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2122  	    np = getnetbyname (ptr_word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2123  	    if (np != NULL && np->n_addrtype == AF_INET) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2124  		a = lwip_htonl ((u32_t)np->n_net);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2125  		if (ptr_mask == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2126  		    /* calculate appropriate mask for net */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2127  		    ah = lwip_ntohl(a);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2128  		    if (IN_CLASSA(ah))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2129  			mask = IN_CLASSA_NET;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2130  		    else if (IN_CLASSB(ah))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2131  			mask = IN_CLASSB_NET;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2132  		    else if (IN_CLASSC(ah))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2133  			mask = IN_CLASSC_NET;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2134  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2135  	    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2136  		a = inet_addr (ptr_word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2137  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2138  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2140  	if (ptr_mask != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2141  	    *ptr_mask = '/';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2142  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2143  	if (a == (u32_t)-1L) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2144  	    ppp_warn("unknown host %s in auth. address list", ap->word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2145  	    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2146  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2147  	if (offset != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2148  	    if (offset >= ~mask) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2149  		ppp_warn("interface unit %d too large for subnet %v",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2150  		     ifunit, ptr_word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2151  		continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2152  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2153  	    a = lwip_htonl((lwip_ntohl(a) & mask) + offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2154  	    mask = ~(u32_t)0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2155  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2156  	ip[n].mask = lwip_htonl(mask);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2157  	ip[n].base = a & ip[n].mask;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2158  	++n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2159  	if (~mask == 0 && suggested_ip == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2160  	    suggested_ip = a;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2161      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2162      *plink = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2163  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2164      ip[n].permit = 0;		/* make the last entry forbid all addresses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2165      ip[n].base = 0;		/* to terminate the list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2166      ip[n].mask = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2167  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2168      addresses[unit] = ip;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2169  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2170      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2171       * If the address given for the peer isn't authorized, or if
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2172       * the user hasn't given one, AND there is an authorized address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2173       * which is a single host, then use that if we find one.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2174       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2175      if (suggested_ip != 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2176  	&& (wo->hisaddr == 0 || !auth_ip_addr(unit, wo->hisaddr))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2177  	wo->hisaddr = suggested_ip;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2178  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2179  	 * Do we insist on this address?  No, if there are other
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2180  	 * addresses authorized than the suggested one.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2181  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2182  	if (n > 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2183  	    wo->accept_remote = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2184      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2185  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2186  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2187  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2188   * auth_ip_addr - check whether the peer is authorized to use
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2189   * a given IP address.  Returns 1 if authorized, 0 otherwise.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2190   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2191  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2192  auth_ip_addr(unit, addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2193      int unit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2194      u32_t addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2195  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2196      int ok;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2197  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2198      /* don't allow loopback or multicast address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2199      if (bad_ip_adrs(addr))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2200  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2201  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2202      if (allowed_address_hook) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2203  	ok = allowed_address_hook(addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2204  	if (ok >= 0) return ok;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2205      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2206  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2207      if (addresses[unit] != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2208  	ok = ip_addr_check(addr, addresses[unit]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2209  	if (ok >= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2210  	    return ok;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2211      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2212  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2213      if (auth_required)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2214  	return 0;		/* no addresses authorized */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2215      return allow_any_ip || privileged || !have_route_to(addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2216  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2217  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2218  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2219  ip_addr_check(addr, addrs)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2220      u32_t addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2221      struct permitted_ip *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2222  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2223      for (; ; ++addrs)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2224  	if ((addr & addrs->mask) == addrs->base)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2225  	    return addrs->permit;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2226  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2227  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2228  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2229   * bad_ip_adrs - return 1 if the IP address is one we don't want
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2230   * to use, such as an address in the loopback net or a multicast address.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2231   * addr is in network byte order.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2232   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2233  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2234  bad_ip_adrs(addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2235      u32_t addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2236  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2237      addr = lwip_ntohl(addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2238      return (addr >> IN_CLASSA_NSHIFT) == IN_LOOPBACKNET
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2239  	|| IN_MULTICAST(addr) || IN_BADCLASS(addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2240  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2241  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2242  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2243   * some_ip_ok - check a wordlist to see if it authorizes any
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2244   * IP address(es).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2245   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2246  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2247  some_ip_ok(addrs)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2248      struct wordlist *addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2249  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2250      for (; addrs != 0; addrs = addrs->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2251  	if (addrs->word[0] == '-')
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2252  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2253  	if (addrs->word[0] != '!')
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2254  	    return 1;		/* some IP address is allowed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2255      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2256      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2257  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2258  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2259  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2260   * auth_number - check whether the remote number is allowed to connect.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2261   * Returns 1 if authorized, 0 otherwise.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2262   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2263  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2264  auth_number()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2265  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2266      struct wordlist *wp = permitted_numbers;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2267      int l;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2268  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2269      /* Allow all if no authorization list. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2270      if (!wp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2271  	return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2272  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2273      /* Allow if we have a match in the authorization list. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2274      while (wp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2275  	/* trailing '*' wildcard */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2276  	l = strlen(wp->word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2277  	if ((wp->word)[l - 1] == '*')
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2278  	    l--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2279  	if (!strncasecmp(wp->word, remote_number, l))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2280  	    return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2281  	wp = wp->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2282      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2283  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2284      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2285  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2287  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2288   * check_access - complain if a secret file has too-liberal permissions.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2289   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2290  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2291  check_access(f, filename)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2292      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2293      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2294  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2295      struct stat sbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2296  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2297      if (fstat(fileno(f), &sbuf) < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2298  	ppp_warn("cannot stat secret file %s: %m", filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2299      } else if ((sbuf.st_mode & (S_IRWXG | S_IRWXO)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2300  	ppp_warn("Warning - secret file %s has world and/or group access",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2301  	     filename);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2302      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2303  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2304  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2305  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2306   * scan_authfile - Scan an authorization file for a secret suitable
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2307   * for authenticating `client' on `server'.  The return value is -1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2308   * if no secret is found, otherwise >= 0.  The return value has
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2309   * NONWILD_CLIENT set if the secret didn't have "*" for the client, and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2310   * NONWILD_SERVER set if the secret didn't have "*" for the server.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2311   * Any following words on the line up to a "--" (i.e. address authorization
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2312   * info) are placed in a wordlist and returned in *addrs.  Any
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2313   * following words (extra options) are placed in a wordlist and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2314   * returned in *opts.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2315   * We assume secret is NULL or points to MAXWORDLEN bytes of space.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2316   * Flags are non-zero if we need two colons in the secret in order to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2317   * match.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2318   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2319  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2320  scan_authfile(f, client, server, secret, addrs, opts, filename, flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2321      FILE *f;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2322      char *client;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2323      char *server;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2324      char *secret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2325      struct wordlist **addrs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2326      struct wordlist **opts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2327      char *filename;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2328      int flags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2329  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2330      int newline, xxx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2331      int got_flag, best_flag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2332      FILE *sf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2333      struct wordlist *ap, *addr_list, *alist, **app;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2334      char word[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2335      char atfile[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2336      char lsecret[MAXWORDLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2337      char *cp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2338  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2339      if (addrs != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2340  	*addrs = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2341      if (opts != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2342  	*opts = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2343      addr_list = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2344      if (!getword(f, word, &newline, filename))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2345  	return -1;		/* file is empty??? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2346      newline = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2347      best_flag = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2348      for (;;) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2349  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2350  	 * Skip until we find a word at the start of a line.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2351  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2352  	while (!newline && getword(f, word, &newline, filename))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2353  	    ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2354  	if (!newline)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2355  	    break;		/* got to end of file */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2356  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2357  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2358  	 * Got a client - check if it's a match or a wildcard.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2359  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2360  	got_flag = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2361  	if (client != NULL && strcmp(word, client) != 0 && !ISWILD(word)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2362  	    newline = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2363  	    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2364  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2365  	if (!ISWILD(word))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2366  	    got_flag = NONWILD_CLIENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2367  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2368  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2369  	 * Now get a server and check if it matches.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2370  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2371  	if (!getword(f, word, &newline, filename))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2372  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2373  	if (newline)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2374  	    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2375  	if (!ISWILD(word)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2376  	    if (server != NULL && strcmp(word, server) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2377  		continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2378  	    got_flag |= NONWILD_SERVER;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2379  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2380  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2381  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2382  	 * Got some sort of a match - see if it's better than what
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2383  	 * we have already.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2384  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2385  	if (got_flag <= best_flag)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2386  	    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2387  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2388  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2389  	 * Get the secret.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2390  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2391  	if (!getword(f, word, &newline, filename))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2392  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2393  	if (newline)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2394  	    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2395  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2396  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2397  	 * SRP-SHA1 authenticator should never be reading secrets from
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2398  	 * a file.  (Authenticatee may, though.)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2399  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2400  	if (flags && ((cp = strchr(word, ':')) == NULL ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2401  	    strchr(cp + 1, ':') == NULL))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2402  	    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2403  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2404  	if (secret != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2405  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2406  	     * Special syntax: @/pathname means read secret from file.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2407  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2408  	    if (word[0] == '@' && word[1] == '/') {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2409  		strlcpy(atfile, word+1, sizeof(atfile));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2410  		if ((sf = fopen(atfile, "r")) == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2411  		    ppp_warn("can't open indirect secret file %s", atfile);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2412  		    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2413  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2414  		check_access(sf, atfile);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2415  		if (!getword(sf, word, &xxx, atfile)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2416  		    ppp_warn("no secret in indirect secret file %s", atfile);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2417  		    fclose(sf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2418  		    continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2419  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2420  		fclose(sf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2421  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2422  	    strlcpy(lsecret, word, sizeof(lsecret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2423  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2424  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2425  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2426  	 * Now read address authorization info and make a wordlist.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2427  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2428  	app = &alist;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2429  	for (;;) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2430  	    if (!getword(f, word, &newline, filename) || newline)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2431  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2432  	    ap = (struct wordlist *)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2433  		    malloc(sizeof(struct wordlist) + strlen(word) + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2434  	    if (ap == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2435  		novm("authorized addresses");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2436  	    ap->word = (char *) (ap + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2437  	    strcpy(ap->word, word);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2438  	    *app = ap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2439  	    app = &ap->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2440  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2441  	*app = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2442  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2443  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2444  	 * This is the best so far; remember it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2445  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2446  	best_flag = got_flag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2447  	if (addr_list)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2448  	    free_wordlist(addr_list);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2449  	addr_list = alist;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2450  	if (secret != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2451  	    strlcpy(secret, lsecret, MAXWORDLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2452  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2453  	if (!newline)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2454  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2455      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2456  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2457      /* scan for a -- word indicating the start of options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2458      for (app = &addr_list; (ap = *app) != NULL; app = &ap->next)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2459  	if (strcmp(ap->word, "--") == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2460  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2461      /* ap = start of options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2462      if (ap != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2463  	ap = ap->next;		/* first option */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2464  	free(*app);			/* free the "--" word */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2465  	*app = NULL;		/* terminate addr list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2466      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2467      if (opts != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2468  	*opts = ap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2469      else if (ap != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2470  	free_wordlist(ap);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2471      if (addrs != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2472  	*addrs = addr_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2473      else if (addr_list != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2474  	free_wordlist(addr_list);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2475  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2476      return best_flag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2477  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2478  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2479  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2480   * wordlist_count - return the number of items in a wordlist
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2481   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2482  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2483  wordlist_count(wp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2484      struct wordlist *wp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2485  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2486      int n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2487  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2488      for (n = 0; wp != NULL; wp = wp->next)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2489  	++n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2490      return n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2491  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2492  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2493  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2494   * free_wordlist - release memory allocated for a wordlist.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2495   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2496  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2497  free_wordlist(wp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2498      struct wordlist *wp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2499  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2500      struct wordlist *next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2501  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2502      while (wp != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2503  	next = wp->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2504  	free(wp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2505  	wp = next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2506      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2507  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2508  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2509  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\auth.c	  2510  #endif /* PPP_SUPPORT */

	; Module end
