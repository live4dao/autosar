	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc5852a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.fsm.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\fsm.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\fsm.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\fsm.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\fsm.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4546
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\fsm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	167
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	169
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	192
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	192
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	239
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	276
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	192
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	192
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	239
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	375
	.byte	3
	.word	192
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	469
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	498
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	192
	.byte	8,4
	.word	276
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	612
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	239
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	685
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	192
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	612
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	612
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	927
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	192
	.byte	8,3
	.word	192
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1084
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1093
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	239
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1227
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	192
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1338
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	192
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	192
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	239
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	239
	.byte	8,1
	.word	192
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1792
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1792
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1801
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1877
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	685
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2013
	.byte	12
	.word	192
	.byte	3
	.word	2127
	.byte	12
	.word	192
	.byte	3
	.word	2137
	.byte	12
	.word	192
	.byte	3
	.word	2147
	.byte	12
	.word	1877
	.byte	3
	.word	2157
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	192
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	192
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	685
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2132
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2142
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2152
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2162
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2167
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	276
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	276
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	276
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2519
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	276
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2669
	.byte	12
	.word	2519
	.byte	3
	.word	2806
	.byte	12
	.word	2669
	.byte	3
	.word	2816
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2162
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2811
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2821
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2826
	.byte	12
	.word	192
	.byte	3
	.word	3111
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3116
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3116
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3121
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	192
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3285
	.byte	3
	.word	1801
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	469
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3435
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3650
	.byte	12
	.word	3435
	.byte	3
	.word	3820
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	469
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	239
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	239
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3116
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3825
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3830
	.byte	12
	.word	3650
	.byte	3
	.word	4054
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4059
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4064
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4164
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4261
	.byte	8,8
	.word	192
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4355
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4064
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4064
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4261
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4164
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4364
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	192
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\fsm.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     1  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     2   * fsm.c - {Link, IP} Control Protocol Finite State Machine.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     4   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     5   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     7   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     8   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    12   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    15   *    the documentation and/or other materials provided with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    16   *    distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    17   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    18   * 3. The name "Carnegie Mellon University" must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    19   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    20   *    prior written permission. For permission or any legal
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    21   *    details, please contact
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    22   *      Office of Technology Transfer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    23   *      Carnegie Mellon University
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    24   *      5000 Forbes Avenue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    25   *      Pittsburgh, PA  15213-3890
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    26   *      (412) 268-4387, fax: (412) 268-7395
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    27   *      tech-transfer@andrew.cmu.edu
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    28   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    29   * 4. Redistributions of any form whatsoever must retain the following
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    30   *    acknowledgment:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    31   *    "This product includes software developed by Computing Services
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    32   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    34   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    35   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    36   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    37   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    38   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    39   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    40   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    41   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    42  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    43  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    44  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    45  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    46  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    47   * @todo:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    48   * Randomize fsm id on link/init.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    49   * Deal with variable outgoing MTU.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    50   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    51  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    52  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    53  #include <stdio.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    54  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    55  #include <sys/types.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    56  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    57  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    58  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    59  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    60  #include "netif/ppp/fsm.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    61  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    62  static void fsm_timeout (void *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    63  static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    64  static void fsm_rconfack(fsm *f, int id, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    65  static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    66  static void fsm_rtermreq(fsm *f, int id, u_char *p, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    67  static void fsm_rtermack(fsm *f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    68  static void fsm_rcoderej(fsm *f, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    69  static void fsm_sconfreq(fsm *f, int retransmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    70  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    71  #define PROTO_NAME(f)	((f)->callbacks->proto_name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    72  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    73  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    74   * fsm_init - Initialize fsm.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    75   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    76   * Initialize fsm state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    77   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    78  void fsm_init(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    79      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    80      f->state = PPP_FSM_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    81      f->flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    82      f->id = 0;				/* XXX Start with random id? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    83      f->maxnakloops = pcb->settings.fsm_max_nak_loops;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    84      f->term_reason_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    85  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    86  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    87  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    88  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    89   * fsm_lowerup - The lower layer is up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    90   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    91  void fsm_lowerup(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    92      switch( f->state ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    93      case PPP_FSM_INITIAL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    94  	f->state = PPP_FSM_CLOSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    95  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    96  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    97      case PPP_FSM_STARTING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    98  	if( f->flags & OPT_SILENT )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	    99  	    f->state = PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   100  	else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   101  	    /* Send an initial configure-request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   102  	    fsm_sconfreq(f, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   103  	    f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   104  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   105  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   106  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   107      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   108  	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   109  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   110      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   111  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   112  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   113  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   114  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   115   * fsm_lowerdown - The lower layer is down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   116   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   117   * Cancel all timeouts and inform upper layers.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   118   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   119  void fsm_lowerdown(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   120      switch( f->state ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   121      case PPP_FSM_CLOSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   122  	f->state = PPP_FSM_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   123  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   124  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   125      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   126  	f->state = PPP_FSM_STARTING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   127  	if( f->callbacks->starting )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   128  	    (*f->callbacks->starting)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   129  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   130  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   131      case PPP_FSM_CLOSING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   132  	f->state = PPP_FSM_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   133  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   134  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   135  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   136      case PPP_FSM_STOPPING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   137      case PPP_FSM_REQSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   138      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   139      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   140  	f->state = PPP_FSM_STARTING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   141  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   142  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   143  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   144      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   145  	if( f->callbacks->down )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   146  	    (*f->callbacks->down)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   147  	f->state = PPP_FSM_STARTING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   148  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   149  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   150      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   151  	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   152  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   153      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   154  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   155  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   156  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   157  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   158   * fsm_open - Link is allowed to come up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   159   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   160  void fsm_open(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   161      switch( f->state ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   162      case PPP_FSM_INITIAL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   163  	f->state = PPP_FSM_STARTING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   164  	if( f->callbacks->starting )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   165  	    (*f->callbacks->starting)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   166  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   167  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   168      case PPP_FSM_CLOSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   169  	if( f->flags & OPT_SILENT )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   170  	    f->state = PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   171  	else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   172  	    /* Send an initial configure-request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   173  	    fsm_sconfreq(f, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   174  	    f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   175  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   176  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   177  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   178      case PPP_FSM_CLOSING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   179  	f->state = PPP_FSM_STOPPING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   180  	/* fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   181  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   182      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   183      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   184  	if( f->flags & OPT_RESTART ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   185  	    fsm_lowerdown(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   186  	    fsm_lowerup(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   187  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   188  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   189      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   190  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   191      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   192  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   193  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   194  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   195   * terminate_layer - Start process of shutting down the FSM
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   196   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   197   * Cancel any timeout running, notify upper layers we're done, and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   198   * send a terminate-request message as configured.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   199   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   200  static void terminate_layer(fsm *f, int nextstate) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   201      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   202  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   203      if( f->state != PPP_FSM_OPENED )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   204  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   205      else if( f->callbacks->down )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   206  	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   207  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   208      /* Init restart counter and send Terminate-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   209      f->retransmits = pcb->settings.fsm_max_term_transmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   210      fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   211  	      (const u_char *) f->term_reason, f->term_reason_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   212  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   213      if (f->retransmits == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   214  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   215  	 * User asked for no terminate requests at all; just close it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   216  	 * We've already fired off one Terminate-Request just to be nice
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   217  	 * to the peer, but we're not going to wait for a reply.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   218  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   219  	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   220  	if( f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   221  	    (*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   222  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   223      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   224  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   225      TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   226      --f->retransmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   227  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   228      f->state = nextstate;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   229  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   230  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   231  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   232   * fsm_close - Start closing connection.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   233   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   234   * Cancel timeouts and either initiate close or possibly go directly to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   235   * the PPP_FSM_CLOSED state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   236   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   237  void fsm_close(fsm *f, const char *reason) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   238      f->term_reason = reason;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   239      f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   240      switch( f->state ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   241      case PPP_FSM_STARTING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   242  	f->state = PPP_FSM_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   243  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   244      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   245  	f->state = PPP_FSM_CLOSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   246  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   247      case PPP_FSM_STOPPING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   248  	f->state = PPP_FSM_CLOSING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   249  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   250  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   251      case PPP_FSM_REQSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   252      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   253      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   254      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   255  	terminate_layer(f, PPP_FSM_CLOSING);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   256  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   257      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   258  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   259      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   260  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   261  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   262  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   263  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   264   * fsm_timeout - Timeout expired.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   265   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   266  static void fsm_timeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   267      fsm *f = (fsm *) arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   268      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   269  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   270      switch (f->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   271      case PPP_FSM_CLOSING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   272      case PPP_FSM_STOPPING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   273  	if( f->retransmits <= 0 ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   274  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   275  	     * We've waited for an ack long enough.  Peer probably heard us.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   276  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   277  	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   278  	    if( f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   279  		(*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   280  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   281  	    /* Send Terminate-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   282  	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   283  		      (const u_char *) f->term_reason, f->term_reason_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   284  	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   285  	    --f->retransmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   286  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   287  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   288  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   289      case PPP_FSM_REQSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   290      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   291      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   292  	if (f->retransmits <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   293  	    ppp_warn("%s: timeout sending Config-Requests", PROTO_NAME(f));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   294  	    f->state = PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   295  	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   296  		(*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   297  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   298  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   299  	    /* Retransmit the configure-request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   300  	    if (f->callbacks->retransmit)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   301  		(*f->callbacks->retransmit)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   302  	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   303  	    if( f->state == PPP_FSM_ACKRCVD )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   304  		f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   305  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   306  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   307  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   308      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   309  	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   310  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   311      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   312  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   313  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   314  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   315  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   316   * fsm_input - Input packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   317   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   318  void fsm_input(fsm *f, u_char *inpacket, int l) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   319      u_char *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   320      u_char code, id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   321      int len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   322  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   323      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   324       * Parse header (code, id and length).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   325       * If packet too short, drop it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   326       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   327      inp = inpacket;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   328      if (l < HEADERLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   329  	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   330  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   331      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   332      GETCHAR(code, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   333      GETCHAR(id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   334      GETSHORT(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   335      if (len < HEADERLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   336  	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   337  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   338      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   339      if (len > l) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   340  	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   341  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   342      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   343      len -= HEADERLEN;		/* subtract header length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   344  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   345      if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   346  	FSMDEBUG(("fsm_input(%x): Rcvd packet in state %d.",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   347  		  f->protocol, f->state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   348  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   349      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   350  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   351      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   352       * Action depends on code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   353       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   354      switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   355      case CONFREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   356  	fsm_rconfreq(f, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   357  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   358      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   359      case CONFACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   360  	fsm_rconfack(f, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   361  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   362      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   363      case CONFNAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   364      case CONFREJ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   365  	fsm_rconfnakrej(f, code, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   366  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   367      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   368      case TERMREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   369  	fsm_rtermreq(f, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   370  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   371      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   372      case TERMACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   373  	fsm_rtermack(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   374  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   375      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   376      case CODEREJ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   377  	fsm_rcoderej(f, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   378  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   379      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   380      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   381  	if( !f->callbacks->extcode
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   382  	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   383  	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   384  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   385      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   386  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   387  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   388  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   389  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   390   * fsm_rconfreq - Receive Configure-Request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   391   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   392  static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   393      int code, reject_if_disagree;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   394  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   395      switch( f->state ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   396      case PPP_FSM_CLOSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   397  	/* Go away, we're closed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   398  	fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   399  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   400      case PPP_FSM_CLOSING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   401      case PPP_FSM_STOPPING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   402  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   403  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   404      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   405  	/* Go down and restart negotiation */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   406  	if( f->callbacks->down )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   407  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   408  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   409  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   410  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   411  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   412      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   413  	/* Negotiation started by our peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   414  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   415  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   416  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   417      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   418  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   419      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   420  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   421      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   422       * Pass the requested configuration options
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   423       * to protocol-specific code for checking.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   424       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   425      if (f->callbacks->reqci){		/* Check CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   426  	reject_if_disagree = (f->nakloops >= f->maxnakloops);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   427  	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   428      } else if (len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   429  	code = CONFREJ;			/* Reject all CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   430      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   431  	code = CONFACK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   432  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   433      /* send the Ack, Nak or Rej to the peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   434      fsm_sdata(f, code, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   435  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   436      if (code == CONFACK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   437  	if (f->state == PPP_FSM_ACKRCVD) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   438  	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   439  	    f->state = PPP_FSM_OPENED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   440  	    if (f->callbacks->up)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   441  		(*f->callbacks->up)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   442  	} else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   443  	    f->state = PPP_FSM_ACKSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   444  	f->nakloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   445  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   446      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   447  	/* we sent CONFACK or CONFREJ */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   448  	if (f->state != PPP_FSM_ACKRCVD)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   449  	    f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   450  	if( code == CONFNAK )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   451  	    ++f->nakloops;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   452      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   453  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   455  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   456  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   457   * fsm_rconfack - Receive Configure-Ack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   458   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   459  static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   460      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   461  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   462      if (id != f->reqid || f->seen_ack)		/* Expected id? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   463  	return;					/* Nope, toss... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   464      if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   465  	  (len == 0)) ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   466  	/* Ack is bad - ignore it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   467  	ppp_error("Received bad configure-ack: %P", inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   468  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   469      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   470      f->seen_ack = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   471      f->rnakloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   472  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   473      switch (f->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   474      case PPP_FSM_CLOSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   475      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   476  	fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   477  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   478  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   479      case PPP_FSM_REQSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   480  	f->state = PPP_FSM_ACKRCVD;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   481  	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   482  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   483  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   484      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   485  	/* Huh? an extra valid Ack? oh well... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   486  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   487  	fsm_sconfreq(f, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   488  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   489  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   490  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   491      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   492  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   493  	f->state = PPP_FSM_OPENED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   494  	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   495  	if (f->callbacks->up)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   496  	    (*f->callbacks->up)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   497  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   498  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   499      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   500  	/* Go down and restart negotiation */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   501  	if (f->callbacks->down)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   502  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   503  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   504  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   505  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   506      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   507  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   508      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   509  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   510  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   511  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   512  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   513   * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   514   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   515  static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   516      int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   517      int treat_as_reject;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   518  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   519      if (id != f->reqid || f->seen_ack)	/* Expected id? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   520  	return;				/* Nope, toss... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   521  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   522      if (code == CONFNAK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   523  	++f->rnakloops;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   524  	treat_as_reject = (f->rnakloops >= f->maxnakloops);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   525  	if (f->callbacks->nakci == NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   526  	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   527  	    ppp_error("Received bad configure-nak: %P", inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   528  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   529  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   530      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   531  	f->rnakloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   532  	if (f->callbacks->rejci == NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   533  	    || !(ret = f->callbacks->rejci(f, inp, len))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   534  	    ppp_error("Received bad configure-rej: %P", inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   535  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   536  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   537      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   538  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   539      f->seen_ack = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   540  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   541      switch (f->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   542      case PPP_FSM_CLOSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   543      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   544  	fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   545  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   546  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   547      case PPP_FSM_REQSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   548      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   549  	/* They didn't agree to what we wanted - try another request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   550  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   551  	if (ret < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   552  	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   553  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   554  	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   555  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   556  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   557      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   558  	/* Got a Nak/reject when we had already had an Ack?? oh well... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   559  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   560  	fsm_sconfreq(f, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   561  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   562  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   563  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   564      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   565  	/* Go down and restart negotiation */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   566  	if (f->callbacks->down)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   567  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   568  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   569  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   570  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   571      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   572  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   573      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   574  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   575  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   576  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   577  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   578   * fsm_rtermreq - Receive Terminate-Req.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   579   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   580  static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   581      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   582  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   583      switch (f->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   584      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   585      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   586  	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   587  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   588  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   589      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   590  	if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   591  	    ppp_info("%s terminated by peer (%0.*v)", PROTO_NAME(f), len, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   592  	} else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   593  	    ppp_info("%s terminated by peer", PROTO_NAME(f));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   594  	f->retransmits = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   595  	f->state = PPP_FSM_STOPPING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   596  	if (f->callbacks->down)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   597  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   598  	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   599  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   600      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   601  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   602      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   603  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   604      fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   605  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   606  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   607  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   608  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   609   * fsm_rtermack - Receive Terminate-Ack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   610   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   611  static void fsm_rtermack(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   612      switch (f->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   613      case PPP_FSM_CLOSING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   614  	UNTIMEOUT(fsm_timeout, f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   615  	f->state = PPP_FSM_CLOSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   616  	if( f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   617  	    (*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   618  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   619      case PPP_FSM_STOPPING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   620  	UNTIMEOUT(fsm_timeout, f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   621  	f->state = PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   622  	if( f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   623  	    (*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   624  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   625  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   626      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   627  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   628  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   629  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   630      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   631  	if (f->callbacks->down)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   632  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   633  	fsm_sconfreq(f, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   634  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   635  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   636      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   637  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   638      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   639  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   640  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   641  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   642  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   643   * fsm_rcoderej - Receive an Code-Reject.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   644   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   645  static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   646      u_char code, id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   647  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   648      if (len < HEADERLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   649  	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   650  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   651      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   652      GETCHAR(code, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   653      GETCHAR(id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   654      ppp_warn("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   655  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   656      if( f->state == PPP_FSM_ACKRCVD )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   657  	f->state = PPP_FSM_REQSENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   658  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   659  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   660  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   661  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   662   * fsm_protreject - Peer doesn't speak this protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   663   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   664   * Treat this as a catastrophic error (RXJ-).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   665   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   666  void fsm_protreject(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   667      switch( f->state ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   668      case PPP_FSM_CLOSING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   669  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   670  	/* fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   671  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   672      case PPP_FSM_CLOSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   673  	f->state = PPP_FSM_CLOSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   674  	if( f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   675  	    (*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   676  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   677  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   678      case PPP_FSM_STOPPING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   679      case PPP_FSM_REQSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   680      case PPP_FSM_ACKRCVD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   681      case PPP_FSM_ACKSENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   682  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   683  	/* fall through */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   684  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   685      case PPP_FSM_STOPPED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   686  	f->state = PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   687  	if( f->callbacks->finished )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   688  	    (*f->callbacks->finished)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   689  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   690  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   691      case PPP_FSM_OPENED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   692  	terminate_layer(f, PPP_FSM_STOPPING);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   693  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   694  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   695      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   696  	FSMDEBUG(("%s: Protocol-reject event in state %d!",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   697  		  PROTO_NAME(f), f->state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   698  	/* no break */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   699      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   700  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   701  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   702  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   703  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   704   * fsm_sconfreq - Send a Configure-Request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   705   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   706  static void fsm_sconfreq(fsm *f, int retransmit) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   707      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   708      struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   709      u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   710      int cilen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   711  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   712      if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   713  	/* Not currently negotiating - reset options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   714  	if( f->callbacks->resetci )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   715  	    (*f->callbacks->resetci)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   716  	f->nakloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   717  	f->rnakloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   718      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   719  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   720      if( !retransmit ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   721  	/* New request - reset retransmission counter, use new ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   722  	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   723  	f->reqid = ++f->id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   724      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   725  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   726      f->seen_ack = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   727  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   728      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   729       * Make up the request packet
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   730       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   731      if( f->callbacks->cilen && f->callbacks->addci ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   732  	cilen = (*f->callbacks->cilen)(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   733  	if( cilen > pcb->peer_mru - HEADERLEN )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   734  	    cilen = pcb->peer_mru - HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   735      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   736  	cilen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   737  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   738      p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   739      if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   740          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   741      if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   742          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   743          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   744      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   745  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   746      /* send the request to our peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   747      outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   748      MAKEHEADER(outp, f->protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   749      PUTCHAR(CONFREQ, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   750      PUTCHAR(f->reqid, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   751      PUTSHORT(cilen + HEADERLEN, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   752      if (cilen != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   753  	(*f->callbacks->addci)(f, outp, &cilen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   754  	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   755      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   756  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   757      ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   758  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   759      /* start the retransmit timer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   760      --f->retransmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   761      TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   762  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   763  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   764  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   765  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   766   * fsm_sdata - Send some data.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   767   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   768   * Used for all packets sent to our peer by this module.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   769   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   770  void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   771      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   772      struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   773      u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   774      int outlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   775  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   776      /* Adjust length to be smaller than MTU */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   777      if (datalen > pcb->peer_mru - HEADERLEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   778  	datalen = pcb->peer_mru - HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   779      outlen = datalen + HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   780  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   781      p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   782      if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   783          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   784      if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   785          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   786          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   787      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   788  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   789      outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   790      if (datalen) /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   791  	MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   792      MAKEHEADER(outp, f->protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   793      PUTCHAR(code, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   794      PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   795      PUTSHORT(outlen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   796      ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   797  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   798  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\fsm.c	   799  #endif /* PPP_SUPPORT */

	; Module end
