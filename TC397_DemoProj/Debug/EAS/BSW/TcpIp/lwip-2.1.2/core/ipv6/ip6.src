	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc35652a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\.ip6.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\ip6.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\ip6.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\ip6.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\ip6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4546
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\ip6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	167
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	169
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	192
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	192
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	239
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	276
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	192
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	192
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	239
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	375
	.byte	3
	.word	192
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	469
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	498
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	192
	.byte	8,4
	.word	276
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	612
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	239
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	685
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	192
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	612
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	612
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	927
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	192
	.byte	8,3
	.word	192
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1084
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1093
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	239
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1227
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	192
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1338
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	192
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	192
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	239
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	239
	.byte	8,1
	.word	192
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1792
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1792
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1801
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1877
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	685
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2013
	.byte	12
	.word	192
	.byte	3
	.word	2127
	.byte	12
	.word	192
	.byte	3
	.word	2137
	.byte	12
	.word	192
	.byte	3
	.word	2147
	.byte	12
	.word	1877
	.byte	3
	.word	2157
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	192
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	192
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	685
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2132
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2142
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2152
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2162
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2167
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	276
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	276
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	276
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2519
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	276
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2669
	.byte	12
	.word	2519
	.byte	3
	.word	2806
	.byte	12
	.word	2669
	.byte	3
	.word	2816
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2162
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2811
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2821
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2826
	.byte	12
	.word	192
	.byte	3
	.word	3111
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3116
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3116
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3121
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	192
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3285
	.byte	3
	.word	1801
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	469
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3435
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3650
	.byte	12
	.word	3435
	.byte	3
	.word	3820
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	469
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	239
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	239
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3116
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3825
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3830
	.byte	12
	.word	3650
	.byte	3
	.word	4054
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4059
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4064
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4164
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4261
	.byte	8,8
	.word	192
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4355
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4064
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4064
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4261
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4164
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4364
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	192
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\ip6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     4   * IPv6 layer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     5   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     6  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     7  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     8   * Copyright (c) 2010 Inico Technologies Ltd.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	     9   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    10   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    11   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    12   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    13   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    14   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    15   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    16   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    17   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    18   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    19   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    20   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    21   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    22   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    23   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    24   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    25   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    26   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    27   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    28   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    29   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    30   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    31   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    32   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    33   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    34   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    35   * Author: Ivan Delamer <delamer@inicotech.com>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    36   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    37   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    38   * Please coordinate changes and requests with Ivan Delamer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    39   * <delamer@inicotech.com>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    40   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    41  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    42  #include "lwip/opt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    43  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    44  #if LWIP_IPV6  /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    45  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    46  #include "lwip/def.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    47  #include "lwip/mem.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    48  #include "lwip/netif.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    49  #include "lwip/ip.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    50  #include "lwip/ip6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    51  #include "lwip/ip6_addr.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    52  #include "lwip/ip6_frag.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    53  #include "lwip/icmp6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    54  #include "lwip/priv/raw_priv.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    55  #include "lwip/udp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    56  #include "lwip/priv/tcp_priv.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    57  #include "lwip/dhcp6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    58  #include "lwip/nd6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    59  #include "lwip/mld6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    60  #include "lwip/debug.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    61  #include "lwip/stats.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    62  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    63  #ifdef LWIP_HOOK_FILENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    64  #include LWIP_HOOK_FILENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    65  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    66  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    67  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    68   * Finds the appropriate network interface for a given IPv6 address. It tries to select
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    69   * a netif following a sequence of heuristics:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    70   * 1) if there is only 1 netif, return it
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    71   * 2) if the destination is a zoned address, match its zone to a netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    72   * 3) if the either the source or destination address is a scoped address,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    73   *    match the source address's zone (if set) or address (if not) to a netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    74   * 4) tries to match the destination subnet to a configured address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    75   * 5) tries to find a router-announced route
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    76   * 6) tries to match the (unscoped) source address to the netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    77   * 7) returns the default netif, if configured
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    78   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    79   * Note that each of the two given addresses may or may not be properly zoned.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    80   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    81   * @param src the source IPv6 address, if known
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    82   * @param dest the destination IPv6 address for which to find the route
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    83   * @return the netif on which to send to reach dest
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    84   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    85  struct netif *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    86  ip6_route(const ip6_addr_t *src, const ip6_addr_t *dest)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    87  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    88  #if LWIP_SINGLE_NETIF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    89    LWIP_UNUSED_ARG(src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    90    LWIP_UNUSED_ARG(dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    91  #else /* LWIP_SINGLE_NETIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    92    struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    93    s8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    94  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    95    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    96  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    97    /* If single netif configuration, fast return. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    98    if ((netif_list != NULL) && (netif_list->next == NULL)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	    99      if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   100          (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   101        return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   102      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   103      return netif_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   104    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   105  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   106  #if LWIP_IPV6_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   107    /* Special processing for zoned destination addresses. This includes link-
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   108     * local unicast addresses and interface/link-local multicast addresses. Use
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   109     * the zone to find a matching netif. If the address is not zoned, then there
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   110     * is technically no "wrong" netif to choose, and we leave routing to other
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   111     * rules; in most cases this should be the scoped-source rule below. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   112    if (ip6_addr_has_zone(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   113      IP6_ADDR_ZONECHECK(dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   114      /* Find a netif based on the zone. For custom mappings, one zone may map
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   115       * to multiple netifs, so find one that can actually send a packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   116      NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   117        if (ip6_addr_test_zone(dest, netif) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   118            netif_is_up(netif) && netif_is_link_up(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   119          return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   120        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   121      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   122      /* No matching netif found. Do no try to route to a different netif,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   123       * as that would be a zone violation, resulting in any packets sent to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   124       * that netif being dropped on output. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   125      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   126    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   127  #endif /* LWIP_IPV6_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   128  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   129    /* Special processing for scoped source and destination addresses. If we get
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   130     * here, the destination address does not have a zone, so either way we need
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   131     * to look at the source address, which may or may not have a zone. If it
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   132     * does, the zone is restrictive: there is (typically) only one matching
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   133     * netif for it, and we should avoid routing to any other netif as that would
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   134     * result in guaranteed zone violations. For scoped source addresses that do
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   135     * not have a zone, use (only) a netif that has that source address locally
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   136     * assigned. This case also applies to the loopback source address, which has
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   137     * an implied link-local scope. If only the destination address is scoped
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   138     * (but, again, not zoned), we still want to use only the source address to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   139     * determine its zone because that's most likely what the user/application
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   140     * wants, regardless of whether the source address is scoped. Finally, some
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   141     * of this story also applies if scoping is disabled altogether. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   142  #if LWIP_IPV6_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   143    if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   144        ip6_addr_has_scope(src, IP6_UNICAST) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   145  #else /* LWIP_IPV6_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   146    if (ip6_addr_islinklocal(dest) || ip6_addr_ismulticast_iflocal(dest) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   147        ip6_addr_ismulticast_linklocal(dest) || ip6_addr_islinklocal(src) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   148  #endif /* LWIP_IPV6_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   149        ip6_addr_isloopback(src)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   150  #if LWIP_IPV6_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   151      if (ip6_addr_has_zone(src)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   152        /* Find a netif matching the source zone (relatively cheap). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   153        NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   154          if (netif_is_up(netif) && netif_is_link_up(netif) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   155              ip6_addr_test_zone(src, netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   156            return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   157          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   158        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   159      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   160  #endif /* LWIP_IPV6_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   161      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   162        /* Find a netif matching the source address (relatively expensive). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   163        NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   164          if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   165            continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   166          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   167          for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   168            if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   169                ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   170              return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   171            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   172          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   173        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   174      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   175      /* Again, do not use any other netif in this case, as that could result in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   176       * zone boundary violations. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   177      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   178    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   179  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   180    /* We come here only if neither source nor destination is scoped. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   181    IP6_ADDR_ZONECHECK(src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   182  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   183  #ifdef LWIP_HOOK_IP6_ROUTE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   184    netif = LWIP_HOOK_IP6_ROUTE(src, dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   185    if (netif != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   186      return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   187    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   188  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   189  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   190    /* See if the destination subnet matches a configured address. In accordance
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   191     * with RFC 5942, dynamically configured addresses do not have an implied
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   192     * local subnet, and thus should be considered /128 assignments. However, as
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   193     * such, the destination address may still match a local address, and so we
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   194     * still need to check for exact matches here. By (lwIP) policy, statically
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   195     * configured addresses do always have an implied local /64 subnet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   196    NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   197      if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   198        continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   199      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   200      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   201        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   202            ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   203            (netif_ip6_addr_isstatic(netif, i) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   204            ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   205          return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   206        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   207      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   208    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   209  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   210    /* Get the netif for a suitable router-announced route. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   211    netif = nd6_find_route(dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   212    if (netif != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   213      return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   214    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   215  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   216    /* Try with the netif that matches the source address. Given the earlier rule
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   217     * for scoped source addresses, this applies to unscoped addresses only. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   218    if (!ip6_addr_isany(src)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   219      NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   220        if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   221          continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   222        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   223        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   224          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   225              ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   226            return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   227          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   228        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   229      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   230    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   231  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   232  #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   233    /* loopif is disabled, loopback traffic is passed through any netif */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   234    if (ip6_addr_isloopback(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   235      /* don't check for link on loopback traffic */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   236      if (netif_default != NULL && netif_is_up(netif_default)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   237        return netif_default;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   238      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   239      /* default netif is not up, just use any netif for loopback traffic */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   240      NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   241        if (netif_is_up(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   242          return netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   243        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   244      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   245      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   246    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   247  #endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   248  #endif /* !LWIP_SINGLE_NETIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   249  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   250    /* no matching netif found, use default netif, if up */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   251    if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   252      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   253    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   254    return netif_default;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   255  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   256  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   257  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   258   * @ingroup ip6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   259   * Select the best IPv6 source address for a given destination IPv6 address.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   260   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   261   * This implementation follows RFC 6724 Sec. 5 to the following extent:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   262   * - Rules 1, 2, 3: fully implemented
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   263   * - Rules 4, 5, 5.5: not applicable
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   264   * - Rule 6: not implemented
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   265   * - Rule 7: not applicable
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   266   * - Rule 8: limited to "prefer /64 subnet match over non-match"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   267   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   268   * For Rule 2, we deliberately deviate from RFC 6724 Sec. 3.1 by considering
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   269   * ULAs to be of smaller scope than global addresses, to avoid that a preferred
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   270   * ULA is picked over a deprecated global address when given a global address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   271   * as destination, as that would likely result in broken two-way communication.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   272   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   273   * As long as temporary addresses are not supported (as used in Rule 7), a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   274   * proper implementation of Rule 8 would obviate the need to implement Rule 6.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   275   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   276   * @param netif the netif on which to send a packet
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   277   * @param dest the destination we are trying to reach (possibly not properly
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   278   *             zoned)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   279   * @return the most suitable source address to use, or NULL if no suitable
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   280   *         source address is found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   281   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   282  const ip_addr_t *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   283  ip6_select_source_address(struct netif *netif, const ip6_addr_t *dest)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   284  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   285    const ip_addr_t *best_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   286    const ip6_addr_t *cand_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   287    s8_t dest_scope, cand_scope;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   288    s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   289    u8_t i, cand_pref, cand_bits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   290    u8_t best_pref = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   291    u8_t best_bits = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   292  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   293    /* Start by determining the scope of the given destination address. These
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   294     * tests are hopefully (roughly) in order of likeliness to match. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   295    if (ip6_addr_isglobal(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   296      dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   297    } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   298      dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   299    } else if (ip6_addr_isuniquelocal(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   300      dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   301    } else if (ip6_addr_ismulticast(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   302      dest_scope = ip6_addr_multicast_scope(dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   303    } else if (ip6_addr_issitelocal(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   304      dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   305    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   306      /* no match, consider scope global */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   307      dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   308    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   309  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   310    best_addr = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   311  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   312    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   313      /* Consider only valid (= preferred and deprecated) addresses. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   314      if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   315        continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   316      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   317      /* Determine the scope of this candidate address. Same ordering idea. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   318      cand_addr = netif_ip6_addr(netif, i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   319      if (ip6_addr_isglobal(cand_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   320        cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   321      } else if (ip6_addr_islinklocal(cand_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   322        cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   323      } else if (ip6_addr_isuniquelocal(cand_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   324        cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   325      } else if (ip6_addr_issitelocal(cand_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   326        cand_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   327      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   328        /* no match, treat as low-priority global scope */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   329        cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   330      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   331      cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   332      /* @todo compute the actual common bits, for longest matching prefix. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   333      /* We cannot count on the destination address having a proper zone
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   334       * assignment, so do not compare zones in this case. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   335      cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   336      if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   337        return netif_ip_addr6(netif, i); /* Rule 1 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   338      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   339      if ((best_addr == NULL) || /* no alternative yet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   340          ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   341          ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   342          ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   343          ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   344        /* We found a new "winning" candidate. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   345        best_addr = netif_ip_addr6(netif, i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   346        best_scope = cand_scope;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   347        best_pref = cand_pref;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   348        best_bits = cand_bits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   349      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   350    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   351  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   352    return best_addr; /* may be NULL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   353  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   355  #if LWIP_IPV6_FORWARD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   356  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   357   * Forwards an IPv6 packet. It finds an appropriate route for the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   358   * packet, decrements the HL value of the packet, and outputs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   359   * the packet on the appropriate interface.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   360   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   361   * @param p the packet to forward (p->payload points to IP header)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   362   * @param iphdr the IPv6 header of the input packet
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   363   * @param inp the netif on which this packet was received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   364   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   365  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   366  ip6_forward(struct pbuf *p, struct ip6_hdr *iphdr, struct netif *inp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   367  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   368    struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   369  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   370    /* do not forward link-local or loopback addresses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   371    if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   372        ip6_addr_isloopback(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   373      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: not forwarding link-local address.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   374      IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   375      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   376      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   377    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   378  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   379    /* Find network interface where to forward this IP packet to. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   380    netif = ip6_route(IP6_ADDR_ANY6, ip6_current_dest_addr());
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   381    if (netif == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   382      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: no route for %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   383          IP6_ADDR_BLOCK1(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   384          IP6_ADDR_BLOCK2(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   385          IP6_ADDR_BLOCK3(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   386          IP6_ADDR_BLOCK4(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   387          IP6_ADDR_BLOCK5(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   388          IP6_ADDR_BLOCK6(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   389          IP6_ADDR_BLOCK7(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   390          IP6_ADDR_BLOCK8(ip6_current_dest_addr())));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   391  #if LWIP_ICMP6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   392      /* Don't send ICMP messages in response to ICMP messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   393      if (IP6H_NEXTH(iphdr) != IP6_NEXTH_ICMP6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   394        icmp6_dest_unreach(p, ICMP6_DUR_NO_ROUTE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   395      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   396  #endif /* LWIP_ICMP6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   397      IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   398      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   399      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   400    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   401  #if LWIP_IPV6_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   402    /* Do not forward packets with a zoned (e.g., link-local) source address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   403     * outside of their zone. We determined the zone a bit earlier, so we know
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   404     * that the address is properly zoned here, so we can safely use has_zone.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   405     * Also skip packets with a loopback source address (link-local implied). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   406    if ((ip6_addr_has_zone(ip6_current_src_addr()) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   407        !ip6_addr_test_zone(ip6_current_src_addr(), netif)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   408        ip6_addr_isloopback(ip6_current_src_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   409      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: not forwarding packet beyond its source address zone.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   410      IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   411      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   412      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   413    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   414  #endif /* LWIP_IPV6_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   415    /* Do not forward packets onto the same network interface on which
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   416     * they arrived. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   417    if (netif == inp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   418      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: not bouncing packets back on incoming interface.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   419      IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   420      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   421      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   422    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   423  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   424    /* decrement HL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   425    IP6H_HOPLIM_SET(iphdr, IP6H_HOPLIM(iphdr) - 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   426    /* send ICMP6 if HL == 0 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   427    if (IP6H_HOPLIM(iphdr) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   428  #if LWIP_ICMP6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   429      /* Don't send ICMP messages in response to ICMP messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   430      if (IP6H_NEXTH(iphdr) != IP6_NEXTH_ICMP6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   431        icmp6_time_exceeded(p, ICMP6_TE_HL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   432      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   433  #endif /* LWIP_ICMP6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   434      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   435      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   436    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   437  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   438    if (netif->mtu && (p->tot_len > netif->mtu)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   439  #if LWIP_ICMP6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   440      /* Don't send ICMP messages in response to ICMP messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   441      if (IP6H_NEXTH(iphdr) != IP6_NEXTH_ICMP6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   442        icmp6_packet_too_big(p, netif->mtu);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   443      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   444  #endif /* LWIP_ICMP6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   445      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   446      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   447    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   448  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   449    LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: forwarding packet to %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   450        IP6_ADDR_BLOCK1(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   451        IP6_ADDR_BLOCK2(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   452        IP6_ADDR_BLOCK3(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   453        IP6_ADDR_BLOCK4(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   454        IP6_ADDR_BLOCK5(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   455        IP6_ADDR_BLOCK6(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   456        IP6_ADDR_BLOCK7(ip6_current_dest_addr()),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   457        IP6_ADDR_BLOCK8(ip6_current_dest_addr())));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   458  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   459    /* transmit pbuf on chosen interface */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   460    netif->output_ip6(netif, p, ip6_current_dest_addr());
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   461    IP6_STATS_INC(ip6.fw);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   462    IP6_STATS_INC(ip6.xmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   463    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   464  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   465  #endif /* LWIP_IPV6_FORWARD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   466  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   467  /** Return true if the current input packet should be accepted on this netif */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   468  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   469  ip6_input_accept(struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   470  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   471    /* interface is up? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   472    if (netif_is_up(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   473      u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   474      /* unicast to this interface address? address configured? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   475      /* If custom scopes are used, the destination zone will be tested as
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   476        * part of the local-address comparison, but we need to test the source
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   477        * scope as well (e.g., is this interface on the same link?). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   478      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   479        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   480            ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   481  #if IPV6_CUSTOM_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   482            && (!ip6_addr_has_zone(ip6_current_src_addr()) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   483                ip6_addr_test_zone(ip6_current_src_addr(), netif))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   484  #endif /* IPV6_CUSTOM_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   485        ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   486          /* accept on this netif */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   487          return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   488        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   489      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   490    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   491    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   492  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   493  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   494  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   495   * This function is called by the network interface device driver when
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   496   * an IPv6 packet is received. The function does the basic checks of the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   497   * IP header such as packet size being at least larger than the header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   498   * size etc. If the packet was not destined for us, the packet is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   499   * forwarded (using ip6_forward).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   500   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   501   * Finally, the packet is sent to the upper layer protocol input function.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   502   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   503   * @param p the received IPv6 packet (p->payload points to IPv6 header)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   504   * @param inp the netif on which this packet was received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   505   * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   506   *         processed, but currently always returns ERR_OK)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   507   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   508  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   509  ip6_input(struct pbuf *p, struct netif *inp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   510  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   511    struct ip6_hdr *ip6hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   512    struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   513    const u8_t *nexth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   514    u16_t hlen, hlen_tot; /* the current header length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   515  #if 0 /*IP_ACCEPT_LINK_LAYER_ADDRESSING*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   516    @todo
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   517    int check_ip_src=1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   518  #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   519  #if LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   520    raw_input_state_t raw_status;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   521  #endif /* LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   522  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   523    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   524  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   525    IP6_STATS_INC(ip6.recv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   526  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   527    /* identify the IP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   528    ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   529    if (IP6H_V(ip6hdr) != 6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   530      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IPv6 packet dropped due to bad version number %"U32_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   531          IP6H_V(ip6hdr)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   532      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   533      IP6_STATS_INC(ip6.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   534      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   535      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   536    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   537  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   538  #ifdef LWIP_HOOK_IP6_INPUT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   539    if (LWIP_HOOK_IP6_INPUT(p, inp)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   540      /* the packet has been eaten */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   541      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   542    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   543  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   544  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   545    /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   546    if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   547      if (IP6_HLEN > p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   548        LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   549          ("IPv6 header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   550              (u16_t)IP6_HLEN, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   551      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   552      if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   553        LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   554          ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   555              (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   556      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   557      /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   558      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   559      IP6_STATS_INC(ip6.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   560      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   561      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   562    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   563  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   564    /* Trim pbuf. This should have been done at the netif layer,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   565     * but we'll do it anyway just to be sure that its done. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   566    pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   567  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   568    /* copy IP addresses to aligned ip6_addr_t */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   569    ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   570    ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   571  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   572    /* Don't accept virtual IPv4 mapped IPv6 addresses.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   573     * Don't accept multicast source addresses. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   574    if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   575       ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   576       ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   577      /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   578      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   579      IP6_STATS_INC(ip6.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   580      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   581      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   582    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   584    /* Set the appropriate zone identifier on the addresses. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   585    ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   586    ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   587  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   588    /* current header pointer. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   589    ip_data.current_ip6_header = ip6hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   590  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   591    /* In netif, used in case we need to send ICMPv6 packets back. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   592    ip_data.current_netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   593    ip_data.current_input_netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   594  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   595    /* match packet against an interface, i.e. is this packet for us? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   596    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   597      /* Always joined to multicast if-local and link-local all-nodes group. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   598      if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   599          ip6_addr_isallnodes_linklocal(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   600        netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   601      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   602  #if LWIP_IPV6_MLD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   603      else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   604        netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   605      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   606  #else /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   607      else if (ip6_addr_issolicitednode(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   608        u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   609        /* Filter solicited node packets when MLD is not enabled
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   610         * (for Neighbor discovery). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   611        netif = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   612        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   613          if (ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   614              ip6_addr_cmp_solicitednode(ip6_current_dest_addr(), netif_ip6_addr(inp, i))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   615            netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   616            LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: solicited node packet accepted on interface %c%c\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   617                netif->name[0], netif->name[1]));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   618            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   619          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   620        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   621      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   622  #endif /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   623      else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   624        netif = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   625      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   626    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   627      /* start trying with inp. if that's not acceptable, start walking the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   628         list of configured netifs. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   629      if (ip6_input_accept(inp)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   630        netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   631      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   632        netif = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   633  #if !IPV6_CUSTOM_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   634        /* Shortcut: stop looking for other interfaces if either the source or
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   635          * the destination has a scope constrained to this interface. Custom
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   636          * scopes may break the 1:1 link/interface mapping, however. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   637        if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   638            ip6_addr_islinklocal(ip6_current_src_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   639          goto netif_found;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   640        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   641  #endif /* !IPV6_CUSTOM_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   642  #if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   643        /* The loopback address is to be considered link-local. Packets to it
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   644          * should be dropped on other interfaces, as per RFC 4291 Sec. 2.5.3.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   645          * Its implied scope means packets *from* the loopback address should
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   646          * not be accepted on other interfaces, either. These requirements
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   647          * cannot be implemented in the case that loopback traffic is sent
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   648          * across a non-loopback interface, however. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   649        if (ip6_addr_isloopback(ip6_current_dest_addr()) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   650            ip6_addr_isloopback(ip6_current_src_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   651          goto netif_found;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   652        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   653  #endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   654  #if !LWIP_SINGLE_NETIF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   655        NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   656          if (netif == inp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   657            /* we checked that before already */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   658            continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   659          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   660          if (ip6_input_accept(netif)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   661            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   662          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   663        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   664  #endif /* !LWIP_SINGLE_NETIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   665      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   666  netif_found:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   667      LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet accepted on interface %c%c\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   668          netif ? netif->name[0] : 'X', netif? netif->name[1] : 'X'));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   669    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   670  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   671    /* "::" packet source address? (used in duplicate address detection) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   672    if (ip6_addr_isany(ip6_current_src_addr()) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   673        (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   674      /* packet source is not valid */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   675      /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   676      LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with src ANY_ADDRESS dropped\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   677      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   678      IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   679      goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   680    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   681  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   682    /* packet not for us? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   683    if (netif == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   684      /* packet not for us, route or discard */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   685      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_TRACE, ("ip6_input: packet not for us.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   686  #if LWIP_IPV6_FORWARD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   687      /* non-multicast packet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   688      if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   689        /* try to forward IP packet on (other) interfaces */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   690        ip6_forward(p, ip6hdr, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   691      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   692  #endif /* LWIP_IPV6_FORWARD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   693      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   694      goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   695    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   696  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   697    /* current netif pointer. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   698    ip_data.current_netif = netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   699  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   700    /* Save next header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   701    nexth = &IP6H_NEXTH(ip6hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   702  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   703    /* Init header length. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   704    hlen = hlen_tot = IP6_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   705  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   706    /* Move to payload. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   707    pbuf_remove_header(p, IP6_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   708  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   709    /* Process known option extension headers, if present. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   710    while (*nexth != IP6_NEXTH_NONE)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   711    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   712      switch (*nexth) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   713      case IP6_NEXTH_HOPBYHOP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   714      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   715        s32_t opt_offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   716        struct ip6_hbh_hdr *hbh_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   717        struct ip6_opt_hdr *opt_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   718        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Hop-by-Hop options header\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   719  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   720        /* Get and check the header length, while staying in packet bounds. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   721        hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   722  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   723        /* Get next header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   724        nexth = &IP6_HBH_NEXTH(hbh_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   725  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   726        /* Get the header length. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   727        hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   728  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   729        if ((p->len < 8) || (hlen > p->len)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   730          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   731            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   732                hlen, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   733          /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   734          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   735          IP6_STATS_INC(ip6.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   736          IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   737          goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   738        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   739  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   740        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   741  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   742        /* The extended option header starts right after Hop-by-Hop header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   743        opt_offset = IP6_HBH_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   744        while (opt_offset < hlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   745        {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   746          s32_t opt_dlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   747  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   748          opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   749  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   750          switch (IP6_OPT_TYPE(opt_hdr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   751          /* @todo: process IPV6 Hop-by-Hop option data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   752          case IP6_PAD1_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   753            /* PAD1 option doesn't have length and value field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   754            opt_dlen = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   755            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   756          case IP6_PADN_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   757            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   758            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   759          case IP6_ROUTER_ALERT_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   760            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   761            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   762          case IP6_JUMBO_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   763            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   764            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   765          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   766            /* Check 2 MSB of Hop-by-Hop header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   767            switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   768            case 1:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   769              /* Discard the packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   770              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid Hop-by-Hop option type dropped.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   771              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   772              IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   773              goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   774            case 2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   775              /* Send ICMP Parameter Problem */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   776              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   777              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid Hop-by-Hop option type dropped.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   778              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   779              IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   780              goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   781            case 3:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   782              /* Send ICMP Parameter Problem if destination address is not a multicast address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   783              if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   784                icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   785              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   786              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid Hop-by-Hop option type dropped.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   787              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   788              IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   789              goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   790            default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   791              /* Skip over this option. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   792              opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   793              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   794            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   795            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   796          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   797  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   798          /* Adjust the offset to move to the next extended option header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   799          opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   800        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   801        pbuf_remove_header(p, hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   802        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   803      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   804      case IP6_NEXTH_DESTOPTS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   805      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   806        s32_t opt_offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   807        struct ip6_dest_hdr *dest_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   808        struct ip6_opt_hdr *opt_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   809        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Destination options header\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   810  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   811        dest_hdr = (struct ip6_dest_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   812  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   813        /* Get next header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   814        nexth = &IP6_DEST_NEXTH(dest_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   815  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   816        /* Get the header length. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   817        hlen = 8 * (1 + dest_hdr->_hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   818        if ((p->len < 8) || (hlen > p->len)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   819          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   820            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   821                hlen, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   822          /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   823          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   824          IP6_STATS_INC(ip6.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   825          IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   826          goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   827        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   828  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   829        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   830  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   831        /* The extended option header starts right after Destination header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   832        opt_offset = IP6_DEST_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   833        while (opt_offset < hlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   834        {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   835          s32_t opt_dlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   836  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   837          opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   838  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   839          switch (IP6_OPT_TYPE(opt_hdr))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   840          {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   841          /* @todo: process IPV6 Destination option data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   842          case IP6_PAD1_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   843            /* PAD1 option deosn't have length and value field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   844            opt_dlen = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   845            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   846          case IP6_PADN_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   847            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   848            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   849          case IP6_ROUTER_ALERT_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   850            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   851            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   852          case IP6_JUMBO_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   853            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   854            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   855          case IP6_HOME_ADDRESS_OPTION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   856            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   857            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   858          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   859            /* Check 2 MSB of Destination header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   860            switch (IP6_OPT_TYPE_ACTION(opt_hdr))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   861            {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   862            case 1:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   863              /* Discard the packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   864              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid destination option type dropped.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   865              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   866              IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   867              goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   868            case 2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   869              /* Send ICMP Parameter Problem */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   870              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   871              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid destination option type dropped.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   872              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   873              IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   874              goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   875            case 3:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   876              /* Send ICMP Parameter Problem if destination address is not a multicast address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   877              if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   878                icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   879              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   880              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid destination option type dropped.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   881              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   882              IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   883              goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   884            default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   885              /* Skip over this option. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   886              opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   887              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   888            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   889            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   890          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   891  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   892          /* Adjust the offset to move to the next extended option header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   893          opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   894        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   895  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   896        pbuf_remove_header(p, hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   897        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   898      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   899      case IP6_NEXTH_ROUTING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   900      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   901        struct ip6_rout_hdr *rout_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   902        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Routing header\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   903  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   904        rout_hdr = (struct ip6_rout_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   905  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   906        /* Get next header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   907        nexth = &IP6_ROUT_NEXTH(rout_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   908  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   909        /* Get the header length. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   910        hlen = 8 * (1 + rout_hdr->_hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   911  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   912        if ((p->len < 8) || (hlen > p->len)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   913          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   914            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   915                hlen, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   916          /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   917          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   918          IP6_STATS_INC(ip6.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   919          IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   920          goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   921        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   922  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   923        /* Skip over this header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   924        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   925  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   926        /* if segment left value is 0 in routing header, ignore the option */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   927        if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   928          /* The length field of routing option header must be even */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   929          if (rout_hdr->_hlen & 0x1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   930            /* Discard and send parameter field error */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   931            icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   932            LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid routing type dropped\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   933            pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   934            IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   935            goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   936          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   937  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   938          switch (IP6_ROUT_TYPE(rout_hdr))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   939          {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   940          /* TODO: process routing by the type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   941          case IP6_ROUT_TYPE2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   942            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   943          case IP6_ROUT_RPL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   944            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   945          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   946            /* Discard unrecognized routing type and send parameter field error */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   947            icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   948            LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid routing type dropped\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   949            pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   950            IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   951            goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   952          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   953        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   954  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   955        pbuf_remove_header(p, hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   956        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   957      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   958      case IP6_NEXTH_FRAGMENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   959      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   960        struct ip6_frag_hdr *frag_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   961        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Fragment header\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   962  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   963        frag_hdr = (struct ip6_frag_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   964  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   965        /* Get next header type. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   966        nexth = &IP6_FRAG_NEXTH(frag_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   967  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   968        /* Fragment Header length. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   969        hlen = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   970  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   971        /* Make sure this header fits in current pbuf. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   972        if (hlen > p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   973          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   974            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   975                hlen, p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   976          /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   977          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   978          IP6_FRAG_STATS_INC(ip6_frag.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   979          IP6_FRAG_STATS_INC(ip6_frag.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   980          goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   981        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   982  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   983        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   984  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   985        /* check payload length is multiple of 8 octets when mbit is set */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   986        if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   987          /* ipv6 payload length is not multiple of 8 octets */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   988          icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   989          LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid payload length dropped\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   990          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   991          IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   992          goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   993        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   994  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   995        /* Offset == 0 and more_fragments == 0? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   996        if ((frag_hdr->_fragment_offset &
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   997             PP_HTONS(IP6_FRAG_OFFSET_MASK | IP6_FRAG_MORE_FLAG)) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   998          /* This is a 1-fragment packet. Skip this header and continue. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	   999          pbuf_remove_header(p, hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1000        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1001  #if LWIP_IPV6_REASS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1002          /* reassemble the packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1003          ip_data.current_ip_header_tot_len = hlen_tot;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1004          p = ip6_reass(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1005          /* packet not fully reassembled yet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1006          if (p == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1007            goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1008          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1009  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1010          /* Returned p point to IPv6 header.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1011           * Update all our variables and pointers and continue. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1012          ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1013          nexth = &IP6H_NEXTH(ip6hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1014          hlen = hlen_tot = IP6_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1015          pbuf_remove_header(p, IP6_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1016  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1017  #else /* LWIP_IPV6_REASS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1018          /* free (drop) packet pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1019          LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Fragment header dropped (with LWIP_IPV6_REASS==0)\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1020          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1021          IP6_STATS_INC(ip6.opterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1022          IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1023          goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1024  #endif /* LWIP_IPV6_REASS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1025        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1026        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1027      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1028      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1029        goto options_done;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1030      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1031  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1032      if (*nexth == IP6_NEXTH_HOPBYHOP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1033        /* Hop-by-Hop header comes only as a first option */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1034        icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1035        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Hop-by-Hop options header dropped (only valid as a first option)\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1036        pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1037        IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1038        goto ip6_input_cleanup;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1039      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1040    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1041  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1042  options_done:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1043  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1044    /* send to upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1045    LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: \n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1046    ip6_debug_print(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1047    LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1048  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1049    ip_data.current_ip_header_tot_len = hlen_tot;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1050    
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1051  #if LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1052    /* p points to IPv6 header again for raw_input. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1053    pbuf_add_header_force(p, hlen_tot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1054    /* raw input did not eat the packet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1055    raw_status = raw_input(p, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1056    if (raw_status != RAW_INPUT_EATEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1057    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1058      /* Point to payload. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1059      pbuf_remove_header(p, hlen_tot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1060  #else /* LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1061    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1062  #endif /* LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1063      switch (*nexth) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1064      case IP6_NEXTH_NONE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1065        pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1066        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1067  #if LWIP_UDP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1068      case IP6_NEXTH_UDP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1069  #if LWIP_UDPLITE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1070      case IP6_NEXTH_UDPLITE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1071  #endif /* LWIP_UDPLITE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1072        udp_input(p, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1073        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1074  #endif /* LWIP_UDP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1075  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1076      case IP6_NEXTH_TCP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1077        tcp_input(p, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1078        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1079  #endif /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1080  #if LWIP_ICMP6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1081      case IP6_NEXTH_ICMP6:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1082        icmp6_input(p, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1083        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1084  #endif /* LWIP_ICMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1085      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1086  #if LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1087          if (raw_status == RAW_INPUT_DELIVERED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1088            /* @todo: ipv6 mib in-delivers? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1089          } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1090  #endif /* LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1091          {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1092  #if LWIP_ICMP6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1093          /* p points to IPv6 header again for raw_input. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1094          pbuf_add_header_force(p, hlen_tot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1095          /* send ICMP parameter problem unless it was a multicast or ICMPv6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1096          if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1097              (IP6H_NEXTH(ip6hdr) != IP6_NEXTH_ICMP6)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1098            icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1099          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1100  #endif /* LWIP_ICMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1101          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_input: Unsupported transport protocol %"U16_F"\n", (u16_t)IP6H_NEXTH(ip6hdr)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1102          IP6_STATS_INC(ip6.proterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1103          IP6_STATS_INC(ip6.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1104        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1105        pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1106        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1107      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1108    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1109  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1110  ip6_input_cleanup:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1111    ip_data.current_netif = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1112    ip_data.current_input_netif = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1113    ip_data.current_ip6_header = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1114    ip_data.current_ip_header_tot_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1115    ip6_addr_set_zero(ip6_current_src_addr());
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1116    ip6_addr_set_zero(ip6_current_dest_addr());
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1117  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1118    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1119  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1120  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1121  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1122  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1123   * Sends an IPv6 packet on a network interface. This function constructs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1124   * the IPv6 header. If the source IPv6 address is NULL, the IPv6 "ANY" address is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1125   * used as source (usually during network startup). If the source IPv6 address it
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1126   * IP6_ADDR_ANY, the most appropriate IPv6 address of the outgoing network
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1127   * interface is filled in as source address. If the destination IPv6 address is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1128   * LWIP_IP_HDRINCL, p is assumed to already include an IPv6 header and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1129   * p->payload points to it instead of the data.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1130   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1131   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1132              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1133              IPv6 header and p->payload points to that IPv6 header)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1134   * @param src the source IPv6 address to send from (if src == IP6_ADDR_ANY, an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1135   *         IP address of the netif is selected and used as source address.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1136   *         if src == NULL, IP6_ADDR_ANY is used as source) (src is possibly not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1137   *         properly zoned)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1138   * @param dest the destination IPv6 address to send the packet to (possibly not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1139   *             properly zoned)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1140   * @param hl the Hop Limit value to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1141   * @param tc the Traffic Class value to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1142   * @param nexth the Next Header to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1143   * @param netif the netif on which to send this packet
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1144   * @return ERR_OK if the packet was sent OK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1145   *         ERR_BUF if p doesn't have enough space for IPv6/LINK headers
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1146   *         returns errors returned by netif->output_ip6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1147   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1148  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1149  ip6_output_if(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1150               u8_t hl, u8_t tc,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1151               u8_t nexth, struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1152  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1153    const ip6_addr_t *src_used = src;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1154    if (dest != LWIP_IP_HDRINCL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1155      if (src != NULL && ip6_addr_isany(src)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1156        src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1157        if ((src_used == NULL) || ip6_addr_isany(src_used)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1158          /* No appropriate source address was found for this packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1159          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: No suitable source address for packet.\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1160          IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1161          return ERR_RTE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1162        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1163      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1164    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1165    return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1166  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1167  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1168  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1169   * Same as ip6_output_if() but 'src' address is not replaced by netif address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1170   * when it is 'any'.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1171   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1172  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1173  ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1174               u8_t hl, u8_t tc,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1175               u8_t nexth, struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1176  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1177    struct ip6_hdr *ip6hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1178    ip6_addr_t dest_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1179  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1180    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1181    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1182  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1183    /* Should the IPv6 header be generated or is it already included in p? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1184    if (dest != LWIP_IP_HDRINCL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1185  #if LWIP_IPV6_SCOPES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1186      /* If the destination address is scoped but lacks a zone, add a zone now,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1187       * based on the outgoing interface. The lower layers (e.g., nd6) absolutely
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1188       * require addresses to be properly zoned for correctness. In some cases,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1189       * earlier attempts will have been made to add a zone to the destination,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1190       * but this function is the only one that is called in all (other) cases,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1191       * so we must do this here. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1192      if (ip6_addr_lacks_zone(dest, IP6_UNKNOWN)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1193        ip6_addr_copy(dest_addr, *dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1194        ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1195        dest = &dest_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1196      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1197  #endif /* LWIP_IPV6_SCOPES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1198  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1199      /* generate IPv6 header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1200      if (pbuf_add_header(p, IP6_HLEN)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1201        LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: not enough room for IPv6 header in pbuf\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1202        IP6_STATS_INC(ip6.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1203        return ERR_BUF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1204      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1205  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1206      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1207      LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1208                 (p->len >= sizeof(struct ip6_hdr)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1209  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1210      IP6H_HOPLIM_SET(ip6hdr, hl);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1211      IP6H_NEXTH_SET(ip6hdr, nexth);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1212  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1213      /* dest cannot be NULL here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1214      ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1215  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1216      IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1217      IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1218  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1219      if (src == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1220        src = IP6_ADDR_ANY6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1221      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1222      /* src cannot be NULL here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1223      ip6_addr_copy_to_packed(ip6hdr->src, *src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1224  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1225    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1226      /* IP header already included in p */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1227      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1228      ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1229      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1230      dest = &dest_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1231    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1232  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1233    IP6_STATS_INC(ip6.xmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1234  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1235    LWIP_DEBUGF(IP6_DEBUG, ("ip6_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1236    ip6_debug_print(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1237  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1238  #if ENABLE_LOOPBACK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1239    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1240      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1241  #if !LWIP_HAVE_LOOPIF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1242      if (ip6_addr_isloopback(dest)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1243        return netif_loop_output(netif, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1244      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1245  #endif /* !LWIP_HAVE_LOOPIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1246      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1247        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1248            ip6_addr_cmp(dest, netif_ip6_addr(netif, i))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1249          /* Packet to self, enqueue it for loopback */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1250          LWIP_DEBUGF(IP6_DEBUG, ("netif_loop_output()\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1251          return netif_loop_output(netif, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1252        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1253      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1254    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1255  #if LWIP_MULTICAST_TX_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1256    if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1257      netif_loop_output(netif, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1258    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1259  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1260  #endif /* ENABLE_LOOPBACK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1261  #if LWIP_IPV6_FRAG
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1262    /* don't fragment if interface has mtu set to 0 [loopif] */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1263    if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1264      return ip6_frag(p, netif, dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1265    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1266  #endif /* LWIP_IPV6_FRAG */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1267  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1268    LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1269    return netif->output_ip6(netif, p, dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1270  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1271  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1272  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1273   * Simple interface to ip6_output_if. It finds the outgoing network
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1274   * interface and calls upon ip6_output_if to do the actual work.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1275   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1276   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1277              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1278              IPv6 header and p->payload points to that IPv6 header)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1279   * @param src the source IPv6 address to send from (if src == IP6_ADDR_ANY, an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1280   *         IP address of the netif is selected and used as source address.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1281   *         if src == NULL, IP6_ADDR_ANY is used as source)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1282   * @param dest the destination IPv6 address to send the packet to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1283   * @param hl the Hop Limit value to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1284   * @param tc the Traffic Class value to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1285   * @param nexth the Next Header to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1286   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1287   * @return ERR_RTE if no route is found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1288   *         see ip_output_if() for more return values
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1289   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1290  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1291  ip6_output(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1292            u8_t hl, u8_t tc, u8_t nexth)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1293  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1294    struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1295    struct ip6_hdr *ip6hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1296    ip6_addr_t src_addr, dest_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1297  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1298    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1299  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1300    if (dest != LWIP_IP_HDRINCL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1301      netif = ip6_route(src, dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1302    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1303      /* IP header included in p, read addresses. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1304      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1305      ip6_addr_copy_from_packed(src_addr, ip6hdr->src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1306      ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1307      netif = ip6_route(&src_addr, &dest_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1308    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1309  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1310    if (netif == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1311      LWIP_DEBUGF(IP6_DEBUG, ("ip6_output: no route for %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1312          IP6_ADDR_BLOCK1(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1313          IP6_ADDR_BLOCK2(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1314          IP6_ADDR_BLOCK3(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1315          IP6_ADDR_BLOCK4(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1316          IP6_ADDR_BLOCK5(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1317          IP6_ADDR_BLOCK6(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1318          IP6_ADDR_BLOCK7(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1319          IP6_ADDR_BLOCK8(dest)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1320      IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1321      return ERR_RTE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1322    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1323  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1324    return ip6_output_if(p, src, dest, hl, tc, nexth, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1325  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1326  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1327  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1328  #if LWIP_NETIF_USE_HINTS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1329  /** Like ip6_output, but takes and addr_hint pointer that is passed on to netif->addr_hint
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1330   *  before calling ip6_output_if.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1331   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1332   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1333              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1334              IPv6 header and p->payload points to that IPv6 header)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1335   * @param src the source IPv6 address to send from (if src == IP6_ADDR_ANY, an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1336   *         IP address of the netif is selected and used as source address.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1337   *         if src == NULL, IP6_ADDR_ANY is used as source)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1338   * @param dest the destination IPv6 address to send the packet to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1339   * @param hl the Hop Limit value to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1340   * @param tc the Traffic Class value to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1341   * @param nexth the Next Header to be set in the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1342   * @param netif_hint netif output hint pointer set to netif->hint before
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1343   *        calling ip_output_if()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1344   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1345   * @return ERR_RTE if no route is found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1346   *         see ip_output_if() for more return values
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1347   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1348  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1349  ip6_output_hinted(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1350            u8_t hl, u8_t tc, u8_t nexth, struct netif_hint *netif_hint)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1351  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1352    struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1353    struct ip6_hdr *ip6hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1354    ip6_addr_t src_addr, dest_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1355    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1356  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1357    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1358  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1359    if (dest != LWIP_IP_HDRINCL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1360      netif = ip6_route(src, dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1361    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1362      /* IP header included in p, read addresses. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1363      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1364      ip6_addr_copy_from_packed(src_addr, ip6hdr->src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1365      ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1366      netif = ip6_route(&src_addr, &dest_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1367    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1368  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1369    if (netif == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1370      LWIP_DEBUGF(IP6_DEBUG, ("ip6_output: no route for %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1371          IP6_ADDR_BLOCK1(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1372          IP6_ADDR_BLOCK2(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1373          IP6_ADDR_BLOCK3(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1374          IP6_ADDR_BLOCK4(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1375          IP6_ADDR_BLOCK5(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1376          IP6_ADDR_BLOCK6(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1377          IP6_ADDR_BLOCK7(dest),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1378          IP6_ADDR_BLOCK8(dest)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1379      IP6_STATS_INC(ip6.rterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1380      return ERR_RTE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1381    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1383    NETIF_SET_HINTS(netif, netif_hint);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1384    err = ip6_output_if(p, src, dest, hl, tc, nexth, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1385    NETIF_RESET_HINTS(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1386  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1387    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1388  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1389  #endif /* LWIP_NETIF_USE_HINTS*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1390  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1391  #if LWIP_IPV6_MLD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1392  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1393   * Add a hop-by-hop options header with a router alert option and padding.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1394   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1395   * Used by MLD when sending a Multicast listener report/done message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1396   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1397   * @param p the packet to which we will prepend the options header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1398   * @param nexth the next header protocol number (e.g. IP6_NEXTH_ICMP6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1399   * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1400   * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1401   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1402  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1403  ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1404  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1405    u8_t *opt_data;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1406    u32_t offset = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1407    struct ip6_hbh_hdr *hbh_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1408    struct ip6_opt_hdr *opt_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1409  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1410    /* fixed 4 bytes for router alert option and 2 bytes padding */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1411    const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1412    /* Move pointer to make room for hop-by-hop options header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1413    if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1414      LWIP_DEBUGF(IP6_DEBUG, ("ip6_options: no space for options header\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1415      IP6_STATS_INC(ip6.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1416      return ERR_BUF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1417    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1418  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1419    /* Set fields of Hop-by-Hop header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1420    hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1421    IP6_HBH_NEXTH(hbh_hdr) = nexth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1422    hbh_hdr->_hlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1423    offset = IP6_HBH_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1424  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1425    /* Set router alert options to Hop-by-Hop extended option header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1426    opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1427    IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1428    IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1429    offset += IP6_OPT_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1430  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1431    /* Set router alert option data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1432    opt_data = (u8_t *)hbh_hdr + offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1433    opt_data[0] = value;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1434    opt_data[1] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1435    offset += IP6_OPT_DLEN(opt_hdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1436  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1437    /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1438    opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1439    IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1440    IP6_OPT_DLEN(opt_hdr) = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1441  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1442    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1443  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1444  #endif /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1445  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1446  #if IP6_DEBUG
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1447  /* Print an IPv6 header by using LWIP_DEBUGF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1448   * @param p an IPv6 packet, p->payload pointing to the IPv6 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1449   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1450  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1451  ip6_debug_print(struct pbuf *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1452  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1453    struct ip6_hdr *ip6hdr = (struct ip6_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1455    LWIP_DEBUGF(IP6_DEBUG, ("IPv6 header:\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1456    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1457    LWIP_DEBUGF(IP6_DEBUG, ("| %2"U16_F" |  %3"U16_F"  |      %7"U32_F"     | (ver, class, flow)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1458                      IP6H_V(ip6hdr),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1459                      IP6H_TC(ip6hdr),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1460                      IP6H_FL(ip6hdr)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1461    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1462    LWIP_DEBUGF(IP6_DEBUG, ("|     %5"U16_F"     |  %3"U16_F"  |  %3"U16_F"  | (plen, nexth, hopl)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1463                      IP6H_PLEN(ip6hdr),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1464                      IP6H_NEXTH(ip6hdr),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1465                      IP6H_HOPLIM(ip6hdr)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1466    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1467    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" | (src)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1468                      IP6_ADDR_BLOCK1(&(ip6hdr->src)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1469                      IP6_ADDR_BLOCK2(&(ip6hdr->src)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1470                      IP6_ADDR_BLOCK3(&(ip6hdr->src)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1471                      IP6_ADDR_BLOCK4(&(ip6hdr->src))));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1472    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1473                      IP6_ADDR_BLOCK5(&(ip6hdr->src)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1474                      IP6_ADDR_BLOCK6(&(ip6hdr->src)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1475                      IP6_ADDR_BLOCK7(&(ip6hdr->src)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1476                      IP6_ADDR_BLOCK8(&(ip6hdr->src))));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1477    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1478    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" | (dest)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1479                      IP6_ADDR_BLOCK1(&(ip6hdr->dest)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1480                      IP6_ADDR_BLOCK2(&(ip6hdr->dest)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1481                      IP6_ADDR_BLOCK3(&(ip6hdr->dest)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1482                      IP6_ADDR_BLOCK4(&(ip6hdr->dest))));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1483    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1484                      IP6_ADDR_BLOCK5(&(ip6hdr->dest)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1485                      IP6_ADDR_BLOCK6(&(ip6hdr->dest)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1486                      IP6_ADDR_BLOCK7(&(ip6hdr->dest)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1487                      IP6_ADDR_BLOCK8(&(ip6hdr->dest))));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1488    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1489  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1490  #endif /* IP6_DEBUG */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1491  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\ip6.c	  1492  #endif /* LWIP_IPV6 */

	; Module end
