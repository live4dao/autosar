	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc35788a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\.ip4_frag.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\ip4_frag.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\ip4_frag.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\ip4_frag.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\ip4_frag.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	5428
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\ip4_frag.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	172
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	174
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	197
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	197
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	244
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	281
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	197
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	197
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	244
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	380
	.byte	3
	.word	197
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	474
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	503
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	197
	.byte	8,4
	.word	281
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	608
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	617
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	244
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	608
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	690
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	197
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	617
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	617
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	932
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	197
	.byte	8,3
	.word	197
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1089
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1098
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	244
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1232
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	197
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	197
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	197
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1343
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	197
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	197
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	197
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	197
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	197
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	197
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	244
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	244
	.byte	8,1
	.word	197
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1797
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1797
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1806
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1882
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	690
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2018
	.byte	12
	.word	197
	.byte	3
	.word	2132
	.byte	12
	.word	197
	.byte	3
	.word	2142
	.byte	12
	.word	197
	.byte	3
	.word	2152
	.byte	12
	.word	1882
	.byte	3
	.word	2162
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	244
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	197
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	197
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	197
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	197
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	690
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2137
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2147
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2157
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2167
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2172
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	281
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	281
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	281
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2524
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	281
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2674
	.byte	12
	.word	2524
	.byte	3
	.word	2811
	.byte	12
	.word	2674
	.byte	3
	.word	2821
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	197
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	197
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	244
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2167
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2816
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2826
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2831
	.byte	12
	.word	197
	.byte	3
	.word	3116
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3121
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3121
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3126
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1882
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	197
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	197
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3290
	.byte	3
	.word	1806
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	281
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	197
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	197
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	244
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3435
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	474
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3440
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	281
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1882
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	197
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	197
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3435
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3655
	.byte	12
	.word	3440
	.byte	3
	.word	3825
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	244
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	474
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	244
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	244
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3121
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3830
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3835
	.byte	12
	.word	3655
	.byte	3
	.word	4059
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4064
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4069
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	474
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4169
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	474
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4266
	.byte	8,8
	.word	197
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4360
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4069
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4069
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4266
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4169
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4369
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	197
	.byte	5
	.byte	'char',0,1,6,4
	.byte	's8_t',0,10,62,25
	.word	4554
	.byte	4
	.byte	'u16_t',0,10,63,25
	.word	244
	.byte	4
	.byte	'u32_t',0,10,65,25
	.word	281
	.byte	4
	.byte	'err_t',0,11,96,14
	.word	4554
	.byte	13
	.byte	'ip4_addr',0,12,51,8,4,11
	.byte	'addr',0
	.word	281
	.byte	4,2,35,0,0,4
	.byte	'ip4_addr_t',0,12,57,25
	.word	4617
	.byte	4
	.byte	'ip_addr_t',0,13,142,2,20
	.word	4617
	.byte	14
	.byte	'void',0,3
	.word	4684
	.byte	13
	.byte	'pbuf',0,14,186,1,8,16,11
	.byte	'next',0
	.word	.L6-.L3
	.byte	4,2,35,0,11
	.byte	'payload',0
	.word	4690
	.byte	4,2,35,4,11
	.byte	'tot_len',0
	.word	244
	.byte	2,2,35,8,11
	.byte	'len',0
	.word	244
	.byte	2,2,35,10,11
	.byte	'type_internal',0
	.word	197
	.byte	1,2,35,12,11
	.byte	'flags',0
	.word	197
	.byte	1,2,35,13,11
	.byte	'ref',0
	.word	197
	.byte	1,2,35,14,11
	.byte	'if_idx',0
	.word	197
	.byte	1,2,35,15,0
.L6:
	.byte	3
	.word	4695
	.byte	12
	.word	4617
	.byte	3
	.word	4840
	.byte	15
	.word	4554
	.byte	1,1,16
	.word	.L7-.L3
	.byte	16
	.word	4835
	.byte	16
	.word	4845
	.byte	0,3
	.word	4850
	.byte	4
	.byte	'netif_output_fn',0,15,189,1,17
	.word	4873
	.byte	15
	.word	4554
	.byte	1,1,16
	.word	.L7-.L3
	.byte	16
	.word	4835
	.byte	0,3
	.word	4903
	.byte	4
	.byte	'netif_linkoutput_fn',0,15,212,1,17
	.word	4921
	.byte	17,1,1,16
	.word	.L7-.L3
	.byte	0,3
	.word	4955
	.byte	4
	.byte	'netif_status_callback_fn',0,15,214,1,16
	.word	4964
	.byte	8,6
	.word	197
	.byte	9,5,0,5
	.byte	'char',0,1,6,8,2
	.word	5012
	.byte	9,1,0,13
	.byte	'netif',0,15,132,2,8,52,11
	.byte	'next',0
	.word	.L7-.L3
	.byte	4,2,35,0,11
	.byte	'ip_addr',0
	.word	4617
	.byte	4,2,35,4,11
	.byte	'netmask',0
	.word	4617
	.byte	4,2,35,8,11
	.byte	'gw',0
	.word	4617
	.byte	4,2,35,12,11
	.byte	'input',0
	.word	.L8-.L3
	.byte	4,2,35,16,11
	.byte	'output',0
	.word	4878
	.byte	4,2,35,20,11
	.byte	'linkoutput',0
	.word	4926
	.byte	4,2,35,24,11
	.byte	'status_callback',0
	.word	4969
	.byte	4,2,35,28,11
	.byte	'state',0
	.word	4690
	.byte	4,2,35,32,11
	.byte	'mtu',0
	.word	244
	.byte	2,2,35,36,11
	.byte	'hwaddr',0
	.word	5003
	.byte	6,2,35,38,11
	.byte	'hwaddr_len',0
	.word	197
	.byte	1,2,35,44,11
	.byte	'flags',0
	.word	197
	.byte	1,2,35,45,11
	.byte	'name',0
	.word	5020
	.byte	2,2,35,46,11
	.byte	'num',0
	.word	197
	.byte	1,2,35,48,11
	.byte	'rs_count',0
	.word	197
	.byte	1,2,35,49,0
.L7:
	.byte	3
	.word	5029
	.byte	15
	.word	4554
	.byte	1,1,16
	.word	4835
	.byte	16
	.word	5302
	.byte	0,3
	.word	5307
.L8:
	.byte	4
	.byte	'netif_input_fn',0,15,178,1,17
	.word	5325
	.byte	3
	.word	5307
	.byte	3
	.word	4850
	.byte	3
	.word	4903
	.byte	3
	.word	4955
	.byte	13
	.byte	'ip4_addr_packed',0,16,53,8,4,11
	.byte	'addr',0
	.word	281
	.byte	4,2,35,0,0,4
	.byte	'ip4_addr_p_t',0,16,61,32
	.word	5374
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,13,19,1,3,8,58,15,59,15,57,15,11,15,0,0,14,59,0,3,8,0,0,15,21,1,73,19,54,15,39,12
	.byte	0,0,16,5,0,73,19,0,0,17,21,1,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L10-.L9
.L9:
	.half	3
	.word	.L12-.L11
.L11:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot',0
	.byte	0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4\\ip4_frag.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0
	.byte	'err.h',0,7,0,0
	.byte	'ip4_addr.h',0,7,0,0
	.byte	'ip_addr.h',0,7,0,0
	.byte	'pbuf.h',0,7,0,0
	.byte	'netif.h',0,7,0,0
	.byte	'ip4.h',0,8,0,0,0
.L12:
.L10:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     3   * This is the IPv4 packet segmentation and reassembly implementation.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     4   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     5   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     6  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     7  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     8   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	     9   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    10   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    11   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    12   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    13   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    14   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    15   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    16   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    17   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    18   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    19   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    20   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    21   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    22   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    23   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    24   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    25   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    26   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    27   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    28   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    29   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    30   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    31   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    32   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    33   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    34   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    35   * Author: Jani Monoses <jani@iv.ro>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    36   *         Simon Goldschmidt
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    37   * original reassembly code by Adam Dunkels <adam@sics.se>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    38   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    39   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    40  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    41  #include "lwip/opt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    42  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    43  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    44  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    45  #include "lwip/ip4_frag.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    46  #include "lwip/def.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    47  #include "lwip/inet_chksum.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    48  #include "lwip/netif.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    49  #include "lwip/stats.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    50  #include "lwip/icmp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    51  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    52  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    53  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    54  #if IP_REASSEMBLY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    55  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    56   * The IP reassembly code currently has the following limitations:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    57   * - IP header options are not supported
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    58   * - fragments must not overlap (e.g. due to different routes),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    59   *   currently, overlapping or duplicate fragments are thrown away
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    60   *   if IP_REASS_CHECK_OVERLAP=1 (the default)!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    61   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    62   * @todo: work with IP header options
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    63   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    64  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    65  /** Setting this to 0, you can turn off checking the fragments for overlapping
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    66   * regions. The code gets a little smaller. Only use this if you know that
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    67   * overlapping won't occur on your network! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    68  #ifndef IP_REASS_CHECK_OVERLAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    69  #define IP_REASS_CHECK_OVERLAP 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    70  #endif /* IP_REASS_CHECK_OVERLAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    71  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    72  /** Set to 0 to prevent freeing the oldest datagram when the reassembly buffer is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    73   * full (IP_REASS_MAX_PBUFS pbufs are enqueued). The code gets a little smaller.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    74   * Datagrams will be freed by timeout only. Especially useful when MEMP_NUM_REASSDATA
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    75   * is set to 1, so one datagram can be reassembled at a time, only. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    76  #ifndef IP_REASS_FREE_OLDEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    77  #define IP_REASS_FREE_OLDEST 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    78  #endif /* IP_REASS_FREE_OLDEST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    79  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    80  #define IP_REASS_FLAG_LASTFRAG 0x01
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    81  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    82  #define IP_REASS_VALIDATE_TELEGRAM_FINISHED  1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    83  #define IP_REASS_VALIDATE_PBUF_QUEUED        0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    84  #define IP_REASS_VALIDATE_PBUF_DROPPED       -1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    85  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    86  /** This is a helper struct which holds the starting
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    87   * offset and the ending offset of this fragment to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    88   * easily chain the fragments.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    89   * It has the same packing requirements as the IP header, since it replaces
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    90   * the IP header in memory in incoming fragments (after copying it) to keep
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    91   * track of the various fragments. (-> If the IP header doesn't need packing,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    92   * this struct doesn't need packing, too.)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    93   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    94  #ifdef PACK_STRUCT_USE_INCLUDES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    95  #  include "arch/bpstruct.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    96  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    97  PACK_STRUCT_BEGIN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    98  struct ip_reass_helper {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	    99    PACK_STRUCT_FIELD(struct pbuf *next_pbuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   100    PACK_STRUCT_FIELD(u16_t start);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   101    PACK_STRUCT_FIELD(u16_t end);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   102  } PACK_STRUCT_STRUCT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   103  PACK_STRUCT_END
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   104  #ifdef PACK_STRUCT_USE_INCLUDES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   105  #  include "arch/epstruct.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   106  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   107  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   108  #define IP_ADDRESSES_AND_ID_MATCH(iphdrA, iphdrB)  \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   109    (ip4_addr_cmp(&(iphdrA)->src, &(iphdrB)->src) && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   110     ip4_addr_cmp(&(iphdrA)->dest, &(iphdrB)->dest) && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   111     IPH_ID(iphdrA) == IPH_ID(iphdrB)) ? 1 : 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   112  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   113  /* global variables */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   114  static struct ip_reassdata *reassdatagrams;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   115  static u16_t ip_reass_pbufcount;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   116  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   117  /* function prototypes */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   118  static void ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   119  static int ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   120  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   121  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   122   * Reassembly timer base function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   123   * for both NO_SYS == 0 and 1 (!).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   124   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   125   * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   126   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   127  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   128  ip_reass_tmr(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   129  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   130    struct ip_reassdata *r, *prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   131  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   132    r = reassdatagrams;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   133    while (r != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   134      /* Decrement the timer. Once it reaches 0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   135       * clean up the incomplete fragment assembly */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   136      if (r->timer > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   137        r->timer--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   138        LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   139        prev = r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   140        r = r->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   141      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   142        /* reassembly timed out */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   143        struct ip_reassdata *tmp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   144        LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   145        tmp = r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   146        /* get the next pointer before freeing */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   147        r = r->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   148        /* free the helper struct and all enqueued pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   149        ip_reass_free_complete_datagram(tmp, prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   150      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   151    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   152  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   153  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   154  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   155   * Free a datagram (struct ip_reassdata) and all its pbufs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   156   * Updates the total count of enqueued pbufs (ip_reass_pbufcount),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   157   * SNMP counters and sends an ICMP time exceeded packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   158   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   159   * @param ipr datagram to free
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   160   * @param prev the previous datagram in the linked list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   161   * @return the number of pbufs freed
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   162   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   163  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   164  ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   165  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   166    u16_t pbufs_freed = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   167    u16_t clen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   168    struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   169    struct ip_reass_helper *iprh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   170  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   171    LWIP_ASSERT("prev != ipr", prev != ipr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   172    if (prev != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   173      LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   174    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   175  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   176    MIB2_STATS_INC(mib2.ipreasmfails);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   177  #if LWIP_ICMP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   178    iprh = (struct ip_reass_helper *)ipr->p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   179    if (iprh->start == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   180      /* The first fragment was received, send ICMP time exceeded. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   181      /* First, de-queue the first pbuf from r->p. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   182      p = ipr->p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   183      ipr->p = iprh->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   184      /* Then, copy the original header into it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   185      SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   186      icmp_time_exceeded(p, ICMP_TE_FRAG);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   187      clen = pbuf_clen(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   188      LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   189      pbufs_freed = (u16_t)(pbufs_freed + clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   190      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   191    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   192  #endif /* LWIP_ICMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   193  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   194    /* First, free all received pbufs.  The individual pbufs need to be released
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   195       separately as they have not yet been chained */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   196    p = ipr->p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   197    while (p != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   198      struct pbuf *pcur;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   199      iprh = (struct ip_reass_helper *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   200      pcur = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   201      /* get the next pointer before freeing */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   202      p = iprh->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   203      clen = pbuf_clen(pcur);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   204      LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   205      pbufs_freed = (u16_t)(pbufs_freed + clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   206      pbuf_free(pcur);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   207    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   208    /* Then, unchain the struct ip_reassdata from the list and free it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   209    ip_reass_dequeue_datagram(ipr, prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   210    LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   211    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   212  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   213    return pbufs_freed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   214  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   215  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   216  #if IP_REASS_FREE_OLDEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   217  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   218   * Free the oldest datagram to make room for enqueueing new fragments.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   219   * The datagram 'fraghdr' belongs to is not freed!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   220   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   221   * @param fraghdr IP header of the current fragment
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   222   * @param pbufs_needed number of pbufs needed to enqueue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   223   *        (used for freeing other datagrams if not enough space)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   224   * @return the number of pbufs freed
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   225   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   226  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   227  ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   228  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   229    /* @todo Can't we simply remove the last datagram in the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   230     *       linked list behind reassdatagrams?
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   231     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   232    struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   233    int pbufs_freed = 0, pbufs_freed_current;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   234    int other_datagrams;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   235  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   236    /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   237     * but don't free the datagram that 'fraghdr' belongs to! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   238    do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   239      oldest = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   240      prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   241      oldest_prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   242      other_datagrams = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   243      r = reassdatagrams;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   244      while (r != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   245        if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   246          /* Not the same datagram as fraghdr */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   247          other_datagrams++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   248          if (oldest == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   249            oldest = r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   250            oldest_prev = prev;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   251          } else if (r->timer <= oldest->timer) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   252            /* older than the previous oldest */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   253            oldest = r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   254            oldest_prev = prev;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   255          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   256        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   257        if (r->next != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   258          prev = r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   259        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   260        r = r->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   261      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   262      if (oldest != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   263        pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   264        pbufs_freed += pbufs_freed_current;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   265      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   266    } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   267    return pbufs_freed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   268  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   269  #endif /* IP_REASS_FREE_OLDEST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   270  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   271  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   272   * Enqueues a new fragment into the fragment queue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   273   * @param fraghdr points to the new fragments IP hdr
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   274   * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   275   * @return A pointer to the queue location into which the fragment was enqueued
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   276   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   277  static struct ip_reassdata *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   278  ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   279  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   280    struct ip_reassdata *ipr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   281  #if ! IP_REASS_FREE_OLDEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   282    LWIP_UNUSED_ARG(clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   283  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   284  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   285    /* No matching previous fragment found, allocate a new reassdata struct */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   286    ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   287    if (ipr == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   288  #if IP_REASS_FREE_OLDEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   289      if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   290        ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   291      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   292      if (ipr == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   293  #endif /* IP_REASS_FREE_OLDEST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   294      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   295        IPFRAG_STATS_INC(ip_frag.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   296        LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   297        return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   298      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   299    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   300    memset(ipr, 0, sizeof(struct ip_reassdata));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   301    ipr->timer = IP_REASS_MAXAGE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   302  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   303    /* enqueue the new structure to the front of the list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   304    ipr->next = reassdatagrams;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   305    reassdatagrams = ipr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   306    /* copy the ip header for later tests and input */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   307    /* @todo: no ip options supported? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   308    SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   309    return ipr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   310  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   311  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   312  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   313   * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   314   * @param ipr points to the queue entry to dequeue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   315   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   316  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   317  ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   318  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   319    /* dequeue the reass struct  */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   320    if (reassdatagrams == ipr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   321      /* it was the first in the list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   322      reassdatagrams = ipr->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   323    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   324      /* it wasn't the first, so it must have a valid 'prev' */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   325      LWIP_ASSERT("sanity check linked list", prev != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   326      prev->next = ipr->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   327    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   328  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   329    /* now we can free the ip_reassdata struct */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   330    memp_free(MEMP_REASSDATA, ipr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   331  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   332  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   333  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   334   * Chain a new pbuf into the pbuf list that composes the datagram.  The pbuf list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   335   * will grow over time as  new pbufs are rx.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   336   * Also checks that the datagram passes basic continuity checks (if the last
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   337   * fragment was received at least once).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   338   * @param ipr points to the reassembly state
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   339   * @param new_p points to the pbuf for the current fragment
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   340   * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   341   * @return see IP_REASS_VALIDATE_* defines
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   342   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   343  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   344  ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   345  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   346    struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   347    struct pbuf *q;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   348    u16_t offset, len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   349    u8_t hlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   350    struct ip_hdr *fraghdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   351    int valid = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   352  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   353    /* Extract length and fragment offset from current fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   354    fraghdr = (struct ip_hdr *)new_p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   355    len = lwip_ntohs(IPH_LEN(fraghdr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   356    hlen = IPH_HL_BYTES(fraghdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   357    if (hlen > len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   358      /* invalid datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   359      return IP_REASS_VALIDATE_PBUF_DROPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   360    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   361    len = (u16_t)(len - hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   362    offset = IPH_OFFSET_BYTES(fraghdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   363  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   364    /* overwrite the fragment's ip header from the pbuf with our helper struct,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   365     * and setup the embedded helper structure. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   366    /* make sure the struct ip_reass_helper fits into the IP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   367    LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   368                sizeof(struct ip_reass_helper) <= IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   369    iprh = (struct ip_reass_helper *)new_p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   370    iprh->next_pbuf = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   371    iprh->start = offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   372    iprh->end = (u16_t)(offset + len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   373    if (iprh->end < offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   374      /* u16_t overflow, cannot handle this */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   375      return IP_REASS_VALIDATE_PBUF_DROPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   376    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   377  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   378    /* Iterate through until we either get to the end of the list (append),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   379     * or we find one with a larger offset (insert). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   380    for (q = ipr->p; q != NULL;) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   381      iprh_tmp = (struct ip_reass_helper *)q->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   382      if (iprh->start < iprh_tmp->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   383        /* the new pbuf should be inserted before this */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   384        iprh->next_pbuf = q;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   385        if (iprh_prev != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   386          /* not the fragment with the lowest offset */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   387  #if IP_REASS_CHECK_OVERLAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   388          if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   389            /* fragment overlaps with previous or following, throw away */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   390            return IP_REASS_VALIDATE_PBUF_DROPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   391          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   392  #endif /* IP_REASS_CHECK_OVERLAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   393          iprh_prev->next_pbuf = new_p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   394          if (iprh_prev->end != iprh->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   395            /* There is a fragment missing between the current
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   396             * and the previous fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   397            valid = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   398          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   399        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   400  #if IP_REASS_CHECK_OVERLAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   401          if (iprh->end > iprh_tmp->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   402            /* fragment overlaps with following, throw away */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   403            return IP_REASS_VALIDATE_PBUF_DROPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   404          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   405  #endif /* IP_REASS_CHECK_OVERLAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   406          /* fragment with the lowest offset */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   407          ipr->p = new_p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   408        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   409        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   410      } else if (iprh->start == iprh_tmp->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   411        /* received the same datagram twice: no need to keep the datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   412        return IP_REASS_VALIDATE_PBUF_DROPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   413  #if IP_REASS_CHECK_OVERLAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   414      } else if (iprh->start < iprh_tmp->end) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   415        /* overlap: no need to keep the new datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   416        return IP_REASS_VALIDATE_PBUF_DROPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   417  #endif /* IP_REASS_CHECK_OVERLAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   418      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   419        /* Check if the fragments received so far have no holes. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   420        if (iprh_prev != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   421          if (iprh_prev->end != iprh_tmp->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   422            /* There is a fragment missing between the current
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   423             * and the previous fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   424            valid = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   425          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   426        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   427      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   428      q = iprh_tmp->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   429      iprh_prev = iprh_tmp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   430    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   431  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   432    /* If q is NULL, then we made it to the end of the list. Determine what to do now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   433    if (q == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   434      if (iprh_prev != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   435        /* this is (for now), the fragment with the highest offset:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   436         * chain it to the last fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   437  #if IP_REASS_CHECK_OVERLAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   438        LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   439  #endif /* IP_REASS_CHECK_OVERLAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   440        iprh_prev->next_pbuf = new_p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   441        if (iprh_prev->end != iprh->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   442          valid = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   443        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   444      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   445  #if IP_REASS_CHECK_OVERLAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   446        LWIP_ASSERT("no previous fragment, this must be the first fragment!",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   447                    ipr->p == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   448  #endif /* IP_REASS_CHECK_OVERLAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   449        /* this is the first fragment we ever received for this ip datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   450        ipr->p = new_p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   451      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   452    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   453  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   454    /* At this point, the validation part begins: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   455    /* If we already received the last fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   456    if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   457      /* and had no holes so far */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   458      if (valid) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   459        /* then check if the rest of the fragments is here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   460        /* Check if the queue starts with the first datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   461        if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   462          valid = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   463        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   464          /* and check that there are no holes after this datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   465          iprh_prev = iprh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   466          q = iprh->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   467          while (q != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   468            iprh = (struct ip_reass_helper *)q->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   469            if (iprh_prev->end != iprh->start) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   470              valid = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   471              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   472            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   473            iprh_prev = iprh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   474            q = iprh->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   475          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   476          /* if still valid, all fragments are received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   477           * (because to the MF==0 already arrived */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   478          if (valid) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   479            LWIP_ASSERT("sanity check", ipr->p != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   480            LWIP_ASSERT("sanity check",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   481                        ((struct ip_reass_helper *)ipr->p->payload) != iprh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   482            LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   483                        iprh->next_pbuf == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   484          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   485        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   486      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   487      /* If valid is 0 here, there are some fragments missing in the middle
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   488       * (since MF == 0 has already arrived). Such datagrams simply time out if
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   489       * no more fragments are received... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   490      return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   491    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   492    /* If we come here, not all fragments were received, yet! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   493    return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   494  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   495  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   496  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   497   * Reassembles incoming IP fragments into an IP datagram.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   498   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   499   * @param p points to a pbuf chain of the fragment
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   500   * @return NULL if reassembly is incomplete, ? otherwise
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   501   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   502  struct pbuf *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   503  ip4_reass(struct pbuf *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   504  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   505    struct pbuf *r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   506    struct ip_hdr *fraghdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   507    struct ip_reassdata *ipr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   508    struct ip_reass_helper *iprh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   509    u16_t offset, len, clen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   510    u8_t hlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   511    int valid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   512    int is_last;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   513  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   514    IPFRAG_STATS_INC(ip_frag.recv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   515    MIB2_STATS_INC(mib2.ipreasmreqds);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   516  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   517    fraghdr = (struct ip_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   518  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   519    if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   520      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   521      IPFRAG_STATS_INC(ip_frag.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   522      goto nullreturn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   523    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   524  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   525    offset = IPH_OFFSET_BYTES(fraghdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   526    len = lwip_ntohs(IPH_LEN(fraghdr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   527    hlen = IPH_HL_BYTES(fraghdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   528    if (hlen > len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   529      /* invalid datagram */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   530      goto nullreturn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   531    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   532    len = (u16_t)(len - hlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   533  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   534    /* Check if we are allowed to enqueue more datagrams. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   535    clen = pbuf_clen(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   536    if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   537  #if IP_REASS_FREE_OLDEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   538      if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   539          ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   540  #endif /* IP_REASS_FREE_OLDEST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   541      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   542        /* No datagram could be freed and still too many pbufs enqueued */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   543        LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   544                                     ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   545        IPFRAG_STATS_INC(ip_frag.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   546        /* @todo: send ICMP time exceeded here? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   547        /* drop this pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   548        goto nullreturn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   549      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   550    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   551  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   552    /* Look for the datagram the fragment belongs to in the current datagram queue,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   553     * remembering the previous in the queue for later dequeueing. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   554    for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   555      /* Check if the incoming fragment matches the one currently present
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   556         in the reassembly buffer. If so, we proceed with copying the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   557         fragment into the buffer. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   558      if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   559        LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   560                                     lwip_ntohs(IPH_ID(fraghdr))));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   561        IPFRAG_STATS_INC(ip_frag.cachehit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   562        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   563      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   564    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   565  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   566    if (ipr == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   567      /* Enqueue a new datagram into the datagram queue */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   568      ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   569      /* Bail if unable to enqueue */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   570      if (ipr == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   571        goto nullreturn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   572      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   573    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   574      if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   575          ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   576        /* ipr->iphdr is not the header from the first fragment, but fraghdr is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   577         * -> copy fraghdr into ipr->iphdr since we want to have the header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   578         * of the first fragment (for ICMP time exceeded and later, for copying
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   579         * all options, if supported)*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   580        SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   581      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   582    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   584    /* At this point, we have either created a new entry or pointing
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   585     * to an existing one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   586  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   587    /* check for 'no more fragments', and update queue entry*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   588    is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   589    if (is_last) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   590      u16_t datagram_len = (u16_t)(offset + len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   591      if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   592        /* u16_t overflow, cannot handle this */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   593        goto nullreturn_ipr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   594      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   595    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   596    /* find the right place to insert this pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   597    /* @todo: trim pbufs if fragments are overlapping */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   598    valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   599    if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   600      goto nullreturn_ipr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   601    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   602    /* if we come here, the pbuf has been enqueued */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   603  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   604    /* Track the current number of pbufs current 'in-flight', in order to limit
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   605       the number of fragments that may be enqueued at any one time
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   606       (overflow checked by testing against IP_REASS_MAX_PBUFS) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   607    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   608    if (is_last) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   609      u16_t datagram_len = (u16_t)(offset + len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   610      ipr->datagram_len = datagram_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   611      ipr->flags |= IP_REASS_FLAG_LASTFRAG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   612      LWIP_DEBUGF(IP_REASS_DEBUG,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   613                  ("ip4_reass: last fragment seen, total len %"S16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   614                   ipr->datagram_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   615    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   616  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   617    if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   618      struct ip_reassdata *ipr_prev;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   619      /* the totally last fragment (flag more fragments = 0) was received at least
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   620       * once AND all fragments are received */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   621      u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   622  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   623      /* save the second pbuf before copying the header over the pointer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   624      r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   625  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   626      /* copy the original ip header back to the first pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   627      fraghdr = (struct ip_hdr *)(ipr->p->payload);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   628      SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   629      IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   630      IPH_OFFSET_SET(fraghdr, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   631      IPH_CHKSUM_SET(fraghdr, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   632      /* @todo: do we need to set/calculate the correct checksum? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   633  #if CHECKSUM_GEN_IP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   634      IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   635        IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   636      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   637  #endif /* CHECKSUM_GEN_IP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   638  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   639      p = ipr->p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   640  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   641      /* chain together the pbufs contained within the reass_data list. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   642      while (r != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   643        iprh = (struct ip_reass_helper *)r->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   644  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   645        /* hide the ip header for every succeeding fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   646        pbuf_remove_header(r, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   647        pbuf_cat(p, r);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   648        r = iprh->next_pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   649      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   650  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   651      /* find the previous entry in the linked list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   652      if (ipr == reassdatagrams) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   653        ipr_prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   654      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   655        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   656          if (ipr_prev->next == ipr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   657            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   658          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   659        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   660      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   661  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   662      /* release the sources allocate for the fragment queue entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   663      ip_reass_dequeue_datagram(ipr, ipr_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   664  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   665      /* and adjust the number of pbufs currently queued for reassembly. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   666      clen = pbuf_clen(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   667      LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   668      ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   669  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   670      MIB2_STATS_INC(mib2.ipreasmoks);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   671  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   672      /* Return the pbuf chain */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   673      return p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   674    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   675    /* the datagram is not (yet?) reassembled completely */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   676    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   677    return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   678  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   679  nullreturn_ipr:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   680    LWIP_ASSERT("ipr != NULL", ipr != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   681    if (ipr->p == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   682      /* dropped pbuf after creating a new datagram entry: remove the entry, too */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   683      LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   684      ip_reass_dequeue_datagram(ipr, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   685    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   686  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   687  nullreturn:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   688    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   689    IPFRAG_STATS_INC(ip_frag.drop);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   690    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   691    return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   692  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   693  #endif /* IP_REASSEMBLY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   694  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   695  #if IP_FRAG
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   696  #if !LWIP_NETIF_TX_SINGLE_PBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   697  /** Allocate a new struct pbuf_custom_ref */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   698  static struct pbuf_custom_ref *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   699  ip_frag_alloc_pbuf_custom_ref(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   700  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   701    return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   702  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   703  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   704  /** Free a struct pbuf_custom_ref */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   705  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   706  ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   707  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   708    LWIP_ASSERT("p != NULL", p != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   709    memp_free(MEMP_FRAG_PBUF, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   710  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   711  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   712  /** Free-callback function to free a 'struct pbuf_custom_ref', called by
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   713   * pbuf_free. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   714  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   715  ipfrag_free_pbuf_custom(struct pbuf *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   716  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   717    struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   718    LWIP_ASSERT("pcr != NULL", pcr != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   719    LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   720    if (pcr->original != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   721      pbuf_free(pcr->original);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   722    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   723    ip_frag_free_pbuf_custom_ref(pcr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   724  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   725  #endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   726  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   727  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   728   * Fragment an IP datagram if too large for the netif.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   729   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   730   * Chop the datagram in MTU sized chunks and send them in order
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   731   * by pointing PBUF_REFs into p.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   732   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   733   * @param p ip packet to send
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   734   * @param netif the netif on which to send
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   735   * @param dest destination ip address to which to send
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   736   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   737   * @return ERR_OK if sent successfully, err_t otherwise
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   738   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   739  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   740  ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   741  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   742    struct pbuf *rambuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   743  #if !LWIP_NETIF_TX_SINGLE_PBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   744    struct pbuf *newpbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   745    u16_t newpbuflen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   746    u16_t left_to_copy;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   747  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   748    struct ip_hdr *original_iphdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   749    struct ip_hdr *iphdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   750    const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   751    u16_t left, fragsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   752    u16_t ofo;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   753    int last;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   754    u16_t poff = IP_HLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   755    u16_t tmp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   756    int mf_set;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   757  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   758    original_iphdr = (struct ip_hdr *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   759    iphdr = original_iphdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   760    if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   761      /* ip4_frag() does not support IP options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   762      return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   763    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   764    LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   765  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   766    /* Save original offset */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   767    tmp = lwip_ntohs(IPH_OFFSET(iphdr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   768    ofo = tmp & IP_OFFMASK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   769    /* already fragmented? if so, the last fragment we create must have MF, too */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   770    mf_set = tmp & IP_MF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   771  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   772    left = (u16_t)(p->tot_len - IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   773  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   774    while (left) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   775      /* Fill this fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   776      fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   777  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   778  #if LWIP_NETIF_TX_SINGLE_PBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   779      rambuf = pbuf_alloc(PBUF_IP, fragsize, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   780      if (rambuf == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   781        goto memerr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   782      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   783      LWIP_ASSERT("this needs a pbuf in one piece!",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   784                  (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   785      poff += pbuf_copy_partial(p, rambuf->payload, fragsize, poff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   786      /* make room for the IP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   787      if (pbuf_add_header(rambuf, IP_HLEN)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   788        pbuf_free(rambuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   789        goto memerr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   790      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   791      /* fill in the IP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   792      SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   793      iphdr = (struct ip_hdr *)rambuf->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   794  #else /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   795      /* When not using a static buffer, create a chain of pbufs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   796       * The first will be a PBUF_RAM holding the link and IP header.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   797       * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   798       * but limited to the size of an mtu.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   799       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   800      rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   801      if (rambuf == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   802        goto memerr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   803      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   804      LWIP_ASSERT("this needs a pbuf in one piece!",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   805                  (rambuf->len >= (IP_HLEN)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   806      SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   807      iphdr = (struct ip_hdr *)rambuf->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   808  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   809      left_to_copy = fragsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   810      while (left_to_copy) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   811        struct pbuf_custom_ref *pcr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   812        u16_t plen = (u16_t)(p->len - poff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   813        LWIP_ASSERT("p->len >= poff", p->len >= poff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   814        newpbuflen = LWIP_MIN(left_to_copy, plen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   815        /* Is this pbuf already empty? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   816        if (!newpbuflen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   817          poff = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   818          p = p->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   819          continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   820        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   821        pcr = ip_frag_alloc_pbuf_custom_ref();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   822        if (pcr == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   823          pbuf_free(rambuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   824          goto memerr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   825        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   826        /* Mirror this pbuf, although we might not need all of it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   827        newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   828                                      (u8_t *)p->payload + poff, newpbuflen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   829        if (newpbuf == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   830          ip_frag_free_pbuf_custom_ref(pcr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   831          pbuf_free(rambuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   832          goto memerr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   833        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   834        pbuf_ref(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   835        pcr->original = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   836        pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   837  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   838        /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   839         * so that it is removed when pbuf_dechain is later called on rambuf.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   840         */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   841        pbuf_cat(rambuf, newpbuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   842        left_to_copy = (u16_t)(left_to_copy - newpbuflen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   843        if (left_to_copy) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   844          poff = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   845          p = p->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   846        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   847      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   848      poff = (u16_t)(poff + newpbuflen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   849  #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   850  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   851      /* Correct header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   852      last = (left <= netif->mtu - IP_HLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   853  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   854      /* Set new offset and MF flag */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   855      tmp = (IP_OFFMASK & (ofo));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   856      if (!last || mf_set) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   857        /* the last fragment has MF set if the input frame had it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   858        tmp = tmp | IP_MF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   859      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   860      IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   861      IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   862      IPH_CHKSUM_SET(iphdr, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   863  #if CHECKSUM_GEN_IP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   864      IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   865        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   866      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   867  #endif /* CHECKSUM_GEN_IP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   868  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   869      /* No need for separate header pbuf - we allowed room for it in rambuf
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   870       * when allocated.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   871       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   872      netif->output(netif, rambuf, dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   873      IPFRAG_STATS_INC(ip_frag.xmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   874  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   875      /* Unfortunately we can't reuse rambuf - the hardware may still be
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   876       * using the buffer. Instead we free it (and the ensuing chain) and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   877       * recreate it next time round the loop. If we're lucky the hardware
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   878       * will have already sent the packet, the free will really free, and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   879       * there will be zero memory penalty.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   880       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   881  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   882      pbuf_free(rambuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   883      left = (u16_t)(left - fragsize);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   884      ofo = (u16_t)(ofo + nfb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   885    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   886    MIB2_STATS_INC(mib2.ipfragoks);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   887    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   888  memerr:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   889    MIB2_STATS_INC(mib2.ipfragfails);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   890    return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   891  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   892  #endif /* IP_FRAG */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   893  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv4\ip4_frag.c	   894  #endif /* LWIP_IPV4 */

	; Module end
