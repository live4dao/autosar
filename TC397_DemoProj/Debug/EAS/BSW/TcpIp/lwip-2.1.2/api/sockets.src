	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc1284a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\.sockets.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\sockets.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\sockets.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\sockets.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\sockets.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4544
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\sockets.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	165
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	167
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	190
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	190
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	237
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	274
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	190
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	190
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	237
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	373
	.byte	3
	.word	190
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	467
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	496
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	190
	.byte	8,4
	.word	274
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	601
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	610
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	237
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	237
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	601
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	683
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	190
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	190
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	190
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	190
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	190
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	610
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	610
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	925
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	190
	.byte	8,3
	.word	190
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	190
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1082
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1091
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	237
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1225
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	190
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	190
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	190
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	190
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	190
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	190
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1336
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	190
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	190
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	190
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	190
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	190
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	190
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	237
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	237
	.byte	8,1
	.word	190
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1790
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1790
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1799
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1875
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	683
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2011
	.byte	12
	.word	190
	.byte	3
	.word	2125
	.byte	12
	.word	190
	.byte	3
	.word	2135
	.byte	12
	.word	190
	.byte	3
	.word	2145
	.byte	12
	.word	1875
	.byte	3
	.word	2155
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	237
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	237
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	237
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	190
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	190
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	190
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	190
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	683
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2130
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2140
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2150
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2160
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2165
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	274
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	274
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	274
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2517
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	237
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	274
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2667
	.byte	12
	.word	2517
	.byte	3
	.word	2804
	.byte	12
	.word	2667
	.byte	3
	.word	2814
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	190
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	190
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	190
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	190
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	190
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	237
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2160
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2809
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2819
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2824
	.byte	12
	.word	190
	.byte	3
	.word	3109
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	190
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3114
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3114
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3119
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1875
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	190
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	190
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	190
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	190
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3283
	.byte	3
	.word	1799
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	274
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	190
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	190
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	190
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	190
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	237
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3428
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	467
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3433
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	274
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	190
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1875
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	190
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	190
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	190
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3428
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3648
	.byte	12
	.word	3433
	.byte	3
	.word	3818
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	237
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	237
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	467
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	237
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	237
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3114
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3823
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3828
	.byte	12
	.word	3648
	.byte	3
	.word	4052
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	237
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4057
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4062
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	237
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	237
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	467
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4162
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	237
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	237
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	467
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4259
	.byte	8,8
	.word	190
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	190
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	190
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4353
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4062
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4062
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4259
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4162
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4362
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	190
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\sockets.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     3   * Sockets BSD-Like API module
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     4   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     5  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     6  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     7   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     8   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    10   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    11   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    12   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    13   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    14   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    15   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    16   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    17   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    18   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    19   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    20   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    21   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    22   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    23   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    24   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    25   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    26   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    27   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    28   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    29   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    30   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    31   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    32   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    34   * Author: Adam Dunkels <adam@sics.se>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    35   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    36   * Improved by Marc Boucher <marc@mbsi.ca> and David Haas <dhaas@alum.rpi.edu>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    37   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    38   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    39  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    40  #include "lwip/opt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    41  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    42  #if LWIP_SOCKET /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    43  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    44  #include "lwip/sockets.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    45  #include "lwip/priv/sockets_priv.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    46  #include "lwip/api.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    47  #include "lwip/igmp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    48  #include "lwip/inet.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    49  #include "lwip/tcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    50  #include "lwip/raw.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    51  #include "lwip/udp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    52  #include "lwip/memp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    53  #include "lwip/pbuf.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    54  #include "lwip/netif.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    55  #include "lwip/priv/tcpip_priv.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    56  #include "lwip/mld6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    57  #if LWIP_CHECKSUM_ON_COPY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    58  #include "lwip/inet_chksum.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    59  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    60  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    61  #if LWIP_COMPAT_SOCKETS == 2 && LWIP_POSIX_SOCKETS_IO_NAMES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    62  #include <stdarg.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    63  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    64  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    65  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    66  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    67  #ifdef LWIP_HOOK_FILENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    68  #include LWIP_HOOK_FILENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    69  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    70  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    71  /* If the netconn API is not required publicly, then we include the necessary
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    72     files here to get the implementation */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    73  #if !LWIP_NETCONN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    74  #undef LWIP_NETCONN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    75  #define LWIP_NETCONN 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    76  #include "api_msg.c"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    77  #include "api_lib.c"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    78  #include "netbuf.c"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    79  #undef LWIP_NETCONN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    80  #define LWIP_NETCONN 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    81  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    82  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    83  #define API_SELECT_CB_VAR_REF(name)               API_VAR_REF(name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    84  #define API_SELECT_CB_VAR_DECLARE(name)           API_VAR_DECLARE(struct lwip_select_cb, name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    85  #define API_SELECT_CB_VAR_ALLOC(name, retblock)   API_VAR_ALLOC_EXT(struct lwip_select_cb, MEMP_SELECT_CB, name, retblock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    86  #define API_SELECT_CB_VAR_FREE(name)              API_VAR_FREE(MEMP_SELECT_CB, name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    87  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    88  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    89  #define IP4ADDR_PORT_TO_SOCKADDR(sin, ipaddr, port) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    90        (sin)->sin_len = sizeof(struct sockaddr_in); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    91        (sin)->sin_family = AF_INET; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    92        (sin)->sin_port = lwip_htons((port)); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    93        inet_addr_from_ip4addr(&(sin)->sin_addr, ipaddr); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    94        memset((sin)->sin_zero, 0, SIN_ZERO_LEN); }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    95  #define SOCKADDR4_TO_IP4ADDR_PORT(sin, ipaddr, port) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    96      inet_addr_to_ip4addr(ip_2_ip4(ipaddr), &((sin)->sin_addr)); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    97      (port) = lwip_ntohs((sin)->sin_port); }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    98  #endif /* LWIP_IPV4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	    99  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   100  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   101  #define IP6ADDR_PORT_TO_SOCKADDR(sin6, ipaddr, port) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   102        (sin6)->sin6_len = sizeof(struct sockaddr_in6); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   103        (sin6)->sin6_family = AF_INET6; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   104        (sin6)->sin6_port = lwip_htons((port)); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   105        (sin6)->sin6_flowinfo = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   106        inet6_addr_from_ip6addr(&(sin6)->sin6_addr, ipaddr); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   107        (sin6)->sin6_scope_id = ip6_addr_zone(ipaddr); }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   108  #define SOCKADDR6_TO_IP6ADDR_PORT(sin6, ipaddr, port) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   109      inet6_addr_to_ip6addr(ip_2_ip6(ipaddr), &((sin6)->sin6_addr)); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   110      if (ip6_addr_has_scope(ip_2_ip6(ipaddr), IP6_UNKNOWN)) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   111        ip6_addr_set_zone(ip_2_ip6(ipaddr), (u8_t)((sin6)->sin6_scope_id)); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   112      } \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   113      (port) = lwip_ntohs((sin6)->sin6_port); }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   114  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   115  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   116  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   117  static void sockaddr_to_ipaddr_port(const struct sockaddr *sockaddr, ip_addr_t *ipaddr, u16_t *port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   118  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   119  #define IS_SOCK_ADDR_LEN_VALID(namelen)  (((namelen) == sizeof(struct sockaddr_in)) || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   120                                           ((namelen) == sizeof(struct sockaddr_in6)))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   121  #define IS_SOCK_ADDR_TYPE_VALID(name)    (((name)->sa_family == AF_INET) || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   122                                           ((name)->sa_family == AF_INET6))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   123  #define SOCK_ADDR_TYPE_MATCH(name, sock) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   124         ((((name)->sa_family == AF_INET) && !(NETCONNTYPE_ISIPV6((sock)->conn->type))) || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   125         (((name)->sa_family == AF_INET6) && (NETCONNTYPE_ISIPV6((sock)->conn->type))))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   126  #define IPADDR_PORT_TO_SOCKADDR(sockaddr, ipaddr, port) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   127      if (IP_IS_ANY_TYPE_VAL(*ipaddr) || IP_IS_V6_VAL(*ipaddr)) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   128        IP6ADDR_PORT_TO_SOCKADDR((struct sockaddr_in6*)(void*)(sockaddr), ip_2_ip6(ipaddr), port); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   129      } else { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   130        IP4ADDR_PORT_TO_SOCKADDR((struct sockaddr_in*)(void*)(sockaddr), ip_2_ip4(ipaddr), port); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   131      } } while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   132  #define SOCKADDR_TO_IPADDR_PORT(sockaddr, ipaddr, port) sockaddr_to_ipaddr_port(sockaddr, ipaddr, &(port))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   133  #define DOMAIN_TO_NETCONN_TYPE(domain, type) (((domain) == AF_INET) ? \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   134    (type) : (enum netconn_type)((type) | NETCONN_TYPE_IPV6))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   135  #elif LWIP_IPV6 /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   136  #define IS_SOCK_ADDR_LEN_VALID(namelen)  ((namelen) == sizeof(struct sockaddr_in6))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   137  #define IS_SOCK_ADDR_TYPE_VALID(name)    ((name)->sa_family == AF_INET6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   138  #define SOCK_ADDR_TYPE_MATCH(name, sock) 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   139  #define IPADDR_PORT_TO_SOCKADDR(sockaddr, ipaddr, port) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   140          IP6ADDR_PORT_TO_SOCKADDR((struct sockaddr_in6*)(void*)(sockaddr), ip_2_ip6(ipaddr), port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   141  #define SOCKADDR_TO_IPADDR_PORT(sockaddr, ipaddr, port) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   142          SOCKADDR6_TO_IP6ADDR_PORT((const struct sockaddr_in6*)(const void*)(sockaddr), ipaddr, port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   143  #define DOMAIN_TO_NETCONN_TYPE(domain, netconn_type) (netconn_type)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   144  #else /*-> LWIP_IPV4: LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   145  #define IS_SOCK_ADDR_LEN_VALID(namelen)  ((namelen) == sizeof(struct sockaddr_in))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   146  #define IS_SOCK_ADDR_TYPE_VALID(name)    ((name)->sa_family == AF_INET)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   147  #define SOCK_ADDR_TYPE_MATCH(name, sock) 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   148  #define IPADDR_PORT_TO_SOCKADDR(sockaddr, ipaddr, port) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   149          IP4ADDR_PORT_TO_SOCKADDR((struct sockaddr_in*)(void*)(sockaddr), ip_2_ip4(ipaddr), port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   150  #define SOCKADDR_TO_IPADDR_PORT(sockaddr, ipaddr, port) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   151          SOCKADDR4_TO_IP4ADDR_PORT((const struct sockaddr_in*)(const void*)(sockaddr), ipaddr, port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   152  #define DOMAIN_TO_NETCONN_TYPE(domain, netconn_type) (netconn_type)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   153  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   154  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   155  #define IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name)    (((name)->sa_family == AF_UNSPEC) || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   156                                                      IS_SOCK_ADDR_TYPE_VALID(name))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   157  #define SOCK_ADDR_TYPE_MATCH_OR_UNSPEC(name, sock) (((name)->sa_family == AF_UNSPEC) || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   158                                                      SOCK_ADDR_TYPE_MATCH(name, sock))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   159  #define IS_SOCK_ADDR_ALIGNED(name)      ((((mem_ptr_t)(name)) % 4) == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   160  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   161  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   162  #define LWIP_SOCKOPT_CHECK_OPTLEN(sock, optlen, opttype) do { if ((optlen) < sizeof(opttype)) { done_socket(sock); return EINVAL; }}while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   163  #define LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, opttype) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   164    LWIP_SOCKOPT_CHECK_OPTLEN(sock, optlen, opttype); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   165    if ((sock)->conn == NULL) { done_socket(sock); return EINVAL; } }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   166  #define LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, opttype) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   167    LWIP_SOCKOPT_CHECK_OPTLEN(sock, optlen, opttype); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   168    if (((sock)->conn == NULL) || ((sock)->conn->pcb.tcp == NULL)) { done_socket(sock); return EINVAL; } }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   169  #define LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, opttype, netconntype) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   170    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, opttype); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   171    if (NETCONNTYPE_GROUP(netconn_type((sock)->conn)) != netconntype) { done_socket(sock); return ENOPROTOOPT; } }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   172  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   173  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   174  #define LWIP_SETGETSOCKOPT_DATA_VAR_REF(name)     API_VAR_REF(name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   175  #define LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(name) API_VAR_DECLARE(struct lwip_setgetsockopt_data, name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   176  #define LWIP_SETGETSOCKOPT_DATA_VAR_FREE(name)    API_VAR_FREE(MEMP_SOCKET_SETGETSOCKOPT_DATA, name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   177  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   178  #define LWIP_SETGETSOCKOPT_DATA_VAR_ALLOC(name, sock) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   179    name = (struct lwip_setgetsockopt_data *)memp_malloc(MEMP_SOCKET_SETGETSOCKOPT_DATA); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   180    if (name == NULL) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   181      sock_set_errno(sock, ENOMEM); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   182      done_socket(sock); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   183      return -1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   184    } }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   185  #else /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   186  #define LWIP_SETGETSOCKOPT_DATA_VAR_ALLOC(name, sock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   187  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   188  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   189  #if LWIP_SO_SNDRCVTIMEO_NONSTANDARD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   190  #define LWIP_SO_SNDRCVTIMEO_OPTTYPE int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   191  #define LWIP_SO_SNDRCVTIMEO_SET(optval, val) (*(int *)(optval) = (val))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   192  #define LWIP_SO_SNDRCVTIMEO_GET_MS(optval)   ((long)*(const int*)(optval))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   193  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   194  #define LWIP_SO_SNDRCVTIMEO_OPTTYPE struct timeval
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   195  #define LWIP_SO_SNDRCVTIMEO_SET(optval, val)  do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   196    u32_t loc = (val); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   197    ((struct timeval *)(optval))->tv_sec = (long)((loc) / 1000U); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   198    ((struct timeval *)(optval))->tv_usec = (long)(((loc) % 1000U) * 1000U); }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   199  #define LWIP_SO_SNDRCVTIMEO_GET_MS(optval) ((((const struct timeval *)(optval))->tv_sec * 1000) + (((const struct timeval *)(optval))->tv_usec / 1000))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   200  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   201  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   202  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   203  /** A struct sockaddr replacement that has the same alignment as sockaddr_in/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   204   *  sockaddr_in6 if instantiated.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   205   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   206  union sockaddr_aligned {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   207    struct sockaddr sa;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   208  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   209    struct sockaddr_in6 sin6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   210  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   211  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   212    struct sockaddr_in sin;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   213  #endif /* LWIP_IPV4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   214  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   215  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   216  /* Define the number of IPv4 multicast memberships, default is one per socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   217  #ifndef LWIP_SOCKET_MAX_MEMBERSHIPS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   218  #define LWIP_SOCKET_MAX_MEMBERSHIPS NUM_SOCKETS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   219  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   220  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   221  #if LWIP_IGMP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   222  /* This is to keep track of IP_ADD_MEMBERSHIP calls to drop the membership when
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   223     a socket is closed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   224  struct lwip_socket_multicast_pair {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   225    /** the socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   226    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   227    /** the interface address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   228    ip4_addr_t if_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   229    /** the group address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   230    ip4_addr_t multi_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   231  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   232  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   233  static struct lwip_socket_multicast_pair socket_ipv4_multicast_memberships[LWIP_SOCKET_MAX_MEMBERSHIPS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   234  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   235  static int  lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   236  static void lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   237  static void lwip_socket_drop_registered_memberships(int s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   238  #endif /* LWIP_IGMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   239  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   240  #if LWIP_IPV6_MLD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   241  /* This is to keep track of IP_JOIN_GROUP calls to drop the membership when
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   242     a socket is closed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   243  struct lwip_socket_multicast_mld6_pair {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   244    /** the socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   245    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   246    /** the interface index */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   247    u8_t if_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   248    /** the group address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   249    ip6_addr_t multi_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   250  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   251  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   252  static struct lwip_socket_multicast_mld6_pair socket_ipv6_multicast_memberships[LWIP_SOCKET_MAX_MEMBERSHIPS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   253  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   254  static int  lwip_socket_register_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   255  static void lwip_socket_unregister_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   256  static void lwip_socket_drop_registered_mld6_memberships(int s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   257  #endif /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   258  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   259  /** The global array of available sockets */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   260  static struct lwip_sock sockets[NUM_SOCKETS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   261  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   262  #if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   263  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   264  /* protect the select_cb_list using core lock */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   265  #define LWIP_SOCKET_SELECT_DECL_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   266  #define LWIP_SOCKET_SELECT_PROTECT(lev)   LOCK_TCPIP_CORE()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   267  #define LWIP_SOCKET_SELECT_UNPROTECT(lev) UNLOCK_TCPIP_CORE()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   268  #else /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   269  /* protect the select_cb_list using SYS_LIGHTWEIGHT_PROT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   270  #define LWIP_SOCKET_SELECT_DECL_PROTECT(lev)  SYS_ARCH_DECL_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   271  #define LWIP_SOCKET_SELECT_PROTECT(lev)       SYS_ARCH_PROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   272  #define LWIP_SOCKET_SELECT_UNPROTECT(lev)     SYS_ARCH_UNPROTECT(lev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   273  /** This counter is increased from lwip_select when the list is changed
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   274      and checked in select_check_waiters to see if it has changed. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   275  static volatile int select_cb_ctr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   276  #endif /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   277  /** The global list of tasks waiting for select */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   278  static struct lwip_select_cb *select_cb_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   279  #endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   280  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   281  #define sock_set_errno(sk, e) do { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   282    const int sockerr = (e); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   283    set_errno(sockerr); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   284  } while (0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   285  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   286  /* Forward declaration of some functions */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   287  #if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   288  static void event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   289  #define DEFAULT_SOCKET_EVENTCB event_callback
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   290  static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   291  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   292  #define DEFAULT_SOCKET_EVENTCB NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   293  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   294  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   295  static void lwip_getsockopt_callback(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   296  static void lwip_setsockopt_callback(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   297  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   298  static int lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   299  static int lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   300  static int free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   301                                union lwip_sock_lastdata *lastdata);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   302  static void free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   303  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   304  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   305  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   306  sockaddr_to_ipaddr_port(const struct sockaddr *sockaddr, ip_addr_t *ipaddr, u16_t *port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   307  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   308    if ((sockaddr->sa_family) == AF_INET6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   309      SOCKADDR6_TO_IP6ADDR_PORT((const struct sockaddr_in6 *)(const void *)(sockaddr), ipaddr, *port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   310      ipaddr->type = IPADDR_TYPE_V6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   311    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   312      SOCKADDR4_TO_IP4ADDR_PORT((const struct sockaddr_in *)(const void *)(sockaddr), ipaddr, *port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   313      ipaddr->type = IPADDR_TYPE_V4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   314    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   315  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   316  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   317  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   318  /** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   319  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   320  lwip_socket_thread_init(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   321  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   322    netconn_thread_init();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   323  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   324  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   325  /** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   326  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   327  lwip_socket_thread_cleanup(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   328  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   329    netconn_thread_cleanup();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   330  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   331  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   332  #if LWIP_NETCONN_FULLDUPLEX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   333  /* Thread-safe increment of sock->fd_used, with overflow check */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   334  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   335  sock_inc_used(struct lwip_sock *sock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   336  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   337    int ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   338    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   339  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   340    LWIP_ASSERT("sock != NULL", sock != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   341  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   342    SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   343    if (sock->fd_free_pending) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   344      /* prevent new usage of this socket if free is pending */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   345      ret = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   346    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   347      ++sock->fd_used;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   348      ret = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   349      LWIP_ASSERT("sock->fd_used != 0", sock->fd_used != 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   350    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   351    SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   352    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   353  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   355  /* Like sock_inc_used(), but called under SYS_ARCH_PROTECT lock. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   356  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   357  sock_inc_used_locked(struct lwip_sock *sock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   358  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   359    LWIP_ASSERT("sock != NULL", sock != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   360  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   361    if (sock->fd_free_pending) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   362      LWIP_ASSERT("sock->fd_used != 0", sock->fd_used != 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   363      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   364    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   365  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   366    ++sock->fd_used;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   367    LWIP_ASSERT("sock->fd_used != 0", sock->fd_used != 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   368    return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   369  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   370  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   371  /* In full-duplex mode,sock->fd_used != 0 prevents a socket descriptor from being
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   372   * released (and possibly reused) when used from more than one thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   373   * (e.g. read-while-write or close-while-write, etc)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   374   * This function is called at the end of functions using (try)get_socket*().
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   375   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   376  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   377  done_socket(struct lwip_sock *sock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   378  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   379    int freed = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   380    int is_tcp = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   381    struct netconn *conn = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   382    union lwip_sock_lastdata lastdata;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   383    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   384    LWIP_ASSERT("sock != NULL", sock != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   385  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   386    SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   387    LWIP_ASSERT("sock->fd_used > 0", sock->fd_used > 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   388    if (--sock->fd_used == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   389      if (sock->fd_free_pending) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   390        /* free the socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   391        sock->fd_used = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   392        is_tcp = sock->fd_free_pending & LWIP_SOCK_FD_FREE_TCP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   393        freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   394      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   395    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   396    SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   397  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   398    if (freed) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   399      free_socket_free_elements(is_tcp, conn, &lastdata);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   400    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   401  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   403  #else /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   404  #define sock_inc_used(sock)         1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   405  #define sock_inc_used_locked(sock)  1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   406  #define done_socket(sock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   407  #endif /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   408  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   409  /* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   410  static struct lwip_sock *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   411  tryget_socket_unconn_nouse(int fd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   412  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   413    int s = fd - LWIP_SOCKET_OFFSET;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   414    if ((s < 0) || (s >= NUM_SOCKETS)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   415      LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   416      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   417    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   418    return &sockets[s];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   419  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   420  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   421  struct lwip_sock *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   422  lwip_socket_dbg_get_socket(int fd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   423  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   424    return tryget_socket_unconn_nouse(fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   425  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   426  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   427  /* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   428  static struct lwip_sock *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   429  tryget_socket_unconn(int fd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   430  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   431    struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   432    if (ret != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   433      if (!sock_inc_used(ret)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   434        return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   435      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   436    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   437    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   438  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   439  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   440  /* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   441  static struct lwip_sock *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   442  tryget_socket_unconn_locked(int fd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   443  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   444    struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   445    if (ret != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   446      if (!sock_inc_used_locked(ret)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   447        return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   448      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   449    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   450    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   451  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   452  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   453  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   454   * Same as get_socket but doesn't set errno
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   455   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   456   * @param fd externally used socket index
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   457   * @return struct lwip_sock for the socket or NULL if not found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   458   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   459  static struct lwip_sock *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   460  tryget_socket(int fd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   461  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   462    struct lwip_sock *sock = tryget_socket_unconn(fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   463    if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   464      if (sock->conn) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   465        return sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   466      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   467      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   468    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   469    return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   470  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   471  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   472  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   473   * Map a externally used socket index to the internal socket representation.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   474   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   475   * @param fd externally used socket index
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   476   * @return struct lwip_sock for the socket or NULL if not found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   477   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   478  static struct lwip_sock *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   479  get_socket(int fd)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   480  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   481    struct lwip_sock *sock = tryget_socket(fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   482    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   483      if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   484        LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   485      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   486      set_errno(EBADF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   487      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   488    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   489    return sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   490  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   491  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   492  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   493   * Allocate a new socket for a given netconn.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   494   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   495   * @param newconn the netconn for which to allocate a socket
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   496   * @param accepted 1 if socket has been created by accept(),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   497   *                 0 if socket has been created by socket()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   498   * @return the index of the new socket; -1 on error
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   499   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   500  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   501  alloc_socket(struct netconn *newconn, int accepted)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   502  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   503    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   504    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   505    LWIP_UNUSED_ARG(accepted);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   506  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   507    /* allocate a new socket identifier */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   508    for (i = 0; i < NUM_SOCKETS; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   509      /* Protect socket array */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   510      SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   511      if (!sockets[i].conn) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   512  #if LWIP_NETCONN_FULLDUPLEX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   513        if (sockets[i].fd_used) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   514          SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   515          continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   516        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   517        sockets[i].fd_used    = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   518        sockets[i].fd_free_pending = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   519  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   520        sockets[i].conn       = newconn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   521        /* The socket is not yet known to anyone, so no need to protect
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   522           after having marked it as used. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   523        SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   524        sockets[i].lastdata.pbuf = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   525  #if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   526        LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   527        sockets[i].rcvevent   = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   528        /* TCP sendbuf is empty, but the socket is not yet writable until connected
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   529         * (unless it has been created by accept()). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   530        sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   531        sockets[i].errevent   = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   532  #endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   533        return i + LWIP_SOCKET_OFFSET;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   534      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   535      SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   536    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   537    return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   538  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   539  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   540  /** Free a socket (under lock)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   541   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   542   * @param sock the socket to free
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   543   * @param is_tcp != 0 for TCP sockets, used to free lastdata
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   544   * @param conn the socekt's netconn is stored here, must be freed externally
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   545   * @param lastdata lastdata is stored here, must be freed externally
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   546   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   547  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   548  free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   549                     union lwip_sock_lastdata *lastdata)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   550  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   551  #if LWIP_NETCONN_FULLDUPLEX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   552    LWIP_ASSERT("sock->fd_used > 0", sock->fd_used > 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   553    sock->fd_used--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   554    if (sock->fd_used > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   555      sock->fd_free_pending = LWIP_SOCK_FD_FREE_FREE | (is_tcp ? LWIP_SOCK_FD_FREE_TCP : 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   556      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   557    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   558  #else /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   559    LWIP_UNUSED_ARG(is_tcp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   560  #endif /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   561  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   562    *lastdata = sock->lastdata;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   563    sock->lastdata.pbuf = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   564    *conn = sock->conn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   565    sock->conn = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   566    return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   567  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   568  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   569  /** Free a socket's leftover members.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   570   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   571  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   572  free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   573  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   574    if (lastdata->pbuf != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   575      if (is_tcp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   576        pbuf_free(lastdata->pbuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   577      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   578        netbuf_delete(lastdata->netbuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   579      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   580    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   581    if (conn != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   582      /* netconn_prepare_delete() has already been called, here we only free the conn */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   583      netconn_delete(conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   584    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   585  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   586  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   587  /** Free a socket. The socket's netconn must have been
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   588   * delete before!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   589   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   590   * @param sock the socket to free
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   591   * @param is_tcp != 0 for TCP sockets, used to free lastdata
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   592   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   593  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   594  free_socket(struct lwip_sock *sock, int is_tcp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   595  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   596    int freed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   597    struct netconn *conn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   598    union lwip_sock_lastdata lastdata;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   599    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   600  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   601    /* Protect socket array */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   602    SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   603  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   604    freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   605    SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   606    /* don't use 'sock' after this line, as another task might have allocated it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   607  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   608    if (freed) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   609      free_socket_free_elements(is_tcp, conn, &lastdata);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   610    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   611  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   612  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   613  /* Below this, the well-known socket functions are implemented.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   614   * Use google.com or opengroup.org to get a good description :-)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   615   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   616   * Exceptions are documented!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   617   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   618  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   619  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   620  lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   621  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   622    struct lwip_sock *sock, *nsock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   623    struct netconn *newconn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   624    ip_addr_t naddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   625    u16_t port = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   626    int newsock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   627    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   628    int recvevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   629    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   630  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   631    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   632    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   633    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   634      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   635    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   636  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   637    /* wait for a new connection */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   638    err = netconn_accept(sock->conn, &newconn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   639    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   640      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   641      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   642        sock_set_errno(sock, EOPNOTSUPP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   643      } else if (err == ERR_CLSD) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   644        sock_set_errno(sock, EINVAL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   645      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   646        sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   647      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   648      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   649      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   650    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   651    LWIP_ASSERT("newconn != NULL", newconn != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   652  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   653    newsock = alloc_socket(newconn, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   654    if (newsock == -1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   655      netconn_delete(newconn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   656      sock_set_errno(sock, ENFILE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   657      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   658      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   659    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   660    LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   661    nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   662  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   663    /* See event_callback: If data comes in right away after an accept, even
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   664     * though the server task might not have created a new socket yet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   665     * In that case, newconn->socket is counted down (newconn->socket--),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   666     * so nsock->rcvevent is >= 1 here!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   667     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   668    SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   669    recvevent = (s16_t)(-1 - newconn->socket);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   670    newconn->socket = newsock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   671    SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   672  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   673    if (newconn->callback) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   674      LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   675      while (recvevent > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   676        recvevent--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   677        newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   678      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   679      UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   680    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   681  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   682    /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   683     * not be NULL if addr is valid.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   684     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   685    if ((addr != NULL) && (addrlen != NULL)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   686      union sockaddr_aligned tempaddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   687      /* get the IP address and port of the remote host */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   688      err = netconn_peer(newconn, &naddr, &port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   689      if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   690        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   691        netconn_delete(newconn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   692        free_socket(nsock, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   693        sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   694        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   695        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   696      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   697  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   698      IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   699      if (*addrlen > tempaddr.sa.sa_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   700        *addrlen = tempaddr.sa.sa_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   701      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   702      MEMCPY(addr, &tempaddr, *addrlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   703  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   704      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   705      ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   706      LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   707    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   708      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   709    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   710  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   711    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   712    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   713    done_socket(nsock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   714    return newsock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   715  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   716  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   717  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   718  lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   719  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   720    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   721    ip_addr_t local_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   722    u16_t local_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   723    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   724  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   725    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   726    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   727      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   728    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   729  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   730    if (!SOCK_ADDR_TYPE_MATCH(name, sock)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   731      /* sockaddr does not match socket type (IPv4/IPv6) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   732      sock_set_errno(sock, err_to_errno(ERR_VAL));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   733      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   734      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   735    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   736  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   737    /* check size, family and alignment of 'name' */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   738    LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   739               IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   740               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   741    LWIP_UNUSED_ARG(namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   742  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   743    SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   744    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   745    ip_addr_debug_print_val(SOCKETS_DEBUG, local_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   746    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", local_port));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   747  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   748  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   749    /* Dual-stack: Unmap IPv4 mapped IPv6 addresses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   750    if (IP_IS_V6_VAL(local_addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&local_addr))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   751      unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   752      IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   753    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   754  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   755  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   756    err = netconn_bind(sock->conn, &local_addr, local_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   757  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   758    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   759      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   760      sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   761      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   762      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   763    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   764  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   765    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   766    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   767    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   768    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   769  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   770  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   771  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   772  lwip_close(int s)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   773  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   774    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   775    int is_tcp = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   776    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   777  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   778    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   779  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   780    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   781    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   782      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   783    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   784  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   785    if (sock->conn != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   786      is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   787    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   788      LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   789    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   790  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   791  #if LWIP_IGMP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   792    /* drop all possibly joined IGMP memberships */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   793    lwip_socket_drop_registered_memberships(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   794  #endif /* LWIP_IGMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   795  #if LWIP_IPV6_MLD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   796    /* drop all possibly joined MLD6 memberships */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   797    lwip_socket_drop_registered_mld6_memberships(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   798  #endif /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   799  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   800    err = netconn_prepare_delete(sock->conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   801    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   802      sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   803      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   804      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   805    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   806  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   807    free_socket(sock, is_tcp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   808    set_errno(0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   809    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   810  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   811  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   812  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   813  lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   814  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   815    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   816    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   817  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   818    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   819    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   820      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   821    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   822  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   823    if (!SOCK_ADDR_TYPE_MATCH_OR_UNSPEC(name, sock)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   824      /* sockaddr does not match socket type (IPv4/IPv6) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   825      sock_set_errno(sock, err_to_errno(ERR_VAL));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   826      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   827      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   828    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   829  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   830    LWIP_UNUSED_ARG(namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   831    if (name->sa_family == AF_UNSPEC) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   832      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   833      err = netconn_disconnect(sock->conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   834    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   835      ip_addr_t remote_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   836      u16_t remote_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   837  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   838      /* check size, family and alignment of 'name' */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   839      LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   840                 IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   841                 sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   842  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   843      SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   844      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   845      ip_addr_debug_print_val(SOCKETS_DEBUG, remote_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   846      LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", remote_port));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   847  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   848  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   849      /* Dual-stack: Unmap IPv4 mapped IPv6 addresses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   850      if (IP_IS_V6_VAL(remote_addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&remote_addr))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   851        unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   852        IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   853      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   854  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   855  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   856      err = netconn_connect(sock->conn, &remote_addr, remote_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   857    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   858  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   859    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   860      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   861      sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   862      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   863      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   864    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   865  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   866    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   867    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   868    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   869    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   870  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   871  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   872  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   873   * Set a socket into listen mode.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   874   * The socket may not have been used for another connection previously.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   875   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   876   * @param s the socket to set to listening mode
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   877   * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   878   * @return 0 on success, non-zero on failure
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   879   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   880  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   881  lwip_listen(int s, int backlog)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   882  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   883    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   884    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   885  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   886    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   887  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   888    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   889    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   890      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   891    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   892  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   893    /* limit the "backlog" parameter to fit in an u8_t */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   894    backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   895  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   896    err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   897  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   898    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   899      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   900      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   901        sock_set_errno(sock, EOPNOTSUPP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   902      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   903        sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   904      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   905      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   906      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   907    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   908  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   909    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   910    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   911    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   912  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   913  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   914  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   915  /* Helper function to loop over receiving pbufs from netconn
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   916   * until "len" bytes are received or we're otherwise done.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   917   * Keeps sock->lastdata for peeking or partly copying.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   918   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   919  static ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   920  lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   921  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   922    u8_t apiflags = NETCONN_NOAUTORCVD;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   923    ssize_t recvd = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   924    ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   925  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   926    LWIP_ASSERT("no socket given", sock != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   927    LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   928  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   929    if (flags & MSG_DONTWAIT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   930      apiflags |= NETCONN_DONTBLOCK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   931    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   932  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   933    do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   934      struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   935      err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   936      u16_t copylen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   937  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   938      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   939      /* Check if there is data left from the last recv operation. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   940      if (sock->lastdata.pbuf) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   941        p = sock->lastdata.pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   942      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   943        /* No data was left from the previous operation, so we try to get
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   944           some from the network. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   945        err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   946        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   947                                    err, (void *)p));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   948  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   949        if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   950          if (recvd > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   951            /* already received data, return that (this trusts in getting the same error from
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   952               netconn layer again next time netconn_recv is called) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   953            goto lwip_recv_tcp_done;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   954          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   955          /* We should really do some error checking here. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   956          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   957                                      lwip_strerr(err)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   958          sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   959          if (err == ERR_CLSD) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   960            return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   961          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   962            return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   963          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   964        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   965        LWIP_ASSERT("p != NULL", p != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   966        sock->lastdata.pbuf = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   967      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   968  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   969      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   970                                  p->tot_len, (int)recv_left, (int)recvd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   971  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   972      if (recv_left > p->tot_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   973        copylen = p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   974      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   975        copylen = (u16_t)recv_left;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   976      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   977      if (recvd + copylen < recvd) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   978        /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   979        copylen = (u16_t)(SSIZE_MAX - recvd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   980      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   981  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   982      /* copy the contents of the received buffer into
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   983      the supplied memory pointer mem */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   984      pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   985  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   986      recvd += copylen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   987  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   988      /* TCP combines multiple pbufs for one recv */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   989      LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   990      recv_left -= copylen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   991  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   992      /* Unless we peek the incoming message... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   993      if ((flags & MSG_PEEK) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   994        /* ... check if there is data left in the pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   995        LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   996        if (p->tot_len - copylen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   997          /* If so, it should be saved in the sock structure for the next recv call.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   998             We store the pbuf but hide/free the consumed data: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	   999          sock->lastdata.pbuf = pbuf_free_header(p, copylen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1000          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1001        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1002          sock->lastdata.pbuf = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1003          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1004          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1005        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1006      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1007      /* once we have some data to return, only add more if we don't need to wait */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1008      apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1009      /* @todo: do we need to support peeking more than one pbuf? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1010    } while ((recv_left > 0) && !(flags & MSG_PEEK));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1011  lwip_recv_tcp_done:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1012    if ((recvd > 0) && !(flags & MSG_PEEK)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1013      /* ensure window update after copying all data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1014      netconn_tcp_recvd(sock->conn, (size_t)recvd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1015    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1016    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1017    return recvd;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1018  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1019  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1020  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1021  /* Convert a netbuf's address data to struct sockaddr */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1022  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1023  lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1024                      struct sockaddr *from, socklen_t *fromlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1025  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1026    int truncated = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1027    union sockaddr_aligned saddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1028  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1029    LWIP_UNUSED_ARG(conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1030  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1031    LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1032    LWIP_ASSERT("from != NULL", from != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1033    LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1034  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1035  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1036    /* Dual-stack: Map IPv4 addresses to IPv4 mapped IPv6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1037    if (NETCONNTYPE_ISIPV6(netconn_type(conn)) && IP_IS_V4(fromaddr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1038      ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1039      IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1040    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1041  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1042  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1043    IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1044    if (*fromlen < saddr.sa.sa_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1045      truncated = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1046    } else if (*fromlen > saddr.sa.sa_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1047      *fromlen = saddr.sa.sa_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1048    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1049    MEMCPY(from, &saddr, *fromlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1050    return truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1051  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1052  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1053  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1054  /* Helper function to get a tcp socket's remote address info */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1055  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1056  lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1057  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1058    if (sock == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1059      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1060    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1061    LWIP_UNUSED_ARG(dbg_fn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1062    LWIP_UNUSED_ARG(dbg_s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1063    LWIP_UNUSED_ARG(dbg_ret);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1064  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1065  #if !SOCKETS_DEBUG
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1066    if (from && fromlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1067  #endif /* !SOCKETS_DEBUG */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1068    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1069      /* get remote addr/port from tcp_pcb */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1070      u16_t port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1071      ip_addr_t tmpaddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1072      netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1073      LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1074      ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1075      LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1076      if (from && fromlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1077        return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1078      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1079    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1080    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1081  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1082  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1083  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1084  /* Helper function to receive a netbuf from a udp or raw netconn.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1085   * Keeps sock->lastdata for peeking.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1086   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1087  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1088  lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1089  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1090    struct netbuf *buf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1091    u8_t apiflags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1092    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1093    u16_t buflen, copylen, copied;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1094    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1095  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1096    LWIP_UNUSED_ARG(dbg_s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1097    LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1098  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1099    if (flags & MSG_DONTWAIT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1100      apiflags = NETCONN_DONTBLOCK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1101    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1102      apiflags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1103    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1104  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1105    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1106    /* Check if there is data left from the last recv operation. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1107    buf = sock->lastdata.netbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1108    if (buf == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1109      /* No data was left from the previous operation, so we try to get
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1110          some from the network. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1111      err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1112      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1113                                  err, (void *)buf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1114  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1115      if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1116        return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1117      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1118      LWIP_ASSERT("buf != NULL", buf != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1119      sock->lastdata.netbuf = buf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1120    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1121    buflen = buf->p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1122    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1123  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1124    copied = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1125    /* copy the pbuf payload into the iovs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1126    for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1127      u16_t len_left = (u16_t)(buflen - copied);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1128      if (msg->msg_iov[i].iov_len > len_left) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1129        copylen = len_left;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1130      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1131        copylen = (u16_t)msg->msg_iov[i].iov_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1132      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1133  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1134      /* copy the contents of the received buffer into
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1135          the supplied memory buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1136      pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1137      copied = (u16_t)(copied + copylen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1138    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1140    /* Check to see from where the data was.*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1141  #if !SOCKETS_DEBUG
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1142    if (msg->msg_name && msg->msg_namelen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1143  #endif /* !SOCKETS_DEBUG */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1144    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1145      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1146      ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1147      LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1148      if (msg->msg_name && msg->msg_namelen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1149        lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1150                            (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1151      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1152    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1153  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1154    /* Initialize flag output */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1155    msg->msg_flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1156  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1157    if (msg->msg_control) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1158      u8_t wrote_msg = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1159  #if LWIP_NETBUF_RECVINFO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1160      /* Check if packet info was recorded */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1161      if (buf->flags & NETBUF_FLAG_DESTADDR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1162        if (IP_IS_V4(&buf->toaddr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1163  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1164          if (msg->msg_controllen >= CMSG_SPACE(sizeof(struct in_pktinfo))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1165            struct cmsghdr *chdr = CMSG_FIRSTHDR(msg); /* This will always return a header!! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1166            struct in_pktinfo *pkti = (struct in_pktinfo *)CMSG_DATA(chdr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1167            chdr->cmsg_level = IPPROTO_IP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1168            chdr->cmsg_type = IP_PKTINFO;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1169            chdr->cmsg_len = CMSG_LEN(sizeof(struct in_pktinfo));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1170            pkti->ipi_ifindex = buf->p->if_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1171            inet_addr_from_ip4addr(&pkti->ipi_addr, ip_2_ip4(netbuf_destaddr(buf)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1172            msg->msg_controllen = CMSG_SPACE(sizeof(struct in_pktinfo));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1173            wrote_msg = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1174          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1175            msg->msg_flags |= MSG_CTRUNC;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1176          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1177  #endif /* LWIP_IPV4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1178        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1179      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1180  #endif /* LWIP_NETBUF_RECVINFO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1181  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1182      if (!wrote_msg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1183        msg->msg_controllen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1184      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1185    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1186  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1187    /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1188    if ((flags & MSG_PEEK) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1189      sock->lastdata.netbuf = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1190      netbuf_delete(buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1191    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1192    if (datagram_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1193      *datagram_len = buflen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1194    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1195    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1196  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1197  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1198  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1199  lwip_recvfrom(int s, void *mem, size_t len, int flags,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1200                struct sockaddr *from, socklen_t *fromlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1201  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1202    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1203    ssize_t ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1204  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1205    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1206    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1207    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1208      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1209    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1210  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1211    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1212      ret = lwip_recv_tcp(sock, mem, len, flags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1213      lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1214      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1215      return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1216    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1217  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1218    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1219      u16_t datagram_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1220      struct iovec vec;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1221      struct msghdr msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1222      err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1223      vec.iov_base = mem;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1224      vec.iov_len = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1225      msg.msg_control = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1226      msg.msg_controllen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1227      msg.msg_flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1228      msg.msg_iov = &vec;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1229      msg.msg_iovlen = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1230      msg.msg_name = from;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1231      msg.msg_namelen = (fromlen ? *fromlen : 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1232      err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1233      if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1234        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1235                                    s, lwip_strerr(err)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1236        sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1237        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1238        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1239      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1240      ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1241      if (fromlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1242        *fromlen = msg.msg_namelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1243      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1244    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1245  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1246    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1247    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1248    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1249  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1250  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1251  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1252  lwip_read(int s, void *mem, size_t len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1253  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1254    return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1255  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1256  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1257  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1258  lwip_readv(int s, const struct iovec *iov, int iovcnt)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1259  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1260    struct msghdr msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1261  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1262    msg.msg_name = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1263    msg.msg_namelen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1264    /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1265       Blame the opengroup standard for this inconsistency. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1266    msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1267    msg.msg_iovlen = iovcnt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1268    msg.msg_control = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1269    msg.msg_controllen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1270    msg.msg_flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1271    return lwip_recvmsg(s, &msg, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1272  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1273  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1274  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1275  lwip_recv(int s, void *mem, size_t len, int flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1276  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1277    return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1278  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1279  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1280  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1281  lwip_recvmsg(int s, struct msghdr *message, int flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1282  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1283    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1284    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1285    ssize_t buflen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1287    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvmsg(%d, message=%p, flags=0x%x)\n", s, (void *)message, flags));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1288    LWIP_ERROR("lwip_recvmsg: invalid message pointer", message != NULL, return ERR_ARG;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1289    LWIP_ERROR("lwip_recvmsg: unsupported flags", (flags & ~(MSG_PEEK|MSG_DONTWAIT)) == 0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1290               set_errno(EOPNOTSUPP); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1291  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1292    if ((message->msg_iovlen <= 0) || (message->msg_iovlen > IOV_MAX)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1293      set_errno(EMSGSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1294      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1295    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1296  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1297    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1298    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1299      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1300    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1301  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1302    /* check for valid vectors */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1303    buflen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1304    for (i = 0; i < message->msg_iovlen; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1305      if ((message->msg_iov[i].iov_base == NULL) || ((ssize_t)message->msg_iov[i].iov_len <= 0) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1306          ((size_t)(ssize_t)message->msg_iov[i].iov_len != message->msg_iov[i].iov_len) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1307          ((ssize_t)(buflen + (ssize_t)message->msg_iov[i].iov_len) <= 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1308        sock_set_errno(sock, err_to_errno(ERR_VAL));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1309        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1310        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1311      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1312      buflen = (ssize_t)(buflen + (ssize_t)message->msg_iov[i].iov_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1313    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1314  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1315    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1316  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1317      int recv_flags = flags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1318      message->msg_flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1319      /* recv the data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1320      buflen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1321      for (i = 0; i < message->msg_iovlen; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1322        /* try to receive into this vector's buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1323        ssize_t recvd_local = lwip_recv_tcp(sock, message->msg_iov[i].iov_base, message->msg_iov[i].iov_len, recv_flags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1324        if (recvd_local > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1325          /* sum up received bytes */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1326          buflen += recvd_local;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1327        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1328        if ((recvd_local < 0) || (recvd_local < (int)message->msg_iov[i].iov_len) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1329            (flags & MSG_PEEK)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1330          /* returned prematurely (or peeking, which might actually be limitated to the first iov) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1331          if (buflen <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1332            /* nothing received at all, propagate the error */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1333            buflen = recvd_local;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1334          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1335          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1336        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1337        /* pass MSG_DONTWAIT to lwip_recv_tcp() to prevent waiting for more data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1338        recv_flags |= MSG_DONTWAIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1339      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1340      if (buflen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1341        /* reset socket error since we have received something */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1342        sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1343      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1344      /* " If the socket is connected, the msg_name and msg_namelen members shall be ignored." */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1345      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1346      return buflen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1347  #else /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1348      sock_set_errno(sock, err_to_errno(ERR_ARG));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1349      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1350      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1351  #endif /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1352    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1353    /* else, UDP and RAW NETCONNs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1354  #if LWIP_UDP || LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1355    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1356      u16_t datagram_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1357      err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1358      err = lwip_recvfrom_udp_raw(sock, flags, message, &datagram_len, s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1359      if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1360        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvmsg[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1361                                    s, lwip_strerr(err)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1362        sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1363        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1364        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1365      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1366      if (datagram_len > buflen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1367        message->msg_flags |= MSG_TRUNC;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1368      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1369  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1370      sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1371      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1372      return (int)datagram_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1373    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1374  #else /* LWIP_UDP || LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1375    sock_set_errno(sock, err_to_errno(ERR_ARG));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1376    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1377    return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1378  #endif /* LWIP_UDP || LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1379  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1380  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1381  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1382  lwip_send(int s, const void *data, size_t size, int flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1383  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1384    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1385    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1386    u8_t write_flags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1387    size_t written;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1388  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1389    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1390                                s, data, size, flags));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1391  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1392    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1393    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1394      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1395    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1396  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1397    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1398  #if (LWIP_UDP || LWIP_RAW)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1399      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1400      return lwip_sendto(s, data, size, flags, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1401  #else /* (LWIP_UDP || LWIP_RAW) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1402      sock_set_errno(sock, err_to_errno(ERR_ARG));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1403      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1404      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1405  #endif /* (LWIP_UDP || LWIP_RAW) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1406    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1407  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1408    write_flags = (u8_t)(NETCONN_COPY |
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1409                         ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1410                         ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1411    written = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1412    err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1413  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1414    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1415    sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1416    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1417    /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1418    return (err == ERR_OK ? (ssize_t)written : -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1419  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1420  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1421  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1422  lwip_sendmsg(int s, const struct msghdr *msg, int flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1423  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1424    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1425  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1426    u8_t write_flags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1427    size_t written;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1428  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1429    err_t err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1430  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1431    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1432    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1433      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1434    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1435  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1436    LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1437               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1438    LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", msg->msg_iov != NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1439               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1440    LWIP_ERROR("lwip_sendmsg: maximum iovs exceeded", (msg->msg_iovlen > 0) && (msg->msg_iovlen <= IOV_MAX),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1441               sock_set_errno(sock, EMSGSIZE); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1442    LWIP_ERROR("lwip_sendmsg: unsupported flags", (flags & ~(MSG_DONTWAIT | MSG_MORE)) == 0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1443               sock_set_errno(sock, EOPNOTSUPP); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1444  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1445    LWIP_UNUSED_ARG(msg->msg_control);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1446    LWIP_UNUSED_ARG(msg->msg_controllen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1447    LWIP_UNUSED_ARG(msg->msg_flags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1448  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1449    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1450  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1451      write_flags = (u8_t)(NETCONN_COPY |
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1452                           ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1453                           ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1455      written = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1456      err = netconn_write_vectors_partly(sock->conn, (struct netvector *)msg->msg_iov, (u16_t)msg->msg_iovlen, write_flags, &written);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1457      sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1458      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1459      /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1460      return (err == ERR_OK ? (ssize_t)written : -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1461  #else /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1462      sock_set_errno(sock, err_to_errno(ERR_ARG));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1463      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1464      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1465  #endif /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1466    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1467    /* else, UDP and RAW NETCONNs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1468  #if LWIP_UDP || LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1469    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1470      struct netbuf chain_buf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1471      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1472      ssize_t size = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1473  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1474      LWIP_UNUSED_ARG(flags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1475      LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1476                 IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1477                 sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1478  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1479      /* initialize chain buffer with destination */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1480      memset(&chain_buf, 0, sizeof(struct netbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1481      if (msg->msg_name) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1482        u16_t remote_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1483        SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf.addr, remote_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1484        netbuf_fromport(&chain_buf) = remote_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1485      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1486  #if LWIP_NETIF_TX_SINGLE_PBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1487      for (i = 0; i < msg->msg_iovlen; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1488        size += msg->msg_iov[i].iov_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1489        if ((msg->msg_iov[i].iov_len > INT_MAX) || (size < (int)msg->msg_iov[i].iov_len)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1490          /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1491          goto sendmsg_emsgsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1492        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1493      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1494      if (size > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1495        /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1496        goto sendmsg_emsgsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1497      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1498      /* Allocate a new netbuf and copy the data into it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1499      if (netbuf_alloc(&chain_buf, (u16_t)size) == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1500        err = ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1501      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1502        /* flatten the IO vectors */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1503        size_t offset = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1504        for (i = 0; i < msg->msg_iovlen; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1505          MEMCPY(&((u8_t *)chain_buf.p->payload)[offset], msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1506          offset += msg->msg_iov[i].iov_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1507        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1508  #if LWIP_CHECKSUM_ON_COPY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1509        {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1510          /* This can be improved by using LWIP_CHKSUM_COPY() and aggregating the checksum for each IO vector */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1511          u16_t chksum = ~inet_chksum_pbuf(chain_buf.p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1512          netbuf_set_chksum(&chain_buf, chksum);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1513        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1514  #endif /* LWIP_CHECKSUM_ON_COPY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1515        err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1516      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1517  #else /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1518      /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1519         manually to avoid having to allocate, chain, and delete a netbuf for each iov */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1520      for (i = 0; i < msg->msg_iovlen; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1521        struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1522        if (msg->msg_iov[i].iov_len > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1523          /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1524          goto sendmsg_emsgsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1525        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1526        p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1527        if (p == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1528          err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1529          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1530        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1531        p->payload = msg->msg_iov[i].iov_base;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1532        p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1533        /* netbuf empty, add new pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1534        if (chain_buf.p == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1535          chain_buf.p = chain_buf.ptr = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1536          /* add pbuf to existing pbuf chain */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1537        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1538          if (chain_buf.p->tot_len + p->len > 0xffff) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1539            /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1540            pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1541            goto sendmsg_emsgsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1542          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1543          pbuf_cat(chain_buf.p, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1544        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1545      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1546      /* save size of total chain */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1547      if (err == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1548        size = netbuf_len(&chain_buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1549      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1550  #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1551  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1552      if (err == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1553  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1554        /* Dual-stack: Unmap IPv4 mapped IPv6 addresses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1555        if (IP_IS_V6_VAL(chain_buf.addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&chain_buf.addr))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1556          unmap_ipv4_mapped_ipv6(ip_2_ip4(&chain_buf.addr), ip_2_ip6(&chain_buf.addr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1557          IP_SET_TYPE_VAL(chain_buf.addr, IPADDR_TYPE_V4);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1558        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1559  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1560  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1561        /* send the data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1562        err = netconn_send(sock->conn, &chain_buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1563      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1564  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1565      /* deallocated the buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1566      netbuf_free(&chain_buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1567  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1568      sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1569      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1570      return (err == ERR_OK ? size : -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1571  sendmsg_emsgsize:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1572      sock_set_errno(sock, EMSGSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1573      netbuf_free(&chain_buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1574      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1575      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1576    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1577  #else /* LWIP_UDP || LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1578    sock_set_errno(sock, err_to_errno(ERR_ARG));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1579    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1580    return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1581  #endif /* LWIP_UDP || LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1582  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1584  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1585  lwip_sendto(int s, const void *data, size_t size, int flags,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1586              const struct sockaddr *to, socklen_t tolen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1587  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1588    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1589    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1590    u16_t short_size;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1591    u16_t remote_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1592    struct netbuf buf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1593  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1594    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1595    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1596      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1597    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1598  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1599    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1600  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1601      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1602      return lwip_send(s, data, size, flags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1603  #else /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1604      LWIP_UNUSED_ARG(flags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1605      sock_set_errno(sock, err_to_errno(ERR_ARG));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1606      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1607      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1608  #endif /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1609    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1610  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1611    if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1612      /* cannot fit into one datagram (at least for us) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1613      sock_set_errno(sock, EMSGSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1614      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1615      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1616    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1617    short_size = (u16_t)size;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1618    LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1619               (IS_SOCK_ADDR_LEN_VALID(tolen) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1620                ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1621               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1622    LWIP_UNUSED_ARG(tolen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1623  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1624    /* initialize a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1625    buf.p = buf.ptr = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1626  #if LWIP_CHECKSUM_ON_COPY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1627    buf.flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1628  #endif /* LWIP_CHECKSUM_ON_COPY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1629    if (to) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1630      SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1631    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1632      remote_port = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1633      ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1634    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1635    netbuf_fromport(&buf) = remote_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1636  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1637  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1638    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_sendto(%d, data=%p, short_size=%"U16_F", flags=0x%x to=",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1639                                s, data, short_size, flags));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1640    ip_addr_debug_print_val(SOCKETS_DEBUG, buf.addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1641    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", remote_port));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1642  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1643    /* make the buffer point to the data that should be sent */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1644  #if LWIP_NETIF_TX_SINGLE_PBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1645    /* Allocate a new netbuf and copy the data into it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1646    if (netbuf_alloc(&buf, short_size) == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1647      err = ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1648    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1649  #if LWIP_CHECKSUM_ON_COPY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1650      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_RAW) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1651        u16_t chksum = LWIP_CHKSUM_COPY(buf.p->payload, data, short_size);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1652        netbuf_set_chksum(&buf, chksum);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1653      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1654  #endif /* LWIP_CHECKSUM_ON_COPY */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1655      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1656        MEMCPY(buf.p->payload, data, short_size);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1657      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1658      err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1659    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1660  #else /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1661    err = netbuf_ref(&buf, data, short_size);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1662  #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1663    if (err == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1664  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1665      /* Dual-stack: Unmap IPv4 mapped IPv6 addresses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1666      if (IP_IS_V6_VAL(buf.addr) && ip6_addr_isipv4mappedipv6(ip_2_ip6(&buf.addr))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1667        unmap_ipv4_mapped_ipv6(ip_2_ip4(&buf.addr), ip_2_ip6(&buf.addr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1668        IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1669      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1670  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1671  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1672      /* send the data */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1673      err = netconn_send(sock->conn, &buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1674    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1675  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1676    /* deallocated the buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1677    netbuf_free(&buf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1678  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1679    sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1680    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1681    return (err == ERR_OK ? short_size : -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1682  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1683  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1684  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1685  lwip_socket(int domain, int type, int protocol)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1686  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1687    struct netconn *conn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1688    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1689  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1690    LWIP_UNUSED_ARG(domain); /* @todo: check this */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1691  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1692    /* create a netconn */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1693    switch (type) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1694      case SOCK_RAW:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1695        conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1696               (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1697        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1698                                    domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1699        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1700      case SOCK_DGRAM:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1701        conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1702                                         ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1703                                         DEFAULT_SOCKET_EVENTCB);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1704        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1705                                    domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1706  #if LWIP_NETBUF_RECVINFO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1707        if (conn) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1708          /* netconn layer enables pktinfo by default, sockets default to off */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1709          conn->flags &= ~NETCONN_FLAG_PKTINFO;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1710        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1711  #endif /* LWIP_NETBUF_RECVINFO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1712        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1713      case SOCK_STREAM:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1714        conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1715        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1716                                    domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1717        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1718      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1719        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1720                                    domain, type, protocol));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1721        set_errno(EINVAL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1722        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1723    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1724  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1725    if (!conn) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1726      LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1727      set_errno(ENOBUFS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1728      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1729    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1730  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1731    i = alloc_socket(conn, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1732  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1733    if (i == -1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1734      netconn_delete(conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1735      set_errno(ENFILE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1736      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1737    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1738    conn->socket = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1739    done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1740    LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1741    set_errno(0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1742    return i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1743  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1744  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1745  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1746  lwip_write(int s, const void *data, size_t size)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1747  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1748    return lwip_send(s, data, size, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1749  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1750  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1751  ssize_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1752  lwip_writev(int s, const struct iovec *iov, int iovcnt)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1753  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1754    struct msghdr msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1755  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1756    msg.msg_name = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1757    msg.msg_namelen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1758    /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1759       Blame the opengroup standard for this inconsistency. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1760    msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1761    msg.msg_iovlen = iovcnt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1762    msg.msg_control = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1763    msg.msg_controllen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1764    msg.msg_flags = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1765    return lwip_sendmsg(s, &msg, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1766  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1767  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1768  #if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1769  /* Add select_cb to select_cb_list. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1770  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1771  lwip_link_select_cb(struct lwip_select_cb *select_cb)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1772  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1773    LWIP_SOCKET_SELECT_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1774  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1775    /* Protect the select_cb_list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1776    LWIP_SOCKET_SELECT_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1777  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1778    /* Put this select_cb on top of list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1779    select_cb->next = select_cb_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1780    if (select_cb_list != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1781      select_cb_list->prev = select_cb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1782    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1783    select_cb_list = select_cb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1784  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1785    /* Increasing this counter tells select_check_waiters that the list has changed. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1786    select_cb_ctr++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1787  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1788  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1789    /* Now we can safely unprotect */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1790    LWIP_SOCKET_SELECT_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1791  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1792  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1793  /* Remove select_cb from select_cb_list. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1794  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1795  lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1796  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1797    LWIP_SOCKET_SELECT_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1798  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1799    /* Take us off the list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1800    LWIP_SOCKET_SELECT_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1801    if (select_cb->next != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1802      select_cb->next->prev = select_cb->prev;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1803    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1804    if (select_cb_list == select_cb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1805      LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1806      select_cb_list = select_cb->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1807    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1808      LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1809      select_cb->prev->next = select_cb->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1810    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1811  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1812    /* Increasing this counter tells select_check_waiters that the list has changed. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1813    select_cb_ctr++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1814  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1815    LWIP_SOCKET_SELECT_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1816  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1817  #endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1818  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1819  #if LWIP_SOCKET_SELECT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1820  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1821   * Go through the readset and writeset lists and see which socket of the sockets
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1822   * set in the sets has events. On return, readset, writeset and exceptset have
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1823   * the sockets enabled that had events.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1824   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1825   * @param maxfdp1 the highest socket index in the sets
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1826   * @param readset_in    set of sockets to check for read events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1827   * @param writeset_in   set of sockets to check for write events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1828   * @param exceptset_in  set of sockets to check for error events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1829   * @param readset_out   set of sockets that had read events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1830   * @param writeset_out  set of sockets that had write events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1831   * @param exceptset_out set os sockets that had error events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1832   * @return number of sockets that had events (read/write/exception) (>= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1833   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1834  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1835  lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1836               fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1837  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1838    int i, nready = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1839    fd_set lreadset, lwriteset, lexceptset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1840    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1841    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1842  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1843    FD_ZERO(&lreadset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1844    FD_ZERO(&lwriteset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1845    FD_ZERO(&lexceptset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1846  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1847    /* Go through each socket in each list to count number of sockets which
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1848       currently match */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1849    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1850      /* if this FD is not in the set, continue */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1851      if (!(readset_in && FD_ISSET(i, readset_in)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1852          !(writeset_in && FD_ISSET(i, writeset_in)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1853          !(exceptset_in && FD_ISSET(i, exceptset_in))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1854        continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1855      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1856      /* First get the socket's status (protected)... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1857      SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1858      sock = tryget_socket_unconn_locked(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1859      if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1860        void *lastdata = sock->lastdata.pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1861        s16_t rcvevent = sock->rcvevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1862        u16_t sendevent = sock->sendevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1863        u16_t errevent = sock->errevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1864        SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1865  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1866        /* ... then examine it: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1867        /* See if netconn of this socket is ready for read */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1868        if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1869          FD_SET(i, &lreadset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1870          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1871          nready++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1872        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1873        /* See if netconn of this socket is ready for write */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1874        if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1875          FD_SET(i, &lwriteset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1876          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1877          nready++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1878        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1879        /* See if netconn of this socket had an error */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1880        if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1881          FD_SET(i, &lexceptset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1882          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1883          nready++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1884        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1885        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1886      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1887        SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1888        /* no a valid open socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1889        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1890      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1891    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1892    /* copy local sets to the ones provided as arguments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1893    *readset_out = lreadset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1894    *writeset_out = lwriteset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1895    *exceptset_out = lexceptset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1896  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1897    LWIP_ASSERT("nready >= 0", nready >= 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1898    return nready;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1899  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1900  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1901  #if LWIP_NETCONN_FULLDUPLEX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1902  /* Mark all of the set sockets in one of the three fdsets passed to select as used.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1903   * All sockets are marked (and later unmarked), whether they are open or not.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1904   * This is OK as lwip_selscan aborts select when non-open sockets are found.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1905   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1906  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1907  lwip_select_inc_sockets_used_set(int maxfdp, fd_set *fdset, fd_set *used_sockets)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1908  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1909    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1910    if (fdset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1911      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1912      for (i = LWIP_SOCKET_OFFSET; i < maxfdp; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1913        /* if this FD is in the set, lock it (unless already done) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1914        if (FD_ISSET(i, fdset) && !FD_ISSET(i, used_sockets)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1915          struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1916          SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1917          sock = tryget_socket_unconn_locked(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1918          if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1919            /* leave the socket used until released by lwip_select_dec_sockets_used */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1920            FD_SET(i, used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1921          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1922          SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1923        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1924      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1925    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1926  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1927  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1928  /* Mark all sockets passed to select as used to prevent them from being freed
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1929   * from other threads while select is running.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1930   * Marked sockets are added to 'used_sockets' to mark them only once an be able
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1931   * to unmark them correctly.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1932   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1933  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1934  lwip_select_inc_sockets_used(int maxfdp, fd_set *fdset1, fd_set *fdset2, fd_set *fdset3, fd_set *used_sockets)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1935  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1936    FD_ZERO(used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1937    lwip_select_inc_sockets_used_set(maxfdp, fdset1, used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1938    lwip_select_inc_sockets_used_set(maxfdp, fdset2, used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1939    lwip_select_inc_sockets_used_set(maxfdp, fdset3, used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1940  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1941  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1942  /* Let go all sockets that were marked as used when starting select */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1943  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1944  lwip_select_dec_sockets_used(int maxfdp, fd_set *used_sockets)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1945  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1946    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1947    for (i = LWIP_SOCKET_OFFSET; i < maxfdp; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1948      /* if this FD is not in the set, continue */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1949      if (FD_ISSET(i, used_sockets)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1950        struct lwip_sock *sock = tryget_socket_unconn_nouse(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1951        LWIP_ASSERT("socket gone at the end of select", sock != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1952        if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1953          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1954        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1955      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1956    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1957  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1958  #else /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1959  #define lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, used_sockets)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1960  #define lwip_select_dec_sockets_used(maxfdp1, used_sockets)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1961  #endif /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1962  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1963  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1964  lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1965              struct timeval *timeout)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1966  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1967    u32_t waitres = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1968    int nready;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1969    fd_set lreadset, lwriteset, lexceptset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1970    u32_t msectimeout;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1971    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1972    int maxfdp2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1973  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1974    int waited = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1975  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1976  #if LWIP_NETCONN_FULLDUPLEX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1977    fd_set used_sockets;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1978  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1979    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1980  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1981    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1982                                maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1983                                timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1984                                timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1985  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1986    if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1987      set_errno(EINVAL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1988      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1989    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1990  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1991    lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1992  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1993    /* Go through each socket in each list to count number of sockets which
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1994       currently match */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1995    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1996  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1997    if (nready < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1998      /* one of the sockets in one of the fd_sets was invalid */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  1999      set_errno(EBADF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2000      lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2001      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2002    } else if (nready > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2003      /* one or more sockets are set, no need to wait */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2004      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2005    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2006      /* If we don't have any current events, then suspend if we are supposed to */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2007      if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2008        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2009        /* This is OK as the local fdsets are empty and nready is zero,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2010           or we would have returned earlier. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2011      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2012        /* None ready: add our semaphore to list:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2013           We don't actually need any dynamic memory. Our entry on the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2014           list is only valid while we are in this function, so it's ok
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2015           to use local variables (unless we're running in MPU compatible
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2016           mode). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2017        API_SELECT_CB_VAR_DECLARE(select_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2018        API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2019        memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2020  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2021        API_SELECT_CB_VAR_REF(select_cb).readset = readset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2022        API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2023        API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2024  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2025        API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2026  #else /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2027        if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2028          /* failed to create semaphore */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2029          set_errno(ENOMEM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2030          lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2031          API_SELECT_CB_VAR_FREE(select_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2032          return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2033        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2034  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2035  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2036        lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2037  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2038        /* Increase select_waiting for each socket we are interested in */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2039        maxfdp2 = maxfdp1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2040        for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2041          if ((readset && FD_ISSET(i, readset)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2042              (writeset && FD_ISSET(i, writeset)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2043              (exceptset && FD_ISSET(i, exceptset))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2044            struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2045            SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2046            sock = tryget_socket_unconn_locked(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2047            if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2048              sock->select_waiting++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2049              if (sock->select_waiting == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2050                /* overflow - too many threads waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2051                sock->select_waiting--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2052                nready = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2053                maxfdp2 = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2054                SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2055                done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2056                set_errno(EBUSY);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2057                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2058              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2059              SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2060              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2061            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2062              /* Not a valid socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2063              nready = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2064              maxfdp2 = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2065              SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2066              set_errno(EBADF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2067              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2068            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2069          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2070        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2071  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2072        if (nready >= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2073          /* Call lwip_selscan again: there could have been events between
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2074             the last scan (without us on the list) and putting us on the list! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2075          nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2076          if (!nready) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2077            /* Still none ready, just wait to be woken */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2078            if (timeout == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2079              /* Wait forever */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2080              msectimeout = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2081            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2082              long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2083              if (msecs_long <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2084                /* Wait 1ms at least (0 means wait forever) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2085                msectimeout = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2086              } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2087                msectimeout = (u32_t)msecs_long;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2088              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2089            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2090  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2091            waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2092  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2093            waited = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2094  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2095          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2096        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2097  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2098        /* Decrease select_waiting for each socket we are interested in */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2099        for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2100          if ((readset && FD_ISSET(i, readset)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2101              (writeset && FD_ISSET(i, writeset)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2102              (exceptset && FD_ISSET(i, exceptset))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2103            struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2104            SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2105            sock = tryget_socket_unconn_locked(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2106            if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2107              /* for now, handle select_waiting==0... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2108              LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2109              if (sock->select_waiting > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2110                sock->select_waiting--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2111              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2112              SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2113              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2114            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2115              SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2116              /* Not a valid socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2117              nready = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2118              set_errno(EBADF);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2119            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2120          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2121        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2122  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2123        lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2124  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2125  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2126        if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2127          /* don't leave the thread-local semaphore signalled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2128          sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2129        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2130  #else /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2131        sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2132  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2133        API_SELECT_CB_VAR_FREE(select_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2134  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2135        if (nready < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2136          /* This happens when a socket got closed while waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2137          lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2138          return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2139        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2140  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2141        if (waitres == SYS_ARCH_TIMEOUT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2142          /* Timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2143          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2144          /* This is OK as the local fdsets are empty and nready is zero,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2145             or we would have returned earlier. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2146        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2147          /* See what's set now after waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2148          nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2149          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2150        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2151      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2152    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2153  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2154    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2155    set_errno(0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2156    if (readset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2157      *readset = lreadset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2158    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2159    if (writeset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2160      *writeset = lwriteset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2161    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2162    if (exceptset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2163      *exceptset = lexceptset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2164    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2165    return nready;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2166  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2167  #endif /* LWIP_SOCKET_SELECT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2168  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2169  #if LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2170  /** Options for the lwip_pollscan function. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2171  enum lwip_pollscan_opts
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2172  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2173    /** Clear revents in each struct pollfd. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2174    LWIP_POLLSCAN_CLEAR = 1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2175  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2176    /** Increment select_waiting in each struct lwip_sock. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2177    LWIP_POLLSCAN_INC_WAIT = 2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2178  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2179    /** Decrement select_waiting in each struct lwip_sock. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2180    LWIP_POLLSCAN_DEC_WAIT = 4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2181  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2182  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2183  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2184   * Update revents in each struct pollfd.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2185   * Optionally update select_waiting in struct lwip_sock.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2186   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2187   * @param fds          array of structures to update
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2188   * @param nfds         number of structures in fds
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2189   * @param opts         what to update and how
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2190   * @return number of structures that have revents != 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2191   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2192  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2193  lwip_pollscan(struct pollfd *fds, nfds_t nfds, enum lwip_pollscan_opts opts)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2194  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2195    int nready = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2196    nfds_t fdi;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2197    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2198    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2199  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2200    /* Go through each struct pollfd in the array. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2201    for (fdi = 0; fdi < nfds; fdi++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2202      if ((opts & LWIP_POLLSCAN_CLEAR) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2203        fds[fdi].revents = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2204      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2205  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2206      /* Negative fd means the caller wants us to ignore this struct.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2207         POLLNVAL means we already detected that the fd is invalid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2208         if another thread has since opened a new socket with that fd,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2209         we must not use that socket. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2210      if (fds[fdi].fd >= 0 && (fds[fdi].revents & POLLNVAL) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2211        /* First get the socket's status (protected)... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2212        SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2213        sock = tryget_socket_unconn_locked(fds[fdi].fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2214        if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2215          void* lastdata = sock->lastdata.pbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2216          s16_t rcvevent = sock->rcvevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2217          u16_t sendevent = sock->sendevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2218          u16_t errevent = sock->errevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2219  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2220          if ((opts & LWIP_POLLSCAN_INC_WAIT) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2221            sock->select_waiting++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2222            if (sock->select_waiting == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2223              /* overflow - too many threads waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2224              sock->select_waiting--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2225              nready = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2226              SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2227              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2228              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2229            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2230          } else if ((opts & LWIP_POLLSCAN_DEC_WAIT) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2231            /* for now, handle select_waiting==0... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2232            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2233            if (sock->select_waiting > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2234              sock->select_waiting--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2235            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2236          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2237          SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2238          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2239  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2240          /* ... then examine it: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2241          /* See if netconn of this socket is ready for read */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2242          if ((fds[fdi].events & POLLIN) != 0 && ((lastdata != NULL) || (rcvevent > 0))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2243            fds[fdi].revents |= POLLIN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2244            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_pollscan: fd=%d ready for reading\n", fds[fdi].fd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2245          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2246          /* See if netconn of this socket is ready for write */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2247          if ((fds[fdi].events & POLLOUT) != 0 && (sendevent != 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2248            fds[fdi].revents |= POLLOUT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2249            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_pollscan: fd=%d ready for writing\n", fds[fdi].fd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2250          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2251          /* See if netconn of this socket had an error */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2252          if (errevent != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2253            /* POLLERR is output only. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2254            fds[fdi].revents |= POLLERR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2255            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_pollscan: fd=%d ready for exception\n", fds[fdi].fd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2256          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2257        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2258          /* Not a valid socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2259          SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2260          /* POLLNVAL is output only. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2261          fds[fdi].revents |= POLLNVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2262          return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2263        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2264      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2265  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2266      /* Will return the number of structures that have events,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2267         not the number of events. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2268      if (fds[fdi].revents != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2269        nready++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2270      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2271    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2272  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2273    LWIP_ASSERT("nready >= 0", nready >= 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2274    return nready;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2275  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2276  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2277  #if LWIP_NETCONN_FULLDUPLEX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2278  /* Mark all sockets as used.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2279   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2280   * All sockets are marked (and later unmarked), whether they are open or not.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2281   * This is OK as lwip_pollscan aborts select when non-open sockets are found.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2282   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2283  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2284  lwip_poll_inc_sockets_used(struct pollfd *fds, nfds_t nfds)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2285  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2286    nfds_t fdi;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2287  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2288    if(fds) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2289      /* Go through each struct pollfd in the array. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2290      for (fdi = 0; fdi < nfds; fdi++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2291        /* Increase the reference counter */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2292        tryget_socket_unconn(fds[fdi].fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2293      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2294    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2295  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2296  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2297  /* Let go all sockets that were marked as used when starting poll */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2298  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2299  lwip_poll_dec_sockets_used(struct pollfd *fds, nfds_t nfds)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2300  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2301    nfds_t fdi;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2302  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2303    if(fds) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2304      /* Go through each struct pollfd in the array. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2305      for (fdi = 0; fdi < nfds; fdi++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2306        struct lwip_sock *sock = tryget_socket_unconn_nouse(fds[fdi].fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2307        if (sock != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2308          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2309        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2310      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2311    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2312  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2313  #else /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2314  #define lwip_poll_inc_sockets_used(fds, nfds)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2315  #define lwip_poll_dec_sockets_used(fds, nfds)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2316  #endif /* LWIP_NETCONN_FULLDUPLEX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2317  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2318  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2319  lwip_poll(struct pollfd *fds, nfds_t nfds, int timeout)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2320  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2321    u32_t waitres = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2322    int nready;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2323    u32_t msectimeout;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2324  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2325    int waited = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2326  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2327  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2328    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_poll(%p, %d, %d)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2329                    (void*)fds, (int)nfds, timeout));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2330    LWIP_ERROR("lwip_poll: invalid fds", ((fds != NULL && nfds > 0) || (fds == NULL && nfds == 0)),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2331               set_errno(EINVAL); return -1;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2332  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2333    lwip_poll_inc_sockets_used(fds, nfds);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2334  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2335    /* Go through each struct pollfd to count number of structures
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2336       which currently match */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2337    nready = lwip_pollscan(fds, nfds, LWIP_POLLSCAN_CLEAR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2338  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2339    if (nready < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2340      lwip_poll_dec_sockets_used(fds, nfds);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2341      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2342    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2343  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2344    /* If we don't have any current events, then suspend if we are supposed to */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2345    if (!nready) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2346      API_SELECT_CB_VAR_DECLARE(select_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2347  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2348      if (timeout == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2349        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_poll: no timeout, returning 0\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2350        goto return_success;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2351      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2352      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(EAGAIN); lwip_poll_dec_sockets_used(fds, nfds); return -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2353      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2355      /* None ready: add our semaphore to list:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2356         We don't actually need any dynamic memory. Our entry on the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2357         list is only valid while we are in this function, so it's ok
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2358         to use local variables. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2359  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2360      API_SELECT_CB_VAR_REF(select_cb).poll_fds = fds;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2361      API_SELECT_CB_VAR_REF(select_cb).poll_nfds = nfds;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2362  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2363      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2364  #else /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2365      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2366        /* failed to create semaphore */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2367        set_errno(EAGAIN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2368        lwip_poll_dec_sockets_used(fds, nfds);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2369        API_SELECT_CB_VAR_FREE(select_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2370        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2371      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2372  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2373  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2374      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2375  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2376      /* Increase select_waiting for each socket we are interested in.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2377         Also, check for events again: there could have been events between
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2378         the last scan (without us on the list) and putting us on the list! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2379      nready = lwip_pollscan(fds, nfds, LWIP_POLLSCAN_INC_WAIT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2380  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2381      if (!nready) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2382        /* Still none ready, just wait to be woken */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2383        if (timeout < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2384          /* Wait forever */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2385          msectimeout = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2386        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2387          /* timeout == 0 would have been handled earlier. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2388          LWIP_ASSERT("timeout > 0", timeout > 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2389          msectimeout = timeout;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2390        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2391        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2392  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2393        waited = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2394  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2395      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2396  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2397      /* Decrease select_waiting for each socket we are interested in,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2398         and check which events occurred while we waited. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2399      nready = lwip_pollscan(fds, nfds, LWIP_POLLSCAN_DEC_WAIT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2400  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2401      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2403  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2404      if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2405        /* don't leave the thread-local semaphore signalled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2406        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2407      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2408  #else /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2409      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2410  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2411      API_SELECT_CB_VAR_FREE(select_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2412  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2413      if (nready < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2414        /* This happens when a socket got closed while waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2415        lwip_poll_dec_sockets_used(fds, nfds);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2416        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2417      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2418  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2419      if (waitres == SYS_ARCH_TIMEOUT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2420        /* Timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2421        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_poll: timeout expired\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2422        goto return_success;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2423      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2424    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2425  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2426    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_poll: nready=%d\n", nready));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2427  return_success:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2428    lwip_poll_dec_sockets_used(fds, nfds);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2429    set_errno(0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2430    return nready;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2431  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2432  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2433  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2434   * Check whether event_callback should wake up a thread waiting in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2435   * lwip_poll.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2436   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2437  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2438  lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2439  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2440    nfds_t fdi;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2441    for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2442      const struct pollfd *pollfd = &scb->poll_fds[fdi];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2443      if (pollfd->fd == fd) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2444        /* Do not update pollfd->revents right here;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2445           that would be a data race because lwip_pollscan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2446           accesses revents without protecting. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2447        if (has_recvevent && (pollfd->events & POLLIN) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2448          return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2449        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2450        if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2451          return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2452        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2453        if (has_errevent) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2454          /* POLLERR is output only. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2455          return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2456        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2457      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2458    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2459    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2460  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2461  #endif /* LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2462  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2463  #if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2464  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2465   * Callback registered in the netconn layer for each socket-netconn.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2466   * Processes recvevent (data available) and wakes up tasks waiting for select.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2467   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2468   * @note for LWIP_TCPIP_CORE_LOCKING any caller of this function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2469   * must have the core lock held when signaling the following events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2470   * as they might cause select_list_cb to be checked:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2471   *   NETCONN_EVT_RCVPLUS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2472   *   NETCONN_EVT_SENDPLUS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2473   *   NETCONN_EVT_ERROR
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2474   * This requirement will be asserted in select_check_waiters()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2475   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2476  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2477  event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2478  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2479    int s, check_waiters;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2480    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2481    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2482  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2483    LWIP_UNUSED_ARG(len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2484  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2485    /* Get socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2486    if (conn) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2487      s = conn->socket;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2488      if (s < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2489        /* Data comes in right away after an accept, even though
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2490         * the server task might not have created a new socket yet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2491         * Just count down (or up) if that's the case and we
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2492         * will use the data later. Note that only receive events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2493         * can happen before the new socket is set up. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2494        SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2495        if (conn->socket < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2496          if (evt == NETCONN_EVT_RCVPLUS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2497            /* conn->socket is -1 on initialization
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2498               lwip_accept adjusts sock->recvevent if conn->socket < -1 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2499            conn->socket--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2500          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2501          SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2502          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2503        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2504        s = conn->socket;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2505        SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2506      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2507  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2508      sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2509      if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2510        return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2511      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2512    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2513      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2514    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2515  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2516    check_waiters = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2517    SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2518    /* Set event as required */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2519    switch (evt) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2520      case NETCONN_EVT_RCVPLUS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2521        sock->rcvevent++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2522        if (sock->rcvevent > 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2523          check_waiters = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2524        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2525        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2526      case NETCONN_EVT_RCVMINUS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2527        sock->rcvevent--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2528        check_waiters = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2529        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2530      case NETCONN_EVT_SENDPLUS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2531        if (sock->sendevent) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2532          check_waiters = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2533        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2534        sock->sendevent = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2535        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2536      case NETCONN_EVT_SENDMINUS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2537        sock->sendevent = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2538        check_waiters = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2539        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2540      case NETCONN_EVT_ERROR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2541        sock->errevent = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2542        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2543      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2544        LWIP_ASSERT("unknown event", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2545        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2546    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2547  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2548    if (sock->select_waiting && check_waiters) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2549      /* Save which events are active */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2550      int has_recvevent, has_sendevent, has_errevent;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2551      has_recvevent = sock->rcvevent > 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2552      has_sendevent = sock->sendevent != 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2553      has_errevent = sock->errevent != 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2554      SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2555      /* Check any select calls waiting on this socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2556      select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2557    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2558      SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2559    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2560    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2561  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2562  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2563  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2564   * Check if any select waiters are waiting on this socket and its events
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2565   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2566   * @note on synchronization of select_cb_list:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2567   * LWIP_TCPIP_CORE_LOCKING: the select_cb_list must only be accessed while holding
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2568   * the core lock. We do a single pass through the list and signal any waiters.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2569   * Core lock should already be held when calling here!!!!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2570  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2571   * !LWIP_TCPIP_CORE_LOCKING: we use SYS_ARCH_PROTECT but unlock on each iteration
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2572   * of the loop, thus creating a possibility where a thread could modify the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2573   * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2574   * detect this change and restart the list walk. The list is expected to be small
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2575   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2576  static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2577  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2578    struct lwip_select_cb *scb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2579  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2580    int last_select_cb_ctr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2581    SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2582  #endif /* !LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2584    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2585  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2586  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2587    SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2588  again:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2589    /* remember the state of select_cb_list to detect changes */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2590    last_select_cb_ctr = select_cb_ctr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2591  #endif /* !LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2592    for (scb = select_cb_list; scb != NULL; scb = scb->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2593      if (scb->sem_signalled == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2594        /* semaphore not signalled yet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2595        int do_signal = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2596  #if LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2597        if (scb->poll_fds != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2598          do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2599        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2600  #endif /* LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2601  #if LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2602        else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2603  #endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2604  #if LWIP_SOCKET_SELECT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2605        {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2606          /* Test this select call for our socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2607          if (has_recvevent) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2608            if (scb->readset && FD_ISSET(s, scb->readset)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2609              do_signal = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2610            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2611          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2612          if (has_sendevent) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2613            if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2614              do_signal = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2615            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2616          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2617          if (has_errevent) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2618            if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2619              do_signal = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2620            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2621          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2622        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2623  #endif /* LWIP_SOCKET_SELECT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2624        if (do_signal) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2625          scb->sem_signalled = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2626          /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2627             the semaphore, as this might lead to the select thread taking itself off the list,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2628             invalidating the semaphore. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2629          sys_sem_signal(SELECT_SEM_PTR(scb->sem));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2630        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2631      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2632  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2633    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2634  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2635      /* unlock interrupts with each step */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2636      SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2637      /* this makes sure interrupt protection time is short */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2638      SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2639      if (last_select_cb_ctr != select_cb_ctr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2640        /* someone has changed select_cb_list, restart at the beginning */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2641        goto again;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2642      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2643      /* remember the state of select_cb_list to detect changes */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2644      last_select_cb_ctr = select_cb_ctr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2645    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2646    SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2647  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2648  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2649  #endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2650  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2651  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2652   * Close one end of a full-duplex connection.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2653   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2654  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2655  lwip_shutdown(int s, int how)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2656  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2657    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2658    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2659    u8_t shut_rx = 0, shut_tx = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2660  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2661    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2662  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2663    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2664    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2665      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2666    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2667  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2668    if (sock->conn != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2669      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2670        sock_set_errno(sock, EOPNOTSUPP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2671        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2672        return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2673      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2674    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2675      sock_set_errno(sock, ENOTCONN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2676      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2677      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2678    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2679  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2680    if (how == SHUT_RD) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2681      shut_rx = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2682    } else if (how == SHUT_WR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2683      shut_tx = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2684    } else if (how == SHUT_RDWR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2685      shut_rx = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2686      shut_tx = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2687    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2688      sock_set_errno(sock, EINVAL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2689      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2690      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2691    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2692    err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2693  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2694    sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2695    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2696    return (err == ERR_OK ? 0 : -1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2697  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2698  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2699  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2700  lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2701  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2702    struct lwip_sock *sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2703    union sockaddr_aligned saddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2704    ip_addr_t naddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2705    u16_t port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2706    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2707  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2708    sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2709    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2710      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2711    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2712  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2713    /* get the IP address and port */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2714    err = netconn_getaddr(sock->conn, &naddr, &port, local);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2715    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2716      sock_set_errno(sock, err_to_errno(err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2717      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2718      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2719    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2720  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2721  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2722    /* Dual-stack: Map IPv4 addresses to IPv4 mapped IPv6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2723    if (NETCONNTYPE_ISIPV6(netconn_type(sock->conn)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2724        IP_IS_V4_VAL(naddr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2725      ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2726      IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2727    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2728  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2729  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2730    IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2731  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2732    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2733    ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2734    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2735  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2736    if (*namelen > saddr.sa.sa_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2737      *namelen = saddr.sa.sa_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2738    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2739    MEMCPY(name, &saddr, *namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2740  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2741    sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2742    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2743    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2744  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2745  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2746  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2747  lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2748  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2749    return lwip_getaddrname(s, name, namelen, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2750  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2751  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2752  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2753  lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2754  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2755    return lwip_getaddrname(s, name, namelen, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2756  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2757  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2758  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2759  lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2760  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2761    int err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2762    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2763  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2764    err_t cberr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2765    LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2766  #endif /* !LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2767  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2768    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2769      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2770    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2771  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2772    if ((NULL == optval) || (NULL == optlen)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2773      sock_set_errno(sock, EFAULT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2774      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2775      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2776    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2777  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2778  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2779    /* core-locking can just call the -impl function */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2780    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2781    err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2782    UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2783  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2784  #else /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2785  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2786  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2787    /* MPU_COMPATIBLE copies the optval data, so check for max size here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2788    if (*optlen > LWIP_SETGETSOCKOPT_MAXOPTLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2789      sock_set_errno(sock, ENOBUFS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2790      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2791      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2792    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2793  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2794  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2795    LWIP_SETGETSOCKOPT_DATA_VAR_ALLOC(data, sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2796    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).s = s;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2797    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).level = level;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2798    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optname = optname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2799    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen = *optlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2800  #if !LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2801    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval.p = optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2802  #endif /* !LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2803    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2804  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2805    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2806  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2807    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2808  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2809    cberr = tcpip_callback(lwip_getsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2810    if (cberr != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2811      LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2812      sock_set_errno(sock, err_to_errno(cberr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2813      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2814      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2815    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2816    sys_arch_sem_wait((sys_sem_t *)(LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem), 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2817  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2818    /* write back optlen and optval */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2819    *optlen = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2820  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2821    MEMCPY(optval, LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2822           LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2823  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2824  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2825    /* maybe lwip_getsockopt_internal has changed err */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2826    err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2827    LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2828  #endif /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2829  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2830    sock_set_errno(sock, err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2831    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2832    return err ? -1 : 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2833  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2834  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2835  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2836  /** lwip_getsockopt_callback: only used without CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2837   * to get into the tcpip_thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2838   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2839  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2840  lwip_getsockopt_callback(void *arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2841  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2842    struct lwip_setgetsockopt_data *data;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2843    LWIP_ASSERT("arg != NULL", arg != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2844    data = (struct lwip_setgetsockopt_data *)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2845  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2846    data->err = lwip_getsockopt_impl(data->s, data->level, data->optname,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2847  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2848                                     data->optval,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2849  #else /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2850                                     data->optval.p,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2851  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2852                                     &data->optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2853  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2854    sys_sem_signal((sys_sem_t *)(data->completed_sem));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2855  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2856  #endif  /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2857  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2858  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2859  lwip_sockopt_to_ipopt(int optname)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2860  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2861    /* Map SO_* values to our internal SOF_* values
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2862     * We should not rely on #defines in socket.h
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2863     * being in sync with ip.h.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2864     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2865    switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2866    case SO_BROADCAST:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2867      return SOF_BROADCAST;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2868    case SO_KEEPALIVE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2869      return SOF_KEEPALIVE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2870    case SO_REUSEADDR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2871      return SOF_REUSEADDR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2872    default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2873      LWIP_ASSERT("Unknown socket option", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2874      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2875    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2876  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2877  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2878  /** lwip_getsockopt_impl: the actual implementation of getsockopt:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2879   * same argument as lwip_getsockopt, either called directly or through callback
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2880   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2881  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2882  lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2883  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2884    int err = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2885    struct lwip_sock *sock = tryget_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2886    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2887      return EBADF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2888    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2889  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2890  #ifdef LWIP_HOOK_SOCKETS_GETSOCKOPT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2891    if (LWIP_HOOK_SOCKETS_GETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2892      return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2893    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2894  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2895  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2896    switch (level) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2897  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2898      /* Level: SOL_SOCKET */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2899      case SOL_SOCKET:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2900        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2901  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2902  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2903          case SO_ACCEPTCONN:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2904            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2905            if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2906              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2907              return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2908            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2909            if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2910              *(int *)optval = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2911            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2912              *(int *)optval = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2913            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2914            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2915  #endif /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2916  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2917          /* The option flags */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2918          case SO_BROADCAST:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2919          case SO_KEEPALIVE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2920  #if SO_REUSE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2921          case SO_REUSEADDR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2922  #endif /* SO_REUSE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2923            if ((optname == SO_BROADCAST) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2924                (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2925              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2926              return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2927            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2928  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2929            optname = lwip_sockopt_to_ipopt(optname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2930  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2931            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2932            *(int *)optval = ip_get_option(sock->conn->pcb.ip, optname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2933            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2934                                        s, optname, (*(int *)optval ? "on" : "off")));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2935            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2936  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2937          case SO_TYPE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2938            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2939            switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2940              case NETCONN_RAW:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2941                *(int *)optval = SOCK_RAW;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2942                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2943              case NETCONN_TCP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2944                *(int *)optval = SOCK_STREAM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2945                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2946              case NETCONN_UDP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2947                *(int *)optval = SOCK_DGRAM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2948                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2949              default: /* unrecognized socket type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2950                *(int *)optval = netconn_type(sock->conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2951                LWIP_DEBUGF(SOCKETS_DEBUG,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2952                            ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2953                             s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2954            }  /* switch (netconn_type(sock->conn)) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2955            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2956                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2957            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2958  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2959          case SO_ERROR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2960            LWIP_SOCKOPT_CHECK_OPTLEN(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2961            *(int *)optval = err_to_errno(netconn_err(sock->conn));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2962            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2963                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2964            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2965  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2966  #if LWIP_SO_SNDTIMEO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2967          case SO_SNDTIMEO:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2968            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2969            LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2970            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2971  #endif /* LWIP_SO_SNDTIMEO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2972  #if LWIP_SO_RCVTIMEO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2973          case SO_RCVTIMEO:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2974            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2975            LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2976            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2977  #endif /* LWIP_SO_RCVTIMEO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2978  #if LWIP_SO_RCVBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2979          case SO_RCVBUF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2980            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2981            *(int *)optval = netconn_get_recvbufsize(sock->conn);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2982            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2983  #endif /* LWIP_SO_RCVBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2984  #if LWIP_SO_LINGER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2985          case SO_LINGER: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2986            s16_t conn_linger;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2987            struct linger *linger = (struct linger *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2988            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, struct linger);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2989            conn_linger = sock->conn->linger;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2990            if (conn_linger >= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2991              linger->l_onoff = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2992              linger->l_linger = (int)conn_linger;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2993            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2994              linger->l_onoff = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2995              linger->l_linger = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2996            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2997          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2998          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  2999  #endif /* LWIP_SO_LINGER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3000  #if LWIP_UDP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3001          case SO_NO_CHECK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3002            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3003  #if LWIP_UDPLITE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3004            if (udp_is_flag_set(sock->conn->pcb.udp, UDP_FLAGS_UDPLITE)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3005              /* this flag is only available for UDP, not for UDP lite */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3006              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3007              return EAFNOSUPPORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3008            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3009  #endif /* LWIP_UDPLITE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3010            *(int *)optval = udp_is_flag_set(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM) ? 1 : 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3011            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3012  #endif /* LWIP_UDP*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3013          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3014            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3015                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3016            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3017            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3018        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3019        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3020  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3021      /* Level: IPPROTO_IP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3022      case IPPROTO_IP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3023        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3024          case IP_TTL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3025            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3026            *(int *)optval = sock->conn->pcb.ip->ttl;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3027            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3028                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3029            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3030          case IP_TOS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3031            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3032            *(int *)optval = sock->conn->pcb.ip->tos;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3033            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3034                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3035            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3036  #if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS && LWIP_UDP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3037          case IP_MULTICAST_TTL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3038            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3039            if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3040              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3041              return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3042            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3043            *(u8_t *)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3044            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3045                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3046            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3047          case IP_MULTICAST_IF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3048            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3049            if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3050              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3051              return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3052            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3053            inet_addr_from_ip4addr((struct in_addr *)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3054            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3055                                        s, *(u32_t *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3056            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3057          case IP_MULTICAST_LOOP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3058            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3059            if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3060              *(u8_t *)optval = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3061            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3062              *(u8_t *)optval = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3063            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3064            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3065                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3066            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3067  #endif /* LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS && LWIP_UDP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3068          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3069            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3070                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3071            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3072            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3073        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3074        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3075  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3076  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3077      /* Level: IPPROTO_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3078      case IPPROTO_TCP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3079        /* Special case: all IPPROTO_TCP option take an int */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3080        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3081        if (sock->conn->pcb.tcp->state == LISTEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3082          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3083          return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3084        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3085        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3086          case TCP_NODELAY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3087            *(int *)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3088            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3089                                        s, (*(int *)optval) ? "on" : "off") );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3090            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3091          case TCP_KEEPALIVE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3092            *(int *)optval = (int)sock->conn->pcb.tcp->keep_idle;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3093            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3094                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3095            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3096  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3097  #if LWIP_TCP_KEEPALIVE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3098          case TCP_KEEPIDLE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3099            *(int *)optval = (int)(sock->conn->pcb.tcp->keep_idle / 1000);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3100            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3101                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3102            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3103          case TCP_KEEPINTVL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3104            *(int *)optval = (int)(sock->conn->pcb.tcp->keep_intvl / 1000);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3105            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3106                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3107            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3108          case TCP_KEEPCNT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3109            *(int *)optval = (int)sock->conn->pcb.tcp->keep_cnt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3110            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3111                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3112            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3113  #endif /* LWIP_TCP_KEEPALIVE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3114          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3115            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3116                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3117            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3118            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3119        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3120        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3121  #endif /* LWIP_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3122  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3123  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3124      /* Level: IPPROTO_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3125      case IPPROTO_IPV6:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3126        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3127          case IPV6_V6ONLY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3128            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3129            *(int *)optval = (netconn_get_ipv6only(sock->conn) ? 1 : 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3130            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IPV6, IPV6_V6ONLY) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3131                                        s, *(int *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3132            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3133          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3134            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IPV6, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3135                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3136            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3137            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3138        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3139        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3140  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3141  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3142  #if LWIP_UDP && LWIP_UDPLITE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3143      /* Level: IPPROTO_UDPLITE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3144      case IPPROTO_UDPLITE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3145        /* Special case: all IPPROTO_UDPLITE option take an int */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3146        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3147        /* If this is no UDP lite socket, ignore any options. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3148        if (!NETCONNTYPE_ISUDPLITE(netconn_type(sock->conn))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3149          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3150          return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3151        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3152        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3153          case UDPLITE_SEND_CSCOV:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3154            *(int *)optval = sock->conn->pcb.udp->chksum_len_tx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3155            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3156                                        s, (*(int *)optval)) );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3157            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3158          case UDPLITE_RECV_CSCOV:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3159            *(int *)optval = sock->conn->pcb.udp->chksum_len_rx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3160            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3161                                        s, (*(int *)optval)) );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3162            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3163          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3164            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3165                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3166            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3167            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3168        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3169        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3170  #endif /* LWIP_UDP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3171      /* Level: IPPROTO_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3172      case IPPROTO_RAW:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3173        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3174  #if LWIP_IPV6 && LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3175          case IPV6_CHECKSUM:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3176            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_RAW);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3177            if (sock->conn->pcb.raw->chksum_reqd == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3178              *(int *)optval = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3179            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3180              *(int *)optval = sock->conn->pcb.raw->chksum_offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3181            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3182            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, IPV6_CHECKSUM) = %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3183                                        s, (*(int *)optval)) );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3184            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3185  #endif /* LWIP_IPV6 && LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3186          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3187            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3188                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3189            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3190            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3191        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3192        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3193      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3194        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3195                                    s, level, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3196        err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3197        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3198    } /* switch (level) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3199  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3200    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3201    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3202  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3203  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3204  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3205  lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3206  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3207    int err = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3208    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3209  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3210    err_t cberr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3211    LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3212  #endif /* !LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3213  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3214    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3215      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3216    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3217  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3218    if (NULL == optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3219      sock_set_errno(sock, EFAULT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3220      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3221      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3222    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3223  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3224  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3225    /* core-locking can just call the -impl function */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3226    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3227    err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3228    UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3229  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3230  #else /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3231  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3232  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3233    /* MPU_COMPATIBLE copies the optval data, so check for max size here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3234    if (optlen > LWIP_SETGETSOCKOPT_MAXOPTLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3235      sock_set_errno(sock, ENOBUFS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3236      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3237      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3238    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3239  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3240  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3241    LWIP_SETGETSOCKOPT_DATA_VAR_ALLOC(data, sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3242    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).s = s;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3243    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).level = level;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3244    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optname = optname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3245    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optlen = optlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3246  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3247    MEMCPY(LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval, optval, optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3248  #else /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3249    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).optval.pc = (const void *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3250  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3251    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3252  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3253    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3254  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3255    LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem = &sock->conn->op_completed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3256  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3257    cberr = tcpip_callback(lwip_setsockopt_callback, &LWIP_SETGETSOCKOPT_DATA_VAR_REF(data));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3258    if (cberr != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3259      LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3260      sock_set_errno(sock, err_to_errno(cberr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3261      done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3262      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3263    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3264    sys_arch_sem_wait((sys_sem_t *)(LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).completed_sem), 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3265  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3266    /* maybe lwip_getsockopt_internal has changed err */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3267    err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3268    LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3269  #endif  /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3270  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3271    sock_set_errno(sock, err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3272    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3273    return err ? -1 : 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3274  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3275  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3276  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3277  /** lwip_setsockopt_callback: only used without CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3278   * to get into the tcpip_thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3279   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3280  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3281  lwip_setsockopt_callback(void *arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3282  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3283    struct lwip_setgetsockopt_data *data;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3284    LWIP_ASSERT("arg != NULL", arg != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3285    data = (struct lwip_setgetsockopt_data *)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3287    data->err = lwip_setsockopt_impl(data->s, data->level, data->optname,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3288  #if LWIP_MPU_COMPATIBLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3289                                     data->optval,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3290  #else /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3291                                     data->optval.pc,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3292  #endif /* LWIP_MPU_COMPATIBLE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3293                                     data->optlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3294  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3295    sys_sem_signal((sys_sem_t *)(data->completed_sem));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3296  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3297  #endif  /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3298  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3299  /** lwip_setsockopt_impl: the actual implementation of setsockopt:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3300   * same argument as lwip_setsockopt, either called directly or through callback
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3301   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3302  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3303  lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3304  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3305    int err = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3306    struct lwip_sock *sock = tryget_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3307    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3308      return EBADF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3309    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3310  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3311  #ifdef LWIP_HOOK_SOCKETS_SETSOCKOPT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3312    if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3313      return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3314    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3315  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3316  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3317    switch (level) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3318  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3319      /* Level: SOL_SOCKET */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3320      case SOL_SOCKET:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3321        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3322  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3323          /* SO_ACCEPTCONN is get-only */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3324  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3325          /* The option flags */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3326          case SO_BROADCAST:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3327          case SO_KEEPALIVE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3328  #if SO_REUSE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3329          case SO_REUSEADDR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3330  #endif /* SO_REUSE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3331            if ((optname == SO_BROADCAST) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3332                (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3333              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3334              return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3335            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3336  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3337            optname = lwip_sockopt_to_ipopt(optname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3338  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3339            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3340            if (*(const int *)optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3341              ip_set_option(sock->conn->pcb.ip, optname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3342            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3343              ip_reset_option(sock->conn->pcb.ip, optname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3344            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3345            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3346                                        s, optname, (*(const int *)optval ? "on" : "off")));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3347            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3348  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3349            /* SO_TYPE is get-only */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3350            /* SO_ERROR is get-only */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3351  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3352  #if LWIP_SO_SNDTIMEO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3353          case SO_SNDTIMEO: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3354            long ms_long;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3355            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3356            ms_long = LWIP_SO_SNDRCVTIMEO_GET_MS(optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3357            if (ms_long < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3358              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3359              return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3360            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3361            netconn_set_sendtimeout(sock->conn, ms_long);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3362            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3363          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3364  #endif /* LWIP_SO_SNDTIMEO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3365  #if LWIP_SO_RCVTIMEO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3366          case SO_RCVTIMEO: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3367            long ms_long;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3368            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3369            ms_long = LWIP_SO_SNDRCVTIMEO_GET_MS(optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3370            if (ms_long < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3371              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3372              return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3373            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3374            netconn_set_recvtimeout(sock->conn, (u32_t)ms_long);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3375            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3376          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3377  #endif /* LWIP_SO_RCVTIMEO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3378  #if LWIP_SO_RCVBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3379          case SO_RCVBUF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3380            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3381            netconn_set_recvbufsize(sock->conn, *(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3382            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3383  #endif /* LWIP_SO_RCVBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3384  #if LWIP_SO_LINGER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3385          case SO_LINGER: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3386            const struct linger *linger = (const struct linger *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3387            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct linger);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3388            if (linger->l_onoff) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3389              int lingersec = linger->l_linger;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3390              if (lingersec < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3391                done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3392                return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3393              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3394              if (lingersec > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3395                lingersec = 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3396              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3397              sock->conn->linger = (s16_t)lingersec;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3398            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3399              sock->conn->linger = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3400            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3401          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3402          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3403  #endif /* LWIP_SO_LINGER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3404  #if LWIP_UDP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3405          case SO_NO_CHECK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3406            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3407  #if LWIP_UDPLITE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3408            if (udp_is_flag_set(sock->conn->pcb.udp, UDP_FLAGS_UDPLITE)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3409              /* this flag is only available for UDP, not for UDP lite */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3410              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3411              return EAFNOSUPPORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3412            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3413  #endif /* LWIP_UDPLITE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3414            if (*(const int *)optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3415              udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3416            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3417              udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3418            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3419            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3420  #endif /* LWIP_UDP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3421          case SO_BINDTODEVICE: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3422            const struct ifreq *iface;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3423            struct netif *n = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3424  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3425            LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3426  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3427            iface = (const struct ifreq *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3428            if (iface->ifr_name[0] != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3429              n = netif_find(iface->ifr_name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3430              if (n == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3431                done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3432                return ENODEV;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3433              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3434            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3435  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3436            switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3437  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3438              case NETCONN_TCP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3439                tcp_bind_netif(sock->conn->pcb.tcp, n);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3440                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3441  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3442  #if LWIP_UDP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3443              case NETCONN_UDP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3444                udp_bind_netif(sock->conn->pcb.udp, n);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3445                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3446  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3447  #if LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3448              case NETCONN_RAW:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3449                raw_bind_netif(sock->conn->pcb.raw, n);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3450                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3451  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3452              default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3453                LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3454                break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3455            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3456          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3457          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3458          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3459            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3460                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3461            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3462            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3463        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3464        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3465  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3466      /* Level: IPPROTO_IP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3467      case IPPROTO_IP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3468        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3469          case IP_TTL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3470            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3471            sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3472            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3473                                        s, sock->conn->pcb.ip->ttl));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3474            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3475          case IP_TOS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3476            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3477            sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3478            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3479                                        s, sock->conn->pcb.ip->tos));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3480            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3481  #if LWIP_NETBUF_RECVINFO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3482          case IP_PKTINFO:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3483            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3484            if (*(const int *)optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3485              sock->conn->flags |= NETCONN_FLAG_PKTINFO;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3486            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3487              sock->conn->flags &= ~NETCONN_FLAG_PKTINFO;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3488            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3489            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3490  #endif /* LWIP_NETBUF_RECVINFO */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3491  #if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS && LWIP_UDP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3492          case IP_MULTICAST_TTL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3493            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3494            udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t *)optval));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3495            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3496          case IP_MULTICAST_IF: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3497            ip4_addr_t if_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3498            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3499            inet_addr_to_ip4addr(&if_addr, (const struct in_addr *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3500            udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3501          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3502          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3503          case IP_MULTICAST_LOOP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3504            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3505            if (*(const u8_t *)optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3506              udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3507            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3508              udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_MULTICAST_LOOP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3509            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3510            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3511  #endif /* LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS && LWIP_UDP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3512  #if LWIP_IGMP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3513          case IP_ADD_MEMBERSHIP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3514          case IP_DROP_MEMBERSHIP: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3515            /* If this is a TCP or a RAW socket, ignore these options. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3516            err_t igmp_err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3517            const struct ip_mreq *imr = (const struct ip_mreq *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3518            ip4_addr_t if_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3519            ip4_addr_t multi_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3520            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3521            inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3522            inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3523            if (optname == IP_ADD_MEMBERSHIP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3524              if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3525                /* cannot track membership (out of memory) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3526                err = ENOMEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3527                igmp_err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3528              } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3529                igmp_err = igmp_joingroup(&if_addr, &multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3530              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3531            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3532              igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3533              lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3534            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3535            if (igmp_err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3536              err = EADDRNOTAVAIL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3537            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3538          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3539          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3540  #endif /* LWIP_IGMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3541          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3542            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3543                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3544            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3545            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3546        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3547        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3548  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3549  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3550      /* Level: IPPROTO_TCP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3551      case IPPROTO_TCP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3552        /* Special case: all IPPROTO_TCP option take an int */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3553        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3554        if (sock->conn->pcb.tcp->state == LISTEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3555          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3556          return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3557        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3558        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3559          case TCP_NODELAY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3560            if (*(const int *)optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3561              tcp_nagle_disable(sock->conn->pcb.tcp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3562            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3563              tcp_nagle_enable(sock->conn->pcb.tcp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3564            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3565            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3566                                        s, (*(const int *)optval) ? "on" : "off") );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3567            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3568          case TCP_KEEPALIVE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3569            sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3570            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3571                                        s, sock->conn->pcb.tcp->keep_idle));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3572            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3573  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3574  #if LWIP_TCP_KEEPALIVE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3575          case TCP_KEEPIDLE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3576            sock->conn->pcb.tcp->keep_idle = 1000 * (u32_t)(*(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3577            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3578                                        s, sock->conn->pcb.tcp->keep_idle));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3579            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3580          case TCP_KEEPINTVL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3581            sock->conn->pcb.tcp->keep_intvl = 1000 * (u32_t)(*(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3582            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3583                                        s, sock->conn->pcb.tcp->keep_intvl));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3584            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3585          case TCP_KEEPCNT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3586            sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int *)optval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3587            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3588                                        s, sock->conn->pcb.tcp->keep_cnt));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3589            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3590  #endif /* LWIP_TCP_KEEPALIVE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3591          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3592            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3593                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3594            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3595            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3596        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3597        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3598  #endif /* LWIP_TCP*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3599  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3600  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3601      /* Level: IPPROTO_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3602      case IPPROTO_IPV6:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3603        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3604          case IPV6_V6ONLY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3605            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3606            if (*(const int *)optval) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3607              netconn_set_ipv6only(sock->conn, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3608            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3609              netconn_set_ipv6only(sock->conn, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3610            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3611            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IPV6, IPV6_V6ONLY, ..) -> %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3612                                        s, (netconn_get_ipv6only(sock->conn) ? 1 : 0)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3613            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3614  #if LWIP_IPV6_MLD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3615          case IPV6_JOIN_GROUP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3616          case IPV6_LEAVE_GROUP: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3617            /* If this is a TCP or a RAW socket, ignore these options. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3618            err_t mld6_err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3619            struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3620            ip6_addr_t multi_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3621            const struct ipv6_mreq *imr = (const struct ipv6_mreq *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3622            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ipv6_mreq, NETCONN_UDP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3623            inet6_addr_to_ip6addr(&multi_addr, &imr->ipv6mr_multiaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3624            LWIP_ASSERT("Invalid netif index", imr->ipv6mr_interface <= 0xFFu);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3625            netif = netif_get_by_index((u8_t)imr->ipv6mr_interface);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3626            if (netif == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3627              err = EADDRNOTAVAIL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3628              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3629            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3630  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3631            if (optname == IPV6_JOIN_GROUP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3632              if (!lwip_socket_register_mld6_membership(s, imr->ipv6mr_interface, &multi_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3633                /* cannot track membership (out of memory) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3634                err = ENOMEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3635                mld6_err = ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3636              } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3637                mld6_err = mld6_joingroup_netif(netif, &multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3638              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3639            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3640              mld6_err = mld6_leavegroup_netif(netif, &multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3641              lwip_socket_unregister_mld6_membership(s, imr->ipv6mr_interface, &multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3642            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3643            if (mld6_err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3644              err = EADDRNOTAVAIL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3645            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3646          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3647          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3648  #endif /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3649          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3650            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IPV6, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3651                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3652            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3653            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3654        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3655        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3656  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3657  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3658  #if LWIP_UDP && LWIP_UDPLITE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3659      /* Level: IPPROTO_UDPLITE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3660      case IPPROTO_UDPLITE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3661        /* Special case: all IPPROTO_UDPLITE option take an int */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3662        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3663        /* If this is no UDP lite socket, ignore any options. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3664        if (!NETCONNTYPE_ISUDPLITE(netconn_type(sock->conn))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3665          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3666          return ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3667        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3668        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3669          case UDPLITE_SEND_CSCOV:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3670            if ((*(const int *)optval != 0) && ((*(const int *)optval < 8) || (*(const int *)optval > 0xffff))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3671              /* don't allow illegal values! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3672              sock->conn->pcb.udp->chksum_len_tx = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3673            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3674              sock->conn->pcb.udp->chksum_len_tx = (u16_t) * (const int *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3675            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3676            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3677                                        s, (*(const int *)optval)) );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3678            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3679          case UDPLITE_RECV_CSCOV:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3680            if ((*(const int *)optval != 0) && ((*(const int *)optval < 8) || (*(const int *)optval > 0xffff))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3681              /* don't allow illegal values! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3682              sock->conn->pcb.udp->chksum_len_rx = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3683            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3684              sock->conn->pcb.udp->chksum_len_rx = (u16_t) * (const int *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3685            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3686            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3687                                        s, (*(const int *)optval)) );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3688            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3689          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3690            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3691                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3692            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3693            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3694        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3695        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3696  #endif /* LWIP_UDP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3697      /* Level: IPPROTO_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3698      case IPPROTO_RAW:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3699        switch (optname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3700  #if LWIP_IPV6 && LWIP_RAW
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3701          case IPV6_CHECKSUM:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3702            /* It should not be possible to disable the checksum generation with ICMPv6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3703             * as per RFC 3542 chapter 3.1 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3704            if (sock->conn->pcb.raw->protocol == IPPROTO_ICMPV6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3705              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3706              return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3707            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3708  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3709            LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_RAW);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3710            if (*(const int *)optval < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3711              sock->conn->pcb.raw->chksum_reqd = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3712            } else if (*(const int *)optval & 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3713              /* Per RFC3542, odd offsets are not allowed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3714              done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3715              return EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3716            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3717              sock->conn->pcb.raw->chksum_reqd = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3718              sock->conn->pcb.raw->chksum_offset = (u16_t) * (const int *)optval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3719            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3720            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, IPV6_CHECKSUM, ..) -> %d\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3721                                        s, sock->conn->pcb.raw->chksum_reqd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3722            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3723  #endif /* LWIP_IPV6 && LWIP_RAW */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3724          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3725            LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3726                                        s, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3727            err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3728            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3729        }  /* switch (optname) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3730        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3731      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3732        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3733                                    s, level, optname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3734        err = ENOPROTOOPT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3735        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3736    }  /* switch (level) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3737  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3738    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3739    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3740  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3741  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3742  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3743  lwip_ioctl(int s, long cmd, void *argp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3744  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3745    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3746    u8_t val;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3747  #if LWIP_SO_RCVBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3748    int recv_avail;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3749  #endif /* LWIP_SO_RCVBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3750  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3751    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3752      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3753    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3754  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3755    switch (cmd) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3756  #if LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3757      case FIONREAD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3758        if (!argp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3759          sock_set_errno(sock, EINVAL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3760          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3761          return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3762        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3763  #if LWIP_FIONREAD_LINUXMODE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3764        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3765          struct netbuf *nb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3766          if (sock->lastdata.netbuf) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3767            nb = sock->lastdata.netbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3768            *((int *)argp) = nb->p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3769          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3770            struct netbuf *rxbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3771            err_t err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &rxbuf, NETCONN_DONTBLOCK);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3772            if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3773              *((int *)argp) = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3774            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3775              sock->lastdata.netbuf = rxbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3776              *((int *)argp) = rxbuf->p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3777            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3778          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3779          done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3780          return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3781        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3782  #endif /* LWIP_FIONREAD_LINUXMODE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3783  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3784  #if LWIP_SO_RCVBUF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3785        /* we come here if either LWIP_FIONREAD_LINUXMODE==0 or this is a TCP socket */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3786        SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3787        if (recv_avail < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3788          recv_avail = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3789        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3790  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3791        /* Check if there is data left from the last recv operation. /maq 041215 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3792        if (sock->lastdata.netbuf) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3793          if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3794            recv_avail += sock->lastdata.pbuf->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3795          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3796            recv_avail += sock->lastdata.netbuf->p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3797          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3798        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3799        *((int *)argp) = recv_avail;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3800  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3801        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %"U16_F"\n", s, argp, *((u16_t *)argp)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3802        sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3803        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3804        return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3805  #else /* LWIP_SO_RCVBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3806        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3807  #endif /* LWIP_SO_RCVBUF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3808  #endif /* LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3809  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3810      case (long)FIONBIO:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3811        val = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3812        if (argp && *(int *)argp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3813          val = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3814        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3815        netconn_set_nonblocking(sock->conn, val);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3816        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3817        sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3818        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3819        return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3820  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3821      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3822        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3823    } /* switch (cmd) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3824    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3825    sock_set_errno(sock, ENOSYS); /* not yet implemented */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3826    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3827    return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3828  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3829  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3830  /** A minimal implementation of fcntl.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3831   * Currently only the commands F_GETFL and F_SETFL are implemented.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3832   * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3833   * the flag O_NONBLOCK is implemented for F_SETFL.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3834   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3835  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3836  lwip_fcntl(int s, int cmd, int val)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3837  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3838    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3839    int ret = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3840    int op_mode = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3841  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3842    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3843      return -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3844    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3845  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3846    switch (cmd) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3847      case F_GETFL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3848        ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3849        sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3850  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3851        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3852  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3853          LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3854  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3855          SYS_ARCH_DECL_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3856          /* the proper thing to do here would be to get into the tcpip_thread,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3857             but locking should be OK as well since we only *read* some flags */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3858          SYS_ARCH_PROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3859  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3860  #if LWIP_TCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3861          if (sock->conn->pcb.tcp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3862            if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3863              op_mode |= O_RDONLY;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3864            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3865            if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3866              op_mode |= O_WRONLY;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3867            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3868          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3869  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3870  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3871          UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3872  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3873          SYS_ARCH_UNPROTECT(lev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3874  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3875        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3876          op_mode |= O_RDWR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3877        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3878  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3879        /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3880        ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3881  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3882        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3883      case F_SETFL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3884        /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3885        val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3886        if ((val & ~O_NONBLOCK) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3887          /* only O_NONBLOCK, all other bits are zero */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3888          netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3889          ret = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3890          sock_set_errno(sock, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3891        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3892          sock_set_errno(sock, ENOSYS); /* not yet implemented */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3893        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3894        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3895      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3896        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3897        sock_set_errno(sock, ENOSYS); /* not yet implemented */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3898        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3899    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3900    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3901    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3902  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3903  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3904  #if LWIP_COMPAT_SOCKETS == 2 && LWIP_POSIX_SOCKETS_IO_NAMES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3905  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3906  fcntl(int s, int cmd, ...)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3907  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3908    va_list ap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3909    int val;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3910  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3911    va_start(ap, cmd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3912    val = va_arg(ap, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3913    va_end(ap);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3914    return lwip_fcntl(s, cmd, val);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3915  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3916  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3917  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3918  const char *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3919  lwip_inet_ntop(int af, const void *src, char *dst, socklen_t size)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3920  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3921    const char *ret = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3922    int size_int = (int)size;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3923    if (size_int < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3924      set_errno(ENOSPC);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3925      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3926    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3927    switch (af) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3928  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3929      case AF_INET:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3930        ret = ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3931        if (ret == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3932          set_errno(ENOSPC);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3933        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3934        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3935  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3936  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3937      case AF_INET6:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3938        ret = ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3939        if (ret == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3940          set_errno(ENOSPC);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3941        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3942        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3943  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3944      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3945        set_errno(EAFNOSUPPORT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3946        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3947    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3948    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3949  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3950  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3951  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3952  lwip_inet_pton(int af, const char *src, void *dst)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3953  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3954    int err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3955    switch (af) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3956  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3957      case AF_INET:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3958        err = ip4addr_aton(src, (ip4_addr_t *)dst);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3959        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3960  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3961  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3962      case AF_INET6: {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3963        /* convert into temporary variable since ip6_addr_t might be larger
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3964           than in6_addr when scopes are enabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3965        ip6_addr_t addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3966        err = ip6addr_aton(src, &addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3967        if (err) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3968          memcpy(dst, &addr.addr, sizeof(addr.addr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3969        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3970        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3971      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3972  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3973      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3974        err = -1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3975        set_errno(EAFNOSUPPORT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3976        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3977    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3978    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3979  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3980  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3981  #if LWIP_IGMP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3982  /** Register a new IGMP membership. On socket close, the membership is dropped automatically.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3983   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3984   * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3985   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3986   * @return 1 on success, 0 on failure
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3987   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3988  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3989  lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3990  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3991    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3992    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3993  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3994    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3995      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3996    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3997  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3998    for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  3999      if (socket_ipv4_multicast_memberships[i].sock == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4000        socket_ipv4_multicast_memberships[i].sock = sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4001        ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4002        ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4003        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4004        return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4005      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4006    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4007    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4008    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4009  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4010  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4011  /** Unregister a previously registered membership. This prevents dropping the membership
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4012   * on socket close.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4013   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4014   * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4015   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4016  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4017  lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4018  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4019    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4020    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4021  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4022    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4023      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4024    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4025  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4026    for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4027      if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4028          ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4029          ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4030        socket_ipv4_multicast_memberships[i].sock = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4031        ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4032        ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4033        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4034      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4035    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4036    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4037  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4038  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4039  /** Drop all memberships of a socket that were not dropped explicitly via setsockopt.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4040   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4041   * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4042   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4043  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4044  lwip_socket_drop_registered_memberships(int s)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4045  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4046    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4047    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4048  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4049    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4050      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4051    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4052  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4053    for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4054      if (socket_ipv4_multicast_memberships[i].sock == sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4055        ip_addr_t multi_addr, if_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4056        ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4057        ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4058        socket_ipv4_multicast_memberships[i].sock = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4059        ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4060        ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4061  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4062        netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4063      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4064    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4065    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4066  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4067  #endif /* LWIP_IGMP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4068  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4069  #if LWIP_IPV6_MLD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4070  /** Register a new MLD6 membership. On socket close, the membership is dropped automatically.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4071   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4072   * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4073   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4074   * @return 1 on success, 0 on failure
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4075   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4076  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4077  lwip_socket_register_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4078  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4079    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4080    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4081  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4082    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4083      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4084    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4085  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4086    for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4087      if (socket_ipv6_multicast_memberships[i].sock == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4088        socket_ipv6_multicast_memberships[i].sock   = sock;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4089        socket_ipv6_multicast_memberships[i].if_idx = (u8_t)if_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4090        ip6_addr_copy(socket_ipv6_multicast_memberships[i].multi_addr, *multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4091        done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4092        return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4093      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4094    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4095    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4096    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4097  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4098  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4099  /** Unregister a previously registered MLD6 membership. This prevents dropping the membership
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4100   * on socket close.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4101   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4102   * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4103   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4104  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4105  lwip_socket_unregister_mld6_membership(int s, unsigned int if_idx, const ip6_addr_t *multi_addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4106  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4107    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4108    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4109  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4110    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4111      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4112    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4113  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4114    for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4115      if ((socket_ipv6_multicast_memberships[i].sock   == sock) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4116          (socket_ipv6_multicast_memberships[i].if_idx == if_idx) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4117          ip6_addr_cmp(&socket_ipv6_multicast_memberships[i].multi_addr, multi_addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4118        socket_ipv6_multicast_memberships[i].sock   = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4119        socket_ipv6_multicast_memberships[i].if_idx = NETIF_NO_INDEX;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4120        ip6_addr_set_zero(&socket_ipv6_multicast_memberships[i].multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4121        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4122      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4123    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4124    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4125  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4126  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4127  /** Drop all MLD6 memberships of a socket that were not dropped explicitly via setsockopt.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4128   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4129   * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4130   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4131  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4132  lwip_socket_drop_registered_mld6_memberships(int s)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4133  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4134    struct lwip_sock *sock = get_socket(s);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4135    int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4136  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4137    if (!sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4138      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4139    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4140  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4141    for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4142      if (socket_ipv6_multicast_memberships[i].sock == sock) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4143        ip_addr_t multi_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4144        u8_t if_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4145  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4146        ip_addr_copy_from_ip6(multi_addr, socket_ipv6_multicast_memberships[i].multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4147        if_idx = socket_ipv6_multicast_memberships[i].if_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4148  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4149        socket_ipv6_multicast_memberships[i].sock   = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4150        socket_ipv6_multicast_memberships[i].if_idx = NETIF_NO_INDEX;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4151        ip6_addr_set_zero(&socket_ipv6_multicast_memberships[i].multi_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4152  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4153        netconn_join_leave_group_netif(sock->conn, &multi_addr, if_idx, NETCONN_LEAVE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4154      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4155    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4156    done_socket(sock);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4157  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4158  #endif /* LWIP_IPV6_MLD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4159  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\sockets.c	  4160  #endif /* LWIP_SOCKET */

	; Module end
