	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc30476a --dep-file=Mcal\\Tricore\\Uart\\ssc\\src\\.Uart.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=Mcal\\Tricore\\Uart\\ssc\\src\\Uart.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Mcal\\Tricore\\Uart\\ssc\\src\\Uart.src ..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c"
	.compiler_name		"ctc"
	;source	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c'

	
$TC162
	
	.sdecl	'.text.Uart_Init.Code.Cpu0',code,cluster('Uart_Init')
	.sect	'.text.Uart_Init.Code.Cpu0'
	.align	2
	
	.global	Uart_Init

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     1  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     2  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     3  ** Copyright (C) Infineon Technologies (2023)                                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     4  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     5  ** All rights reserved.                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     6  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    10  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    11  ********************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    12  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    13  **  FILENAME     : Uart.c                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    14  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    15  **  VERSION      : 34.0.0                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    16  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    17  **  DATE         : 2023-05-24                                                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    18  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    19  **  VARIANT      : Variant PB                                                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    20  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    21  **  PLATFORM     : Infineon AURIX2G                                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    22  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    23  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    24  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    25  **  VENDOR       : Infineon Technologies                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    26  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    27  **  DESCRIPTION  : Uart driver source file.                                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    28  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    29  **  SPECIFICATION(S):Specification of Uart driver, AUTOSAR Release4.2.2&4.4.0 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    30  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    31  **  MAY BE CHANGED BY USER : no                                               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    32  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    33  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    34  /* [cover parentID={667124EB-C6C2-4ddd-B061-16464CBD86D6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    35  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    36  /* [cover parentID={2EAF6692-0C6B-47c3-9241-0E6FA442E362}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    37  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    38  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    39  **                      Includes                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    40  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    41  /* Inclusion of SFR file */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    42  #include "IfxAsclin_reg.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    43  #include "IfxAsclin_bf.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    44  /* Inclusion of mcal specific header files */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    45  #include "McalLib.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    46  /* UART driver header file */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    47  #include "Uart.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    48  /* Conditional inclusion for operating system header */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    49  #if(UART_INIT_DEINIT_API_MODE != UART_SUPERVISOR_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    50  #include "McalLib_OsStub.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    51  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    52  /* Conditional inclusion of developement error tracer file */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    53  #if (UART_DEV_ERROR_DETECT == STD_ON) 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    54  #include "Det.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    55  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    56  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    57  /* Include Mcal_Wrapper header file if runtime error is enabled */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    58  #if (UART_RUNTIME_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    59  #include"Mcal_Wrapper.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    60  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    61  /* Conditional inclusion of safety error header */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    62  /* [cover parentID= {16225CBD-29E1-4c54-91DA-FD91D2B6691B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    63  Safety properties
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    64  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    65  #if(UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    66  #include "Mcal_SafetyError.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    67  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    68  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    69  /* Scheduled functions header file */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    70  #include "SchM_Uart.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    71  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    72  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    73  **                      Imported Compiler Switch Check                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    74  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    75  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    76  /* [cover parentID={556980E1-0A03-42d9-906D-3CCABEADDC0C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    77  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    78  /* Version checks */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    79  #ifndef UART_SW_MAJOR_VERSION
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    80  #error "UART_SW_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    81  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    82  /* [cover parentID={F5CF0050-FA3F-4e14-8C3E-FD0E8CB08831}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    83       [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    84  #ifndef UART_SW_MINOR_VERSION
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    85  #error "UART_SW_MINOR_VERSION is not defined. "
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    86  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    87  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    88  #ifndef UART_SW_PATCH_VERSION
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    89  #error "UART_SW_PATCH_VERSION is not defined."
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    90  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    91  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    92  #if (UART_SW_MAJOR_VERSION != 20U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    93  #error "UART_SW_MAJOR_VERSION does not match. "
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    94  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    95  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    96  #if (UART_SW_MINOR_VERSION != 25U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    97  #error "UART_SW_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    98  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	    99  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   100  #if (UART_SW_PATCH_VERSION != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   101  #error "UART_SW_PATCH_VERSION does not match."
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   102  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   103  /* [cover parentID={FE57CB4E-B40A-4f42-B80F-09F3D2A2D55F}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   104  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   105  /* Version check for DET module */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   106  #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   107  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   108  #ifndef DET_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   109  #error "DET_AR_RELEASE_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   110  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   111  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   112  /* [cover parentID={F5CF0050-FA3F-4e14-8C3E-FD0E8CB08831}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   113       [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   114  #if ( DET_AR_RELEASE_MAJOR_VERSION != MCAL_AR_RELEASE_MAJOR_VERSION )
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   115  #error "DET_AR_RELEASE_MAJOR_VERSION does not match. "
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   116  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   117  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   118  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   119  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   120  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   121  **                      Private Type Definitions                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   122  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   123  /* [cover parentID={F01CBF38-51EF-4745-9313-7073F7E593E8}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   124  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   125  /* UART channel transmit state. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   126  typedef enum
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   127  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   128    /* UART channel in idle state (No transmit in progress) */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   129    UART_TX_IDLE,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   130    /* UART channel transmit preparation in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   131    UART_TX_PREP_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   132    /* UART channel transmit in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   133    UART_TX_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   134    /* UART channel TXFIFO copy in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   135    UART_TX_FIFO_COPY_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   136    /* UART channel transmit abort in progress.*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   137    UART_TX_ABORT_IN_PROGRESS
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   138  } Uart_TxStateType;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   139  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   140  /* [cover parentID={58619D4B-998E-49e0-9AA2-B609BE252FDA}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   141  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   142  /* UART channel receive state. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   143  typedef enum
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   144  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   145    /* UART Channel in idle state (No receive operation in progress) */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   146    UART_RX_IDLE,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   147    /* UART channel receive preparation in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   148    UART_RX_PREP_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   149    /* UART channel receive in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   150    UART_RX_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   151    /* UART channel RXFIFO copy in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   152    UART_RX_FIFO_COPY_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   153    /* UART channel receive abort in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   154    UART_RX_ABORT_IN_PROGRESS,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   155    /* UART channel stopstreaming in progress. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   156    UART_RX_STOP_STREAMING_IN_PROGRESS
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   157  } Uart_RxStateType;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   158  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   159  /* [cover parentID={D919E757-F884-4fba-A272-6119F74207CC}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   160  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   161  /* Structure contains all required runtime information for transmit and receive
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   162     operation.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   163  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   164  typedef struct
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   165  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   166    /* Receive buffer pointer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   167    Uart_MemType *RxBuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   168    /* Transmit buffer pointer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   169    Uart_MemType *TxBuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   170    /* Channel Transmit state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   171    Uart_TxStateType ChanTxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   172    /* Channel receive state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   173    Uart_RxStateType ChanRxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   174    /* Number of bytes pending to transmit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   175    Uart_SizeType TxDataLeft;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   176    /* Number of bytes pending to receive */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   177    Uart_SizeType RxDataLeft;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   178    #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   179    /* Application buffer size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   180    Uart_SizeType RxBufSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   181    /* Channel receive mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   182    uint8 ChanRxMode;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   183    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   184    /* Number of bytes transmited */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   185    Uart_SizeType TotalDataTxd;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   186    /* Number of bytes received */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   187    Uart_SizeType TotalDataRxd;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   188    /* Interrupt level set for RXFIFO  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   189    uint8 RxIntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   190    /* Receive notification triggered */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   191    uint8 RxNotfn;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   192  } Uart_ChannelInfoType;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   193  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   194  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   195  **                      Private Macro Definitions                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   196  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   197  #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   198  /* Uart Driver not initialized */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   199  #define UART_UNINITIALISED                0x0U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   200  /* Uart Driver is initialized */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   201  #define UART_INITIALISED                  0x01U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   202  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   203  /* UART FIFO Buffer Size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   204  #define UART_BUFFER_SIZE                  (16U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   205  /* Mask for DISS bit mask */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   206  #define UART_CLC_DISS_MASK                0x00000002U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   207  /* Mask for receive parity error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   208  #define UART_FLAGS_PE_MASK                0x00010000U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   209  /* Mask for receive frame error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   210  #define UART_FLAGS_FE_MASK                0x00040000U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   211  /* DISS bit position */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   212  #define UART_CLC_DISS_BITPOS              1U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   213  /* Mask to check receive error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   214  #define UART_FLAGS_READ_ERROR             0x04050000U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   215  /* No Clock  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   216  #define UART_CSRREG_CLKSEL_NOCLK          (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   217  /* ASCLIN INIT mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   218  #define UART_FRAMECONREG_INIT_MODE        (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   219  #define UART_FRAMECONREG_ASCLIN_MODE      (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   220  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   221  /* Digital glitch filter disabled */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   222  #define UART_IOCRREG_DEPTH_VAL            (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   223  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   224  #define UART_BITCONREG_SM_VAL             (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   225  #if((UART_TX_MODE != UART_POLLING_MODE)||(UART_RX_MODE != UART_POLLING_MODE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   226  /* Invalid channel identifier */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   227  #define UART_INVALID_CHANNEL              (0xFFU)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   228  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   229  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   230  /* Inlet and outlet width for FIFO depending on the data length congfigured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   231  #define UART_TXFIFOCONREG_INW_2BYTE       (2U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   232  #define UART_RXFIFOCONREG_OUTW_2BYTE      (2U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   233  #define UART_STEPSIZE_2BYTE               (2U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   234  #define UART_TXFIFOCONREG_INW_1BYTE       (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   235  #define UART_RXFIFOCONREG_OUTW_1BYTE      (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   236  #define UART_STEPSIZE_1BYTE               (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   237  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   238  /* FIFO operating interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   239  #if((UART_TX_MODE != UART_POLLING_MODE)||(UART_RX_MODE != UART_POLLING_MODE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   240  #define UART_COMBINED_MOVE_MODE           (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   241  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   242  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   243  /* Define to set and clear bit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   244  #define UART_SET_BIT                      (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   245  #define UART_CLEAR_BIT                    (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   246  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   247  /* Define for 9 bit frame length configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   248  #define UART_NINEBIT_DATLEN               (9U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   249  /* Macro to check overflow of STM timer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   250  #define UART_STM_TICK_OVERFLOW            0xFFFFFFFFU
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   251  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   252  /* RXFIFO buffer interrupt level is set to store 16 bytes */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   253  #define UART_RX_FIFO_INT_LEVEL_MAX        (15U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   254  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   255  #if(UART_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   256  #define UART_FULLREG_MASK                 (0xFFFFFFFFU)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   257  /* Mask to check erase function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   258  #define UART_IOCR_CFG_MASK                (0x3FFFFFFFU)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   259  /* ASCLIN UART mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   260  #define UART_FRAMECONREG_ASC_MODE         (0x00010000U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   261  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   262  #define UART_TXFIFOCONREG_FIFO_MODE         (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   263  #define UART_RXFIFOCONREG_FIFO_MODE         (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   264  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   265  /* Bit position of baud rate numrator */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   266  #define UART_BRG_NUMERATOR_BITPOS           16U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   267  /* Bit position of oversampling */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   268  #define UART_BITCON_OVERSAMPLING_BITPOS     16U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   269  /* Bit position of CTS enable  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   270  #define UART_IOCR_CTSEN_BITPOS              29U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   271  /* Bit position of CTS polarity */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   272  #define UART_IOCR_RCPOL_BITPOS              25U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   273  #define UART_BITCON_SM_BITPOS               31U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   274  /* Bit position of sample point */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   275  #define UART_BITCON_SAMPLEPOINT_BITPOS      24U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   276  /* Bit position of parity enable */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   277  #define UART_FRAMECON_PEN_BITPOS            30U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   278  /* Bit position of parity config */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   279  #define UART_FRAMECON_ODD_BITPOS            31U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   280  /* Bit position of channel idle */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   281  #define UART_FRAMECON_IDLE_BITPOS           6U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   282  /* Bit position of stop bits configuration */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   283  #define UART_FRAMECON_STOP_BITPOS           9U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   284  /* Bit position of TXFIFO input word config */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   285  #define UART_TXFIFOCON_INW_BITPOS           6U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   286  /* Bit position of RXFIFO output word config */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   287  #define UART_RXFIFOCON_OUTW_BITPOS          6U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   288  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   289  /* Shift by 8 bit position */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   290  #define UART_SHIFT_EIGHT_BIT                8U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   291  /* Shift by 1 bit position */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   292  #define UART_SHIFT_ONE_BIT                  1U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   293  /* Register type to check status bit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   294  #define UART_REG_TYPE_CSR                   0U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   295  #define UART_REG_TYPE_KRST0                 1U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   296  /* Receive notification status */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   297  #define UART_RX_NOTFN_TRIGGERED             1U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   298  #define UART_RX_NOTFN_NOT_TRIGGERED         0U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   299  /* Set Mask for RXFIFO level, RXFIFO overflow, Parity error
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   300  and Farame error bit fields */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   301  #define UART_PEE_FEE_RFLE_RFOE_MASK  (((uint32)IFX_ASCLIN_FLAGSENABLE_PEE_MSK  \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   302      << IFX_ASCLIN_FLAGSENABLE_PEE_OFF)  | ((uint32)IFX_ASCLIN_FLAGSENABLE_FEE_MSK  \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   303      << IFX_ASCLIN_FLAGSENABLE_FEE_OFF)  | ((uint32)IFX_ASCLIN_FLAGSENABLE_RFLE_MSK \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   304      << IFX_ASCLIN_FLAGSENABLE_RFLE_OFF) | ((uint32)IFX_ASCLIN_FLAGSENABLE_RFOE_MSK\ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   305      << IFX_ASCLIN_FLAGSENABLE_RFOE_OFF))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   306  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   307  #if (UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   308  /* Receive operating modes */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   309  #define UART_RX_IN_READ_MODE                 1U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   310  #define UART_RX_IN_STREAMING_MODE            2U
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   311  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   312  /* RXFIFO interrupt levels */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   313  #define UART_RX_FIFO_INT_LEVEL_MIN          (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   314  #define UART_RX_FIFO_INT_LEVEL_ONE          (1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   315  #define UART_RECEIVED_DATA_SIZE_ZERO        (0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   316  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   317  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   318  **                         User Mode Macros                                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   319  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   320  #if(UART_INIT_DEINIT_API_MODE == UART_SUPERVISOR_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   321  /* Library APIs  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   322  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   323   *'UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG'
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   324   *defined for User mode support in code.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   325   *No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   326  #define UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   327      Mcal_WritePeripEndInitProtReg(RegAdd,Data)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   328  #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   329  /* Library APIs  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   330  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   331   *'UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG'
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   332   *defined for User mode support in code.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   333   *No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   334  #define UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   335      MCAL_LIB_WRITEPERIPENDINITPROTREG(RegAdd,Data)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   336  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   337  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   338  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   339  **                      Private Type Definitions                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   340  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   341  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   342  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   343  **                     Private Function Declaration                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   344  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   345  /*Memory Map of the UART Code*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   346  #define UART_START_SEC_CODE_ASIL_B_LOCAL
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   347  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   348  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   349  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   350     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   351  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   352   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   353   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   354  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   355  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   356  LOCAL_INLINE uint8 Uart_lHwInitClcReg(const uint8 HwUnit, const uint32 Value);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   357  LOCAL_INLINE void Uart_lTrasmitComplete(
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   358                           Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   359                           Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   360                           const Uart_ChannelConfigType *const ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   361  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   362  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   363  #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   364  LOCAL_INLINE void Uart_lDisableReadInterrupts(Ifx_ASCLIN *const HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   365  LOCAL_INLINE void Uart_lEnableReadInterrupts(Ifx_ASCLIN *const HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   366  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   367  #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   368  LOCAL_INLINE void Uart_lEnableWriteInterrupts(Ifx_ASCLIN *const HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   369  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   370  LOCAL_INLINE void Uart_lClearReadInterrupts(Ifx_ASCLIN *const HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   371  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   372  #if(UART_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   373  LOCAL_INLINE Std_ReturnType Uart_lCheckChannelInfo(const uint8 Channel);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   374  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   375  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   376  #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   377  static Uart_ReturnType Uart_lCheckSize(const uint8 Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   378                                         const Uart_SizeType Size,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   379                                         const uint8 ApiId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   380  static void Uart_lReportError(const uint8 ApiId, const uint8 ErrorId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   381  static Uart_ReturnType Uart_lCheckDetError(const uint8 Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   382                                             const Uart_SizeType Size,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   383                                             const uint8 ApiId,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   384                                             const Uart_MemType *const MemPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   385  static Uart_ReturnType Uart_lChannelCheck(const Uart_ChannelIdType Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   386                                            const uint8 ApiId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   387  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   388  static void Uart_lReceiveError(
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   389                            const Uart_ChannelConfigType *const ChannelConfigPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   390                            Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   391                            Uart_ChannelInfoType *const ChannelInfoPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   392  static void Uart_lRead(Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   393                            Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   394                            const Uart_ChannelConfigType *const ChannelConfigPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   395                            const uint8 ReceiveFillLevel);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   396  static void Uart_lHwInit(const uint8 HwUnit,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   397                            const Uart_ChannelConfigType *const ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   398  static void Uart_lWrite(Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   399                            Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   400                            const Uart_ChannelConfigType *const ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   401  static void Uart_lHwInitKernelReg(Ifx_ASCLIN *const HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   402  static void Uart_lStatusTimeout(const uint32 WaitTicks,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   403                                  const Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   404                                  const uint8 RegisterType,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   405                                  const uint8 ExpStatValue);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   406  #if (UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   407  static void Uart_lReceiveStreamingData(Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   408                           Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   409                           const Uart_ChannelConfigType *const ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   410  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   411  #define UART_STOP_SEC_CODE_ASIL_B_LOCAL
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   412  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   413  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   414  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   415     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   416  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   417   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   418   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   419  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   420  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   421  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   422  **                      Private Constant Definitions                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   423  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   424  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   425    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   426     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   427  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   428    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   429     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   430  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   431    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   432     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   433  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   434    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   435     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   436  #define UART_START_SEC_CONST_ASIL_B_LOCAL_32
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   437  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   438  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   439  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   440     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   441  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   442   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   443   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   444  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   445  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   446  /* [cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   447   * Variable Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   448   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   449  /* [cover parentID={E4047F9A-8865-4b2c-9D3C-385479854EAD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   450   * Const Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   451   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   452  /* [cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   453   * Const Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   454   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   455  static Ifx_ASCLIN *const Uart_HwModuleAddr[UART_MAX_HW_UNIT] = \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   456                                                          {UART_ASCLIN_REG_ADDR};
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   457  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   458    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   459     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   460  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   461    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   462     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   463  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   464    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   465     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   466  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   467    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   468     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   469  #define UART_STOP_SEC_CONST_ASIL_B_LOCAL_32
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   470  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   471  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   472  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   473     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   474  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   475   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   476   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   477  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   478  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   479  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   480  **                      Private Variable Definitions                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   481  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   482  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   483    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   484     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   485  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   486    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   487     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   488  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   489    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   490     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   491  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   492    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   493     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   494  #define UART_START_SEC_VAR_CLEARED_ASIL_B_LOCAL_8
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   495  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   496  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   497  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   498     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   499  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   500   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   501   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   502  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   503  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   504  #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   505  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   506  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   507  /* Uart driver status */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   508  static uint8 Uart_InitStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   509  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   510  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   511  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   512    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   513     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   514  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   515    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   516     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   517  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   518    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   519     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   520  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   521    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   522     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   523  #define UART_STOP_SEC_VAR_CLEARED_ASIL_B_LOCAL_8
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   524  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   525  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   526  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   527     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   528  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   529   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   530   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   531  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   532  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   533  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   534  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   535    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   536     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   537  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   538    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   539     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   540  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   541    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   542     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   543  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   544    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   545     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   546  #define UART_START_SEC_VAR_CLEARED_ASIL_B_LOCAL_32
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   547  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   548  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   549  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   550     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   551  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   552   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   553   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   554  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   555  /* [cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   556   * Variable Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   557   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   558  static const Uart_ConfigType *Uart_ConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   559  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   560  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   561    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   562     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   563  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   564    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   565     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   566  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   567    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   568     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   569  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   570    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   571     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   572  #define UART_STOP_SEC_VAR_CLEARED_ASIL_B_LOCAL_32
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   573  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   574  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   575  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   576     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   577  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   578   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   579   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   580  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   581  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   582  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   583  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   584    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   585     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   586  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   587    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   588     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   589  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   590    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   591     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   592  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   593    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   594     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   595  #define UART_START_SEC_VAR_CLEARED_ASIL_B_LOCAL_UNSPECIFIED
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   596  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   597  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   598  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   599  Uart_MemMap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   600  /* MISRA2012_RULE_20_1_JUSTIFICATION: Uart_MemMap.h header included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   601  as per Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   602  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   603  /* [cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   604   * Variable Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   605   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   606  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   607  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   608  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   609  /*
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   610    Variable hold runtime information of all configured Uart channel
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   611  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   612  static Uart_ChannelInfoType Uart_ChannelInfo[UART_NUM_OF_CHANNEL_CONFIGURED];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   613  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   614    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   615     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   616  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   617    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   618     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   619  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   620    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   621     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   622  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   623    in source code due to Autosar Naming constraints. Since compiler support
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   624     more than 32 characters, no side affects seen*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   625  #define UART_STOP_SEC_VAR_CLEARED_ASIL_B_LOCAL_UNSPECIFIED
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   626  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   627  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   628  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   629  Uart_MemMap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   630  /* MISRA2012_RULE_20_1_JUSTIFICATION: Uart_MemMap.h header included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   631  as per Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   632  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   633  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   634  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   635  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   636  **                      Global Function Definitions                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   637  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   638  #define UART_START_SEC_CODE_ASIL_B_LOCAL
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   639  /* [cover parentID={EA0715EE-3E3C-4aac-A42E-4B5CFC96CEED}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   640   * Code Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   641   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   642  /* [cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   643   * Code Section
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   644   * [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   645  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   646  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   647  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   648     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   649  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   650   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   651   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   652  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   653  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   654  #if(UART_RX_MODE != UART_INTERRUPT_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   655  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   656  ** Traceability     : [cover parentID={456967D9-1FBD-4f77-A4DD-9504ACA2C981}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   657  ** Syntax : void Uart_MainFunction_Read(void)                                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   658  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   659  ** Service ID      : 224                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   660  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   661  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   662  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   663  ** Reentrancy      : Non Reentrant.                                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   664  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   665  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   666  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   667  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   668  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   669  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   670  ** Description     : Schedule function to handle receives operation in        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   671  **                                                            polling mode.   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   672  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   673  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   674  void Uart_MainFunction_Read(void)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   675  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   676    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   677    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   678    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   679    uint8 ChannelNo;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   680    uint8 MaxChannel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   681    uint8 RecFillLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   682  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   683    /* [cover parentID={C4700399-EA88-4ab5-8207-0E644DEECC15}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   684    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   685    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   686    /* [cover parentID={3F85D301-6E6E-4005-BBBF-750BFF5A0478}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   687    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   688    /* Check uart driver is initialized  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   689    if (Uart_InitStatus != UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   690    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   691    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   692      MaxChannel = Uart_ConfigPtr->NoOfChannels;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   693      /* [cover parentID={B329C547-A528-4806-A7DD-34DC94401639}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   694      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   695      /* [cover parentID={E5AC9002-587B-4adb-AA8A-D2B3FE6F45A2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   696      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   697      for(ChannelNo = 0U; ChannelNo < MaxChannel; ChannelNo++)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   698      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   699        /* [cover parentID={C7EA5654-89C6-432a-B610-1E4769F25117}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   700        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   701        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[ChannelNo]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   702        ChannelInfoPtr = &Uart_ChannelInfo[ChannelNo];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   703        /* [cover parentID={805F8B64-6349-4ad9-B100-829DF0D4499B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   704          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   705        /* [cover parentID={4867DC0E-A15A-41df-9B43-F1E6832438A1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   706        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   707        /* Check read configure in polling mode and receive in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   708        if((ChannelConfigPtr->RxMode == UART_POLLING_MODE) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   709            (ChannelInfoPtr->ChanRxState == UART_RX_IN_PROGRESS))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   710        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   711          /* [cover parentID={478B9940-1E11-4491-9392-0DA847F27096}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   712          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   713          HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   714  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   715          ChannelInfoPtr->ChanRxState = UART_RX_FIFO_COPY_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   716          /* [cover parentID={D0D7B9CC-6AF3-41ef-9B17-3EDFF9E5CE25}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   717          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   718          /* Check receive error flag set */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   719          if((HwModulePtr->FLAGS.U & UART_FLAGS_READ_ERROR) != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   720          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   721            /* [cover parentID={933BB46F-C0FB-432a-83DC-86589D86B31D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   722            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   723            Uart_lReceiveError(ChannelConfigPtr, HwModulePtr, ChannelInfoPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   724          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   725          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   726          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   727            /* [cover parentID={8F57F81E-4D27-4bde-845B-D70D307ED1E4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   728            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   729            /* Extract received data filled level */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   730            RecFillLevel = HwModulePtr->RXFIFOCON.B.FILL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   731  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   732            /* [cover parentID={D9F69DD0-D2E3-4e4e-9A3B-79DF6170DD57}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   733            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   734            /* Check receive refill interrupt set */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   735            if(RecFillLevel > 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   736            {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   737              /* [cover parentID={EA15C5F0-1253-4425-901E-82AB43CA33DB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   738              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   739              #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   740              /* [cover parentID={33611D71-437C-4392-95AB-FD17B7C0DF11}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   741              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   742              /* Check channel read operation in streaming mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   743              if(ChannelInfoPtr->ChanRxMode == UART_RX_IN_STREAMING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   744              {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   745              /* [cover parentID={AB7A73EB-AA91-41da-B3BC-6EBA70A110C4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   746              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   747              /* Handle received data in streaming mode*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   748              Uart_lReceiveStreamingData(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   749              }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   750              else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   751              #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   752              {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   753              /* [cover parentID={990828D2-2BB2-4e71-BB34-E149852A8249}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   754              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   755              /* Handle received data in normal read mode*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   756              Uart_lRead(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   757                         RecFillLevel);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   758              }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   759            }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   760  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   761            /* [cover parentID={5B58E5F9-9227-4de2-9C55-77301895C56D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   762            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   763            if(ChannelInfoPtr->ChanRxState == UART_RX_FIFO_COPY_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   764            {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   765              ChannelInfoPtr->ChanRxState = UART_RX_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   766            }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   767          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   768        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   769      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   770    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   771  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   772  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   773  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   774  #if(UART_TX_MODE != UART_INTERRUPT_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   775  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   776  ** Traceability     : [cover parentID={5A0157F4-1D27-4361-A8F7-B90D1F20459B}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   777  ** Syntax : void Uart_MainFunction_Write(void)                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   778  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   779  ** Service ID      : 225                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   780  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   781  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   782  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   783  ** Reentrancy      : Non Reentrant.                                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   784  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   785  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   786  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   787  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   788  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   789  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   790  ** Description     : Schedule function to handle transmits operation in       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   791  **                                                             polling mode.  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   792  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   793  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   794  void Uart_MainFunction_Write(void)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   795  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   796    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   797    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   798    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   799    uint8 CfgCount;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   800    uint8 MaxChannel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   801    uint8 TxComplete;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   802    /* [cover parentID={2AF35BFD-01DF-4c12-8AB4-92C145D390DE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   803    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   804    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   805    /* [cover parentID={B54349C7-A51B-4312-B9BA-DB19E41EB078}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   806    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   807    /* Check uart driver is initialized  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   808    if (Uart_InitStatus != UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   809    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   810    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   811      MaxChannel = Uart_ConfigPtr->NoOfChannels;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   812      /* [cover parentID={A3DC8E7A-8DA8-4713-B38D-BB0A1EF59553}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   813      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   814      for(CfgCount = 0U; CfgCount < MaxChannel; CfgCount++)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   815      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   816        /* [cover parentID={F9CB853B-440B-485d-A1F3-69C854CA6FD4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   817        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   818        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[CfgCount]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   819        ChannelInfoPtr = &Uart_ChannelInfo[CfgCount];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   820        /* [cover parentID={E3F33A98-9F81-4940-BF7A-DC1B56218F15}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   821        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   822        /* Check channel configure in polling mode and write operation on going */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   823        if((ChannelConfigPtr->TxMode == UART_POLLING_MODE) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   824            (ChannelInfoPtr->ChanTxState == UART_TX_IN_PROGRESS))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   825        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   826          /* [cover parentID={5F48D152-FC6C-4685-963F-8E8977F94EF2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   827          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   828          /* Extract hardware SFR base address */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   829          HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   830          /* Set tx in copy state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   831          ChannelInfoPtr->ChanTxState = UART_TX_FIFO_COPY_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   832          /* [cover parentID={31919728-DA86-4bfc-A41F-8727EF985B65}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   833          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   834          /* Check last frame transmit in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   835          if(ChannelInfoPtr->TxDataLeft == 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   836          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   837            TxComplete = HwModulePtr->FLAGS.B.TC;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   838  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   839            /* [cover parentID={5CD5A0F0-EF14-4f9a-AE8A-1370C2C3C751}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   840            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   841            if(TxComplete != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   842            {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   843              /* handle transmit complete*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   844              Uart_lTrasmitComplete(HwModulePtr, ChannelInfoPtr, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   845                                    ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   846            }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   847          }/* [cover parentID={D04A3A5E-30B7-4469-8BF2-998892F5A673}][/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   848          else if(HwModulePtr->FLAGS.B.TFL == UART_SET_BIT)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   849          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   850            /* [cover parentID={15AEF285-93B9-4946-9F0C-4F463FF63F6D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   851            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   852            /* Prepare TXFIFO for next transmition */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   853            Uart_lWrite(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   854          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   855          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   856          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   857            /* Do nothing */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   858          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   859  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   860          /* [cover parentID={80393C1E-8FEF-4a9e-B5C4-D696A0D3F958}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   861          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   862          if(ChannelInfoPtr->ChanTxState == UART_TX_FIFO_COPY_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   863          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   864            ChannelInfoPtr->ChanTxState = UART_TX_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   865          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   866        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   867      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   868    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   869  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   870  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   871  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   872  #if(UART_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   873  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   874  ** Traceability     : [cover parentID={60A8D6EA-4861-4c51-8850-6E313881F7AB}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   875  ** Syntax           : Std_ReturnType Uart_InitCheck(const Uart_ConfigType     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   876                        *const ConfigPtr )                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   877  ** Service ID      : 216                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   878  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   879  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   880  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   881  ** Reentrancy      : Non reentrant                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   882  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   883  ** Parameters (in) : ConfigPtr - Pointer to Uart driver configuration set     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   884  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   885  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   886  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   887  ** Return value    : E_NOT_OK: DET is reported                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   888  **                   E_OK: DET is not reported                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   889  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   890  ** Description     : Uart Module Initialization check function.Initialization **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   891  **                   check function which verify variables and register's of  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   892  **                   Uart module and log error(in case missmatch).            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   893  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   894  Std_ReturnType Uart_InitCheck(const Uart_ConfigType *const ConfigPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   895  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   896    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   897    const Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   898    uint32 CompareFlag = UART_FULLREG_MASK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   899    uint32 SfrVal;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   900    uint32 CfgVal;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   901    Std_ReturnType RetVal = E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   902    uint8 Channel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   903    uint8 MaxChannel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   904  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   905    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   906    /* [cover parentID={C6DAA6BF-6BF6-4dfb-A5C3-F3753AB68DD0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   907    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   908    if(ConfigPtr == NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   909    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   910      /* [cover parentID={103812C9-24BA-4dfe-B00B-C8A092DF25BA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   911      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   912      Uart_lReportError(UART_SID_INITCHECK, UART_E_PARAM_POINTER);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   913  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   914      RetVal = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   915    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   916    /* [cover parentID={153DB37D-74EB-40a1-BF42-8AA76D88EEF3}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   917    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   918    /* Check uart driver is initialized  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   919    else if(Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   920    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   921      /* [cover parentID={C61E0BAA-E6F0-4311-A3B4-77C4D6FD5B63}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   922      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   923      Uart_lReportError(UART_SID_INITCHECK, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   924  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   925      RetVal = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   926    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   927    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   928    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   929    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   930      MaxChannel = ConfigPtr->NoOfChannels;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   931      /* [cover parentID={8305568D-9E4D-4278-9D25-682FA7E899DD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   932      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   933      /* Enable the ASCLIN hardware units for all configured channels */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   934      for(Channel = 0U; ((Channel < MaxChannel) && (RetVal == E_OK)); Channel++)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   935      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   936        ChannelConfigPtr = &(ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   937  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   938        /* Extract HW Module */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   939        HwModulePtr =  Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   940        /* Check all module variables */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   941        RetVal = Uart_lCheckChannelInfo(Channel);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   942  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   943        /* [cover parentID={4F033FA5-D1CC-4688-A2DB-0ABEE62DBAC9}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   944        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   945        /* Check is error set */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   946        if(RetVal != E_NOT_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   947        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   948          /* Check CLC */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   949          SfrVal = HwModulePtr->CLC.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   950          CfgVal = UART_SLEEP_MODE_SUPPORT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   951          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   952  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   953          /* Check FRAMECON  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   954          CfgVal = UART_FRAMECONREG_ASC_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   955  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   956          CfgVal |= ((uint32)ChannelConfigPtr->ParityEnable << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   957                     UART_FRAMECON_PEN_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   958  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   959          CfgVal |= ((uint32)ChannelConfigPtr->Parity << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   960                     UART_FRAMECON_ODD_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   961  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   962          CfgVal |= ((uint32)1U << UART_FRAMECON_IDLE_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   963  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   964          CfgVal |= ((uint32)ChannelConfigPtr->StopBits << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   965                     UART_FRAMECON_STOP_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   966  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   967          SfrVal = HwModulePtr->FRAMECON.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   968          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   969  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   970          /* Check BRG */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   971          SfrVal = HwModulePtr->BRG.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   972          CfgVal = ((uint32)ChannelConfigPtr->ChanBaudRateNumerator << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   973                    UART_BRG_NUMERATOR_BITPOS) | ChannelConfigPtr->\ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   974                   ChanBaudRateDenominator;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   975  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   976          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   977  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   978          /* Check IOCR */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   979          CfgVal = ((uint32)ChannelConfigPtr->CtsEnable << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   980                    UART_IOCR_CTSEN_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   981          CfgVal |= ((uint32)ChannelConfigPtr->CtsPolarity << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   982                     UART_IOCR_RCPOL_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   983          CfgVal |= ChannelConfigPtr->RxPin;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   984          SfrVal = HwModulePtr->IOCR.U & UART_IOCR_CFG_MASK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   985          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   986  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   987          /* Check TXFIFOCON  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   988          CfgVal = UART_TXFIFOCONREG_FIFO_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   989          if(ChannelConfigPtr->DataLength < UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   990          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   991            CfgVal |= ((uint32)UART_TXFIFOCONREG_INW_1BYTE << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   992                      UART_TXFIFOCON_INW_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   993          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   994          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   995          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   996            CfgVal |= ((uint32)UART_TXFIFOCONREG_INW_2BYTE << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   997                      UART_TXFIFOCON_INW_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   998          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	   999  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1000          SfrVal = HwModulePtr->TXFIFOCON.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1001          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1002  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1003          /* Check RXFIFOCON  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1004          CfgVal = UART_RXFIFOCONREG_FIFO_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1005          if(ChannelConfigPtr->DataLength < UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1006          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1007            CfgVal |= ((uint32)UART_RXFIFOCONREG_OUTW_1BYTE << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1008                      UART_RXFIFOCON_OUTW_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1009          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1010          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1011          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1012            CfgVal |= ((uint32)UART_RXFIFOCONREG_OUTW_2BYTE << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1013                      UART_RXFIFOCON_OUTW_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1014          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1015  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1016          SfrVal = HwModulePtr->RXFIFOCON.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1017          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1018  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1019          /* Check DATACON */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1020          CfgVal = ((uint32)ChannelConfigPtr->DataLength - 1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1021          SfrVal = HwModulePtr->DATCON.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1022          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1023  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1024          /* Check BITCON */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1025          CfgVal = ((uint32)ChannelConfigPtr->ChanOversampling << \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1026                    UART_BITCON_OVERSAMPLING_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1027          CfgVal |= ChannelConfigPtr->ChanBaudRatePrescalar;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1028          CfgVal |= ((uint32)UART_BITCONREG_SM_VAL << UART_BITCON_SM_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1029  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1030          CfgVal |= (uint32)((((uint32)(ChannelConfigPtr->ChanOversampling) \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1031                               >> 1U) + 1U) << UART_BITCON_SAMPLEPOINT_BITPOS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1032          SfrVal = HwModulePtr->BITCON.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1033          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1034  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1035          /* [cover parentID={EEF5CF88-EC8F-42e0-8BF4-63F769016B1F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1036          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1037          if(CompareFlag != UART_FULLREG_MASK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1038          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1039            RetVal = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1040          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1041        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1042      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1043    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1044  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1045    return RetVal;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1046  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1047  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1048  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1049  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1050  ** Traceability     : [cover parentID={362C5E5F-C093-4473-800F-9FEC2CA1A688}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1051  ** Syntax : void Uart_Init(const Uart_ConfigType *const ConfigPtr )           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1052  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1053  ** Service ID      : 215                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1054  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1055  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1056  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1057  ** Reentrancy      : Non reentrant                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1058  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1059  ** Parameters (in) : ConfigPtr - Pointer to Uart driver configuration set     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1060  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1061  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1062  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1063  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1064  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1065  ** Description     : Uart driver Initialization function. Function initialize **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1066  **                   all Uart configured channels.                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1067  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1068  void Uart_Init(const Uart_ConfigType *const ConfigPtr)
; Function Uart_Init
.L82:
Uart_Init:	.type	func
	mov.aa	a12,a4
.L385:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1069  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1070    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1071    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1072    uint8 ModuleNo;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1073    uint8 ChannelCounter;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1074    uint8 MaxChannel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1075    uint8 ClkDisableChk;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1076    uint8 ClkFailureCounter;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1077  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1078    /* [cover parentID={BBF41573-09AD-4ce7-9EB4-92CD7426485A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1079    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1080    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1081    Std_ReturnType DevErrorStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1082    DevErrorStatus  = E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1083  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1084    /* [cover parentID={A71729D1-5386-4b75-B52D-F2251E0DD855}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1085    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1086    /* Check for NULL pointer passed */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1087    if(ConfigPtr == NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1088    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1089      /* [cover parentID={F589EDA5-C0F6-43e3-AD15-6C0BF075B3C7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1090      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1091      Uart_lReportError(UART_SID_INIT, UART_E_INIT_FAILED);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1092      DevErrorStatus  = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1093    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1094    /* [cover parentID={91F19D1F-B4B7-4e3b-B8B3-DBC569BB2F34}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1095    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1096    /* Check Uart driver is initialized */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1097    else if(Uart_InitStatus == UART_INITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1098    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1099      /* [cover parentID={A0E3EFFD-C7ED-4578-B682-DA112AE5BFD0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1100      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1101      Uart_lReportError(UART_SID_INIT, UART_E_ALREADY_INITIALIZED);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1102      DevErrorStatus  = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1103    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1104    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1105    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1106      /* Do Nothing */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1107    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1108  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1109    /* Check DET is set */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1110    if(DevErrorStatus  == E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1111    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1112    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1113      /* [cover parentID={A1DD42DE-B5C8-4a32-B2F1-15A7C76981A3}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1114      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1115      MaxChannel = ConfigPtr->NoOfChannels;
	ld.bu	d9,[a12]8
.L386:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1116      ClkFailureCounter = 0U;
	mov	d10,#0
.L387:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1117  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1118      /* [cover parentID={A964CBBE-3D89-4e34-A9B2-56095510E20B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1119      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1120      /* [cover parentID={59971F7B-5AAA-4588-A212-25BDBF07E194}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1121      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1122      /* Initialize all configured channel */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1123      for(ChannelCounter = 0U; ChannelCounter < MaxChannel; ChannelCounter++)
	mov	d11,d10
.L389:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1124      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1125        ChannelConfigPtr = &(ConfigPtr->ChannelConfigPtr[ChannelCounter]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1126        ChannelInfoPtr = &Uart_ChannelInfo[ChannelCounter];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1127        /* Extract hardware unit number  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1128        ModuleNo = ChannelConfigPtr->HwModule;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1129  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1130        /* [cover parentID={44156295-B949-4e64-BC73-BB48D8A7C952}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1131        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1132        /* Configure module clock */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1133        ClkDisableChk = Uart_lHwInitClcReg(ModuleNo, UART_SLEEP_MODE_SUPPORT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1134        /* [cover parentID={99F5D357-1924-41d0-9991-AC835D360A91}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1135        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1136        if(0U == ClkDisableChk)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1137        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1138          /* [cover parentID={126230AF-545A-4d7d-8F14-F6F839CBEDC1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1139          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1140          /* Reset ASCLIN kernel */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1141          Uart_lHwInitKernelReg(Uart_HwModuleAddr[ModuleNo]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1142  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1143          /* [cover parentID={C0F5F312-1772-4235-B203-414AD7248F3D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1144          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1145          /* Initialize the ASCLIN hardware */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1146          Uart_lHwInit(ModuleNo, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1147  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1148          /* Set Uart channel state to init */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1149          ChannelInfoPtr->ChanTxState = UART_TX_IDLE;
	mov	d12,d10
.L391:
	j	.L2
.L3:
	mul	d15,d11,#40
.L534:
	ld.a	a2,[a12]
.L535:
	addsc.a	a13,a2,d15,#0
.L392:
	mul	d15,d11,#20
.L536:
	movh.a	a2,#@his(Uart_ChannelInfo)
	lea	a2,[a2]@los(Uart_ChannelInfo)
.L537:
	addsc.a	a15,a2,d15,#0
.L393:
	ld.bu	d8,[a13]27
.L394:
	mov	d4,#8
.L196:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1150          ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1151        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1152        else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1153        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1154          /* [cover parentID={22C5E799-ED21-47e8-A2B4-E84E7F046646}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1155          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1156          ClkFailureCounter++;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1157        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1158      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1159  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1160      /* [cover parentID={9BBC9AB8-31C4-4c58-80E4-DEAC1E6B3F97}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1161      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1162      if(0U == ClkFailureCounter)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1163      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1164        /* [cover parentID={C9DDD480-BC44-44e3-94BC-6A5E70287856}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1165        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1166        /* Set uart configuration pointer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1167        Uart_ConfigPtr = ConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1168  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1169        #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1170        /* [cover parentID={6ED02763-3107-4d48-A7F2-D32B68497424}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1171        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1172        /* Set driver state to init  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1173        Uart_InitStatus = UART_INITIALISED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1174        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1175      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1176      #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1177      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1178      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1179        /* [cover parentID={A2FC8F1B-7E16-4cfe-B231-3C2EB718BF45}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1180        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1181        /* Set driver state to un-initialized */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1182        Uart_InitStatus = UART_UNINITIALISED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1183      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1184      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1185    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1186  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1187  #if (UART_DEINIT_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1188  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1189  ** Traceability     : [cover parentID={A002E536-B667-4666-AD2A-973442C1AA98}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1190  ** Syntax          : void Uart_DeInit(void)                                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1191  ** Service ID      : 222                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1192  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1193  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1194  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1195  ** Reentrancy      : Non reentrant                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1196  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1197  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1198  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1199  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1200  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1201  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1202  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1203  ** Description     : Uart driver deInitialization function.                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1204  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1205  void Uart_DeInit(void)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1206  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1207    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1208    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1209    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1210    uint32 TimerCorrectnWaitTicks;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1211    uint32 DelayTickResolution;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1212    uint8 ModuleNo;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1213    uint8 MaxChannel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1214    uint8 Channel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1215  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1216    /* [cover parentID={E1F92579-76C5-43c0-BC2E-89DD485420E7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1217    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1218    /* Get STM timer current resolution and calculate maximum number of ticks
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1219       to wait before expected hardware behaviour is occurd- That timer
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1220       correcttion */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1221    DelayTickResolution = Mcal_DelayTickResolution();
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1222    TimerCorrectnWaitTicks  = (UART_MAXTIMEOUT_COUNT / DelayTickResolution);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1223  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1224    /* Do not allow ticks to wait to be zero, if STM timer resolution is lower*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1225    if(TimerCorrectnWaitTicks == 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1226    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1227      TimerCorrectnWaitTicks++;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1228    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1229  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1230    /* [cover parentID={539037A4-6F41-4cd4-8015-5D80294F5F6C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1231    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1232    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1233    /* [cover parentID=  {B791269A-2A45-40f9-9D8A-2435868F7169}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1234    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1235    /* Check uart driver is initialized  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1236    if(Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1237    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1238      /* [cover parentID={7DF24A9F-90C4-4fbe-ADCC-B88012043B34}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1239      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1240      Uart_lReportError(UART_SID_DEINIT, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1241    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1242    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1243    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1244    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1245  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1246      #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1247      /* [cover parentID={B79A8CFE-B5B1-458a-A7F1-CF4B38A844E7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1248      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1249      /* Set Uart driver un-initialization state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1250      Uart_InitStatus = UART_UNINITIALISED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1251      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1252      /* [cover parentID={4C909D2C-A7A4-4da1-B9A9-31730B6EA5CB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1253          Extract total number of channel's configured.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1254      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1255      MaxChannel = Uart_ConfigPtr->NoOfChannels;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1256      /* [cover parentID={AFD95056-F0B1-4aa3-9C37-58E839B75B19}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1257      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1258      /* [cover parentID={F7CDB46B-E256-4ea4-AFA2-9F12214E8698}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1259      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1260      /* [cover parentID={4B573AF2-B172-4c12-ABAA-DFF56BD2031D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1261      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1262      for(Channel = 0U; Channel < MaxChannel; Channel++)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1263      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1264        /* [cover parentID={EE9313B1-B5C1-45cc-9085-8D18FECA0FFF}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1265        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1266        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1267        ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1268        /* Extract hardware module number */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1269        ModuleNo = ChannelConfigPtr->HwModule;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1270        /* [cover parentID={ED0F1F61-92F9-4331-873C-2EF853ECB1D1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1271        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1272        HwModulePtr = Uart_HwModuleAddr[ModuleNo];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1273        /* [cover parentID={21C0704F-CC1D-4e38-8826-C3503EA42CA7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1274        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1275        /* Disable module clock */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1276        HwModulePtr->CSR.B.CLKSEL = UART_CSRREG_CLKSEL_NOCLK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1277        Uart_lStatusTimeout(TimerCorrectnWaitTicks, HwModulePtr, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1278                            UART_REG_TYPE_CSR, 0U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1279        /* [cover parentID={80F2B724-EFA6-4866-B7A7-F207800300CD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1280        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1281        /* Change ASCLIN hardware to init mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1282        HwModulePtr->FRAMECON.B.MODE = UART_FRAMECONREG_INIT_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1283        /* [cover parentID={C05440CC-D155-4b8c-B980-6507900051BD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1284        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1285        /* Enable clock source */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1286        HwModulePtr->CSR.B.CLKSEL = UART_CSRREG_CLKSEL_CLC;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1287        Uart_lStatusTimeout(TimerCorrectnWaitTicks, HwModulePtr, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1288                            UART_REG_TYPE_CSR, 1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1289        /* [cover parentID={0D08FC33-5C57-433b-968F-C97749752121}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1290        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1291        /* Reset channel information */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1292        ChannelInfoPtr->ChanTxState = UART_TX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1293        ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1294        ChannelInfoPtr->TxDataLeft = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1295        ChannelInfoPtr->RxDataLeft = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1296        ChannelInfoPtr->TotalDataTxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1297        ChannelInfoPtr->TotalDataRxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1298        ChannelInfoPtr->TxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1299        ChannelInfoPtr->RxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1300        ChannelInfoPtr->RxIntLevel = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1301  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1302        /* [cover parentID={AC49A1D5-EE66-4ee2-B155-F64C4DA7E822}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1303        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1304        /* Clear the read and write interrupts*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1305        Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1306        /* [cover parentID={77C55436-A03A-464d-BD0C-7D28AEFB980C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1307        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1308        HwModulePtr->FLAGSCLEAR.B.TFLC = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1309        /* [cover parentID={29068AF7-4781-4684-A955-8E87A7DA4A28}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1310        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1311        #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1312          /* [cover parentID={7EFCFF6B-1C79-47b1-A529-649502546FFA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1313          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1314          #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1315        /* [cover parentID={0F1099F3-0F21-4a28-9736-546F523DBECD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1316        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1317        /* Check channel RX configured in polling mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1318          if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1319        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1320        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1321          /* [cover parentID={9A01A3F1-D2B4-4929-B37D-E598E911A52B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1322          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1323          /* Disable receive interrupts and RXFIFO interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1324          Uart_lDisableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1325  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1326  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1327          /* [cover parentID={D548D5E8-5948-4127-91B1-58413750017F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1328          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1329          HwModulePtr->RXFIFOCON.B.FM = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1330  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1331        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1332        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1333        /* [cover parentID={C8BB867D-9CAB-4b8d-9B82-BAE8228B728E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1334        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1335        #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1336          /* [cover parentID={24149B90-B798-4324-932F-75A2DF708B74}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1337          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1338          #if (UART_TX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1339        /* [cover parentID={D5AC9ED5-E119-4ac9-95EF-CB80CF24B885}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1340        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1341        /* Check channel TX configured in polling mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1342          if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1343        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1344        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1345          /* [cover parentID={BF3798BD-2973-46ff-A279-3B33B6EFAE24}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1346          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1347          /* Clear TXFIFO level interrupt and interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1348          HwModulePtr->FLAGSENABLE.B.TFLE = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1349  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1350          /* [cover parentID={F749ED47-0A46-44d7-8BC0-F4C8BA598AE6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1351          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1352          HwModulePtr->TXFIFOCON.B.FM = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1353        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1354        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1355        /* [cover parentID={B74C51A4-F281-4a35-B004-2560751F8CFF}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1356        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1357        /* Reset ASCLIN kernel */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1358        Uart_lHwInitKernelReg(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1359        /* [cover parentID={58FB90BF-A051-43e3-BE2A-F7A3C3473AF0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1360        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1361        /* Disable module */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1362        UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->CLC.U, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1363            UART_SET_BIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1364      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1365    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1366  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1367  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1368  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1369  ** Traceability     : [cover parentID={E8F69A6A-1D68-4aa8-BA08-95B578C5F058}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1370  ** Syntax : Uart_ReturnType Uart_Read                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1371  **  (                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1372  **    const Uart_ChannelIdType channel,Uart_MemType *const MemPtr,            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1373  **                                                   const Uart_SizeType Size **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1374  **  )                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1375  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1376  ** Service ID      : 217                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1377  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1378  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1379  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1380  ** Reentrancy      : Reentrant(Not for same channel)                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1381  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1382  ** Parameters (in) : Channel - Uart channel to be addressed.                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1383  **                   MemPtr - Memory location where data needs to be stored   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1384  **                   Size -Number of data bytes to be received.If channel     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1385  **                         frame length configured with greater than 8 bit    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1386  **                         then number of bytes should be multiple of 2.      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1387  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1388  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1389  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1390  ** Return value    : UART_E_OK - Read operation was initiated successfully    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1391  **                   UART_E_NOT_OK - Read operation couldn't be initiated     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1392  **                   due to development errors                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1393  **                   UART_E_BUSY - Uart channel is busy with other            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1394  **                   read operation                                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1395  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1396  ** Description     : Api to configure the given UART Channel for reception    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1397  **                   of the specified number of data bytes and the memory     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1398  **                   location to be used to store the received data           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1399  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1400  Uart_ReturnType Uart_Read(const Uart_ChannelIdType Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1401                            Uart_MemType *const MemPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1402                            const Uart_SizeType Size)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1403  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1404    Ifx_ASCLIN* HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1405    Uart_ChannelInfoType* ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1406    Uart_ReturnType RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1407    uint8 IntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1408  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1409    /* [cover parentID={7460D8FB-49A0-4d0a-976B-2C0736B3A4A8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1410    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1411    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1412    /* [cover parentID={54097BC0-63A6-44c9-A188-F619750CB3F8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1413    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1414    RetValue = Uart_lCheckDetError(Channel, Size, UART_SID_READ, MemPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1415  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1416    /* [cover parentID={7F0C55A3-34B3-4014-A795-5DBF2E11D3AC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1417    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1418    if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1419    #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1420    RetValue = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1421    ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1422    /* [cover parentID={A5D92A0D-2FDB-4a3e-BCBC-091F46B9168E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1423    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1424    /* Check read operation is ongoing for same channel */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1425    if(ChannelInfoPtr->ChanRxState != UART_RX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1426    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1427      /* [cover parentID={3F1E0151-F369-4f44-B865-F5F9203940FB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1428      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1429      RetValue = UART_E_BUSY;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1430    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1431    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1432    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1433    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1434      #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1435      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1436      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1437      /* [cover parentID={584EC5F2-B82A-40e8-9CD9-8BC6B57D0D7A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1438      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1439      /* Update Uart_ChannelInfo for Read Operation */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1440      ChannelInfoPtr->ChanRxState = UART_RX_PREP_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1441      ChannelInfoPtr->RxBuffPtr = MemPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1442      ChannelInfoPtr->RxDataLeft = Size;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1443      ChannelInfoPtr->TotalDataRxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1444      ChannelInfoPtr->RxNotfn = UART_RX_NOTFN_NOT_TRIGGERED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1445      #if (UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1446      ChannelInfoPtr->ChanRxMode = UART_RX_IN_READ_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1447      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1448      /* [cover parentID={A775039E-7EAD-46f3-9CF3-6E98BC868B95}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1449      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1450      /* Extract SFRs address for target ASCLIN Unit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1451      HwModulePtr = Uart_HwModuleAddr[Uart_ConfigPtr->\ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1452                                      ChannelConfigPtr[Channel].HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1453      /* Flush the RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1454      HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1455  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1456      /* Clear read interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1457      Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1458      /* [cover parentID={552D2AEB-D105-4089-B47D-BCC4F64B5199}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1459      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1460      if(Size < UART_BUFFER_SIZE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1461      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1462        /* [cover parentID={57F2CC23-0868-4fcf-BBB8-425957FEC9E4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1463        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1464        /* Set RXFIFO interrupt level as per numebr of bytes to be receive */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1465        IntLevel = ((uint8)Size - (uint8)1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1466      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1467      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1468      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1469        /* [cover parentID={FBDD09A0-F7EF-4c64-93E8-0E30E0AEACD5}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1470        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1471        /* Set maximum receive level */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1472        IntLevel = UART_RX_FIFO_INT_LEVEL_MAX;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1473      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1474  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1475      /* [cover parentID={17CA9E4F-302D-4d66-B3C3-2FD6EE211C45}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1476      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1477      /* Copy transmit fill level to check spurius interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1478      HwModulePtr->RXFIFOCON.B.INTLEVEL = IntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1479      ChannelInfoPtr->RxIntLevel = IntLevel + 1U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1480      /* [cover parentID={4DB647BF-1F8C-4733-8FC4-D0497AB63E78}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1481      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1482      #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1483        /* [cover parentID={D840C322-4458-4f71-AEC8-FB7FB2DA7122}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1484        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1485        #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1486      /* [cover parentID={BBF9AF60-A570-417e-8AF2-2CD0BFE873E4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1487      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1488      /* Check read operation for current channel configured in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1489        if(Uart_ConfigPtr->ChannelConfigPtr[Channel].RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1490      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1491      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1492        /* [cover parentID={9FE13698-9996-4084-89AD-86C5A331389B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1493        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1494        /* Enable RXFIFO level and error interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1495        Uart_lEnableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1496      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1497      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1498  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1499      /* [cover parentID={7AE6C1BA-C878-4b32-877A-5E410BCD84D7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1500      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1501      /* Enable RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1502      HwModulePtr->RXFIFOCON.B.ENI = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1503      ChannelInfoPtr->ChanRxState = UART_RX_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1504    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1505  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1506    return RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1507  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1508  #if (UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1509  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1510  ** Traceability     : [cover parentID={713CDDB0-E6F7-41f4-BA83-D0D4E135E3C2}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1511  ** Syntax : Uart_ReturnType Uart_StartStreaming                               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1512  **  (                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1513  **    const Uart_ChannelIdType channel,Uart_MemType *const MemPtr,            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1514  **                                                const Uart_SizeType BufSize **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1515  **  )                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1516  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1517  ** Service ID      : 229                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1518  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1519  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1520  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1521  ** Reentrancy      : Reentrant(Not for same channel)                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1522  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1523  ** Parameters (in) : Channel - UART channel id for the streaming mode         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1524  **                             operation.                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1525  **                   MemPtr - Application buffer address.The UART driver uses **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1526  **                            this buffer to copy the received UART data from **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1527  **                            the hardware FIFO memory to this application    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1528  **                            buffer and invokes streaming notification       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1529  **                            function.                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1530  **                  BufSize - The length of the application buffer in bytes   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1531  **                            which is passed in the parameter MemPtr. Since  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1532  **                            the hardware FIFO size is 16 bytes, at a time   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1533  **                            UART hardware can store up to 16 bytes. So      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1534  **                            recommended BufSize is 16 bytes anything above  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1535  **                            will not be utilized by the UART driver         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1536  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1537  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1538  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1539  ** Return value    : UART_E_OK - Streaming operation was initiated            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1540  **                   successfully                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1541  **                   UART_E_NOT_OK - Streaming operation couldn't be initiated**
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1542  **                   due to development errors                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1543  **                   UART_E_BUSY - Uart channel is busy with other            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1544  **                   Streaming or read operation                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1545  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1546  ** Description     : Api to configure the receiving operation in streaming    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1547  **                   mode for specified UART channel in polling or            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1548  **                   interrupt mode                                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1549  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1550  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1551  Uart_ReturnType Uart_StartStreaming(const Uart_ChannelIdType Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1552                            Uart_MemType *const MemPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1553                            const Uart_SizeType BufSize)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1554  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1555    Ifx_ASCLIN* HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1556    Uart_ChannelInfoType* ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1557    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1558    Uart_ReturnType RetValue = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1559    uint8 IntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1560  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1561    /* [cover parentID={E1CA14EC-AE8E-48a0-8E6F-C0F39A888A16}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1562    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1563    /* DET or SAFETY is ON */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1564    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1565      /* [cover parentID={28F502D9-EF30-49a4-B71F-0D8A02264377}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1566      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1567      /* Validate input parameters */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1568      RetValue = Uart_lCheckDetError(Channel, BufSize,\ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1569                                              UART_SID_START_STREAMING, MemPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1570      /* [cover parentID={445765AE-8657-47e6-A8D1-D7C2999CD5B0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1571      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1572    if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1573    #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1574      /* [cover parentID={7ED0EA81-F4F5-4501-8210-59B0A9CD5B20}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1575      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1576      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1577  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1578      /* [cover parentID={EB69E4E3-B897-4f70-BA52-814D32D607CA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1579      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1580      /* Check read operation is ongoing for same channel */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1581      if(ChannelInfoPtr->ChanRxState != UART_RX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1582        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1583          /* [cover parentID={1F62665C-4D51-402f-8DCE-4A8B3888E97E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1584          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1585          /* Update return value with busy */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1586          RetValue = UART_E_BUSY;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1587        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1588      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1589    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1590    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1591      #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1592      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1593      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1594      /* [cover parentID={777E6E03-49E6-4f8e-9095-F659B6D3F34A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1595      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1596      /* Extract SFRs address for target ASCLIN Unit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1597      ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1598      HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1599  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1600      /* [cover parentID={44B4FE03-00D3-4378-8003-69CC7DAB9CE8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1601      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1602      /* Update Uart_ChannelInfo for Streaming Operation */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1603      ChannelInfoPtr->ChanRxState = UART_RX_PREP_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1604      ChannelInfoPtr->RxBuffPtr = MemPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1605      ChannelInfoPtr->RxBufSize = BufSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1606      ChannelInfoPtr->RxNotfn = UART_RX_NOTFN_NOT_TRIGGERED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1607      ChannelInfoPtr->ChanRxMode = UART_RX_IN_STREAMING_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1608  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1609      /* Flush the RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1610      HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1611  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1612      /* [cover parentID={8062B707-4BDA-460e-ABC1-88A2A460F4D1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1613      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1614      /* Clear read interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1615      Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1616  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1617  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1618      /* [cover parentID={1A2BD08A-DF79-4f56-A5DE-8F55CA655C76}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1619      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1620      /* Is DataLength more than 8 bits */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1621      if(ChannelConfigPtr->DataLength >= UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1622        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1623          /* [cover parentID={82088F06-E5A8-40c3-B153-F75DFCBF8E5D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1624          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1625          /* Set receive Interrupt level to 2Bytes */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1626          IntLevel = UART_RX_FIFO_INT_LEVEL_ONE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1627        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1628      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1629        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1630          /* [cover parentID={065AFD54-FFDD-4c73-89BE-B47554C1882E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1631          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1632          /* Set receive Interrupt level to 1Byte */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1633          IntLevel = UART_RX_FIFO_INT_LEVEL_MIN;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1634        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1635      /* Copy Receive fill level to check spurius interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1636      HwModulePtr->RXFIFOCON.B.INTLEVEL = IntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1637      ChannelInfoPtr->RxIntLevel = IntLevel + 1U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1638  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1639      /* [cover parentID={1A4431DF-B3A5-4b1b-B655-49E30D30F850}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1640      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1641      #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1642        /* [cover parentID={40893C6E-0B79-469a-9CC8-EACE9F95B416}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1643        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1644        #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1645      /* [cover parentID={BD35AFAB-2CB6-4822-A53A-1A92F77D697E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1646      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1647      /* Check read operation for current channel configured in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1648        if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1649      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1650      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1651        /* [cover parentID={709A0F8F-29B0-4277-8EEF-0027AE6AE9FA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1652        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1653        /* Enable RXFIFO level and error interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1654        Uart_lEnableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1655      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1656      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1657      /* [cover parentID={68D18281-6A5E-4142-9BF6-B05AA53D3672}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1658      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1659      /* Enable RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1660      HwModulePtr->RXFIFOCON.B.ENI = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1661      ChannelInfoPtr->ChanRxState = UART_RX_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1662  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1663    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1664  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1665    return RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1666  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1667  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1668  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1669  #if (UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1670  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1671  ** Traceability     : [cover parentID={24571EE4-2E3C-46e3-9CD6-1735B930AD7B}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1672  ** Syntax:Uart_ReturnType Uart_StopStreaming(const Uart_ChannelIdType Channel)**
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1673  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1674  ** Service ID      : 230                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1675  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1676  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1677  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1678  ** Reentrancy      : Reentrant  (Not for the same channel)                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1679  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1680  ** Parameters (in) : Channel - Uart channel id which is configured for the    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1681  **                                         in straming mode                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1682  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1683  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1684  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1685  ** Return value    : UART_E_OK - Streaming operation of the channel is        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1686  **                                                  stopped successfully      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1687  **                   UART_E_NOT_OK -Streaming operation of the channel        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1688  **                                  couldn't stopped due to development       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1689  **                                  errors or channel receive state is not in **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1690  **                                  progress                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1691  ** Description     : API to stop streaming operation on given channel.        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1692  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1693  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1694  Uart_ReturnType Uart_StopStreaming(const Uart_ChannelIdType Channel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1695  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1696    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1697    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1698    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1699    Uart_ReturnType RetValue = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1700  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1701  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1702      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1703    /* [cover parentID={AA22F99E-0EA5-4313-93E8-8D94614C5A57}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1704    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1705    /* DET or SAFETY is ON */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1706    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1707    /* [cover parentID={C88FD45B-0186-4bcf-9E60-BA404D3F67A2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1708    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1709    /* Is Uart driver initialized */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1710    if(Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1711    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1712      /* [cover parentID={7C70FA80-E826-4661-B5F2-3E0C653DD91B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1713      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1714      /* Uart is not uninitialized report DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1715      Uart_lReportError(UART_SID_STOP_STREAMING, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1716      RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1717    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1718    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1719    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1720      /* [cover parentID={4D1C4549-49D3-4c55-970F-5903D10601DE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1721      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1722      /* ChannelId is invalid report DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1723      RetValue = Uart_lChannelCheck(Channel, UART_SID_STOP_STREAMING);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1724  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1725      /* [cover parentID={129F32E8-58A7-4e7e-A5F5-C84824A4B7F5}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1726      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1727      /*Is channel ID valid and in streaming mode*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1728      if((RetValue == UART_E_OK) &&
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1729      (ChannelInfoPtr->ChanRxMode != UART_RX_IN_STREAMING_MODE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1730      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1731          /* [cover parentID={CB2BCF14-E925-42f0-9E64-DE67FEEA6B90}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1732          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1733          /*Report Uart driver is not in sreaming mode error*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1734         Uart_lReportError(UART_SID_STOP_STREAMING, UART_E_INVALID_CHANNEL);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1735         RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1736      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1737    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1738  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1739    /* [cover parentID={3556B661-5A8B-447f-A623-0791BFA4518B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1740    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1741    if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1742    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1743    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1744  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1745      /* [cover parentID={5EFEAFE5-6D07-40a9-9A54-F5A1E3EDB20A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1746      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1747      /* Check receive in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1748      if(ChannelInfoPtr->ChanRxState == UART_RX_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1749      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1750          /* [cover parentID={B45FC54B-5663-4107-86B1-EA6757EA51DE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1751          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1752          /* Set receive state with stop streaming in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1753        ChannelInfoPtr->ChanRxState = UART_RX_STOP_STREAMING_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1754        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1755        HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1756  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1757        /* Disable and flush RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1758        HwModulePtr->RXFIFOCON.B.ENI = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1759        HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1760  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1761        /* [cover parentID={B689C14D-0DD6-4204-B9F6-A2ACF33048AB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1762        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1763        /* Clear and disable Rx overflow and level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1764        Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1765  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1766        /* [cover parentID={2DC9F736-7926-42d8-A327-02C0CA1506C9}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1767        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1768        #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1769        /* [cover parentID={9D8FBC35-A17D-4894-A0C9-65B85448BEAB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1770        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1771          #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1772        /* [cover parentID={7BBABC18-7D8E-43bf-BEFD-AD24FA7A2984}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1773        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1774        /* Check if read operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1775          if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1776        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1777        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1778          Uart_lDisableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1779        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1780        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1781  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1782        /* [cover parentID={F4B00BFC-B153-42b0-B3D0-D0A643BA0578}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1783        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1784        /* Reset channel info structure */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1785        ChannelInfoPtr->RxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1786        /* Reset channel state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1787        ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1788      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1789      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1790      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1791          RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1792      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1793    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1794  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1795    return RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1796  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1797  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1798  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1799  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1800  ** Traceability     : [cover parentID={8BED9241-561A-48c1-B43E-9D7304BC92F9}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1801  ** Syntax : Uart_ReturnType Uart_Write                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1802  **  (                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1803  **    const Uart_ChannelIdType channel,Uart_MemType *const MemPtr,            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1804  **    const Uart_SizeType Size                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1805  **  )                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1806  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1807  ** Service ID      : 218                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1808  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1809  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1810  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1811  ** Reentrancy      : Reentrant(Not for the same channel)                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1812  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1813  ** Parameters (in) : Channel -Uart channel to be addressed                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1814  **                   MemPtr -Pointer to buffer from where data to be transmit **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1815  **                   Size -Number of data bytes to be transmitted.If channel  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1816  **                         frame length configured with greater than 8 bit    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1817  **                         then number of bytes should be multiple of 2.      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1818  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1819  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1820  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1821  ** Return value    : UART_E_OK - Write operation initialized successfully     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1822  **                   UART_E_NOT_OK -Write operation couldn't performed due to **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1823  **                                 development error.                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1824  **                   UART_E_BUSY - Uart channel is busy in other transmit     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1825  **                                 operation                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1826  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1827  ** Description     : Function to transmit data from user memory location      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1828  **                   (App Buffer)on to the given channel                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1829  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1830  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1831  Uart_ReturnType Uart_Write(const Uart_ChannelIdType Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1832                             Uart_MemType *const MemPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1833                             const Uart_SizeType Size)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1834  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1835    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1836    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1837    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1838    Uart_ReturnType RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1839  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1840    /* [cover parentID={C8B64780-1D25-4f20-9179-5365735C8230}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1841    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1842    #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1843    /* [cover parentID={AFAFDD8E-FDA0-4766-9A31-92BBC7A1E838}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1844       Validate input parameter and update return value.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1845    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1846    RetValue = Uart_lCheckDetError(Channel, Size, UART_SID_WRITE, MemPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1847  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1848    if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1849    #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1850    /* [cover parentID={408AB9A6-A7F7-414d-9550-1DF4563A1A90}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1851    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1852    /* [cover parentID={5C67C3DD-9F60-400c-AAFC-78740651B58A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1853    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1854    RetValue = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1855    ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1856    /* [cover parentID={4407B922-09FB-4a3f-A697-06024FB5FF1A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1857    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1858    /* No other Uart write operation is in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1859    if(ChannelInfoPtr->ChanTxState != UART_TX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1860    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1861      /* [cover parentID={7F607969-07AB-4712-B138-AC90EB4CA176}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1862      Set return variable with busy.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1863      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1864      RetValue = UART_E_BUSY;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1865    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1866    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1867    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1868    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1869      #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1870      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1871      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1872      /* [cover parentID={556E244D-2CE1-4c17-BC65-629524F62C94}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1873      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1874      /* Update channel state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1875      ChannelInfoPtr->ChanTxState = UART_TX_PREP_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1876  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1877      ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1878      /* Extract ASCLIN module SFR base address */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1879      HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1880  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1881      /* [cover parentID={25CCC9D8-9F3D-4c66-9C8B-F7232701FC03}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1882      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1883      /* Update channel info to initiate data transmision */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1884      ChannelInfoPtr->TxBuffPtr = MemPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1885      ChannelInfoPtr->TxDataLeft = Size;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1886      ChannelInfoPtr->TotalDataTxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1887      /* Flush TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1888      HwModulePtr->TXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1889  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1890      /* [cover parentID={E5D5A953-4E20-4412-AB1E-7BEF2207C136}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1891      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1892      /* Copy application buffer data to TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1893      Uart_lWrite(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1894      ChannelInfoPtr->ChanTxState = UART_TX_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1895    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1896  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1897    return RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1898  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1899  #if (UART_ABORT_READ_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1900  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1901  ** Traceability     : [cover parentID={F0165BE1-EF5D-40d0-A7BB-CB61C01C15BC}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1902  ** Syntax : Uart_SizeType Uart_AbortRead(const Uart_ChannelIdType Channel)    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1903  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1904  ** Service ID      : 220                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1905  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1906  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1907  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1908  ** Reentrancy      : Reentrant  (Not for the same channel)                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1909  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1910  ** Parameters (in) : Channel - Uart channel to be addressed                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1911  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1912  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1913  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1914  ** Return value    : UartRetSize - Number of bytes successfully received and  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1915  **                                 stored to the application memory location  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1916  **                                 before the read operation was aborted.     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1917  ** Description     : API to abort read operation on given channel.            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1918  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1919  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1920  Uart_SizeType Uart_AbortRead(const Uart_ChannelIdType Channel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1921  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1922    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1923    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1924    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1925    Uart_SizeType UartRetSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1926  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1927    ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1928    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1929    Uart_ReturnType RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1930    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1931    /* [cover parentID={7B82F49D-DC4C-4207-812E-B3957C6062B2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1932    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1933    /* Set return size to zero */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1934    UartRetSize = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1935  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1936    /* [cover parentID={FF0CFB7D-EECD-4cd8-AF17-706674EC5BC5}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1937    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1938    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1939  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1940    /* [cover parentID={9A5F0CAF-25DD-4b1d-8EFC-992090736371}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1941    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1942    if(Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1943    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1944      /* [cover parentID={E1C462B3-34E6-4ec9-A6BA-43B5EFBC40A9}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1945      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1946      /* Uart is not uninitialized report DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1947      Uart_lReportError(UART_SID_ABORT_READ, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1948      RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1949    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1950    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1951    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1952      /* [cover parentID={5EDE0315-EDD0-4fa5-A365-4D556F563B5A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1953      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1954      /* ChannelId is invalid report DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1955      RetValue = Uart_lChannelCheck(Channel, UART_SID_ABORT_READ);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1956      #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1957      /* [cover parentID={D000553D-7D83-4d31-A0DF-05FE18A3D415}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1958      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1959      /*Is channel ID valid and in streaming mode*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1960      if((RetValue == UART_E_OK) &&
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1961      (ChannelInfoPtr->ChanRxMode != UART_RX_IN_READ_MODE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1962      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1963          /* [cover parentID={22E09971-BB7C-4799-BF79-A6B5B7925568}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1964          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1965          /* Report Uart driver is not in normal read mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1966         Uart_lReportError(UART_SID_ABORT_READ, UART_E_INVALID_CHANNEL);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1967         RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1968      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1969      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1970    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1971  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1972    /* [cover parentID={F30E1A6F-6E9A-4430-9212-ADD437C19246}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1973    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1974    if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1975    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1976    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1977      /* [cover parentID={36FF27BF-91C6-4dbc-AB94-E42306A53B13}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1978      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1979      if(ChannelInfoPtr->ChanRxState == UART_RX_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1980      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1981        ChannelInfoPtr->ChanRxState = UART_RX_ABORT_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1982        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1983        HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1984        /* [cover parentID={00BC0361-D302-48bb-8D66-D56F97633E18}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1985        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1986        /* Disable and flush RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1987        HwModulePtr->RXFIFOCON.B.ENI = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1988        HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1989  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1990        /* [cover parentID={896781A8-A7D1-457c-932D-EEC22C54DB01}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1991        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1992        /* Clear and disable Rx overflow and level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1993        Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1994  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1995        /* [cover parentID={70922CBC-C774-49a1-807B-FC44125BC1A7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1996        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1997        #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1998        /* [cover parentID={2BE2DFF7-1919-4cea-B323-DF3941845E9B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  1999        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2000          #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2001        /* [cover parentID={0E47C788-D20A-44e9-B72B-A5181D8C2846}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2002        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2003        /* Check if read operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2004          if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2005        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2006        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2007          /* [cover parentID={076D2D56-3D6A-4938-9FD0-D9ACDB039638}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2008          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2009          Uart_lDisableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2010        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2011        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2012  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2013        /* [cover parentID={28200BAB-193D-4237-B7E2-9AA7CAFFCB78}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2014        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2015        /* Return total data rxd before read operation was aborted */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2016        UartRetSize = ChannelInfoPtr->TotalDataRxd;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2017        /* [cover parentID={715DC8F6-D95B-4254-82FA-3886900B773E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2018        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2019        /* Reset channel info structure */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2020        ChannelInfoPtr->RxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2021        /* Reset data Rxd counter */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2022        ChannelInfoPtr->TotalDataRxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2023        /* Reset channel state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2024        ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2025        /* [cover parentID={E5378DB5-9FA5-4eb6-AD0C-CA27A0A2A0AA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2026        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2027        /* [cover parentID={1BCA0626-7BAC-43fe-8901-C50A3ABF94EB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2028        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2029        if(ChannelConfigPtr->UartNotif.UartAbortReceiveNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2030        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2031          /* [cover parentID={5EC50B49-CAA7-48ca-BB5A-4471AA6E9A44}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2032          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2033          /* Call abort receive notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2034          ChannelConfigPtr->UartNotif.UartAbortReceiveNotifPtr(UART_E_NO_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2035        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2036      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2037    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2038  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2039    return UartRetSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2040  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2041  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2042  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2043  #if (UART_ABORT_WRITE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2044  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2045  ** Traceability     : [cover parentID={9299FAD8-EB63-453e-821C-EF1152ABF363}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2046  ** Syntax : Uart_SizeType Uart_AbortWrite( Uart_ChannelIdType Channel )       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2047  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2048  ** Service ID      : 219                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2049  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2050  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2051  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2052  ** Reentrancy      : Reentrant(Not for the same channel)                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2053  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2054  ** Parameters (in) : Channel - Uart channel to be addressed                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2055  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2056  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2057  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2058  ** Return value    : UartRetSize - Number of bytes that have been             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2059  **                                 successfully transmitted before the write  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2060  **                                 operation was aborted.                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2061  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2062  ** Description     : API to abort data transmission on given channel.         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2063                                                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2064  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2065  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2066  Uart_SizeType Uart_AbortWrite(const Uart_ChannelIdType Channel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2067  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2068    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2069    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2070    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2071    Uart_SizeType UartRetSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2072    uint16 TxdCount;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2073    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2074    Uart_ReturnType RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2075    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2076  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2077    /* [cover parentID={BDE6576C-4F1E-4e61-A61B-3947D34188F7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2078    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2079    /* Set return size to zero */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2080    UartRetSize = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2081  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2082    /* [cover parentID={CADEA39B-332E-4fbf-A955-3A742D78A958}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2083    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2084    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2085    /* [cover parentID={4D96F2F8-387B-41b5-AC30-D9E952781AF2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2086    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2087    if(Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2088    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2089      /* [cover parentID={C0C327EB-0E28-40d3-83B3-25CBA9D52F9F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2090      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2091      /* Report to  DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2092      Uart_lReportError(UART_SID_ABORT_WRITE, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2093      RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2094    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2095    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2096    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2097      /* [cover parentID={17622B0E-68CE-4d97-B995-98A562F8E831}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2098      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2099      /* Check channel identifier */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2100      RetValue = Uart_lChannelCheck(Channel, UART_SID_ABORT_WRITE);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2101    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2102    /* [cover parentID={64DF62FC-74FC-4b77-89E0-8E4758C4B9E1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2103    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2104    if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2105    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2106    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2107      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2108      /* [cover parentID={F1C45DD3-4668-4263-B94C-D5A73CB9E3EE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2109      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2110      if(ChannelInfoPtr->ChanTxState == UART_TX_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2111      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2112        ChannelInfoPtr->ChanTxState = UART_TX_ABORT_IN_PROGRESS;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2113        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2114        HwModulePtr = Uart_HwModuleAddr[ChannelConfigPtr->HwModule];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2115  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2116        /* [cover parentID={E14AFD10-BCA7-4ff5-8F4B-B87ED87BA24A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2117        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2118        /* Disable TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2119        HwModulePtr->TXFIFOCON.B.ENO = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2120  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2121        /* Calculate the count of data Txd before write operation aborted */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2122        TxdCount = (uint16)HwModulePtr->TXFIFOCON.B.FILL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2123        UartRetSize = (ChannelInfoPtr->TotalDataTxd - TxdCount);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2124  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2125        /* Flush TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2126        HwModulePtr->TXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2127        /* Clear TXFIFO TXFIFO level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2128        HwModulePtr->FLAGSCLEAR.B.TFLC = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2129  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2130        /* [cover parentID={FDF96931-A983-486f-81CF-4F26198D4CF6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2131        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2132        #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2133          /* [cover parentID={B6C2BD08-E2DC-49b4-9AE1-CE01890F275C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2134          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2135          #if (UART_TX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2136        /* [cover parentID={AA9A4C3E-B66B-4a7d-B74A-F3E5315F5687}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2137        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2138        /* Check if write operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2139          if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2140        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2141        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2142          /* [cover parentID={2D517F37-A4A9-4b20-8FD4-AAF54DCE15FC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2143          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2144          HwModulePtr->FLAGSENABLE.B.TFLE = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2145        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2146        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2147        /* [cover parentID={51904506-15A1-41a7-A3ED-297CB28609E7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2148        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2149        /* Reset channel transmit information structure */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2150        ChannelInfoPtr->TxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2151        ChannelInfoPtr->TotalDataTxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2152        ChannelInfoPtr->ChanTxState = UART_TX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2153        /* [cover parentID={95932254-1CC6-4460-8793-BC22F4471EA7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2154        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2155        /* [cover parentID={58AB1E41-45CC-46e4-80CD-E2181072FFF1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2156        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2157        if(ChannelConfigPtr->UartNotif.UartAbortTransmitNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2158        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2159          /* [cover parentID={44138558-19E7-48ac-8A2B-9AFE25650FDC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2160          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2161          /* Call transmit abort notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2162          ChannelConfigPtr->UartNotif.UartAbortTransmitNotifPtr(UART_E_NO_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2163        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2164      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2165    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2166  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2167    return UartRetSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2168  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2169  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2170  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2171  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2172  ** Traceability     : [cover parentID={A01941DF-99E5-4c5f-8C1D-3B9918445D46}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2173  ** Syntax: Uart_StatusType Uart_GetStatus(const Uart_ChannelIdType Channel)   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2174  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2175  ** Service ID      : 221                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2176  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2177  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2178  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2179  ** Reentrancy      : Reentrant(Not for the same channel)                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2180  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2181  ** Parameters (in) : Channel - Uart channel to be addressed                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2182  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2183  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2184  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2185  ** Return value    :                                                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2186  **                   UART_BUSY_TRANSMIT : UART channel busy in transmit       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2187  **                                                              operation.    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2188  **                   UART_BUSY_RECEIVE : UART channel busy in receive         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2189  **                                                                 operation. **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2190  **                   UART_BUSY_TRANSMIT_RECEIVE : UART channel busy in        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2191  **                                           receive and transmit operation.  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2192  **                   UART_IDLE : Idle state (no transmits or receive          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2193  **                               operation in progress).                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2194  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2195  ** Description     : API to read an UART channels status.                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2196  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2197  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2198  Uart_StatusType Uart_GetStatus(const Uart_ChannelIdType Channel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2199  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2200    /* [cover parentID={846EB689-8558-41b7-A390-289C89347E6F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2201    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2202    Uart_StatusType UartChanState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2203    const Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2204    Uart_TxStateType ChanTxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2205    Uart_RxStateType ChanRxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2206  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2207    /* [cover parentID={92479A7A-869B-4d59-82D6-07B198E98ADA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2208    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2209    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2210    Uart_ReturnType ErrorFlag = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2211  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2212    /* [cover parentID={78A91410-5320-48be-B008-E6CFB31C1970}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2213    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2214    /* Check for driver initialization */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2215    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2216    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2217      /* [cover parentID={CC054C8A-FA63-465f-A018-14A6C4F5BBDD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2218      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2219      Uart_lReportError(UART_SID_GETSTATUS, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2220  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2221      ErrorFlag = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2222    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2223    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2224    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2225      /* [cover parentID={0C1BC7D9-6123-4c61-8F45-0FE80B830B30}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2226      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2227      /* Check channel identifier */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2228      ErrorFlag = Uart_lChannelCheck(Channel, UART_SID_GETSTATUS);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2229    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2230    /* Channel state set to idle */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2231    UartChanState = UART_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2232    /* [cover parentID={D1BD3C7B-E3E4-4996-AE18-8747BC34F0BB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2233    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2234    if(ErrorFlag == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2235    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2236    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2237      ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2238  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2239      ChanTxState = ChannelInfoPtr->ChanTxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2240      ChanRxState = ChannelInfoPtr->ChanRxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2241      /* [cover parentID={B81D3E43-9F1E-429e-9945-44FB25B5532E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2242      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2243      /* Return state as BUSY if channel is busy in read or write operation */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2244      if((ChanTxState != UART_TX_IDLE) && (ChanRxState != UART_RX_IDLE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2245      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2246        /* [cover parentID={6FAB290D-9EEB-47c5-8B01-3981BBDED395}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2247        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2248        UartChanState = UART_BUSY_TRANSMIT_RECEIVE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2249      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2250      /* [cover parentID={064F1E42-7DA6-42af-89A2-4C82AC5FF451}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2251      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2252      else if(ChanTxState != UART_TX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2253      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2254        /* [cover parentID={AB7C44DD-1706-4ae1-95F2-3519B4C52D49}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2255        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2256        UartChanState = UART_BUSY_TRANSMIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2257      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2258      /* [cover parentID={C4B339C3-B021-41e0-B6E1-BBD423922E93}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2259      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2260      else if(ChanRxState != UART_RX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2261      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2262        /* [cover parentID={DC4B473C-D7B1-4ee0-9602-18A14981BD84}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2263        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2264        UartChanState = UART_BUSY_RECEIVE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2265      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2266      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2267      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2268        /* [cover parentID={F5E28BB0-F688-45cb-9864-17EC11807CD0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2269        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2270        UartChanState = UART_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2271      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2272    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2273  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2274    return UartChanState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2275  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2276  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2277  #if(UART_VERSION_INFO_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2278  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2279  ** Traceability     : [cover parentID={AAFF463D-E938-46cf-AD91-D7D38B819AC5}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2280  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2281  ** Syntax           : void Uart_GetVersionInfo                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2282  **                    (                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2283  **                      Std_VersionInfoType *const VersionInfoPtr             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2284  **                    )                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2285  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2286  ** Description      : This API returns the version information of this module **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2287  **                    Note: API is available only when UartVersionInfoApi     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2288  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2289  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2290  ** Service ID       : 223                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2291  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2292  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2293  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2294  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2295  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2296  ** Parameters(in)   : none                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2297  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2298  ** Parameters (out) : VersionInfoPtr -  Pointer to store the version          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2299  **                    information of this module                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2300  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2301  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2302  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2303  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2304  void Uart_GetVersionInfo(Std_VersionInfoType *const VersionInfoPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2305  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2306  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2307    /* [cover parentID={645A0E57-36E2-429f-AAE0-92BDA397972C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2308    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2309    /* [cover parentID={C795D9CF-0731-4fde-A4C1-B675D0DEED5D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2310    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2311    #if((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2312    /* [cover parentID={7811F5AF-419F-4c10-838E-42A772091987}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2313    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2314    if (VersionInfoPtr == NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2315    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2316      /* [cover parentID={481D5C75-B2F6-49fe-8D43-DCC2CA7BB044}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2317      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2318      /* Report to DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2319      Uart_lReportError(UART_SID_VERINFO, UART_E_PARAM_POINTER);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2320    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2321    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2322    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2323    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2324      /* [cover parentID={2CC5836B-0F0F-413f-9FB9-8D009A856E02}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2325      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2326      /* Update version information */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2327      VersionInfoPtr->moduleID = (uint16)UART_MODULE_ID;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2328      VersionInfoPtr->vendorID = (uint16)UART_VENDOR_ID;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2329      VersionInfoPtr->sw_major_version = (uint8)UART_SW_MAJOR_VERSION;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2330      VersionInfoPtr->sw_minor_version = (uint8)UART_SW_MINOR_VERSION;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2331      VersionInfoPtr->sw_patch_version = (uint8)UART_SW_PATCH_VERSION;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2332    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2333  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2334  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2335  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2336  #if(UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2337  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2338  ** Traceability     : [cover parentID={D9A75586-E7FE-4a50-84EB-227EC3EA8421}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2339  ** Syntax          : void Uart_IsrReceive(const uint8 HwUnit)                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2340  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2341  ** Service ID      : 227                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2342  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2343  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2344  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2345  ** Reentrancy      : Reentrant(Not for the same HW Unit)                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2346  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2347  ** Parameters (in) : HwUnit : ASCLIN channel number.                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2348  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2349  ** Parameters (out): none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2350  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2351  ** Return value    : none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2352  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2353  ** Description     : IRQ handler for RXFIFO level interrupts.                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2354  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2355  void Uart_IsrReceive(const uint8 HwUnit)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2356  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2357    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2358    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2359    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2360    Uart_ChannelIdType Channel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2361    uint8 FlagEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2362    uint8 ReceiveStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2363    uint8 FillLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2364  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2365    /* [cover parentID={D1802D50-071C-4c02-A27D-663DB967D727}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2366    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2367    if(HwUnit < UART_MAX_HW_UNIT)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2368    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2369      /* Extract SFR base address */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2370      HwModulePtr = Uart_HwModuleAddr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2371      /* Extract the Channel */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2372      Channel = Uart_ConfigPtr->Uart_ChannelIdLookupPtr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2373  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2374      /* [cover parentID={12D2BA2A-6E72-4c41-A54C-DA72053AB408}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2375      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2376      if(Channel != UART_INVALID_CHANNEL)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2377      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2378        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2379        ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2380        FillLevel = HwModulePtr->RXFIFOCON.B.FILL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2381        ReceiveStatus = HwModulePtr->FLAGS.B.RFL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2382        FlagEnable = HwModulePtr->FLAGSENABLE.B.RFLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2383  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2384        /* Clear RXFIFO level interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2385        HwModulePtr->FLAGSCLEAR.B.RFLC = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2386        /* [cover parentID={8681911E-E6B4-4e4f-93C4-3E000708677F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2387        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2388        /* Check receive notification already triggered and rx abort
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2389           is in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2390        if((ChannelInfoPtr->RxNotfn != UART_RX_NOTFN_TRIGGERED) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2391           (ChannelInfoPtr->ChanRxState != UART_RX_ABORT_IN_PROGRESS) &&
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2392           (ChannelInfoPtr->ChanRxState != UART_RX_STOP_STREAMING_IN_PROGRESS))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2393        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2394          /* [cover parentID={9A2ACC17-F70A-4fe9-92A3-32D1F90FBABD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2395          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2396          /* Check channel read operation is initiate */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2397          if((ChannelInfoPtr->ChanRxState == UART_RX_IN_PROGRESS) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2398              (FillLevel >= ChannelInfoPtr->RxIntLevel) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2399              (FlagEnable == UART_SET_BIT) && (ReceiveStatus == UART_SET_BIT))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2400          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2401              /* [cover parentID={DFFA73B7-979B-4960-958F-294C004EC4B0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2402              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2403              #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2404              /* [cover parentID={957ED603-0F7C-498a-8F73-833EDE3D2D9D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2405              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2406              /* Check channel read operation in streaming mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2407              if(ChannelInfoPtr->ChanRxMode == UART_RX_IN_STREAMING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2408              {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2409              /* [cover parentID={1A756836-FCD1-4cd0-8BD3-7827D485CA0E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2410              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2411              /* Handle received data in streaming mode*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2412              Uart_lReceiveStreamingData(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2413              }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2414              else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2415              #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2416              {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2417              /* Handle received data in normal read mode*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2418              /* [cover parentID={3456BB52-71EF-403e-98FB-31A1697E4306}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2419              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2420               Uart_lRead(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr, 0U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2421              }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2422          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2423          #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2424          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2425          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2426            /* [cover parentID={3BB34A21-5ED6-4db8-9498-8AC989D9852D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2427            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2428            /* Report spurious interrupt safety error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2429            Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2430                                 UART_SID_ISR_RECEIVE, UART_E_SPURIOUS_INTERRUPT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2431          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2432          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2433        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2434        else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2435        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2436          #if (UART_ABORT_READ_API == STD_ON)||(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2437          /* Check rx notification already triggered */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2438          if(ChannelInfoPtr->RxNotfn != UART_RX_NOTFN_NOT_TRIGGERED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2439          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2440          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2441            ChannelInfoPtr->RxNotfn = UART_RX_NOTFN_NOT_TRIGGERED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2442          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2443        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2444      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2445      #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2446      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2447      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2448        /* [cover parentID={D56E4A78-DFBA-46ce-ABCC-05600356DB5E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2449        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2450        Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2451                               UART_SID_ISR_RECEIVE, UART_E_INVALID_HW_UNIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2452      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2453      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2454    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2455    #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2456    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2457    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2458      /* [cover parentID={F00264BD-69F4-4ca1-B075-323832936BD1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2459      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2460      Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2461                             UART_SID_ISR_RECEIVE, UART_E_INVALID_HW_UNIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2462    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2463    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2464  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2465  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2466  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2467  #if(UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2468  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2469  ** Traceability     : [cover parentID={9F7D514C-9706-4faf-8A23-43D7ECECDB75}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2470  ** Syntax          : void Uart_IsrTransmit(const uint8 HwUnit)                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2471  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2472  ** Service ID      : 228                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2473  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2474  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2475  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2476  ** Reentrancy      : Reentrant(Not for the same HW Unit)                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2477  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2478  ** Parameters (in) : HwUnit : ASCLIN channel number.                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2479  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2480  ** Parameters (out): none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2481  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2482  ** Return value    : none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2483  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2484  ** Description     : IRQ handler for TXFIFO level interrupts.                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2485  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2486  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2487  void Uart_IsrTransmit(const uint8 HwUnit)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2488  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2489    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2490    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2491    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2492    Uart_ChannelIdType Channel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2493    uint8 FillLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2494    uint8 TransmitStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2495    uint8 FlagEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2496  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2497    /* [cover parentID={E8A72943-353A-4c29-A901-6C3E0351E55A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2498    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2499    if(HwUnit < UART_MAX_HW_UNIT)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2500    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2501      /* Extract ASCLIN SFR base aaddress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2502      HwModulePtr = Uart_HwModuleAddr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2503      Channel = Uart_ConfigPtr->Uart_ChannelIdLookupPtr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2504  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2505      /* [cover parentID={60C730FA-59A5-4c1c-9F40-9904675BA7D8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2506      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2507      if(Channel != UART_INVALID_CHANNEL)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2508      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2509        ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2510        FillLevel = HwModulePtr->TXFIFOCON.B.FILL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2511        TransmitStatus = HwModulePtr->FLAGS.B.TFL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2512        FlagEnable = HwModulePtr->FLAGSENABLE.B.TFLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2513        /* Clear level interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2514        HwModulePtr->FLAGSCLEAR.B.TFLC = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2515        #if (UART_ABORT_WRITE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2516        /* [cover parentID={E534B2B4-7FBC-4259-9972-C3C569F19A8E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2517        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2518        /* Check tx abort is in progress */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2519        if(ChannelInfoPtr->ChanTxState != UART_TX_ABORT_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2520        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2521        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2522          /* [cover parentID={2BD10EE7-A0E9-4a2f-BAE5-F70F55008A1C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2523          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2524          /* Check spurious interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2525          if((FillLevel == 0U) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2526             (ChannelInfoPtr->ChanTxState == UART_TX_IN_PROGRESS) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2527             (TransmitStatus == UART_SET_BIT) && (FlagEnable == UART_SET_BIT))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2528          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2529            ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2530            /* [cover parentID={73DC4782-2B43-4e58-B978-82453FD014F9}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2531            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2532            /* Prepare TXFIFO for next transmition */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2533            Uart_lWrite(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2534          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2535          /* [cover parentID={7FA296C1-82C0-4a20-8125-C939AA3309D7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2536          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2537          #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2538          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2539          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2540            /* [cover parentID={EFBE87D7-A4EB-4efe-AE10-8C0EA6303302}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2541            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2542            /* Report spurious interrupt safety error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2543            Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2544                                   UART_SID_ISR_TRANSMIT, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2545                                   UART_E_SPURIOUS_INTERRUPT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2546          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2547          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2548        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2549      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2550      /* [cover parentID={F83B7ACD-B7B1-4d18-8196-319B307D9D5A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2551      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2552      #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2553      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2554      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2555        Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2556                               UART_SID_ISR_TRANSMIT, UART_E_INVALID_HW_UNIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2557      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2558      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2559    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2560    /* [cover parentID={3998C435-C8E4-40f1-95C5-45B8DA7CBEC6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2561    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2562    #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2563    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2564    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2565      Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2566                             UART_SID_ISR_TRANSMIT, UART_E_INVALID_HW_UNIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2567    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2568    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2569  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2570  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2571  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2572  #if((UART_TX_MODE != UART_POLLING_MODE)||(UART_RX_MODE != UART_POLLING_MODE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2573  /*CYCLOMATIC_Uart_IsrError_JUSTIFICATION:
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2574  Uart_IsrError has to verify receive states and transmit complete status flags
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2575  and also has to check for error scenarios. For better design readability, the function is not divided further.*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2576  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2577  ** Traceability     : [cover parentID={2B420FC6-404E-4b40-AE40-D0C30BBC3EEC}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2578  ** Syntax           : void Uart_IsrError( const uint8  HwUnit)                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2579  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2580  ** Service ID      : 226                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2581  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2582  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2583  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2584  ** Reentrancy      : Reentrant  (Not for the same HW Unit)                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2585  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2586  ** Parameters (in) : HwUnit : ASCLIN channel number.                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2587  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2588  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2589  ** Parameters (out): none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2590  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2591  ** Return value    : none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2592  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2593  ** Description     : IRQ handler for error occurred during reception and      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2594  **                   handle transmit complete interrupt.                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2595  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2596  void Uart_IsrError(const uint8 HwUnit)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2597  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2598    const Uart_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2599    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2600    Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2601    uint32 RxErrStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2602    uint32 RxErrFlag;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2603    uint32 RxErrFlagEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2604    Uart_RxStateType ChanRxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2605    uint8 TxComplete;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2606    uint8 TcEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2607    uint8 Channel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2608  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2609    #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2610    uint8 ValidInterrupt = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2611    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2612    /* [cover parentID={BBFBF983-4FDA-4c6d-A651-D924446B51D9}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2613    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2614    if(HwUnit < UART_MAX_HW_UNIT)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2615    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2616      /* Extract SFR base address and logical channel id */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2617      HwModulePtr = Uart_HwModuleAddr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2618      Channel = Uart_ConfigPtr->Uart_ChannelIdLookupPtr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2619  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2620      /* [cover parentID={A58B582D-5103-4932-AC57-D5316F7ABF98}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2621      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2622      /* Check HwUnit is configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2623      if(Channel != UART_INVALID_CHANNEL)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2624      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2625        /* [cover parentID={8A1AFB8F-6828-4543-973A-62F8D0923492}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2626        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2627        ChannelConfigPtr = &(Uart_ConfigPtr->ChannelConfigPtr[Channel]);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2628        ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2629        ChanRxState = ChannelInfoPtr->ChanRxState;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2630        RxErrStatus = HwModulePtr->FLAGS.U & UART_FLAGS_READ_ERROR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2631        RxErrFlagEnable = HwModulePtr->FLAGSENABLE.U & UART_FLAGS_READ_ERROR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2632        TcEnable = HwModulePtr->FLAGSENABLE.B.TCE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2633        TxComplete =  HwModulePtr->FLAGS.B.TC;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2634        RxErrFlag = RxErrStatus & RxErrFlagEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2635        TcEnable = TxComplete & TcEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2636  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2637        /* [cover parentID={008EC0B0-6A7C-4b83-B330-886A3FE2DAE5}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2638        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2639        if(((ChanRxState == UART_RX_IN_PROGRESS) && (RxErrFlag != 0U)) || \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2640           (ChannelInfoPtr->RxNotfn == UART_RX_NOTFN_TRIGGERED))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2641        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2642          #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2643          /* Set valid interrupt flag */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2644          ValidInterrupt = 1U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2645          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2646          /* [cover parentID={1EE28953-B8D1-410a-90D9-2869C9DA8B24}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2647          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2648          if(ChannelInfoPtr->RxNotfn == UART_RX_NOTFN_NOT_TRIGGERED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2649          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2650            /* [cover parentID={032857C0-135E-4864-80D5-066D8FD6E4E6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2651            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2652            Uart_lReceiveError(ChannelConfigPtr, HwModulePtr, ChannelInfoPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2653          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2654          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2655          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2656            ChannelInfoPtr->RxNotfn = UART_RX_NOTFN_NOT_TRIGGERED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2657          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2658        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2659  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2660        /* [cover parentID= {5517FD28-DA85-472c-8D33-72DBBD160939}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2661        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2662        /* Check rx error status */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2663        if(RxErrStatus != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2664        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2665          Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2666        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2667  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2668        /* [cover parentID={9997A1F1-B6FF-4d62-8A3D-C542AFA05524}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2669        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2670        /* Check TC is enabled and status flag is set */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2671        if(TcEnable == 1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2672        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2673          #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2674          /* Set valid interrupt flag */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2675          ValidInterrupt = 1U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2676          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2677          /* [cover parentID={525EA33C-AD42-4ce1-A9A9-DF13DEC08603}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2678          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2679          /* Tx complete */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2680          Uart_lTrasmitComplete(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2681        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2682  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2683        #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2684        #if((UART_ABORT_READ_API == STD_ON) || (UART_ABORT_WRITE_API == STD_ON) || (UART_RECEIVE_STREAMING_MODE_API == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2685  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2686        #if(UART_ABORT_WRITE_API == STD_OFF)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2687        if(ChanRxState == UART_RX_ABORT_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2688        #elif(UART_ABORT_READ_API == STD_OFF)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2689        if(ChannelInfoPtr->ChanTxState == UART_TX_ABORT_IN_PROGRESS)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2690        #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2691        if((ChannelInfoPtr->ChanTxState == UART_TX_ABORT_IN_PROGRESS) || \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2692           (ChanRxState == UART_RX_ABORT_IN_PROGRESS))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2693        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2694        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2695          ValidInterrupt = 1U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2696        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2697        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2698        /* [cover parentID={59E7DC37-AA67-40ac-97F0-19EE68B05B01}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2699        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2700        if(ValidInterrupt != 1U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2701        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2702          /* [cover parentID={9BFFDC2D-163C-4af6-8802-23F832DDB609}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2703          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2704          Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2705                                 UART_SID_ISR_ERROR, UART_E_SPURIOUS_INTERRUPT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2706        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2707        #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2708      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2709      /* [cover parentID={55EECB3B-E83C-4620-9C48-C67BAA2EDA1D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2710      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2711      #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2712      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2713      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2714        /* [cover parentID={0AF2CCC0-BA1B-4456-A12E-883D055715DA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2715        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2716        Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2717                               UART_SID_ISR_ERROR, UART_E_INVALID_HW_UNIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2718      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2719      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2720    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2721    /* [cover parentID={0CEA974E-360F-4511-8B34-6DA2D9FA3FFB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2722    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2723    #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2724    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2725    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2726      /* [cover parentID={4DBDDF99-B054-4da7-B204-A9EC6D34E7F1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2727      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2728      Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2729                             UART_SID_ISR_ERROR, UART_E_INVALID_HW_UNIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2730    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2731    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2732  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2733  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2734  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2735  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2736  **                      Private Function Definitions                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2737  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2738  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2739  ** Traceability     : [cover parentID={67695152-7FD3-45c1-AE57-FDF026F83D6F}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2740  ** Syntax           : LOCAL_INLINE uint8 Uart_lHwInitClcReg(const uint8 HwUnit**
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2741  **                                                       ,const uint32 Value) **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2742  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2743  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2744  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2745  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2746  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2747  ** Reentrancy       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2748  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2749  ** Parameters (in)  : HwUnit   : ASCLIN Hardware module number                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2750  **                  : Value    : Value to configure CLC Reg                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2751  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2752  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2753  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2754  ** Return value     : 0-Module Clk Enabled                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2755  **                    1-Module Clk Disabled)                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2756  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2757  ** Description      : This function sets the clc register with given value    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2758  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2759  LOCAL_INLINE uint8 Uart_lHwInitClcReg(const uint8 HwUnit, const uint32 Value)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2760  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2761    uint8 ModClkStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2762    /* [cover parentID={6C01CD27-68A6-4dc0-B9CA-78EA18E712DC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2763    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2764    /* Update clock register with end init protection */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2765    UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&Uart_HwModuleAddr[HwUnit]->\ 
	movh.a	a2,#@his(Uart_HwModuleAddr)
	lea	a2,[a2]@los(Uart_HwModuleAddr)
	addsc.a	a2,a2,d8,#2
	ld.a	a4,[a2]
	call	Mcal_WritePeripEndInitProtReg
.L538:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2766        CLC.U, Value);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2767    /* [cover parentID={BA9C54D0-B172-40a7-9A82-09A722BDEF88}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2768    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2769    /* Read back clock register */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2770    ModClkStatus = (uint8)(((Uart_HwModuleAddr[HwUnit]->CLC.U) & \ 
	movh.a	a2,#@his(Uart_HwModuleAddr)
	lea	a2,[a2]@los(Uart_HwModuleAddr)
.L539:
	addsc.a	a2,a2,d8,#2
	ld.a	a2,[a2]
.L540:
	ld.w	d0,[a2]
.L541:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2771                            UART_CLC_DISS_MASK) >> UART_CLC_DISS_BITPOS);
	sh	d0,#-1
.L542:
	and	d15,d0,#1
.L395:
	jne	d15,#0,.L4
.L197:
	movh.a	a2,#@his(Uart_HwModuleAddr)
	lea	a2,[a2]@los(Uart_HwModuleAddr)
.L543:
	addsc.a	a2,a2,d8,#2
	ld.a	a4,[a2]
	call	Uart_lHwInitKernelReg
.L544:
	mov	d4,d8
.L396:
	mov.aa	a4,a13
.L398:
	call	Uart_lHwInit
.L397:
	st.b	[a15]8,d12
.L545:
	st.b	[a15]9,d12
.L399:
	j	.L5
.L4:
	add	d10,#1
.L388:
	extr.u	d10,d10,#0,#8
.L5:
	add	d11,#1
.L390:
	extr.u	d11,d11,#0,#8
.L2:
	jlt.u	d11,d9,.L3
.L546:
	jne	d10,#0,.L6
.L547:
	movh.a	a15,#@his(Uart_ConfigPtr)
.L548:
	st.a	[a15]@los(Uart_ConfigPtr),a12
.L6:
	ret
.L182:
	
__Uart_Init_function_end:
	.size	Uart_Init,__Uart_Init_function_end-Uart_Init
.L115:
	; End of function
	
	.sdecl	'.text.Uart_Read.Code.Cpu0',code,cluster('Uart_Read')
	.sect	'.text.Uart_Read.Code.Cpu0'
	.align	2
	
	.global	Uart_Read
; Function Uart_Read
.L84:
Uart_Read:	.type	func
	mov	d2,#0
.L401:
	mul	d15,d4,#20
.L553:
	movh.a	a15,#@his(Uart_ChannelInfo)
	lea	a15,[a15]@los(Uart_ChannelInfo)
.L554:
	addsc.a	a15,a15,d15,#0
.L402:
	ld.bu	d15,[a15]9
.L555:
	jeq	d15,#0,.L7
.L556:
	mov	d2,#2
.L557:
	ret
.L7:
	mov	d15,#1
.L558:
	st.b	[a15]9,d15
.L559:
	st.a	[a15],a4
.L560:
	st.h	[a15]12,d5
.L561:
	mov	d15,#0
.L562:
	st.h	[a15]16,d15
.L563:
	st.b	[a15]19,d15
.L564:
	mul	d15,d4,#40
.L565:
	movh.a	a2,#@his(Uart_ConfigPtr)
	ld.a	a2,[a2]@los(Uart_ConfigPtr)
.L566:
	ld.a	a2,[a2]
.L567:
	addsc.a	a2,a2,d15,#0
.L568:
	ld.bu	d15,[a2]27
.L569:
	movh.a	a2,#@his(Uart_HwModuleAddr)
	lea	a2,[a2]@los(Uart_HwModuleAddr)
.L570:
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
.L403:
	ld.bu	d15,[a2]16
.L571:
	or	d15,#1
	st.b	[a2]16,d15
.L218:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2772  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2773    return ModClkStatus;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2774  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2775  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2776  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2777  ** Traceability     : [cover parentID={275E2228-8434-4093-B73E-BB5C06F5C997}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2778  ** Syntax           : static void Uart_lRead                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2779  **  (                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2780  **    Ifx_ASCLIN * const HwModulePtr,Uart_ChannelInfoType  *const             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2781          ChannelInfoPtr, const Uart_ChannelConfigType *const ChannelConfigPtr, **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2782          const uint8 ReceiveFillLevel                                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2783  **  )                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2784  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2785  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2786  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2787  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2788  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2789  ** Reentrancy       : Reentrant(Not for same channel)                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2790  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2791  ** Parameters (in)  : ChannelConfigPtr - Uart channel to be addressed         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2792  **                    ReceiveFillLevel - RXFIFO filled level                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2793  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2794  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2795  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2796  ** Parameters (inout) : HwModulePtr - ASCLIN SFR address                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2797  **                      ChannelInfoPtr - Channel information address          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2798  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2799  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2800  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2801  ** Description      : Function to copy the data from the RX FIFO buffer to    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2802  **                    the user specified memory location(App Buffer)          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2803  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2804  static void Uart_lRead(Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2805                           Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2806                           const Uart_ChannelConfigType *const ChannelConfigPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2807                           const uint8 ReceiveFillLevel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2808  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2809    Uart_MemType *BuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2810    uint16 TempReadWord;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2811    uint16 NumBytesRead;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2812    uint8 UartFrameLen;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2813    uint8 ReadCount;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2814    uint8 RxfifoLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2815  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2816    BuffPtr =  ChannelInfoPtr->RxBuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2817    /* [cover parentID={A59D9101-6770-4321-9BFE-408F4EA6BF3A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2818    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2819    #if(UART_RX_MODE != UART_INTERRUPT_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2820    /* [cover parentID={986F5E3B-512A-4986-A58F-8460B935B529}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2821    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2822    /* Check receive level non zero */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2823    if(ReceiveFillLevel > 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2824    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2825      /* [cover parentID={8BE6DB37-35AC-4c5c-BEEC-69DFBFBD9F26}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2826      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2827      if(ReceiveFillLevel > ChannelInfoPtr->RxIntLevel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2828      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2829        /* [cover parentID={B035434A-FDB2-4515-87C0-953C75059278}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2830        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2831        NumBytesRead = ChannelInfoPtr->RxIntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2832      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2833      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2834      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2835        /* [cover parentID={968B63CD-2037-48ab-83A7-D336C34CBE58}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2836        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2837        NumBytesRead = ReceiveFillLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2838      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2839    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2840    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2841    #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2842    UNUSED_PARAMETER(ReceiveFillLevel);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2843    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2844    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2845      /* [cover parentID={D72443F5-AF4C-4c39-8DDC-BBFB31BDB0D8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2846      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2847      /* Extract number of bytes to be read */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2848      NumBytesRead = ChannelInfoPtr->RxIntLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2849    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2850  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2851  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2852    /* [cover parentID={983A2430-3B46-4794-B49C-E97FAE8A8C09}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2853    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2854    /* Extract Uart frame length */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2855    UartFrameLen = ChannelConfigPtr->DataLength;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2856    /* [cover parentID={A5FE16F4-F59C-4617-80E6-D3E573F2ACF3}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2857    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2858    ReadCount = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2859    /* [cover parentID={CA1F6B0F-F23C-4f38-88CF-04AFCDEC13F3}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2860    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2861    /* [cover parentID={56BA6962-5A3F-4a95-B144-E464C97EB5EA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2862    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2863    /* Copy all receive bytes in application buffer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2864    while(ReadCount < NumBytesRead)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2865    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2866      /* [cover parentID={2B2BC711-9653-45ba-BCF6-F82F44FFB2E3}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2867      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2868      /* [cover parentID={67F098DB-7E17-487e-AE03-3080BD657CB7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2869      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2870      /* Check frame size is 9 bit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2871      if(UartFrameLen >= UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2872      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2873        /* [cover parentID={B2FC982E-216D-4aaa-B6E1-A15B16740E17}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2874        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2875        /* Prepare 16 bits data and update application buffer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2876        TempReadWord = (uint16)(HwModulePtr->RXDATA.U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2877        BuffPtr[ReadCount] = (Uart_MemType)(TempReadWord);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2878        BuffPtr[ReadCount + 1U] = (Uart_MemType)(TempReadWord >> \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2879                                  UART_SHIFT_EIGHT_BIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2880        /* Update local pointer and read count */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2881        ReadCount = ReadCount + UART_STEPSIZE_2BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2882      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2883      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2884      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2885        /* [cover parentID={ECB547EB-ECF0-4293-B5D0-F46196B52CB3}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2886        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2887        /* Update application buffer  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2888        BuffPtr[ReadCount] = (Uart_MemType)(HwModulePtr->RXDATA.U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2889        /* Update read count  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2890        ReadCount = ReadCount + UART_STEPSIZE_1BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2891      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2892    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2893    /* [cover parentID={874E9225-DEBB-4636-9D8E-DFF018113111}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2894    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2895    /* Update Uart channel info with total data received */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2896    ChannelInfoPtr->RxDataLeft -= NumBytesRead;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2897    ChannelInfoPtr->TotalDataRxd += NumBytesRead;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2898  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2899    /* Update read memory pointer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2900    ChannelInfoPtr->RxBuffPtr = &BuffPtr[NumBytesRead];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2901  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2902    /* [cover parentID={672DE060-F07E-49cf-B6EC-7158FB9728F1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2903    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2904    /* Check read pending data fit in RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2905    if(ChannelInfoPtr->RxDataLeft > 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2906    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2907      /* [cover parentID={798B2B68-A307-483d-8426-E0D67F19849B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2908      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2909      if(ChannelInfoPtr->RxDataLeft < UART_BUFFER_SIZE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2910      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2911        /* [cover parentID={4E5B9683-4063-4a37-8A7F-D6B9317CEF62}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2912        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2913        /* Set RXFIFO interrupt level according to the amount of data remainig */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2914        RxfifoLevel = ((uint8)ChannelInfoPtr->RxDataLeft - ((uint8)1U));
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2915      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2916      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2917      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2918        /* [cover parentID={258ABEDE-DA05-4976-929D-BD2627F27F3D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2919        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2920        /* Set interrupt level to RXFIFO buffer size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2921        RxfifoLevel = UART_RX_FIFO_INT_LEVEL_MAX;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2922      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2923  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2924      HwModulePtr->RXFIFOCON.B.INTLEVEL = RxfifoLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2925      ChannelInfoPtr->RxIntLevel = RxfifoLevel + 1U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2926    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2927    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2928    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2929      /* [cover parentID={67724C3C-C8B1-4702-969A-151ED69307BB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2930      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2931      /* Flush RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2932      HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2933  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2934      /* [cover parentID={61097702-80D2-4138-B596-BA700A294D1A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2935      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2936      /* Clear RXFIFO overflow and level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2937      Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2938      /* [cover parentID={7D227A9D-A5ED-4cf1-BC9D-461981055FBE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2939      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2940      /* Disable RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2941      HwModulePtr->RXFIFOCON.B.ENI = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2942       /* [cover parentID={9504A03C-78E9-458a-9E72-D8481BDB5136}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2943        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2944      #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2945        /* [cover parentID={1EC4BD58-00A7-4416-A106-86E5E70FA7B5}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2946        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2947        #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2948      /* [cover parentID={B7F79AC9-B351-4062-8339-B732ADC8B5BF}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2949      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2950      /* Check if read operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2951        if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2952      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2953      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2954        /* [cover parentID={79A194DA-75BE-4474-B1D9-A2A1454EDED1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2955        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2956        Uart_lDisableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2957      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2958      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2959  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2960      ChannelInfoPtr->RxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2961      /* [cover parentID={CCCA6ED0-A60C-489b-9774-F693607BC968}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2962      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2963      ChannelInfoPtr->TotalDataRxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2964      ChannelInfoPtr->RxIntLevel = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2965      ChannelInfoPtr->RxNotfn = UART_RX_NOTFN_TRIGGERED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2966      ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2967      /* [cover parentID={CBE961A1-D62B-4011-A801-6FDBBB90D918}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2968      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2969      /* [cover parentID={6459BCEF-C684-4cb1-A6E8-F531224ED19D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2970      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2971      /* Check receive notification configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2972      if(ChannelConfigPtr->UartNotif.UartReceiveNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2973      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2974        /* [cover parentID={5B177583-CD17-4fc6-AF55-2E1B2FCA01A4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2975        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2976        /* Call the read notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2977        ChannelConfigPtr->UartNotif.UartReceiveNotifPtr(UART_E_NO_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2978      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2979    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2980  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2981  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2982  #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2983  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2984  ** Traceability     : [cover parentID={9FFEC06A-0EBC-47e5-A282-ACEC274E8F53}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2985  ** Syntax           : static void Uart_lReceiveStreamingData                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2986  **  (                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2987  **    Ifx_ASCLIN * const HwModulePtr,Uart_ChannelInfoType  *const             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2988  **      ChannelInfoPtr, const Uart_ChannelConfigType *const ChannelConfigPtr) **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2989  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2990  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2991  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2992  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2993  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2994  ** Reentrancy       : Reentrant(Not for same channel)                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2995  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2996  ** Parameters (in)  : ChannelConfigPtr - Uart channel to be addressed         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2997  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2998  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  2999  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3000  ** Parameters (inout) : HwModulePtr - ASCLIN SFR address                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3001  **                      ChannelInfoPtr - Channel information address          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3002  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3003  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3004  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3005  ** Description      : Function to copy received UART data from the hardware   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3006  **                    FIFO memory to the application buffer in in streaming   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3007  **                    mode.After copying the data, this function invokes the  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3008  **                    streaming notification function.                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3009  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3010  static void Uart_lReceiveStreamingData(Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3011                           Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3012                           const Uart_ChannelConfigType *const ChannelConfigPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3013  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3014    Uart_MemType *BuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3015    uint16 TempReadWord;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3016    uint16 NumBytesRead;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3017    uint8 UartFrameLen;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3018    uint8 ReadCount;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3019  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3020    /* [cover parentID={C153106A-7F7C-4b46-80FF-50316579342B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3021    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3022    /* Set buffer pointer with application buffer pointer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3023    BuffPtr =  ChannelInfoPtr->RxBuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3024  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3025    /* [cover parentID={F6C641EA-89C5-47c2-90BE-0AB04C0821BB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3026    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3027    /* Extract number of bytes to be read */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3028    NumBytesRead = HwModulePtr->RXFIFOCON.B.FILL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3029  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3030      /* [cover parentID={3F182B3C-78BE-4e43-8706-741A7DA6DE54}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3031      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3032      /*check buffer size is more than the received data size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3033      if(ChannelInfoPtr->RxBufSize >= NumBytesRead)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3034      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3035        /* Extract Uart frame length */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3036        UartFrameLen = ChannelConfigPtr->DataLength;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3037  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3038        /* [cover parentID={6F05ED73-AAD1-47cc-97AF-168854A1A293}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3039        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3040        /* Sart Read count from 0 */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3041        ReadCount = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3042  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3043        /* [cover parentID={73AC279E-0CE2-4ac0-9022-BBA8D8B5A0E1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3044        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3045        /* Copy all receive bytes in application buffer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3046        while(ReadCount < NumBytesRead)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3047        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3048          /* [cover parentID={4AFD2EDA-8C30-45f2-8E63-F2A5E8C2683D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3049          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3050          /* [cover parentID={400B8389-18A3-4200-997A-CCD88136548C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3051          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3052          /* Check frame size is 9 bit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3053          if(UartFrameLen >= UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3054          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3055            /* [cover parentID={10E32977-9B78-4612-AC59-9D7EE69A8684}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3056            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3057            /* Prepare 16 bits data and update application buffer */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3058            TempReadWord = (uint16)(HwModulePtr->RXDATA.U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3059            BuffPtr[ReadCount] = (Uart_MemType)(TempReadWord);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3060            BuffPtr[ReadCount + 1U] = (Uart_MemType)(TempReadWord >> \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3061                                      UART_SHIFT_EIGHT_BIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3062            /* Update local pointer and read count */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3063            ReadCount = ReadCount + UART_STEPSIZE_2BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3064          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3065          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3066          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3067            /* [cover parentID={F11DF8A3-ACE5-46ae-95C4-FEA9736CE017}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3068            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3069            /* Update application buffer  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3070            BuffPtr[ReadCount] = (Uart_MemType)(HwModulePtr->RXDATA.U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3071            /* Update read count  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3072            ReadCount = ReadCount + UART_STEPSIZE_1BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3073          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3074        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3075        /* [cover parentID={174E429E-6232-4d5e-852D-BACC92E5B5B6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3076        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3077        /* Flush the RXFIFO  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3078        HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3079  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3080       /* [cover parentID={0FA41AD8-D442-4810-8B71-E032707F980B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3081       [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3082       /* Check receive notification pointer is valid */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3083       if(ChannelConfigPtr->UartNotif.UartStreamingNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3084          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3085              /* [cover parentID={AECC2F47-5F8A-4105-B3BC-0EC30BA4C34F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3086              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3087              /* Call the streaming notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3088              ChannelConfigPtr->UartNotif.UartStreamingNotifPtr(UART_E_NO_ERR,\ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3089                                                                  NumBytesRead);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3090          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3091      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3092      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3093      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3094          /* [cover parentID={4ACDEA03-BF30-4377-95EE-83D4A6072D33}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3095          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3096          /* Check Runtime error is enabled */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3097          #if (UART_RUNTIME_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3098  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3099          /* [cover parentID={1DC396F2-F2D7-4d66-B8C6-2A6B128BD4D0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3100          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3101          /* Check channel is configured in polling mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3102          if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3103          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3104          /* [cover parentID={6BBD9C3F-381E-4390-9490-7D7B4352B876}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3105          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3106          /* Report runtime error with SID ISR error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3107          (void)Mcal_Wrapper_Det_ReportRuntimeError((uint16)UART_MODULE_ID,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3108                UART_INSTANCE_ID, UART_SID_ISR_RECEIVE,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3109                (uint8)UART_E_INSUFFICIENT_BUFSIZE);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3110          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3111          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3112          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3113          /* [cover parentID={619CAD25-5495-4742-B3E0-DE5F254CA644}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3114          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3115          /* Report runtime error with SID Main Read */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3116          (void)Mcal_Wrapper_Det_ReportRuntimeError((uint16)UART_MODULE_ID,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3117                UART_INSTANCE_ID, UART_SID_MAIN_READ,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3118                (uint8)UART_E_INSUFFICIENT_BUFSIZE);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3119          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3120          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3121  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3122            /* [cover parentID={54F5874C-8D4D-4279-8B02-EFAD5EDF34D2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3123            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3124            /* Disable and flush RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3125            HwModulePtr->RXFIFOCON.B.ENI = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3126            HwModulePtr->RXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3127  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3128            /* [cover parentID={BF9C5D27-41CE-41b6-8F15-70013C36488D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3129            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3130            /* Clear and disable Rx overflow and level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3131            Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3132  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3133            /* [cover parentID={DD8CD868-DE07-4905-B19D-BE50D63444A0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3134            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3135            #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3136            /* [cover parentID={DC18124C-D93A-4df7-BA4E-7D1EA5C3CAF2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3137            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3138              #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3139            /* [cover parentID={958C8206-EA40-40dd-9AC9-C60C4D0BC027}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3140            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3141            /* Check if read operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3142              if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3143            #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3144            {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3145              /* [cover parentID={815AC398-55E7-43c5-9EC1-DA988E4CAA0D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3146              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3147              /* Disable Rx overflow and level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3148              Uart_lDisableReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3149            }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3150            #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3151  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3152  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3153            /* [cover parentID={B7A5D6E0-6CA5-4323-B940-4C8D55D32D1B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3154            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3155            /* Reset channel info structure */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3156            ChannelInfoPtr->RxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3157            ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3158  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3159              /* [cover parentID={AD3825BD-009E-4e68-B468-01F68F8B3428}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3160              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3161              /* Check streaming notification function pointer not
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3162              equal to NULL    */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3163              if(ChannelConfigPtr->UartNotif.UartStreamingNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3164              {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3165              /* [cover parentID={2176AE4E-415B-4078-9422-843936C805C7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3166              [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3167              /*Call streaming notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3168              ChannelConfigPtr->UartNotif.UartStreamingNotifPtr(UART_E_INSUFFICIENT_BUFSIZE,UART_RECEIVED_DATA_SIZE_ZERO);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3169              }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3170        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3171  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3172  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3173  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3174  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3175  #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3176  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3177  ** Traceability     : [cover parentID={DF8BBEA1-D8F9-4586-A3A8-B4DEB37B6251}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3178  ** Syntax        : LOCAL_INLINE void Uart_lEnableReadInterrupts (Ifx_ASCLIN*  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3179  **                                                        const HwModulePtr)  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3180  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3181  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3182  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3183  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3184  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3185  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3186  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3187  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3188  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3189  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3190  ** Parameters (out): HwModulePtr - ASCLIN SFR address                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3191  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3192  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3193  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3194  ** Description     : Function to enable read and read error interrupt         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3195  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3196  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3197  LOCAL_INLINE void Uart_lEnableReadInterrupts(Ifx_ASCLIN *const HwModulePtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3198  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3199    /* [cover parentID={91EE71DB-78AE-492d-8863-A8562A8B0266}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3200    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3201    /* Enable RXFIFO level, RXFIFO overflow, Parity and Farame error
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3202       interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3203      HwModulePtr->FLAGSENABLE.U |= UART_PEE_FEE_RFLE_RFOE_MASK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3204  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3205  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3206  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3207  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3208  ** Traceability     : [cover parentID={75682D01-E6C0-4610-AA06-A016C12AE95F}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3209  ** Syntax : LOCAL_INLINE void Uart_lTrasmitComplete                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3210  **                   ( Ifx_ASCLIN *const HwModulePtr,                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3211  **                     Uart_ChannelInfoType *const ChannelInfoPtr,            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3212  **                     const Uart_ChannelConfigType *const ChannelConfigPtr   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3213  **                   )                                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3214  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3215  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3216  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3217  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3218  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3219  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3220  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3221  ** Parameters (in) : ChannelConfigPtr - Channel configuration pointer         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3222  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3223  ** Parameters (out): HwModulePtr - ASCLIN SFR address                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3224  **                   ChannelInfoPtr - Pointer to channel information          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3225  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3226  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3227  ** Description     : Function to handle transmit complete and call            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3228  **                   notification function.                                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3229  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3230  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3231  LOCAL_INLINE void Uart_lTrasmitComplete(Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3232                             Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3233                             const Uart_ChannelConfigType *const ChannelConfigPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3234  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3235    /* [cover parentID={A1B90D05-47E5-4c46-8724-53E8AB8DA654}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3236    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3237    /* [cover parentID={ED3F7704-5A67-43e1-95DC-915F3BC47308}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3238    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3239    #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3240      /* [cover parentID={8D3EDA15-9327-4fa4-8D55-F36AAD7DF3B2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3241      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3242      #if (UART_TX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3243    /* [cover parentID={103725A9-6587-4be8-A66A-DF5B6DAE3045}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3244    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3245    /* Check if write operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3246      if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3247    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3248    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3249      /* [cover parentID={8CF9B643-6688-4f18-A98A-38DECC376F36}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3250      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3251      /* Disable the tx complete  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3252      HwModulePtr->FLAGSENABLE.B.TCE = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3253    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3254    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3255    /* [cover parentID={8D2F1FE4-B08A-4f0e-8916-AA68A7878F70}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3256    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3257    /* Clear write interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3258    HwModulePtr->FLAGSCLEAR.B.TFLC = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3259    HwModulePtr->FLAGSCLEAR.B.TCC = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3260    /* Disable TXFIFO and clear transmit complete and TXFIFO level */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3261    HwModulePtr->TXFIFOCON.B.ENO = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3262    /* Flush TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3263    HwModulePtr->TXFIFOCON.B.FLUSH = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3264  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3265    /* Reset channel information */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3266    ChannelInfoPtr->TxBuffPtr = NULL_PTR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3267    ChannelInfoPtr->TotalDataTxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3268    ChannelInfoPtr->TxDataLeft = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3269    /* Reset chgannel state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3270    ChannelInfoPtr->ChanTxState = UART_TX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3271    /* [cover parentID={80DA3291-D8DD-49be-88C5-E8CFC9BB9157}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3272    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3273    /* [cover parentID={70B6F9A5-E16C-40de-8CD4-9621202AF56B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3274    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3275    /* Check transmit notification configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3276    if(ChannelConfigPtr->UartNotif.UartTransmitNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3277    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3278      /* [cover parentID={01E417EF-E08B-4a4a-8444-20507A5C90F4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3279      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3280      /* Call configured transmit notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3281      ChannelConfigPtr->UartNotif.UartTransmitNotifPtr(UART_E_NO_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3282    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3283  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3284  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3285  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3286  ** Traceability     : [cover parentID={EBF95C37-3036-46ac-BEF6-8BB484067D24}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3287  ** Syntax          : static void Uart_lReceiveError                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3288  **                   (                                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3289  **                      const Uart_ChannelConfigType *const ChannelConfigPtr, **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3290  **                      Ifx_ASCLIN *const HwModulePtr,                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3291  **                      Uart_ChannelInfoType *const ChannelInfoPtr            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3292  **                   )                                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3293  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3294  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3295  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3296  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3297  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3298  ** Reentrancy      : Reentrant  (Not for the same HW Unit)                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3299  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3300  ** Parameters (in) : ChannelConfigPtr: Channel configuration address          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3301  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3302  ** Parameters (out): none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3303  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3304  ** Parameters (inout): HwModulePtr: ASCLIN SFR address                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3305  **                     ChannelInfoPtr : Pointer to Uart Channel Information   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3306  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3307  ** Return value    : none                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3308  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3309  ** Description     : This function is called when receive error occur Uart    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3310  **                                                                channel     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3311  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3312  static void Uart_lReceiveError(
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3313                           const Uart_ChannelConfigType *const ChannelConfigPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3314                           Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3315                           Uart_ChannelInfoType *const ChannelInfoPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3316  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3317    Uart_ErrorIdType RuntimeErrorId;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3318    uint32 Flag;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3319    uint8 RecFillLevel;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3320  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3321    /* [cover parentID={70808A98-64CF-4e47-AB03-4CB547C62256}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3322    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3323    Flag = HwModulePtr->FLAGS.U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3324  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3325    /* [cover parentID={00CF2087-AFC0-4e9c-8B90-0BF4E07ACC42}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3326    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3327    /* Check parity error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3328    if ((Flag & UART_FLAGS_PE_MASK) != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3329    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3330      /* [cover parentID={E0D8F853-9CF2-4d01-93B9-356790F22FEF}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3331      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3332      RuntimeErrorId = UART_E_PARITY_ERR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3333    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3334    /* [cover parentID={A60CF471-DE7E-4104-A82E-6FCDB94A471E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3335    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3336    /* Check frame error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3337    else if((Flag & UART_FLAGS_FE_MASK) != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3338    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3339      /* [cover parentID={350F2AA4-E702-4531-8135-63601BF9D834}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3340      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3341      RuntimeErrorId = UART_E_FRAME_ERR;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3342    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3343    /* [cover parentID={34FCA751-EFB7-4a61-9C73-332F2F7BBB18}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3344    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3345    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3346    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3347      /* [cover parentID={C88B4DC4-6033-43aa-A301-66CFD11B02B0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3348      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3349      RuntimeErrorId = UART_E_RXFIFO_OVERFLOW;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3350    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3351  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3352    /* Clear read interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3353    Uart_lClearReadInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3354    /* [cover parentID={67AF5CD0-2FBE-4529-A45A-2E179FFC12CA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3355    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3356    #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3357    if((RuntimeErrorId == UART_E_RXFIFO_OVERFLOW) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3358      (ChannelInfoPtr->RxDataLeft <= UART_BUFFER_SIZE) &&
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3359      (ChannelInfoPtr->ChanRxMode == UART_RX_IN_READ_MODE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3360    #else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3361    if((RuntimeErrorId == UART_E_RXFIFO_OVERFLOW) && \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3362      (ChannelInfoPtr->RxDataLeft <= UART_BUFFER_SIZE))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3363    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3364    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3365      /* [cover parentID={9512703C-DAB4-43b4-B13C-E237379CFCC8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3366      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3367      RecFillLevel = HwModulePtr->RXFIFOCON.B.FILL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3368      Uart_lRead(HwModulePtr, ChannelInfoPtr, ChannelConfigPtr, RecFillLevel);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3369    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3370    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3371    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3372      /* Disable RXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3373      HwModulePtr->RXFIFOCON.B.ENI = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3374      /* [cover parentID={ACE3E6EC-6598-460f-8EF5-4974F827BE8C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3375      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3376      ChannelInfoPtr->TotalDataRxd = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3377  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3378      #if (UART_RUNTIME_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3379      /* [cover parentID={5C974F7C-16C2-44bf-8350-6A2635027C83}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3380      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3381      /* Report runtime error */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3382      if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3383      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3384        (void)Mcal_Wrapper_Det_ReportRuntimeError((uint16)UART_MODULE_ID,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3385              UART_INSTANCE_ID,UART_SID_ISR_ERROR,(uint8)RuntimeErrorId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3386      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3387      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3388      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3389        (void)Mcal_Wrapper_Det_ReportRuntimeError((uint16)UART_MODULE_ID,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3390              UART_INSTANCE_ID, UART_SID_MAIN_READ,(uint8)RuntimeErrorId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3391      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3392      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3393  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3394      ChannelInfoPtr->RxNotfn = UART_RX_NOTFN_TRIGGERED;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3395      /* Reset channel rx state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3396      ChannelInfoPtr->ChanRxState = UART_RX_IDLE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3397  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3398      #if(UART_RECEIVE_STREAMING_MODE_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3399      /* Check channel read operation in streaming mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3400      /* [cover parentID={1CE96BB7-2735-4829-8CC6-F0DB67F5C165}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3401          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3402      if(ChannelInfoPtr->ChanRxMode == UART_RX_IN_STREAMING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3403      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3404          /* [cover parentID={24CF1C07-09FC-4064-8F22-54D537AEC26D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3405          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3406          /* Check receive notification pointer is valid */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3407          if(ChannelConfigPtr->UartNotif.UartStreamingNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3408          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3409          /* [cover parentID={25227751-C359-43c4-9E0F-23C2DD087360}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3410          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3411          /* Call the streaming notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3412          ChannelConfigPtr->UartNotif.UartStreamingNotifPtr(RuntimeErrorId,\ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3413                                                                  UART_RECEIVED_DATA_SIZE_ZERO);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3414          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3415      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3416      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3417      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3418      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3419          /* [cover parentID={3FA7B157-4BD2-4f14-9AA5-266D39BAAE71}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3420          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3421          if(ChannelConfigPtr->UartNotif.UartReceiveNotifPtr != NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3422          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3423          /* [cover parentID={BF027EB9-43C9-4b7a-908F-E2CFFE12AABD}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3424          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3425          /*Call receive notification function */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3426          ChannelConfigPtr->UartNotif.UartReceiveNotifPtr(RuntimeErrorId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3427          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3428      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3429    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3430  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3431  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3432  #if(UART_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3433  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3434  ** Traceability     : [cover parentID={367E1272-8885-406b-AF34-D5D4383CD5AC}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3435  ** Syntax           : LOCAL_INLINE Std_ReturnType Uart_lCheckChannelInfo      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3436  **                    (                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3437  **                       const uint8 Channel                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3438  **                    )                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3439  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3440  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3441  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3442  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3443  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3444  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3445  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3446  ** Parameters (in)  : Channel - Uart channel identifier                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3447  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3448  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3449  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3450  ** Return value     : E_OK: Channel information is set to init value.         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3451  **                    E_NOT_OK: Channel informatin differs from init value    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3452  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3453  ** Description      : Check channel information                               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3454  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3455  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3456  LOCAL_INLINE Std_ReturnType Uart_lCheckChannelInfo(const uint8 Channel)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3457  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3458    const Uart_ChannelInfoType *ChannelInfoPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3459    Std_ReturnType ErrorFlag;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3460  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3461    /* [cover parentID={0103085B-2794-4bbe-B2DF-A7B950066D61}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3462    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3463    ErrorFlag = E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3464    ChannelInfoPtr = &Uart_ChannelInfo[Channel];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3465  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3466    /* [cover parentID={F4AD5286-B497-45a7-A6F9-C0CA80E18B37}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3467    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3468    /* Check Uart driver TxState */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3469    if(ChannelInfoPtr->ChanTxState != UART_TX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3470    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3471      /* [cover parentID={761B79D5-4318-4920-A36C-466EDD0663AB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3472      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3473      ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3474    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3475    /* [cover parentID={F4AD5286-B497-45a7-A6F9-C0CA80E18B37}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3476    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3477    /* Check Uart driver RxState */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3478    else if(ChannelInfoPtr->ChanRxState != UART_RX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3479    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3480      /* [cover parentID={761B79D5-4318-4920-A36C-466EDD0663AB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3481      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3482      ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3483    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3484    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3485    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3486      /* Do nothing */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3487    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3488  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3489    return ErrorFlag;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3490  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3491  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3492  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3493  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3494  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3495  ** Traceability     : [cover parentID={0E2EF27E-87E6-44b6-A8D1-0B0F53693E42}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3496  ** Syntax           : static void Uart_lHwInitKernelReg                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3497  **                      (Ifx_ASCLIN *const HwModulePtr)                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3498  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3499  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3500  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3501  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3502  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3503  ** Reentrancy       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3504  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3505  ** Parameters (in)  : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3506  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3507  ** Parameters (inout) : HwModulePtr: ASCLIN SFR address                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3508  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3509  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3510  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3511  ** Description      : This function resets the Kernel                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3512  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3513  static void Uart_lHwInitKernelReg(Ifx_ASCLIN *const HwModulePtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3514  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3515    uint32 RegUpdate;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3516    uint32 TimerStatusWaitTicks;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3517    uint32 DelayTickResolution;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3518  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3519    /* Get STM timer current resolution and calculate maximum number of ticks
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3520       to wait before expected hardware behaviour is occurd- That timer
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3521       correcttion */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3522  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3523    /* [cover parentID={A29E9A04-F971-4938-8DC8-984382154670}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3524    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3525    DelayTickResolution = Mcal_DelayTickResolution();
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3526    /* [cover parentID={7D42675D-7BE4-4c46-81AF-7F7A77BC5ACA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3527    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3528    TimerStatusWaitTicks  = (UART_MAXTIMEOUT_COUNT / DelayTickResolution);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3529    /* Do not allow ticks to wait to be zero, if STM timer resolution is lower*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3530    if(TimerStatusWaitTicks == 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3531    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3532      TimerStatusWaitTicks++;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3533    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3534  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3535    /* [cover parentID={53F37258-33BA-4a24-95FF-60EC7CB51910}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3536    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3537    RegUpdate = HwModulePtr->KRST0.U | UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3538    /* Update kernel register with end init protection */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3539    UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->KRST0.U, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3540        RegUpdate);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3541  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3542    /* [cover parentID={E0D40F8C-5439-4b03-BF96-BA0F595CC45E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3543    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3544    RegUpdate = HwModulePtr->KRST1.U | UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3545    /* Update kernel register with end init protection */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3546    UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->KRST1.U, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3547        RegUpdate);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3548    /* [cover parentID={A5AECAA1-573E-4f77-BD20-C5BABD90DB32}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3549    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3550    Uart_lStatusTimeout(TimerStatusWaitTicks, HwModulePtr, UART_REG_TYPE_KRST0, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3551                        1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3552    /* [cover parentID={FD383EED-A252-41c2-8766-75EB220372D0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3553    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3554    RegUpdate = HwModulePtr->KRSTCLR.U | UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3555  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3556    /* Clear kernel reset register status with end init protection */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3557    UART_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->KRSTCLR.U, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3558        RegUpdate);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3559  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3560  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3561  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3562  ** Traceability     : [cover parentID={DF7C10DC-6389-4e5d-8C63-09A266323872}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3563  ** Syntax           : static void Uart_lHwInit(const uint8 HwUnit,            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3564  **                            Uart_ChannelConfigType *const ChannelConfigPtr) **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3565  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3566  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3567  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3568  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3569  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3570  ** Reentrancy       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3571  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3572  ** Parameters (in)  : HwUnit - ASCLIN Hardware module number                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3573  **                    ChannelConfigPtr - Channel configuration address        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3574  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3575  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3576  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3577  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3578  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3579  ** Description      : This function initializes the ASCLIN Hw module          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3580  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3581  static void Uart_lHwInit(const uint8 HwUnit,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3582                             const Uart_ChannelConfigType *const ChannelConfigPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3583  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3584    Ifx_ASCLIN *HwModulePtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3585    uint32 TimerStatusWaitTicks;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3586    uint32 DelayTickResolution;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3587  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3588    /* [cover parentID={0C5CFB02-17FE-413e-A9F1-960F716044BE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3589    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3590    /* Extract ASCLIN SFR base address */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3591    HwModulePtr = Uart_HwModuleAddr[HwUnit];
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3592  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3593    /* Get STM timer current resolution and calculate maximum number of ticks
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3594    to wait before expected hardware behaviour is occured That timer correcttion
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3595    */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3596    DelayTickResolution = Mcal_DelayTickResolution();
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3597    TimerStatusWaitTicks  = (UART_MAXTIMEOUT_COUNT / DelayTickResolution);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3598    /* Do not allow ticks to wait to be zero, if STM timer resolution is lower*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3599    if(TimerStatusWaitTicks == 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3600    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3601      TimerStatusWaitTicks++;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3602    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3603  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3604    /* [cover parentID={BBA16715-4ACF-48b4-97AE-D552CEC1DDA7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3605    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3606    /* Disable module clock */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3607    HwModulePtr->CSR.B.CLKSEL = UART_CSRREG_CLKSEL_NOCLK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3608    Uart_lStatusTimeout(TimerStatusWaitTicks, HwModulePtr, UART_REG_TYPE_CSR, 0U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3609    /* [cover parentID={CC3188E3-5D67-4ab5-9ACE-7B0D39E71894}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3610    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3611    /* Change ASCLIN hardware to init mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3612    HwModulePtr->FRAMECON.B.MODE = UART_FRAMECONREG_INIT_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3613  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3614    /* [cover parentID={D6E11FE5-C198-4303-8402-C67F41DB53EC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3615    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3616    /* Set module in ASC mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3617    HwModulePtr->FRAMECON.B.MODE = UART_FRAMECONREG_ASCLIN_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3618  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3619    /* [cover parentID={07F278FC-7CC5-4f39-9CB3-9162B9184DC5}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3620    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3621    /* Configure baudrate parameters */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3622    HwModulePtr->BRG.B.NUMERATOR = ChannelConfigPtr->ChanBaudRateNumerator;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3623    HwModulePtr->BRG.B.DENOMINATOR = ChannelConfigPtr->ChanBaudRateDenominator;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3624    HwModulePtr->BITCON.B.PRESCALER = ChannelConfigPtr->ChanBaudRatePrescalar;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3625    HwModulePtr->BITCON.B.OVERSAMPLING = ChannelConfigPtr->ChanOversampling;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3626  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3627    /* Set digital glitch  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3628    HwModulePtr->IOCR.B.DEPTH = UART_IOCRREG_DEPTH_VAL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3629    /* Configure CTS */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3630    HwModulePtr->IOCR.B.CTS = ChannelConfigPtr->CTSPin;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3631    HwModulePtr->IOCR.B.CTSEN = ChannelConfigPtr->CtsEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3632    HwModulePtr->IOCR.B.RCPOL = ChannelConfigPtr->CtsPolarity;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3633  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3634    /* Configure Sample mode(3 Bit), Sample point, Parity, Collision detection */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3635    HwModulePtr->BITCON.B.SM = UART_BITCONREG_SM_VAL;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3636    HwModulePtr->BITCON.B.SAMPLEPOINT = (((ChannelConfigPtr->ChanOversampling) \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3637                                          >> UART_SHIFT_ONE_BIT) + 1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3638    HwModulePtr->FRAMECON.B.PEN = ChannelConfigPtr->ParityEnable;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3639    HwModulePtr->FRAMECON.B.ODD = ChannelConfigPtr->Parity;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3640    HwModulePtr->FRAMECON.B.IDLE = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3641    HwModulePtr->FRAMECON.B.STOP = ChannelConfigPtr->StopBits;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3642  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3643    /* Configure TX and RX FIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3644    if(ChannelConfigPtr->DataLength < UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3645    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3646      HwModulePtr->TXFIFOCON.B.INW = UART_TXFIFOCONREG_INW_1BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3647      HwModulePtr->RXFIFOCON.B.OUTW = UART_RXFIFOCONREG_OUTW_1BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3648    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3649    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3650    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3651      HwModulePtr->TXFIFOCON.B.INW = UART_TXFIFOCONREG_INW_2BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3652      HwModulePtr->RXFIFOCON.B.OUTW = UART_RXFIFOCONREG_OUTW_2BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3653    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3654  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3655    /* Set frame length */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3656    HwModulePtr->DATCON.B.DATLEN = (ChannelConfigPtr->DataLength - 1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3657    /* Disable loop back mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3658    HwModulePtr->IOCR.B.LB = UART_CLEAR_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3659    /* Select receive line */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3660    HwModulePtr->IOCR.B.ALTI = ChannelConfigPtr->RxPin;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3661  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3662    /* [cover parentID={882A0ABB-B2C0-4858-A8E7-114578D3078C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3663    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3664    #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3665    /* [cover parentID={86048A7F-0315-4187-AA96-281FFB1C7A60}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3666    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3667      #if (UART_RX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3668      /* [cover parentID={4E990346-845E-4d92-9DA1-AAE130E52C17}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3669      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3670      /* Check channel RX configured in polling mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3671      if(ChannelConfigPtr->RxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3672      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3673        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3674          /* [cover parentID={1DE53D6E-21E0-4d68-9566-763E8E84C27D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3675          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3676          /* Set RXFIFO interrupt mode to combined move mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3677          HwModulePtr->RXFIFOCON.B.FM = UART_COMBINED_MOVE_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3678        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3679    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3680        /* [cover parentID={8B5E505A-328A-4789-B5B5-5BEE75D26559}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3681        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3682    #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3683          /* [cover parentID={A044B012-4825-426b-820D-9B4AC20A45FB}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3684          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3685          #if (UART_TX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3686          /* [cover parentID={E9A00803-E25B-4a91-9415-D034E0013612}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3687          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3688          /* Check channel TX configured in polling mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3689          if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3690          #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3691        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3692          /* [cover parentID={16764FF0-34F4-4d8d-9571-008EA1430E51}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3693          [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3694          /* Set TXFIFO interrupt mode to combined move mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3695          HwModulePtr->TXFIFOCON.B.FM = UART_COMBINED_MOVE_MODE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3696        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3697    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3698    /* [cover parentID={43B19A4C-BBC3-4cf1-87F9-0EDB839278F1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3699    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3700    /* Enable clock source */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3701    HwModulePtr->CSR.B.CLKSEL = UART_CSRREG_CLKSEL_CLC;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3702    Uart_lStatusTimeout(TimerStatusWaitTicks, HwModulePtr, UART_REG_TYPE_CSR, 1U);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3703  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3704  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3705  ** Traceability     : [cover parentID={D59BD65F-70B6-4b5a-AD67-E2A896B85404}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3706  ** Syntax           : static void Uart_lStatusTimeout                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3707  **                                 ( const uint32 WaitTicks,                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3708  **                                   const Ifx_ASCLIN *const HwModulePtr,     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3709  **                                   const uint8 RegisterType,                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3710  **                                   const uint8 ExpStatValue                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3711  **                                 )                                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3712  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3713  ** Description      : Function to check that status bit set before timeout    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3714  **                    happens.                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3715  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3716  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3717  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3718  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3719  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3720  ** Reentrancy       : NA                                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3721  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3722  ** Parameters (in)  : WaitTicks - Number of ticks to wait for timeout.        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3723  **                    HwModulePtr - ASCLIN SFR address                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3724  **                    RegisterType - Status register type which to be target. **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3725  **                    ExpStatValue - Expected status bit value.               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3726  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3727  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3728  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3729  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3730  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3731  static void Uart_lStatusTimeout(const uint32 WaitTicks,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3732                                  const Ifx_ASCLIN *const HwModulePtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3733                                  const uint8 RegisterType,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3734                                  const uint8 ExpStatValue)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3735  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3736    uint32 BaseSTMTick;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3737    uint32 CurrSTMTick;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3738    uint32 RegVal;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3739    Std_ReturnType TimeExpired;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3740  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3741    /* [cover parentID={6A5F5BD8-CD64-4e73-96A8-E82D55159073}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3742    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3743    /*Get current STM tick*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3744    CurrSTMTick = Mcal_DelayGetTick();
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3745    BaseSTMTick = CurrSTMTick;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3746    TimeExpired = E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3747  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3748    /* [cover parentID={6E973609-424A-4c12-A8F4-015A3834242D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3749      Loop for status update done.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3750    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3751    do
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3752    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3753      /* [cover parentID={76371218-F5C9-48e5-A445-2478CDD56012}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3754      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3755      /* [cover parentID={AAD20E1B-4BB0-485b-878C-5C47CC1582DF}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3756      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3757      /* MISRA2012_RULE_11_4_JUSTIFICATION: conversion between pointer and
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3758      integer type. Permitted for special function registers.*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3759      if(RegisterType == UART_REG_TYPE_CSR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3760      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3761        /* [cover parentID={A2C2A6A5-21A6-4310-ABA8-CF9FC38D4F5D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3762        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3763        RegVal = (uint32)HwModulePtr->CSR.B.CON;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3764      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3765      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3766      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3767        /* [cover parentID={1CFD98F3-822D-406c-BE51-404D8E774125}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3768        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3769        RegVal = HwModulePtr->KRST0.B.RSTSTAT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3770      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3771      /* [cover parentID={AED264A4-270A-4047-AD27-9C235510C65C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3772      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3773  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3774      /* [cover parentID={A84DE59C-7029-465f-929A-39FED046CDE6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3775      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3776      /* Check wait time is reached at maxmum timeout configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3777      if((((uint32)((CurrSTMTick - BaseSTMTick) & UART_STM_TICK_OVERFLOW)) >= \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3778          WaitTicks) && (RegVal != (uint32)ExpStatValue))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3779      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3780        /* [cover parentID={D4847441-A13C-430f-9648-91798A838D6E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3781        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3782        /* Timeout happend status bit is not set as expected */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3783        TimeExpired = E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3784      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3785      /* [cover parentID={69F6903F-DBB9-4fbb-9BB8-5854C84CC22E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3786      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3787      /*Get current STM tick*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3788      CurrSTMTick = Mcal_DelayGetTick();
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3789      /* [cover parentID={39253746-B158-429f-872A-843663F45392}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3790          Timeout not occured and status not updated with expected value.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3791      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3792    } while((RegVal != (uint32)ExpStatValue) && (TimeExpired == E_OK));
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3793  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3794  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3795  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3796  #if (UART_RX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3797  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3798  ** Traceability     : [cover parentID={63FFEA45-0466-45fd-9AB8-82E59A13CC54}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3799  ** Syntax : LOCAL_INLINE void Uart_lDisableReadInterrupts (Ifx_ASCLIN         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3800  **                                                       *const HwModulePtr)  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3801  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3802  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3803  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3804  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3805  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3806  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3807  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3808  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3809  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3810  ** Parameters (out): HwModulePtr - ASCLIN SFR address                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3811  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3812  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3813  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3814  ** Description     : Function to disable Rx and Err interrupts                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3815  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3816  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3817  LOCAL_INLINE void Uart_lDisableReadInterrupts(Ifx_ASCLIN *const HwModulePtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3818  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3819  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3820    /* [cover parentID={2AF4CAE3-BC96-42d9-BDDD-9E6529DADC8E}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3821    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3822    /* Disable Parity, Frame, RXFIFO overflow and RXFIFO level interrupt errror */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3823    HwModulePtr->FLAGSENABLE.U &= ~(UART_PEE_FEE_RFLE_RFOE_MASK);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3824  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3825  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3826  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3827  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3828  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3829  ** Traceability     : [cover parentID={84BCA044-D446-415e-9ADA-6841E25E2565}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3830  ** Syntax :LOCAL_INLINE void Uart_lClearReadInterrupts(Ifx_ASCLIN *const      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3831  **                                                             HwModulePtr)   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3832  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3833  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3834  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3835  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3836  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3837  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3838  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3839  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3840  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3841  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3842  ** Parameters (out): HwModulePtr - ASCLIN SFR address                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3843  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3844  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3845  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3846  ** Description     : Function to Clear RXFIFO level and Err interrupts        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3847  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3848  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3849  LOCAL_INLINE void Uart_lClearReadInterrupts(Ifx_ASCLIN *const HwModulePtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3850  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3851    /* [cover parentID={65E044B3-4C48-4c66-8C1A-7EF9801C562B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3852    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3853    /* Clear Parity, Frame, RxFIFO overflow and RxFIFO level interrupts */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3854    HwModulePtr->FLAGSCLEAR.U |= (UART_PEE_FEE_RFLE_RFOE_MASK);
	ld.w	d15,[a2]60
.L572:
	movh	d0,#5125
.L573:
	or	d15,d0
	st.w	[a2]60,d15
.L219:
	mov	d15,#16
.L574:
	jge.u	d5,d15,.L9
.L575:
	add	d5,#-1
.L400:
	extr.u	d15,d5,#0,#8
.L404:
	j	.L10
.L9:
	mov	d15,#15
.L10:
	ld.bu	d0,[a2]17
.L576:
	insert	d0,d0,d15,#0,#4
	st.b	[a2]17,d0
.L577:
	add	d15,#1
.L405:
	st.b	[a15]18,d15
.L224:
	ld.w	d15,[a2]64
.L578:
	movh	d0,#5125
.L579:
	or	d15,d0
	st.w	[a2]64,d15
.L225:
	ld.bu	d15,[a2]16
.L580:
	or	d15,#2
	st.b	[a2]16,d15
.L581:
	mov	d15,#2
.L582:
	st.b	[a15]9,d15
.L583:
	ret
.L205:
	
__Uart_Read_function_end:
	.size	Uart_Read,__Uart_Read_function_end-Uart_Read
.L120:
	; End of function
	
	.sdecl	'.text.Uart_Write.Code.Cpu0',code,cluster('Uart_Write')
	.sect	'.text.Uart_Write.Code.Cpu0'
	.align	2
	
	.global	Uart_Write
; Function Uart_Write
.L86:
Uart_Write:	.type	func
	mov	d8,#0
.L408:
	mul	d15,d4,#20
.L588:
	movh.a	a15,#@his(Uart_ChannelInfo)
	lea	a15,[a15]@los(Uart_ChannelInfo)
.L589:
	addsc.a	a15,a15,d15,#0
.L409:
	ld.bu	d15,[a15]8
.L590:
	jeq	d15,#0,.L12
.L591:
	mov	d8,#2
.L592:
	j	.L13
.L12:
	mov	d15,#1
.L593:
	st.b	[a15]8,d15
.L594:
	mul	d15,d4,#40
.L595:
	movh.a	a2,#@his(Uart_ConfigPtr)
	ld.a	a2,[a2]@los(Uart_ConfigPtr)
.L596:
	ld.a	a2,[a2]
.L597:
	addsc.a	a6,a2,d15,#0
.L410:
	ld.bu	d15,[a6]27
.L598:
	movh.a	a2,#@his(Uart_HwModuleAddr)
	lea	a2,[a2]@los(Uart_HwModuleAddr)
.L599:
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
.L411:
	st.a	[a15]4,a4
.L600:
	st.h	[a15]10,d5
.L601:
	mov	d15,#0
.L602:
	st.h	[a15]14,d15
.L603:
	ld.bu	d15,[a2]12
.L604:
	or	d15,#1
	st.b	[a2]12,d15
.L605:
	mov.aa	a4,a2
.L407:
	mov.aa	a5,a15
.L412:
	call	Uart_lWrite
.L406:
	mov	d15,#2
.L606:
	st.b	[a15]8,d15
.L13:
	mov	d2,d8
.L413:
	ret
.L229:
	
__Uart_Write_function_end:
	.size	Uart_Write,__Uart_Write_function_end-Uart_Write
.L125:
	; End of function
	
	.sdecl	'.text.Uart_GetStatus.Code.Cpu0',code,cluster('Uart_GetStatus')
	.sect	'.text.Uart_GetStatus.Code.Cpu0'
	.align	2
	
	.global	Uart_GetStatus
; Function Uart_GetStatus
.L88:
Uart_GetStatus:	.type	func
	mul	d15,d4,#20
.L611:
	movh.a	a15,#@his(Uart_ChannelInfo)
	lea	a15,[a15]@los(Uart_ChannelInfo)
.L612:
	addsc.a	a15,a15,d15,#0
.L414:
	ld.bu	d15,[a15]8
.L415:
	ld.bu	d0,[a15]9
.L416:
	jeq	d15,#0,.L15
.L613:
	jeq	d0,#0,.L16
.L614:
	mov	d2,#3
.L417:
	ret
.L16:
.L15:
	jeq	d15,#0,.L18
.L615:
	mov	d2,#1
.L418:
	ret
.L18:
	ne	d2,d0,#0
.L419:
	sha	d2,#1
.L616:
	ret
.L241:
	
__Uart_GetStatus_function_end:
	.size	Uart_GetStatus,__Uart_GetStatus_function_end-Uart_GetStatus
.L130:
	; End of function
	
	.sdecl	'.text.Uart_IsrReceive.Code.Cpu0',code,cluster('Uart_IsrReceive')
	.sect	'.text.Uart_IsrReceive.Code.Cpu0'
	.align	2
	
	.global	Uart_IsrReceive
; Function Uart_IsrReceive
.L90:
Uart_IsrReceive:	.type	func
	jge.u	d4,#12,.L21
.L621:
	movh.a	a15,#@his(Uart_HwModuleAddr)
	lea	a15,[a15]@los(Uart_HwModuleAddr)
.L622:
	addsc.a	a15,a15,d4,#2
	ld.a	a4,[a15]
.L421:
	movh.a	a15,#@his(Uart_ConfigPtr)
	ld.a	a15,[a15]@los(Uart_ConfigPtr)
.L623:
	ld.a	a2,[a15]4
.L624:
	addsc.a	a2,a2,d4,#0
	ld.bu	d0,[a2]
.L422:
	mov	d15,#255
.L625:
	jeq	d15,d0,.L22
.L626:
	mul	d15,d0,#40
.L627:
	ld.a	a15,[a15]
.L628:
	addsc.a	a6,a15,d15,#0
.L424:
	mul	d15,d0,#20
.L629:
	movh.a	a15,#@his(Uart_ChannelInfo)
	lea	a15,[a15]@los(Uart_ChannelInfo)
.L630:
	addsc.a	a5,a15,d15,#0
.L425:
	ld.bu	d15,[a4]18
	and	d0,d15,#31
.L423:
	ld.bu	d15,[a4]55
	extr.u	d1,d15,#4,#1
.L426:
	ld.bu	d15,[a4]67
	extr.u	d2,d15,#4,#1
.L427:
	ld.bu	d15,[a4]63
.L631:
	or	d15,#16
	st.b	[a4]63,d15
.L632:
	ld.bu	d15,[a5]19
.L633:
	jeq	d15,#1,.L23
.L634:
	ld.bu	d15,[a5]9
.L635:
	jeq	d15,#4,.L24
.L636:
	jeq	d15,#5,.L25
.L637:
	jne	d15,#2,.L26
.L638:
	ld.bu	d15,[a5]18
.L639:
	jlt.u	d0,d15,.L27
.L640:
	jeq	d2,#0,.L28
.L641:
	jeq	d1,#0,.L29
.L642:
	mov	d4,#0
.L420:
	j	Uart_lRead
.L25:
.L24:
.L23:
	mov	d15,#0
.L643:
	st.b	[a5]19,d15
.L29:
.L28:
.L27:
.L26:
.L22:
.L21:
	ret
.L251:
	
__Uart_IsrReceive_function_end:
	.size	Uart_IsrReceive,__Uart_IsrReceive_function_end-Uart_IsrReceive
.L135:
	; End of function
	
	.sdecl	'.text.Uart_IsrTransmit.Code.Cpu0',code,cluster('Uart_IsrTransmit')
	.sect	'.text.Uart_IsrTransmit.Code.Cpu0'
	.align	2
	
	.global	Uart_IsrTransmit
; Function Uart_IsrTransmit
.L92:
Uart_IsrTransmit:	.type	func
	jge.u	d4,#12,.L31
.L648:
	movh.a	a15,#@his(Uart_HwModuleAddr)
	lea	a15,[a15]@los(Uart_HwModuleAddr)
.L649:
	addsc.a	a15,a15,d4,#2
	ld.a	a4,[a15]
.L428:
	movh.a	a2,#@his(Uart_ConfigPtr)
	ld.a	a15,[a2]@los(Uart_ConfigPtr)
.L650:
	ld.a	a15,[a15]4
.L651:
	addsc.a	a15,a15,d4,#0
	ld.bu	d0,[a15]
.L429:
	mov	d15,#255
.L652:
	jeq	d15,d0,.L32
.L653:
	mul	d15,d0,#20
.L654:
	movh.a	a15,#@his(Uart_ChannelInfo)
	lea	a15,[a15]@los(Uart_ChannelInfo)
.L655:
	addsc.a	a5,a15,d15,#0
.L430:
	ld.bu	d15,[a4]14
	and	d1,d15,#31
.L431:
	ld.bu	d15,[a4]55
	extr.u	d2,d15,#7,#1
.L432:
	ld.bu	d15,[a4]67
	extr.u	d3,d15,#7,#1
.L433:
	ld.bu	d15,[a4]63
.L656:
	or	d15,#128
	st.b	[a4]63,d15
.L657:
	jne	d1,#0,.L33
.L658:
	ld.bu	d15,[a5]8
.L659:
	jne	d15,#2,.L34
.L660:
	jeq	d2,#0,.L35
.L661:
	jeq	d3,#0,.L36
.L662:
	mul	d15,d0,#40
.L663:
	ld.a	a15,[a2]@los(Uart_ConfigPtr)
.L664:
	ld.a	a15,[a15]
.L665:
	addsc.a	a6,a15,d15,#0
.L434:
	j	Uart_lWrite
.L36:
.L35:
.L34:
.L33:
.L32:
.L31:
	ret
.L261:
	
__Uart_IsrTransmit_function_end:
	.size	Uart_IsrTransmit,__Uart_IsrTransmit_function_end-Uart_IsrTransmit
.L140:
	; End of function
	
	.sdecl	'.text.Uart_IsrError.Code.Cpu0',code,cluster('Uart_IsrError')
	.sect	'.text.Uart_IsrError.Code.Cpu0'
	.align	2
	
	.global	Uart_IsrError
; Function Uart_IsrError
.L94:
Uart_IsrError:	.type	func
	jge.u	d4,#12,.L37
.L670:
	movh.a	a15,#@his(Uart_HwModuleAddr)
	lea	a15,[a15]@los(Uart_HwModuleAddr)
.L671:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L436:
	movh.a	a2,#@his(Uart_ConfigPtr)
	ld.a	a2,[a2]@los(Uart_ConfigPtr)
.L672:
	ld.a	a4,[a2]4
.L673:
	addsc.a	a4,a4,d4,#0
	ld.bu	d0,[a4]
.L438:
	mov	d15,#255
.L674:
	jeq	d15,d0,.L38
.L675:
	mul	d15,d0,#40
.L676:
	ld.a	a2,[a2]
.L677:
	addsc.a	a13,a2,d15,#0
.L440:
	mul	d15,d0,#20
.L678:
	movh.a	a2,#@his(Uart_ChannelInfo)
	lea	a2,[a2]@los(Uart_ChannelInfo)
.L679:
	addsc.a	a12,a2,d15,#0
.L441:
	ld.bu	d15,[a12]9
.L442:
	ld.w	d8,[a15]52
.L680:
	movh	d0,#1029
.L439:
	and	d8,d0
.L681:
	ld.w	d1,[a15]64
.L444:
	and	d0,d1
.L682:
	ld.bu	d1,[a15]66
.L683:
	ld.bu	d2,[a15]54
.L446:
	and	d0,d8
.L445:
	and.t	d9,d2:1,d1:1
.L447:
	jne	d15,#2,.L39
.L684:
	jne	d0,#0,.L40
.L39:
	ld.bu	d15,[a12]19
.L443:
	jne	d15,#1,.L41
.L40:
	ld.bu	d15,[a12]19
.L685:
	jne	d15,#0,.L42
.L686:
	mov.aa	a4,a13
.L448:
	mov.aa	a5,a15
.L449:
	mov.aa	a6,a12
.L450:
	call	Uart_lReceiveError
.L435:
	j	.L43
.L42:
	mov	d0,#0
.L451:
	st.b	[a12]19,d0
.L43:
.L41:
	jeq	d8,#0,.L44
.L285:
	ld.w	d15,[a15]60
.L687:
	movh	d0,#5125
.L688:
	or	d15,d0
	st.w	[a15]60,d15
.L44:
	jeq	d9,#0,.L45
.L288:
	ld.bu	d15,[a15]66
.L689:
	insert	d15,d15,#0,#1,#1
	st.b	[a15]66,d15
.L690:
	ld.bu	d15,[a15]63
.L691:
	or	d15,#128
	st.b	[a15]63,d15
.L692:
	ld.bu	d15,[a15]62
.L693:
	or	d15,#2
	st.b	[a15]62,d15
.L694:
	ld.bu	d15,[a15]12
.L695:
	insert	d15,d15,#0,#1,#1
	st.b	[a15]12,d15
.L696:
	ld.bu	d15,[a15]12
.L697:
	or	d15,#1
	st.b	[a15]12,d15
.L698:
	mov.a	a15,#0
.L437:
	st.a	[a12]4,a15
.L699:
	mov	d4,#0
.L700:
	st.h	[a12]14,d4
.L701:
	st.h	[a12]10,d4
.L702:
	st.b	[a12]8,d4
.L703:
	ld.w	d15,[a13]
.L704:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3276    if(ChannelConfigPtr->UartNotif.UartTransmitNotifPtr != NULL_PTR)      (inlined)
	jeq	d15,#0,.L46
.L705:
	ld.a	a15,[a13]
.L706:
	ji	a15

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3276    if(ChannelConfigPtr->UartNotif.UartTransmitNotifPtr != NULL_PTR)      (inlined)
.L46:
.L45:
.L38:
.L37:
	ret
.L271:
	
__Uart_IsrError_function_end:
	.size	Uart_IsrError,__Uart_IsrError_function_end-Uart_IsrError
.L145:
	; End of function
	
	.sdecl	'.text.Uart_lRead.Code.Cpu0',code,cluster('Uart_lRead')
	.sect	'.text.Uart_lRead.Code.Cpu0'
	.align	2
	
; Function Uart_lRead
.L96:
Uart_lRead:	.type	func
	ld.a	a2,[a5]
.L453:
	ld.bu	d0,[a5]18
.L454:
	ld.bu	d1,[a6]29
.L456:
	mov	d15,#0
.L457:
	j	.L47
.L48:
	jlt.u	d1,#9,.L49
.L733:
	ld.w	d2,[a4]72
.L734:
	extr.u	d2,d2,#0,#16
.L459:
	addsc.a	a15,a2,d15,#0
.L735:
	st.b	[a15],d2
.L736:
	sha	d2,#-8
.L460:
	st.b	[a15]1,d2
.L737:
	add	d15,#2
.L458:
	j	.L50
.L49:
	addsc.a	a15,a2,d15,#0
.L738:
	ld.w	d2,[a4]72
.L739:
	st.b	[a15],d2
.L740:
	add	d15,#1
.L50:
	extr.u	d15,d15,#0,#8
.L47:
	jlt.u	d15,d0,.L48
.L741:
	ld.hu	d15,[a5]12
.L461:
	sub	d15,d0
	st.h	[a5]12,d15
.L742:
	ld.hu	d15,[a5]16
.L743:
	add	d15,d0
	st.h	[a5]16,d15
.L744:
	addsc.a	a15,a2,d0,#0
.L745:
	st.a	[a5],a15
.L746:
	ld.hu	d15,[a5]12
.L747:
	jeq	d15,#0,.L51
.L748:
	mov	d0,#16
.L455:
	jge.u	d15,d0,.L52
.L462:
	add	d15,#-1
.L749:
	j	.L53
.L52:
	mov	d15,#15
.L53:
	ld.bu	d0,[a4]17
.L750:
	insert	d0,d0,d15,#0,#4
	st.b	[a4]17,d0
.L751:
	add	d15,#1
.L463:
	st.b	[a5]18,d15
.L752:
	ret
.L51:
	ld.bu	d15,[a4]16
.L753:
	or	d15,#1
	st.b	[a4]16,d15
.L326:
	ld.w	d15,[a4]60
.L754:
	movh	d0,#5125
.L464:
	or	d15,d0
	st.w	[a4]60,d15
.L327:
	ld.bu	d15,[a4]16
.L755:
	insert	d15,d15,#0,#1,#1
	st.b	[a4]16,d15
.L330:
	ld.w	d15,[a4]64
.L756:
	mov.u	d0,#65535
	addih	d0,d0,#60410
.L757:
	and	d15,d0
	st.w	[a4]64,d15
.L331:
	mov.a	a15,#0
.L758:
	st.a	[a5],a15
.L759:
	mov	d4,#0
.L452:
	st.h	[a5]16,d4
.L760:
	st.b	[a5]18,d4
.L761:
	mov	d15,#1
.L762:
	st.b	[a5]19,d15
.L763:
	st.b	[a5]9,d4
.L764:
	ld.w	d15,[a6]4
.L765:
	jeq	d15,#0,.L55
.L766:
	ld.a	a15,[a6]4
.L767:
	ji	a15
.L55:
	ret
.L309:
	
__Uart_lRead_function_end:
	.size	Uart_lRead,__Uart_lRead_function_end-Uart_lRead
.L155:
	; End of function
	
	.sdecl	'.text.Uart_lReceiveError.Code.Cpu0',code,cluster('Uart_lReceiveError')
	.sect	'.text.Uart_lReceiveError.Code.Cpu0'
	.align	2
	
; Function Uart_lReceiveError
.L98:
Uart_lReceiveError:	.type	func
	mov.aa	a15,a4
.L468:
	ld.w	d15,[a5]52
.L470:
	jz.t	d15:16,.L56
.L711:
	mov	d4,#1
.L472:
	j	.L57
.L56:
	movh	d0,#4
.L712:
	and	d15,d0
.L471:
	eq	d15,d15,#0
.L713:
	add	d4,d15,#2
.L57:
	ld.w	d15,[a5]60
.L714:
	movh	d0,#5125
.L715:
	or	d15,d0
	st.w	[a5]60,d15
.L307:
	jne	d4,#3,.L58
.L716:
	ld.hu	d0,[a6]12
.L717:
	mov	d15,#16
.L718:
	jlt.u	d15,d0,.L59
.L719:
	ld.bu	d15,[a5]18
	and	d4,d15,#31
.L473:
	mov.aa	a4,a5
.L465:
	mov.aa	a5,a6
.L467:
	mov.aa	a6,a15
.L466:
	j	Uart_lRead
.L59:
.L58:
	ld.bu	d15,[a5]16
.L720:
	insert	d15,d15,#0,#1,#1
	st.b	[a5]16,d15
.L721:
	mov	d15,#0
.L722:
	st.h	[a6]16,d15
.L723:
	mov	d0,#1
.L724:
	st.b	[a6]19,d0
.L725:
	st.b	[a6]9,d15
.L726:
	ld.w	d15,[a15]4
.L727:
	jeq	d15,#0,.L61
.L728:
	ld.a	a15,[a15]4
.L469:
	ji	a15
.L61:
	ret
.L296:
	
__Uart_lReceiveError_function_end:
	.size	Uart_lReceiveError,__Uart_lReceiveError_function_end-Uart_lReceiveError
.L150:
	; End of function
	
	.sdecl	'.text.Uart_lHwInitKernelReg.Code.Cpu0',code,cluster('Uart_lHwInitKernelReg')
	.sect	'.text.Uart_lHwInitKernelReg.Code.Cpu0'
	.align	2
	
; Function Uart_lHwInitKernelReg
.L100:
Uart_lHwInitKernelReg:	.type	func
	mov.aa	a15,a4
.L475:
	call	Mcal_DelayTickResolution
.L474:
	mov	d15,#-1
.L885:
	div.u	e0,d15,d2
.L477:
	eq	d15,d0,#0
.L886:
	add	d8,d15,d0
.L478:
	ld.w	d15,[a15]244
.L887:
	or	d4,d15,#1
.L479:
	lea	a4,[a15]244
	call	Mcal_WritePeripEndInitProtReg
.L476:
	ld.w	d15,[a15]240
.L888:
	or	d4,d15,#1
.L480:
	lea	a4,[a15]240
	call	Mcal_WritePeripEndInitProtReg
.L481:
	mov	d5,#1
.L889:
	mov	d6,d5
	mov	d4,d8
.L482:
	mov.aa	a4,a15
.L484:
	call	Uart_lStatusTimeout
.L483:
	ld.w	d15,[a15]236
.L890:
	or	d4,d15,#1
.L485:
	lea	a4,[a15]236
	j	Mcal_WritePeripEndInitProtReg
.L363:
	
__Uart_lHwInitKernelReg_function_end:
	.size	Uart_lHwInitKernelReg,__Uart_lHwInitKernelReg_function_end-Uart_lHwInitKernelReg
.L170:
	; End of function
	
	.sdecl	'.text.Uart_lHwInit.Code.Cpu0',code,cluster('Uart_lHwInit')
	.sect	'.text.Uart_lHwInit.Code.Cpu0'
	.align	2
	
; Function Uart_lHwInit
.L102:
Uart_lHwInit:	.type	func
	mov.aa	a12,a4
.L487:
	movh.a	a15,#@his(Uart_HwModuleAddr)
	lea	a15,[a15]@los(Uart_HwModuleAddr)
.L772:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L488:
	call	Mcal_DelayTickResolution
.L486:
	mov	d15,#-1
.L773:
	div.u	e0,d15,d2
.L490:
	eq	d15,d0,#0
.L774:
	add	d8,d15,d0
.L491:
	ld.bu	d15,[a15]76
.L775:
	insert	d15,d15,#0,#0,#5
	st.b	[a15]76,d15
.L776:
	mov	d5,#0
.L777:
	mov	d6,d5
	mov	d4,d8
.L492:
	mov.aa	a4,a15
.L493:
	call	Uart_lStatusTimeout
.L489:
	ld.bu	d15,[a15]26
.L778:
	insert	d15,d15,#0,#0,#2
	st.b	[a15]26,d15
.L779:
	ld.bu	d15,[a15]26
.L780:
	insert	d15,d15,#1,#0,#2
	st.b	[a15]26,d15
.L781:
	ld.hu	d15,[a15]34
.L782:
	ld.hu	d0,[a12]20
.L783:
	insert	d15,d15,d0,#0,#12
	st.h	[a15]34,d15
.L784:
	ld.hu	d15,[a15]32
.L785:
	ld.hu	d0,[a12]22
.L786:
	insert	d15,d15,d0,#0,#12
	st.h	[a15]32,d15
.L787:
	ld.hu	d15,[a15]20
.L788:
	ld.hu	d0,[a12]24
.L789:
	insert	d15,d15,d0,#0,#12
	st.h	[a15]20,d15
.L790:
	ld.bu	d15,[a15]22
.L791:
	ld.bu	d0,[a12]26
.L792:
	insert	d15,d15,d0,#0,#4
	st.b	[a15]22,d15
.L793:
	ld.hu	d15,[a15]4
.L794:
	insert	d15,d15,#0,#4,#6
	st.h	[a15]4,d15
.L795:
	ld.bu	d15,[a15]6
.L796:
	ld.bu	d0,[a12]33
.L797:
	insert	d15,d15,d0,#0,#2
	st.b	[a15]6,d15
.L798:
	ld.bu	d15,[a15]7
.L799:
	ld.bu	d0,[a12]34
.L800:
	insert	d15,d15,d0,#5,#1
	st.b	[a15]7,d15
.L801:
	ld.bu	d15,[a15]7
.L802:
	ld.bu	d0,[a12]35
.L803:
	insert	d15,d15,d0,#1,#1
	st.b	[a15]7,d15
.L804:
	ld.bu	d15,[a15]23
.L805:
	or	d15,#128
	st.b	[a15]23,d15
.L806:
	ld.bu	d0,[a15]23
.L807:
	ld.bu	d15,[a12]26
.L808:
	sha	d15,#-1
.L809:
	add	d15,#1
.L810:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]23,d15
.L811:
	ld.bu	d15,[a15]27
.L812:
	ld.bu	d0,[a12]31
.L813:
	insert	d15,d15,d0,#6,#1
	st.b	[a15]27,d15
.L814:
	ld.bu	d15,[a15]27
.L815:
	ld.bu	d0,[a12]32
.L816:
	insert	d15,d15,d0,#7,#1
	st.b	[a15]27,d15
.L817:
	ld.hu	d15,[a15]24
.L818:
	insert	d15,d15,#1,#6,#3
	st.h	[a15]24,d15
.L819:
	ld.bu	d15,[a15]25
.L820:
	ld.bu	d0,[a12]28
.L821:
	insert	d15,d15,d0,#1,#3
	st.b	[a15]25,d15
.L822:
	ld.bu	d15,[a12]29
.L823:
	jge.u	d15,#9,.L62
.L824:
	ld.bu	d15,[a15]12
.L825:
	insert	d15,d15,#1,#6,#2
	st.b	[a15]12,d15
.L826:
	ld.bu	d15,[a15]16
.L827:
	insert	d15,d15,#1,#6,#2
.L828:
	j	.L63
.L62:
	ld.bu	d15,[a15]12
.L829:
	insert	d15,d15,#2,#6,#2
	st.b	[a15]12,d15
.L830:
	ld.bu	d15,[a15]16
.L831:
	insert	d15,d15,#2,#6,#2
.L63:
	st.b	[a15]16,d15
.L832:
	ld.bu	d0,[a15]28
.L833:
	ld.bu	d15,[a12]29
.L834:
	add	d15,#-1
.L835:
	insert	d15,d0,d15,#0,#4
	st.b	[a15]28,d15
.L836:
	ld.bu	d15,[a15]7
.L837:
	insert	d15,d15,#0,#4,#1
	st.b	[a15]7,d15
.L838:
	ld.bu	d15,[a15]4
.L839:
	ld.bu	d0,[a12]30
.L840:
	insert	d15,d15,d0,#0,#3
	st.b	[a15]4,d15
.L841:
	ld.bu	d15,[a15]16
.L842:
	insert	d15,d15,#0,#4,#2
	st.b	[a15]16,d15
.L843:
	ld.bu	d15,[a15]12
.L844:
	insert	d15,d15,#0,#4,#2
	st.b	[a15]12,d15
.L845:
	ld.bu	d15,[a15]76
.L846:
	insert	d15,d15,#4,#0,#5
	st.b	[a15]76,d15
.L847:
	mov	d5,#0
.L848:
	mov	d6,#1
	mov	d4,d8
.L494:
	mov.aa	a4,a15
.L495:
	j	Uart_lStatusTimeout
.L335:
	
__Uart_lHwInit_function_end:
	.size	Uart_lHwInit,__Uart_lHwInit_function_end-Uart_lHwInit
.L160:
	; End of function
	
	.sdecl	'.text.Uart_lStatusTimeout.Code.Cpu0',code,cluster('Uart_lStatusTimeout')
	.sect	'.text.Uart_lStatusTimeout.Code.Cpu0'
	.align	2
	
; Function Uart_lStatusTimeout
.L104:
Uart_lStatusTimeout:	.type	func
	mov	d8,d4
.L497:
	mov.aa	a15,a4
.L498:
	mov	d9,d5
.L499:
	mov	d10,d6
.L500:
	call	Mcal_DelayGetTick
.L496:
	mov	d11,d2
.L502:
	mov	d12,#0
.L64:
	jne	d9,#0,.L65
.L895:
	ld.bu	d0,[a15]79
	extr.u	d15,d0,#7,#1
.L503:
	j	.L66
.L65:
	ld.bu	d0,[a15]244
	extr.u	d15,d0,#1,#1
.L66:
	sub	d2,d11
.L501:
	jlt.u	d2,d8,.L67
.L896:
	jeq	d15,d10,.L68
.L897:
	mov	d12,#1
.L68:
.L67:
	call	Mcal_DelayGetTick
.L504:
	jeq	d15,d10,.L69
.L898:
	jeq	d12,#0,.L64
.L69:
	ret
.L369:
	
__Uart_lStatusTimeout_function_end:
	.size	Uart_lStatusTimeout,__Uart_lStatusTimeout_function_end-Uart_lStatusTimeout
.L175:
	; End of function
	
	.sdecl	'.text.Uart_lWrite.Code.Cpu0',code,cluster('Uart_lWrite')
	.sect	'.text.Uart_lWrite.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3855  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3856  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3857  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3858  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3859  ** Traceability     : [cover parentID={B89977F1-117E-4821-A4D0-6E8D2EC27FDC}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3860  ** Syntax : static void Uart_lWrite                                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3861  **   (                                                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3862  **      Ifx_ASCLIN* const HwModulePtr,                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3863  **        Uart_ChannelInfoType *const ChannelInfoPtr,                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3864  **        const Uart_ChannelConfigType *const ChannelConfigPtr)               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3865  **   )                                                                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3866  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3867  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3868  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3869  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3870  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3871  ** Reentrancy      : Reentrant for different channel                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3872  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3873  ** Parameters (in) : ChannelConfigPtr: Channel configuration address.         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3874  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3875  ** Parameters (inout): HwModulePtr - ASCLIN SFR address                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3876  **                     ChannelInfoPtr- Address of channel information         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3877  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3878  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3879  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3880  ** Description     : Function to copy the transmit data from specified memory **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3881  **                   location(App buffer) to TXFIFO                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3882  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3883  static void Uart_lWrite(Ifx_ASCLIN *const HwModulePtr,
; Function Uart_lWrite
.L106:
Uart_lWrite:	.type	func

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3884                             Uart_ChannelInfoType *const ChannelInfoPtr,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3885                             const Uart_ChannelConfigType *const ChannelConfigPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3886  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3887    Uart_MemType *BuffPtr;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3888    uint16 TempUartWriteData;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3889    uint8 WriteCount;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3890    uint8 NumBytesWrite;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3891    uint8 FrameLength;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3892    #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3893    uint8 TxLastFrame;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3894    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3895    uint8 StepSize;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3896  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3897    /* [cover parentID={07BF5D56-B1D2-4adb-9700-3E810AB4D166}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3898    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3899    BuffPtr = ChannelInfoPtr->TxBuffPtr;
	ld.a	a2,[a5]4
.L505:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3900    FrameLength = ChannelConfigPtr->DataLength;
	ld.bu	d1,[a6]29
.L506:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3901    #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3902    TxLastFrame = 0U;
	mov	d2,#0
.L507:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3903    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3904    /* [cover parentID={82AEFF58-3513-42a9-A0E2-118AA11365C6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3905    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3906    if(ChannelInfoPtr->TxDataLeft <= UART_BUFFER_SIZE)
	ld.hu	d3,[a5]10
.L508:
	mov	d15,#16
.L510:
	jlt.u	d15,d3,.L70
.L509:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3907    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3908      /* [cover parentID={7DC4D6C7-B581-411d-8DF3-4FA66C7E81AE}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3909      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3910      /* Update number of bytes update in FIFO with number of bytes left */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3911      NumBytesWrite = (uint8)ChannelInfoPtr->TxDataLeft;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3912  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3913      /* [cover parentID={357E8ACD-12E5-4588-A6D9-9E7403FF7ECC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3914      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3915      if(FrameLength >= UART_NINEBIT_DATLEN)
	ge.u	d0,d1,#9
.L512:
	add	d0,#1
.L514:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3916      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3917        StepSize = UART_STEPSIZE_2BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3918      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3919      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3920      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3921        StepSize = UART_STEPSIZE_1BYTE;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3922      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3923  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3924      if(NumBytesWrite > StepSize)
	jge.u	d0,d3,.L71
.L853:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3925      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3926        NumBytesWrite -= StepSize;
	sub	d0,d3,d0
.L513:
	extr.u	d3,d0,#0,#8
.L511:
	j	.L72
.L71:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3927      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3928      /* [cover parentID={1F714919-0CAC-40a9-A9D8-EAD27D68E3E2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3929    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3930      #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3931      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3932      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3933        TxLastFrame = 1U;
	mov	d2,#1
.L854:
	j	.L73
.L70:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3934      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3935      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3936    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3937    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3938    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3939      /* [cover parentID={8F062649-4602-46dd-BBA7-8516C223B655}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3940      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3941      /* Update number of bytes update in FIFO with fifo size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3942      NumBytesWrite = UART_BUFFER_SIZE;
	mov	d3,d15
.L73:
.L72:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3943    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3944  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3945    /* [cover parentID={6DAE0C17-008F-48da-95FE-2A538B923D42}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3946      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3947    #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3948    /* [cover parentID={8072C2FA-693C-48d0-BDD1-92D8DA733646}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3949    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3950      #if (UART_TX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3951    /* [cover parentID={A40A7F31-165D-4f22-984C-77A491D3B775}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3952    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3953    /* Check if write operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3954      if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3955      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3956    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3957      /* [cover parentID={06B86483-9371-47b1-9B87-4D802E781DC6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3958      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3959      HwModulePtr->FLAGSENABLE.B.TFLE = UART_CLEAR_BIT;
	ld.bu	d0,[a4]67
.L855:
	insert	d0,d0,#0,#7,#1
	st.b	[a4]67,d0
.L856:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3960    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3961    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3962    /* [cover parentID={DB76F095-188E-477b-9355-7255A294C2A2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3963    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3964    /* Disable TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3965    HwModulePtr->TXFIFOCON.B.ENO = UART_CLEAR_BIT;
	ld.bu	d15,[a4]12
.L857:
	insert	d15,d15,#0,#1,#1
	st.b	[a4]12,d15
.L858:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3966    /* Clear level interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3967    HwModulePtr->FLAGSCLEAR.B.TFLC = UART_SET_BIT;
	ld.bu	d15,[a4]63
.L859:
	or	d15,#128
	st.b	[a4]63,d15
.L860:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3968  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3969    /* [cover parentID={39904BE6-5D0E-451e-9803-F2EB76049426}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3970       Initiate write count with value 0, Extract frame length
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3971    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3972    /* [cover parentID={A8D6D7A8-FFB6-4b04-B8B1-3324CAF2AD02}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3973          Set write count with 0.
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3974    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3975    /* Initiate write counter with zero */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3976    WriteCount = 0U;
	mov	d15,#0
.L515:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3977  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3978    /* [cover parentID={D5CF5384-CFF6-4525-8F9F-A7994560169C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3979    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3980    while(WriteCount < NumBytesWrite)
	j	.L74
.L75:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3981    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3982      /* [cover parentID={DB1C4A5A-0A58-441f-8764-8D562EB88815}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3983      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3984      if(FrameLength < UART_NINEBIT_DATLEN)
	jge.u	d1,#9,.L76
.L861:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3985      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3986        /* [cover parentID={C7020C46-CDD5-4c84-A95C-3FBA87C632B4}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3987        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3988        /* Update TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3989        HwModulePtr->TXDATA.U =  BuffPtr[WriteCount];
	addsc.a	a15,a2,d15,#0
	ld.bu	d0,[a15]
.L862:
	st.w	[a4]68,d0
.L863:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3990        WriteCount += UART_TXFIFOCONREG_INW_1BYTE;
	add	d0,d15,#1
	extr.u	d15,d0,#0,#8
.L864:
	j	.L77
.L76:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3991      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3992      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3993      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3994        /* [cover parentID={BF676F45-6596-455a-9243-81DCF98B9F58}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3995        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3996        /* Prepare 16 bits data for transmision */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3997        TempUartWriteData = BuffPtr[WriteCount];
	addsc.a	a15,a2,d15,#0
	ld.bu	d0,[a15]
.L865:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3998        TempUartWriteData |= (uint16)(((uint16)BuffPtr[WriteCount + 1U])\ 
	ld.bu	d4,[a15]1
.L866:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  3999                                      << UART_SHIFT_EIGHT_BIT);
	sha	d4,d4,#8
.L517:
	or	d0,d4
.L867:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4000        HwModulePtr->TXDATA.U =  TempUartWriteData;
	st.w	[a4]68,d0
.L868:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4001        WriteCount += UART_TXFIFOCONREG_INW_2BYTE;
	add	d15,#2
.L516:
	extr.u	d15,d15,#0,#8
.L77:
.L74:
	jlt.u	d15,d3,.L75
.L518:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4002      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4003    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4004  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4005    /* [cover parentID={4BB76DE2-A713-4f6c-AA5B-E1D7E90289CC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4006    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4007    if(HwModulePtr->TXFIFOCON.B.FILL == NumBytesWrite)
	ld.bu	d15,[a4]14
.L519:
	and	d15,#31
.L520:
	jne	d15,d3,.L78
.L521:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4008    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4009      /* [cover parentID={3CD3C4F3-4D90-44a3-9875-5B7B5224CF2C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4010      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4011      /* Update channel information */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4012      ChannelInfoPtr->TxDataLeft -= NumBytesWrite;
	ld.hu	d15,[a5]10
.L522:
	sub	d15,d3
.L523:
	st.h	[a5]10,d15
.L524:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4013      ChannelInfoPtr->TxBuffPtr = &BuffPtr[NumBytesWrite];
	addsc.a	a15,a2,d3,#0
.L525:
	st.a	[a5]4,a15
.L869:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4014      ChannelInfoPtr->TotalDataTxd += NumBytesWrite;
	ld.hu	d15,[a5]14
.L870:
	add	d3,d15
	st.h	[a5]14,d3
.L871:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4015      /* Clear transmit complete */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4016      HwModulePtr->FLAGSCLEAR.B.TCC = UART_SET_BIT;
	ld.bu	d15,[a4]62
.L872:
	or	d15,#2
	st.b	[a4]62,d15
.L873:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4017      /* [cover parentID={0EF396C5-8C72-4c68-B192-EDE5BDA0F9E6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4018      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4019      /* [cover parentID={A8CA0785-78D6-473a-93E5-D36DED6D316A}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4020      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4021      #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4022        /* [cover parentID={0EF396C5-8C72-4c68-B192-EDE5BDA0F9E6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4023        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4024        #if (UART_TX_MODE == UART_MIXED_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4025        /* [cover parentID={94E119A3-CAC4-4470-9773-9A8001CA40AF}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4026        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4027        /* Check if write operation in interrupt mode */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4028        if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4029      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4030      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4031        /* [cover parentID={53DB3510-A5D8-4782-A5EC-5379B796BC82}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4032        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4033        /* [cover parentID={3CB61CDF-8DB4-4b2e-9B40-DD975134A34B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4034        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4035        if(TxLastFrame == 0U)
	jne	d2,#0,.L79
.L358:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4036        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4037          /* Enable the TXFIFO level interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4038          Uart_lEnableWriteInterrupts(HwModulePtr);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4039        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4040        else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4041        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4042          /* Enable transmit complete interrupt */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4043          HwModulePtr->TXFIFOCON.B.INTLEVEL = 0U;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4044          HwModulePtr->FLAGSENABLE.B.TCE = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4045        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4046      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4047      #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4048      /* [cover parentID={5E82E520-9160-4ea2-8799-31E55F8420B1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4049      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4050      /* Enable TXFIFO */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4051      HwModulePtr->TXFIFOCON.B.ENO = UART_SET_BIT;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4052    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4053    #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4054    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4055    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4056      /* [cover parentID={C3674095-1594-4684-B73B-45674942D352}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4057      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4058      if(ChannelInfoPtr->TotalDataTxd != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4059      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4060        /* [cover parentID={AF17757D-7892-4131-96B9-9F6E092DB3D7}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4061        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4062        if(ChannelConfigPtr->TxMode != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4063        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4064          Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4065                                 UART_SID_ISR_TRANSMIT, UART_E_TXFIFO_FILL_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4066        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4067        else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4068        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4069          Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4070                               UART_SID_MAIN_WRITE, UART_E_TXFIFO_FILL_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4071        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4072      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4073      else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4074      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4075        Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4076                               UART_SID_WRITE, UART_E_TXFIFO_FILL_ERR);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4077      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4078    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4079    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4080  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4081  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4082  #if (UART_TX_MODE != UART_POLLING_MODE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4083  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4084  ** Traceability     : [cover parentID={23E00FBA-5293-44fd-A135-7BF14799B2E9}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4085  ** Syntax : LOCAL_INLINE void Uart_lEnableWriteInterrupts                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4086  **                   ( Ifx_ASCLIN *const HwModulePtr)                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4087  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4088  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4089  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4090  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4091  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4092  ** Reentrancy      : Reentrant for different channel.                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4093  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4094  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4095  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4096  ** Parameters (out): HwModulePtr - ASCLIN SFR address                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4097  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4098  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4099  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4100  ** Description     : Function to enable interrupts for write Operation        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4101  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4102  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4103  LOCAL_INLINE void Uart_lEnableWriteInterrupts(Ifx_ASCLIN *const HwModulePtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4104  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4105    /* [cover parentID={87CADC4F-2F55-4d7d-B8F0-EB2EA0F7A1A9}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4106    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4107    /* Set TXFIFO interrupt level and enable TXFIFO overflow and level flags */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4108    HwModulePtr->TXFIFOCON.B.INTLEVEL = 0U;
	ld.bu	d15,[a4]13
.L874:
	insert	d15,d15,#0,#0,#4
	st.b	[a4]13,d15
.L875:

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4109    /* [cover parentID={A7106EFF-D9F3-4cc3-822E-946D4ADAC511}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4110    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4111    HwModulePtr->FLAGSENABLE.B.TFLE = UART_SET_BIT;
	ld.bu	d15,[a4]67
.L876:
	or	d15,#128
	st.b	[a4]67,d15
.L359:
	j	.L80
.L79:
	ld.bu	d15,[a4]13
.L877:
	insert	d15,d15,#0,#0,#4
	st.b	[a4]13,d15
.L878:
	ld.bu	d15,[a4]66
.L879:
	or	d15,#2
	st.b	[a4]66,d15
.L80:
	ld.bu	d15,[a4]12
.L880:
	or	d15,#2
	st.b	[a4]12,d15
.L78:
	ret
.L343:
	
__Uart_lWrite_function_end:
	.size	Uart_lWrite,__Uart_lWrite_function_end-Uart_lWrite
.L165:
	; End of function
	
	.sdecl	'.rodata.Uart_HwModuleAddr.Const.Cpu0.32bit',data,rom,cluster('Uart_HwModuleAddr')
	.sect	'.rodata.Uart_HwModuleAddr.Const.Cpu0.32bit'
	.align	4
Uart_HwModuleAddr:	.type	object
	.size	Uart_HwModuleAddr,48
	.word	-268433920,-268433664,-268433408,-268433152
	.word	-268432896,-268432640,-268432384,-268432128
	.word	-268431872,-268431616,-265549312,-265549056
	.sdecl	'.bss.Uart_ConfigPtr.ClearedData.Cpu0.32bit',data,cluster('Uart_ConfigPtr')
	.sect	'.bss.Uart_ConfigPtr.ClearedData.Cpu0.32bit'
	.align	4
Uart_ConfigPtr:	.type	object
	.size	Uart_ConfigPtr,4
	.space	4
	.sdecl	'.bss.Uart_ChannelInfo.ClearedData.Cpu0.Unspecified',data,cluster('Uart_ChannelInfo')
	.sect	'.bss.Uart_ChannelInfo.ClearedData.Cpu0.Unspecified'
	.align	4
Uart_ChannelInfo:	.type	object
	.size	Uart_ChannelInfo,20
	.space	20
	.calls	'Uart_Init','Mcal_WritePeripEndInitProtReg'
	.calls	'Uart_Init','Uart_lHwInitKernelReg'
	.calls	'Uart_Init','Uart_lHwInit'
	.calls	'Uart_Write','Uart_lWrite'
	.calls	'Uart_IsrReceive','Uart_lRead'
	.calls	'Uart_IsrTransmit','Uart_lWrite'
	.calls	'Uart_IsrError','Uart_lReceiveError'
	.calls	'Uart_IsrError','__INDIRECT__'
	.calls	'Uart_lRead','__INDIRECT__'
	.calls	'Uart_lReceiveError','Uart_lRead'
	.calls	'Uart_lReceiveError','__INDIRECT__'
	.calls	'Uart_lHwInitKernelReg','Mcal_DelayTickResolution'
	.calls	'Uart_lHwInitKernelReg','Mcal_WritePeripEndInitProtReg'
	.calls	'Uart_lHwInitKernelReg','Uart_lStatusTimeout'
	.calls	'Uart_lHwInit','Mcal_DelayTickResolution'
	.calls	'Uart_lHwInit','Uart_lStatusTimeout'
	.calls	'Uart_lStatusTimeout','Mcal_DelayGetTick'
	.calls	'Uart_Init','',0
	.calls	'Uart_Read','',0
	.calls	'Uart_Write','',0
	.calls	'Uart_GetStatus','',0
	.calls	'Uart_IsrReceive','',0
	.calls	'Uart_IsrTransmit','',0
	.calls	'Uart_IsrError','',0
	.calls	'Uart_lRead','',0
	.calls	'Uart_lReceiveError','',0
	.calls	'Uart_lHwInitKernelReg','',0
	.calls	'Uart_lHwInit','',0
	.calls	'Uart_lStatusTimeout','',0
	.extern	Mcal_WritePeripEndInitProtReg
	.extern	Mcal_DelayTickResolution
	.extern	Mcal_DelayGetTick
	.extern	__INDIRECT__
	.calls	'Uart_lWrite','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L108:
	.word	11319
	.half	3
	.word	.L109
	.byte	4
.L107:
	.byte	1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L110
.L189:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	159
.L277:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	181
.L195:
	.byte	4
	.byte	'Uart_lHwInitClcReg',0,3,1,199,21,20
	.word	159
	.byte	1,1
.L198:
	.byte	5
	.byte	'HwUnit',0,1,199,21,51
	.word	176
.L200:
	.byte	5
	.byte	'Value',0,1,199,21,72
	.word	202
.L202:
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,7
	.byte	'_Ifx_ASCLIN_CLC_Bits',0,2,143,1,16,4,8
	.byte	'DISR',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'DISS',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	159
	.byte	1,5,2,35,0,8
	.byte	'EDIS',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,4
	.word	271
	.byte	28,0,2,35,0,0,9,2,234,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	294
	.byte	4,2,35,0,0
.L320:
	.byte	2
	.byte	'unsigned short int',0,2,7,7
	.byte	'_Ifx_ASCLIN_IOCR_Bits',0,2,194,2,16,4,8
	.byte	'ALTI',0,1
	.word	159
	.byte	3,5,2,35,0,8
	.byte	'reserved_3',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'DEPTH',0,2
	.word	454
	.byte	6,6,2,35,0,8
	.byte	'reserved_10',0,1
	.word	159
	.byte	6,0,2,35,1,8
	.byte	'CTS',0,1
	.word	159
	.byte	2,6,2,35,2,8
	.byte	'reserved_18',0,2
	.word	454
	.byte	7,7,2,35,2,8
	.byte	'RCPOL',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'CPOL',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'SPOL',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'LB',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'CTSEN',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'RXM',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'TXM',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,178,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	476
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_ID_Bits',0,2,186,2,16,4,8
	.byte	'MODREV',0,1
	.word	159
	.byte	8,0,2,35,0,8
	.byte	'MODTYPE',0,1
	.word	159
	.byte	8,0,2,35,1,8
	.byte	'MODNUMBER',0,2
	.word	454
	.byte	16,0,2,35,2,0,9,2,170,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	771
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_TXFIFOCON_Bits',0,2,175,3,16,4,8
	.byte	'FLUSH',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'ENO',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	159
	.byte	2,4,2,35,0,8
	.byte	'FM',0,1
	.word	159
	.byte	2,2,2,35,0,8
	.byte	'INW',0,1
	.word	159
	.byte	2,0,2,35,0,8
	.byte	'INTLEVEL',0,1
	.word	159
	.byte	4,4,2,35,1,8
	.byte	'reserved_12',0,1
	.word	159
	.byte	4,0,2,35,1,8
	.byte	'FILL',0,1
	.word	159
	.byte	5,3,2,35,2,8
	.byte	'reserved_21',0,2
	.word	454
	.byte	11,0,2,35,2,0,9,2,146,5,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	896
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_RXFIFOCON_Bits',0,2,154,3,16,4,8
	.byte	'FLUSH',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'ENI',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	159
	.byte	2,4,2,35,0,8
	.byte	'FM',0,1
	.word	159
	.byte	2,2,2,35,0,8
	.byte	'OUTW',0,1
	.word	159
	.byte	2,0,2,35,0,8
	.byte	'INTLEVEL',0,1
	.word	159
	.byte	4,4,2,35,1,8
	.byte	'reserved_12',0,1
	.word	159
	.byte	4,0,2,35,1,8
	.byte	'FILL',0,1
	.word	159
	.byte	5,3,2,35,2,8
	.byte	'reserved_21',0,2
	.word	454
	.byte	10,1,2,35,2,8
	.byte	'BUF',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,130,5,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1135
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_BITCON_Bits',0,2,113,16,4,8
	.byte	'PRESCALER',0,2
	.word	454
	.byte	12,4,2,35,0,8
	.byte	'reserved_12',0,1
	.word	159
	.byte	4,0,2,35,1,8
	.byte	'OVERSAMPLING',0,1
	.word	159
	.byte	4,4,2,35,2,8
	.byte	'reserved_20',0,1
	.word	159
	.byte	4,0,2,35,2,8
	.byte	'SAMPLEPOINT',0,1
	.word	159
	.byte	4,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	159
	.byte	3,1,2,35,3,8
	.byte	'SM',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,210,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1390
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_FRAMECON_Bits',0,2,170,2,16,4,8
	.byte	'reserved_0',0,1
	.word	159
	.byte	6,2,2,35,0,8
	.byte	'IDLE',0,2
	.word	454
	.byte	3,7,2,35,0,8
	.byte	'STOP',0,1
	.word	159
	.byte	3,4,2,35,1,8
	.byte	'LEAD',0,1
	.word	159
	.byte	3,1,2,35,1,8
	.byte	'reserved_15',0,1
	.word	159
	.byte	1,0,2,35,1,8
	.byte	'MODE',0,1
	.word	159
	.byte	2,6,2,35,2,8
	.byte	'reserved_18',0,2
	.word	454
	.byte	10,4,2,35,2,8
	.byte	'MSB',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'CEN',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'PEN',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'ODD',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,162,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1611
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_DATCON_Bits',0,2,161,1,16,4,8
	.byte	'DATLEN',0,1
	.word	159
	.byte	4,4,2,35,0,8
	.byte	'reserved_4',0,2
	.word	454
	.byte	9,3,2,35,0,8
	.byte	'HO',0,1
	.word	159
	.byte	1,2,2,35,1,8
	.byte	'RM',0,1
	.word	159
	.byte	1,1,2,35,1,8
	.byte	'CSM',0,1
	.word	159
	.byte	1,0,2,35,1,8
	.byte	'RESPONSE',0,1
	.word	159
	.byte	8,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	159
	.byte	8,0,2,35,3,0,9,2,250,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1876
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_BRG_Bits',0,2,134,1,16,4,8
	.byte	'DENOMINATOR',0,2
	.word	454
	.byte	12,4,2,35,0,8
	.byte	'reserved_12',0,1
	.word	159
	.byte	4,0,2,35,1,8
	.byte	'NUMERATOR',0,2
	.word	454
	.byte	12,4,2,35,2,8
	.byte	'reserved_28',0,1
	.word	159
	.byte	4,0,2,35,3,0,9,2,226,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2073
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_BRD_Bits',0,2,125,16,4,8
	.byte	'LOWERLIMIT',0,1
	.word	159
	.byte	8,0,2,35,0,8
	.byte	'UPPERLIMIT',0,1
	.word	159
	.byte	8,0,2,35,1,8
	.byte	'MEASURED',0,2
	.word	454
	.byte	12,4,2,35,2,8
	.byte	'reserved_28',0,1
	.word	159
	.byte	4,0,2,35,3,0,9,2,218,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2231
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_LIN_CON_Bits',0,2,241,2,16,4,8
	.byte	'reserved_0',0,4
	.word	271
	.byte	23,9,2,35,0,8
	.byte	'CSI',0,1
	.word	159
	.byte	1,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	159
	.byte	1,7,2,35,3,8
	.byte	'CSEN',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'MS',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'ABD',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	159
	.byte	4,0,2,35,3,0,9,2,218,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2385
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_LIN_BTIMER_Bits',0,2,234,2,16,4,8
	.byte	'BREAK',0,1
	.word	159
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	271
	.byte	26,0,2,35,0,0,9,2,210,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2585
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_LIN_HTIMER_Bits',0,2,253,2,16,4,8
	.byte	'HEADER',0,1
	.word	159
	.byte	8,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	271
	.byte	24,0,2,35,0,0,9,2,226,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2699
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_LIN',0,2,163,5,25,12,10
	.byte	'CON',0
	.word	2545
	.byte	4,2,35,0,10
	.byte	'BTIMER',0
	.word	2659
	.byte	4,2,35,4,10
	.byte	'HTIMER',0
	.word	2774
	.byte	4,2,35,8,0,11
	.word	2814
	.byte	7
	.byte	'_Ifx_ASCLIN_FLAGS_Bits',0,2,173,1,16,4,8
	.byte	'TH',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'TR',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'RH',0,1
	.word	159
	.byte	1,5,2,35,0,8
	.byte	'RR',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	159
	.byte	1,3,2,35,0,8
	.byte	'FED',0,1
	.word	159
	.byte	1,2,2,35,0,8
	.byte	'RED',0,1
	.word	159
	.byte	1,1,2,35,0,8
	.byte	'reserved_7',0,2
	.word	454
	.byte	6,3,2,35,0,8
	.byte	'TWRQ',0,1
	.word	159
	.byte	1,2,2,35,1,8
	.byte	'THRQ',0,1
	.word	159
	.byte	1,1,2,35,1,8
	.byte	'TRRQ',0,1
	.word	159
	.byte	1,0,2,35,1,8
	.byte	'PE',0,1
	.word	159
	.byte	1,7,2,35,2,8
	.byte	'TC',0,1
	.word	159
	.byte	1,6,2,35,2,8
	.byte	'FE',0,1
	.word	159
	.byte	1,5,2,35,2,8
	.byte	'HT',0,1
	.word	159
	.byte	1,4,2,35,2,8
	.byte	'RT',0,1
	.word	159
	.byte	1,3,2,35,2,8
	.byte	'BD',0,1
	.word	159
	.byte	1,2,2,35,2,8
	.byte	'LP',0,1
	.word	159
	.byte	1,1,2,35,2,8
	.byte	'LA',0,1
	.word	159
	.byte	1,0,2,35,2,8
	.byte	'LC',0,1
	.word	159
	.byte	1,7,2,35,3,8
	.byte	'CE',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'RFO',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'RFU',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'RFL',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'reserved_29',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'TFO',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'TFL',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,130,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2887
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_FLAGSSET_Bits',0,2,138,2,16,4,8
	.byte	'THS',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'TRS',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'RHS',0,1
	.word	159
	.byte	1,5,2,35,0,8
	.byte	'RRS',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	159
	.byte	1,3,2,35,0,8
	.byte	'FEDS',0,1
	.word	159
	.byte	1,2,2,35,0,8
	.byte	'REDS',0,1
	.word	159
	.byte	1,1,2,35,0,8
	.byte	'reserved_7',0,2
	.word	454
	.byte	6,3,2,35,0,8
	.byte	'TWRQS',0,1
	.word	159
	.byte	1,2,2,35,1,8
	.byte	'THRQS',0,1
	.word	159
	.byte	1,1,2,35,1,8
	.byte	'TRRQS',0,1
	.word	159
	.byte	1,0,2,35,1,8
	.byte	'PES',0,1
	.word	159
	.byte	1,7,2,35,2,8
	.byte	'TCS',0,1
	.word	159
	.byte	1,6,2,35,2,8
	.byte	'FES',0,1
	.word	159
	.byte	1,5,2,35,2,8
	.byte	'HTS',0,1
	.word	159
	.byte	1,4,2,35,2,8
	.byte	'RTS',0,1
	.word	159
	.byte	1,3,2,35,2,8
	.byte	'BDS',0,1
	.word	159
	.byte	1,2,2,35,2,8
	.byte	'LPS',0,1
	.word	159
	.byte	1,1,2,35,2,8
	.byte	'LAS',0,1
	.word	159
	.byte	1,0,2,35,2,8
	.byte	'LCS',0,1
	.word	159
	.byte	1,7,2,35,3,8
	.byte	'CES',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'RFOS',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'RFUS',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'RFLS',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'reserved_29',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'TFOS',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'TFLS',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,154,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3373
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_FLAGSCLEAR_Bits',0,2,205,1,16,4,8
	.byte	'THC',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'TRC',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'RHC',0,1
	.word	159
	.byte	1,5,2,35,0,8
	.byte	'RRC',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	159
	.byte	1,3,2,35,0,8
	.byte	'FEDC',0,1
	.word	159
	.byte	1,2,2,35,0,8
	.byte	'REDC',0,1
	.word	159
	.byte	1,1,2,35,0,8
	.byte	'reserved_7',0,2
	.word	454
	.byte	6,3,2,35,0,8
	.byte	'TWRQC',0,1
	.word	159
	.byte	1,2,2,35,1,8
	.byte	'THRQC',0,1
	.word	159
	.byte	1,1,2,35,1,8
	.byte	'TRRQC',0,1
	.word	159
	.byte	1,0,2,35,1,8
	.byte	'PEC',0,1
	.word	159
	.byte	1,7,2,35,2,8
	.byte	'TCC',0,1
	.word	159
	.byte	1,6,2,35,2,8
	.byte	'FEC',0,1
	.word	159
	.byte	1,5,2,35,2,8
	.byte	'HTC',0,1
	.word	159
	.byte	1,4,2,35,2,8
	.byte	'RTC',0,1
	.word	159
	.byte	1,3,2,35,2,8
	.byte	'BDC',0,1
	.word	159
	.byte	1,2,2,35,2,8
	.byte	'LPC',0,1
	.word	159
	.byte	1,1,2,35,2,8
	.byte	'LAC',0,1
	.word	159
	.byte	1,0,2,35,2,8
	.byte	'LCC',0,1
	.word	159
	.byte	1,7,2,35,3,8
	.byte	'CEC',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'RFOC',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'RFUC',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'RFLC',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'reserved_29',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'TFOC',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'TFLC',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,138,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3886
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_FLAGSENABLE_Bits',0,2,237,1,16,4,8
	.byte	'THE',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'TRE',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'RHE',0,1
	.word	159
	.byte	1,5,2,35,0,8
	.byte	'RRE',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	159
	.byte	1,3,2,35,0,8
	.byte	'FEDE',0,1
	.word	159
	.byte	1,2,2,35,0,8
	.byte	'REDE',0,1
	.word	159
	.byte	1,1,2,35,0,8
	.byte	'reserved_7',0,2
	.word	454
	.byte	9,0,2,35,0,8
	.byte	'PEE',0,1
	.word	159
	.byte	1,7,2,35,2,8
	.byte	'TCE',0,1
	.word	159
	.byte	1,6,2,35,2,8
	.byte	'FEE',0,1
	.word	159
	.byte	1,5,2,35,2,8
	.byte	'HTE',0,1
	.word	159
	.byte	1,4,2,35,2,8
	.byte	'RTE',0,1
	.word	159
	.byte	1,3,2,35,2,8
	.byte	'BDE',0,1
	.word	159
	.byte	1,2,2,35,2,8
	.byte	'LPE',0,1
	.word	159
	.byte	1,1,2,35,2,8
	.byte	'LAE',0,1
	.word	159
	.byte	1,0,2,35,2,8
	.byte	'LCE',0,1
	.word	159
	.byte	1,7,2,35,3,8
	.byte	'CEE',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'RFOE',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'RFUE',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'RFLE',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'reserved_29',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'TFOE',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'TFLE',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,146,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4401
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_TXDATA_Bits',0,2,169,3,16,4,8
	.byte	'DATA',0,4
	.word	271
	.byte	32,0,2,35,0,0,9,2,138,5,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4866
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_RXDATA_Bits',0,2,142,3,16,4,8
	.byte	'DATA',0,4
	.word	271
	.byte	32,0,2,35,0,0,9,2,242,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4953
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_CSR_Bits',0,2,153,1,16,4,8
	.byte	'CLKSEL',0,1
	.word	159
	.byte	5,3,2,35,0,8
	.byte	'reserved_5',0,4
	.word	271
	.byte	26,1,2,35,0,8
	.byte	'CON',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,242,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5040
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_RXDATAD_Bits',0,2,148,3,16,4,8
	.byte	'DATA',0,4
	.word	271
	.byte	32,0,2,35,0,0,9,2,250,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5163
	.byte	4,2,35,0,0,12,148,1
	.word	159
	.byte	13,147,1,0,7
	.byte	'_Ifx_ASCLIN_OCS_Bits',0,2,132,3,16,4,8
	.byte	'reserved_0',0,4
	.word	271
	.byte	24,8,2,35,0,8
	.byte	'SUS',0,1
	.word	159
	.byte	4,4,2,35,3,8
	.byte	'SUS_P',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'SUSSTA',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'reserved_30',0,1
	.word	159
	.byte	2,0,2,35,3,0,9,2,234,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5262
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_KRSTCLR_Bits',0,2,227,2,16,4,8
	.byte	'CLR',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,4
	.word	271
	.byte	31,0,2,35,0,0,9,2,202,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5425
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_KRST1_Bits',0,2,220,2,16,4,8
	.byte	'RST',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,4
	.word	271
	.byte	31,0,2,35,0,0,9,2,194,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5534
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_KRST0_Bits',0,2,212,2,16,4,8
	.byte	'RST',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'RSTSTAT',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,4
	.word	271
	.byte	30,0,2,35,0,0,9,2,186,4,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5641
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_ACCEN1_Bits',0,2,107,16,4,8
	.byte	'reserved_0',0,4
	.word	271
	.byte	32,0,2,35,0,0,9,2,202,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5767
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN_ACCEN0_Bits',0,2,70,16,4,8
	.byte	'EN0',0,1
	.word	159
	.byte	1,7,2,35,0,8
	.byte	'EN1',0,1
	.word	159
	.byte	1,6,2,35,0,8
	.byte	'EN2',0,1
	.word	159
	.byte	1,5,2,35,0,8
	.byte	'EN3',0,1
	.word	159
	.byte	1,4,2,35,0,8
	.byte	'EN4',0,1
	.word	159
	.byte	1,3,2,35,0,8
	.byte	'EN5',0,1
	.word	159
	.byte	1,2,2,35,0,8
	.byte	'EN6',0,1
	.word	159
	.byte	1,1,2,35,0,8
	.byte	'EN7',0,1
	.word	159
	.byte	1,0,2,35,0,8
	.byte	'EN8',0,1
	.word	159
	.byte	1,7,2,35,1,8
	.byte	'EN9',0,1
	.word	159
	.byte	1,6,2,35,1,8
	.byte	'EN10',0,1
	.word	159
	.byte	1,5,2,35,1,8
	.byte	'EN11',0,1
	.word	159
	.byte	1,4,2,35,1,8
	.byte	'EN12',0,1
	.word	159
	.byte	1,3,2,35,1,8
	.byte	'EN13',0,1
	.word	159
	.byte	1,2,2,35,1,8
	.byte	'EN14',0,1
	.word	159
	.byte	1,1,2,35,1,8
	.byte	'EN15',0,1
	.word	159
	.byte	1,0,2,35,1,8
	.byte	'EN16',0,1
	.word	159
	.byte	1,7,2,35,2,8
	.byte	'EN17',0,1
	.word	159
	.byte	1,6,2,35,2,8
	.byte	'EN18',0,1
	.word	159
	.byte	1,5,2,35,2,8
	.byte	'EN19',0,1
	.word	159
	.byte	1,4,2,35,2,8
	.byte	'EN20',0,1
	.word	159
	.byte	1,3,2,35,2,8
	.byte	'EN21',0,1
	.word	159
	.byte	1,2,2,35,2,8
	.byte	'EN22',0,1
	.word	159
	.byte	1,1,2,35,2,8
	.byte	'EN23',0,1
	.word	159
	.byte	1,0,2,35,2,8
	.byte	'EN24',0,1
	.word	159
	.byte	1,7,2,35,3,8
	.byte	'EN25',0,1
	.word	159
	.byte	1,6,2,35,3,8
	.byte	'EN26',0,1
	.word	159
	.byte	1,5,2,35,3,8
	.byte	'EN27',0,1
	.word	159
	.byte	1,4,2,35,3,8
	.byte	'EN28',0,1
	.word	159
	.byte	1,3,2,35,3,8
	.byte	'EN29',0,1
	.word	159
	.byte	1,2,2,35,3,8
	.byte	'EN30',0,1
	.word	159
	.byte	1,1,2,35,3,8
	.byte	'EN31',0,1
	.word	159
	.byte	1,0,2,35,3,0,9,2,194,3,9,4,10
	.byte	'U',0
	.word	271
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	287
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5859
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_ASCLIN',0,2,183,5,25,128,2,10
	.byte	'CLC',0
	.word	414
	.byte	4,2,35,0,10
	.byte	'IOCR',0
	.word	731
	.byte	4,2,35,4,10
	.byte	'ID',0
	.word	856
	.byte	4,2,35,8,10
	.byte	'TXFIFOCON',0
	.word	1095
	.byte	4,2,35,12,10
	.byte	'RXFIFOCON',0
	.word	1350
	.byte	4,2,35,16,10
	.byte	'BITCON',0
	.word	1571
	.byte	4,2,35,20,10
	.byte	'FRAMECON',0
	.word	1836
	.byte	4,2,35,24,10
	.byte	'DATCON',0
	.word	2033
	.byte	4,2,35,28,10
	.byte	'BRG',0
	.word	2191
	.byte	4,2,35,32,10
	.byte	'BRD',0
	.word	2345
	.byte	4,2,35,36,10
	.byte	'LIN',0
	.word	2882
	.byte	12,2,35,40,10
	.byte	'FLAGS',0
	.word	3333
	.byte	4,2,35,52,10
	.byte	'FLAGSSET',0
	.word	3846
	.byte	4,2,35,56,10
	.byte	'FLAGSCLEAR',0
	.word	4361
	.byte	4,2,35,60,10
	.byte	'FLAGSENABLE',0
	.word	4826
	.byte	4,2,35,64,10
	.byte	'TXDATA',0
	.word	4913
	.byte	4,2,35,68,10
	.byte	'RXDATA',0
	.word	5000
	.byte	4,2,35,72,10
	.byte	'CSR',0
	.word	5123
	.byte	4,2,35,76,10
	.byte	'RXDATAD',0
	.word	5211
	.byte	4,2,35,80,10
	.byte	'reserved_54',0
	.word	5251
	.byte	148,1,2,35,84,10
	.byte	'OCS',0
	.word	5385
	.byte	4,3,35,232,1,10
	.byte	'KRSTCLR',0
	.word	5494
	.byte	4,3,35,236,1,10
	.byte	'KRST1',0
	.word	5601
	.byte	4,3,35,240,1,10
	.byte	'KRST0',0
	.word	5727
	.byte	4,3,35,244,1,10
	.byte	'ACCEN1',0
	.word	5819
	.byte	4,3,35,248,1,10
	.byte	'ACCEN0',0
	.word	6391
	.byte	4,3,35,252,1,0,11
	.word	6431
.L212:
	.byte	14
	.word	6873
	.byte	3
	.word	6878
.L318:
	.byte	14
	.word	159
.L247:
	.byte	15,1,126,9,1,16
	.byte	'UART_TX_IDLE',0,0,16
	.byte	'UART_TX_PREP_IN_PROGRESS',0,1,16
	.byte	'UART_TX_IN_PROGRESS',0,2,16
	.byte	'UART_TX_FIFO_COPY_IN_PROGRESS',0,3,16
	.byte	'UART_TX_ABORT_IN_PROGRESS',0,4,0
.L249:
	.byte	15,1,143,1,9,1,16
	.byte	'UART_RX_IDLE',0,0,16
	.byte	'UART_RX_PREP_IN_PROGRESS',0,1,16
	.byte	'UART_RX_IN_PROGRESS',0,2,16
	.byte	'UART_RX_FIFO_COPY_IN_PROGRESS',0,3,16
	.byte	'UART_RX_ABORT_IN_PROGRESS',0,4,16
	.byte	'UART_RX_STOP_STREAMING_IN_PROGRESS',0,5,0,17,1,164,1,9,20,10
	.byte	'RxBuffPtr',0
	.word	6888
	.byte	4,2,35,0,10
	.byte	'TxBuffPtr',0
	.word	6888
	.byte	4,2,35,4,10
	.byte	'ChanTxState',0
	.word	6893
	.byte	1,2,35,8,10
	.byte	'ChanRxState',0
	.word	7023
	.byte	1,2,35,9,10
	.byte	'TxDataLeft',0
	.word	454
	.byte	2,2,35,10,10
	.byte	'RxDataLeft',0
	.word	454
	.byte	2,2,35,12,10
	.byte	'TotalDataTxd',0
	.word	454
	.byte	2,2,35,14,10
	.byte	'TotalDataRxd',0
	.word	454
	.byte	2,2,35,16,10
	.byte	'RxIntLevel',0
	.word	159
	.byte	1,2,35,18,10
	.byte	'RxNotfn',0
	.word	159
	.byte	1,2,35,19,0
.L185:
	.byte	14
	.word	7191
	.byte	3
	.word	7399
.L303:
	.byte	15,3,229,1,9,1,16
	.byte	'UART_E_NO_ERR',0,0,16
	.byte	'UART_E_PARITY_ERR',0,1,16
	.byte	'UART_E_FRAME_ERR',0,2,16
	.byte	'UART_E_RXFIFO_OVERFLOW',0,3,16
	.byte	'UART_E_INSUFFICIENT_BUFSIZE',0,4,0,18,1,1,19
	.word	7409
	.byte	0,14
	.word	7526
	.byte	20
	.byte	'Uart_NotificationPtrType',0,3,155,2,15
	.word	7535
	.byte	18,1,1,19
	.word	7409
	.byte	19
	.word	454
	.byte	0,14
	.word	7574
	.byte	20
	.byte	'Uart_Streaming_NotificationPtrType',0,3,159,2,15
	.word	7588
	.byte	17,3,167,2,9,20,10
	.byte	'UartTransmitNotifPtr',0
	.word	7540
	.byte	4,2,35,0,10
	.byte	'UartReceiveNotifPtr',0
	.word	7540
	.byte	4,2,35,4,10
	.byte	'UartAbortTransmitNotifPtr',0
	.word	7540
	.byte	4,2,35,8,10
	.byte	'UartAbortReceiveNotifPtr',0
	.word	7540
	.byte	4,2,35,12,10
	.byte	'UartStreamingNotifPtr',0
	.word	7593
	.byte	4,2,35,16,0,17,3,183,2,9,40,10
	.byte	'UartNotif',0
	.word	7637
	.byte	20,2,35,0,10
	.byte	'ChanBaudRateNumerator',0
	.word	454
	.byte	2,2,35,20,10
	.byte	'ChanBaudRateDenominator',0
	.word	454
	.byte	2,2,35,22,10
	.byte	'ChanBaudRatePrescalar',0
	.word	454
	.byte	2,2,35,24,10
	.byte	'ChanOversampling',0
	.word	159
	.byte	1,2,35,26,10
	.byte	'HwModule',0
	.word	159
	.byte	1,2,35,27,10
	.byte	'StopBits',0
	.word	159
	.byte	1,2,35,28,10
	.byte	'DataLength',0
	.word	159
	.byte	1,2,35,29,10
	.byte	'RxPin',0
	.word	159
	.byte	1,2,35,30,10
	.byte	'ParityEnable',0
	.word	159
	.byte	1,2,35,31,10
	.byte	'Parity',0
	.word	159
	.byte	1,2,35,32,10
	.byte	'CTSPin',0
	.word	159
	.byte	1,2,35,33,10
	.byte	'CtsEnable',0
	.word	159
	.byte	1,2,35,34,10
	.byte	'CtsPolarity',0
	.word	159
	.byte	1,2,35,35,10
	.byte	'RxMode',0
	.word	159
	.byte	1,2,35,36,10
	.byte	'TxMode',0
	.word	159
	.byte	1,2,35,37,0,3
	.word	7803
.L187:
	.byte	14
	.word	8147
	.byte	3
	.word	8152
.L287:
	.byte	21
	.byte	'Uart_lTrasmitComplete',0,3,1,159,25,19,1,1
.L289:
	.byte	5
	.byte	'HwModulePtr',0,1,159,25,59
	.word	6883
.L291:
	.byte	5
	.byte	'ChannelInfoPtr',0,1,160,25,56
	.word	7404
.L293:
	.byte	5
	.byte	'ChannelConfigPtr',0,1,161,25,64
	.word	8157
.L295:
	.byte	6,0,14
	.word	7526
	.byte	14
	.word	7574
	.byte	3
	.word	6878
.L329:
	.byte	21
	.byte	'Uart_lDisableReadInterrupts',0,3,1,233,29,19,1,1
.L332:
	.byte	5
	.byte	'HwModulePtr',0,1,233,29,65
	.word	8275
.L334:
	.byte	6,0,3
	.word	6878
.L223:
	.byte	21
	.byte	'Uart_lEnableReadInterrupts',0,3,1,253,24,19,1,1
.L226:
	.byte	5
	.byte	'HwModulePtr',0,1,253,24,64
	.word	8339
.L228:
	.byte	6,0,3
	.word	6878
.L357:
	.byte	21
	.byte	'Uart_lEnableWriteInterrupts',0,3,1,135,32,19,1,1
.L360:
	.byte	5
	.byte	'HwModulePtr',0,1,135,32,65
	.word	8402
.L362:
	.byte	6,0,3
	.word	6878
.L217:
	.byte	21
	.byte	'Uart_lClearReadInterrupts',0,3,1,137,30,19,1,1
.L220:
	.byte	5
	.byte	'HwModulePtr',0,1,137,30,63
	.word	8466
.L222:
	.byte	6,0,22
	.byte	'void',0,11
	.word	8528
	.byte	14
	.word	8534
	.byte	3
	.word	8539
	.byte	3
	.word	181
	.byte	23
	.byte	'Mcal_WritePeripEndInitProtReg',0,4,165,4,13,1,1,1,1,5
	.byte	'RegAddress',0,4,166,4,24
	.word	8544
	.byte	5
	.byte	'DataValue',0,4,166,4,49
	.word	8549
	.byte	0,24
	.byte	'Mcal_DelayTickResolution',0,4,224,5,15
	.word	181
	.byte	1,1,1,1,24
	.byte	'Mcal_DelayGetTick',0,4,156,6,15
	.word	181
	.byte	1,1,1,1,3
	.word	159
	.byte	14
	.word	8702
	.byte	17,3,225,2,9,12,10
	.byte	'ChannelConfigPtr',0
	.word	8152
	.byte	4,2,35,0,10
	.byte	'Uart_ChannelIdLookupPtr',0
	.word	8707
	.byte	4,2,35,4,10
	.byte	'NoOfChannels',0
	.word	159
	.byte	1,2,35,8,0,3
	.word	8712
.L383:
	.byte	14
	.word	8800
.L183:
	.byte	3
	.word	8805
.L204:
	.byte	15,3,251,1,9,1,16
	.byte	'UART_E_OK',0,0,16
	.byte	'UART_E_NOT_OK',0,1,16
	.byte	'UART_E_BUSY',0,2,0
.L206:
	.byte	3
	.word	159
.L208:
	.byte	3
	.word	6888
.L210:
	.byte	3
	.word	454
.L230:
	.byte	3
	.word	159
.L232:
	.byte	3
	.word	6888
.L234:
	.byte	3
	.word	454
.L240:
	.byte	15,3,140,2,9,1,16
	.byte	'UART_IDLE',0,0,16
	.byte	'UART_BUSY_TRANSMIT',0,1,16
	.byte	'UART_BUSY_RECEIVE',0,2,16
	.byte	'UART_BUSY_TRANSMIT_RECEIVE',0,3,0
.L242:
	.byte	3
	.word	159
	.byte	3
	.word	7191
.L245:
	.byte	14
	.word	8988
.L252:
	.byte	3
	.word	159
.L262:
	.byte	3
	.word	159
.L272:
	.byte	3
	.word	159
	.byte	25
	.word	207
	.byte	26
	.word	238
	.byte	26
	.word	254
	.byte	6,0,25
	.word	8162
	.byte	26
	.word	8192
	.byte	26
	.word	8213
	.byte	26
	.word	8237
	.byte	6,0,25
	.word	8280
	.byte	26
	.word	8316
	.byte	6,0,25
	.word	8344
	.byte	26
	.word	8379
	.byte	6,0,25
	.word	8407
	.byte	26
	.word	8443
	.byte	6,0,25
	.word	8471
	.byte	26
	.word	8505
	.byte	6,0
.L297:
	.byte	3
	.word	8152
.L299:
	.byte	3
	.word	6878
.L301:
	.byte	3
	.word	7399
.L310:
	.byte	3
	.word	6878
.L312:
	.byte	3
	.word	7399
.L314:
	.byte	3
	.word	8152
.L316:
	.byte	3
	.word	159
.L336:
	.byte	3
	.word	159
.L338:
	.byte	3
	.word	8152
.L344:
	.byte	3
	.word	6878
.L346:
	.byte	3
	.word	7399
.L348:
	.byte	3
	.word	8152
.L364:
	.byte	3
	.word	6878
.L370:
	.byte	3
	.word	181
	.byte	11
	.word	6431
	.byte	3
	.word	9170
	.byte	14
	.word	9175
.L372:
	.byte	3
	.word	9180
.L374:
	.byte	3
	.word	159
.L376:
	.byte	3
	.word	159
	.byte	27
	.byte	'__INDIRECT__',0,1,1,1,1,1,1,28,1,14
	.word	9220
	.byte	20
	.byte	'__codeptr',0,1,1,1
	.word	9222
	.byte	20
	.byte	'Ifx_UReg_8Bit',0,5,79,24
	.word	159
	.byte	20
	.byte	'Ifx_UReg_32Bit',0,5,81,24
	.word	271
	.byte	20
	.byte	'Ifx_SReg_32Bit',0,5,84,24
	.word	287
	.byte	20
	.byte	'Ifx_ASCLIN_ACCEN0_Bits',0,2,104,3
	.word	5859
	.byte	20
	.byte	'Ifx_ASCLIN_ACCEN1_Bits',0,2,110,3
	.word	5767
	.byte	20
	.byte	'Ifx_ASCLIN_BITCON_Bits',0,2,122,3
	.word	1390
	.byte	20
	.byte	'Ifx_ASCLIN_BRD_Bits',0,2,131,1,3
	.word	2231
	.byte	20
	.byte	'Ifx_ASCLIN_BRG_Bits',0,2,140,1,3
	.word	2073
	.byte	20
	.byte	'Ifx_ASCLIN_CLC_Bits',0,2,150,1,3
	.word	294
	.byte	20
	.byte	'Ifx_ASCLIN_CSR_Bits',0,2,158,1,3
	.word	5040
	.byte	20
	.byte	'Ifx_ASCLIN_DATCON_Bits',0,2,170,1,3
	.word	1876
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGS_Bits',0,2,202,1,3
	.word	2887
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGSCLEAR_Bits',0,2,234,1,3
	.word	3886
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGSENABLE_Bits',0,2,135,2,3
	.word	4401
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGSSET_Bits',0,2,167,2,3
	.word	3373
	.byte	20
	.byte	'Ifx_ASCLIN_FRAMECON_Bits',0,2,183,2,3
	.word	1611
	.byte	20
	.byte	'Ifx_ASCLIN_ID_Bits',0,2,191,2,3
	.word	771
	.byte	20
	.byte	'Ifx_ASCLIN_IOCR_Bits',0,2,209,2,3
	.word	476
	.byte	20
	.byte	'Ifx_ASCLIN_KRST0_Bits',0,2,217,2,3
	.word	5641
	.byte	20
	.byte	'Ifx_ASCLIN_KRST1_Bits',0,2,224,2,3
	.word	5534
	.byte	20
	.byte	'Ifx_ASCLIN_KRSTCLR_Bits',0,2,231,2,3
	.word	5425
	.byte	20
	.byte	'Ifx_ASCLIN_LIN_BTIMER_Bits',0,2,238,2,3
	.word	2585
	.byte	20
	.byte	'Ifx_ASCLIN_LIN_CON_Bits',0,2,250,2,3
	.word	2385
	.byte	20
	.byte	'Ifx_ASCLIN_LIN_HTIMER_Bits',0,2,129,3,3
	.word	2699
	.byte	20
	.byte	'Ifx_ASCLIN_OCS_Bits',0,2,139,3,3
	.word	5262
	.byte	20
	.byte	'Ifx_ASCLIN_RXDATA_Bits',0,2,145,3,3
	.word	4953
	.byte	20
	.byte	'Ifx_ASCLIN_RXDATAD_Bits',0,2,151,3,3
	.word	5163
	.byte	20
	.byte	'Ifx_ASCLIN_RXFIFOCON_Bits',0,2,166,3,3
	.word	1135
	.byte	20
	.byte	'Ifx_ASCLIN_TXDATA_Bits',0,2,172,3,3
	.word	4866
	.byte	20
	.byte	'Ifx_ASCLIN_TXFIFOCON_Bits',0,2,186,3,3
	.word	896
	.byte	20
	.byte	'Ifx_ASCLIN_ACCEN0',0,2,199,3,3
	.word	6391
	.byte	20
	.byte	'Ifx_ASCLIN_ACCEN1',0,2,207,3,3
	.word	5819
	.byte	20
	.byte	'Ifx_ASCLIN_BITCON',0,2,215,3,3
	.word	1571
	.byte	20
	.byte	'Ifx_ASCLIN_BRD',0,2,223,3,3
	.word	2345
	.byte	20
	.byte	'Ifx_ASCLIN_BRG',0,2,231,3,3
	.word	2191
	.byte	20
	.byte	'Ifx_ASCLIN_CLC',0,2,239,3,3
	.word	414
	.byte	20
	.byte	'Ifx_ASCLIN_CSR',0,2,247,3,3
	.word	5123
	.byte	20
	.byte	'Ifx_ASCLIN_DATCON',0,2,255,3,3
	.word	2033
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGS',0,2,135,4,3
	.word	3333
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGSCLEAR',0,2,143,4,3
	.word	4361
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGSENABLE',0,2,151,4,3
	.word	4826
	.byte	20
	.byte	'Ifx_ASCLIN_FLAGSSET',0,2,159,4,3
	.word	3846
	.byte	20
	.byte	'Ifx_ASCLIN_FRAMECON',0,2,167,4,3
	.word	1836
	.byte	20
	.byte	'Ifx_ASCLIN_ID',0,2,175,4,3
	.word	856
	.byte	20
	.byte	'Ifx_ASCLIN_IOCR',0,2,183,4,3
	.word	731
	.byte	20
	.byte	'Ifx_ASCLIN_KRST0',0,2,191,4,3
	.word	5727
	.byte	20
	.byte	'Ifx_ASCLIN_KRST1',0,2,199,4,3
	.word	5601
	.byte	20
	.byte	'Ifx_ASCLIN_KRSTCLR',0,2,207,4,3
	.word	5494
	.byte	20
	.byte	'Ifx_ASCLIN_LIN_BTIMER',0,2,215,4,3
	.word	2659
	.byte	20
	.byte	'Ifx_ASCLIN_LIN_CON',0,2,223,4,3
	.word	2545
	.byte	20
	.byte	'Ifx_ASCLIN_LIN_HTIMER',0,2,231,4,3
	.word	2774
	.byte	20
	.byte	'Ifx_ASCLIN_OCS',0,2,239,4,3
	.word	5385
	.byte	20
	.byte	'Ifx_ASCLIN_RXDATA',0,2,247,4,3
	.word	5000
	.byte	20
	.byte	'Ifx_ASCLIN_RXDATAD',0,2,255,4,3
	.word	5211
	.byte	20
	.byte	'Ifx_ASCLIN_RXFIFOCON',0,2,135,5,3
	.word	1350
	.byte	20
	.byte	'Ifx_ASCLIN_TXDATA',0,2,143,5,3
	.word	4913
	.byte	20
	.byte	'Ifx_ASCLIN_TXFIFOCON',0,2,151,5,3
	.word	1095
	.byte	11
	.word	2814
	.byte	20
	.byte	'Ifx_ASCLIN_LIN',0,2,168,5,3
	.word	10915
	.byte	11
	.word	6431
	.byte	20
	.byte	'Ifx_ASCLIN',0,2,211,5,3
	.word	10944
	.byte	20
	.byte	'uint8',0,6,106,29
	.word	159
	.byte	20
	.byte	'uint16',0,6,110,29
	.word	454
	.byte	20
	.byte	'uint32',0,6,114,29
	.word	181
	.byte	20
	.byte	'Uart_MemType',0,3,205,1,15
	.word	159
	.byte	20
	.byte	'Uart_SizeType',0,3,213,1,16
	.word	454
	.byte	20
	.byte	'Uart_ChannelIdType',0,3,221,1,15
	.word	159
	.byte	20
	.byte	'Uart_ReturnType',0,3,131,2,3
	.word	8815
	.byte	20
	.byte	'Uart_StatusType',0,3,150,2,3
	.word	8894
	.byte	20
	.byte	'Uart_NotifType',0,3,174,2,3
	.word	7637
	.byte	20
	.byte	'Uart_ChannelConfigType',0,3,217,2,3
	.word	7803
	.byte	20
	.byte	'Uart_ConfigType',0,3,233,2,3
	.word	8712
	.byte	20
	.byte	'Uart_TxStateType',0,1,138,1,3
	.word	6893
	.byte	20
	.byte	'Uart_RxStateType',0,1,157,1,3
	.word	7023
	.byte	20
	.byte	'Uart_ChannelInfoType',0,1,192,1,3
	.word	7191
	.byte	12,48
	.word	6878
	.byte	13,11,0
.L382:
	.byte	3
	.word	11299
.L384:
	.byte	12,20
	.word	7191
	.byte	13,0,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L109:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,19,1,3,8
	.byte	58,15,59,15,57,15,11,15,0,0,8,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,9,23,1,58,15,59,15,57,15,11,15
	.byte	0,0,10,13,0,3,8,73,19,11,15,56,9,0,0,11,53,0,73,19,0,0,12,1,1,11,15,73,19,0,0,13,33,0,47,15,0,0,14,15
	.byte	0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0,17,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,18,21,1,54,15,39,12,0,0,19,5,0,73,19,0,0,20,22,0,3,8,58,15,59,15,57,15,73,19,0,0,21,46,1,3,8,32,13,58
	.byte	15,59,15,57,15,54,15,39,12,0,0,22,59,0,3,8,0,0,23,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0
	.byte	0,24,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,25,46,1,49,19,0,0,26,5,0,49,19,0,0,27
	.byte	46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,28,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L110:
	.word	.L527-.L526
.L526:
	.half	3
	.word	.L529-.L528
.L528:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0
	.byte	'IfxAsclin_regdef.h',0,1,0,0
	.byte	'Uart.h',0,2,0,0
	.byte	'McalLib.h',0,3,0,0
	.byte	'Ifx_TypesReg.h',0,1,0,0
	.byte	'Platform_Types.h',0,4,0,0,0
.L529:
.L527:
	.sdecl	'.debug_info',debug,cluster('Uart_Init')
	.sect	'.debug_info'
.L111:
	.word	491
	.half	3
	.word	.L112
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L114,.L113
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_Init',0,1,172,8,6,1,1,1
	.word	.L82,.L182,.L81
	.byte	4
	.byte	'ConfigPtr',0,1,172,8,45
	.word	.L183,.L184
	.byte	5
	.word	.L82,.L182
	.byte	6
	.byte	'ChannelInfoPtr',0,1,174,8,25
	.word	.L185,.L186
	.byte	6
	.byte	'ChannelConfigPtr',0,1,175,8,33
	.word	.L187,.L188
	.byte	6
	.byte	'ModuleNo',0,1,176,8,9
	.word	.L189,.L190
	.byte	6
	.byte	'ChannelCounter',0,1,177,8,9
	.word	.L189,.L191
	.byte	6
	.byte	'MaxChannel',0,1,178,8,9
	.word	.L189,.L192
	.byte	6
	.byte	'ClkDisableChk',0,1,179,8,9
	.word	.L189,.L193
	.byte	6
	.byte	'ClkFailureCounter',0,1,180,8,9
	.word	.L189,.L194
	.byte	7
	.word	.L195,.L196,.L197
	.byte	8
	.word	.L198,.L199
	.byte	8
	.word	.L200,.L201
	.byte	9
	.word	.L202,.L196,.L197
	.byte	6
	.byte	'ModClkStatus',0,1,201,21,9
	.word	.L189,.L203
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_Init')
	.sect	'.debug_abbrev'
.L112:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_Init')
	.sect	'.debug_line'
.L113:
	.word	.L531-.L530
.L530:
	.half	3
	.word	.L533-.L532
.L532:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L533:
	.byte	5,6,7,0,5,2
	.word	.L82
	.byte	3,171,8,1,5,27,9
	.half	.L385-.L82
	.byte	3,47,1,5,23,9
	.half	.L386-.L385
	.byte	3,1,1,5,24,9
	.half	.L387-.L386
	.byte	3,7,1,5,39,9
	.half	.L389-.L387
	.byte	3,26,1,5,57,9
	.half	.L391-.L389
	.byte	3,102,1,5,55,9
	.half	.L3-.L391
	.byte	3,2,1,5,37,9
	.half	.L534-.L3
	.byte	1,5,55,9
	.half	.L535-.L534
	.byte	1,5,41,9
	.half	.L392-.L535
	.byte	3,1,1,5,25,9
	.half	.L536-.L392
	.byte	1,5,41,9
	.half	.L537-.L536
	.byte	1,5,34,9
	.half	.L393-.L537
	.byte	3,2,1,5,52,9
	.half	.L394-.L393
	.byte	3,5,1,5,3,9
	.half	.L196-.L394
	.byte	3,224,12,1,5,28,9
	.half	.L538-.L196
	.byte	3,5,1,5,45,9
	.half	.L539-.L538
	.byte	1,5,58,9
	.half	.L540-.L539
	.byte	1,5,47,9
	.half	.L541-.L540
	.byte	3,1,1,5,62,9
	.half	.L542-.L541
	.byte	3,127,1,5,7,9
	.half	.L395-.L542
	.byte	3,158,115,1,5,31,7,9
	.half	.L197-.L395
	.byte	3,5,1,5,48,9
	.half	.L543-.L197
	.byte	1,5,32,9
	.half	.L544-.L543
	.byte	3,5,1,5,37,9
	.half	.L397-.L544
	.byte	3,3,1,9
	.half	.L545-.L397
	.byte	3,1,1,5,59,9
	.half	.L399-.L545
	.byte	3,119,1,5,26,9
	.half	.L4-.L399
	.byte	3,15,1,5,73,9
	.half	.L5-.L4
	.byte	3,95,1,5,57,9
	.half	.L2-.L5
	.byte	1,5,5,7,9
	.half	.L546-.L2
	.byte	3,39,1,5,7,7,9
	.half	.L547-.L546
	.byte	3,5,1,5,22,9
	.half	.L548-.L547
	.byte	1,5,1,9
	.half	.L6-.L548
	.byte	3,19,1,7,9
	.half	.L115-.L6
	.byte	0,1,1
.L531:
	.sdecl	'.debug_ranges',debug,cluster('Uart_Init')
	.sect	'.debug_ranges'
.L114:
	.word	-1,.L82,0,.L115-.L82,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_Read')
	.sect	'.debug_info'
.L116:
	.word	438
	.half	3
	.word	.L117
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L119,.L118
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_Read',0,1,248,10,17
	.word	.L204
	.byte	1,1,1
	.word	.L84,.L205,.L83
	.byte	4
	.byte	'Channel',0,1,248,10,52
	.word	.L206,.L207
	.byte	4
	.byte	'MemPtr',0,1,249,10,47
	.word	.L208,.L209
	.byte	4
	.byte	'Size',0,1,250,10,47
	.word	.L210,.L211
	.byte	5
	.word	.L84,.L205
	.byte	6
	.byte	'HwModulePtr',0,1,252,10,15
	.word	.L212,.L213
	.byte	6
	.byte	'ChannelInfoPtr',0,1,253,10,25
	.word	.L185,.L214
	.byte	6
	.byte	'RetValue',0,1,254,10,19
	.word	.L204,.L215
	.byte	6
	.byte	'IntLevel',0,1,255,10,9
	.word	.L189,.L216
	.byte	7
	.word	.L217,.L218,.L219
	.byte	8
	.word	.L220,.L221
	.byte	9
	.word	.L222,.L218,.L219
	.byte	0,7
	.word	.L223,.L224,.L225
	.byte	8
	.word	.L226,.L227
	.byte	9
	.word	.L228,.L224,.L225
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_Read')
	.sect	'.debug_abbrev'
.L117:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_Read')
	.sect	'.debug_line'
.L118:
	.word	.L550-.L549
.L549:
	.half	3
	.word	.L552-.L551
.L551:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L552:
	.byte	5,12,7,0,5,2
	.word	.L84
	.byte	3,139,11,1,5,37,9
	.half	.L401-.L84
	.byte	3,1,1,5,21,9
	.half	.L553-.L401
	.byte	1,5,37,9
	.half	.L554-.L553
	.byte	1,5,20,9
	.half	.L402-.L554
	.byte	3,4,1,5,3,9
	.half	.L555-.L402
	.byte	1,5,14,7,9
	.half	.L556-.L555
	.byte	3,4,1,5,1,9
	.half	.L557-.L556
	.byte	3,206,0,1,5,35,7,9
	.half	.L7-.L557
	.byte	3,189,127,1,5,33,9
	.half	.L558-.L7
	.byte	1,5,31,9
	.half	.L559-.L558
	.byte	3,1,1,5,32,9
	.half	.L560-.L559
	.byte	3,1,1,5,36,9
	.half	.L561-.L560
	.byte	3,1,1,5,34,9
	.half	.L562-.L561
	.byte	1,5,29,9
	.half	.L563-.L562
	.byte	3,1,1,5,53,9
	.half	.L564-.L563
	.byte	3,8,1,5,37,9
	.half	.L565-.L564
	.byte	3,127,1,5,51,9
	.half	.L566-.L565
	.byte	1,5,53,9
	.half	.L567-.L566
	.byte	3,1,1,5,62,9
	.half	.L568-.L567
	.byte	1,5,19,9
	.half	.L569-.L568
	.byte	3,127,1,5,36,9
	.half	.L570-.L569
	.byte	1,5,29,9
	.half	.L403-.L570
	.byte	3,3,1,5,36,9
	.half	.L571-.L403
	.byte	1,5,26,9
	.half	.L218-.L571
	.byte	3,224,18,1,5,33,9
	.half	.L572-.L218
	.byte	1,5,29,9
	.half	.L573-.L572
	.byte	1,5,15,9
	.half	.L219-.L573
	.byte	3,166,109,1,5,5,9
	.half	.L574-.L219
	.byte	1,5,31,7,9
	.half	.L575-.L574
	.byte	3,5,1,5,43,9
	.half	.L404-.L575
	.byte	1,5,16,9
	.half	.L9-.L404
	.byte	3,7,1,5,29,9
	.half	.L10-.L9
	.byte	3,6,1,5,39,9
	.half	.L576-.L10
	.byte	1,5,43,9
	.half	.L577-.L576
	.byte	3,1,1,5,32,9
	.half	.L405-.L577
	.byte	1,5,29,9
	.half	.L224-.L405
	.byte	3,188,13,1,5,35,9
	.half	.L578-.L224
	.byte	1,5,32,9
	.half	.L579-.L578
	.byte	1,5,29,9
	.half	.L225-.L579
	.byte	3,219,114,1,5,34,9
	.half	.L580-.L225
	.byte	1,5,35,9
	.half	.L581-.L580
	.byte	3,1,1,5,33,9
	.half	.L582-.L581
	.byte	1,5,1,9
	.half	.L583-.L582
	.byte	3,4,1,7,9
	.half	.L120-.L583
	.byte	0,1,1
.L550:
	.sdecl	'.debug_ranges',debug,cluster('Uart_Read')
	.sect	'.debug_ranges'
.L119:
	.word	-1,.L84,0,.L120-.L84,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_Write')
	.sect	'.debug_info'
.L121:
	.word	375
	.half	3
	.word	.L122
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L124,.L123
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_Write',0,1,167,14,17
	.word	.L204
	.byte	1,1,1
	.word	.L86,.L229,.L85
	.byte	4
	.byte	'Channel',0,1,167,14,53
	.word	.L230,.L231
	.byte	4
	.byte	'MemPtr',0,1,168,14,48
	.word	.L232,.L233
	.byte	4
	.byte	'Size',0,1,169,14,48
	.word	.L234,.L235
	.byte	5
	.word	.L86,.L229
	.byte	6
	.byte	'ChannelConfigPtr',0,1,171,14,33
	.word	.L187,.L236
	.byte	6
	.byte	'HwModulePtr',0,1,172,14,15
	.word	.L212,.L237
	.byte	6
	.byte	'ChannelInfoPtr',0,1,173,14,25
	.word	.L185,.L238
	.byte	6
	.byte	'RetValue',0,1,174,14,19
	.word	.L204,.L239
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_Write')
	.sect	'.debug_abbrev'
.L122:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_Write')
	.sect	'.debug_line'
.L123:
	.word	.L585-.L584
.L584:
	.half	3
	.word	.L587-.L586
.L586:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L587:
	.byte	5,12,7,0,5,2
	.word	.L86
	.byte	3,189,14,1,5,37,9
	.half	.L408-.L86
	.byte	3,1,1,5,21,9
	.half	.L588-.L408
	.byte	1,5,37,9
	.half	.L589-.L588
	.byte	1,5,20,9
	.half	.L409-.L589
	.byte	3,4,1,5,3,9
	.half	.L590-.L409
	.byte	1,5,14,7,9
	.half	.L591-.L590
	.byte	3,5,1,5,27,9
	.half	.L592-.L591
	.byte	1,5,35,9
	.half	.L12-.L592
	.byte	3,11,1,5,33,9
	.half	.L593-.L12
	.byte	1,5,58,9
	.half	.L594-.L593
	.byte	3,2,1,5,26,9
	.half	.L595-.L594
	.byte	1,5,40,9
	.half	.L596-.L595
	.byte	1,5,58,9
	.half	.L597-.L596
	.byte	1,5,53,9
	.half	.L410-.L597
	.byte	3,2,1,5,19,9
	.half	.L598-.L410
	.byte	1,5,36,9
	.half	.L599-.L598
	.byte	1,5,31,9
	.half	.L411-.L599
	.byte	3,5,1,5,32,9
	.half	.L600-.L411
	.byte	3,1,1,5,36,9
	.half	.L601-.L600
	.byte	3,1,1,5,34,9
	.half	.L602-.L601
	.byte	1,5,29,9
	.half	.L603-.L602
	.byte	3,2,1,5,36,9
	.half	.L604-.L603
	.byte	1,5,46,9
	.half	.L605-.L604
	.byte	3,5,1,5,35,9
	.half	.L406-.L605
	.byte	3,1,1,5,33,9
	.half	.L606-.L406
	.byte	1,5,3,9
	.half	.L13-.L606
	.byte	3,3,1,5,1,9
	.half	.L413-.L13
	.byte	3,1,1,7,9
	.half	.L125-.L413
	.byte	0,1,1
.L585:
	.sdecl	'.debug_ranges',debug,cluster('Uart_Write')
	.sect	'.debug_ranges'
.L124:
	.word	-1,.L86,0,.L125-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_GetStatus')
	.sect	'.debug_info'
.L126:
	.word	341
	.half	3
	.word	.L127
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L129,.L128
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_GetStatus',0,1,150,17,17
	.word	.L240
	.byte	1,1,1
	.word	.L88,.L241,.L87
	.byte	4
	.byte	'Channel',0,1,150,17,57
	.word	.L242,.L243
	.byte	5
	.word	.L88,.L241
	.byte	6
	.byte	'UartChanState',0,1,154,17,19
	.word	.L240,.L244
	.byte	6
	.byte	'ChannelInfoPtr',0,1,155,17,31
	.word	.L245,.L246
	.byte	6
	.byte	'ChanTxState',0,1,156,17,20
	.word	.L247,.L248
	.byte	6
	.byte	'ChanRxState',0,1,157,17,20
	.word	.L249,.L250
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_GetStatus')
	.sect	'.debug_abbrev'
.L127:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_GetStatus')
	.sect	'.debug_line'
.L128:
	.word	.L608-.L607
.L607:
	.half	3
	.word	.L610-.L609
.L609:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L610:
	.byte	5,39,7,0,5,2
	.word	.L88
	.byte	3,188,17,1,5,23,9
	.half	.L611-.L88
	.byte	1,5,39,9
	.half	.L612-.L611
	.byte	1,5,33,9
	.half	.L414-.L612
	.byte	3,2,1,9
	.half	.L415-.L414
	.byte	3,1,1,5,8,9
	.half	.L416-.L415
	.byte	3,4,1,5,54,7,9
	.half	.L613-.L416
	.byte	1,5,21,7,9
	.half	.L614-.L613
	.byte	3,4,1,5,1,9
	.half	.L417-.L614
	.byte	3,27,1,5,10,7,9
	.half	.L15-.L417
	.byte	3,105,1,5,21,7,9
	.half	.L615-.L15
	.byte	3,4,1,5,1,9
	.half	.L418-.L615
	.byte	3,19,1,5,25,7,9
	.half	.L18-.L418
	.byte	3,113,1,5,1,9
	.half	.L616-.L18
	.byte	3,15,1,7,9
	.half	.L130-.L616
	.byte	0,1,1
.L608:
	.sdecl	'.debug_ranges',debug,cluster('Uart_GetStatus')
	.sect	'.debug_ranges'
.L129:
	.word	-1,.L88,0,.L130-.L88,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_info'
.L131:
	.word	410
	.half	3
	.word	.L132
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L134,.L133
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_IsrReceive',0,1,179,18,6,1,1,1
	.word	.L90,.L251,.L89
	.byte	4
	.byte	'HwUnit',0,1,179,18,34
	.word	.L252,.L253
	.byte	5
	.word	.L90,.L251
	.byte	6
	.byte	'ChannelConfigPtr',0,1,181,18,33
	.word	.L187,.L254
	.byte	6
	.byte	'HwModulePtr',0,1,182,18,15
	.word	.L212,.L255
	.byte	6
	.byte	'ChannelInfoPtr',0,1,183,18,25
	.word	.L185,.L256
	.byte	6
	.byte	'Channel',0,1,184,18,22
	.word	.L189,.L257
	.byte	6
	.byte	'FlagEnable',0,1,185,18,9
	.word	.L189,.L258
	.byte	6
	.byte	'ReceiveStatus',0,1,186,18,9
	.word	.L189,.L259
	.byte	6
	.byte	'FillLevel',0,1,187,18,9
	.word	.L189,.L260
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_abbrev'
.L132:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_line'
.L133:
	.word	.L618-.L617
.L617:
	.half	3
	.word	.L620-.L619
.L619:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L620:
	.byte	5,3,7,0,5,2
	.word	.L90
	.byte	3,190,18,1,5,19,7,9
	.half	.L621-.L90
	.byte	3,3,1,5,36,9
	.half	.L622-.L621
	.byte	1,5,15,9
	.half	.L421-.L622
	.byte	3,2,1,5,29,9
	.half	.L623-.L421
	.byte	1,5,54,9
	.half	.L624-.L623
	.byte	1,5,19,9
	.half	.L422-.L624
	.byte	3,4,1,5,5,9
	.half	.L625-.L422
	.byte	1,5,60,7,9
	.half	.L626-.L625
	.byte	3,2,1,5,42,9
	.half	.L627-.L626
	.byte	1,5,60,9
	.half	.L628-.L627
	.byte	1,5,41,9
	.half	.L424-.L628
	.byte	3,1,1,5,25,9
	.half	.L629-.L424
	.byte	1,5,41,9
	.half	.L630-.L629
	.byte	1,5,43,9
	.half	.L425-.L630
	.byte	3,1,1,9
	.half	.L423-.L425
	.byte	3,1,1,5,46,9
	.half	.L426-.L423
	.byte	3,1,1,5,32,9
	.half	.L427-.L426
	.byte	3,3,1,5,38,9
	.half	.L631-.L427
	.byte	1,5,25,9
	.half	.L632-.L631
	.byte	3,5,1,5,10,9
	.half	.L633-.L632
	.byte	1,5,25,7,9
	.half	.L634-.L633
	.byte	3,1,1,5,39,9
	.half	.L635-.L634
	.byte	1,7,9
	.half	.L636-.L635
	.byte	3,1,1,5,12,7,9
	.half	.L637-.L636
	.byte	3,5,1,5,41,7,9
	.half	.L638-.L637
	.byte	3,1,1,5,24,9
	.half	.L639-.L638
	.byte	1,5,25,7,9
	.half	.L640-.L639
	.byte	3,1,1,5,60,7,9
	.half	.L641-.L640
	.byte	1,5,72,7,9
	.half	.L642-.L641
	.byte	3,21,1,5,37,9
	.half	.L23-.L642
	.byte	3,21,1,5,35,9
	.half	.L643-.L23
	.byte	1,5,1,9
	.half	.L21-.L643
	.byte	3,23,1,7,9
	.half	.L135-.L21
	.byte	0,1,1
.L618:
	.sdecl	'.debug_ranges',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_ranges'
.L134:
	.word	-1,.L90,0,.L135-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_info'
.L136:
	.word	412
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L139,.L138
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_IsrTransmit',0,1,183,19,6,1,1,1
	.word	.L92,.L261,.L91
	.byte	4
	.byte	'HwUnit',0,1,183,19,35
	.word	.L262,.L263
	.byte	5
	.word	.L92,.L261
	.byte	6
	.byte	'HwModulePtr',0,1,185,19,15
	.word	.L212,.L264
	.byte	6
	.byte	'ChannelConfigPtr',0,1,186,19,33
	.word	.L187,.L265
	.byte	6
	.byte	'ChannelInfoPtr',0,1,187,19,25
	.word	.L185,.L266
	.byte	6
	.byte	'Channel',0,1,188,19,22
	.word	.L189,.L267
	.byte	6
	.byte	'FillLevel',0,1,189,19,9
	.word	.L189,.L268
	.byte	6
	.byte	'TransmitStatus',0,1,190,19,9
	.word	.L189,.L269
	.byte	6
	.byte	'FlagEnable',0,1,191,19,9
	.word	.L189,.L270
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_line'
.L138:
	.word	.L645-.L644
.L644:
	.half	3
	.word	.L647-.L646
.L646:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L647:
	.byte	5,3,7,0,5,2
	.word	.L92
	.byte	3,194,19,1,5,19,7,9
	.half	.L648-.L92
	.byte	3,3,1,5,36,9
	.half	.L649-.L648
	.byte	1,5,15,9
	.half	.L428-.L649
	.byte	3,1,1,5,29,9
	.half	.L650-.L428
	.byte	1,5,54,9
	.half	.L651-.L650
	.byte	1,5,19,9
	.half	.L429-.L651
	.byte	3,4,1,5,5,9
	.half	.L652-.L429
	.byte	1,5,41,7,9
	.half	.L653-.L652
	.byte	3,2,1,5,25,9
	.half	.L654-.L653
	.byte	1,5,41,9
	.half	.L655-.L654
	.byte	1,5,43,9
	.half	.L430-.L655
	.byte	3,1,1,5,44,9
	.half	.L431-.L430
	.byte	3,1,1,5,46,9
	.half	.L432-.L431
	.byte	3,1,1,5,32,9
	.half	.L433-.L432
	.byte	3,2,1,5,38,9
	.half	.L656-.L433
	.byte	1,5,12,9
	.half	.L657-.L656
	.byte	3,11,1,5,27,7,9
	.half	.L658-.L657
	.byte	3,1,1,5,41,9
	.half	.L659-.L658
	.byte	1,5,28,7,9
	.half	.L660-.L659
	.byte	3,1,1,5,60,7,9
	.half	.L661-.L660
	.byte	1,5,64,7,9
	.half	.L662-.L661
	.byte	3,2,1,5,32,9
	.half	.L663-.L662
	.byte	1,5,46,9
	.half	.L664-.L663
	.byte	1,5,64,9
	.half	.L665-.L664
	.byte	1,5,52,9
	.half	.L434-.L665
	.byte	3,4,1,5,1,7,9
	.half	.L31-.L434
	.byte	3,36,1,7,9
	.half	.L140-.L31
	.byte	0,1,1
.L645:
	.sdecl	'.debug_ranges',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_ranges'
.L139:
	.word	-1,.L92,0,.L140-.L92,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_IsrError')
	.sect	'.debug_info'
.L141:
	.word	572
	.half	3
	.word	.L142
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L144,.L143
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_IsrError',0,1,164,20,6,1,1,1
	.word	.L94,.L271,.L93
	.byte	4
	.byte	'HwUnit',0,1,164,20,32
	.word	.L272,.L273
	.byte	5
	.word	.L94,.L271
	.byte	6
	.byte	'ChannelConfigPtr',0,1,166,20,33
	.word	.L187,.L274
	.byte	6
	.byte	'HwModulePtr',0,1,167,20,15
	.word	.L212,.L275
	.byte	6
	.byte	'ChannelInfoPtr',0,1,168,20,25
	.word	.L185,.L276
	.byte	6
	.byte	'RxErrStatus',0,1,169,20,10
	.word	.L277,.L278
	.byte	6
	.byte	'RxErrFlag',0,1,170,20,10
	.word	.L277,.L279
	.byte	6
	.byte	'RxErrFlagEnable',0,1,171,20,10
	.word	.L277,.L280
	.byte	6
	.byte	'ChanRxState',0,1,172,20,20
	.word	.L249,.L281
	.byte	6
	.byte	'TxComplete',0,1,173,20,9
	.word	.L189,.L282
	.byte	6
	.byte	'TcEnable',0,1,174,20,9
	.word	.L189,.L283
	.byte	6
	.byte	'Channel',0,1,175,20,9
	.word	.L189,.L284
	.byte	7
	.word	.L217,.L285,.L44
	.byte	8
	.word	.L220,.L286
	.byte	9
	.word	.L222,.L285,.L44
	.byte	0,7
	.word	.L287,.L288,.L37
	.byte	8
	.word	.L289,.L290
	.byte	8
	.word	.L291,.L292
	.byte	8
	.word	.L293,.L294
	.byte	9
	.word	.L295,.L288,.L37
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_IsrError')
	.sect	'.debug_abbrev'
.L142:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_IsrError')
	.sect	'.debug_line'
.L143:
	.word	.L667-.L666
.L666:
	.half	3
	.word	.L669-.L668
.L668:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L669:
	.byte	5,3,7,0,5,2
	.word	.L94
	.byte	3,181,20,1,5,19,7,9
	.half	.L670-.L94
	.byte	3,3,1,5,36,9
	.half	.L671-.L670
	.byte	1,5,15,9
	.half	.L436-.L671
	.byte	3,1,1,5,29,9
	.half	.L672-.L436
	.byte	1,5,54,9
	.half	.L673-.L672
	.byte	1,5,19,9
	.half	.L438-.L673
	.byte	3,5,1,5,5,9
	.half	.L674-.L438
	.byte	1,5,60,7,9
	.half	.L675-.L674
	.byte	3,4,1,5,42,9
	.half	.L676-.L675
	.byte	1,5,60,9
	.half	.L677-.L676
	.byte	1,5,41,9
	.half	.L440-.L677
	.byte	3,1,1,5,25,9
	.half	.L678-.L440
	.byte	1,5,41,9
	.half	.L679-.L678
	.byte	1,5,35,9
	.half	.L441-.L679
	.byte	3,1,1,5,39,9
	.half	.L442-.L441
	.byte	3,1,1,5,44,9
	.half	.L680-.L442
	.byte	1,5,42,9
	.half	.L439-.L680
	.byte	1,5,49,9
	.half	.L681-.L439
	.byte	3,1,1,5,52,9
	.half	.L444-.L681
	.byte	1,5,44,9
	.half	.L682-.L444
	.byte	3,1,1,5,41,9
	.half	.L683-.L682
	.byte	3,1,1,5,31,9
	.half	.L446-.L683
	.byte	3,1,1,5,29,9
	.half	.L445-.L446
	.byte	3,1,1,5,11,9
	.half	.L447-.L445
	.byte	3,4,1,5,62,7,9
	.half	.L684-.L447
	.byte	1,5,25,7,9
	.half	.L39-.L684
	.byte	3,1,1,5,35,9
	.half	.L443-.L39
	.byte	1,5,26,7,9
	.half	.L40-.L443
	.byte	3,8,1,5,9,9
	.half	.L685-.L40
	.byte	1,5,61,7,9
	.half	.L686-.L685
	.byte	3,4,1,5,76,9
	.half	.L435-.L686
	.byte	1,5,37,9
	.half	.L42-.L435
	.byte	3,4,1,5,35,9
	.half	.L451-.L42
	.byte	1,5,7,9
	.half	.L41-.L451
	.byte	3,7,1,5,26,7,9
	.half	.L285-.L41
	.byte	3,167,9,1,5,33,9
	.half	.L687-.L285
	.byte	1,5,29,9
	.half	.L688-.L687
	.byte	1,5,7,9
	.half	.L44-.L688
	.byte	3,225,118,1,5,31,7,9
	.half	.L288-.L44
	.byte	3,197,4,1,5,36,9
	.half	.L689-.L288
	.byte	1,5,28,9
	.half	.L690-.L689
	.byte	3,6,1,5,34,9
	.half	.L691-.L690
	.byte	1,5,28,9
	.half	.L692-.L691
	.byte	3,1,1,5,33,9
	.half	.L693-.L692
	.byte	1,5,27,9
	.half	.L694-.L693
	.byte	3,2,1,5,32,9
	.half	.L695-.L694
	.byte	1,5,27,9
	.half	.L696-.L695
	.byte	3,2,1,5,34,9
	.half	.L697-.L696
	.byte	1,5,31,9
	.half	.L698-.L697
	.byte	3,3,1,5,29,9
	.half	.L437-.L698
	.byte	1,5,34,9
	.half	.L699-.L437
	.byte	3,1,1,5,32,9
	.half	.L700-.L699
	.byte	1,5,30,9
	.half	.L701-.L700
	.byte	3,1,1,5,31,9
	.half	.L702-.L701
	.byte	3,2,1,5,33,9
	.half	.L703-.L702
	.byte	3,6,1,5,3,9
	.half	.L704-.L703
	.byte	1,5,32,7,9
	.half	.L705-.L704
	.byte	3,5,1,5,54,9
	.half	.L706-.L705
	.byte	1,5,1,7,9
	.half	.L37-.L706
	.byte	3,219,123,1,7,9
	.half	.L145-.L37
	.byte	0,1,1
.L667:
	.sdecl	'.debug_ranges',debug,cluster('Uart_IsrError')
	.sect	'.debug_ranges'
.L144:
	.word	-1,.L94,0,.L145-.L94,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lReceiveError')
	.sect	'.debug_info'
.L146:
	.word	405
	.half	3
	.word	.L147
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L149,.L148
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_lReceiveError',0,1,240,25,13,1,1
	.word	.L98,.L296,.L97
	.byte	4
	.byte	'ChannelConfigPtr',0,1,241,25,62
	.word	.L297,.L298
	.byte	4
	.byte	'HwModulePtr',0,1,242,25,44
	.word	.L299,.L300
	.byte	4
	.byte	'ChannelInfoPtr',0,1,243,25,54
	.word	.L301,.L302
	.byte	5
	.word	.L98,.L296
	.byte	6
	.byte	'RuntimeErrorId',0,1,245,25,20
	.word	.L303,.L304
	.byte	6
	.byte	'Flag',0,1,246,25,10
	.word	.L277,.L305
	.byte	6
	.byte	'RecFillLevel',0,1,247,25,9
	.word	.L189,.L306
	.byte	7
	.word	.L217,.L57,.L307
	.byte	8
	.word	.L220,.L308
	.byte	9
	.word	.L222,.L57,.L307
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lReceiveError')
	.sect	'.debug_abbrev'
.L147:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Uart_lReceiveError')
	.sect	'.debug_line'
.L148:
	.word	.L708-.L707
.L707:
	.half	3
	.word	.L710-.L709
.L709:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L710:
	.byte	5,13,7,0,5,2
	.word	.L98
	.byte	3,239,25,1,5,28,9
	.half	.L468-.L98
	.byte	3,11,1,5,3,9
	.half	.L470-.L468
	.byte	3,5,1,5,20,7,9
	.half	.L711-.L470
	.byte	3,4,1,5,39,9
	.half	.L472-.L711
	.byte	1,5,19,9
	.half	.L56-.L472
	.byte	3,5,1,5,17,9
	.half	.L712-.L56
	.byte	1,5,39,9
	.half	.L713-.L712
	.byte	1,5,26,9
	.half	.L57-.L713
	.byte	3,133,4,1,5,33,9
	.half	.L714-.L57
	.byte	1,5,29,9
	.half	.L715-.L714
	.byte	1,5,6,9
	.half	.L307-.L715
	.byte	3,147,124,1,5,20,7,9
	.half	.L716-.L307
	.byte	3,1,1,5,36,9
	.half	.L717-.L716
	.byte	1,5,33,9
	.half	.L718-.L717
	.byte	1,5,44,7,9
	.half	.L719-.L718
	.byte	3,5,1,5,63,9
	.half	.L473-.L719
	.byte	3,1,1,5,29,9
	.half	.L58-.L473
	.byte	3,5,1,5,34,9
	.half	.L720-.L58
	.byte	1,5,36,9
	.half	.L721-.L720
	.byte	3,3,1,5,34,9
	.half	.L722-.L721
	.byte	1,5,31,9
	.half	.L723-.L722
	.byte	3,18,1,5,29,9
	.half	.L724-.L723
	.byte	1,5,33,9
	.half	.L725-.L724
	.byte	3,2,1,5,39,9
	.half	.L726-.L725
	.byte	3,25,1,5,9,9
	.half	.L727-.L726
	.byte	1,5,36,7,9
	.half	.L728-.L727
	.byte	3,5,1,5,57,9
	.half	.L469-.L728
	.byte	1,5,1,7,9
	.half	.L61-.L469
	.byte	3,4,1,7,9
	.half	.L150-.L61
	.byte	0,1,1
.L708:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lReceiveError')
	.sect	'.debug_ranges'
.L149:
	.word	-1,.L98,0,.L150-.L98,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lRead')
	.sect	'.debug_info'
.L151:
	.word	538
	.half	3
	.word	.L152
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L154,.L153
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_lRead',0,1,244,21,13,1,1
	.word	.L96,.L309,.L95
	.byte	4
	.byte	'HwModulePtr',0,1,244,21,42
	.word	.L310,.L311
	.byte	4
	.byte	'ChannelInfoPtr',0,1,245,21,54
	.word	.L312,.L313
	.byte	4
	.byte	'ChannelConfigPtr',0,1,246,21,62
	.word	.L314,.L315
	.byte	4
	.byte	'ReceiveFillLevel',0,1,247,21,38
	.word	.L316,.L317
	.byte	5
	.word	.L96,.L309
	.byte	6
	.byte	'BuffPtr',0,1,249,21,17
	.word	.L318,.L319
	.byte	6
	.byte	'TempReadWord',0,1,250,21,10
	.word	.L320,.L321
	.byte	6
	.byte	'NumBytesRead',0,1,251,21,10
	.word	.L320,.L322
	.byte	6
	.byte	'UartFrameLen',0,1,252,21,9
	.word	.L189,.L323
	.byte	6
	.byte	'ReadCount',0,1,253,21,9
	.word	.L189,.L324
	.byte	6
	.byte	'RxfifoLevel',0,1,254,21,9
	.word	.L189,.L325
	.byte	7
	.word	.L217,.L326,.L327
	.byte	8
	.word	.L220,.L328
	.byte	9
	.word	.L222,.L326,.L327
	.byte	0,7
	.word	.L329,.L330,.L331
	.byte	8
	.word	.L332,.L333
	.byte	9
	.word	.L334,.L330,.L331
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lRead')
	.sect	'.debug_abbrev'
.L152:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Uart_lRead')
	.sect	'.debug_line'
.L153:
	.word	.L730-.L729
.L729:
	.half	3
	.word	.L732-.L731
.L731:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L732:
	.byte	5,28,7,0,5,2
	.word	.L96
	.byte	3,255,21,1,5,34,9
	.half	.L453-.L96
	.byte	3,32,1,9
	.half	.L454-.L453
	.byte	3,7,1,5,13,9
	.half	.L456-.L454
	.byte	3,3,1,5,33,9
	.half	.L457-.L456
	.byte	3,6,1,5,5,9
	.half	.L48-.L457
	.byte	3,7,1,5,50,7,9
	.half	.L733-.L48
	.byte	3,5,1,5,22,9
	.half	.L734-.L733
	.byte	1,5,14,9
	.half	.L459-.L734
	.byte	3,1,1,5,26,9
	.half	.L735-.L459
	.byte	1,5,61,9
	.half	.L736-.L735
	.byte	3,1,1,5,31,9
	.half	.L460-.L736
	.byte	1,5,29,9
	.half	.L737-.L460
	.byte	3,3,1,5,53,9
	.half	.L458-.L737
	.byte	3,123,1,5,14,9
	.half	.L49-.L458
	.byte	3,12,1,5,62,9
	.half	.L738-.L49
	.byte	1,5,26,9
	.half	.L739-.L738
	.byte	1,5,29,9
	.half	.L740-.L739
	.byte	3,2,1,5,33,9
	.half	.L47-.L740
	.byte	3,102,1,5,17,7,9
	.half	.L741-.L47
	.byte	3,32,1,5,30,9
	.half	.L461-.L741
	.byte	1,5,17,9
	.half	.L742-.L461
	.byte	3,1,1,5,32,9
	.half	.L743-.L742
	.byte	1,5,39,9
	.half	.L744-.L743
	.byte	3,3,1,5,29,9
	.half	.L745-.L744
	.byte	1,5,20,9
	.half	.L746-.L745
	.byte	3,5,1,5,3,9
	.half	.L747-.L746
	.byte	1,5,37,7,9
	.half	.L748-.L747
	.byte	3,4,1,5,5,9
	.half	.L455-.L748
	.byte	1,5,56,7,9
	.half	.L462-.L455
	.byte	3,5,1,5,70,9
	.half	.L749-.L462
	.byte	1,5,19,9
	.half	.L52-.L749
	.byte	3,7,1,5,29,9
	.half	.L53-.L52
	.byte	3,3,1,5,39,9
	.half	.L750-.L53
	.byte	1,5,46,9
	.half	.L751-.L750
	.byte	3,1,1,5,32,9
	.half	.L463-.L751
	.byte	1,5,1,9
	.half	.L752-.L463
	.byte	3,55,1,5,29,7,9
	.half	.L51-.L752
	.byte	3,80,1,5,36,9
	.half	.L753-.L51
	.byte	1,5,26,9
	.half	.L326-.L753
	.byte	3,154,7,1,5,33,9
	.half	.L754-.L326
	.byte	1,5,29,9
	.half	.L464-.L754
	.byte	1,9
	.half	.L327-.L464
	.byte	3,239,120,1,5,34,9
	.half	.L755-.L327
	.byte	1,5,27,9
	.half	.L330-.L755
	.byte	3,242,6,1,5,33,9
	.half	.L756-.L330
	.byte	1,5,30,9
	.half	.L757-.L756
	.byte	1,5,33,9
	.half	.L331-.L757
	.byte	3,161,121,1,5,31,9
	.half	.L758-.L331
	.byte	1,5,36,9
	.half	.L759-.L758
	.byte	3,3,1,5,34,9
	.half	.L452-.L759
	.byte	1,5,32,9
	.half	.L760-.L452
	.byte	3,1,1,5,31,9
	.half	.L761-.L760
	.byte	3,1,1,5,29,9
	.half	.L762-.L761
	.byte	1,5,33,9
	.half	.L763-.L762
	.byte	3,1,1,5,35,9
	.half	.L764-.L763
	.byte	3,6,1,5,5,9
	.half	.L765-.L764
	.byte	1,5,34,7,9
	.half	.L766-.L765
	.byte	3,5,1,5,55,9
	.half	.L767-.L766
	.byte	1,5,1,7,9
	.half	.L55-.L767
	.byte	3,3,1,7,9
	.half	.L155-.L55
	.byte	0,1,1
.L730:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lRead')
	.sect	'.debug_ranges'
.L154:
	.word	-1,.L96,0,.L155-.L96,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwInit')
	.sect	'.debug_info'
.L156:
	.word	350
	.half	3
	.word	.L157
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L159,.L158
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_lHwInit',0,1,253,27,13,1,1
	.word	.L102,.L335,.L101
	.byte	4
	.byte	'HwUnit',0,1,253,27,38
	.word	.L336,.L337
	.byte	4
	.byte	'ChannelConfigPtr',0,1,254,27,64
	.word	.L338,.L339
	.byte	5
	.word	.L102,.L335
	.byte	6
	.byte	'HwModulePtr',0,1,128,28,15
	.word	.L212,.L340
	.byte	6
	.byte	'TimerStatusWaitTicks',0,1,129,28,10
	.word	.L277,.L341
	.byte	6
	.byte	'DelayTickResolution',0,1,130,28,10
	.word	.L277,.L342
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwInit')
	.sect	'.debug_abbrev'
.L157:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwInit')
	.sect	'.debug_line'
.L158:
	.word	.L769-.L768
.L768:
	.half	3
	.word	.L771-.L770
.L770:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L771:
	.byte	5,13,7,0,5,2
	.word	.L102
	.byte	3,252,27,1,5,17,9
	.half	.L487-.L102
	.byte	3,10,1,5,34,9
	.half	.L772-.L487
	.byte	1,5,49,9
	.half	.L488-.L772
	.byte	3,5,1,5,28,9
	.half	.L486-.L488
	.byte	3,1,1,5,50,9
	.half	.L773-.L486
	.byte	1,5,27,9
	.half	.L490-.L773
	.byte	3,2,1,5,25,9
	.half	.L774-.L490
	.byte	3,2,1,5,21,9
	.half	.L491-.L774
	.byte	3,6,1,5,29,9
	.half	.L775-.L491
	.byte	1,5,58,9
	.half	.L776-.L775
	.byte	3,1,1,5,77,9
	.half	.L777-.L776
	.byte	1,5,26,9
	.half	.L489-.L777
	.byte	3,4,1,5,32,9
	.half	.L778-.L489
	.byte	1,5,26,9
	.half	.L779-.L778
	.byte	3,5,1,5,32,9
	.half	.L780-.L779
	.byte	1,5,21,9
	.half	.L781-.L780
	.byte	3,5,1,5,50,9
	.half	.L782-.L781
	.byte	1,5,32,9
	.half	.L783-.L782
	.byte	1,5,21,9
	.half	.L784-.L783
	.byte	3,1,1,5,52,9
	.half	.L785-.L784
	.byte	1,5,34,9
	.half	.L786-.L785
	.byte	1,5,24,9
	.half	.L787-.L786
	.byte	3,1,1,5,53,9
	.half	.L788-.L787
	.byte	1,5,35,9
	.half	.L789-.L788
	.byte	1,5,24,9
	.half	.L790-.L789
	.byte	3,1,1,5,56,9
	.half	.L791-.L790
	.byte	1,5,38,9
	.half	.L792-.L791
	.byte	1,5,22,9
	.half	.L793-.L792
	.byte	3,3,1,5,29,9
	.half	.L794-.L793
	.byte	1,5,22,9
	.half	.L795-.L794
	.byte	3,2,1,5,45,9
	.half	.L796-.L795
	.byte	1,5,27,9
	.half	.L797-.L796
	.byte	1,5,22,9
	.half	.L798-.L797
	.byte	3,1,1,5,47,9
	.half	.L799-.L798
	.byte	1,5,29,9
	.half	.L800-.L799
	.byte	1,5,22,9
	.half	.L801-.L800
	.byte	3,1,1,5,47,9
	.half	.L802-.L801
	.byte	1,5,29,9
	.half	.L803-.L802
	.byte	1,5,24,9
	.half	.L804-.L803
	.byte	3,3,1,5,28,9
	.half	.L805-.L804
	.byte	1,5,24,9
	.half	.L806-.L805
	.byte	3,1,1,5,58,9
	.half	.L807-.L806
	.byte	1,5,41,9
	.half	.L808-.L807
	.byte	3,1,1,5,64,9
	.half	.L809-.L808
	.byte	1,5,37,9
	.half	.L810-.L809
	.byte	3,127,1,5,26,9
	.half	.L811-.L810
	.byte	3,2,1,5,49,9
	.half	.L812-.L811
	.byte	1,5,31,9
	.half	.L813-.L812
	.byte	1,5,26,9
	.half	.L814-.L813
	.byte	3,1,1,5,49,9
	.half	.L815-.L814
	.byte	1,5,31,9
	.half	.L816-.L815
	.byte	1,5,26,9
	.half	.L817-.L816
	.byte	3,1,1,5,32,9
	.half	.L818-.L817
	.byte	1,5,26,9
	.half	.L819-.L818
	.byte	3,1,1,5,50,9
	.half	.L820-.L819
	.byte	1,5,32,9
	.half	.L821-.L820
	.byte	1,5,22,9
	.half	.L822-.L821
	.byte	3,3,1,5,3,9
	.half	.L823-.L822
	.byte	1,5,29,7,9
	.half	.L824-.L823
	.byte	3,2,1,5,34,9
	.half	.L825-.L824
	.byte	1,5,29,9
	.half	.L826-.L825
	.byte	3,1,1,5,35,9
	.half	.L827-.L826
	.byte	1,5,63,9
	.half	.L828-.L827
	.byte	3,127,1,5,29,9
	.half	.L62-.L828
	.byte	3,5,1,5,34,9
	.half	.L829-.L62
	.byte	1,5,29,9
	.half	.L830-.L829
	.byte	3,1,1,5,35,9
	.half	.L831-.L830
	.byte	1,5,24,9
	.half	.L832-.L831
	.byte	3,4,1,5,51,9
	.half	.L833-.L832
	.byte	1,5,64,9
	.half	.L834-.L833
	.byte	1,5,32,9
	.half	.L835-.L834
	.byte	1,5,22,9
	.half	.L836-.L835
	.byte	3,2,1,5,26,9
	.half	.L837-.L836
	.byte	1,5,22,9
	.half	.L838-.L837
	.byte	3,2,1,5,46,9
	.half	.L839-.L838
	.byte	1,5,28,9
	.half	.L840-.L839
	.byte	1,5,33,9
	.half	.L841-.L840
	.byte	3,17,1,5,37,9
	.half	.L842-.L841
	.byte	1,5,33,9
	.half	.L843-.L842
	.byte	3,18,1,5,37,9
	.half	.L844-.L843
	.byte	1,5,21,9
	.half	.L845-.L844
	.byte	3,6,1,5,29,9
	.half	.L846-.L845
	.byte	1,5,58,9
	.half	.L847-.L846
	.byte	3,1,1,5,77,9
	.half	.L848-.L847
	.byte	1,5,1,9
	.half	.L160-.L848
	.byte	3,1,0,1,1
.L769:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwInit')
	.sect	'.debug_ranges'
.L159:
	.word	-1,.L102,0,.L160-.L102,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lWrite')
	.sect	'.debug_info'
.L161:
	.word	501
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_lWrite',0,1,171,30,13,1,1
	.word	.L106,.L343,.L105
	.byte	4
	.byte	'HwModulePtr',0,1,171,30,43
	.word	.L344,.L345
	.byte	4
	.byte	'ChannelInfoPtr',0,1,172,30,56
	.word	.L346,.L347
	.byte	4
	.byte	'ChannelConfigPtr',0,1,173,30,64
	.word	.L348,.L349
	.byte	5
	.word	.L106,.L343
	.byte	6
	.byte	'BuffPtr',0,1,175,30,17
	.word	.L318,.L350
	.byte	6
	.byte	'TempUartWriteData',0,1,176,30,10
	.word	.L320,.L351
	.byte	6
	.byte	'WriteCount',0,1,177,30,9
	.word	.L189,.L352
	.byte	6
	.byte	'NumBytesWrite',0,1,178,30,9
	.word	.L189,.L353
	.byte	6
	.byte	'FrameLength',0,1,179,30,9
	.word	.L189,.L354
	.byte	6
	.byte	'TxLastFrame',0,1,181,30,9
	.word	.L189,.L355
	.byte	6
	.byte	'StepSize',0,1,183,30,9
	.word	.L189,.L356
	.byte	7
	.word	.L357,.L358,.L359
	.byte	8
	.word	.L360,.L361
	.byte	9
	.word	.L362,.L358,.L359
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lWrite')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Uart_lWrite')
	.sect	'.debug_line'
.L163:
	.word	.L850-.L849
.L849:
	.half	3
	.word	.L852-.L851
.L851:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L852:
	.byte	5,27,7,0,5,2
	.word	.L106
	.byte	3,186,30,1,5,33,9
	.half	.L505-.L106
	.byte	3,1,1,5,15,9
	.half	.L506-.L505
	.byte	3,2,1,5,20,9
	.half	.L507-.L506
	.byte	3,4,1,5,36,9
	.half	.L508-.L507
	.byte	1,5,3,9
	.half	.L510-.L508
	.byte	1,5,20,7,9
	.half	.L509-.L510
	.byte	3,9,1,5,5,9
	.half	.L514-.L509
	.byte	3,9,1,5,21,7,9
	.half	.L853-.L514
	.byte	3,2,1,5,32,9
	.half	.L511-.L853
	.byte	1,5,19,9
	.half	.L71-.L511
	.byte	3,7,1,5,5,9
	.half	.L854-.L71
	.byte	3,126,1,5,19,9
	.half	.L70-.L854
	.byte	3,11,1,5,31,9
	.half	.L72-.L70
	.byte	3,17,1,5,37,9
	.half	.L855-.L72
	.byte	1,5,27,9
	.half	.L856-.L855
	.byte	3,6,1,5,32,9
	.half	.L857-.L856
	.byte	1,5,28,9
	.half	.L858-.L857
	.byte	3,2,1,5,34,9
	.half	.L859-.L858
	.byte	1,5,14,9
	.half	.L860-.L859
	.byte	3,9,1,5,35,9
	.half	.L515-.L860
	.byte	3,4,1,5,5,9
	.half	.L75-.L515
	.byte	3,4,1,5,39,7,9
	.half	.L861-.L75
	.byte	3,5,1,5,29,9
	.half	.L862-.L861
	.byte	1,5,18,9
	.half	.L863-.L862
	.byte	3,1,1,5,51,9
	.half	.L864-.L863
	.byte	3,127,1,5,34,9
	.half	.L76-.L864
	.byte	3,8,1,5,53,9
	.half	.L865-.L76
	.byte	3,1,1,5,37,9
	.half	.L866-.L865
	.byte	3,1,1,5,25,9
	.half	.L517-.L866
	.byte	3,127,1,5,29,9
	.half	.L867-.L517
	.byte	3,2,1,5,18,9
	.half	.L868-.L867
	.byte	3,1,1,5,35,9
	.half	.L74-.L868
	.byte	3,107,1,5,30,7,9
	.half	.L518-.L74
	.byte	3,27,1,5,3,9
	.half	.L520-.L518
	.byte	1,5,19,7,9
	.half	.L521-.L520
	.byte	3,5,1,5,32,9
	.half	.L522-.L521
	.byte	1,5,41,9
	.half	.L524-.L522
	.byte	3,1,1,5,31,9
	.half	.L525-.L524
	.byte	1,5,19,9
	.half	.L869-.L525
	.byte	3,1,1,5,34,9
	.half	.L870-.L869
	.byte	1,5,30,9
	.half	.L871-.L870
	.byte	3,2,1,5,35,9
	.half	.L872-.L871
	.byte	1,5,7,9
	.half	.L873-.L872
	.byte	3,19,1,5,27,7,9
	.half	.L358-.L873
	.byte	3,201,0,1,5,37,9
	.half	.L874-.L358
	.byte	1,5,29,9
	.half	.L875-.L874
	.byte	3,3,1,5,35,9
	.half	.L876-.L875
	.byte	1,5,49,9
	.half	.L359-.L876
	.byte	3,183,127,1,5,33,9
	.half	.L79-.L359
	.byte	3,5,1,5,43,9
	.half	.L877-.L79
	.byte	1,5,35,9
	.half	.L878-.L877
	.byte	3,1,1,5,40,9
	.half	.L879-.L878
	.byte	1,5,29,9
	.half	.L80-.L879
	.byte	3,7,1,5,34,9
	.half	.L880-.L80
	.byte	1,5,1,9
	.half	.L78-.L880
	.byte	3,29,1,7,9
	.half	.L165-.L78
	.byte	0,1,1
.L850:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lWrite')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L106,0,.L165-.L106,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lHwInitKernelReg')
	.sect	'.debug_info'
.L166:
	.word	332
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_lHwInitKernelReg',0,1,185,27,13,1,1
	.word	.L100,.L363,.L99
	.byte	4
	.byte	'HwModulePtr',0,1,185,27,53
	.word	.L364,.L365
	.byte	5
	.word	.L100,.L363
	.byte	6
	.byte	'RegUpdate',0,1,187,27,10
	.word	.L277,.L366
	.byte	6
	.byte	'TimerStatusWaitTicks',0,1,188,27,10
	.word	.L277,.L367
	.byte	6
	.byte	'DelayTickResolution',0,1,189,27,10
	.word	.L277,.L368
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lHwInitKernelReg')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lHwInitKernelReg')
	.sect	'.debug_line'
.L168:
	.word	.L882-.L881
.L881:
	.half	3
	.word	.L884-.L883
.L883:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L884:
	.byte	5,13,7,0,5,2
	.word	.L100
	.byte	3,184,27,1,5,49,9
	.half	.L475-.L100
	.byte	3,12,1,5,28,9
	.half	.L474-.L475
	.byte	3,3,1,5,50,9
	.half	.L885-.L474
	.byte	1,5,27,9
	.half	.L477-.L885
	.byte	3,2,1,5,25,9
	.half	.L886-.L477
	.byte	3,2,1,5,33,9
	.half	.L478-.L886
	.byte	3,5,1,5,36,9
	.half	.L887-.L478
	.byte	1,5,3,9
	.half	.L479-.L887
	.byte	3,2,1,5,33,9
	.half	.L476-.L479
	.byte	3,5,1,5,36,9
	.half	.L888-.L476
	.byte	1,5,3,9
	.half	.L480-.L888
	.byte	3,2,1,5,58,9
	.half	.L481-.L480
	.byte	3,4,1,5,23,9
	.half	.L889-.L481
	.byte	3,1,1,5,35,9
	.half	.L483-.L889
	.byte	3,3,1,5,38,9
	.half	.L890-.L483
	.byte	1,5,3,9
	.half	.L485-.L890
	.byte	3,3,1,5,1,9
	.half	.L170-.L485
	.byte	3,2,0,1,1
.L882:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lHwInitKernelReg')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L100,0,.L170-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_lStatusTimeout')
	.sect	'.debug_info'
.L171:
	.word	410
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L107
	.byte	3
	.byte	'Uart_lStatusTimeout',0,1,147,29,13,1,1
	.word	.L104,.L369,.L103
	.byte	4
	.byte	'WaitTicks',0,1,147,29,46
	.word	.L370,.L371
	.byte	4
	.byte	'HwModulePtr',0,1,148,29,57
	.word	.L372,.L373
	.byte	4
	.byte	'RegisterType',0,1,149,29,45
	.word	.L374,.L375
	.byte	4
	.byte	'ExpStatValue',0,1,150,29,45
	.word	.L376,.L377
	.byte	5
	.word	.L104,.L369
	.byte	6
	.byte	'BaseSTMTick',0,1,152,29,10
	.word	.L277,.L378
	.byte	6
	.byte	'CurrSTMTick',0,1,153,29,10
	.word	.L277,.L379
	.byte	6
	.byte	'RegVal',0,1,154,29,10
	.word	.L277,.L380
	.byte	6
	.byte	'TimeExpired',0,1,155,29,18
	.word	.L189,.L381
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_lStatusTimeout')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Uart_lStatusTimeout')
	.sect	'.debug_line'
.L173:
	.word	.L892-.L891
.L891:
	.half	3
	.word	.L894-.L893
.L893:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0,0,0,0,0
.L894:
	.byte	5,13,7,0,5,2
	.word	.L104
	.byte	3,146,29,1,5,34,9
	.half	.L500-.L104
	.byte	3,13,1,5,15,9
	.half	.L496-.L500
	.byte	3,1,1,9
	.half	.L502-.L496
	.byte	3,1,1,5,5,9
	.half	.L64-.L502
	.byte	3,13,1,5,42,7,9
	.half	.L895-.L64
	.byte	3,4,1,5,46,9
	.half	.L503-.L895
	.byte	1,5,36,9
	.half	.L65-.L503
	.byte	3,6,1,5,32,9
	.half	.L66-.L65
	.byte	3,8,1,5,8,9
	.half	.L501-.L66
	.byte	1,5,31,7,9
	.half	.L896-.L501
	.byte	3,1,1,5,19,7,9
	.half	.L897-.L896
	.byte	3,5,1,5,36,9
	.half	.L67-.L897
	.byte	3,5,1,5,11,9
	.half	.L504-.L67
	.byte	3,4,1,5,60,7,9
	.half	.L898-.L504
	.byte	1,5,1,7,9
	.half	.L69-.L898
	.byte	3,2,1,7,9
	.half	.L175-.L69
	.byte	0,1,1
.L892:
	.sdecl	'.debug_ranges',debug,cluster('Uart_lStatusTimeout')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L104,0,.L175-.L104,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_HwModuleAddr')
	.sect	'.debug_info'
.L176:
	.word	190
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L107
	.byte	3
	.byte	'Uart_HwModuleAddr',0,1,199,3,26
	.word	.L382
	.byte	5,3
	.word	Uart_HwModuleAddr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_HwModuleAddr')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_ConfigPtr')
	.sect	'.debug_info'
.L178:
	.word	187
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L107
	.byte	3
	.byte	'Uart_ConfigPtr',0,1,174,4,31
	.word	.L383
	.byte	5,3
	.word	Uart_ConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_ConfigPtr')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Uart_ChannelInfo')
	.sect	'.debug_info'
.L180:
	.word	189
	.half	3
	.word	.L181
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Uart\\ssc\\src\\Uart.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L107
	.byte	3
	.byte	'Uart_ChannelInfo',0,1,228,4,29
	.word	.L384
	.byte	5,3
	.word	Uart_ChannelInfo
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Uart_ChannelInfo')
	.sect	'.debug_abbrev'
.L181:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_GetStatus')
	.sect	'.debug_loc'
.L250:
	.word	-1,.L88,.L416-.L88,.L241-.L88
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L248:
	.word	-1,.L88,.L415-.L88,.L241-.L88
	.half	1
	.byte	95
	.word	0,0
.L243:
	.word	-1,.L88,0,.L241-.L88
	.half	1
	.byte	84
	.word	0,0
.L246:
	.word	-1,.L88,.L414-.L88,.L241-.L88
	.half	1
	.byte	111
	.word	0,0
.L244:
	.word	-1,.L88,.L417-.L88,.L15-.L88
	.half	1
	.byte	82
	.word	.L418-.L88,.L18-.L88
	.half	1
	.byte	82
	.word	.L419-.L88,.L241-.L88
	.half	1
	.byte	82
	.word	0,0
.L87:
	.word	-1,.L88,0,.L241-.L88
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_Init')
	.sect	'.debug_loc'
.L188:
	.word	-1,.L82,.L392-.L82,.L2-.L82
	.half	1
	.byte	109
	.word	.L398-.L82,.L397-.L82
	.half	1
	.byte	100
	.word	0,0
.L191:
	.word	-1,.L82,.L389-.L82,.L390-.L82
	.half	1
	.byte	91
	.word	.L2-.L82,.L182-.L82
	.half	1
	.byte	91
	.word	0,0
.L186:
	.word	-1,.L82,.L393-.L82,.L2-.L82
	.half	1
	.byte	111
	.word	0,0
.L193:
	.word	0,0
.L194:
	.word	-1,.L82,.L387-.L82,.L388-.L82
	.half	1
	.byte	90
	.word	.L391-.L82,.L3-.L82
	.half	1
	.byte	92
	.word	.L397-.L82,.L399-.L82
	.half	1
	.byte	92
	.word	.L5-.L82,.L182-.L82
	.half	1
	.byte	90
	.word	0,0
.L184:
	.word	-1,.L82,0,.L3-.L82
	.half	1
	.byte	100
	.word	.L385-.L82,.L182-.L82
	.half	1
	.byte	108
	.word	0,0
.L199:
	.word	0,0
.L192:
	.word	-1,.L82,.L386-.L82,.L182-.L82
	.half	1
	.byte	89
	.word	0,0
.L203:
	.word	-1,.L82,.L395-.L82,.L2-.L82
	.half	1
	.byte	95
	.word	0,0
.L190:
	.word	-1,.L82,.L394-.L82,.L2-.L82
	.half	1
	.byte	88
	.word	.L396-.L82,.L397-.L82
	.half	1
	.byte	84
	.word	0,0
.L81:
	.word	-1,.L82,0,.L182-.L82
	.half	2
	.byte	138,0
	.word	0,0
.L201:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_IsrError')
	.sect	'.debug_loc'
.L281:
	.word	-1,.L94,.L442-.L94,.L443-.L94
	.half	1
	.byte	95
	.word	0,0
.L284:
	.word	-1,.L94,.L438-.L94,.L439-.L94
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L274:
	.word	-1,.L94,.L440-.L94,.L37-.L94
	.half	1
	.byte	109
	.word	.L448-.L94,.L435-.L94
	.half	1
	.byte	100
	.word	0,0
.L294:
	.word	0,0
.L276:
	.word	-1,.L94,.L441-.L94,.L37-.L94
	.half	1
	.byte	108
	.word	.L450-.L94,.L435-.L94
	.half	1
	.byte	102
	.word	0,0
.L292:
	.word	0,0
.L275:
	.word	-1,.L94,.L436-.L94,.L437-.L94
	.half	1
	.byte	111
	.word	.L449-.L94,.L435-.L94
	.half	1
	.byte	101
	.word	0,0
.L290:
	.word	0,0
.L286:
	.word	0,0
.L273:
	.word	-1,.L94,0,.L435-.L94
	.half	1
	.byte	84
	.word	.L42-.L94,.L41-.L94
	.half	1
	.byte	84
	.word	0,0
.L279:
	.word	-1,.L94,.L446-.L94,.L435-.L94
	.half	5
	.byte	144,32,157,32,0
	.word	.L42-.L94,.L451-.L94
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L280:
	.word	-1,.L94,.L444-.L94,.L445-.L94
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L278:
	.word	-1,.L94,.L439-.L94,.L37-.L94
	.half	1
	.byte	88
	.word	0,0
.L283:
	.word	-1,.L94,.L447-.L94,.L37-.L94
	.half	1
	.byte	89
	.word	0,0
.L282:
	.word	0,0
.L93:
	.word	-1,.L94,0,.L271-.L94
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_loc'
.L257:
	.word	-1,.L90,.L422-.L90,.L423-.L90
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L254:
	.word	-1,.L90,.L424-.L90,.L21-.L90
	.half	1
	.byte	102
	.word	0,0
.L256:
	.word	-1,.L90,.L425-.L90,.L21-.L90
	.half	1
	.byte	101
	.word	0,0
.L260:
	.word	-1,.L90,.L423-.L90,.L21-.L90
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L258:
	.word	-1,.L90,.L427-.L90,.L21-.L90
	.half	1
	.byte	82
	.word	0,0
.L255:
	.word	-1,.L90,.L421-.L90,.L21-.L90
	.half	1
	.byte	100
	.word	0,0
.L253:
	.word	-1,.L90,0,.L420-.L90
	.half	1
	.byte	84
	.word	.L23-.L90,.L251-.L90
	.half	1
	.byte	84
	.word	0,0
.L259:
	.word	-1,.L90,.L426-.L90,.L21-.L90
	.half	1
	.byte	81
	.word	0,0
.L89:
	.word	-1,.L90,0,.L251-.L90
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_loc'
.L267:
	.word	-1,.L92,.L429-.L92,.L31-.L92
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L265:
	.word	-1,.L92,.L434-.L92,.L31-.L92
	.half	1
	.byte	102
	.word	0,0
.L266:
	.word	-1,.L92,.L430-.L92,.L31-.L92
	.half	1
	.byte	101
	.word	0,0
.L268:
	.word	-1,.L92,.L431-.L92,.L31-.L92
	.half	1
	.byte	81
	.word	0,0
.L270:
	.word	-1,.L92,.L433-.L92,.L31-.L92
	.half	1
	.byte	83
	.word	0,0
.L264:
	.word	-1,.L92,.L428-.L92,.L31-.L92
	.half	1
	.byte	100
	.word	0,0
.L263:
	.word	-1,.L92,0,.L261-.L92
	.half	1
	.byte	84
	.word	0,0
.L269:
	.word	-1,.L92,.L432-.L92,.L31-.L92
	.half	1
	.byte	82
	.word	0,0
.L91:
	.word	-1,.L92,0,.L261-.L92
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_Read')
	.sect	'.debug_loc'
.L207:
	.word	-1,.L84,0,.L205-.L84
	.half	1
	.byte	84
	.word	0,0
.L214:
	.word	-1,.L84,.L402-.L84,.L205-.L84
	.half	1
	.byte	111
	.word	0,0
.L213:
	.word	-1,.L84,.L403-.L84,.L205-.L84
	.half	1
	.byte	98
	.word	0,0
.L227:
	.word	0,0
.L221:
	.word	0,0
.L216:
	.word	-1,.L84,.L404-.L84,.L9-.L84
	.half	1
	.byte	95
	.word	.L10-.L84,.L405-.L84
	.half	1
	.byte	95
	.word	0,0
.L209:
	.word	-1,.L84,0,.L205-.L84
	.half	1
	.byte	100
	.word	0,0
.L215:
	.word	-1,.L84,.L401-.L84,.L205-.L84
	.half	1
	.byte	82
	.word	0,0
.L211:
	.word	-1,.L84,0,.L400-.L84
	.half	1
	.byte	85
	.word	.L9-.L84,.L10-.L84
	.half	1
	.byte	85
	.word	0,0
.L83:
	.word	-1,.L84,0,.L205-.L84
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_Write')
	.sect	'.debug_loc'
.L231:
	.word	-1,.L86,0,.L406-.L86
	.half	1
	.byte	84
	.word	0,0
.L236:
	.word	-1,.L86,.L410-.L86,.L406-.L86
	.half	1
	.byte	102
	.word	0,0
.L238:
	.word	-1,.L86,.L409-.L86,.L229-.L86
	.half	1
	.byte	111
	.word	.L412-.L86,.L406-.L86
	.half	1
	.byte	101
	.word	0,0
.L237:
	.word	-1,.L86,.L411-.L86,.L406-.L86
	.half	1
	.byte	98
	.word	.L407-.L86,.L406-.L86
	.half	1
	.byte	100
	.word	0,0
.L233:
	.word	-1,.L86,0,.L407-.L86
	.half	1
	.byte	100
	.word	0,0
.L239:
	.word	-1,.L86,.L408-.L86,.L229-.L86
	.half	1
	.byte	88
	.word	.L413-.L86,.L229-.L86
	.half	1
	.byte	82
	.word	0,0
.L235:
	.word	-1,.L86,0,.L406-.L86
	.half	1
	.byte	85
	.word	0,0
.L85:
	.word	-1,.L86,0,.L229-.L86
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwInit')
	.sect	'.debug_loc'
.L339:
	.word	-1,.L102,0,.L486-.L102
	.half	1
	.byte	100
	.word	.L487-.L102,.L335-.L102
	.half	1
	.byte	108
	.word	0,0
.L342:
	.word	-1,.L102,.L486-.L102,.L489-.L102
	.half	1
	.byte	82
	.word	0,0
.L340:
	.word	-1,.L102,.L488-.L102,.L335-.L102
	.half	1
	.byte	111
	.word	.L493-.L102,.L489-.L102
	.half	1
	.byte	100
	.word	.L495-.L102,.L335-.L102
	.half	1
	.byte	100
	.word	0,0
.L337:
	.word	-1,.L102,0,.L486-.L102
	.half	1
	.byte	84
	.word	0,0
.L341:
	.word	-1,.L102,.L490-.L102,.L491-.L102
	.half	5
	.byte	144,32,157,32,0
	.word	.L491-.L102,.L335-.L102
	.half	1
	.byte	88
	.word	.L492-.L102,.L489-.L102
	.half	1
	.byte	84
	.word	.L494-.L102,.L335-.L102
	.half	1
	.byte	84
	.word	0,0
.L101:
	.word	-1,.L102,0,.L335-.L102
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lHwInitKernelReg')
	.sect	'.debug_loc'
.L368:
	.word	-1,.L100,.L474-.L100,.L476-.L100
	.half	1
	.byte	82
	.word	0,0
.L365:
	.word	-1,.L100,0,.L474-.L100
	.half	1
	.byte	100
	.word	.L475-.L100,.L363-.L100
	.half	1
	.byte	111
	.word	.L484-.L100,.L483-.L100
	.half	1
	.byte	100
	.word	0,0
.L366:
	.word	-1,.L100,.L479-.L100,.L476-.L100
	.half	1
	.byte	84
	.word	.L480-.L100,.L481-.L100
	.half	1
	.byte	84
	.word	.L485-.L100,.L363-.L100
	.half	1
	.byte	84
	.word	0,0
.L367:
	.word	-1,.L100,.L477-.L100,.L478-.L100
	.half	5
	.byte	144,32,157,32,0
	.word	.L478-.L100,.L363-.L100
	.half	1
	.byte	88
	.word	.L482-.L100,.L483-.L100
	.half	1
	.byte	84
	.word	0,0
.L99:
	.word	-1,.L100,0,.L363-.L100
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lRead')
	.sect	'.debug_loc'
.L319:
	.word	-1,.L96,.L453-.L96,.L309-.L96
	.half	1
	.byte	98
	.word	0,0
.L315:
	.word	-1,.L96,0,.L309-.L96
	.half	1
	.byte	102
	.word	0,0
.L313:
	.word	-1,.L96,0,.L309-.L96
	.half	1
	.byte	101
	.word	0,0
.L311:
	.word	-1,.L96,0,.L309-.L96
	.half	1
	.byte	100
	.word	0,0
.L333:
	.word	0,0
.L328:
	.word	0,0
.L322:
	.word	-1,.L96,.L454-.L96,.L455-.L96
	.half	5
	.byte	144,32,157,32,0
	.word	.L51-.L96,.L464-.L96
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L324:
	.word	-1,.L96,.L457-.L96,.L458-.L96
	.half	1
	.byte	95
	.word	.L49-.L96,.L50-.L96
	.half	1
	.byte	95
	.word	.L47-.L96,.L461-.L96
	.half	1
	.byte	95
	.word	0,0
.L317:
	.word	-1,.L96,0,.L452-.L96
	.half	1
	.byte	84
	.word	0,0
.L325:
	.word	-1,.L96,.L462-.L96,.L52-.L96
	.half	1
	.byte	95
	.word	.L53-.L96,.L463-.L96
	.half	1
	.byte	95
	.word	0,0
.L321:
	.word	-1,.L96,.L459-.L96,.L460-.L96
	.half	1
	.byte	82
	.word	0,0
.L323:
	.word	-1,.L96,.L456-.L96,.L309-.L96
	.half	1
	.byte	81
	.word	0,0
.L95:
	.word	-1,.L96,0,.L309-.L96
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lReceiveError')
	.sect	'.debug_loc'
.L298:
	.word	-1,.L98,0,.L465-.L98
	.half	1
	.byte	100
	.word	.L468-.L98,.L469-.L98
	.half	1
	.byte	111
	.word	.L466-.L98,.L58-.L98
	.half	1
	.byte	102
	.word	.L58-.L98,.L296-.L98
	.half	1
	.byte	100
	.word	.L61-.L98,.L296-.L98
	.half	1
	.byte	111
	.word	0,0
.L302:
	.word	-1,.L98,0,.L466-.L98
	.half	1
	.byte	102
	.word	.L467-.L98,.L58-.L98
	.half	1
	.byte	101
	.word	.L58-.L98,.L296-.L98
	.half	1
	.byte	102
	.word	0,0
.L305:
	.word	-1,.L98,.L470-.L98,.L471-.L98
	.half	1
	.byte	95
	.word	0,0
.L300:
	.word	-1,.L98,0,.L467-.L98
	.half	1
	.byte	101
	.word	.L465-.L98,.L58-.L98
	.half	1
	.byte	100
	.word	.L58-.L98,.L296-.L98
	.half	1
	.byte	101
	.word	0,0
.L308:
	.word	0,0
.L306:
	.word	-1,.L98,.L473-.L98,.L58-.L98
	.half	1
	.byte	84
	.word	0,0
.L304:
	.word	-1,.L98,.L472-.L98,.L56-.L98
	.half	1
	.byte	84
	.word	.L57-.L98,.L473-.L98
	.half	1
	.byte	84
	.word	.L58-.L98,.L296-.L98
	.half	1
	.byte	84
	.word	0,0
.L97:
	.word	-1,.L98,0,.L296-.L98
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lStatusTimeout')
	.sect	'.debug_loc'
.L378:
	.word	-1,.L104,.L502-.L104,.L369-.L104
	.half	1
	.byte	91
	.word	0,0
.L379:
	.word	-1,.L104,.L496-.L104,.L501-.L104
	.half	1
	.byte	82
	.word	.L504-.L104,.L369-.L104
	.half	1
	.byte	82
	.word	0,0
.L377:
	.word	-1,.L104,0,.L496-.L104
	.half	1
	.byte	86
	.word	.L500-.L104,.L369-.L104
	.half	1
	.byte	90
	.word	0,0
.L373:
	.word	-1,.L104,0,.L496-.L104
	.half	1
	.byte	100
	.word	.L498-.L104,.L369-.L104
	.half	1
	.byte	111
	.word	0,0
.L380:
	.word	-1,.L104,.L503-.L104,.L65-.L104
	.half	1
	.byte	95
	.word	.L66-.L104,.L369-.L104
	.half	1
	.byte	95
	.word	0,0
.L375:
	.word	-1,.L104,0,.L496-.L104
	.half	1
	.byte	85
	.word	.L499-.L104,.L369-.L104
	.half	1
	.byte	89
	.word	0,0
.L381:
	.word	-1,.L104,.L64-.L104,.L369-.L104
	.half	1
	.byte	92
	.word	0,0
.L103:
	.word	-1,.L104,0,.L369-.L104
	.half	2
	.byte	138,0
	.word	0,0
.L371:
	.word	-1,.L104,0,.L496-.L104
	.half	1
	.byte	84
	.word	.L497-.L104,.L369-.L104
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Uart_lWrite')
	.sect	'.debug_loc'
.L350:
	.word	-1,.L106,.L505-.L106,.L343-.L106
	.half	1
	.byte	98
	.word	0,0
.L349:
	.word	-1,.L106,0,.L343-.L106
	.half	1
	.byte	102
	.word	0,0
.L347:
	.word	-1,.L106,0,.L343-.L106
	.half	1
	.byte	101
	.word	0,0
.L354:
	.word	-1,.L106,.L506-.L106,.L343-.L106
	.half	1
	.byte	81
	.word	0,0
.L345:
	.word	-1,.L106,0,.L343-.L106
	.half	1
	.byte	100
	.word	0,0
.L361:
	.word	0,0
.L353:
	.word	-1,.L106,.L508-.L106,.L509-.L106
	.half	1
	.byte	83
	.word	.L510-.L106,.L511-.L106
	.half	1
	.byte	95
	.word	.L514-.L106,.L513-.L106
	.half	1
	.byte	83
	.word	.L511-.L106,.L71-.L106
	.half	1
	.byte	83
	.word	.L71-.L106,.L72-.L106
	.half	1
	.byte	95
	.word	.L74-.L106,.L518-.L106
	.half	1
	.byte	83
	.word	.L520-.L106,.L521-.L106
	.half	1
	.byte	83
	.word	.L522-.L106,.L523-.L106
	.half	1
	.byte	83
	.word	.L524-.L106,.L525-.L106
	.half	1
	.byte	83
	.word	0,0
.L356:
	.word	-1,.L106,.L512-.L106,.L513-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	.L71-.L106,.L70-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L351:
	.word	-1,.L106,.L517-.L106,.L74-.L106
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L355:
	.word	-1,.L106,.L507-.L106,.L343-.L106
	.half	1
	.byte	82
	.word	0,0
.L105:
	.word	-1,.L106,0,.L343-.L106
	.half	2
	.byte	138,0
	.word	0,0
.L352:
	.word	-1,.L106,.L515-.L106,.L516-.L106
	.half	1
	.byte	95
	.word	.L74-.L106,.L519-.L106
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L899:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Uart_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L82,.L182-.L82
	.sdecl	'.debug_frame',debug,cluster('Uart_Read')
	.sect	'.debug_frame'
	.word	20
	.word	.L899,.L84,.L205-.L84
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_Write')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L86,.L229-.L86
	.sdecl	'.debug_frame',debug,cluster('Uart_GetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L899,.L88,.L241-.L88
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Uart_IsrReceive')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L90,.L251-.L90
	.sdecl	'.debug_frame',debug,cluster('Uart_IsrTransmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L92,.L261-.L92
	.sdecl	'.debug_frame',debug,cluster('Uart_IsrError')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L94,.L271-.L94
	.sdecl	'.debug_frame',debug,cluster('Uart_lRead')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L96,.L309-.L96
	.sdecl	'.debug_frame',debug,cluster('Uart_lReceiveError')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L98,.L296-.L98
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwInitKernelReg')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L100,.L363-.L100
	.sdecl	'.debug_frame',debug,cluster('Uart_lHwInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L102,.L335-.L102
	.sdecl	'.debug_frame',debug,cluster('Uart_lStatusTimeout')
	.sect	'.debug_frame'
	.word	12
	.word	.L899,.L104,.L369-.L104
	.sdecl	'.debug_frame',debug,cluster('Uart_lWrite')
	.sect	'.debug_frame'
	.word	16
	.word	.L899,.L106,.L343-.L106
	.byte	8,19,8,23

; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4112  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4113  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4114  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4115  #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4116  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4117  ** Traceability     : [cover parentID={9E74D621-957D-48af-8073-0F1F1B66E540}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4118  ** Syntax : static Uart_ReturnType Uart_lCheckDetError                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4119  **                       (                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4120  **                         const uint8 Channel,                               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4121  **                         const Uart_SizeType Size,                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4122  **                         const uint8 ApiId,                                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4123  **                         const Uart_MemType *const MemPtr                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4124  **                       )                                                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4125  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4126  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4127  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4128  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4129  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4130  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4131  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4132  ** Parameters (in) : Channel - Uart channel identifier                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4133  **                   Size - Number bytes to be read/write                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4134  **                   ApiId - Api identifier                                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4135  **                   MemPtr: Memory address where read or write operation     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4136  **                           to be performed.                                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4137  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4138  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4139  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4140  ** Return value    : UART_E_NOT_OK: DET is reported                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4141  **                   UART_E_OK: DET is not reported                           **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4142  ** Description     : Function validate input parameter's of read and write    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4143  **                   api and report DET in case of invalid parameter value.   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4144  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4145  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4146  static Uart_ReturnType Uart_lCheckDetError(const uint8 Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4147                                             const Uart_SizeType Size,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4148                                             const uint8 ApiId,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4149                                             const Uart_MemType *const MemPtr)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4150  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4151    Uart_ReturnType RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4152    /* [cover parentID={CB7C8AB0-F5C7-41df-858A-28FFD67DDDE8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4153    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4154    if (Uart_InitStatus == UART_UNINITIALISED)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4155    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4156      /* [cover parentID={66889E1A-1BB4-4976-97EA-ED19668B7C1B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4157      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4158      /* Report driver not initialized DET */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4159      Uart_lReportError(ApiId, UART_E_UNINIT);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4160      RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4161    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4162    /* [cover parentID={CAF9000F-B48A-45c7-B9C2-A5F02775CFF2}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4163    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4164    else if(MemPtr == NULL_PTR)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4165    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4166      /* [cover parentID={55C78364-2920-40f6-8F3A-92C810536C1D}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4167      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4168      /* Report invalid pointer DET  */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4169      Uart_lReportError(ApiId, UART_E_PARAM_POINTER);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4170  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4171      RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4172    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4173    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4174    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4175      /* Check channel is configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4176      RetValue = Uart_lChannelCheck(Channel, ApiId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4177  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4178      /* [cover parentID={35434EEA-D6E8-4a95-81AC-994568EF3C46}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4179      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4180      if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4181      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4182        /* Check valid size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4183        RetValue = Uart_lCheckSize(Channel, Size, ApiId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4184        /* [cover parentID={A536DE24-AFCA-40cd-B781-190F2935470C}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4185        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4186        if(RetValue == UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4187        {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4188          /* Check SID */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4189          if(ApiId == UART_SID_WRITE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4190          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4191            /* [cover parentID={DB0ED46B-34F6-42b8-86A0-4204ED5DC638}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4192            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4193            if(Uart_ChannelInfo[Channel].ChanTxState != UART_TX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4194            {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4195              RetValue = UART_E_BUSY;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4196            }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4197          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4198          else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4199          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4200            /* [cover parentID={DB0ED46B-34F6-42b8-86A0-4204ED5DC638}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4201            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4202            if(Uart_ChannelInfo[Channel].ChanRxState != UART_RX_IDLE)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4203            {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4204              RetValue = UART_E_BUSY;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4205            }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4206          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4207  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4208          /* Check driver is ready for transmit/receive */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4209          if(RetValue == UART_E_BUSY)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4210          {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4211            /* [cover parentID={14D73258-FF34-48eb-9B7E-F420479E84EC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4212            [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4213            Uart_lReportError(ApiId, UART_E_STATE_BUSY);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4214          }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4215        }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4216      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4217    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4218  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4219    return RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4220  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4221  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4222  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4223  #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4224  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4225  ** Traceability     : [cover parentID={FF86A3F1-3924-45fa-B542-8A271B79AB66}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4226  ** Syntax : static Uart_ReturnType Uart_lCheckSize                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4227  **                                     (                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4228  **                                       const uint8 Channel,                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4229  **                                       const Uart_SizeType Size,            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4230  **                                       const uint8 ApiId                    **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4231  **                                     )                                      **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4232  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4233  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4234  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4235  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4236  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4237  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4238  ** Parameters (in) : Channel - Uart channel identifier                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4239  **                   Size - Number bytes to be read/write                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4240  **                   ApiId - Api from where this function is called.          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4241  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4242  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4243  ** Return value    : UART_E_NOT_OK: Size is not valid.                        **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4244  **                   UART_E_OK: Size is valid.                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4245  ** Description     : Function to check size requested in read and write api.  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4246  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4247  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4248  static Uart_ReturnType Uart_lCheckSize(const uint8 Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4249                                         const Uart_SizeType Size,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4250                                         const uint8 ApiId)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4251  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4252  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4253    Uart_ReturnType RetVal;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4254    /* [cover parentID={7879EC08-B2B4-41f7-B3EF-B5E2F3D36F12}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4255    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4256    /* Set return value with initial state */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4257    RetVal = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4258  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4259    /* [cover parentID={6FE0619C-615D-44ba-98D6-366D2BF646E8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4260    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4261    if(Size == 0u)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4262    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4263      /* [cover parentID={EB3FBB3D-AD2F-4866-93DE-AED4BE360A87}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4264      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4265      RetVal = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4266    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4267    /* [cover parentID={BCC4AE15-DB86-4fc2-979E-DA2D2CE60AD1}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4268    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4269    /* [cover parentID={84E2D439-2572-469d-B9F3-8E10327393B8}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4270    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4271    else if(Uart_ConfigPtr->ChannelConfigPtr[Channel].DataLength >= \ 
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4272            UART_NINEBIT_DATLEN)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4273    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4274      /* [cover parentID={0C43FAEA-0F58-45af-8537-4DBE2498C3AC}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4275      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4276      /* Check requested size is multiple of 2 in case frame length
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4277      greater than is 9 bit */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4278      if((Size & 1U) != 0U)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4279      {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4280        /* [cover parentID={53184D86-DD86-4590-B7AA-395BA2671867}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4281        [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4282        RetVal = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4283      }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4284    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4285    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4286    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4287      /* Do nothing */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4288    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4289  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4290    /* [cover parentID={278601F6-0ADF-4f6e-8731-70315369B404}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4291    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4292    if(RetVal != UART_E_OK)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4293    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4294      /* [cover parentID={590DF40B-3DDF-4c6e-A786-B190A4817B87}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4295      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4296      /* Report DET in case of invalid size */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4297      Uart_lReportError(ApiId, UART_E_INVALID_SIZE);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4298    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4299  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4300    return RetVal;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4301  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4302  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4303  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4304  #if ((UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4305  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4306  ** Traceability     : [cover parentID={CBA3F21A-CEDD-4050-AF8B-F86E61EBE841}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4307  ** Syntax : static Uart_ReturnType Uart_lChannelCheck                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4308  **  (                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4309  **    const Uart_ChannelIdType Channel, const uint8 ApiId                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4310  **  )                                                                         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4311  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4312  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4313  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4314  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4315  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4316  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4317  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4318  ** Parameters (in) : Channel - Uart channel to be addressed                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4319  **                   ApiId - Service id of the Api which calls this function  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4320  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4321  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4322  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4323  ** Return value    : UART_OK: Channel is configured.                          **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4324  **                   UART_NOT_OK: Channel is not configured                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4325  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4326  ** Description     : Function to validate channel identifier                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4327  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4328  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4329  static Uart_ReturnType Uart_lChannelCheck(const Uart_ChannelIdType Channel,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4330                                            const uint8 ApiId)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4331  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4332    /* [cover parentID={513E0CFE-0486-4d3c-9B79-3B7E7BD92408}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4333    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4334    Uart_ReturnType RetValue = UART_E_NOT_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4335    /* [cover parentID={0F8216D2-1973-4a3f-BA4F-0A47049CBD6F}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4336    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4337  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4338    /* [cover parentID={A5A5FFDF-54B7-4206-A5FB-40FAFD8263C0}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4339    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4340    /* Check requested channel id is less than number of channel configured */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4341    if(Channel >= Uart_ConfigPtr->NoOfChannels)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4342    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4343      /* [cover parentID={41323DE9-B2E7-4e57-A37C-F533613974DA}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4344      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4345      Uart_lReportError(ApiId, UART_E_INVALID_CHANNEL);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4346    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4347    else
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4348    {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4349      /* [cover parentID={4877005F-7EDE-467e-9645-E451DFD58282}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4350      [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4351      RetValue = UART_E_OK;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4352    }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4353  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4354    return RetValue;
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4355  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4356  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4357  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4358  #if (UART_DEV_ERROR_DETECT == STD_ON) || (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4359  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4360  ** Traceability     : [cover parentID={DBC6728F-35A8-4683-B3D9-D4F80889BF99}] **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4361  ** Syntax : static void Uart_lReportError( const uint8 ApiId,                 **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4362  **                                         const uint8 ErrorId)               **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4363  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4364  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4365  ** Service ID:       None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4366  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4367  ** Sync/Async:       Synchronous                                              **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4368  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4369  ** Reentrancy:       Reentrant                                                **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4370  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4371  ** Parameters (in):  ApiId - Service ID of the API reporting an error         **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4372  **                   ErrorId - ID of the error reported                       **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4373  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4374  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4375  **                                                                            **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4376  ** Return value:     None                                                     **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4377  ** Description :    Function to report Safety Error and DET                   **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4378  *                                                                             **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4379  *******************************************************************************/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4380  static void Uart_lReportError(const uint8 ApiId, const uint8 ErrorId)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4381  {
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4382    /* [cover parentID={72DF3930-6D1C-423e-A06B-D68D2E82DCB6}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4383    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4384    #if (UART_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4385    /* [cover parentID={DD35001C-BCB0-4f89-B1D5-BB67FE25EC4B}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4386    [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4387    (void)Det_ReportError(UART_MODULE_ID, UART_INSTANCE_ID, ApiId, ErrorId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4388    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4389  
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4390    #if (UART_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4391    Mcal_ReportSafetyError(UART_MODULE_ID, UART_INSTANCE_ID, ApiId, ErrorId);
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4392    #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4393  }
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4394  #endif
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4395  /* [cover parentID={566ED99C-0D96-46ac-97BF-E97B04E2C700}]
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4396  Callout Memory section not used in UART driver
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4397  [/cover]*/
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4398  #define UART_STOP_SEC_CODE_ASIL_B_LOCAL
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4399  /* [cover parentID={84FCEDA9-01F7-4f48-AC8B-47FFAF8417E4}] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4400  /*  [/cover] */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4401  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4402     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4403  /* MISRA2012_RULE_20_1_JUSTIFICATION: Declaration before #include,
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4404   * this is due to inclusion of memmap.h to specify the location to which
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4405   * the variable has to be placed. */
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4406  #include "Uart_MemMap.h"
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4407  /*******************************************************************************
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4408  **                               End of File                                  **
; ..\Mcal\Tricore\Uart\ssc\src\Uart.c	  4409  *******************************************************************************/

	; Module end
