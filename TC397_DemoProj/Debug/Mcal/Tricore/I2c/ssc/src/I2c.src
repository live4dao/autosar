	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc35268a --dep-file=Mcal\\Tricore\\I2c\\ssc\\src\\.I2c.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=Mcal\\Tricore\\I2c\\ssc\\src\\I2c.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Mcal\\Tricore\\I2c\\ssc\\src\\I2c.src ..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c"
	.compiler_name		"ctc"
	;source	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c'

	
$TC162
	
	.sdecl	'.text.I2c_Init.Code.Cpu0',code,cluster('I2c_Init')
	.sect	'.text.I2c_Init.Code.Cpu0'
	.align	2
	
	.global	I2c_Init

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     1  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     2  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     3  ** Copyright (C) Infineon Technologies (2021)                                 **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     4  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     5  ** All rights reserved.                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     6  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    10  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    11  ********************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    12  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    13  **  FILENAME    : I2c.c                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    14  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    15  **  VERSION     : 22.0.0                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    16  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    17  **  DATE        : 2021-08-13                                                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    18  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    19  **  VARIANT     : Variant PB                                                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    20  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    21  **  PLATFORM    : Infineon AURIX2G                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    22  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    23  **  AUTHOR      : DL-AUTOSAR-Engineering                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    24  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    25  **  VENDOR      : Infineon Technologies                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    26  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    27  **  DESCRIPTION : This file contains functionality of I2C driver.             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    28  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    29  **  MAY BE CHANGED BY USER [yes/no]: No                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    30  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    31  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    32  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    33  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    34  **                      Includes                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    35  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    36  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    37  #include "IfxI2c_reg.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    38  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    39  /* Module header file. This also includes configuration file */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    40  #include "I2c.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    41  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    42  #if(I2C_INIT_DEINIT_API_MODE != I2C_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    43  #include "McalLib_OsStub.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    44  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    45  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    46  /* Conditional Inclusion of Developement Error Tracer File */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    47  #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    48  #include "Det.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    49  #endif /* (I2C_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    50  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    51  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    52  **                      Imported Compiler Switch Checks                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    53  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    54  #ifndef I2C_SW_MAJOR_VERSION
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    55  #error "I2C_SW_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    56  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    57  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    58  #ifndef I2C_SW_MINOR_VERSION
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    59  #error "I2C_SW_MINOR_VERSION is not defined. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    60  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    61  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    62  #ifndef I2C_SW_PATCH_VERSION
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    63  #error "I2C_SW_PATCH_VERSION is not defined. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    64  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    65  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    66  #if (I2C_SW_MAJOR_VERSION != 20U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    67  #error "I2C_SW_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    68  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    69  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    70  #if (I2C_SW_MINOR_VERSION !=10U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    71  #error "I2C_SW_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    72  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    73  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    74  #if (I2C_SW_PATCH_VERSION != 0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    75  #error "I2C_SW_PATCH_VERSION does not match. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    76  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    77  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    78  #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    79  #ifndef DET_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    80    #error "DET_AR_RELEASE_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    81  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    82  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    83  #if ( DET_AR_RELEASE_MAJOR_VERSION != 4U )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    84    #error "DET_AR_RELEASE_MAJOR_VERSION does not match. "
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    85  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    86  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    87  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    88  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    89  **                      Private Macro Definitions                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    90  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    91  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    92  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    93  #define I2C_DISABLE_INTERFACE                (0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    94  #define I2C_ENABLE_INTERFACE                 (1U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    95  #define I2C_PACKET_SIZE_7BIT_ADDR            ((uint8)1U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    96  #define I2C_CLK_DISABLE                      ((uint8)1U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    97  #define I2C_PACKET_SIZE_10BIT_ADDR           ((uint8)2U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    98  #define I2C_PROTOCOL_INTERRUPT_MASK          ((uint32)0x0000007FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	    99  #define I2C_ERROR_INTERRUPT_MASK             ((uint32)0x0000000FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   100  #define I2C_CLEAR_INTERRUPT                  ((uint32)0x0000000FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   101  #define I2C_BURST_REQ_CHK                    ((uint32)0x000000C0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   102  #define I2C_RAW_INTERRUPT_MASK               ((uint32)0x0000000FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   103  #define I2C_ENABLE_INTERRUPT_MASK            ((uint32)0x0000003FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   104  #define I2C_PIRQSS_MASK                      ((uint32)0x0000003FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   105  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   106  #define I2C_KERNEL_RESET_WAIT_COUNTS        (0x100U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   107  #define I2C_FIFO_BYTES_FULL                 ((uint16)0x1FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   108  #define I2C_FIFO_BYTES_HALF_FULL            ((uint16)0x10U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   109  #define I2C_FIFO_STAGES_FULL                ((uint8)0x08U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   110  #define I2C_FIFO_STAGES_HALF_FULL           ((uint8)0x04U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   111  #define I2C_FIFO_SINGLE_STAGE_FULL          ((uint8)0x01U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   112  #define I2C_FIFO_MAX_DATA_IN_EACH_STAGE     ((uint8)0x04U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   113  #define I2C_SHIFT_EIGHT_BIT                 ((uint8)0x08U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   114  #define I2C_SHIFT_ONE_BIT                   ((uint8)0x01U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   115  #define I2C_EIGHT_BIT_MASK                  ((uint8)0xFFU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   116  #define I2C_10_BIT_ADDRESS_PREAMBLE         ((uint8)0xF0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   117  #define I2C_MASTER_CODE                     (0x09U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   118  #define I2C_FLAG_SET                        (uint8)(0x01U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   119  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   120  #define I2C_WRITE_OPERATION                 (0x00U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   121  #define I2C_READ_OPERATION                  (0x01U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   122  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   123  #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   124  #define I2C_UNINITIALIZED   (0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   125  #define I2C_INITIALIZED     (1U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   126  #define I2C_7_BIT_MAX_SLAVE_ADD  (0x7FU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   127  #define I2C_10_BIT_MAX_SLAVE_ADD (0x3FFU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   128  #define I2C_MAX_SUPPORTED_SIZE   (0x3FFFU)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   129  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   130  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   131  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   132  **                         User Mode Macros                                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   133  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   134  #if(I2C_INIT_DEINIT_API_MODE == I2C_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   135  /* Library APIs  */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   136  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   137   *'I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG'
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   138   *defined for User mode support in code.
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   139   *No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   140  #define I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   141      Mcal_WritePeripEndInitProtReg(RegAdd,Data)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   142  /* Supervisory mode registers */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   143    /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   144     * I2C_SFR_INIT_DEINIT_WRITE32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   145     * defined for User mode support in code.
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   146     * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   147    #define I2C_SFR_INIT_DEINIT_WRITE32(reg, value) (*(reg) = (uint32)(value))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   148  /* Supervisory mode registers */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   149    /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   150     * I2C_SFR_INIT_DEINIT_READ32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   151     * defined for User mode support in code.
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   152     * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   153    #define I2C_SFR_INIT_DEINIT_READ32(reg) (*reg)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   154  #else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   155  /* Library APIs  */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   156  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   157   *'I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG'
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   158   *defined for User mode support in code.
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   159   *No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   160  #define I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   161      MCAL_LIB_WRITEPERIPENDINITPROTREG(RegAdd,Data)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   162  /* Supervisory mode registers */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   163  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   164  * I2C_SFR_INIT_DEINIT_WRITE32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   165  * defined for User mode support in code.
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   166  * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   167  #define I2C_SFR_INIT_DEINIT_WRITE32(reg, value)    \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   168              MCAL_SFR_OS_WRITE32(I2C_MODULE_ID, reg, value)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   169  /* Supervisory mode registers */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   170    /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   171     * I2C_SFR_INIT_DEINIT_READ32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   172     * defined for User mode support in code.
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   173     * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   174  #define I2C_SFR_INIT_DEINIT_READ32(reg)    \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   175              MCAL_SFR_OS_READ32(I2C_MODULE_ID, reg)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   176  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   177  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   178  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   179  **                      Private Type Definitions                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   180  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   181  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   182  typedef enum
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   183  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   184    I2C_RX_NOT_STARTED = 0u,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   185    I2C_RX_INITIATED,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   186    I2C_RX_COMMAND_SENT,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   187    I2C_RX_IN_PROGRESS,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   188    I2C_RX_COMPLETED
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   189  }I2c_RxTransferStateType;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   190  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   191  typedef enum
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   192  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   193    I2C_TX_IN_PROGRESS = 0u,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   194    I2C_TX_COMPLETED
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   195  }I2c_TxTransferStateType;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   196  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   197  typedef enum
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   198  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   199    I2C_NO_OPERATION = 0u,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   200    I2C_WRITE,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   201    I2C_READ
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   202  }I2c_OperationType;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   203  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   204  typedef struct
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   205  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   206    /* Data buffer pointer */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   207    I2c_DataType *DataPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   208    /* Channel Transmit state */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   209    I2c_ChannelStatusType HwState;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   210    /* Number of bytes pending to transmit */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   211    I2c_SizeType DataLeft;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   212    /* Number of bytes transmited */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   213    I2c_SizeType TotalDataTxd;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   214    /* I2c Operation */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   215    I2c_OperationType I2c_Operation;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   216    /* I2c Slave Address */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   217    I2c_SlaveAddrType SlaveAddr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   218    /* Read State */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   219    I2c_RxTransferStateType RxTransferState;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   220  } I2c_ChannelInfoType;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   221  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   222  **                     Private Function Declarations:                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   223  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   224  /*Memory Map of the I2C Code*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   225  #define I2C_START_SEC_CODE_QM_LOCAL
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   226  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   227     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   228  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   229     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   230  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   231  static I2c_ErrorType I2c_lSyncTransmit(Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   232                             I2c_ChannelInfoType * const ChannelInfo,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   233                             const I2c_ChannelType ChannelId);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   234  static I2c_ErrorType I2c_lSyncReceive(Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   235                        I2c_ChannelInfoType * const ChannelInfo,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   236                        const I2c_ChannelType ChannelId);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   237  static void I2c_lHwEnableInterrupt(Ifx_I2C* const HwModulePtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   238  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   239  #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   240  static I2c_ErrorType I2c_ReadWriteDetCheck(const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   241                  const I2c_DataType *const DataPtr, const I2c_SizeType Size,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   242                  const I2c_SlaveAddrType SlaveAddress, const uint8 ServiceId);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   243  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   244  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   245  static void I2c_lSendMasterCode(Ifx_I2C* const HwModulePtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   246  static void I2c_lHwClearAllInterrupts(Ifx_I2C* const HwModulePtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   247  static uint8 I2c_lHwInit(const uint8 HwUnit,const I2c_ConfigType* ConfigPtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   248  static void I2c_lHwUpdateModuleReg(const uint8 HwUnit,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   249                             const I2c_ChannelConfigType *const ChannelConfigPtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   250  static void I2c_lResetKernels(Ifx_I2C* const HwModulePtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   251  static void  I2c_lWrite(Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   252                             I2c_ChannelInfoType* const ChannelInfo);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   253  static void I2c_lRead(Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   254                              I2c_ChannelInfoType* const ChannelInfo);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   255  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   256  #define I2C_STOP_SEC_CODE_QM_LOCAL
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   257  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   258     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   259  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   260     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   261  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   262  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   263  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   264  **                      Hw  Apis                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   265  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   266  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   267  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   268  **                      Global Constant Definitions                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   269  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   270  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   271  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   272  **                      Global Variable Definitions                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   273  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   274  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   275  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   276  **                      Private Constant Definitions                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   277  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   278  #define I2C_START_SEC_CONST_QM_LOCAL_32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   279  /*
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   280   * To be used for global constants (32 bits)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   281   * Inclusion of I2c_MemMap.h
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   282  */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   283  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   284     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   285  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   286     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   287  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   288  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   289  static Ifx_I2C * const I2c_HwModuleAddr[I2C_MAX_HW_UNIT] = {I2C_REG_ADDR};
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   290  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   291  #define I2C_STOP_SEC_CONST_QM_LOCAL_32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   292  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   293     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   294  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   295     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   296  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   297  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   298  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   299  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   300  **                      Private Variable Definitions                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   301  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   302  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   303  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   304  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   305  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   306  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   307  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   308  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   309  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   310  #define I2C_START_SEC_VAR_CLEARED_QM_LOCAL_32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   311  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   312     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   313  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   314     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   315  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   316  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   317  /* This variable is used to store the I2c driver configuration pointer */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   318  static const I2c_ConfigType * I2c_ConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   319  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   320  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   321  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   322  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   323  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   324  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   325  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   326  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   327  #define I2C_STOP_SEC_VAR_CLEARED_QM_LOCAL_32
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   328  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   329     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   330  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   331     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   332  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   333  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   334  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   335  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   336  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   337  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   338  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   339  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   340  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   341  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   342  #define I2C_START_SEC_VAR_CLEARED_QM_LOCAL_8
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   343  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   344     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   345  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   346     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   347  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   348  static uint8 I2c_ChannelMap[I2C_MAX_HW_UNIT];
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   349  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   350  #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   351  /* This variable is used to check the initialisation status*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   352  static uint8 I2c_InitStatus;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   353  #endif/*(I2C_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   354  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   355  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   356  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   357  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   358  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   359  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   360  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   361  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   362  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   363  #define I2C_STOP_SEC_VAR_CLEARED_QM_LOCAL_8
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   364  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   365     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   366  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   367     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   368  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   369  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   370  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   371  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   372  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   373  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   374  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   375  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   376  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   377  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   378  #define I2C_START_SEC_VAR_CLEARED_QM_LOCAL_UNSPECIFIED
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   379  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   380     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   381  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   382     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   383  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   384  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   385  static I2c_ChannelInfoType I2c_ChannelInfo[I2C_MAX_CHANNELS];
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   386  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   387  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   388  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   389  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   390  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   391  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   392  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   393  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   394  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   395  #define I2C_STOP_SEC_VAR_CLEARED_QM_LOCAL_UNSPECIFIED
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   396  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   397     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   398  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   399     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   400  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   401  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   402  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   403  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   404  **                      Global Function Definitions                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   405  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   406  /*Memory Map of the I2C Code*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   407  #define I2C_START_SEC_CODE_QM_LOCAL
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   408  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   409     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   410  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   411     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   412  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   413  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   414  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   415  ** Syntax          : void I2c_Init(const I2c_ConfigType* ConfigPtr)           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   416  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   417  ** Service ID      : 0x4F                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   418  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   419  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   420  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   421  ** Reentrancy      : Non Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   422  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   423  ** Parameters (in) : ConfigPtr - Pointer to I2c Driver configuration set      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   424  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   425  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   426  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   427  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   428  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   429  ** Description     : Driver Module Initialization                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   430  **                    1.This function will initialize all relevant registers  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   431  **                      of I2C perpheral with the values of structure         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   432  **                      ConfigPtr                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   433  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   434  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   435  void I2c_Init
; Function I2c_Init
.L116:
I2c_Init:	.type	func
	mov.aa	a15,a4
.L472:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   436  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   437    const I2c_ConfigType* const ConfigPtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   438  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   439  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   440    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   441    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   442    uint8 ClkDisableChk;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   443    uint8 Channel;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   444    uint8 HwUnit;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   445  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   446    ClkDisableChk = 0U;
	mov	d8,#0
.L473:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   447    /***********************DET Check starts*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   448    #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   449    Std_ReturnType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   450    ReturnValue = E_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   451  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   452    if (ConfigPtr == NULL_PTR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   453    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   454      /* Report to  DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   455      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, I2C_SID_INIT, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   456                      I2C_E_INIT_FAILED );
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   457      ReturnValue = E_NOT_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   458    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   459    else if (I2c_InitStatus == I2C_INITIALIZED)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   460    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   461      /* Report to  DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   462      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, I2C_SID_INIT, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   463                      I2C_E_ALREADY_INITIALIZED);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   464      ReturnValue = E_NOT_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   465    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   466    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   467    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   468      /* No action required */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   469    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   470  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   471    if (ReturnValue == E_OK)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   472    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   473      /***********************DET Check ends*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   474  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   475      /***********Clock and General Configurations assignment starts*************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   476    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   477      for(Channel = 0U; Channel < ConfigPtr->I2c_MaxChannels; Channel++)
	mov	d9,d8
.L475:
	j	.L2
.L3:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   478      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   479        ChannelConfigPtr = &(ConfigPtr->I2c_ChannelConfigPtr[Channel]);
	mul	d15,d9,#44
.L655:
	ld.a	a2,[a15]
.L656:
	addsc.a	a12,a2,d15,#0
.L477:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   480        HwUnit = ChannelConfigPtr->HwUnit;
	ld.bu	d15,[a12]
.L478:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   481        I2c_ChannelMap[HwUnit] = Channel;
	movh.a	a2,#@his(I2c_ChannelMap)
	lea	a2,[a2]@los(I2c_ChannelMap)
.L657:
	addsc.a	a2,a2,d15,#0
.L658:
	st.b	[a2],d9
.L659:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   482        ClkDisableChk = I2c_lHwInit(HwUnit, ConfigPtr);
	mov	d4,d15
.L479:
	mov.aa	a4,a15
.L480:
	call	I2c_lHwInit
.L474:
	mov	d8,d2
.L482:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   483        if(0U == ClkDisableChk)
	jne	d8,#0,.L4
.L660:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   484        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   485        /* HW Clock initilisation */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   486          HwModulePtr = I2c_HwModuleAddr[ChannelConfigPtr->HwUnit];
	ld.bu	d0,[a12]
.L661:
	movh.a	a2,#@his(I2c_HwModuleAddr)
	lea	a2,[a2]@los(I2c_HwModuleAddr)
.L662:
	addsc.a	a2,a2,d0,#2
	ld.a	a13,[a2]
.L483:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   487          /* Store ConfigPtr for use by APIs*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   488          I2c_lHwUpdateModuleReg(HwUnit,ChannelConfigPtr);
	mov	d4,d15
.L484:
	mov.aa	a4,a12
.L485:
	call	I2c_lHwUpdateModuleReg
.L481:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   489          I2c_lHwClearAllInterrupts(HwModulePtr);
	mov.aa	a4,a13
.L486:
	call	I2c_lHwClearAllInterrupts
.L4:
	add	d9,#1
.L476:
	extr.u	d9,d9,#0,#8
.L2:
	ld.bu	d15,[a15]4
.L663:
	jlt.u	d9,d15,.L3
.L664:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   490        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   491      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   492      if(0U == ClkDisableChk)
	jne	d8,#0,.L5
.L665:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   493      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   494        for(Channel = 0U; Channel < ConfigPtr->I2c_MaxChannels; Channel++)
	mov	d0,#0
.L487:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   495        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   496          I2c_ChannelInfo[Channel].HwState = I2C_IDLE;
	mov	d1,#1
.L666:
	j	.L6
.L7:
	sha	d15,d0,#4
.L667:
	movh.a	a2,#@his(I2c_ChannelInfo)
	lea	a2,[a2]@los(I2c_ChannelInfo)
.L668:
	addsc.a	a2,a2,d15,#0
.L669:
	st.b	[a2]4,d1
.L670:
	add	d0,#1
.L488:
	extr.u	d0,d0,#0,#8
.L6:
	ld.bu	d15,[a15]4
.L671:
	jlt.u	d0,d15,.L7
.L672:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   497        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   498        I2c_ConfigPtr = ConfigPtr;
	movh.a	a2,#@his(I2c_ConfigPtr)
.L673:
	st.a	[a2]@los(I2c_ConfigPtr),a15
.L5:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   499        #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   500        I2c_InitStatus = I2C_INITIALIZED;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   501        #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   502      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   503      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   504      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   505        #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   506        I2c_InitStatus = I2C_UNINITIALIZED;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   507        #else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   508        /* Do nothing */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   509        #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   510      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   511    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   512  }
	ret
.L274:
	
__I2c_Init_function_end:
	.size	I2c_Init,__I2c_Init_function_end-I2c_Init
.L165:
	; End of function
	
	.sdecl	'.text.I2c_DeInit.Code.Cpu0',code,cluster('I2c_DeInit')
	.sect	'.text.I2c_DeInit.Code.Cpu0'
	.align	2
	
	.global	I2c_DeInit

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   513  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   514  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   515  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   516  ** Syntax          : void I2c_DeInit(void)                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   517  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   518  ** Service ID      : 0x50                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   519  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   520  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   521  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   522  ** Reentrancy      : Non Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   523  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   524  ** Parameters (in) : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   525  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   526  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   527  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   528  ** Return value    : E_OK: de-initialisation command has been accepted.       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   529  **                   E_NOT_OK: de-initialisation command has not been accepted**
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   530  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   531  ** Description     : Driver DeInitialization                                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   532  **                    1.This function will deinitialize the I2C module        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   533  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   534  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   535  Std_ReturnType I2c_DeInit
; Function I2c_DeInit
.L118:
I2c_DeInit:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   536  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   537    void
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   538  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   539  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   540    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   541    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   542    Std_ReturnType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   543    uint8 Channel;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   544    uint8 HwUnit;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   545  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   546    ReturnValue = E_OK;
	mov	d8,#0
.L489:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   547  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   548    #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   549    if (I2c_InitStatus == I2C_UNINITIALIZED)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   550    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   551      /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   552      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, I2C_SID_DEINIT, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   553                      I2C_E_UNINIT);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   554      ReturnValue = E_NOT_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   555    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   556    if (ReturnValue == E_OK)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   557    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   558    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   559      #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   560      I2c_InitStatus = I2C_UNINITIALIZED;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   561      #endif /*(I2C_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   562      for(Channel = 0U; Channel < I2C_MAX_CHANNELS; Channel++)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   563      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   564        /*Reset the channel info*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   565        ChannelInfo = &I2c_ChannelInfo[Channel];
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   566        ChannelInfo->DataPtr = NULL_PTR;
	mov.a	a12,#0
.L678:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   567        ChannelInfo->HwState = I2C_UNINIT;
	mov	d15,d8
.L491:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   568        ChannelInfo->DataLeft = 0U;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   569        ChannelInfo->TotalDataTxd = 0U;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   570        ChannelInfo->I2c_Operation = I2C_NO_OPERATION;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   571        ChannelInfo->SlaveAddr = 0U;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   572        ChannelInfo->RxTransferState = I2C_RX_NOT_STARTED;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   573  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   574        HwUnit = I2c_ConfigPtr->I2c_ChannelConfigPtr[Channel].HwUnit;
	movh.a	a13,#@his(I2c_ConfigPtr)
.L679:
	j	.L8
.L9:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L680:
	sha	d0,d8,#4
.L681:
	addsc.a	a15,a15,d0,#0
.L492:
	st.a	[a15],a12
.L494:
	st.b	[a15]4,d15
.L682:
	st.h	[a15]6,d15
.L683:
	st.h	[a15]8,d15
.L684:
	st.b	[a15]10,d15
.L685:
	st.h	[a15]12,d15
.L686:
	st.b	[a15]14,d15
.L495:
	ld.a	a15,[a13]@los(I2c_ConfigPtr)
.L493:
	ld.a	a15,[a15]
.L687:
	mul	d0,d8,#44
	addsc.a	a15,a15,d0,#0
.L688:
	ld.bu	d0,[a15]
.L496:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   575        HwModulePtr = I2c_HwModuleAddr[HwUnit];
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L689:
	addsc.a	a15,a15,d0,#2
	ld.a	a15,[a15]
.L498:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   576  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   577        I2c_lHwClearAllInterrupts(HwModulePtr);
	mov.aa	a4,a15
.L499:
	call	I2c_lHwClearAllInterrupts
.L497:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   578        /* Disable the I2C module clock */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   579        I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->CLC.U,
	movh.a	a3,#1
	add.a	a3,a15
	mov.aa	a4,a3
	mov	d4,#1
	call	Mcal_WritePeripEndInitProtReg
.L690:
	add	d8,#1
.L8:
	jeq	d8,#0,.L9
.L691:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   580                                                         I2C_CLK_DISABLE);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   581      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   582      I2c_ConfigPtr = NULL_PTR;
	movh.a	a15,#@his(I2c_ConfigPtr)
.L692:
	mov.a	a2,#0
.L693:
	st.a	[a15]@los(I2c_ConfigPtr),a2
.L694:
	mov	d2,#0
.L490:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   583    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   584  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   585    return ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   586  }
	ret
.L285:
	
__I2c_DeInit_function_end:
	.size	I2c_DeInit,__I2c_DeInit_function_end-I2c_DeInit
.L170:
	; End of function
	
	.sdecl	'.text.I2c_SyncWrite.Code.Cpu0',code,cluster('I2c_SyncWrite')
	.sect	'.text.I2c_SyncWrite.Code.Cpu0'
	.align	2
	
	.global	I2c_SyncWrite

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   587  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   588  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   589  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   590  ** Syntax          : I2c_ReturnType I2c_SyncWrite                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   591  **                   (                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   592  **                     const I2c_ChannelType ChannelId,                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   593  **                     I2c_DataType *const DataPtr,                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   594  **                     I2c_SizeType Size,                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   595  **                     I2c_SlaveAddrType SlaveAddress                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   596  **                   )                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   597  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   598  ** Service ID      : 0x51                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   599  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   600  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   601  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   602  ** Reentrancy      : Non-Reentrant(for same channel)                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   603  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   604  ** Parameters (in) : ChannelId- I2C Channel identifier                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   605  **                   DataPtr- Pointer to data that needs to be transmitted    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   606  **                   Size- Size of data to be transmitted in Bytes            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   607  **                   SlaveAddress- Address of slave                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   608  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   609  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   610  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   611  ** Return value    : I2C_OK: I2C operation Successful                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   612  **                   I2C_NOT_OK: I2C operation not Successful.                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   613  **                   I2C_IS_BUSY: I2C module is busy.                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   614  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   615  ** Description     : The service I2c_Write() is called to perform Write       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   616  **                   operation.                                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   617  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   618  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   619  I2c_ErrorType I2c_SyncWrite
; Function I2c_SyncWrite
.L120:
I2c_SyncWrite:	.type	func
	mov	d8,d4
.L501:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   620  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   621    const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   622    I2c_DataType *const DataPtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   623    const I2c_SizeType Size,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   624    const I2c_SlaveAddrType SlaveAddress
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   625  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   626  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   627    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   628    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   629    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   630    I2c_ErrorType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   631  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   632    /***********************DET Check starts*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   633    #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   634    ReturnValue = I2c_ReadWriteDetCheck(ChannelId, DataPtr, Size, SlaveAddress,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   635                                                               I2C_SID_SYNCWRITE);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   636    /***********************DET Check ends***************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   637    if(ReturnValue == I2C_NO_ERR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   638    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   639    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   640      /* Set the channel specific information */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   641      ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,d8,#4
.L699:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L700:
	addsc.a	a15,a15,d15,#0
.L502:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   642      ChannelInfo->HwState = I2C_BUSY;
	mov	d15,#2
.L701:
	st.b	[a15]4,d15
.L702:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   643      ChannelInfo->DataPtr = DataPtr;
	st.a	[a15],a4
.L703:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   644      ChannelInfo->DataLeft = Size;
	st.h	[a15]6,d5
.L704:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   645      ChannelInfo->TotalDataTxd = 0u;
	mov	d15,#0
.L705:
	st.h	[a15]8,d15
.L706:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   646      ChannelInfo->I2c_Operation = I2C_WRITE;
	mov	d15,#1
.L707:
	st.b	[a15]10,d15
.L708:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   647      ChannelInfo->SlaveAddr = SlaveAddress;
	st.h	[a15]12,d6
.L709:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   648      ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d8,#44
.L710:
	movh.a	a2,#@his(I2c_ConfigPtr)
	ld.a	a2,[a2]@los(I2c_ConfigPtr)
.L711:
	ld.a	a2,[a2]
.L712:
	addsc.a	a12,a2,d15,#0
.L503:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   649      HwModulePtr = I2c_HwModuleAddr[ChannelConfigPtr->HwUnit];
	ld.bu	d15,[a12]
.L713:
	movh.a	a2,#@his(I2c_HwModuleAddr)
	lea	a2,[a2]@los(I2c_HwModuleAddr)
.L714:
	addsc.a	a2,a2,d15,#2
	ld.a	a13,[a2]
.L504:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   650  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   651      /* Enter to RUN state */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   652      HwModulePtr->RUNCTRL.B.RUN = I2C_ENABLE_INTERFACE;
	ld.bu	d15,[a13]16
.L715:
	or	d15,#1
	st.b	[a13]16,d15
.L716:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   653  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   654      /* Send master code if configured for high speed mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   655      if(ChannelConfigPtr->FracDividerHighCfgValue > 0U)
	ld.w	d15,[a12]10
.L717:
	jeq	d15,#0,.L11
.L718:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   656      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   657        I2c_lSendMasterCode(HwModulePtr);
	mov.aa	a4,a13
.L500:
	call	I2c_lSendMasterCode
.L11:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   658      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   659  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   660      /* Set transmit packet size as per the addressing mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   661      if(ChannelConfigPtr->AddressingMode == I2C_7_BIT_ADDRESSING)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   662      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   663        HwModulePtr->TPSCTRL.U = ((uint32)(ChannelInfo->DataLeft) + \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   664                                             (uint32)I2C_PACKET_SIZE_7BIT_ADDR);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   665      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   666      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   667      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   668        HwModulePtr->TPSCTRL.U = ((uint32)(ChannelInfo->DataLeft) + \ 
	ld.hu	d0,[a15]6
.L719:
	ld.bu	d15,[a12]28
.L720:
	eq	d15,d15,#0
.L721:
	sub	d0,d15
	add	d15,d0,#2
.L722:
	st.w	[a13]52,d15
.L723:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   669                                       (uint32)I2C_PACKET_SIZE_10BIT_ADDR);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   670      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   671  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   672      /* Call local function to perform write */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   673      ReturnValue = I2c_lSyncTransmit(HwModulePtr, ChannelInfo, ChannelId);
	mov.aa	a4,a13
.L505:
	mov.aa	a5,a15
.L506:
	mov	d4,d8
.L507:
	j	I2c_lSyncTransmit
.L293:
	
__I2c_SyncWrite_function_end:
	.size	I2c_SyncWrite,__I2c_SyncWrite_function_end-I2c_SyncWrite
.L175:
	; End of function
	
	.sdecl	'.text.I2c_SyncRead.Code.Cpu0',code,cluster('I2c_SyncRead')
	.sect	'.text.I2c_SyncRead.Code.Cpu0'
	.align	2
	
	.global	I2c_SyncRead

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   674    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   675      return ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   676  }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   677  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   678  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   679  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   680  ** Syntax          : I2c_ReturnType I2c_SyncRead                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   681  **                   (                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   682  **                     const I2c_ChannelType ChannelId,                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   683  **                     I2c_DataType *const DataPtr,                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   684  **                     I2c_SizeType Size,                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   685  **                     I2c_SlaveAddrType SlaveAddress                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   686  **                   )                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   687  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   688  ** Service ID      : 0x52                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   689  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   690  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   691  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   692  ** Reentrancy      : Non-Reentrant(for same channel)                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   693  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   694  ** Parameters (in) : ChannelId- I2C Channel identifier                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   695  **                   Size- Size of data to be recieved in Bytes               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   696  **                   SlaveAddress- Address of slave                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   697  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   698  ** Parameters (out): DataPtr- Pointer to data that is read                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   699  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   700  ** Return value    : I2C_OK: I2C operation Successful                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   701  **                   I2C_NOT_OK: I2C operation not Successful.                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   702  **                   I2C_IS_BUSY: I2C module is busy.                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   703  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   704  ** Description     : The service I2c_Read() is called to perform Read         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   705  **                   operation.                                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   706  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   707  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   708  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   709  I2c_ErrorType I2c_SyncRead
; Function I2c_SyncRead
.L122:
I2c_SyncRead:	.type	func
	mov	d8,d4
.L509:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   710  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   711    const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   712    I2c_DataType *const DataPtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   713    const I2c_SizeType Size,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   714    const I2c_SlaveAddrType SlaveAddress
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   715  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   716  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   717    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   718    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   719    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   720    I2c_ErrorType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   721  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   722    /***********************DET Check starts*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   723    #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   724    ReturnValue = I2c_ReadWriteDetCheck(ChannelId, DataPtr, Size, SlaveAddress,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   725                                                                I2C_SID_SYNCREAD);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   726    /***********************DET Check ends***************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   727    if(ReturnValue == I2C_NO_ERR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   728    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   729    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   730      /* Set the channel specific information */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   731      ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,d8,#4
.L728:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L729:
	addsc.a	a15,a15,d15,#0
.L510:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   732      ChannelInfo->HwState = I2C_BUSY;
	mov	d15,#2
.L730:
	st.b	[a15]4,d15
.L731:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   733      ChannelInfo->DataPtr = DataPtr;
	st.a	[a15],a4
.L732:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   734      ChannelInfo->DataLeft = Size;
	st.h	[a15]6,d5
.L733:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   735      ChannelInfo->TotalDataTxd = 0;
	mov	d0,#0
.L734:
	st.h	[a15]8,d0
.L735:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   736      ChannelInfo->I2c_Operation = I2C_READ;
	st.b	[a15]10,d15
.L736:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   737      ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d8,#44
.L737:
	movh.a	a2,#@his(I2c_ConfigPtr)
	ld.a	a2,[a2]@los(I2c_ConfigPtr)
.L738:
	ld.a	a2,[a2]
.L739:
	addsc.a	a12,a2,d15,#0
.L511:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   738      ChannelInfo->SlaveAddr = SlaveAddress;
	st.h	[a15]12,d6
.L740:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   739      ChannelInfo->RxTransferState = I2C_RX_INITIATED;
	mov	d15,#1
.L741:
	st.b	[a15]14,d15
.L742:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   740      HwModulePtr = I2c_HwModuleAddr[ChannelConfigPtr->HwUnit];
	ld.bu	d15,[a12]
.L743:
	movh.a	a2,#@his(I2c_HwModuleAddr)
	lea	a2,[a2]@los(I2c_HwModuleAddr)
.L744:
	addsc.a	a2,a2,d15,#2
	ld.a	a13,[a2]
.L512:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   741  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   742      /* Enter to RUN state */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   743      HwModulePtr->RUNCTRL.B.RUN = I2C_ENABLE_INTERFACE;
	ld.bu	d15,[a13]16
.L745:
	or	d15,#1
	st.b	[a13]16,d15
.L746:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   744  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   745      /* Send master code if configured for high speed mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   746      if(ChannelConfigPtr->FracDividerHighCfgValue > 0U)
	ld.w	d15,[a12]10
.L747:
	jeq	d15,#0,.L13
.L748:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   747      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   748        I2c_lSendMasterCode(HwModulePtr);
	mov.aa	a4,a13
.L508:
	call	I2c_lSendMasterCode
.L13:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   749      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   750      /* Set transmit packet size as per the addressing mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   751      if(ChannelConfigPtr->AddressingMode == I2C_7_BIT_ADDRESSING)
	ld.bu	d15,[a12]28
	ne	d15,d15,#0
.L749:
	add	d15,#1
.L750:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   752      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   753        HwModulePtr->TPSCTRL.U = I2C_PACKET_SIZE_7BIT_ADDR;
	st.w	[a13]52,d15
.L751:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   754      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   755      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   756      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   757        HwModulePtr->TPSCTRL.U = I2C_PACKET_SIZE_10BIT_ADDR;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   758      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   759      /* Call local function to perform read */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   760      ReturnValue = I2c_lSyncReceive(HwModulePtr, ChannelInfo, ChannelId);
	mov.aa	a4,a13
.L513:
	mov.aa	a5,a15
.L514:
	mov	d4,d8
.L515:
	j	I2c_lSyncReceive
.L306:
	
__I2c_SyncRead_function_end:
	.size	I2c_SyncRead,__I2c_SyncRead_function_end-I2c_SyncRead
.L180:
	; End of function
	
	.sdecl	'.text.I2c_AsyncWrite.Code.Cpu0',code,cluster('I2c_AsyncWrite')
	.sect	'.text.I2c_AsyncWrite.Code.Cpu0'
	.align	2
	
	.global	I2c_AsyncWrite

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   761    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   762    return ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   763  }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   764  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   765  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   766  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   767  ** Syntax          : I2c_ReturnType I2c_AsyncWrite                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   768  **                   (                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   769  **                     const I2c_ChannelType ChannelId,                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   770  **                     I2c_DataType *const DataPtr,                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   771  **                     I2c_SizeType Size,                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   772  **                     I2c_SlaveAddrType SlaveAddress                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   773  **                   )                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   774  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   775  ** Service ID      : 0x53                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   776  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   777  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   778  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   779  ** Reentrancy      : Non-Reentrant(for same channel)                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   780  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   781  ** Parameters (in) : ChannelId- I2C Channel identifier                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   782  **                   DataPtr- Pointer to data that needs to be transmitted    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   783  **                   Size- Size of data to be transmitted in Bytes            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   784  **                   SlaveAddress- Address of slave                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   785  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   786  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   787  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   788  ** Return value    : I2C_OK: I2C operation Successful                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   789  **                   I2C_NOT_OK: I2C operation not Successful.                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   790  **                   I2C_IS_BUSY: I2C module is busy.                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   791  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   792  ** Description     : The service I2c_Write() is called to perform Write       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   793  **                   operation.                                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   794  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   795  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   796  I2c_ErrorType I2c_AsyncWrite
; Function I2c_AsyncWrite
.L124:
I2c_AsyncWrite:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   797  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   798    const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   799    I2c_DataType *const DataPtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   800    const I2c_SizeType Size,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   801    const I2c_SlaveAddrType SlaveAddress
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   802  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   803  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   804    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   805    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   806    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   807    I2c_ErrorType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   808  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   809    #if (I2C_DEV_ERROR_DETECT == STD_OFF)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   810    ReturnValue = I2C_NO_ERR;
	mov	d8,#0
.L518:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   811    /***********************DET Check starts*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   812    #else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   813    ReturnValue = I2c_ReadWriteDetCheck(ChannelId, DataPtr, Size, SlaveAddress,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   814                                                              I2C_SID_ASYNCWRITE);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   815    /***********************DET Check ends***************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   816    if(ReturnValue == I2C_NO_ERR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   817    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   818    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   819      /* Set the channel specific information */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   820      ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,d4,#4
.L756:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L757:
	addsc.a	a15,a15,d15,#0
.L519:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   821      ChannelInfo->HwState = I2C_BUSY;
	mov	d15,#2
.L758:
	st.b	[a15]4,d15
.L759:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   822      ChannelInfo->DataPtr = DataPtr;
	st.a	[a15],a4
.L760:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   823      ChannelInfo->DataLeft = Size;
	st.h	[a15]6,d5
.L761:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   824      ChannelInfo->TotalDataTxd = 0u;
	st.h	[a15]8,d8
.L762:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   825      ChannelInfo->I2c_Operation = I2C_WRITE;
	mov	d15,#1
.L763:
	st.b	[a15]10,d15
.L764:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   826      ChannelInfo->SlaveAddr = SlaveAddress;
	st.h	[a15]12,d6
.L765:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   827      ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d4,#44
.L766:
	movh.a	a2,#@his(I2c_ConfigPtr)
	ld.a	a2,[a2]@los(I2c_ConfigPtr)
.L767:
	ld.a	a2,[a2]
.L768:
	addsc.a	a12,a2,d15,#0
.L520:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   828      HwModulePtr = I2c_HwModuleAddr[ChannelConfigPtr->HwUnit];
	ld.bu	d15,[a12]
.L769:
	movh.a	a2,#@his(I2c_HwModuleAddr)
	lea	a2,[a2]@los(I2c_HwModuleAddr)
.L770:
	addsc.a	a2,a2,d15,#2
	ld.a	a13,[a2]
.L521:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   829  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   830      /* Enable module interrupts */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   831      I2c_lHwEnableInterrupt(HwModulePtr);
	mov.aa	a4,a13
.L517:
	call	I2c_lHwEnableInterrupt
.L516:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   832  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   833      /* Enter to RUN state */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   834      HwModulePtr->RUNCTRL.B.RUN = I2C_ENABLE_INTERFACE;
	ld.bu	d15,[a13]16
.L771:
	or	d15,#1
	st.b	[a13]16,d15
.L772:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   835  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   836      /* Send master code if configured for high speed mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   837      if(ChannelConfigPtr->FracDividerHighCfgValue > 0U)
	ld.w	d15,[a12]10
.L773:
	jeq	d15,#0,.L15
.L774:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   838      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   839        I2c_lSendMasterCode(HwModulePtr);
	mov.aa	a4,a13
.L522:
	call	I2c_lSendMasterCode
.L15:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   840      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   841  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   842      /* Set transmit packet size as per the addressing mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   843      if(ChannelConfigPtr->AddressingMode == I2C_7_BIT_ADDRESSING)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   844      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   845        HwModulePtr->TPSCTRL.U = ((uint32)(ChannelInfo->DataLeft) + \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   846                                               (uint32)I2C_PACKET_SIZE_7BIT_ADDR);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   847      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   848      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   849      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   850        HwModulePtr->TPSCTRL.U = ((uint32)(ChannelInfo->DataLeft) + \ 
	ld.hu	d0,[a15]6
.L775:
	ld.bu	d15,[a12]28
.L776:
	eq	d15,d15,#0
.L777:
	sub	d0,d15
	add	d15,d0,#2
.L778:
	st.w	[a13]52,d15
.L779:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   851                                        (uint32)I2C_PACKET_SIZE_10BIT_ADDR);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   852      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   853    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   854      return ReturnValue;
	mov	d2,d8
.L523:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   855  }
	ret
.L319:
	
__I2c_AsyncWrite_function_end:
	.size	I2c_AsyncWrite,__I2c_AsyncWrite_function_end-I2c_AsyncWrite
.L185:
	; End of function
	
	.sdecl	'.text.I2c_AsyncRead.Code.Cpu0',code,cluster('I2c_AsyncRead')
	.sect	'.text.I2c_AsyncRead.Code.Cpu0'
	.align	2
	
	.global	I2c_AsyncRead

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   856  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   857  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   858  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   859  ** Syntax          : I2c_ReturnType I2c_AsyncRead                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   860  **                   (                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   861  **                     const I2c_ChannelType ChannelId,                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   862  **                     I2c_DataType *const DataPtr,                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   863  **                     I2c_SizeType Size,                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   864  **                     I2c_SlaveAddrType SlaveAddress                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   865  **                   )                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   866  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   867  ** Service ID      : 0x54                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   868  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   869  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   870  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   871  ** Reentrancy      : Non-Reentrant(for same channel)                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   872  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   873  ** Parameters (in) : ChannelId- I2C Channel identifier                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   874  **                   Size- Size of data to be recieved in Bytes               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   875  **                   SlaveAddress- Address of slave                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   876  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   877  ** Parameters (out): DataPtr- Pointer to data that is read                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   878  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   879  ** Return value    : I2C_OK: I2C operation Successful                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   880  **                   I2C_NOT_OK: I2C operation not Successful.                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   881  **                   I2C_IS_BUSY: I2C module is busy.                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   882  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   883  ** Description     : The service I2c_Read() is called to perform Read         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   884  **                   operation.                                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   885  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   886  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   887  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   888  I2c_ErrorType I2c_AsyncRead
; Function I2c_AsyncRead
.L126:
I2c_AsyncRead:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   889  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   890    const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   891    I2c_DataType *const DataPtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   892    const I2c_SizeType Size,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   893    const I2c_SlaveAddrType SlaveAddress
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   894  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   895  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   896    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   897    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   898    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   899    I2c_ErrorType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   900  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   901    #if (I2C_DEV_ERROR_DETECT == STD_OFF)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   902    ReturnValue = I2C_NO_ERR;
	mov	d8,#0
.L526:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   903    /***********************DET Check starts*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   904    #else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   905    ReturnValue = I2c_ReadWriteDetCheck(ChannelId, DataPtr, Size, SlaveAddress,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   906                                                               I2C_SID_ASYNCREAD);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   907    /***********************DET Check ends***************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   908    if(ReturnValue == I2C_NO_ERR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   909    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   910    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   911      /* Set the channel specific information */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   912      ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,d4,#4
.L784:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L785:
	addsc.a	a15,a15,d15,#0
.L527:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   913      ChannelInfo->HwState = I2C_BUSY;
	mov	d15,#2
.L786:
	st.b	[a15]4,d15
.L787:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   914      ChannelInfo->DataPtr = DataPtr;
	st.a	[a15],a4
.L788:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   915      ChannelInfo->DataLeft = Size;
	st.h	[a15]6,d5
.L789:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   916      ChannelInfo->TotalDataTxd = 0;
	st.h	[a15]8,d8
.L790:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   917      ChannelInfo->I2c_Operation = I2C_READ;
	st.b	[a15]10,d15
.L791:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   918      ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d4,#44
.L792:
	movh.a	a2,#@his(I2c_ConfigPtr)
	ld.a	a2,[a2]@los(I2c_ConfigPtr)
.L793:
	ld.a	a2,[a2]
.L794:
	addsc.a	a12,a2,d15,#0
.L529:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   919      ChannelInfo->SlaveAddr = SlaveAddress;
	st.h	[a15]12,d6
.L795:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   920      ChannelInfo->RxTransferState = I2C_RX_INITIATED;
	mov	d15,#1
.L796:
	st.b	[a15]14,d15
.L797:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   921      HwModulePtr = I2c_HwModuleAddr[ChannelConfigPtr->HwUnit];
	ld.bu	d15,[a12]
.L798:
	movh.a	a15,#@his(I2c_HwModuleAddr)
.L528:
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L799:
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
.L530:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   922  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   923      /* Enable module interrupts */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   924      I2c_lHwEnableInterrupt(HwModulePtr);
	mov.aa	a4,a15
.L525:
	call	I2c_lHwEnableInterrupt
.L524:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   925  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   926      /* Enter to RUN state */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   927      HwModulePtr->RUNCTRL.B.RUN = I2C_ENABLE_INTERFACE;
	ld.bu	d15,[a15]16
.L800:
	or	d15,#1
	st.b	[a15]16,d15
.L801:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   928  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   929      /* Send master code if configured for high speed mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   930      if(ChannelConfigPtr->FracDividerHighCfgValue > 0U)
	ld.w	d15,[a12]10
.L802:
	jeq	d15,#0,.L17
.L803:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   931      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   932        I2c_lSendMasterCode(HwModulePtr);
	mov.aa	a4,a15
.L531:
	call	I2c_lSendMasterCode
.L17:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   933      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   934  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   935      /* Set transmit packet size as per the addressing mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   936      if(ChannelConfigPtr->AddressingMode == I2C_7_BIT_ADDRESSING)
	ld.bu	d15,[a12]28
	ne	d15,d15,#0
.L804:
	add	d15,#1
.L805:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   937      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   938        HwModulePtr->TPSCTRL.U = I2C_PACKET_SIZE_7BIT_ADDR;
	st.w	[a15]52,d15
.L806:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   939      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   940      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   941      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   942        HwModulePtr->TPSCTRL.U = I2C_PACKET_SIZE_10BIT_ADDR;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   943      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   944  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   945    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   946    return ReturnValue;
	mov	d2,d8
.L532:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   947  }
	ret
.L332:
	
__I2c_AsyncRead_function_end:
	.size	I2c_AsyncRead,__I2c_AsyncRead_function_end-I2c_AsyncRead
.L190:
	; End of function
	
	.sdecl	'.text.I2c_GetStatus.Code.Cpu0',code,cluster('I2c_GetStatus')
	.sect	'.text.I2c_GetStatus.Code.Cpu0'
	.align	2
	
	.global	I2c_GetStatus

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   948  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   949  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   950  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   951  ** Syntax          : I2c_ChannelStatusType I2c_GetStatus                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   952  **                   (                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   953  **                    I2c_ChannelType ChannelId                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   954  **                   )                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   955  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   956  ** Service ID      : 0x55                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   957  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   958  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   959  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   960  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   961  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   962  ** Parameters (in) : ChannelId- I2C Channel identifier                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   963  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   964  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   965  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   966  ** Return value    : I2C_UNINIT: I2C module is uninitialized.                 **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   967  **                   I2C_IDLE: I2C module is idle.                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   968  **                   I2C_BUSY: I2C module is busy.                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   969  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   970  ** Description     : This service return the status of the specified I2C      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   971  **                   module. The service I2c_GetStatus() is called to         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   972  **                   know if the specified I2C module is IDLE, BUSY or        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   973  **                   UNINITIALIZED.                                           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   974  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   975  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   976  I2c_ChannelStatusType I2c_GetStatus
; Function I2c_GetStatus
.L128:
I2c_GetStatus:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   977  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   978    const I2c_ChannelType ChannelId
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   979  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   980  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   981    I2c_ChannelStatusType ReturnStatus;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   982  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   983    #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   984  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   985    if (ChannelId >= I2C_MAX_CHANNELS)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   986    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   987      /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   988      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   989                      I2C_SID_GETSTATUS, I2C_E_INVALID_CHANNEL);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   990      ReturnStatus = I2C_UNINIT;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   991    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   992    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   993    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   994    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   995     /*MISRA2012_RULE_18_1_JUSTIFICATION: Pointer arithmetic other than
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   996          array indexing used for I2c_ChannelInfo structure. When DET is
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   997          off it is expected that the plausile value of ChannelId is
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   998          provided from upper layer. So the array range will be with in the
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	   999          boundary value. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1000    ReturnStatus = I2c_ChannelInfo[ChannelId].HwState;
	sha	d4,#4
.L533:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L811:
	addsc.a	a15,a15,d4,#0
.L812:
	ld.bu	d2,[a15]4
.L534:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1001    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1002  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1003    return ReturnStatus;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1004  }
	ret
.L346:
	
__I2c_GetStatus_function_end:
	.size	I2c_GetStatus,__I2c_GetStatus_function_end-I2c_GetStatus
.L195:
	; End of function
	
	.sdecl	'.text.I2c_CancelOperation.Code.Cpu0',code,cluster('I2c_CancelOperation')
	.sect	'.text.I2c_CancelOperation.Code.Cpu0'
	.align	2
	
	.global	I2c_CancelOperation

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1005  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1006  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1007  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1008  ** Syntax          : I2c_SizeType I2c_CancelOperation                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1009  **                   (                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1010  **                    I2c_ChannelType ChannelId,                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1011  **                    I2c_SizeType *const TransmittedDataSize                 **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1012  **                   )                                                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1013  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1014  ** Service ID      : 0x56                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1015  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1016  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1017  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1018  ** Reentrancy      : Non-Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1019  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1020  ** Parameters (in) : ChannelId- I2C Channel Id                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1021  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1022  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1023  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1024  ** Return value    : E_OK: Operation Successful.                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1025  **                   E_NOT_OK: Operation not Successful.                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1026  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1027  ** Description     : This service return the total data transmitted thhrough  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1028  **                   I2c Channel before it is cancelled.                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1029  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1030  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1031  Std_ReturnType I2c_CancelOperation
; Function I2c_CancelOperation
.L130:
I2c_CancelOperation:	.type	func
	mov.aa	a12,a4
.L537:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1032  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1033  const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1034  I2c_SizeType *const TransmittedDataSize
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1035  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1036  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1037    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1038    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1039    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1040    I2c_SizeType RetDataTransmitted;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1041    Std_ReturnType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1042    /***********************DET Check starts*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1043    #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1044  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1045    if (I2c_InitStatus == I2C_UNINITIALIZED)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1046    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1047      ReturnValue = E_NOT_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1048      /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1049      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1050          I2C_SID_CANCELOPERATION, I2C_E_UNINIT);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1051    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1052    else if (ChannelId >= I2C_MAX_CHANNELS)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1053    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1054      ReturnValue = E_NOT_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1055      /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1056      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1057          I2C_SID_CANCELOPERATION, I2C_E_INVALID_CHANNEL);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1058    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1059    else if (TransmittedDataSize == NULL_PTR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1060    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1061      ReturnValue = E_NOT_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1062      /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1063      (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID, \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1064          I2C_SID_CANCELOPERATION, I2C_E_PARAM_POINTER);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1065    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1066    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1067    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1068    /***********************DET Check ends*************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1069    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1070      ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d4,#44
.L817:
	movh.a	a15,#@his(I2c_ConfigPtr)
	ld.a	a15,[a15]@los(I2c_ConfigPtr)
.L818:
	ld.a	a15,[a15]
.L819:
	addsc.a	a15,a15,d15,#0
.L538:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1071      HwModulePtr = I2c_HwModuleAddr[ChannelConfigPtr->HwUnit];
	ld.bu	d15,[a15]
.L820:
	movh.a	a15,#@his(I2c_HwModuleAddr)
.L539:
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L821:
	addsc.a	a15,a15,d15,#2
	ld.a	a4,[a15]
.L536:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1072      ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d4,#4
.L535:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L822:
	addsc.a	a15,a15,d4,#0
.L541:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1073  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1074      /* Disable the RUNCTRL for further transmission */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1075      HwModulePtr->RUNCTRL.B.RUN = I2C_DISABLE_INTERFACE;
	ld.bu	d15,[a4]16
.L823:
	insert	d15,d15,#0,#0,#1
	st.b	[a4]16,d15
.L824:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1076      I2c_lHwClearAllInterrupts(HwModulePtr);
	call	I2c_lHwClearAllInterrupts
.L540:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1077  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1078      /* Return total data txd/rxd before operation was aborted */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1079      RetDataTransmitted = ChannelInfo->TotalDataTxd;
	ld.hu	d0,[a15]8
.L542:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1080  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1081      /* Reset channel info structure */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1082      ChannelInfo->HwState = I2C_IDLE;
	mov	d15,#1
.L825:
	st.b	[a15]4,d15
.L826:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1083      ChannelInfo->DataPtr = NULL_PTR;
	mov.a	a2,#0
.L827:
	st.a	[a15],a2
.L828:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1084  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1085      /* Reset data counter */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1086      ChannelInfo->DataLeft = 0U;
	mov	d2,#0
.L829:
	st.h	[a15]6,d2
.L830:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1087      ChannelInfo->TotalDataTxd = 0U;
	st.h	[a15]8,d2
.L831:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1088      ReturnValue = E_OK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1089      *TransmittedDataSize = RetDataTransmitted;
	st.h	[a12],d0
.L832:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1090    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1091    return ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1092  }
	ret
.L350:
	
__I2c_CancelOperation_function_end:
	.size	I2c_CancelOperation,__I2c_CancelOperation_function_end-I2c_CancelOperation
.L200:
	; End of function
	
	.sdecl	'.text.I2c_lHwInit.Code.Cpu0',code,cluster('I2c_lHwInit')
	.sect	'.text.I2c_lHwInit.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1093  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1094  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1095  **                            I2c Hw Apis                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1096  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1097  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1098  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1099  ** Syntax          : I2c_lHwInit(const I2c_ConfigType* ConfigPtr)             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1100  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1101  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1102  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1103  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1104  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1105  ** Reentrancy      : Non-Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1106  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1107  ** Parameters (in) : ConfigPtr - Pointer to I2c Driver configuration set      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1108  **                   HwUnit    - HwUnit to be initialized                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1109  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1110  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1111  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1112  ** Return value    : uint8                                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1113  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1114  ** Description     : This function will initialize the hardware peripheral    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1115  **                    - All the interrupts are cleared                        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1116  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1117  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1118  static uint8 I2c_lHwInit
; Function I2c_lHwInit
.L132:
I2c_lHwInit:	.type	func
	mov	d15,d4
.L545:
	mov.aa	a12,a4
.L547:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1119  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1120    const uint8 HwUnit,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1121    const I2c_ConfigType *ConfigPtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1122  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1123  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1124    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1125    uint8 ClkDisableChk;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1126  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1127    I2c_lResetKernels(I2c_HwModuleAddr[HwUnit]);
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L1019:
	addsc.a	a15,a15,d15,#2
	ld.a	a4,[a15]
.L543:
	call	I2c_lResetKernels
.L544:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1128    HwModulePtr = I2c_HwModuleAddr[HwUnit];
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L1020:
	addsc.a	a15,a15,d15,#2
	ld.a	a13,[a15]
.L548:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1129  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1130    I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->CLC.U, (uint32)0U);
	movh.a	a3,#1
	add.a	a3,a13
	mov.aa	a4,a3
	mov	d4,#0
	call	Mcal_WritePeripEndInitProtReg
.L1021:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1131    ClkDisableChk = HwModulePtr->CLC.B.DISS;
	movh.a	a3,#1
	add.a	a3,a13
	ld.bu	d0,[+a3]0
	extr.u	d2,d0,#1,#1
.L549:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1132    if(ClkDisableChk == 0U)
	jnz.t	d0:1,.L21
.L1022:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1133    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1134      HwModulePtr->CLC1.U = ConfigPtr->I2c_ChannelConfigPtr[HwUnit].HWClkSetting;
	mul	d15,d15,#44
.L546:
	ld.a	a15,[a12]
.L1023:
	addsc.a	a15,a15,d15,#0
.L1024:
	ld.w	d15,[a15]24
.L1025:
	st.w	[a13],d15
.L1026:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1135      ClkDisableChk = HwModulePtr->CLC1.B.DISS;
	ld.bu	d15,[a13]
	extr.u	d2,d15,#1,#1
.L21:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1136    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1137    return ClkDisableChk;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1138  }
	ret
.L419:
	
__I2c_lHwInit_function_end:
	.size	I2c_lHwInit,__I2c_lHwInit_function_end-I2c_lHwInit
.L245:
	; End of function
	
	.sdecl	'.text.I2c_lHwClearAllInterrupts.Code.Cpu0',code,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.text.I2c_lHwClearAllInterrupts.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1139  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1140  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1141  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1142  ** Syntax          : void I2c_lHwClearAllInterrupts(Ifx_I2C* const HwModulePtr)*
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1143  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1144  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1145  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1146  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1147  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1148  ** Reentrancy      : Non-Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1149  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1150  ** Parameters (in) : HwModulePtr - Pointer to to Hw module                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1151  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1152  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1153  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1154  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1155  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1156  ** Description     : Fucntion to clear all the interrupts during init         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1157  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1158  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1159  static void I2c_lHwClearAllInterrupts
; Function I2c_lHwClearAllInterrupts
.L134:
I2c_lHwClearAllInterrupts:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1160  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1161    Ifx_I2C* const HwModulePtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1162  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1163  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1164    /*Disable module interrupt mask control*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1165    HwModulePtr->IMSC.U = (uint32)0U;
	mov	d0,#0
.L1007:
	st.w	[a4]132,d0
.L1008:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1166    /*Disable protocol interrupt mask control*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1167    HwModulePtr->PIRQSM.U = (uint32)0U;
	st.w	[a4]112,d0
.L1009:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1168    /*Clear protocol interrupt source*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1169    HwModulePtr->PIRQSC.U = I2C_PROTOCOL_INTERRUPT_MASK;
	mov	d15,#127
.L1010:
	st.w	[a4]120,d15
.L1011:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1170    /*Disable error interrupt mask control*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1171    HwModulePtr->ERRIRQSM.U = (uint32)0U;
	st.w	[a4]96,d0
.L1012:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1172    /*Clear error interrupt source*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1173    HwModulePtr->ERRIRQSC.U = I2C_CLEAR_INTERRUPT;
	mov	d15,#15
.L1013:
	st.w	[a4]104,d15
.L1014:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1174  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1175  }
	ret
.L416:
	
__I2c_lHwClearAllInterrupts_function_end:
	.size	I2c_lHwClearAllInterrupts,__I2c_lHwClearAllInterrupts_function_end-I2c_lHwClearAllInterrupts
.L240:
	; End of function
	
	.sdecl	'.text.I2c_lHwUpdateModuleReg.Code.Cpu0',code,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.text.I2c_lHwUpdateModuleReg.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1176  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1177  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1178  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1179  ** Syntax          : void I2c_lHwUpdateModuleReg                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1180  **                        (                                                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1181  **                        const uint8 HwUnit                                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1182  **                        const I2c_ChannelConfigType *const ChannelConfigPtr **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1183  **                        )                                                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1184  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1185  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1186  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1187  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1188  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1189  ** Reentrancy      : Non Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1190  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1191  ** Parameters (in) : HwUnit- Hw module id                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1192  **                   ChannelConfigPtr- Pointer to Channel Configuration       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1193  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1194  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1195  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1196  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1197  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1198  ** Description     : This function will update the peripheral registers       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1199  **                   to facilitate packer read/write operation                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1200  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1201  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1202  static void I2c_lHwUpdateModuleReg
; Function I2c_lHwUpdateModuleReg
.L136:
I2c_lHwUpdateModuleReg:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1203  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1204    const uint8 HwUnit,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1205    const I2c_ChannelConfigType *const ChannelConfigPtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1206  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1207  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1208    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1209  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1210    HwModulePtr = I2c_HwModuleAddr[HwUnit];
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L1031:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L550:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1211  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1212    /* Disable I2C Bus interface */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1213    HwModulePtr->RUNCTRL.B.RUN = I2C_DISABLE_INTERFACE;
	ld.bu	d15,[a15]16
.L1032:
	insert	d15,d15,#0,#0,#1
	st.b	[a15]16,d15
.L1033:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1214    /* Set Fractional Divider Value */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1215    HwModulePtr->FDIVCFG.U = ChannelConfigPtr->FracDividerCfgValue;
	ld.w	d15,[a4]6
.L1034:
	st.w	[a15]24,d15
.L1035:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1216    /* Set Fractional Divider Value for High speed mode */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1217    HwModulePtr->FDIVHIGHCFG.U = ChannelConfigPtr->FracDividerHighCfgValue;
	ld.w	d15,[a4]10
.L1036:
	st.w	[a15]28,d15
.L1037:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1218    /* Set Address Configuration Value */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1219    HwModulePtr->ADDRCFG.U = ChannelConfigPtr->AdddressCfgValue;
	ld.w	d15,[a4]2
.L1038:
	st.w	[a15]32,d15
.L1039:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1220    /* Set Timing Configuration Value */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1221    HwModulePtr->TIMCFG.U = ChannelConfigPtr->TimingCfgvalue;
	ld.w	d15,[a4]14
.L1040:
	st.w	[a15]64,d15
.L1041:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1222    /* Set FIFO Configuration Value */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1223    HwModulePtr->FIFOCFG.U = ChannelConfigPtr->FIFOCfgValue;
	ld.w	d15,[a4]18
.L1042:
	st.w	[a15]40,d15
.L1043:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1224    /* Set PORT Pin Configuration Value */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1225    I2C_SFR_INIT_DEINIT_WRITE32(&HwModulePtr->GPCTL.U,
	ld.bu	d15,[a4]22
	movh.a	a3,#1
	add.a	a3,a15
	st.w	[+a3]8,d15
.L1044:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1226                                   ChannelConfigPtr->PortPinCfgvalue);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1227  }
	ret
.L426:
	
__I2c_lHwUpdateModuleReg_function_end:
	.size	I2c_lHwUpdateModuleReg,__I2c_lHwUpdateModuleReg_function_end-I2c_lHwUpdateModuleReg
.L250:
	; End of function
	
	.sdecl	'.text.I2c_lHwEnableInterrupt.Code.Cpu0',code,cluster('I2c_lHwEnableInterrupt')
	.sect	'.text.I2c_lHwEnableInterrupt.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1228  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1229  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1230  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1231  ** Syntax          : void I2c_lHwEnableInterrupt(Ifx_I2C* const HwModulePtr)  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1232  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1233  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1234  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1235  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1236  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1237  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1238  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1239  ** Parameters (in) : HwModulePtr - HW unit index(ID)                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1240  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1241  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1242  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1243  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1244  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1245  ** Description     : Fucntion to clear all the interrupts during init         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1246  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1247  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1248  static void I2c_lHwEnableInterrupt
; Function I2c_lHwEnableInterrupt
.L138:
I2c_lHwEnableInterrupt:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1249  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1250    Ifx_I2C* const HwModulePtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1251  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1252  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1253    /* Enable module interrupt mask */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1254    HwModulePtr->IMSC.U = I2C_ENABLE_INTERRUPT_MASK;
	mov	d15,#63
.L987:
	st.w	[a4]132,d15
.L988:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1255    /* Enable protocol interrupt mask */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1256    HwModulePtr->PIRQSM.U = I2C_PROTOCOL_INTERRUPT_MASK;
	mov	d15,#127
.L989:
	st.w	[a4]112,d15
.L990:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1257  }
	ret
.L410:
	
__I2c_lHwEnableInterrupt_function_end:
	.size	I2c_lHwEnableInterrupt,__I2c_lHwEnableInterrupt_function_end-I2c_lHwEnableInterrupt
.L230:
	; End of function
	
	.sdecl	'.text.I2c_lSendMasterCode.Code.Cpu0',code,cluster('I2c_lSendMasterCode')
	.sect	'.text.I2c_lSendMasterCode.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1258  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1259  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1260  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1261  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1262  ** Syntax          : void I2c_lSendMasterCode(I2c_HWUnitType HwUnit)          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1263  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1264  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1265  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1266  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1267  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1268  ** Reentrancy      : Non Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1269  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1270  ** Parameters (in) : HwModulePtr - Pointer to to Hw module                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1271  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1272  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1273  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1274  ** Return value    :                                                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1275  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1276  ** Description     : This function returns the HW peripheral status           **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1277  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1278  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1279  static void I2c_lSendMasterCode
; Function I2c_lSendMasterCode
.L140:
I2c_lSendMasterCode:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1280  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1281    Ifx_I2C* const HwModulePtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1282  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1283  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1284    /* Set TPS for Master Code */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1285    HwModulePtr->TPSCTRL.U = I2C_PACKET_SIZE_7BIT_ADDR;
	mov	d15,#1
.L995:
	st.w	[a4]52,d15
.L996:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1286    /* Send the Master code */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1287    HwModulePtr->TXD.U = I2C_MASTER_CODE;
	mov	d15,#9
.L997:
	movh.a	a3,#1
	add.a	a3,a4
	st.w	[a3]-32768,d15
.L998:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1288    /* Clear the Burst request */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1289    HwModulePtr->ICR.U = I2C_CLEAR_INTERRUPT;
	mov	d15,#15
.L999:
	st.w	[a4]140,d15
.L1000:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1290    /* Clear NACK and TX_END */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1291    HwModulePtr->PIRQSC.U = I2C_PROTOCOL_INTERRUPT_MASK;
	mov	d15,#127
.L1001:
	st.w	[a4]120,d15
.L1002:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1292  }
	ret
.L413:
	
__I2c_lSendMasterCode_function_end:
	.size	I2c_lSendMasterCode,__I2c_lSendMasterCode_function_end-I2c_lSendMasterCode
.L235:
	; End of function
	
	.sdecl	'.text.I2c_lResetKernels.Code.Cpu0',code,cluster('I2c_lResetKernels')
	.sect	'.text.I2c_lResetKernels.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1293  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1294  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1295  ** Syntax          : static void I2c_lResetKernels(Ifx_I2C *const HwModulePtr)**
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1296  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1297  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1298  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1299  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1300  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1301  ** Reentrancy      : Non-Reentrant                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1302  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1303  ** Parameters (in) : HwModulePtr - Pointer to to Hw module                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1304  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1305  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1306  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1307  ** Return value    : void                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1308  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1309  ** Description     : This function resets SFR to default values by resetting  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1310  **                   kernel registers                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1311  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1312  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1313  static void I2c_lResetKernels
; Function I2c_lResetKernels
.L142:
I2c_lResetKernels:	.type	func
	mov.aa	a15,a4
.L552:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1314  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1315    Ifx_I2C * const HwModulePtr
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1316  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1317  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1318    uint32 RstStatus;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1319    uint32 WaitCount;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1320  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1321    I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&HwModulePtr->KRST0.U, 1U);
	movh.a	a3,#1
	add.a	a3,a15
	lea	a4,[a3]20
.L551:
	mov	d4,#1
	call	Mcal_WritePeripEndInitProtReg
.L1049:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1322    I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG\ 
	movh.a	a3,#1
	add.a	a3,a15
	lea	a4,[a3]24
	mov	d4,#1
	call	Mcal_WritePeripEndInitProtReg
.L1050:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1323                                       (&HwModulePtr->KRST1.U, I2C_KRST1_SFR_MSK);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1324    /* Wait for Timeout*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1325    WaitCount = (uint32)I2C_KERNEL_RESET_WAIT_COUNTS;
	mov	d15,#256

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1326    do
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1327    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1328      WaitCount--;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1329      /* MISRA2012_RULE_11_8_JUSTIFICATION: SFR access.No side effects foreseen
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1330         by violating this MISRA rule */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1331      /* MISRA2012_RULE_11_3_JUSTIFICATION: I2C base address access */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1332      RstStatus = (((uint32)(I2C_SFR_INIT_DEINIT_READ32(&HwModulePtr->KRST0.U))) & \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1333                ((uint32)IFX_I2C_KRST0_RSTSTAT_MSK << IFX_I2C_KRST0_RSTSTAT_OFF));
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1334      RstStatus = ((uint32)RstStatus >> IFX_I2C_KRST0_RSTSTAT_OFF);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1335    } while((RstStatus == 0U) && (WaitCount > 0U));
.L23:
	add	d15,#-1
.L1051:
	movh.a	a3,#1
	add.a	a3,a15
	ld.w	d0,[+a3]20
.L1052:
	jnz.t	d0:1,.L24
.L1053:
	jne	d15,#0,.L23
.L24:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1336  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1337    I2C_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG\ 
	movh.a	a3,#1
	add.a	a3,a15
	lea	a4,[a3]28
	mov	d4,#1
	j	Mcal_WritePeripEndInitProtReg
.L432:
	
__I2c_lResetKernels_function_end:
	.size	I2c_lResetKernels,__I2c_lResetKernels_function_end-I2c_lResetKernels
.L255:
	; End of function
	
	.sdecl	'.text.I2c_lWrite.Code.Cpu0',code,cluster('I2c_lWrite')
	.sect	'.text.I2c_lWrite.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1338                                   (&HwModulePtr->KRSTCLR.U, I2C_KRSTCLR_SFR_MSK);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1339  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1340  }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1341  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1342  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1343  **                            I2c local functions                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1344  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1345  #if (I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1346  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1347  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1348  ** Syntax          : void  I2c_ReadWriteDetCheck                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1349  **                  (                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1350  **                   const I2c_ChannelType ChannelId,                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1351  **                   const I2c_DataType *const DataPtr,                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1352  **                   const I2c_SizeType Size,                                 **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1353  **                   const I2c_SlaveAddrType SlaveAddress,                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1354  **                   const uint8 ServiceId                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1355  **                  )                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1356  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1357  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1358  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1359  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1360  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1361  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1362  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1363  ** Parameters (in) : ChannelId- Channel Id                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1364  **                   DataPtr- Pointer to data to be transmitted/recieved      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1365  **                   Size- Size of the data                                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1366  **                   SlaveAddress- Slave address                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1367  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1368  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1369  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1370  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1371  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1372  ** Description     : This function is check validity of input parameters      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1373  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1374  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1375  static I2c_ErrorType I2c_ReadWriteDetCheck
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1376  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1377   const I2c_ChannelType ChannelId,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1378   const I2c_DataType *const DataPtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1379   const I2c_SizeType Size,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1380   const I2c_SlaveAddrType SlaveAddress,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1381   const uint8 ServiceId
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1382  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1383  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1384    I2c_ErrorType ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1385  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1386    if (I2c_InitStatus == I2C_UNINITIALIZED)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1387      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1388  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1389        /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1390        (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1391                                                   ServiceId, I2C_E_UNINIT);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1392  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1393        ReturnValue = I2C_IS_UNINIT;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1394      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1395      else if (ChannelId >= I2C_MAX_CHANNELS)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1396      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1397        /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1398        (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1399                                           ServiceId, I2C_E_INVALID_CHANNEL);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1400  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1401        ReturnValue = I2C_INVALID_CHANNEL;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1402      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1403      else if(DataPtr == NULL_PTR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1404      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1405        /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1406        (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1407                                                  ServiceId, I2C_E_PARAM_POINTER);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1408        ReturnValue = I2C_NULL_PTR;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1409      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1410      else if((Size == 0U) || (Size > I2C_MAX_SUPPORTED_SIZE))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1411      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1412        /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1413        (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1414                              ServiceId, I2C_E_INVALID_SIZE);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1415        ReturnValue = I2C_INVALID_SIZE;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1416      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1417      else if((I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId].AddressingMode ==
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1418               I2C_7_BIT_ADDRESSING) && (SlaveAddress > I2C_7_BIT_MAX_SLAVE_ADD))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1419      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1420          /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1421          (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1422                                         ServiceId, I2C_E_INVALID_SLAVE_ADDRESS);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1423          ReturnValue = I2C_INVALID_ADDRESS;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1424      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1425      else if((I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId].AddressingMode ==
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1426              I2C_10_BIT_ADDRESSING) && (SlaveAddress > I2C_10_BIT_MAX_SLAVE_ADD))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1427      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1428          /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1429          (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1430                                ServiceId, I2C_E_INVALID_SLAVE_ADDRESS);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1431          ReturnValue = I2C_INVALID_ADDRESS;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1432      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1433      else if(I2c_ChannelInfo[ChannelId].HwState == I2C_BUSY)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1434      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1435        (void)Det_ReportError(I2C_MODULE_ID, I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1436                                                ServiceId, I2C_E_HW_UNIT_BUSY);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1437  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1438        ReturnValue = I2C_IS_BUSY;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1439  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1440      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1441      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1442      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1443          ReturnValue = I2C_NO_ERR;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1444      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1445    return ReturnValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1446  }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1447  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1448  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1449  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1450  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1451  ** Syntax          : void  I2c_lWrite                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1452  **                  (                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1453  **                   Ifx_I2C* const HwModulePtr,                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1454  **                   I2c_ChannelInfoType* const ChannelInfo                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1455  **                  )                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1456  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1457  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1458  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1459  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1460  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1461  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1462  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1463  ** Parameters (in) : HwModulePtr- Pointer to Hw module Register               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1464  **                   ChannelInfo- Pointer to Channelinfo structure            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1465  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1466  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1467  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1468  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1469  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1470  ** Description     : This function is called to transmit the data on the bus  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1471  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1472  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1473  static void  I2c_lWrite
; Function I2c_lWrite
.L144:
I2c_lWrite:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1474  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1475    Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1476    I2c_ChannelInfoType* const ChannelInfo
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1477  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1478  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1479    const I2c_DataType *DataPointer;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1480    uint32 TxData;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1481    uint32 TempTxData;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1482    uint16 DataLeft;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1483    uint16 TxdCnt;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1484    uint16 SlaveAddr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1485    uint8 UpperSlaveAddr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1486    uint8 Counter;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1487    uint8 FilledFIFOStage;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1488    uint8 FIFOCounter;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1489  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1490    DataLeft = ChannelInfo->DataLeft;
	ld.hu	d2,[a5]6
.L553:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1491    TxdCnt = ChannelInfo->TotalDataTxd;
	ld.hu	d3,[a5]8
.L554:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1492    /* calculate the file FIFO stage */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1493    /* the following calculation is for first transmission */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1494    if(TxdCnt == 0U)
	jne	d3,#0,.L25
.L1058:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1495    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1496      /* if data left is more than FIFO size, set filled FIFO stage to 8 */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1497      if(DataLeft >= I2C_FIFO_BYTES_FULL)
	mov	d15,#31
.L1059:
	jlt.u	d2,d15,.L26
.L1060:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1498      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1499        FilledFIFOStage = I2C_FIFO_STAGES_FULL;
	mov	d4,#8
.L556:
	j	.L27
.L25:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1500      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1501      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1502      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1503        /* if data left is less than FIFO size,set FilledFIFOStage to next stage*/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1504        FilledFIFOStage = (uint8)(DataLeft / I2C_FIFO_MAX_DATA_IN_EACH_STAGE);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1505        if((ChannelInfo->DataLeft & 3u) > 0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1506        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1507           FilledFIFOStage++;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1508        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1509      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1510    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1511    /* the following calcutaion is for consecutive transmissions */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1512    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1513    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1514      if((HwModulePtr->RIS.U & I2C_BURST_REQ_CHK) != 0U)
	ld.w	d15,[a4]128
.L1061:
	and	d15,#192
.L1062:
	jeq	d15,#0,.L28
.L1063:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1515      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1516        /* if data left is more than half FIFO size, set filled FIFO stage to 4 */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1517        if(DataLeft >= I2C_FIFO_BYTES_HALF_FULL)
	mov	d15,#16
.L1064:
	jlt.u	d2,d15,.L29
.L1065:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1518        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1519           FilledFIFOStage = I2C_FIFO_STAGES_HALF_FULL;
	mov	d4,#4
.L557:
	j	.L30
.L29:
.L26:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1520        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1521        else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1522        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1523           /* if data left is less than FIFO size, set the stage to next aligned stage */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1524           FilledFIFOStage =(uint8)(DataLeft / I2C_FIFO_MAX_DATA_IN_EACH_STAGE);
	sha	d4,d2,#-2
.L558:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1525  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1526           if((ChannelInfo->DataLeft & 3u) != 0U)
	mov	d15,d2
.L559:
	and	d15,#3
.L560:
	jeq	d15,#0,.L31
.L1066:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1527           {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1528             FilledFIFOStage++;
	add	d4,#1
.L1067:
	j	.L32
.L28:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1529           }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1530        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1531      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1532      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1533      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1534        FilledFIFOStage = I2C_FIFO_SINGLE_STAGE_FULL;
	mov	d4,#1
.L32:
.L31:
.L30:
.L27:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1535      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1536    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1537  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1538    /* Set FIFO counter and Data counter */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1539    FIFOCounter = 0U;
	mov	d5,#0
.L561:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1540    DataPointer = ChannelInfo->DataPtr;
	ld.a	a15,[a5]
.L563:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1541    /* Loop till FIFO is empty */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1542    while(FIFOCounter < FilledFIFOStage)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1543    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1544      TxData = 0U;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1545      if((FIFOCounter == 0U) && (TxdCnt == 0U))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1546      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1547         if(I2c_ConfigPtr->I2c_ChannelConfigPtr->AddressingMode ==
	movh.a	a2,#@his(I2c_ConfigPtr)
.L1068:
	j	.L33
.L34:
	mov	d0,#0
.L564:
	jne	d5,#0,.L35
.L1069:
	jne	d3,#0,.L36
.L1070:
	ld.a	a6,[a2]@los(I2c_ConfigPtr)
.L1071:
	ld.a	a6,[a6]
.L1072:
	ld.bu	d15,[a6]28
.L1073:
	jne	d15,#0,.L37
.L1074:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1548                                                            I2C_7_BIT_ADDRESSING)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1549         {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1550           SlaveAddr = (ChannelInfo->SlaveAddr << I2C_SHIFT_ONE_BIT) | \ 
	ld.hu	d0,[a5]12
.L565:
	sha	d0,#1
.L1075:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1551                                             I2C_WRITE_OPERATION;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1552           TxData = (uint8)SlaveAddr;
	extr.u	d0,d0,#0,#8
.L566:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1553           Counter = 1;
	mov	d1,#1
.L568:
	j	.L40
.L37:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1554         }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1555         else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1556         {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1557           /* Calculate Upper address byte */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1558           SlaveAddr = ChannelInfo->SlaveAddr;
	ld.hu	d0,[a5]12
.L567:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1559           UpperSlaveAddr = ((I2C_10_BIT_ADDRESS_PREAMBLE) |
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1560                ((uint8)(SlaveAddr >> I2C_SHIFT_EIGHT_BIT) << I2C_SHIFT_ONE_BIT) |
	sha	d1,d0,#-8
.L1076:
	sha	d1,#1
	extr.u	d15,d1,#0,#8
	or	d1,d15,#240
.L570:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1561                                                             I2C_WRITE_OPERATION);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1562  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1563           /* MISRA2012_RULE_10_8_JUSTIFICATION: Cast is being performed to assign
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1564            *it to variable, which will eventually read it into HW register. So
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1565            *interfacing with the HW is needed. Also, final value being assigned
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1566            *is found to be appropriately working.So, no side effects foreseen by
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1567            *violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1568           /* Address frame containing 2 bytes */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1569           TxData = (((uint32)(SlaveAddr & I2C_EIGHT_BIT_MASK) <<
	and	d15,d0,#255
.L1077:
	sh	d0,d15,#8
.L569:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1570                                  I2C_SHIFT_EIGHT_BIT) | (uint32)UpperSlaveAddr);
	or	d0,d1
.L1078:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1571           Counter = 2;
	mov	d1,#2
.L571:
	j	.L40
.L36:
.L35:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1572         }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1573      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1574      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1575      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1576        Counter = 0U;
	mov	d1,#0
.L572:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1577      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1578  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1579      while((Counter < I2C_FIFO_MAX_DATA_IN_EACH_STAGE) && (DataLeft > 0U))
	j	.L40
.L41:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1580      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1581         TempTxData = DataPointer[TxdCnt];
	addsc.a	a6,a15,d3,#0
	ld.bu	d15,[a6]
.L573:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1582         TxData |= ( TempTxData << (Counter * I2C_SHIFT_EIGHT_BIT));
	sha	d6,d1,#3
.L1079:
	sh	d15,d15,d6
.L574:
	or	d0,d15
.L1080:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1583         TxdCnt++;
	add	d3,#1
.L555:
	extr.u	d3,d3,#0,#16
.L575:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1584         DataLeft--;
	add	d2,#-1
.L1081:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1585         Counter++;
	add	d1,#1
.L40:
	jge.u	d1,#4,.L42
.L1082:
	jne	d2,#0,.L41
.L42:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1586      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1587  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1588       FIFOCounter++;
	add	d5,#1
.L562:
	extr.u	d5,d5,#0,#8
.L576:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1589       HwModulePtr->TXD.U =  TxData;
	movh.a	a3,#1
	add.a	a3,a4
	st.w	[a3]-32768,d0
.L33:
	jlt.u	d5,d4,.L34
.L1083:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1590    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1591  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1592    ChannelInfo->DataLeft = DataLeft;
	st.h	[a5]6,d2
.L1084:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1593    ChannelInfo->TotalDataTxd = TxdCnt;
	st.h	[a5]8,d3
.L1085:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1594  }
	ret
.L437:
	
__I2c_lWrite_function_end:
	.size	I2c_lWrite,__I2c_lWrite_function_end-I2c_lWrite
.L260:
	; End of function
	
	.sdecl	'.text.I2c_lSyncTransmit.Code.Cpu0',code,cluster('I2c_lSyncTransmit')
	.sect	'.text.I2c_lSyncTransmit.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1595  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1596  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1597  ** Syntax          : void  I2c_lSyncTransmit                                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1598  **                  (                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1599  **                   Ifx_I2C* const HwModulePtr,                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1600  **                   I2c_ChannelInfoType* const ChannelInfo,                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1601  **                   const I2c_ChannelConfigType *const ChannelConfigPtr      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1602  **                  )                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1603  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1604  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1605  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1606  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1607  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1608  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1609  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1610  ** Parameters (in) : HwModulePtr- Pointer to Hw module Register               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1611  **                   ChannelInfo- Pointer to Channelinfo structure            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1612  **                   ChannelConfigPtr- Pointer to ChannelConfig Structure     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1613  **                   ChannelId- Timeout counter value                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1614  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1615  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1616  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1617  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1618  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1619  ** Description     : This function is called to transmit synchronously        **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1620  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1621  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1622  static I2c_ErrorType I2c_lSyncTransmit
; Function I2c_lSyncTransmit
.L146:
I2c_lSyncTransmit:	.type	func
	mov.aa	a12,a4
.L577:
	mov.aa	a13,a5
.L578:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1623  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1624    Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1625    I2c_ChannelInfoType * const ChannelInfo,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1626    const I2c_ChannelType ChannelId
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1627  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1628  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1629    I2c_ErrorType ErrorId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1630    I2c_TxTransferStateType TransmitPending;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1631    uint32 ERRIRQSS_Val;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1632    uint32 PIRQSS_Val;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1633    uint32 TimeOutValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1634  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1635    TimeOutValue = I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId].TxTimeOutCount;
	mul	d15,d4,#44
.L915:
	movh.a	a2,#@his(I2c_ConfigPtr)
	ld.a	a2,[a2]@los(I2c_ConfigPtr)
.L916:
	ld.a	a15,[a2]
.L917:
	addsc.a	a15,a15,d15,#0
.L918:
	ld.w	d8,[a15]36
.L579:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1636    TransmitPending = I2C_TX_IN_PROGRESS;
	mov	d9,#0
.L580:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1637    ErrorId = I2C_NO_ERR;
	mov	d10,d9
.L581:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1638  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1639    while((TransmitPending == I2C_TX_IN_PROGRESS) && (TimeOutValue > 0U))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1640    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1641      /* Check for any transmission error */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1642      ERRIRQSS_Val = HwModulePtr->ERRIRQSS.U & I2C_ERROR_INTERRUPT_MASK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1643      PIRQSS_Val = HwModulePtr->PIRQSS.U & I2C_PROTOCOL_INTERRUPT_MASK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1644      /* If any Burst inettrupt is pending continue transmission */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1645      if((HwModulePtr->RIS.U & I2C_RAW_INTERRUPT_MASK) != 0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1646      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1647        I2c_lWrite(HwModulePtr,ChannelInfo);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1648        HwModulePtr->ICR.U = I2C_CLEAR_INTERRUPT;
	mov	d11,#15
.L919:
	j	.L43
.L44:
	ld.w	d15,[a12]100
.L920:
	and	d0,d15,#15
.L582:
	ld.w	d15,[a12]116
.L921:
	and	d1,d15,#127
.L584:
	ld.w	d15,[a12]128
.L922:
	and	d15,#15
.L923:
	jeq	d15,#0,.L45
.L924:
	mov.aa	a4,a12
.L585:
	mov.aa	a5,a13
.L586:
	call	I2c_lWrite
.L583:
	st.w	[a12]140,d11
.L925:
	j	.L46
.L45:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1649      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1650      /* Get the error id if any error has occured */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1651      else if((ERRIRQSS_Val != 0U) || (PIRQSS_Val != 0U))
	jne	d0,#0,.L47
.L926:
	jeq	d1,#0,.L48
.L47:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1652      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1653          ChannelInfo->HwState = I2C_IDLE;
	mov	d10,#1
.L927:
	st.b	[a13]4,d10
.L928:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1654  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1655          if(HwModulePtr->ERRIRQSS.B.TXF_UFL == I2C_FLAG_SET)
	ld.bu	d15,[a12]100
.L929:
	jnz.t	d15:2,.L50
.L930:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1656          {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1657            ErrorId = I2C_TX_UNDERFLOW;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1658          }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1659          else if(HwModulePtr->ERRIRQSS.B.TXF_OFL == I2C_FLAG_SET)
	ld.bu	d15,[a12]100
.L931:
	jz.t	d15:3,.L51
.L932:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1660          {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1661            ErrorId = I2C_TX_OVERFLOW;
	mov	d10,#2
.L933:
	j	.L52
.L51:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1662          }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1663          else if(HwModulePtr->PIRQSS.B.NACK == I2C_FLAG_SET)
	ld.bu	d15,[a12]116
.L934:
	jz.t	d15:4,.L53
.L935:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1664          {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1665            ErrorId = I2C_NO_ACK;
	mov	d10,#5
.L936:
	j	.L54
.L53:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1666          }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1667          else if(HwModulePtr->PIRQSS.B.AL == I2C_FLAG_SET)
	ld.bu	d15,[a12]116
.L937:
	jz.t	d15:3,.L55
.L938:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1668          {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1669            ErrorId = I2C_ARBITRATION_LOST;
	mov	d10,#6
.L939:
	j	.L56
.L55:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1670          }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1671          else if(HwModulePtr->PIRQSS.B.TX_END == I2C_FLAG_SET)
	ld.bu	d15,[a12]116
.L940:
	jz.t	d15:5,.L57
.L941:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1672          {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1673            ErrorId = I2C_NO_ERR;
	mov	d10,#0
.L942:
	j	.L58
.L57:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1674          }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1675          else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1676          {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1677            ErrorId = I2C_ERR_OTHER;
	mov	d10,#13
.L58:
.L56:
.L54:
.L52:
.L50:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1678          }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1679  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1680          TransmitPending = I2C_TX_COMPLETED;
	mov	d9,#1
.L943:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1681          I2c_lHwClearAllInterrupts(HwModulePtr);
	mov.aa	a4,a12
.L587:
	call	I2c_lHwClearAllInterrupts
.L48:
.L46:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1682      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1683      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1684      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1685        /* Do nothing */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1686      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1687    TimeOutValue--;
	add	d8,#-1
.L43:
	jne	d9,#0,.L59
.L944:
	jne	d8,#0,.L44
.L59:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1688    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1689    HwModulePtr->RUNCTRL.B.RUN = I2C_DISABLE_INTERFACE;
	ld.bu	d15,[a12]16
.L945:
	insert	d15,d15,#0,#0,#1
	st.b	[a12]16,d15
.L946:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1690    return ErrorId;
	mov	d2,d10
.L588:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1691  }
	ret
.L383:
	
__I2c_lSyncTransmit_function_end:
	.size	I2c_lSyncTransmit,__I2c_lSyncTransmit_function_end-I2c_lSyncTransmit
.L220:
	; End of function
	
	.sdecl	'.text.I2c_lRead.Code.Cpu0',code,cluster('I2c_lRead')
	.sect	'.text.I2c_lRead.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1692  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1693  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1694  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1695  ** Syntax          : void  I2c_lRead                                          **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1696  **                  (                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1697  **                   Ifx_I2C* const HwModulePtr,                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1698  **                   I2c_ChannelInfoType* const ChannelInfo                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1699  **                  )                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1700  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1701  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1702  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1703  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1704  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1705  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1706  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1707  ** Parameters (in) : HwModulePtr- Pointer to Hw module Register               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1708  **                   ChannelInfo- Pointer to Channelinfo structure            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1709  **                   ChannelConfigPtr- Pointer to ChannelConfig Structure     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1710  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1711  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1712  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1713  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1714  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1715  ** Description     : This function is called to Receive the data on the bus   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1716  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1717  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1718  static void I2c_lRead
; Function I2c_lRead
.L148:
I2c_lRead:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1719  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1720    Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1721    I2c_ChannelInfoType* const ChannelInfo
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1722  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1723  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1724    I2c_DataType *DataPointer;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1725    uint32 RxData;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1726    uint32 TxData;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1727    uint16 SlaveAddr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1728    uint16 DataLeft;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1729    uint16 RxdCnt;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1730    uint8 UpperSlaveAddr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1731    uint8 LoopCount;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1732    uint8 Counter;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1733    uint8 FilledFIFOStage;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1734  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1735  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1736    DataLeft = ChannelInfo->DataLeft;
	ld.hu	d0,[a5]6
.L589:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1737    RxdCnt = ChannelInfo->TotalDataTxd;
	ld.hu	d1,[a5]8
.L591:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1738  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1739    if(ChannelInfo->RxTransferState == I2C_RX_INITIATED)
	ld.bu	d15,[a5]14
.L1090:
	jne	d15,#1,.L61
.L1091:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1740    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1741      ChannelInfo->RxTransferState  = I2C_RX_COMMAND_SENT;
	mov	d15,#2
.L1092:
	st.b	[a5]14,d15
.L1093:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1742      /*  Send read command */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1743      SlaveAddr = ChannelInfo->SlaveAddr;
	ld.hu	d0,[a5]12
.L590:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1744      if(I2c_ConfigPtr->I2c_ChannelConfigPtr->AddressingMode ==
	movh.a	a15,#@his(I2c_ConfigPtr)
	ld.a	a15,[a15]@los(I2c_ConfigPtr)
.L1094:
	ld.a	a15,[a15]
.L1095:
	ld.bu	d15,[a15]28
.L1096:
	jne	d15,#0,.L62
.L1097:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1745                                                             I2C_7_BIT_ADDRESSING)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1746      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1747        TxData = (((uint32)SlaveAddr << (uint32)I2C_SHIFT_ONE_BIT) | \ 
	sh	d0,#1
.L593:
	or	d15,d0,#1
.L594:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1748                           (uint32)I2C_READ_OPERATION);
	j	.L63
.L62:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1749        HwModulePtr->TXD.U = TxData;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1750      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1751      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1752      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1753        /* Calculate the upper slave byte */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1754          UpperSlaveAddr = ((I2C_10_BIT_ADDRESS_PREAMBLE) |
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1755              ((uint8)(SlaveAddr >> I2C_SHIFT_EIGHT_BIT) << I2C_SHIFT_ONE_BIT) |
	sha	d15,d0,#-8
.L1098:
	sha	d15,#1
	extr.u	d15,d15,#0,#8
	or	d1,d15,#240
.L592:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1756                                                           I2C_WRITE_OPERATION);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1757  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1758           /* MISRA2012_RULE_10_8_JUSTIFICATION: Cast is being performed to assign
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1759            *it to variable, which will eventually read it into HW register. So
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1760            *interfacing with the HW is needed.Also,the final value being assigned
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1761            *is found to be appropriately working.So, no side effects foreseen by
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1762            *violating this MISRA rule. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1763          /* Address frame containing 2 bytes of 10 bit address */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1764          TxData = (((uint32)(SlaveAddr & I2C_EIGHT_BIT_MASK) <<
	and	d15,d0,#255
.L1099:
	sh	d15,d15,#8
.L595:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1765                                  I2C_SHIFT_EIGHT_BIT) | (uint32)UpperSlaveAddr);
	or	d15,d1
.L1100:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1766          HwModulePtr->TXD.U = TxData;
	movh.a	a3,#1
	add.a	a3,a4
	st.w	[a3]-32768,d15
.L1101:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1767          /* Set the repeated start condition */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1768          HwModulePtr->ENDDCTRL.B.SETRSC = 1U;
	ld.bu	d15,[a4]20
.L596:
	or	d15,#1
	st.b	[a4]20,d15
.L1102:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1769          /* Send the 10 bit preamble with Read command */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1770          HwModulePtr->TPSCTRL.U = 1U;
	mov	d15,#1
.L1103:
	st.w	[a4]52,d15
.L1104:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1771          HwModulePtr->TXD.U = ((uint32)UpperSlaveAddr |
	or	d15,d1,#1
.L63:
	movh.a	a3,#1
	add.a	a3,a4
	st.w	[a3]-32768,d15
.L1105:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1772                                (uint32)I2C_READ_OPERATION);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1773      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1774      HwModulePtr->MRPSCTRL.U = ChannelInfo->DataLeft;
	ld.hu	d15,[a5]6
.L1106:
	st.w	[a4]44,d15
.L1107:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1775    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1776    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1777    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1778      ChannelInfo->RxTransferState = I2C_RX_IN_PROGRESS;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1779      FilledFIFOStage = HwModulePtr->FFSSTAT.B.FFS;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1780      DataPointer = ChannelInfo->DataPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1781  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1782      /* Receive Data from FIFO */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1783      for (LoopCount = 0U; LoopCount < FilledFIFOStage; LoopCount++)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1784      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1785        RxData = HwModulePtr->RXD.U;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1786        /* Fill application buffer */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1787        for(
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1788            Counter = 0U;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1789            (Counter < I2C_FIFO_MAX_DATA_IN_EACH_STAGE) && (DataLeft > 0u);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1790            Counter++)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1791        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1792          DataPointer[RxdCnt] =(uint8)(RxData >>(Counter * I2C_SHIFT_EIGHT_BIT));
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1793          RxdCnt++;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1794          DataLeft--;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1795        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1796  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1797  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1798  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1799        ChannelInfo->DataLeft = DataLeft;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1800        ChannelInfo->TotalDataTxd = RxdCnt;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1801      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1802    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1803  }
	ret
.L61:
	mov	d15,#3
.L1108:
	st.b	[a5]14,d15
.L1109:
	ld.bu	d15,[a4]56
.L598:
	and	d15,#63
.L1110:
	ld.a	a15,[a5]
.L599:
	mov	d2,#0
.L600:
	j	.L65
.L66:
	movh.a	a3,#1
	add.a	a3,a4
	ld.w	d3,[a3]-16384
.L602:
	mov	d4,#0
.L603:
	j	.L67
.L68:
	addsc.a	a2,a15,d1,#0
.L1111:
	sha	d5,d4,#3
.L1112:
	rsub	d5,#0
	sh	d5,d3,d5
.L1113:
	st.b	[a2],d5
.L1114:
	add	d1,#1
.L597:
	extr.u	d1,d1,#0,#16
.L604:
	add	d0,#-1
.L1115:
	add	d4,#1
.L67:
	jge.u	d4,#4,.L69
.L1116:
	jne	d0,#0,.L68
.L69:
	st.h	[a5]6,d0
.L1117:
	st.h	[a5]8,d1
.L1118:
	add	d2,#1
.L601:
	extr.u	d2,d2,#0,#8
.L65:
	jlt.u	d2,d15,.L66
.L1119:
	ret
.L453:
	
__I2c_lRead_function_end:
	.size	I2c_lRead,__I2c_lRead_function_end-I2c_lRead
.L265:
	; End of function
	
	.sdecl	'.text.I2c_lSyncReceive.Code.Cpu0',code,cluster('I2c_lSyncReceive')
	.sect	'.text.I2c_lSyncReceive.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1804  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1805  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1806  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1807  ** Syntax          : static void  I2c_lSyncReceive                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1808  **                  (                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1809  **                   Ifx_I2C* const HwModulePtr,                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1810  **                   I2c_ChannelInfoType* const ChannelInfo,                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1811  **                   const I2c_ChannelConfigType *const ChannelConfigPtr      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1812  **                  )                                                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1813  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1814  ** Service ID      : N.A                                                      **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1815  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1816  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1817  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1818  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1819  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1820  ** Parameters (in) : HwModulePtr- Pointer to Hw module Register               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1821  **                   ChannelInfo- Pointer to Channelinfo structure            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1822  **                   ChannelConfigPtr- Pointer to ChannelConfig Structure     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1823  **                   ChannelId- Timeout counter value                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1824  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1825  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1826  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1827  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1828  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1829  ** Description     : This function is called to Receive synchronously         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1830  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1831  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1832  static I2c_ErrorType I2c_lSyncReceive
; Function I2c_lSyncReceive
.L150:
I2c_lSyncReceive:	.type	func
	mov.aa	a12,a4
.L605:
	mov.aa	a15,a5
.L606:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1833  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1834    Ifx_I2C* const HwModulePtr,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1835    I2c_ChannelInfoType * const ChannelInfo,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1836    const I2c_ChannelType ChannelId
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1837  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1838  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1839    I2c_ErrorType ErrorId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1840    I2c_RxTransferStateType ReceivePending;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1841    uint32 ERRIRQSS_Val;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1842    uint32 PIRQSS_Val;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1843    uint32 TimeOutValue;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1844  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1845    TimeOutValue = I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId].RxTimeOutCount;
	mul	d15,d4,#44
.L951:
	movh.a	a2,#@his(I2c_ConfigPtr)
	ld.a	a2,[a2]@los(I2c_ConfigPtr)
.L952:
	ld.a	a2,[a2]
.L953:
	addsc.a	a2,a2,d15,#0
.L954:
	ld.w	d8,[a2]40
.L607:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1846    ReceivePending = I2C_RX_IN_PROGRESS;
	mov	d9,#3
.L608:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1847    ErrorId = I2C_NO_ERR;
	mov	d10,#0
.L609:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1848  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1849    while((ReceivePending == I2C_RX_IN_PROGRESS) && (TimeOutValue > 0U))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1850    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1851      /* Get the error values if any */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1852      ERRIRQSS_Val = HwModulePtr->ERRIRQSS.U & I2C_ERROR_INTERRUPT_MASK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1853      PIRQSS_Val = HwModulePtr->PIRQSS.U & I2C_PIRQSS_MASK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1854      if((ERRIRQSS_Val != 0U) || (PIRQSS_Val != 0U))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1855      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1856  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1857        if(HwModulePtr->ERRIRQSS.B.RXF_UFL == I2C_FLAG_SET)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1858        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1859           ErrorId = I2C_RX_UNDERFLOW;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1860        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1861        else if(HwModulePtr->ERRIRQSS.B.RXF_OFL == I2C_FLAG_SET)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1862        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1863          ErrorId = I2C_RX_OVERFLOW;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1864        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1865        else if(HwModulePtr->PIRQSS.B.NACK == I2C_FLAG_SET)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1866        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1867          ErrorId = I2C_NO_ACK;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1868        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1869        else if(HwModulePtr->PIRQSS.B.AL == I2C_FLAG_SET)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1870        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1871          ErrorId = I2C_ARBITRATION_LOST;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1872        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1873        else if(HwModulePtr->PIRQSS.B.TX_END == I2C_FLAG_SET)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1874        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1875          ErrorId = I2C_NO_ERR;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1876        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1877        else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1878        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1879        ErrorId = I2C_ERR_OTHER;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1880        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1881        I2c_lHwClearAllInterrupts(HwModulePtr);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1882        if((ChannelInfo->RxTransferState == I2C_RX_COMMAND_SENT) && \ 
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1883             (ErrorId != I2C_NO_ERR))
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1884        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1885           ChannelInfo->RxTransferState = I2C_RX_IN_PROGRESS;
	mov	d11,d9
.L610:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1886        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1887        else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1888        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1889          ReceivePending = I2C_RX_COMPLETED;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1890          ChannelInfo->HwState = I2C_IDLE;
	mov	d12,#1
.L955:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1891        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1892      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1893      /* If any burst interrupt is pending, continue recieving */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1894      else if((HwModulePtr->RIS.U & I2C_RAW_INTERRUPT_MASK) != 0U)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1895      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1896        I2c_lRead(HwModulePtr,ChannelInfo);
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1897        HwModulePtr->ICR.U = I2C_CLEAR_INTERRUPT;
	mov	d13,#15
.L956:
	j	.L70
.L71:
	ld.w	d15,[a12]100
.L957:
	and	d0,d15,#15
.L611:
	ld.w	d15,[a12]116
.L613:
	and	d15,#63
.L958:
	jne	d0,#0,.L72
.L959:
	jeq	d15,#0,.L73
.L72:
	ld.bu	d15,[a12]100
.L614:
	jz.t	d15:0,.L74
.L960:
	mov	d10,#3
.L961:
	j	.L75
.L74:
	ld.bu	d15,[a12]100
.L962:
	jz.t	d15:1,.L76
.L963:
	mov	d10,#4
.L964:
	j	.L77
.L76:
	ld.bu	d15,[a12]116
.L965:
	jz.t	d15:4,.L78
.L966:
	mov	d10,#5
.L967:
	j	.L79
.L78:
	ld.bu	d15,[a12]116
.L968:
	jz.t	d15:3,.L80
.L969:
	mov	d10,#6
.L970:
	j	.L81
.L80:
	ld.bu	d15,[a12]116
.L971:
	jz.t	d15:5,.L82
.L972:
	mov	d10,#0
.L973:
	j	.L83
.L82:
	mov	d10,#13
.L83:
.L81:
.L79:
.L77:
.L75:
	mov.aa	a4,a12
.L615:
	call	I2c_lHwClearAllInterrupts
.L612:
	ld.bu	d15,[a15]14
.L974:
	jne	d15,#2,.L84
.L975:
	jeq	d10,#0,.L85
.L616:
	st.b	[a15]14,d11
.L617:
	j	.L86
.L85:
.L84:
	mov	d9,#4
.L976:
	st.b	[a15]4,d12
.L977:
	j	.L87
.L73:
	ld.w	d15,[a12]128
.L619:
	and	d15,#15
.L978:
	jeq	d15,#0,.L88
.L979:
	mov.aa	a4,a12
.L620:
	mov.aa	a5,a15
.L621:
	call	I2c_lRead
.L618:
	st.w	[a12]140,d13
.L88:
.L87:
.L86:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1898      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1899      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1900      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1901        /* Do nothing */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1902      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1903      TimeOutValue--;
	add	d8,#-1
.L70:
	jne	d9,#3,.L89
.L980:
	jne	d8,#0,.L71
.L89:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1904    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1905    HwModulePtr->RUNCTRL.B.RUN = I2C_DISABLE_INTERFACE;
	ld.bu	d15,[a12]16
.L981:
	insert	d15,d15,#0,#0,#1
	st.b	[a12]16,d15
.L982:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1906    return ErrorId;
	mov	d2,d10
.L622:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1907  }
	ret
.L397:
	
__I2c_lSyncReceive_function_end:
	.size	I2c_lSyncReceive,__I2c_lSyncReceive_function_end-I2c_lSyncReceive
.L225:
	; End of function
	
	.sdecl	'.text.I2c_IsrI2cDtr.Code.Cpu0',code,cluster('I2c_IsrI2cDtr')
	.sect	'.text.I2c_IsrI2cDtr.Code.Cpu0'
	.align	2
	
	.global	I2c_IsrI2cDtr

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1908  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1909  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1910  **                                 I2c ISRs                                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1911  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1912  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1913  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1914  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1915  ** Syntax          : void I2c_IsrI2cDtr(const uint8 HwUnit)                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1916  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1917  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1918  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1919  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1920  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1921  ** Reentrancy      : Reentrant(for different channel)                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1922  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1923  ** Parameters (in) : HwUnit - HW unit index(ID)                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1924  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1925  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1926  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1927  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1928  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1929  ** Description     : ISR fucntion to take care of Data interrupts             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1930  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1931  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1932  void I2c_IsrI2cDtr
; Function I2c_IsrI2cDtr
.L152:
I2c_IsrI2cDtr:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1933  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1934    const uint8 HwUnit
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1935  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1936  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1937    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1938    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1939    uint8 ChannelId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1940    HwModulePtr = I2c_HwModuleAddr[HwUnit];
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L837:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L624:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1941    ChannelId = I2c_ChannelMap[HwUnit];
	movh.a	a2,#@his(I2c_ChannelMap)
	lea	a2,[a2]@los(I2c_ChannelMap)
.L838:
	addsc.a	a2,a2,d4,#0
	ld.bu	d15,[a2]
.L625:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1942    ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,#4
.L626:
	movh.a	a2,#@his(I2c_ChannelInfo)
	lea	a2,[a2]@los(I2c_ChannelInfo)
.L839:
	addsc.a	a5,a2,d15,#0
.L627:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1943  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1944    if(ChannelInfo->I2c_Operation == I2C_WRITE)
	ld.bu	d15,[a5]10
.L840:
	jne	d15,#1,.L91
.L841:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1945    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1946      if(ChannelInfo->DataLeft > 0U)
	ld.hu	d15,[a5]6
.L842:
	jeq	d15,#0,.L92
.L843:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1947      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1948         I2c_lWrite(HwModulePtr, ChannelInfo);
	mov.aa	a4,a15
.L628:
	call	I2c_lWrite
.L623:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1949      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1950      HwModulePtr->ICR.U = I2C_CLEAR_INTERRUPT;
	j	.L93
.L91:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1951    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1952    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1953    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1954      I2c_lRead(HwModulePtr, ChannelInfo);
	mov.aa	a4,a15
.L629:
	call	I2c_lRead
.L93:
.L92:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1955      HwModulePtr->ICR.U = I2C_CLEAR_INTERRUPT;
	mov	d15,#15
.L844:
	st.w	[a15]140,d15
.L845:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1956    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1957  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1958  }
	ret
.L361:
	
__I2c_IsrI2cDtr_function_end:
	.size	I2c_IsrI2cDtr,__I2c_IsrI2cDtr_function_end-I2c_IsrI2cDtr
.L205:
	; End of function
	
	.sdecl	'.text.I2c_IsrI2cProtocol.Code.Cpu0',code,cluster('I2c_IsrI2cProtocol')
	.sect	'.text.I2c_IsrI2cProtocol.Code.Cpu0'
	.align	2
	
	.global	I2c_IsrI2cProtocol

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1959  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1960  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1961  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1962  ** Syntax          : void I2c_IsrI2cProtocol(const uint8 HwUnit)              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1963  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1964  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1965  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1966  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1967  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1968  ** Reentrancy      : Reentrant(for different channel)                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1969  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1970  ** Parameters (in) : HwUnit - HW unit index(ID)                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1971  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1972  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1973  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1974  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1975  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1976  ** Description     : ISR fucntion to take care of Protocol interrupts         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1977  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1978  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1979  void I2c_IsrI2cProtocol
; Function I2c_IsrI2cProtocol
.L154:
I2c_IsrI2cProtocol:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1980  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1981    const uint8 HwUnit
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1982  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1983  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1984    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1985    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1986    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1987    I2c_ErrorType ErrorId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1988    uint8 ChannelId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1989  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1990    ChannelId = I2c_ChannelMap[HwUnit];
	movh.a	a15,#@his(I2c_ChannelMap)
	lea	a15,[a15]@los(I2c_ChannelMap)
.L850:
	addsc.a	a15,a15,d4,#0
	ld.bu	d0,[a15]
.L631:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1991    HwModulePtr = I2c_HwModuleAddr[HwUnit];
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L851:
	addsc.a	a15,a15,d4,#2
	ld.a	a2,[a15]
.L632:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1992    ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,d0,#4
.L852:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L853:
	addsc.a	a4,a15,d15,#0
.L633:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1993    ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d0,#44
.L854:
	movh.a	a15,#@his(I2c_ConfigPtr)
	ld.a	a15,[a15]@los(I2c_ConfigPtr)
.L855:
	ld.a	a15,[a15]
.L856:
	addsc.a	a15,a15,d15,#0
.L634:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1994  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1995    if((HwModulePtr->PIRQSS.U & I2C_PROTOCOL_INTERRUPT_MASK) != 0U)
	ld.w	d15,[a2]116
.L857:
	and	d15,#127
.L858:
	jeq	d15,#0,.L94
.L859:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1996    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1997      if(ChannelInfo->RxTransferState != I2C_RX_COMMAND_SENT)
	ld.bu	d15,[a4]14
.L860:
	jeq	d15,#2,.L95
.L861:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1998      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  1999        if(HwModulePtr->PIRQSS.B.NACK == I2C_FLAG_SET)
	ld.bu	d15,[a2]116
.L862:
	jz.t	d15:4,.L96
.L863:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2000        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2001          ErrorId = I2C_NO_ACK;
	mov	d4,#5
.L630:
	j	.L97
.L96:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2002        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2003        else if(HwModulePtr->PIRQSS.B.AL == I2C_FLAG_SET)
	ld.bu	d15,[a2]116
.L864:
	jz.t	d15:3,.L98
.L865:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2004        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2005          ErrorId = I2C_ARBITRATION_LOST;
	mov	d4,#6
.L636:
	j	.L99
.L98:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2006        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2007        else if(HwModulePtr->PIRQSS.B.TX_END == I2C_FLAG_SET)
	ld.bu	d15,[a2]116
.L866:
	jnz.t	d15:5,.L100
.L867:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2008        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2009          ErrorId = I2C_NO_ERR;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2010        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2011        else if(HwModulePtr->PIRQSS.B.RX == I2C_FLAG_SET)
	ld.bu	d15,[a2]116
.L868:
	jz.t	d15:6,.L101
.L100:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2012        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2013          ErrorId = I2C_NO_ERR;
	mov	d4,#0
.L637:
	j	.L102
.L101:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2014        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2015        else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2016        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2017          ErrorId = I2C_ERR_OTHER;
	mov	d4,#13
.L102:
.L99:
.L97:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2018        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2019        /* Set channel state idle */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2020        ChannelInfo->HwState = I2C_IDLE;
	mov	d15,#1
.L869:
	st.b	[a4]4,d15
.L870:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2021        HwModulePtr->PIRQSC.U = I2C_PROTOCOL_INTERRUPT_MASK;
	mov	d15,#127
.L871:
	st.w	[a2]120,d15
.L872:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2022        HwModulePtr->ERRIRQSC.U = I2C_CLEAR_INTERRUPT;
	mov	d15,#15
.L873:
	st.w	[a2]104,d15
.L874:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2023  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2024        /* Set the RUN state to 0 */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2025        HwModulePtr->RUNCTRL.B.RUN = I2C_DISABLE_INTERFACE;
	ld.bu	d15,[a2]16
.L875:
	insert	d15,d15,#0,#0,#1
	st.b	[a2]16,d15
.L876:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2026  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2027        /* Check notification configured */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2028        if(ChannelConfigPtr->I2c_Notif.I2c_NotifFunctionPtr != NULL_PTR)
	ld.w	d15,[a15]32
.L877:
	jeq	d15,#0,.L103
.L878:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2029        {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2030          /* Call configured notification function */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2031          ChannelConfigPtr->I2c_Notif.I2c_NotifFunctionPtr(ErrorId);
	ld.a	a15,[a15]32
.L635:
	ji	a15
.L95:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2032        }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2033      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2034      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2035      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2036        HwModulePtr->PIRQSC.U = I2C_PROTOCOL_INTERRUPT_MASK;
	mov	d15,#127
.L879:
	st.w	[a2]120,d15
.L103:
.L94:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2037      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2038    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2039  }
	ret
.L367:
	
__I2c_IsrI2cProtocol_function_end:
	.size	I2c_IsrI2cProtocol,__I2c_IsrI2cProtocol_function_end-I2c_IsrI2cProtocol
.L210:
	; End of function
	
	.sdecl	'.text.I2c_IsrI2cError.Code.Cpu0',code,cluster('I2c_IsrI2cError')
	.sect	'.text.I2c_IsrI2cError.Code.Cpu0'
	.align	2
	
	.global	I2c_IsrI2cError

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2040  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2041  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2042  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2043  ** Syntax          : void I2c_IsrI2cError(const uint8 HwUnit)                 **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2044  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2045  ** Service ID      : NA                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2046  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2047  ** Sync/Async      : Asynchronous                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2048  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2049  ** Reentrancy      : Reentrant(for different channel)                         **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2050  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2051  ** Parameters (in) : HwUnit - HW unit index(ID)                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2052  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2053  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2054  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2055  ** Return value    : None                                                     **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2056  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2057  ** Description     : ISR fucntion to take care of Error interrupts            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2058  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2059  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2060  void I2c_IsrI2cError
; Function I2c_IsrI2cError
.L156:
I2c_IsrI2cError:	.type	func

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2061  (
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2062    const uint8 HwUnit
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2063  )
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2064  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2065    const I2c_ChannelConfigType *ChannelConfigPtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2066    I2c_ChannelInfoType *ChannelInfo;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2067    Ifx_I2C *HwModulePtr;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2068    I2c_ErrorType ErrorId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2069    uint8 ChannelId;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2070  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2071    ChannelId = I2c_ChannelMap[HwUnit];
	movh.a	a15,#@his(I2c_ChannelMap)
	lea	a15,[a15]@los(I2c_ChannelMap)
.L884:
	addsc.a	a15,a15,d4,#0
	ld.bu	d0,[a15]
.L639:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2072    HwModulePtr = I2c_HwModuleAddr[HwUnit];
	movh.a	a15,#@his(I2c_HwModuleAddr)
	lea	a15,[a15]@los(I2c_HwModuleAddr)
.L885:
	addsc.a	a15,a15,d4,#2
	ld.a	a2,[a15]
.L640:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2073    ChannelInfo = &I2c_ChannelInfo[ChannelId];
	sha	d15,d0,#4
.L886:
	movh.a	a15,#@his(I2c_ChannelInfo)
	lea	a15,[a15]@los(I2c_ChannelInfo)
.L887:
	addsc.a	a4,a15,d15,#0
.L641:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2074    ChannelConfigPtr = &I2c_ConfigPtr->I2c_ChannelConfigPtr[ChannelId];
	mul	d15,d0,#44
.L888:
	movh.a	a15,#@his(I2c_ConfigPtr)
	ld.a	a15,[a15]@los(I2c_ConfigPtr)
.L889:
	ld.a	a15,[a15]
.L890:
	addsc.a	a15,a15,d15,#0
.L642:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2075  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2076    if((HwModulePtr->ERRIRQSS.U & I2C_ERROR_INTERRUPT_MASK) != 0U)
	ld.w	d15,[a2]100
.L891:
	and	d15,#15
.L892:
	jeq	d15,#0,.L105
.L893:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2077    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2078      ChannelInfo->HwState = I2C_IDLE;
	mov	d4,#1
.L638:
	st.b	[a4]4,d4
.L894:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2079  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2080      if(HwModulePtr->ERRIRQSS.B.TXF_UFL == I2C_FLAG_SET)
	ld.bu	d15,[a2]100
.L895:
	jnz.t	d15:2,.L107
.L896:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2081      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2082         ErrorId = I2C_TX_UNDERFLOW;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2083      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2084      else if(HwModulePtr->ERRIRQSS.B.TXF_OFL == I2C_FLAG_SET)
	ld.bu	d15,[a2]100
.L897:
	jz.t	d15:3,.L108
.L898:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2085      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2086        ErrorId = I2C_TX_OVERFLOW;
	mov	d4,#2
.L644:
	j	.L109
.L108:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2087      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2088      else if(HwModulePtr->ERRIRQSS.B.RXF_UFL == I2C_FLAG_SET)
	ld.bu	d15,[a2]100
.L899:
	jz.t	d15:0,.L110
.L900:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2089      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2090         ErrorId = I2C_RX_UNDERFLOW;
	mov	d4,#3
.L645:
	j	.L111
.L110:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2091      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2092      else if(HwModulePtr->ERRIRQSS.B.RXF_OFL == I2C_FLAG_SET)
	ld.bu	d15,[a2]100
.L901:
	jz.t	d15:1,.L112
.L902:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2093      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2094        ErrorId = I2C_RX_OVERFLOW;
	mov	d4,#4
.L646:
	j	.L113
.L112:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2095      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2096      else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2097      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2098        ErrorId = I2C_ERR_OTHER;
	mov	d4,#13
.L113:
.L111:
.L109:
.L107:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2099      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2100  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2101      HwModulePtr->PIRQSC.U = I2C_PROTOCOL_INTERRUPT_MASK;
	mov	d15,#127
.L903:
	st.w	[a2]120,d15
.L904:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2102      HwModulePtr->ERRIRQSC.U = I2C_CLEAR_INTERRUPT;
	mov	d15,#15
.L905:
	st.w	[a2]104,d15
.L906:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2103  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2104      /* Set the RUN state to 0 */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2105       HwModulePtr->RUNCTRL.B.RUN = I2C_DISABLE_INTERFACE;
	ld.bu	d15,[a2]16
.L907:
	insert	d15,d15,#0,#0,#1
	st.b	[a2]16,d15
.L908:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2106  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2107      /* Check notification configured */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2108      if(ChannelConfigPtr->I2c_Notif.I2c_NotifFunctionPtr != NULL_PTR)
	ld.w	d15,[a15]32
.L909:
	jeq	d15,#0,.L114
.L910:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2109      {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2110        /* Call configured notification function */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2111        ChannelConfigPtr->I2c_Notif.I2c_NotifFunctionPtr(ErrorId);
	ld.a	a15,[a15]32
.L643:
	ji	a15
.L114:
.L105:

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2112      }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2113    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2114  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2115  }
	ret
.L375:
	
__I2c_IsrI2cError_function_end:
	.size	I2c_IsrI2cError,__I2c_IsrI2cError_function_end-I2c_IsrI2cError
.L215:
	; End of function
	
	.sdecl	'.rodata.I2c_HwModuleAddr.Const.Cpu0.32bit',data,rom,cluster('I2c_HwModuleAddr')
	.sect	'.rodata.I2c_HwModuleAddr.Const.Cpu0.32bit'
	.align	4
I2c_HwModuleAddr:	.type	object
	.size	I2c_HwModuleAddr,8
	.word	-267649024,-267517952
	.sdecl	'.bss.I2c_ConfigPtr.ClearedData.Cpu0.32bit',data,cluster('I2c_ConfigPtr')
	.sect	'.bss.I2c_ConfigPtr.ClearedData.Cpu0.32bit'
	.align	4
I2c_ConfigPtr:	.type	object
	.size	I2c_ConfigPtr,4
	.space	4
	.sdecl	'.bss.I2c_ChannelMap.ClearedData.Cpu0.8bit',data,cluster('I2c_ChannelMap')
	.sect	'.bss.I2c_ChannelMap.ClearedData.Cpu0.8bit'
I2c_ChannelMap:	.type	object
	.size	I2c_ChannelMap,2
	.space	2
	.sdecl	'.bss.I2c_ChannelInfo.ClearedData.Cpu0.Unspecified',data,cluster('I2c_ChannelInfo')
	.sect	'.bss.I2c_ChannelInfo.ClearedData.Cpu0.Unspecified'
	.align	4
I2c_ChannelInfo:	.type	object
	.size	I2c_ChannelInfo,16
	.space	16
	.calls	'I2c_Init','I2c_lHwInit'
	.calls	'I2c_Init','I2c_lHwUpdateModuleReg'
	.calls	'I2c_Init','I2c_lHwClearAllInterrupts'
	.calls	'I2c_DeInit','I2c_lHwClearAllInterrupts'
	.calls	'I2c_DeInit','Mcal_WritePeripEndInitProtReg'
	.calls	'I2c_SyncWrite','I2c_lSendMasterCode'
	.calls	'I2c_SyncWrite','I2c_lSyncTransmit'
	.calls	'I2c_SyncRead','I2c_lSendMasterCode'
	.calls	'I2c_SyncRead','I2c_lSyncReceive'
	.calls	'I2c_AsyncWrite','I2c_lHwEnableInterrupt'
	.calls	'I2c_AsyncWrite','I2c_lSendMasterCode'
	.calls	'I2c_AsyncRead','I2c_lHwEnableInterrupt'
	.calls	'I2c_AsyncRead','I2c_lSendMasterCode'
	.calls	'I2c_CancelOperation','I2c_lHwClearAllInterrupts'
	.calls	'I2c_lHwInit','I2c_lResetKernels'
	.calls	'I2c_lHwInit','Mcal_WritePeripEndInitProtReg'
	.calls	'I2c_lResetKernels','Mcal_WritePeripEndInitProtReg'
	.calls	'I2c_lSyncTransmit','I2c_lWrite'
	.calls	'I2c_lSyncTransmit','I2c_lHwClearAllInterrupts'
	.calls	'I2c_lSyncReceive','I2c_lHwClearAllInterrupts'
	.calls	'I2c_lSyncReceive','I2c_lRead'
	.calls	'I2c_IsrI2cDtr','I2c_lWrite'
	.calls	'I2c_IsrI2cDtr','I2c_lRead'
	.calls	'I2c_IsrI2cProtocol','__INDIRECT__'
	.calls	'I2c_IsrI2cError','__INDIRECT__'
	.calls	'I2c_Init','',0
	.calls	'I2c_DeInit','',0
	.calls	'I2c_SyncWrite','',0
	.calls	'I2c_SyncRead','',0
	.calls	'I2c_AsyncWrite','',0
	.calls	'I2c_AsyncRead','',0
	.calls	'I2c_GetStatus','',0
	.calls	'I2c_CancelOperation','',0
	.calls	'I2c_lHwInit','',0
	.calls	'I2c_lHwClearAllInterrupts','',0
	.calls	'I2c_lHwUpdateModuleReg','',0
	.calls	'I2c_lHwEnableInterrupt','',0
	.calls	'I2c_lSendMasterCode','',0
	.calls	'I2c_lResetKernels','',0
	.calls	'I2c_lWrite','',0
	.calls	'I2c_lSyncTransmit','',0
	.calls	'I2c_lRead','',0
	.calls	'I2c_lSyncReceive','',0
	.calls	'I2c_IsrI2cDtr','',0
	.calls	'I2c_IsrI2cProtocol','',0
	.extern	Mcal_WritePeripEndInitProtReg
	.extern	__INDIRECT__
	.calls	'I2c_IsrI2cError','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L158:
	.word	10986
	.half	3
	.word	.L159
	.byte	4
.L157:
	.byte	1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L160
	.byte	2
	.byte	'void',0,3
	.word	157
	.byte	4
	.word	163
	.byte	5
	.word	168
.L393:
	.byte	6
	.byte	'unsigned long int',0,4,7,5
	.word	178
	.byte	7
	.byte	'Mcal_WritePeripEndInitProtReg',0,1,165,4,13,1,1,1,1,8
	.byte	'RegAddress',0,1,166,4,24
	.word	173
	.byte	8
	.byte	'DataValue',0,1,166,4,49
	.word	199
	.byte	0
.L281:
	.byte	6
	.byte	'unsigned char',0,1,8,5
	.word	283
	.byte	5
	.word	178
	.byte	5
	.word	178
	.byte	5
	.word	178
	.byte	5
	.word	178
	.byte	5
	.word	178
	.byte	5
	.word	283
	.byte	5
	.word	178
	.byte	9,2,171,1,9,1,10
	.byte	'I2C_7_BIT_ADDRESSING',0,0,10
	.byte	'I2C_10_BIT_ADDRESSING',0,1,0,5
	.word	340
.L292:
	.byte	9,2,153,1,9,1,10
	.byte	'I2C_NO_ERR',0,0,10
	.byte	'I2C_TX_UNDERFLOW',0,1,10
	.byte	'I2C_TX_OVERFLOW',0,2,10
	.byte	'I2C_RX_UNDERFLOW',0,3,10
	.byte	'I2C_RX_OVERFLOW',0,4,10
	.byte	'I2C_NO_ACK',0,5,10
	.byte	'I2C_ARBITRATION_LOST',0,6,10
	.byte	'I2C_INVALID_CHANNEL',0,7,10
	.byte	'I2C_INVALID_SIZE',0,8,10
	.byte	'I2C_INVALID_ADDRESS',0,9,10
	.byte	'I2C_NULL_PTR',0,10,10
	.byte	'I2C_IS_UNINIT',0,11,10
	.byte	'I2C_IS_BUSY',0,12,10
	.byte	'I2C_ERR_OTHER',0,13,0,11,1,1,12
	.word	399
	.byte	0,4
	.word	653
	.byte	13
	.byte	'I2c_NotifFunctionPtrType',0,2,177,1,15
	.word	662
	.byte	14,2,179,1,9,4,15
	.byte	'I2c_NotifFunctionPtr',0
	.word	667
	.byte	4,2,35,0,0,5
	.word	178
	.byte	5
	.word	178
	.byte	14,2,184,1,9,44,15
	.byte	'HwUnit',0
	.word	300
	.byte	1,2,35,0,15
	.byte	'AdddressCfgValue',0
	.word	305
	.byte	4,2,35,2,15
	.byte	'FracDividerCfgValue',0
	.word	310
	.byte	4,2,35,6,15
	.byte	'FracDividerHighCfgValue',0
	.word	315
	.byte	4,2,35,10,15
	.byte	'TimingCfgvalue',0
	.word	320
	.byte	4,2,35,14,15
	.byte	'FIFOCfgValue',0
	.word	325
	.byte	4,2,35,18,15
	.byte	'PortPinCfgvalue',0
	.word	330
	.byte	1,2,35,22,15
	.byte	'HWClkSetting',0
	.word	335
	.byte	4,2,35,24,15
	.byte	'AddressingMode',0
	.word	394
	.byte	1,2,35,28,15
	.byte	'I2c_Notif',0
	.word	701
	.byte	4,2,35,32,15
	.byte	'TxTimeOutCount',0
	.word	738
	.byte	4,2,35,36,15
	.byte	'RxTimeOutCount',0
	.word	743
	.byte	4,2,35,40,0,5
	.word	748
.L277:
	.byte	4
	.word	1043
	.byte	5
	.word	283
	.byte	14,2,212,1,9,8,15
	.byte	'I2c_ChannelConfigPtr',0
	.word	1048
	.byte	4,2,35,0,15
	.byte	'I2c_MaxChannels',0
	.word	1053
	.byte	1,2,35,4,0,5
	.word	1058
.L422:
	.byte	4
	.word	1120
.L275:
	.byte	5
	.word	1125
	.byte	4
	.word	653
	.byte	6
	.byte	'unsigned int',0,4,7,6
	.byte	'int',0,4,5,16
	.byte	'_Ifx_I2C_CLC1_Bits',0,3,143,1,16,4,17
	.byte	'DISR',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'DISS',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'SPEN',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'EDIS',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'SBWE',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'FSOE',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	283
	.byte	2,0,2,35,0,17
	.byte	'RMC',0,1
	.word	283
	.byte	8,0,2,35,1,17
	.byte	'reserved_16',0,1
	.word	283
	.byte	8,0,2,35,2,17
	.byte	'reserved_24',0,1
	.word	283
	.byte	8,0,2,35,3,0,18,3,224,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	1163
	.byte	4,2,35,0,0,19,4
	.word	283
	.byte	20,3,0
.L358:
	.byte	6
	.byte	'unsigned short int',0,2,7,16
	.byte	'_Ifx_I2C_ID_Bits',0,3,128,2,16,4,17
	.byte	'MOD_REV',0,1
	.word	283
	.byte	8,0,2,35,0,17
	.byte	'MOD_NUMBER',0,1
	.word	283
	.byte	8,0,2,35,1,17
	.byte	'reserved_16',0,2
	.word	1417
	.byte	16,0,2,35,2,0,18,3,184,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	1439
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_RUNCTRL_Bits',0,3,139,3,16,4,17
	.byte	'RUN',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	1140
	.byte	31,0,2,35,0,0,18,3,168,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	1567
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ENDDCTRL_Bits',0,3,158,1,16,4,17
	.byte	'SETRSC',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'SETEND',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	1140
	.byte	30,0,2,35,0,0,18,3,232,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	1673
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_FDIVCFG_Bits',0,3,196,1,16,4,17
	.byte	'DEC',0,2
	.word	1417
	.byte	11,5,2,35,0,17
	.byte	'reserved_11',0,1
	.word	283
	.byte	5,0,2,35,1,17
	.byte	'INC',0,1
	.word	283
	.byte	8,0,2,35,2,17
	.byte	'reserved_24',0,1
	.word	283
	.byte	8,0,2,35,3,0,18,3,136,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	1801
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_FDIVHIGHCFG_Bits',0,3,205,1,16,4,17
	.byte	'DEC',0,2
	.word	1417
	.byte	11,5,2,35,0,17
	.byte	'reserved_11',0,1
	.word	283
	.byte	5,0,2,35,1,17
	.byte	'INC',0,1
	.word	283
	.byte	8,0,2,35,2,17
	.byte	'reserved_24',0,1
	.word	283
	.byte	7,1,2,35,3,17
	.byte	'reserved_31',0,1
	.word	283
	.byte	1,0,2,35,3,0,18,3,144,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	1946
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ADDRCFG_Bits',0,3,113,16,4,17
	.byte	'ADR',0,2
	.word	1417
	.byte	10,6,2,35,0,17
	.byte	'reserved_10',0,1
	.word	283
	.byte	6,0,2,35,1,17
	.byte	'TBAM',0,1
	.word	283
	.byte	1,7,2,35,2,17
	.byte	'GCE',0,1
	.word	283
	.byte	1,6,2,35,2,17
	.byte	'MCE',0,1
	.word	283
	.byte	1,5,2,35,2,17
	.byte	'MNS',0,1
	.word	283
	.byte	1,4,2,35,2,17
	.byte	'SONA',0,1
	.word	283
	.byte	1,3,2,35,2,17
	.byte	'SOPE',0,1
	.word	283
	.byte	1,2,2,35,2,17
	.byte	'reserved_22',0,2
	.word	1417
	.byte	10,0,2,35,2,0,18,3,200,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	2118
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_BUSSTAT_Bits',0,3,127,16,4,17
	.byte	'BS',0,1
	.word	283
	.byte	2,6,2,35,0,17
	.byte	'RNW',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,4
	.word	1140
	.byte	29,0,2,35,0,0,18,3,208,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	2340
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_FIFOCFG_Bits',0,3,222,1,16,4,17
	.byte	'RXBS',0,1
	.word	283
	.byte	2,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	283
	.byte	2,4,2,35,0,17
	.byte	'TXBS',0,1
	.word	283
	.byte	2,2,2,35,0,17
	.byte	'reserved_6',0,1
	.word	283
	.byte	2,0,2,35,0,17
	.byte	'RXFA',0,1
	.word	283
	.byte	2,6,2,35,1,17
	.byte	'reserved_10',0,1
	.word	283
	.byte	2,4,2,35,1,17
	.byte	'TXFA',0,1
	.word	283
	.byte	2,2,2,35,1,17
	.byte	'reserved_14',0,1
	.word	283
	.byte	2,0,2,35,1,17
	.byte	'RXFC',0,1
	.word	283
	.byte	1,7,2,35,2,17
	.byte	'TXFC',0,1
	.word	283
	.byte	1,6,2,35,2,17
	.byte	'CRBC',0,1
	.word	283
	.byte	1,5,2,35,2,17
	.byte	'reserved_19',0,2
	.word	1417
	.byte	13,0,2,35,2,0,18,3,160,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	2459
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_MRPSCTRL_Bits',0,3,202,2,16,4,17
	.byte	'MRPS',0,2
	.word	1417
	.byte	14,2,2,35,0,17
	.byte	'reserved_14',0,4
	.word	1140
	.byte	18,0,2,35,0,0,18,3,248,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	2753
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_RPSSTAT_Bits',0,3,132,3,16,4,17
	.byte	'RPS',0,2
	.word	1417
	.byte	14,2,2,35,0,17
	.byte	'reserved_14',0,4
	.word	1140
	.byte	18,0,2,35,0,0,18,3,160,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	2862
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_TPSCTRL_Bits',0,3,166,3,16,4,17
	.byte	'TPS',0,2
	.word	1417
	.byte	14,2,2,35,0,17
	.byte	'reserved_14',0,4
	.word	1140
	.byte	18,0,2,35,0,0,18,3,192,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	2969
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_FFSSTAT_Bits',0,3,215,1,16,4,17
	.byte	'FFS',0,1
	.word	283
	.byte	6,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	1140
	.byte	26,0,2,35,0,0,18,3,152,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	3076
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_TIMCFG_Bits',0,3,152,3,16,4,17
	.byte	'SDA_DEL_HD_DAT',0,1
	.word	283
	.byte	6,2,2,35,0,17
	.byte	'HS_SDA_DEL_HD_DAT',0,2
	.word	1417
	.byte	3,7,2,35,0,17
	.byte	'SCL_DEL_HD_STA',0,1
	.word	283
	.byte	3,4,2,35,1,17
	.byte	'reserved_12',0,1
	.word	283
	.byte	2,2,2,35,1,17
	.byte	'EN_SCL_LOW_LEN',0,1
	.word	283
	.byte	1,1,2,35,1,17
	.byte	'FS_SCL_LOW',0,1
	.word	283
	.byte	1,0,2,35,1,17
	.byte	'HS_SDA_DEL',0,1
	.word	283
	.byte	5,3,2,35,2,17
	.byte	'reserved_21',0,1
	.word	283
	.byte	3,0,2,35,2,17
	.byte	'SCL_LOW_LEN',0,1
	.word	283
	.byte	8,0,2,35,3,0,18,3,184,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	3182
	.byte	4,2,35,0,0,19,28
	.word	283
	.byte	20,27,0,16
	.byte	'_Ifx_I2C_ERRIRQSM_Bits',0,3,176,1,16,4,17
	.byte	'RXF_UFL',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'RXF_OFL',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'TXF_UFL',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'TXF_OFL',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	1140
	.byte	28,0,2,35,0,0,18,3,248,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	3479
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ERRIRQSS_Bits',0,3,186,1,16,4,17
	.byte	'RXF_UFL',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'RXF_OFL',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'TXF_UFL',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'TXF_OFL',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	1140
	.byte	28,0,2,35,0,0,18,3,128,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	3647
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ERRIRQSC_Bits',0,3,166,1,16,4,17
	.byte	'RXF_UFL',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'RXF_OFL',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'TXF_UFL',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'TXF_OFL',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	1140
	.byte	28,0,2,35,0,0,18,3,240,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	3815
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_PIRQSM_Bits',0,3,222,2,16,4,17
	.byte	'AM',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'GC',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'MC',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'AL',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'NACK',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'TX_END',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'RX',0,1
	.word	283
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,4
	.word	1140
	.byte	25,0,2,35,0,0,18,3,136,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	3983
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_PIRQSS_Bits',0,3,235,2,16,4,17
	.byte	'AM',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'GC',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'MC',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'AL',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'NACK',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'TX_END',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'RX',0,1
	.word	283
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,4
	.word	1140
	.byte	25,0,2,35,0,0,18,3,144,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	4177
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_PIRQSC_Bits',0,3,209,2,16,4,17
	.byte	'AM',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'GC',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'MC',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'AL',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'NACK',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'TX_END',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'RX',0,1
	.word	283
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,4
	.word	1140
	.byte	25,0,2,35,0,0,18,3,128,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	4371
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_RIS_Bits',0,3,248,2,16,4,17
	.byte	'LSREQ_INT',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'SREQ_INT',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'LBREQ_INT',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'BREQ_INT',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'I2C_ERR_INT',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'I2C_P_INT',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	1140
	.byte	26,0,2,35,0,0,18,3,152,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	4565
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_IMSC_Bits',0,3,136,2,16,4,17
	.byte	'LSREQ_INT',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'SREQ_INT',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'LBREQ_INT',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'BREQ_INT',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'I2C_ERR_INT',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'I2C_P_INT',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	1140
	.byte	26,0,2,35,0,0,18,3,192,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	4778
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_MIS_Bits',0,3,182,2,16,4,17
	.byte	'LSREQ_INT',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'SREQ_INT',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'LBREQ_INT',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'BREQ_INT',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'I2C_ERR_INT',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'I2C_P_INT',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	1140
	.byte	26,0,2,35,0,0,18,3,232,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	4992
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ICR_Bits',0,3,246,1,16,4,17
	.byte	'LSREQ_INT',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'SREQ_INT',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'LBREQ_INT',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'BREQ_INT',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	1140
	.byte	28,0,2,35,0,0,18,3,176,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	5205
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ISR_Bits',0,3,148,2,16,4,17
	.byte	'LSREQ_INT',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'SREQ_INT',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'LBREQ_INT',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'BREQ_INT',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'I2C_ERR_INT',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'I2C_P_INT',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'reserved_6',0,4
	.word	1140
	.byte	26,0,2,35,0,0,18,3,200,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	5374
	.byte	4,2,35,0,0,19,236,254,1
	.word	283
	.byte	20,235,254,1,0,16
	.byte	'_Ifx_I2C_TXD_Bits',0,3,173,3,16,4,17
	.byte	'TXD',0,4
	.word	1140
	.byte	32,0,2,35,0,0,18,3,200,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	5600
	.byte	4,2,35,0,0,19,252,127
	.word	283
	.byte	20,251,127,0,16
	.byte	'_Ifx_I2C_RXD_Bits',0,3,146,3,16,4,17
	.byte	'RXD',0,4
	.word	1140
	.byte	32,0,2,35,0,0,18,3,176,5,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	5691
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_CLC_Bits',0,3,135,1,16,4,17
	.byte	'DISR',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'DISS',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	1140
	.byte	30,0,2,35,0,0,18,3,216,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	5771
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_MODID_Bits',0,3,194,2,16,4,17
	.byte	'MOD_REV',0,1
	.word	283
	.byte	8,0,2,35,0,17
	.byte	'MOD_TYPE',0,1
	.word	283
	.byte	8,0,2,35,1,17
	.byte	'MOD_NUMBER',0,2
	.word	1417
	.byte	16,0,2,35,2,0,18,3,240,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	5890
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_GPCTL_Bits',0,3,239,1,16,4,17
	.byte	'PISEL',0,1
	.word	283
	.byte	3,5,2,35,0,17
	.byte	'reserved_3',0,4
	.word	1140
	.byte	29,0,2,35,0,0,18,3,168,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	6018
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ACCEN0_Bits',0,3,70,16,4,17
	.byte	'EN0',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'EN1',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'EN2',0,1
	.word	283
	.byte	1,5,2,35,0,17
	.byte	'EN3',0,1
	.word	283
	.byte	1,4,2,35,0,17
	.byte	'EN4',0,1
	.word	283
	.byte	1,3,2,35,0,17
	.byte	'EN5',0,1
	.word	283
	.byte	1,2,2,35,0,17
	.byte	'EN6',0,1
	.word	283
	.byte	1,1,2,35,0,17
	.byte	'EN7',0,1
	.word	283
	.byte	1,0,2,35,0,17
	.byte	'EN8',0,1
	.word	283
	.byte	1,7,2,35,1,17
	.byte	'EN9',0,1
	.word	283
	.byte	1,6,2,35,1,17
	.byte	'EN10',0,1
	.word	283
	.byte	1,5,2,35,1,17
	.byte	'EN11',0,1
	.word	283
	.byte	1,4,2,35,1,17
	.byte	'EN12',0,1
	.word	283
	.byte	1,3,2,35,1,17
	.byte	'EN13',0,1
	.word	283
	.byte	1,2,2,35,1,17
	.byte	'EN14',0,1
	.word	283
	.byte	1,1,2,35,1,17
	.byte	'EN15',0,1
	.word	283
	.byte	1,0,2,35,1,17
	.byte	'EN16',0,1
	.word	283
	.byte	1,7,2,35,2,17
	.byte	'EN17',0,1
	.word	283
	.byte	1,6,2,35,2,17
	.byte	'EN18',0,1
	.word	283
	.byte	1,5,2,35,2,17
	.byte	'EN19',0,1
	.word	283
	.byte	1,4,2,35,2,17
	.byte	'EN20',0,1
	.word	283
	.byte	1,3,2,35,2,17
	.byte	'EN21',0,1
	.word	283
	.byte	1,2,2,35,2,17
	.byte	'EN22',0,1
	.word	283
	.byte	1,1,2,35,2,17
	.byte	'EN23',0,1
	.word	283
	.byte	1,0,2,35,2,17
	.byte	'EN24',0,1
	.word	283
	.byte	1,7,2,35,3,17
	.byte	'EN25',0,1
	.word	283
	.byte	1,6,2,35,3,17
	.byte	'EN26',0,1
	.word	283
	.byte	1,5,2,35,3,17
	.byte	'EN27',0,1
	.word	283
	.byte	1,4,2,35,3,17
	.byte	'EN28',0,1
	.word	283
	.byte	1,3,2,35,3,17
	.byte	'EN29',0,1
	.word	283
	.byte	1,2,2,35,3,17
	.byte	'EN30',0,1
	.word	283
	.byte	1,1,2,35,3,17
	.byte	'EN31',0,1
	.word	283
	.byte	1,0,2,35,3,0,18,3,184,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	6124
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_ACCEN1_Bits',0,3,107,16,4,17
	.byte	'reserved_0',0,4
	.word	1140
	.byte	32,0,2,35,0,0,18,3,192,3,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	6693
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_KRST0_Bits',0,3,160,2,16,4,17
	.byte	'RST',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'RSTSTAT',0,1
	.word	283
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	1140
	.byte	30,0,2,35,0,0,18,3,208,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	6782
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_KRST1_Bits',0,3,168,2,16,4,17
	.byte	'RST',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	1140
	.byte	31,0,2,35,0,0,18,3,216,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	6905
	.byte	4,2,35,0,0,16
	.byte	'_Ifx_I2C_KRSTCLR_Bits',0,3,175,2,16,4,17
	.byte	'CLR',0,1
	.word	283
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	1140
	.byte	31,0,2,35,0,0,18,3,224,4,9,4,15
	.byte	'U',0
	.word	1140
	.byte	4,2,35,0,15
	.byte	'I',0
	.word	1156
	.byte	4,2,35,0,15
	.byte	'B',0
	.word	7009
	.byte	4,2,35,0,0,19,222,1
	.word	283
	.byte	20,221,1,0,16
	.byte	'_Ifx_I2C',0,3,217,5,25,128,130,4,15
	.byte	'CLC1',0
	.word	1368
	.byte	4,2,35,0,15
	.byte	'reserved_4',0
	.word	1408
	.byte	4,2,35,4,15
	.byte	'ID',0
	.word	1527
	.byte	4,2,35,8,15
	.byte	'reserved_C',0
	.word	1408
	.byte	4,2,35,12,15
	.byte	'RUNCTRL',0
	.word	1633
	.byte	4,2,35,16,15
	.byte	'ENDDCTRL',0
	.word	1761
	.byte	4,2,35,20,15
	.byte	'FDIVCFG',0
	.word	1906
	.byte	4,2,35,24,15
	.byte	'FDIVHIGHCFG',0
	.word	2078
	.byte	4,2,35,28,15
	.byte	'ADDRCFG',0
	.word	2300
	.byte	4,2,35,32,15
	.byte	'BUSSTAT',0
	.word	2419
	.byte	4,2,35,36,15
	.byte	'FIFOCFG',0
	.word	2713
	.byte	4,2,35,40,15
	.byte	'MRPSCTRL',0
	.word	2822
	.byte	4,2,35,44,15
	.byte	'RPSSTAT',0
	.word	2929
	.byte	4,2,35,48,15
	.byte	'TPSCTRL',0
	.word	3036
	.byte	4,2,35,52,15
	.byte	'FFSSTAT',0
	.word	3142
	.byte	4,2,35,56,15
	.byte	'reserved_3C',0
	.word	1408
	.byte	4,2,35,60,15
	.byte	'TIMCFG',0
	.word	3430
	.byte	4,2,35,64,15
	.byte	'reserved_44',0
	.word	3470
	.byte	28,2,35,68,15
	.byte	'ERRIRQSM',0
	.word	3607
	.byte	4,2,35,96,15
	.byte	'ERRIRQSS',0
	.word	3775
	.byte	4,2,35,100,15
	.byte	'ERRIRQSC',0
	.word	3943
	.byte	4,2,35,104,15
	.byte	'reserved_6C',0
	.word	1408
	.byte	4,2,35,108,15
	.byte	'PIRQSM',0
	.word	4137
	.byte	4,2,35,112,15
	.byte	'PIRQSS',0
	.word	4331
	.byte	4,2,35,116,15
	.byte	'PIRQSC',0
	.word	4525
	.byte	4,2,35,120,15
	.byte	'reserved_7C',0
	.word	1408
	.byte	4,2,35,124,15
	.byte	'RIS',0
	.word	4738
	.byte	4,3,35,128,1,15
	.byte	'IMSC',0
	.word	4952
	.byte	4,3,35,132,1,15
	.byte	'MIS',0
	.word	5165
	.byte	4,3,35,136,1,15
	.byte	'ICR',0
	.word	5334
	.byte	4,3,35,140,1,15
	.byte	'ISR',0
	.word	5547
	.byte	4,3,35,144,1,15
	.byte	'reserved_94',0
	.word	5587
	.byte	236,254,1,3,35,148,1,15
	.byte	'TXD',0
	.word	5640
	.byte	4,4,35,128,128,2,15
	.byte	'reserved_8004',0
	.word	5680
	.byte	252,127,4,35,132,128,2,15
	.byte	'RXD',0
	.word	5731
	.byte	4,4,35,128,128,3,15
	.byte	'reserved_C004',0
	.word	5680
	.byte	252,127,4,35,132,128,3,15
	.byte	'CLC',0
	.word	5850
	.byte	4,4,35,128,128,4,15
	.byte	'MODID',0
	.word	5978
	.byte	4,4,35,132,128,4,15
	.byte	'GPCTL',0
	.word	6084
	.byte	4,4,35,136,128,4,15
	.byte	'ACCEN0',0
	.word	6653
	.byte	4,4,35,140,128,4,15
	.byte	'ACCEN1',0
	.word	6742
	.byte	4,4,35,144,128,4,15
	.byte	'KRST0',0
	.word	6865
	.byte	4,4,35,148,128,4,15
	.byte	'KRST1',0
	.word	6969
	.byte	4,4,35,152,128,4,15
	.byte	'KRSTCLR',0
	.word	7075
	.byte	4,4,35,156,128,4,15
	.byte	'reserved_10020',0
	.word	7115
	.byte	222,1,4,35,160,128,4,0,3
	.word	7126
.L279:
	.byte	4
	.word	7947
.L458:
	.byte	4
	.word	283
.L345:
	.byte	9,2,143,1,9,1,10
	.byte	'I2C_UNINIT',0,0,10
	.byte	'I2C_IDLE',0,1,10
	.byte	'I2C_BUSY',0,2,0,9,4,197,1,9,1,10
	.byte	'I2C_NO_OPERATION',0,0,10
	.byte	'I2C_WRITE',0,1,10
	.byte	'I2C_READ',0,2,0
.L405:
	.byte	9,4,182,1,9,1,10
	.byte	'I2C_RX_NOT_STARTED',0,0,10
	.byte	'I2C_RX_INITIATED',0,1,10
	.byte	'I2C_RX_COMMAND_SENT',0,2,10
	.byte	'I2C_RX_IN_PROGRESS',0,3,10
	.byte	'I2C_RX_COMPLETED',0,4,0,14,4,204,1,9,16,15
	.byte	'DataPtr',0
	.word	7957
	.byte	4,2,35,0,15
	.byte	'HwState',0
	.word	7962
	.byte	1,2,35,4,15
	.byte	'DataLeft',0
	.word	1417
	.byte	2,2,35,6,15
	.byte	'TotalDataTxd',0
	.word	1417
	.byte	2,2,35,8,15
	.byte	'I2c_Operation',0
	.word	8004
	.byte	1,2,35,10,15
	.byte	'SlaveAddr',0
	.word	1417
	.byte	2,2,35,12,15
	.byte	'RxTransferState',0
	.word	8053
	.byte	1,2,35,14,0
.L286:
	.byte	4
	.word	8162
.L294:
	.byte	5
	.word	283
.L296:
	.byte	5
	.word	7957
.L298:
	.byte	5
	.word	1417
.L300:
	.byte	5
	.word	1417
.L307:
	.byte	5
	.word	283
.L309:
	.byte	5
	.word	7957
.L311:
	.byte	5
	.word	1417
.L313:
	.byte	5
	.word	1417
.L320:
	.byte	5
	.word	283
.L322:
	.byte	5
	.word	7957
.L324:
	.byte	5
	.word	1417
.L326:
	.byte	5
	.word	1417
.L333:
	.byte	5
	.word	283
.L335:
	.byte	5
	.word	7957
.L337:
	.byte	5
	.word	1417
.L339:
	.byte	5
	.word	1417
.L347:
	.byte	5
	.word	283
.L351:
	.byte	5
	.word	283
	.byte	4
	.word	1417
.L353:
	.byte	5
	.word	8405
.L362:
	.byte	5
	.word	283
.L368:
	.byte	5
	.word	283
.L376:
	.byte	5
	.word	283
.L384:
	.byte	5
	.word	7952
.L386:
	.byte	5
	.word	8310
.L388:
	.byte	5
	.word	283
.L391:
	.byte	9,4,191,1,9,1,10
	.byte	'I2C_TX_IN_PROGRESS',0,0,10
	.byte	'I2C_TX_COMPLETED',0,1,0
.L398:
	.byte	5
	.word	7952
.L400:
	.byte	5
	.word	8310
.L402:
	.byte	5
	.word	283
.L411:
	.byte	5
	.word	7952
.L414:
	.byte	5
	.word	7952
.L417:
	.byte	5
	.word	7952
.L420:
	.byte	5
	.word	283
.L427:
	.byte	5
	.word	283
.L429:
	.byte	5
	.word	1048
.L433:
	.byte	5
	.word	7952
.L438:
	.byte	5
	.word	7952
.L440:
	.byte	5
	.word	8310
	.byte	5
	.word	283
.L442:
	.byte	4
	.word	8552
.L454:
	.byte	5
	.word	7952
.L456:
	.byte	5
	.word	8310
	.byte	21
	.byte	'__INDIRECT__',0,4,1,1,1,1,1,22,1,4
	.word	8592
	.byte	13
	.byte	'__codeptr',0,4,1,1
	.word	8594
	.byte	13
	.byte	'Ifx_UReg_8Bit',0,5,79,24
	.word	283
	.byte	13
	.byte	'Ifx_UReg_32Bit',0,5,81,24
	.word	1140
	.byte	13
	.byte	'Ifx_SReg_32Bit',0,5,84,24
	.word	1156
	.byte	13
	.byte	'Ifx_I2C_ACCEN0_Bits',0,3,104,3
	.word	6124
	.byte	13
	.byte	'Ifx_I2C_ACCEN1_Bits',0,3,110,3
	.word	6693
	.byte	13
	.byte	'Ifx_I2C_ADDRCFG_Bits',0,3,124,3
	.word	2118
	.byte	13
	.byte	'Ifx_I2C_BUSSTAT_Bits',0,3,132,1,3
	.word	2340
	.byte	13
	.byte	'Ifx_I2C_CLC_Bits',0,3,140,1,3
	.word	5771
	.byte	13
	.byte	'Ifx_I2C_CLC1_Bits',0,3,155,1,3
	.word	1163
	.byte	13
	.byte	'Ifx_I2C_ENDDCTRL_Bits',0,3,163,1,3
	.word	1673
	.byte	13
	.byte	'Ifx_I2C_ERRIRQSC_Bits',0,3,173,1,3
	.word	3815
	.byte	13
	.byte	'Ifx_I2C_ERRIRQSM_Bits',0,3,183,1,3
	.word	3479
	.byte	13
	.byte	'Ifx_I2C_ERRIRQSS_Bits',0,3,193,1,3
	.word	3647
	.byte	13
	.byte	'Ifx_I2C_FDIVCFG_Bits',0,3,202,1,3
	.word	1801
	.byte	13
	.byte	'Ifx_I2C_FDIVHIGHCFG_Bits',0,3,212,1,3
	.word	1946
	.byte	13
	.byte	'Ifx_I2C_FFSSTAT_Bits',0,3,219,1,3
	.word	3076
	.byte	13
	.byte	'Ifx_I2C_FIFOCFG_Bits',0,3,236,1,3
	.word	2459
	.byte	13
	.byte	'Ifx_I2C_GPCTL_Bits',0,3,243,1,3
	.word	6018
	.byte	13
	.byte	'Ifx_I2C_ICR_Bits',0,3,253,1,3
	.word	5205
	.byte	13
	.byte	'Ifx_I2C_ID_Bits',0,3,133,2,3
	.word	1439
	.byte	13
	.byte	'Ifx_I2C_IMSC_Bits',0,3,145,2,3
	.word	4778
	.byte	13
	.byte	'Ifx_I2C_ISR_Bits',0,3,157,2,3
	.word	5374
	.byte	13
	.byte	'Ifx_I2C_KRST0_Bits',0,3,165,2,3
	.word	6782
	.byte	13
	.byte	'Ifx_I2C_KRST1_Bits',0,3,172,2,3
	.word	6905
	.byte	13
	.byte	'Ifx_I2C_KRSTCLR_Bits',0,3,179,2,3
	.word	7009
	.byte	13
	.byte	'Ifx_I2C_MIS_Bits',0,3,191,2,3
	.word	4992
	.byte	13
	.byte	'Ifx_I2C_MODID_Bits',0,3,199,2,3
	.word	5890
	.byte	13
	.byte	'Ifx_I2C_MRPSCTRL_Bits',0,3,206,2,3
	.word	2753
	.byte	13
	.byte	'Ifx_I2C_PIRQSC_Bits',0,3,219,2,3
	.word	4371
	.byte	13
	.byte	'Ifx_I2C_PIRQSM_Bits',0,3,232,2,3
	.word	3983
	.byte	13
	.byte	'Ifx_I2C_PIRQSS_Bits',0,3,245,2,3
	.word	4177
	.byte	13
	.byte	'Ifx_I2C_RIS_Bits',0,3,129,3,3
	.word	4565
	.byte	13
	.byte	'Ifx_I2C_RPSSTAT_Bits',0,3,136,3,3
	.word	2862
	.byte	13
	.byte	'Ifx_I2C_RUNCTRL_Bits',0,3,143,3,3
	.word	1567
	.byte	13
	.byte	'Ifx_I2C_RXD_Bits',0,3,149,3,3
	.word	5691
	.byte	13
	.byte	'Ifx_I2C_TIMCFG_Bits',0,3,163,3,3
	.word	3182
	.byte	13
	.byte	'Ifx_I2C_TPSCTRL_Bits',0,3,170,3,3
	.word	2969
	.byte	13
	.byte	'Ifx_I2C_TXD_Bits',0,3,176,3,3
	.word	5600
	.byte	13
	.byte	'Ifx_I2C_ACCEN0',0,3,189,3,3
	.word	6653
	.byte	13
	.byte	'Ifx_I2C_ACCEN1',0,3,197,3,3
	.word	6742
	.byte	13
	.byte	'Ifx_I2C_ADDRCFG',0,3,205,3,3
	.word	2300
	.byte	13
	.byte	'Ifx_I2C_BUSSTAT',0,3,213,3,3
	.word	2419
	.byte	13
	.byte	'Ifx_I2C_CLC',0,3,221,3,3
	.word	5850
	.byte	13
	.byte	'Ifx_I2C_CLC1',0,3,229,3,3
	.word	1368
	.byte	13
	.byte	'Ifx_I2C_ENDDCTRL',0,3,237,3,3
	.word	1761
	.byte	13
	.byte	'Ifx_I2C_ERRIRQSC',0,3,245,3,3
	.word	3943
	.byte	13
	.byte	'Ifx_I2C_ERRIRQSM',0,3,253,3,3
	.word	3607
	.byte	13
	.byte	'Ifx_I2C_ERRIRQSS',0,3,133,4,3
	.word	3775
	.byte	13
	.byte	'Ifx_I2C_FDIVCFG',0,3,141,4,3
	.word	1906
	.byte	13
	.byte	'Ifx_I2C_FDIVHIGHCFG',0,3,149,4,3
	.word	2078
	.byte	13
	.byte	'Ifx_I2C_FFSSTAT',0,3,157,4,3
	.word	3142
	.byte	13
	.byte	'Ifx_I2C_FIFOCFG',0,3,165,4,3
	.word	2713
	.byte	13
	.byte	'Ifx_I2C_GPCTL',0,3,173,4,3
	.word	6084
	.byte	13
	.byte	'Ifx_I2C_ICR',0,3,181,4,3
	.word	5334
	.byte	13
	.byte	'Ifx_I2C_ID',0,3,189,4,3
	.word	1527
	.byte	13
	.byte	'Ifx_I2C_IMSC',0,3,197,4,3
	.word	4952
	.byte	13
	.byte	'Ifx_I2C_ISR',0,3,205,4,3
	.word	5547
	.byte	13
	.byte	'Ifx_I2C_KRST0',0,3,213,4,3
	.word	6865
	.byte	13
	.byte	'Ifx_I2C_KRST1',0,3,221,4,3
	.word	6969
	.byte	13
	.byte	'Ifx_I2C_KRSTCLR',0,3,229,4,3
	.word	7075
	.byte	13
	.byte	'Ifx_I2C_MIS',0,3,237,4,3
	.word	5165
	.byte	13
	.byte	'Ifx_I2C_MODID',0,3,245,4,3
	.word	5978
	.byte	13
	.byte	'Ifx_I2C_MRPSCTRL',0,3,253,4,3
	.word	2822
	.byte	13
	.byte	'Ifx_I2C_PIRQSC',0,3,133,5,3
	.word	4525
	.byte	13
	.byte	'Ifx_I2C_PIRQSM',0,3,141,5,3
	.word	4137
	.byte	13
	.byte	'Ifx_I2C_PIRQSS',0,3,149,5,3
	.word	4331
	.byte	13
	.byte	'Ifx_I2C_RIS',0,3,157,5,3
	.word	4738
	.byte	13
	.byte	'Ifx_I2C_RPSSTAT',0,3,165,5,3
	.word	2929
	.byte	13
	.byte	'Ifx_I2C_RUNCTRL',0,3,173,5,3
	.word	1633
	.byte	13
	.byte	'Ifx_I2C_RXD',0,3,181,5,3
	.word	5731
	.byte	13
	.byte	'Ifx_I2C_TIMCFG',0,3,189,5,3
	.word	3430
	.byte	13
	.byte	'Ifx_I2C_TPSCTRL',0,3,197,5,3
	.word	3036
	.byte	13
	.byte	'Ifx_I2C_TXD',0,3,205,5,3
	.word	5640
	.byte	3
	.word	7126
	.byte	13
	.byte	'Ifx_I2C',0,3,136,6,3
	.word	10519
	.byte	13
	.byte	'uint8',0,6,106,29
	.word	283
	.byte	13
	.byte	'uint16',0,6,110,29
	.word	1417
	.byte	13
	.byte	'uint32',0,6,114,29
	.word	178
	.byte	13
	.byte	'Std_ReturnType',0,7,109,16
	.word	283
	.byte	13
	.byte	'I2c_ChannelType',0,2,129,1,15
	.word	283
	.byte	13
	.byte	'I2c_SizeType',0,2,131,1,16
	.word	1417
	.byte	13
	.byte	'I2c_DataType',0,2,133,1,15
	.word	283
	.byte	13
	.byte	'I2c_SlaveAddrType',0,2,135,1,16
	.word	1417
	.byte	13
	.byte	'I2c_ChannelStatusType',0,2,151,1,2
	.word	7962
	.byte	13
	.byte	'I2c_ErrorType',0,2,169,1,2
	.word	399
	.byte	13
	.byte	'I2c_AddressingModeType',0,2,175,1,2
	.word	340
	.byte	13
	.byte	'I2c_NotifType',0,2,182,1,2
	.word	701
	.byte	13
	.byte	'I2c_ChannelConfigType',0,2,209,1,2
	.word	748
	.byte	13
	.byte	'I2c_ConfigType',0,2,217,1,3
	.word	1058
	.byte	13
	.byte	'I2c_RxTransferStateType',0,4,189,1,2
	.word	8053
	.byte	13
	.byte	'I2c_OperationType',0,4,202,1,2
	.word	8004
	.byte	13
	.byte	'I2c_ChannelInfoType',0,4,220,1,3
	.word	8162
	.byte	19,8
	.word	7952
	.byte	20,1,0
.L469:
	.byte	5
	.word	10957
.L470:
	.byte	19,2
	.word	283
	.byte	20,1,0
.L471:
	.byte	19,16
	.word	8162
	.byte	20,0,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L159:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,59,0,3,8,0,0,3,53,0,73,19,0,0,4,15,0,73,19,0,0,5,38,0
	.byte	73,19,0,0,6,36,0,3,8,11,15,62,15,0,0,7,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,8,5,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,9,4,1,58,15,59,15,57,15,11,15,0,0,10,40,0,3,8,28,13,0,0,11,21,1,54,15,39
	.byte	12,0,0,12,5,0,73,19,0,0,13,22,0,3,8,58,15,59,15,57,15,73,19,0,0,14,19,1,58,15,59,15,57,15,11,15,0,0,15
	.byte	13,0,3,8,73,19,11,15,56,9,0,0,16,19,1,3,8,58,15,59,15,57,15,11,15,0,0,17,13,0,3,8,11,15,73,19,13,15,12
	.byte	15,56,9,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,1,1,11,15,73,19,0,0,20,33,0,47,15,0,0,21,46,0,3,8,58
	.byte	15,59,15,57,15,54,15,63,12,60,12,0,0,22,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L160:
	.word	.L648-.L647
.L647:
	.half	3
	.word	.L650-.L649
.L649:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0,0
	.byte	'McalLib.h',0,1,0,0
	.byte	'I2c.h',0,2,0,0
	.byte	'IfxI2c_regdef.h',0,3,0,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'Platform_Types.h',0,4,0,0
	.byte	'Std_Types.h',0,4,0,0,0
.L650:
.L648:
	.sdecl	'.debug_info',debug,cluster('I2c_Init')
	.sect	'.debug_info'
.L161:
	.word	349
	.half	3
	.word	.L162
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L164,.L163
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_Init',0,1,179,3,6,1,1,1
	.word	.L116,.L274,.L115
	.byte	4
	.byte	'ConfigPtr',0,1,181,3,31
	.word	.L275,.L276
	.byte	5
	.word	.L116,.L274
	.byte	6
	.byte	'ChannelConfigPtr',0,1,184,3,32
	.word	.L277,.L278
	.byte	6
	.byte	'HwModulePtr',0,1,185,3,12
	.word	.L279,.L280
	.byte	6
	.byte	'ClkDisableChk',0,1,186,3,9
	.word	.L281,.L282
	.byte	6
	.byte	'Channel',0,1,187,3,9
	.word	.L281,.L283
	.byte	6
	.byte	'HwUnit',0,1,188,3,9
	.word	.L281,.L284
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_Init')
	.sect	'.debug_abbrev'
.L162:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_Init')
	.sect	'.debug_line'
.L163:
	.word	.L652-.L651
.L651:
	.half	3
	.word	.L654-.L653
.L653:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L654:
	.byte	5,6,7,0,5,2
	.word	.L116
	.byte	3,178,3,1,5,17,9
	.half	.L472-.L116
	.byte	3,11,1,9
	.half	.L473-.L472
	.byte	3,31,1,5,59,9
	.half	.L475-.L473
	.byte	1,9
	.half	.L3-.L475
	.byte	3,2,1,5,37,9
	.half	.L655-.L3
	.byte	1,5,59,9
	.half	.L656-.L655
	.byte	1,5,32,9
	.half	.L477-.L656
	.byte	3,1,1,5,7,9
	.half	.L478-.L477
	.byte	3,1,1,5,21,9
	.half	.L657-.L478
	.byte	1,5,30,9
	.half	.L658-.L657
	.byte	1,5,43,9
	.half	.L659-.L658
	.byte	3,1,1,5,21,9
	.half	.L474-.L659
	.byte	1,5,7,9
	.half	.L482-.L474
	.byte	3,1,1,5,56,7,9
	.half	.L660-.L482
	.byte	3,3,1,5,23,9
	.half	.L661-.L660
	.byte	1,5,39,9
	.half	.L662-.L661
	.byte	1,9
	.half	.L483-.L662
	.byte	3,2,1,5,35,9
	.half	.L481-.L483
	.byte	3,1,1,5,68,9
	.half	.L4-.L481
	.byte	3,116,1,5,42,9
	.half	.L2-.L4
	.byte	1,5,59,9
	.half	.L663-.L2
	.byte	1,5,5,7,9
	.half	.L664-.L663
	.byte	3,15,1,5,19,7,9
	.half	.L665-.L664
	.byte	3,2,1,5,44,9
	.half	.L487-.L665
	.byte	3,2,1,5,61,9
	.half	.L666-.L487
	.byte	3,126,1,5,25,9
	.half	.L7-.L666
	.byte	3,2,1,5,9,9
	.half	.L667-.L7
	.byte	1,5,24,9
	.half	.L668-.L667
	.byte	1,5,42,9
	.half	.L669-.L668
	.byte	1,5,70,9
	.half	.L670-.L669
	.byte	3,126,1,5,44,9
	.half	.L6-.L670
	.byte	1,5,61,9
	.half	.L671-.L6
	.byte	1,5,7,7,9
	.half	.L672-.L671
	.byte	3,4,1,5,21,9
	.half	.L673-.L672
	.byte	1,5,1,9
	.half	.L5-.L673
	.byte	3,14,1,7,9
	.half	.L165-.L5
	.byte	0,1,1
.L652:
	.sdecl	'.debug_ranges',debug,cluster('I2c_Init')
	.sect	'.debug_ranges'
.L164:
	.word	-1,.L116,0,.L165-.L116,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_DeInit')
	.sect	'.debug_info'
.L166:
	.word	325
	.half	3
	.word	.L167
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L169,.L168
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_DeInit',0,1,151,4,16
	.word	.L281
	.byte	1,1,1
	.word	.L118,.L285,.L117
	.byte	4
	.word	.L118,.L285
	.byte	5
	.byte	'ChannelInfo',0,1,156,4,24
	.word	.L286,.L287
	.byte	5
	.byte	'HwModulePtr',0,1,157,4,12
	.word	.L279,.L288
	.byte	5
	.byte	'ReturnValue',0,1,158,4,18
	.word	.L281,.L289
	.byte	5
	.byte	'Channel',0,1,159,4,9
	.word	.L281,.L290
	.byte	5
	.byte	'HwUnit',0,1,160,4,9
	.word	.L281,.L291
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_DeInit')
	.sect	'.debug_abbrev'
.L167:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_DeInit')
	.sect	'.debug_line'
.L168:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L677:
	.byte	5,15,7,0,5,2
	.word	.L118
	.byte	3,161,4,1,5,30,9
	.half	.L489-.L118
	.byte	3,20,1,9
	.half	.L678-.L489
	.byte	3,1,1,5,16,9
	.half	.L491-.L678
	.byte	3,7,1,5,49,9
	.half	.L679-.L491
	.byte	3,116,1,5,22,9
	.half	.L9-.L679
	.byte	3,3,1,5,38,9
	.half	.L680-.L9
	.byte	1,5,37,9
	.half	.L681-.L680
	.byte	1,5,28,9
	.half	.L492-.L681
	.byte	3,1,1,9
	.half	.L494-.L492
	.byte	3,1,1,5,29,9
	.half	.L682-.L494
	.byte	3,1,1,5,33,9
	.half	.L683-.L682
	.byte	3,1,1,5,34,9
	.half	.L684-.L683
	.byte	3,1,1,5,30,9
	.half	.L685-.L684
	.byte	3,1,1,5,36,9
	.half	.L686-.L685
	.byte	3,1,1,5,16,9
	.half	.L495-.L686
	.byte	3,2,1,5,29,9
	.half	.L493-.L495
	.byte	1,5,51,9
	.half	.L687-.L493
	.byte	1,5,60,9
	.half	.L688-.L687
	.byte	1,5,21,9
	.half	.L496-.L688
	.byte	3,1,1,5,37,9
	.half	.L689-.L496
	.byte	1,5,33,9
	.half	.L498-.L689
	.byte	3,2,1,5,7,9
	.half	.L497-.L498
	.byte	3,2,1,5,58,9
	.half	.L690-.L497
	.byte	3,111,1,5,49,9
	.half	.L8-.L690
	.byte	1,5,5,7,9
	.half	.L691-.L8
	.byte	3,20,1,5,21,9
	.half	.L692-.L691
	.byte	1,5,19,9
	.half	.L693-.L692
	.byte	1,5,15,9
	.half	.L694-.L693
	.byte	3,92,1,5,1,9
	.half	.L490-.L694
	.byte	3,40,1,7,9
	.half	.L170-.L490
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('I2c_DeInit')
	.sect	'.debug_ranges'
.L169:
	.word	-1,.L118,0,.L170-.L118,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_SyncWrite')
	.sect	'.debug_info'
.L171:
	.word	405
	.half	3
	.word	.L172
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L174,.L173
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_SyncWrite',0,1,235,4,15
	.word	.L292
	.byte	1,1,1
	.word	.L120,.L293,.L119
	.byte	4
	.byte	'ChannelId',0,1,237,4,25
	.word	.L294,.L295
	.byte	4
	.byte	'DataPtr',0,1,238,4,23
	.word	.L296,.L297
	.byte	4
	.byte	'Size',0,1,239,4,22
	.word	.L298,.L299
	.byte	4
	.byte	'SlaveAddress',0,1,240,4,27
	.word	.L300,.L301
	.byte	5
	.word	.L120,.L293
	.byte	6
	.byte	'HwModulePtr',0,1,243,4,12
	.word	.L279,.L302
	.byte	6
	.byte	'ChannelConfigPtr',0,1,244,4,32
	.word	.L277,.L303
	.byte	6
	.byte	'ChannelInfo',0,1,245,4,24
	.word	.L286,.L304
	.byte	6
	.byte	'ReturnValue',0,1,246,4,17
	.word	.L292,.L305
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_SyncWrite')
	.sect	'.debug_abbrev'
.L172:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_SyncWrite')
	.sect	'.debug_line'
.L173:
	.word	.L696-.L695
.L695:
	.half	3
	.word	.L698-.L697
.L697:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L698:
	.byte	5,15,7,0,5,2
	.word	.L120
	.byte	3,234,4,1,5,36,9
	.half	.L501-.L120
	.byte	3,22,1,5,20,9
	.half	.L699-.L501
	.byte	1,5,35,9
	.half	.L700-.L699
	.byte	1,5,28,9
	.half	.L502-.L700
	.byte	3,1,1,5,26,9
	.half	.L701-.L502
	.byte	1,9
	.half	.L702-.L701
	.byte	3,1,1,5,27,9
	.half	.L703-.L702
	.byte	3,1,1,5,33,9
	.half	.L704-.L703
	.byte	3,1,1,5,31,9
	.half	.L705-.L704
	.byte	1,5,34,9
	.half	.L706-.L705
	.byte	3,1,1,5,32,9
	.half	.L707-.L706
	.byte	1,5,28,9
	.half	.L708-.L707
	.byte	3,1,1,5,60,9
	.half	.L709-.L708
	.byte	3,1,1,5,25,9
	.half	.L710-.L709
	.byte	1,5,38,9
	.half	.L711-.L710
	.byte	1,5,60,9
	.half	.L712-.L711
	.byte	1,5,52,9
	.half	.L503-.L712
	.byte	3,1,1,5,19,9
	.half	.L713-.L503
	.byte	1,5,35,9
	.half	.L714-.L713
	.byte	1,5,27,9
	.half	.L504-.L714
	.byte	3,3,1,5,32,9
	.half	.L715-.L504
	.byte	1,5,24,9
	.half	.L716-.L715
	.byte	3,3,1,5,5,9
	.half	.L717-.L716
	.byte	1,5,27,7,9
	.half	.L718-.L717
	.byte	3,2,1,5,53,9
	.half	.L11-.L718
	.byte	3,11,1,5,24,9
	.half	.L719-.L11
	.byte	3,121,1,5,41,9
	.half	.L720-.L719
	.byte	1,5,33,9
	.half	.L721-.L720
	.byte	3,7,1,5,30,9
	.half	.L722-.L721
	.byte	3,123,1,5,63,9
	.half	.L723-.L722
	.byte	3,10,1,5,1,9
	.half	.L175-.L723
	.byte	3,3,0,1,1
.L696:
	.sdecl	'.debug_ranges',debug,cluster('I2c_SyncWrite')
	.sect	'.debug_ranges'
.L174:
	.word	-1,.L120,0,.L175-.L120,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_SyncRead')
	.sect	'.debug_info'
.L176:
	.word	404
	.half	3
	.word	.L177
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L179,.L178
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_SyncRead',0,1,197,5,15
	.word	.L292
	.byte	1,1,1
	.word	.L122,.L306,.L121
	.byte	4
	.byte	'ChannelId',0,1,199,5,25
	.word	.L307,.L308
	.byte	4
	.byte	'DataPtr',0,1,200,5,23
	.word	.L309,.L310
	.byte	4
	.byte	'Size',0,1,201,5,22
	.word	.L311,.L312
	.byte	4
	.byte	'SlaveAddress',0,1,202,5,27
	.word	.L313,.L314
	.byte	5
	.word	.L122,.L306
	.byte	6
	.byte	'HwModulePtr',0,1,205,5,12
	.word	.L279,.L315
	.byte	6
	.byte	'ChannelInfo',0,1,206,5,24
	.word	.L286,.L316
	.byte	6
	.byte	'ChannelConfigPtr',0,1,207,5,32
	.word	.L277,.L317
	.byte	6
	.byte	'ReturnValue',0,1,208,5,17
	.word	.L292,.L318
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_SyncRead')
	.sect	'.debug_abbrev'
.L177:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_SyncRead')
	.sect	'.debug_line'
.L178:
	.word	.L725-.L724
.L724:
	.half	3
	.word	.L727-.L726
.L726:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L727:
	.byte	5,15,7,0,5,2
	.word	.L122
	.byte	3,196,5,1,5,36,9
	.half	.L509-.L122
	.byte	3,22,1,5,20,9
	.half	.L728-.L509
	.byte	1,5,35,9
	.half	.L729-.L728
	.byte	1,5,28,9
	.half	.L510-.L729
	.byte	3,1,1,5,26,9
	.half	.L730-.L510
	.byte	1,9
	.half	.L731-.L730
	.byte	3,1,1,5,27,9
	.half	.L732-.L731
	.byte	3,1,1,5,33,9
	.half	.L733-.L732
	.byte	3,1,1,5,31,9
	.half	.L734-.L733
	.byte	1,5,32,9
	.half	.L735-.L734
	.byte	3,1,1,5,60,9
	.half	.L736-.L735
	.byte	3,1,1,5,25,9
	.half	.L737-.L736
	.byte	1,5,38,9
	.half	.L738-.L737
	.byte	1,5,60,9
	.half	.L739-.L738
	.byte	1,5,28,9
	.half	.L511-.L739
	.byte	3,1,1,5,36,9
	.half	.L740-.L511
	.byte	3,1,1,5,34,9
	.half	.L741-.L740
	.byte	1,5,52,9
	.half	.L742-.L741
	.byte	3,1,1,5,19,9
	.half	.L743-.L742
	.byte	1,5,35,9
	.half	.L744-.L743
	.byte	1,5,27,9
	.half	.L512-.L744
	.byte	3,3,1,5,32,9
	.half	.L745-.L512
	.byte	1,5,24,9
	.half	.L746-.L745
	.byte	3,3,1,5,5,9
	.half	.L747-.L746
	.byte	1,5,27,7,9
	.half	.L748-.L747
	.byte	3,2,1,5,24,9
	.half	.L13-.L748
	.byte	3,3,1,5,41,9
	.half	.L749-.L13
	.byte	1,5,30,9
	.half	.L750-.L749
	.byte	3,2,1,5,62,9
	.half	.L751-.L750
	.byte	3,7,1,5,1,9
	.half	.L180-.L751
	.byte	3,3,0,1,1
.L725:
	.sdecl	'.debug_ranges',debug,cluster('I2c_SyncRead')
	.sect	'.debug_ranges'
.L179:
	.word	-1,.L122,0,.L180-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_AsyncWrite')
	.sect	'.debug_info'
.L181:
	.word	406
	.half	3
	.word	.L182
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L184,.L183
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_AsyncWrite',0,1,156,6,15
	.word	.L292
	.byte	1,1,1
	.word	.L124,.L319,.L123
	.byte	4
	.byte	'ChannelId',0,1,158,6,25
	.word	.L320,.L321
	.byte	4
	.byte	'DataPtr',0,1,159,6,23
	.word	.L322,.L323
	.byte	4
	.byte	'Size',0,1,160,6,22
	.word	.L324,.L325
	.byte	4
	.byte	'SlaveAddress',0,1,161,6,27
	.word	.L326,.L327
	.byte	5
	.word	.L124,.L319
	.byte	6
	.byte	'HwModulePtr',0,1,164,6,12
	.word	.L279,.L328
	.byte	6
	.byte	'ChannelConfigPtr',0,1,165,6,32
	.word	.L277,.L329
	.byte	6
	.byte	'ChannelInfo',0,1,166,6,24
	.word	.L286,.L330
	.byte	6
	.byte	'ReturnValue',0,1,167,6,17
	.word	.L292,.L331
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_AsyncWrite')
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_AsyncWrite')
	.sect	'.debug_line'
.L183:
	.word	.L753-.L752
.L752:
	.half	3
	.word	.L755-.L754
.L754:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L755:
	.byte	5,15,7,0,5,2
	.word	.L124
	.byte	3,169,6,1,5,36,9
	.half	.L518-.L124
	.byte	3,10,1,5,20,9
	.half	.L756-.L518
	.byte	1,5,35,9
	.half	.L757-.L756
	.byte	1,5,28,9
	.half	.L519-.L757
	.byte	3,1,1,5,26,9
	.half	.L758-.L519
	.byte	1,9
	.half	.L759-.L758
	.byte	3,1,1,5,27,9
	.half	.L760-.L759
	.byte	3,1,1,5,31,9
	.half	.L761-.L760
	.byte	3,1,1,5,34,9
	.half	.L762-.L761
	.byte	3,1,1,5,32,9
	.half	.L763-.L762
	.byte	1,5,28,9
	.half	.L764-.L763
	.byte	3,1,1,5,60,9
	.half	.L765-.L764
	.byte	3,1,1,5,25,9
	.half	.L766-.L765
	.byte	1,5,38,9
	.half	.L767-.L766
	.byte	1,5,60,9
	.half	.L768-.L767
	.byte	1,5,52,9
	.half	.L520-.L768
	.byte	3,1,1,5,19,9
	.half	.L769-.L520
	.byte	1,5,35,9
	.half	.L770-.L769
	.byte	1,5,28,9
	.half	.L521-.L770
	.byte	3,3,1,5,27,9
	.half	.L516-.L521
	.byte	3,3,1,5,32,9
	.half	.L771-.L516
	.byte	1,5,24,9
	.half	.L772-.L771
	.byte	3,3,1,5,5,9
	.half	.L773-.L772
	.byte	1,5,27,7,9
	.half	.L774-.L773
	.byte	3,2,1,5,53,9
	.half	.L15-.L774
	.byte	3,11,1,5,24,9
	.half	.L775-.L15
	.byte	3,121,1,5,41,9
	.half	.L776-.L775
	.byte	1,5,33,9
	.half	.L777-.L776
	.byte	3,7,1,5,30,9
	.half	.L778-.L777
	.byte	3,123,1,5,5,9
	.half	.L779-.L778
	.byte	3,9,1,5,1,9
	.half	.L523-.L779
	.byte	3,1,1,7,9
	.half	.L185-.L523
	.byte	0,1,1
.L753:
	.sdecl	'.debug_ranges',debug,cluster('I2c_AsyncWrite')
	.sect	'.debug_ranges'
.L184:
	.word	-1,.L124,0,.L185-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_AsyncRead')
	.sect	'.debug_info'
.L186:
	.word	405
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L189,.L188
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_AsyncRead',0,1,248,6,15
	.word	.L292
	.byte	1,1,1
	.word	.L126,.L332,.L125
	.byte	4
	.byte	'ChannelId',0,1,250,6,25
	.word	.L333,.L334
	.byte	4
	.byte	'DataPtr',0,1,251,6,23
	.word	.L335,.L336
	.byte	4
	.byte	'Size',0,1,252,6,22
	.word	.L337,.L338
	.byte	4
	.byte	'SlaveAddress',0,1,253,6,27
	.word	.L339,.L340
	.byte	5
	.word	.L126,.L332
	.byte	6
	.byte	'HwModulePtr',0,1,128,7,12
	.word	.L279,.L341
	.byte	6
	.byte	'ChannelInfo',0,1,129,7,24
	.word	.L286,.L342
	.byte	6
	.byte	'ChannelConfigPtr',0,1,130,7,32
	.word	.L277,.L343
	.byte	6
	.byte	'ReturnValue',0,1,131,7,17
	.word	.L292,.L344
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_AsyncRead')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_AsyncRead')
	.sect	'.debug_line'
.L188:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L783:
	.byte	5,15,7,0,5,2
	.word	.L126
	.byte	3,133,7,1,5,36,9
	.half	.L526-.L126
	.byte	3,10,1,5,20,9
	.half	.L784-.L526
	.byte	1,5,35,9
	.half	.L785-.L784
	.byte	1,5,28,9
	.half	.L527-.L785
	.byte	3,1,1,5,26,9
	.half	.L786-.L527
	.byte	1,9
	.half	.L787-.L786
	.byte	3,1,1,5,27,9
	.half	.L788-.L787
	.byte	3,1,1,5,31,9
	.half	.L789-.L788
	.byte	3,1,1,5,32,9
	.half	.L790-.L789
	.byte	3,1,1,5,60,9
	.half	.L791-.L790
	.byte	3,1,1,5,25,9
	.half	.L792-.L791
	.byte	1,5,38,9
	.half	.L793-.L792
	.byte	1,5,60,9
	.half	.L794-.L793
	.byte	1,5,28,9
	.half	.L529-.L794
	.byte	3,1,1,5,36,9
	.half	.L795-.L529
	.byte	3,1,1,5,34,9
	.half	.L796-.L795
	.byte	1,5,52,9
	.half	.L797-.L796
	.byte	3,1,1,5,19,9
	.half	.L798-.L797
	.byte	1,5,35,9
	.half	.L799-.L798
	.byte	1,5,28,9
	.half	.L530-.L799
	.byte	3,3,1,5,27,9
	.half	.L524-.L530
	.byte	3,3,1,5,32,9
	.half	.L800-.L524
	.byte	1,5,24,9
	.half	.L801-.L800
	.byte	3,3,1,5,5,9
	.half	.L802-.L801
	.byte	1,5,27,7,9
	.half	.L803-.L802
	.byte	3,2,1,5,24,9
	.half	.L17-.L803
	.byte	3,4,1,5,41,9
	.half	.L804-.L17
	.byte	1,5,30,9
	.half	.L805-.L804
	.byte	3,2,1,5,3,9
	.half	.L806-.L805
	.byte	3,8,1,5,1,9
	.half	.L532-.L806
	.byte	3,1,1,7,9
	.half	.L190-.L532
	.byte	0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('I2c_AsyncRead')
	.sect	'.debug_ranges'
.L189:
	.word	-1,.L126,0,.L190-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_GetStatus')
	.sect	'.debug_info'
.L191:
	.word	261
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_GetStatus',0,1,208,7,23
	.word	.L345
	.byte	1,1,1
	.word	.L128,.L346,.L127
	.byte	4
	.byte	'ChannelId',0,1,210,7,25
	.word	.L347,.L348
	.byte	5
	.word	.L128,.L346
	.byte	6
	.byte	'ReturnStatus',0,1,213,7,25
	.word	.L345,.L349
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_GetStatus')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_GetStatus')
	.sect	'.debug_line'
.L193:
	.word	.L808-.L807
.L807:
	.half	3
	.word	.L810-.L809
.L809:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L810:
	.byte	5,34,7,0,5,2
	.word	.L128
	.byte	3,231,7,1,5,18,9
	.half	.L533-.L128
	.byte	1,5,33,9
	.half	.L811-.L533
	.byte	1,5,44,9
	.half	.L812-.L811
	.byte	1,5,1,9
	.half	.L534-.L812
	.byte	3,4,1,7,9
	.half	.L195-.L534
	.byte	0,1,1
.L808:
	.sdecl	'.debug_ranges',debug,cluster('I2c_GetStatus')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L128,0,.L195-.L128,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_CancelOperation')
	.sect	'.debug_info'
.L196:
	.word	411
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_CancelOperation',0,1,135,8,16
	.word	.L281
	.byte	1,1,1
	.word	.L130,.L350,.L129
	.byte	4
	.byte	'ChannelId',0,1,137,8,23
	.word	.L351,.L352
	.byte	4
	.byte	'TransmittedDataSize',0,1,138,8,21
	.word	.L353,.L354
	.byte	5
	.word	.L130,.L350
	.byte	6
	.byte	'HwModulePtr',0,1,141,8,12
	.word	.L279,.L355
	.byte	6
	.byte	'ChannelConfigPtr',0,1,142,8,32
	.word	.L277,.L356
	.byte	6
	.byte	'ChannelInfo',0,1,143,8,24
	.word	.L286,.L357
	.byte	6
	.byte	'RetDataTransmitted',0,1,144,8,16
	.word	.L358,.L359
	.byte	6
	.byte	'ReturnValue',0,1,145,8,18
	.word	.L281,.L360
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_CancelOperation')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_CancelOperation')
	.sect	'.debug_line'
.L198:
	.word	.L814-.L813
.L813:
	.half	3
	.word	.L816-.L815
.L815:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L816:
	.byte	5,16,7,0,5,2
	.word	.L130
	.byte	3,134,8,1,5,60,9
	.half	.L537-.L130
	.byte	3,39,1,5,25,9
	.half	.L817-.L537
	.byte	1,5,38,9
	.half	.L818-.L817
	.byte	1,5,60,9
	.half	.L819-.L818
	.byte	1,5,52,9
	.half	.L538-.L819
	.byte	3,1,1,5,19,9
	.half	.L820-.L538
	.byte	1,5,35,9
	.half	.L821-.L820
	.byte	1,5,36,9
	.half	.L536-.L821
	.byte	3,1,1,5,20,9
	.half	.L535-.L536
	.byte	1,5,35,9
	.half	.L822-.L535
	.byte	1,5,27,9
	.half	.L541-.L822
	.byte	3,3,1,5,32,9
	.half	.L823-.L541
	.byte	1,5,31,9
	.half	.L824-.L823
	.byte	3,1,1,5,37,9
	.half	.L540-.L824
	.byte	3,3,1,5,28,9
	.half	.L542-.L540
	.byte	3,3,1,5,26,9
	.half	.L825-.L542
	.byte	1,5,28,9
	.half	.L826-.L825
	.byte	3,1,1,5,26,9
	.half	.L827-.L826
	.byte	1,5,29,9
	.half	.L828-.L827
	.byte	3,3,1,5,27,9
	.half	.L829-.L828
	.byte	1,5,31,9
	.half	.L830-.L829
	.byte	3,1,1,5,26,9
	.half	.L831-.L830
	.byte	3,2,1,5,1,9
	.half	.L832-.L831
	.byte	3,3,1,7,9
	.half	.L200-.L832
	.byte	0,1,1
.L814:
	.sdecl	'.debug_ranges',debug,cluster('I2c_CancelOperation')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L130,0,.L200-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_IsrI2cDtr')
	.sect	'.debug_info'
.L201:
	.word	301
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_IsrI2cDtr',0,1,140,15,6,1,1,1
	.word	.L152,.L361,.L151
	.byte	4
	.byte	'HwUnit',0,1,142,15,15
	.word	.L362,.L363
	.byte	5
	.word	.L152,.L361
	.byte	6
	.byte	'HwModulePtr',0,1,145,15,12
	.word	.L279,.L364
	.byte	6
	.byte	'ChannelInfo',0,1,146,15,24
	.word	.L286,.L365
	.byte	6
	.byte	'ChannelId',0,1,147,15,9
	.word	.L281,.L366
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_IsrI2cDtr')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_IsrI2cDtr')
	.sect	'.debug_line'
.L203:
	.word	.L834-.L833
.L833:
	.half	3
	.word	.L836-.L835
.L835:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L836:
	.byte	5,17,7,0,5,2
	.word	.L152
	.byte	3,147,15,1,5,33,9
	.half	.L837-.L152
	.byte	1,5,15,9
	.half	.L624-.L837
	.byte	3,1,1,5,29,9
	.half	.L838-.L624
	.byte	1,5,34,9
	.half	.L625-.L838
	.byte	3,1,1,5,18,9
	.half	.L626-.L625
	.byte	1,5,33,9
	.half	.L839-.L626
	.byte	1,5,17,9
	.half	.L627-.L839
	.byte	3,2,1,5,3,9
	.half	.L840-.L627
	.byte	1,5,19,7,9
	.half	.L841-.L840
	.byte	3,2,1,5,5,9
	.half	.L842-.L841
	.byte	1,5,32,7,9
	.half	.L843-.L842
	.byte	3,2,1,5,45,9
	.half	.L623-.L843
	.byte	3,2,1,5,28,9
	.half	.L91-.L623
	.byte	3,4,1,5,26,9
	.half	.L92-.L91
	.byte	3,1,1,5,24,9
	.half	.L844-.L92
	.byte	1,5,1,9
	.half	.L845-.L844
	.byte	3,3,1,7,9
	.half	.L205-.L845
	.byte	0,1,1
.L834:
	.sdecl	'.debug_ranges',debug,cluster('I2c_IsrI2cDtr')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L152,0,.L205-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_IsrI2cProtocol')
	.sect	'.debug_info'
.L206:
	.word	357
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_IsrI2cProtocol',0,1,187,15,6,1,1,1
	.word	.L154,.L367,.L153
	.byte	4
	.byte	'HwUnit',0,1,189,15,15
	.word	.L368,.L369
	.byte	5
	.word	.L154,.L367
	.byte	6
	.byte	'ChannelConfigPtr',0,1,192,15,32
	.word	.L277,.L370
	.byte	6
	.byte	'ChannelInfo',0,1,193,15,24
	.word	.L286,.L371
	.byte	6
	.byte	'HwModulePtr',0,1,194,15,12
	.word	.L279,.L372
	.byte	6
	.byte	'ErrorId',0,1,195,15,17
	.word	.L292,.L373
	.byte	6
	.byte	'ChannelId',0,1,196,15,9
	.word	.L281,.L374
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_IsrI2cProtocol')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_IsrI2cProtocol')
	.sect	'.debug_line'
.L208:
	.word	.L847-.L846
.L846:
	.half	3
	.word	.L849-.L848
.L848:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L849:
	.byte	5,15,7,0,5,2
	.word	.L154
	.byte	3,197,15,1,5,29,9
	.half	.L850-.L154
	.byte	1,5,17,9
	.half	.L631-.L850
	.byte	3,1,1,5,33,9
	.half	.L851-.L631
	.byte	1,5,34,9
	.half	.L632-.L851
	.byte	3,1,1,5,18,9
	.half	.L852-.L632
	.byte	1,5,33,9
	.half	.L853-.L852
	.byte	1,5,58,9
	.half	.L633-.L853
	.byte	3,1,1,5,23,9
	.half	.L854-.L633
	.byte	1,5,36,9
	.half	.L855-.L854
	.byte	1,5,58,9
	.half	.L856-.L855
	.byte	1,5,26,9
	.half	.L634-.L856
	.byte	3,2,1,5,29,9
	.half	.L857-.L634
	.byte	1,5,3,9
	.half	.L858-.L857
	.byte	1,5,19,7,9
	.half	.L859-.L858
	.byte	3,2,1,5,5,9
	.half	.L860-.L859
	.byte	1,5,31,7,9
	.half	.L861-.L860
	.byte	3,2,1,5,7,9
	.half	.L862-.L861
	.byte	1,5,17,7,9
	.half	.L863-.L862
	.byte	3,2,1,5,29,9
	.half	.L630-.L863
	.byte	1,5,36,9
	.half	.L96-.L630
	.byte	3,2,1,5,12,9
	.half	.L864-.L96
	.byte	1,5,17,7,9
	.half	.L865-.L864
	.byte	3,2,1,5,39,9
	.half	.L636-.L865
	.byte	1,5,36,9
	.half	.L98-.L636
	.byte	3,2,1,5,12,9
	.half	.L866-.L98
	.byte	1,5,36,7,9
	.half	.L867-.L866
	.byte	3,4,1,5,12,9
	.half	.L868-.L867
	.byte	1,5,17,7,9
	.half	.L100-.L868
	.byte	3,2,1,5,29,9
	.half	.L637-.L100
	.byte	1,5,17,9
	.half	.L101-.L637
	.byte	3,4,1,5,30,9
	.half	.L97-.L101
	.byte	3,3,1,5,28,9
	.half	.L869-.L97
	.byte	1,5,31,9
	.half	.L870-.L869
	.byte	3,1,1,5,29,9
	.half	.L871-.L870
	.byte	1,5,33,9
	.half	.L872-.L871
	.byte	3,1,1,5,31,9
	.half	.L873-.L872
	.byte	1,5,29,9
	.half	.L874-.L873
	.byte	3,3,1,5,34,9
	.half	.L875-.L874
	.byte	1,5,37,9
	.half	.L876-.L875
	.byte	3,3,1,5,7,9
	.half	.L877-.L876
	.byte	1,5,36,7,9
	.half	.L878-.L877
	.byte	3,3,1,5,58,9
	.half	.L635-.L878
	.byte	1,5,31,7,9
	.half	.L95-.L635
	.byte	3,5,1,5,29,9
	.half	.L879-.L95
	.byte	1,5,1,9
	.half	.L94-.L879
	.byte	3,3,1,7,9
	.half	.L210-.L94
	.byte	0,1,1
.L847:
	.sdecl	'.debug_ranges',debug,cluster('I2c_IsrI2cProtocol')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L154,0,.L210-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_IsrI2cError')
	.sect	'.debug_info'
.L211:
	.word	354
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_IsrI2cError',0,1,140,16,6,1,1,1
	.word	.L156,.L375,.L155
	.byte	4
	.byte	'HwUnit',0,1,142,16,15
	.word	.L376,.L377
	.byte	5
	.word	.L156,.L375
	.byte	6
	.byte	'ChannelConfigPtr',0,1,145,16,32
	.word	.L277,.L378
	.byte	6
	.byte	'ChannelInfo',0,1,146,16,24
	.word	.L286,.L379
	.byte	6
	.byte	'HwModulePtr',0,1,147,16,12
	.word	.L279,.L380
	.byte	6
	.byte	'ErrorId',0,1,148,16,17
	.word	.L292,.L381
	.byte	6
	.byte	'ChannelId',0,1,149,16,9
	.word	.L281,.L382
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_IsrI2cError')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_IsrI2cError')
	.sect	'.debug_line'
.L213:
	.word	.L881-.L880
.L880:
	.half	3
	.word	.L883-.L882
.L882:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L883:
	.byte	5,15,7,0,5,2
	.word	.L156
	.byte	3,150,16,1,5,29,9
	.half	.L884-.L156
	.byte	1,5,17,9
	.half	.L639-.L884
	.byte	3,1,1,5,33,9
	.half	.L885-.L639
	.byte	1,5,34,9
	.half	.L640-.L885
	.byte	3,1,1,5,18,9
	.half	.L886-.L640
	.byte	1,5,33,9
	.half	.L887-.L886
	.byte	1,5,58,9
	.half	.L641-.L887
	.byte	3,1,1,5,23,9
	.half	.L888-.L641
	.byte	1,5,36,9
	.half	.L889-.L888
	.byte	1,5,58,9
	.half	.L890-.L889
	.byte	1,5,28,9
	.half	.L642-.L890
	.byte	3,2,1,5,31,9
	.half	.L891-.L642
	.byte	1,5,3,9
	.half	.L892-.L891
	.byte	1,5,28,7,9
	.half	.L893-.L892
	.byte	3,2,1,5,26,9
	.half	.L638-.L893
	.byte	1,5,31,9
	.half	.L894-.L638
	.byte	3,2,1,5,5,9
	.half	.L895-.L894
	.byte	1,5,36,7,9
	.half	.L896-.L895
	.byte	3,4,1,5,10,9
	.half	.L897-.L896
	.byte	1,5,15,7,9
	.half	.L898-.L897
	.byte	3,2,1,5,32,9
	.half	.L644-.L898
	.byte	1,5,36,9
	.half	.L108-.L644
	.byte	3,2,1,5,10,9
	.half	.L899-.L108
	.byte	1,5,16,7,9
	.half	.L900-.L899
	.byte	3,2,1,5,34,9
	.half	.L645-.L900
	.byte	1,5,36,9
	.half	.L110-.L645
	.byte	3,2,1,5,10,9
	.half	.L901-.L110
	.byte	1,5,15,7,9
	.half	.L902-.L901
	.byte	3,2,1,5,32,9
	.half	.L646-.L902
	.byte	1,5,15,9
	.half	.L112-.L646
	.byte	3,4,1,5,29,9
	.half	.L107-.L112
	.byte	3,3,1,5,27,9
	.half	.L903-.L107
	.byte	1,5,31,9
	.half	.L904-.L903
	.byte	3,1,1,5,29,9
	.half	.L905-.L904
	.byte	1,5,28,9
	.half	.L906-.L905
	.byte	3,3,1,5,33,9
	.half	.L907-.L906
	.byte	1,5,35,9
	.half	.L908-.L907
	.byte	3,3,1,5,5,9
	.half	.L909-.L908
	.byte	1,5,34,7,9
	.half	.L910-.L909
	.byte	3,3,1,5,56,9
	.half	.L643-.L910
	.byte	1,5,1,7,9
	.half	.L105-.L643
	.byte	3,4,1,7,9
	.half	.L215-.L105
	.byte	0,1,1
.L881:
	.sdecl	'.debug_ranges',debug,cluster('I2c_IsrI2cError')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L156,0,.L215-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lSyncTransmit')
	.sect	'.debug_info'
.L216:
	.word	414
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lSyncTransmit',0,1,214,12,22
	.word	.L292
	.byte	1,1
	.word	.L146,.L383,.L145
	.byte	4
	.byte	'HwModulePtr',0,1,216,12,18
	.word	.L384,.L385
	.byte	4
	.byte	'ChannelInfo',0,1,217,12,31
	.word	.L386,.L387
	.byte	4
	.byte	'ChannelId',0,1,218,12,25
	.word	.L388,.L389
	.byte	5
	.word	.L146,.L383
	.byte	6
	.byte	'ErrorId',0,1,221,12,17
	.word	.L292,.L390
	.byte	6
	.byte	'TransmitPending',0,1,222,12,27
	.word	.L391,.L392
	.byte	6
	.byte	'ERRIRQSS_Val',0,1,223,12,10
	.word	.L393,.L394
	.byte	6
	.byte	'PIRQSS_Val',0,1,224,12,10
	.word	.L393,.L395
	.byte	6
	.byte	'TimeOutValue',0,1,225,12,10
	.word	.L393,.L396
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lSyncTransmit')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lSyncTransmit')
	.sect	'.debug_line'
.L218:
	.word	.L912-.L911
.L911:
	.half	3
	.word	.L914-.L913
.L913:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L914:
	.byte	5,22,7,0,5,2
	.word	.L146
	.byte	3,213,12,1,5,53,9
	.half	.L578-.L146
	.byte	3,13,1,5,18,9
	.half	.L915-.L578
	.byte	1,5,31,9
	.half	.L916-.L915
	.byte	1,5,53,9
	.half	.L917-.L916
	.byte	1,5,64,9
	.half	.L918-.L917
	.byte	1,5,19,9
	.half	.L579-.L918
	.byte	3,1,1,5,11,9
	.half	.L580-.L579
	.byte	3,1,1,5,28,9
	.half	.L581-.L580
	.byte	3,11,1,5,71,9
	.half	.L919-.L581
	.byte	3,119,1,5,41,9
	.half	.L44-.L919
	.byte	3,3,1,5,44,9
	.half	.L920-.L44
	.byte	1,5,37,9
	.half	.L582-.L920
	.byte	3,1,1,5,40,9
	.half	.L921-.L582
	.byte	1,5,25,9
	.half	.L584-.L921
	.byte	3,2,1,5,28,9
	.half	.L922-.L584
	.byte	1,5,5,9
	.half	.L923-.L922
	.byte	1,5,30,7,9
	.half	.L924-.L923
	.byte	3,2,1,5,26,9
	.half	.L583-.L924
	.byte	3,1,1,5,42,9
	.half	.L925-.L583
	.byte	3,127,1,5,13,9
	.half	.L45-.L925
	.byte	3,4,1,5,49,7,9
	.half	.L926-.L45
	.byte	1,5,32,7,9
	.half	.L47-.L926
	.byte	3,2,1,5,30,9
	.half	.L927-.L47
	.byte	1,5,35,9
	.half	.L928-.L927
	.byte	3,2,1,5,9,9
	.half	.L929-.L928
	.byte	1,5,40,7,9
	.half	.L930-.L929
	.byte	3,4,1,5,14,9
	.half	.L931-.L930
	.byte	1,5,19,7,9
	.half	.L932-.L931
	.byte	3,2,1,5,36,9
	.half	.L933-.L932
	.byte	1,5,38,9
	.half	.L51-.L933
	.byte	3,2,1,5,14,9
	.half	.L934-.L51
	.byte	1,5,19,7,9
	.half	.L935-.L934
	.byte	3,2,1,5,31,9
	.half	.L936-.L935
	.byte	1,5,38,9
	.half	.L53-.L936
	.byte	3,2,1,5,14,9
	.half	.L937-.L53
	.byte	1,5,19,7,9
	.half	.L938-.L937
	.byte	3,2,1,5,41,9
	.half	.L939-.L938
	.byte	1,5,38,9
	.half	.L55-.L939
	.byte	3,2,1,5,14,9
	.half	.L940-.L55
	.byte	1,5,19,7,9
	.half	.L941-.L940
	.byte	3,2,1,5,31,9
	.half	.L942-.L941
	.byte	1,5,19,9
	.half	.L57-.L942
	.byte	3,4,1,5,25,9
	.half	.L50-.L57
	.byte	3,3,1,5,35,9
	.half	.L943-.L50
	.byte	3,1,1,5,15,9
	.half	.L46-.L943
	.byte	3,6,1,5,9,9
	.half	.L43-.L46
	.byte	3,80,1,5,66,7,9
	.half	.L944-.L43
	.byte	1,5,25,7,9
	.half	.L59-.L944
	.byte	3,50,1,5,30,9
	.half	.L945-.L59
	.byte	1,5,3,9
	.half	.L946-.L945
	.byte	3,1,1,5,1,9
	.half	.L588-.L946
	.byte	3,1,1,7,9
	.half	.L220-.L588
	.byte	0,1,1
.L912:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lSyncTransmit')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L146,0,.L220-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lSyncReceive')
	.sect	'.debug_info'
.L221:
	.word	412
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lSyncReceive',0,1,168,14,22
	.word	.L292
	.byte	1,1
	.word	.L150,.L397,.L149
	.byte	4
	.byte	'HwModulePtr',0,1,170,14,18
	.word	.L398,.L399
	.byte	4
	.byte	'ChannelInfo',0,1,171,14,31
	.word	.L400,.L401
	.byte	4
	.byte	'ChannelId',0,1,172,14,25
	.word	.L402,.L403
	.byte	5
	.word	.L150,.L397
	.byte	6
	.byte	'ErrorId',0,1,175,14,17
	.word	.L292,.L404
	.byte	6
	.byte	'ReceivePending',0,1,176,14,27
	.word	.L405,.L406
	.byte	6
	.byte	'ERRIRQSS_Val',0,1,177,14,10
	.word	.L393,.L407
	.byte	6
	.byte	'PIRQSS_Val',0,1,178,14,10
	.word	.L393,.L408
	.byte	6
	.byte	'TimeOutValue',0,1,179,14,10
	.word	.L393,.L409
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lSyncReceive')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lSyncReceive')
	.sect	'.debug_line'
.L223:
	.word	.L948-.L947
.L947:
	.half	3
	.word	.L950-.L949
.L949:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L950:
	.byte	5,22,7,0,5,2
	.word	.L150
	.byte	3,167,14,1,5,53,9
	.half	.L606-.L150
	.byte	3,13,1,5,18,9
	.half	.L951-.L606
	.byte	1,5,31,9
	.half	.L952-.L951
	.byte	1,5,53,9
	.half	.L953-.L952
	.byte	1,5,64,9
	.half	.L954-.L953
	.byte	1,5,18,9
	.half	.L607-.L954
	.byte	3,1,1,5,11,9
	.half	.L608-.L607
	.byte	3,1,1,5,41,9
	.half	.L609-.L608
	.byte	3,38,1,5,32,9
	.half	.L610-.L609
	.byte	3,5,1,5,28,9
	.half	.L955-.L610
	.byte	3,7,1,5,70,9
	.half	.L956-.L955
	.byte	3,80,1,5,41,9
	.half	.L71-.L956
	.byte	3,3,1,5,44,9
	.half	.L957-.L71
	.byte	1,5,37,9
	.half	.L611-.L957
	.byte	3,1,1,5,40,9
	.half	.L613-.L611
	.byte	1,5,8,9
	.half	.L958-.L613
	.byte	3,1,1,5,44,7,9
	.half	.L959-.L958
	.byte	1,5,33,7,9
	.half	.L72-.L959
	.byte	3,3,1,5,7,9
	.half	.L614-.L72
	.byte	1,5,18,7,9
	.half	.L960-.L614
	.byte	3,2,1,5,36,9
	.half	.L961-.L960
	.byte	1,5,38,9
	.half	.L74-.L961
	.byte	3,2,1,5,12,9
	.half	.L962-.L74
	.byte	1,5,17,7,9
	.half	.L963-.L962
	.byte	3,2,1,5,34,9
	.half	.L964-.L963
	.byte	1,5,36,9
	.half	.L76-.L964
	.byte	3,2,1,5,12,9
	.half	.L965-.L76
	.byte	1,5,17,7,9
	.half	.L966-.L965
	.byte	3,2,1,5,29,9
	.half	.L967-.L966
	.byte	1,5,36,9
	.half	.L78-.L967
	.byte	3,2,1,5,12,9
	.half	.L968-.L78
	.byte	1,5,17,7,9
	.half	.L969-.L968
	.byte	3,2,1,5,39,9
	.half	.L970-.L969
	.byte	1,5,36,9
	.half	.L80-.L970
	.byte	3,2,1,5,12,9
	.half	.L971-.L80
	.byte	1,5,17,7,9
	.half	.L972-.L971
	.byte	3,2,1,5,29,9
	.half	.L973-.L972
	.byte	1,5,15,9
	.half	.L82-.L973
	.byte	3,4,1,5,33,9
	.half	.L75-.L82
	.byte	3,2,1,5,22,9
	.half	.L612-.L75
	.byte	3,1,1,5,10,9
	.half	.L974-.L612
	.byte	1,5,21,7,9
	.half	.L975-.L974
	.byte	3,1,1,5,39,7,9
	.half	.L616-.L975
	.byte	3,2,1,5,59,9
	.half	.L617-.L616
	.byte	1,5,24,9
	.half	.L84-.L617
	.byte	3,4,1,5,30,9
	.half	.L976-.L84
	.byte	3,1,1,5,7,9
	.half	.L977-.L976
	.byte	3,125,1,5,30,9
	.half	.L73-.L977
	.byte	3,7,1,5,33,9
	.half	.L619-.L73
	.byte	1,5,10,9
	.half	.L978-.L619
	.byte	1,5,29,7,9
	.half	.L979-.L978
	.byte	3,2,1,5,26,9
	.half	.L618-.L979
	.byte	3,1,1,5,17,9
	.half	.L86-.L618
	.byte	3,6,1,5,9,9
	.half	.L70-.L86
	.byte	3,74,1,5,65,7,9
	.half	.L980-.L70
	.byte	1,5,25,7,9
	.half	.L89-.L980
	.byte	3,56,1,5,30,9
	.half	.L981-.L89
	.byte	1,5,3,9
	.half	.L982-.L981
	.byte	3,1,1,5,1,9
	.half	.L622-.L982
	.byte	3,1,1,7,9
	.half	.L225-.L622
	.byte	0,1,1
.L948:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lSyncReceive')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L150,0,.L225-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lHwEnableInterrupt')
	.sect	'.debug_info'
.L226:
	.word	240
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lHwEnableInterrupt',0,1,224,9,13,1,1
	.word	.L138,.L410,.L137
	.byte	4
	.byte	'HwModulePtr',0,1,226,9,18
	.word	.L411,.L412
	.byte	5
	.word	.L138,.L410
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lHwEnableInterrupt')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lHwEnableInterrupt')
	.sect	'.debug_line'
.L228:
	.word	.L984-.L983
.L983:
	.half	3
	.word	.L986-.L985
.L985:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L986:
	.byte	5,25,7,0,5,2
	.word	.L138
	.byte	3,229,9,1,5,23,9
	.half	.L987-.L138
	.byte	1,5,27,9
	.half	.L988-.L987
	.byte	3,2,1,5,25,9
	.half	.L989-.L988
	.byte	1,5,1,9
	.half	.L990-.L989
	.byte	3,1,1,7,9
	.half	.L230-.L990
	.byte	0,1,1
.L984:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lHwEnableInterrupt')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L138,0,.L230-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lSendMasterCode')
	.sect	'.debug_info'
.L231:
	.word	237
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lSendMasterCode',0,1,255,9,13,1,1
	.word	.L140,.L413,.L139
	.byte	4
	.byte	'HwModulePtr',0,1,129,10,18
	.word	.L414,.L415
	.byte	5
	.word	.L140,.L413
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lSendMasterCode')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lSendMasterCode')
	.sect	'.debug_line'
.L233:
	.word	.L992-.L991
.L991:
	.half	3
	.word	.L994-.L993
.L993:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L994:
	.byte	5,28,7,0,5,2
	.word	.L140
	.byte	3,132,10,1,5,26,9
	.half	.L995-.L140
	.byte	1,5,24,9
	.half	.L996-.L995
	.byte	3,2,1,5,22,9
	.half	.L997-.L996
	.byte	1,5,24,9
	.half	.L998-.L997
	.byte	3,2,1,5,22,9
	.half	.L999-.L998
	.byte	1,5,27,9
	.half	.L1000-.L999
	.byte	3,2,1,5,25,9
	.half	.L1001-.L1000
	.byte	1,5,1,9
	.half	.L1002-.L1001
	.byte	3,1,1,7,9
	.half	.L235-.L1002
	.byte	0,1,1
.L992:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lSendMasterCode')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L140,0,.L235-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.debug_info'
.L236:
	.word	243
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lHwClearAllInterrupts',0,1,135,9,13,1,1
	.word	.L134,.L416,.L133
	.byte	4
	.byte	'HwModulePtr',0,1,137,9,18
	.word	.L417,.L418
	.byte	5
	.word	.L134,.L416
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.debug_line'
.L238:
	.word	.L1004-.L1003
.L1003:
	.half	3
	.word	.L1006-.L1005
.L1005:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L1006:
	.byte	5,33,7,0,5,2
	.word	.L134
	.byte	3,140,9,1,5,23,9
	.half	.L1007-.L134
	.byte	1,5,25,9
	.half	.L1008-.L1007
	.byte	3,2,1,5,27,9
	.half	.L1009-.L1008
	.byte	3,2,1,5,25,9
	.half	.L1010-.L1009
	.byte	1,5,27,9
	.half	.L1011-.L1010
	.byte	3,2,1,5,29,9
	.half	.L1012-.L1011
	.byte	3,2,1,5,27,9
	.half	.L1013-.L1012
	.byte	1,5,1,9
	.half	.L1014-.L1013
	.byte	3,2,1,7,9
	.half	.L240-.L1014
	.byte	0,1,1
.L1004:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L134,0,.L240-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lHwInit')
	.sect	'.debug_info'
.L241:
	.word	304
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lHwInit',0,1,222,8,14
	.word	.L281
	.byte	1,1
	.word	.L132,.L419,.L131
	.byte	4
	.byte	'HwUnit',0,1,224,8,15
	.word	.L420,.L421
	.byte	4
	.byte	'ConfigPtr',0,1,225,8,25
	.word	.L422,.L423
	.byte	5
	.word	.L132,.L419
	.byte	6
	.byte	'HwModulePtr',0,1,228,8,12
	.word	.L279,.L424
	.byte	6
	.byte	'ClkDisableChk',0,1,229,8,9
	.word	.L281,.L425
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lHwInit')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lHwInit')
	.sect	'.debug_line'
.L243:
	.word	.L1016-.L1015
.L1015:
	.half	3
	.word	.L1018-.L1017
.L1017:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L1018:
	.byte	5,14,7,0,5,2
	.word	.L132
	.byte	3,221,8,1,5,21,9
	.half	.L547-.L132
	.byte	3,9,1,5,37,9
	.half	.L1019-.L547
	.byte	1,5,17,9
	.half	.L544-.L1019
	.byte	3,1,1,5,33,9
	.half	.L1020-.L544
	.byte	1,5,3,9
	.half	.L548-.L1020
	.byte	3,2,1,5,37,9
	.half	.L1021-.L548
	.byte	3,1,1,5,3,9
	.half	.L549-.L1021
	.byte	3,1,1,5,58,7,9
	.half	.L1022-.L549
	.byte	3,2,1,5,36,9
	.half	.L546-.L1022
	.byte	1,5,58,9
	.half	.L1023-.L546
	.byte	1,5,66,9
	.half	.L1024-.L1023
	.byte	1,5,25,9
	.half	.L1025-.L1024
	.byte	1,5,40,9
	.half	.L1026-.L1025
	.byte	3,1,1,5,1,9
	.half	.L21-.L1026
	.byte	3,3,1,7,9
	.half	.L245-.L21
	.byte	0,1,1
.L1016:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lHwInit')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L132,0,.L245-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.debug_info'
.L246:
	.word	291
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lHwUpdateModuleReg',0,1,178,9,13,1,1
	.word	.L136,.L426,.L135
	.byte	4
	.byte	'HwUnit',0,1,180,9,15
	.word	.L427,.L428
	.byte	4
	.byte	'ChannelConfigPtr',0,1,181,9,38
	.word	.L429,.L430
	.byte	5
	.word	.L136,.L426
	.byte	6
	.byte	'HwModulePtr',0,1,184,9,12
	.word	.L279,.L431
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.debug_line'
.L248:
	.word	.L1028-.L1027
.L1027:
	.half	3
	.word	.L1030-.L1029
.L1029:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L1030:
	.byte	5,17,7,0,5,2
	.word	.L136
	.byte	3,185,9,1,5,33,9
	.half	.L1031-.L136
	.byte	1,5,25,9
	.half	.L550-.L1031
	.byte	3,3,1,5,30,9
	.half	.L1032-.L550
	.byte	1,5,44,9
	.half	.L1033-.L1032
	.byte	3,2,1,5,26,9
	.half	.L1034-.L1033
	.byte	1,5,48,9
	.half	.L1035-.L1034
	.byte	3,2,1,5,30,9
	.half	.L1036-.L1035
	.byte	1,5,44,9
	.half	.L1037-.L1036
	.byte	3,2,1,5,26,9
	.half	.L1038-.L1037
	.byte	1,5,43,9
	.half	.L1039-.L1038
	.byte	3,2,1,5,25,9
	.half	.L1040-.L1039
	.byte	1,5,44,9
	.half	.L1041-.L1040
	.byte	3,2,1,5,26,9
	.half	.L1042-.L1041
	.byte	1,5,3,9
	.half	.L1043-.L1042
	.byte	3,2,1,5,1,9
	.half	.L1044-.L1043
	.byte	3,2,1,7,9
	.half	.L250-.L1044
	.byte	0,1,1
.L1028:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L136,0,.L250-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lResetKernels')
	.sect	'.debug_info'
.L251:
	.word	282
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lResetKernels',0,1,161,10,13,1,1
	.word	.L142,.L432,.L141
	.byte	4
	.byte	'HwModulePtr',0,1,163,10,19
	.word	.L433,.L434
	.byte	5
	.word	.L142,.L432
	.byte	6
	.byte	'RstStatus',0,1,166,10,10
	.word	.L393,.L435
	.byte	6
	.byte	'WaitCount',0,1,167,10,10
	.word	.L393,.L436
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lResetKernels')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lResetKernels')
	.sect	'.debug_line'
.L253:
	.word	.L1046-.L1045
.L1045:
	.half	3
	.word	.L1048-.L1047
.L1047:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L1048:
	.byte	5,13,7,0,5,2
	.word	.L142
	.byte	3,160,10,1,5,3,9
	.half	.L552-.L142
	.byte	3,8,1,9
	.half	.L1049-.L552
	.byte	3,1,1,5,13,9
	.half	.L1050-.L1049
	.byte	3,3,1,5,14,9
	.half	.L23-.L1050
	.byte	3,3,1,5,28,9
	.half	.L1051-.L23
	.byte	3,4,1,5,11,9
	.half	.L1052-.L1051
	.byte	3,3,1,5,43,7,9
	.half	.L1053-.L1052
	.byte	1,5,3,7,9
	.half	.L24-.L1053
	.byte	3,2,1,5,1,9
	.half	.L255-.L24
	.byte	3,3,0,1,1
.L1046:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lResetKernels')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L142,0,.L255-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lWrite')
	.sect	'.debug_info'
.L256:
	.word	491
	.half	3
	.word	.L257
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L259,.L258
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lWrite',0,1,193,11,14,1,1
	.word	.L144,.L437,.L143
	.byte	4
	.byte	'HwModulePtr',0,1,195,11,18
	.word	.L438,.L439
	.byte	4
	.byte	'ChannelInfo',0,1,196,11,30
	.word	.L440,.L441
	.byte	5
	.word	.L144,.L437
	.byte	6
	.byte	'DataPointer',0,1,199,11,23
	.word	.L442,.L443
	.byte	6
	.byte	'TxData',0,1,200,11,10
	.word	.L393,.L444
	.byte	6
	.byte	'TempTxData',0,1,201,11,10
	.word	.L393,.L445
	.byte	6
	.byte	'DataLeft',0,1,202,11,10
	.word	.L358,.L446
	.byte	6
	.byte	'TxdCnt',0,1,203,11,10
	.word	.L358,.L447
	.byte	6
	.byte	'SlaveAddr',0,1,204,11,10
	.word	.L358,.L448
	.byte	6
	.byte	'UpperSlaveAddr',0,1,205,11,9
	.word	.L281,.L449
	.byte	6
	.byte	'Counter',0,1,206,11,9
	.word	.L281,.L450
	.byte	6
	.byte	'FilledFIFOStage',0,1,207,11,9
	.word	.L281,.L451
	.byte	6
	.byte	'FIFOCounter',0,1,208,11,9
	.word	.L281,.L452
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lWrite')
	.sect	'.debug_abbrev'
.L257:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lWrite')
	.sect	'.debug_line'
.L258:
	.word	.L1055-.L1054
.L1054:
	.half	3
	.word	.L1057-.L1056
.L1056:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L1057:
	.byte	5,25,7,0,5,2
	.word	.L144
	.byte	3,209,11,1,5,23,9
	.half	.L553-.L144
	.byte	3,1,1,5,3,9
	.half	.L554-.L553
	.byte	3,3,1,5,20,7,9
	.half	.L1058-.L554
	.byte	3,3,1,5,5,9
	.half	.L1059-.L1058
	.byte	1,5,23,7,9
	.half	.L1060-.L1059
	.byte	3,2,1,5,45,9
	.half	.L556-.L1060
	.byte	1,5,25,9
	.half	.L25-.L556
	.byte	3,15,1,5,28,9
	.half	.L1061-.L25
	.byte	1,5,5,9
	.half	.L1062-.L1061
	.byte	1,5,22,7,9
	.half	.L1063-.L1062
	.byte	3,3,1,5,7,9
	.half	.L1064-.L1063
	.byte	1,5,26,7,9
	.half	.L1065-.L1064
	.byte	3,2,1,5,53,9
	.half	.L557-.L1065
	.byte	1,5,35,9
	.half	.L26-.L557
	.byte	3,5,1,5,25,9
	.half	.L558-.L26
	.byte	3,2,1,5,36,9
	.half	.L559-.L558
	.byte	1,5,10,9
	.half	.L560-.L559
	.byte	1,5,27,7,9
	.half	.L1066-.L560
	.byte	3,2,1,5,7,9
	.half	.L1067-.L1066
	.byte	3,121,1,5,23,9
	.half	.L28-.L1067
	.byte	3,13,1,5,15,9
	.half	.L27-.L28
	.byte	3,5,1,5,28,9
	.half	.L561-.L27
	.byte	3,1,1,5,11,9
	.half	.L563-.L561
	.byte	3,7,1,5,38,9
	.half	.L1068-.L563
	.byte	3,123,1,5,12,9
	.half	.L34-.L1068
	.byte	3,2,1,5,8,9
	.half	.L564-.L34
	.byte	3,1,1,5,39,7,9
	.half	.L1069-.L564
	.byte	1,5,11,7,9
	.half	.L1070-.L1069
	.byte	3,2,1,5,24,9
	.half	.L1071-.L1070
	.byte	1,5,46,9
	.half	.L1072-.L1071
	.byte	1,5,8,9
	.half	.L1073-.L1072
	.byte	1,5,34,7,9
	.half	.L1074-.L1073
	.byte	3,3,1,5,46,9
	.half	.L565-.L1074
	.byte	1,5,19,9
	.half	.L1075-.L565
	.byte	3,2,1,5,18,9
	.half	.L566-.L1075
	.byte	3,1,1,5,63,9
	.half	.L568-.L566
	.byte	3,126,1,5,33,9
	.half	.L37-.L568
	.byte	3,7,1,5,34,9
	.half	.L567-.L37
	.byte	3,2,1,5,58,9
	.half	.L1076-.L567
	.byte	1,5,40,9
	.half	.L570-.L1076
	.byte	3,9,1,5,62,9
	.half	.L1077-.L570
	.byte	1,5,54,9
	.half	.L569-.L1077
	.byte	3,1,1,5,18,9
	.half	.L1078-.L569
	.byte	3,1,1,5,8,9
	.half	.L571-.L1078
	.byte	3,112,1,5,15,9
	.half	.L35-.L571
	.byte	3,21,1,5,73,9
	.half	.L572-.L35
	.byte	3,3,1,5,32,9
	.half	.L41-.L572
	.byte	3,2,1,5,35,9
	.half	.L573-.L41
	.byte	3,1,1,5,31,9
	.half	.L1079-.L573
	.byte	1,5,15,9
	.half	.L574-.L1079
	.byte	1,5,14,9
	.half	.L1080-.L574
	.byte	3,1,1,5,16,9
	.half	.L575-.L1080
	.byte	3,1,1,5,15,9
	.half	.L1081-.L575
	.byte	3,1,1,5,11,9
	.half	.L40-.L1081
	.byte	3,122,1,5,68,7,9
	.half	.L1082-.L40
	.byte	1,5,17,7,9
	.half	.L42-.L1082
	.byte	3,9,1,5,25,9
	.half	.L576-.L42
	.byte	3,1,1,5,38,9
	.half	.L33-.L576
	.byte	3,81,1,5,25,7,9
	.half	.L1083-.L33
	.byte	3,50,1,5,29,9
	.half	.L1084-.L1083
	.byte	3,1,1,5,1,9
	.half	.L1085-.L1084
	.byte	3,1,1,7,9
	.half	.L260-.L1085
	.byte	0,1,1
.L1055:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lWrite')
	.sect	'.debug_ranges'
.L259:
	.word	-1,.L144,0,.L260-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_lRead')
	.sect	'.debug_info'
.L261:
	.word	484
	.half	3
	.word	.L262
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L264,.L263
	.byte	2
	.word	.L157
	.byte	3
	.byte	'I2c_lRead',0,1,182,13,13,1,1
	.word	.L148,.L453,.L147
	.byte	4
	.byte	'HwModulePtr',0,1,184,13,18
	.word	.L454,.L455
	.byte	4
	.byte	'ChannelInfo',0,1,185,13,30
	.word	.L456,.L457
	.byte	5
	.word	.L148,.L453
	.byte	6
	.byte	'DataPointer',0,1,188,13,17
	.word	.L458,.L459
	.byte	6
	.byte	'RxData',0,1,189,13,10
	.word	.L393,.L460
	.byte	6
	.byte	'TxData',0,1,190,13,10
	.word	.L393,.L461
	.byte	6
	.byte	'SlaveAddr',0,1,191,13,10
	.word	.L358,.L462
	.byte	6
	.byte	'DataLeft',0,1,192,13,10
	.word	.L358,.L463
	.byte	6
	.byte	'RxdCnt',0,1,193,13,10
	.word	.L358,.L464
	.byte	6
	.byte	'UpperSlaveAddr',0,1,194,13,9
	.word	.L281,.L465
	.byte	6
	.byte	'LoopCount',0,1,195,13,9
	.word	.L281,.L466
	.byte	6
	.byte	'Counter',0,1,196,13,9
	.word	.L281,.L467
	.byte	6
	.byte	'FilledFIFOStage',0,1,197,13,9
	.word	.L281,.L468
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_lRead')
	.sect	'.debug_abbrev'
.L262:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('I2c_lRead')
	.sect	'.debug_line'
.L263:
	.word	.L1087-.L1086
.L1086:
	.half	3
	.word	.L1089-.L1088
.L1088:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0,0,0,0,0
.L1089:
	.byte	5,25,7,0,5,2
	.word	.L148
	.byte	3,199,13,1,5,23,9
	.half	.L589-.L148
	.byte	3,1,1,5,17,9
	.half	.L591-.L589
	.byte	3,2,1,5,3,9
	.half	.L1090-.L591
	.byte	1,5,37,7,9
	.half	.L1091-.L1090
	.byte	3,2,1,5,35,9
	.half	.L1092-.L1091
	.byte	1,5,28,9
	.half	.L1093-.L1092
	.byte	3,2,1,5,8,9
	.half	.L590-.L1093
	.byte	3,1,1,5,21,9
	.half	.L1094-.L590
	.byte	1,5,43,9
	.half	.L1095-.L1094
	.byte	1,5,5,9
	.half	.L1096-.L1095
	.byte	1,5,36,7,9
	.half	.L1097-.L1096
	.byte	3,3,1,5,66,9
	.half	.L593-.L1097
	.byte	1,5,53,9
	.half	.L594-.L593
	.byte	3,1,1,5,32,9
	.half	.L62-.L594
	.byte	3,7,1,5,56,9
	.half	.L1098-.L62
	.byte	1,5,39,9
	.half	.L592-.L1098
	.byte	3,9,1,5,61,9
	.half	.L1099-.L592
	.byte	1,5,54,9
	.half	.L595-.L1099
	.byte	3,1,1,5,28,9
	.half	.L1100-.L595
	.byte	3,1,1,5,32,9
	.half	.L1101-.L1100
	.byte	3,2,1,5,40,9
	.half	.L596-.L1101
	.byte	1,5,34,9
	.half	.L1102-.L596
	.byte	3,2,1,5,32,9
	.half	.L1103-.L1102
	.byte	1,5,54,9
	.half	.L1104-.L1103
	.byte	3,1,1,5,28,9
	.half	.L63-.L1104
	.byte	1,5,42,9
	.half	.L1105-.L63
	.byte	3,3,1,5,29,9
	.half	.L1106-.L1105
	.byte	1,5,1,9
	.half	.L1107-.L1106
	.byte	3,29,1,5,36,7,9
	.half	.L61-.L1107
	.byte	3,103,1,5,34,9
	.half	.L1108-.L61
	.byte	1,5,45,9
	.half	.L1109-.L1108
	.byte	3,1,1,5,30,9
	.half	.L1110-.L1109
	.byte	3,1,1,5,20,9
	.half	.L599-.L1110
	.byte	3,3,1,5,53,9
	.half	.L600-.L599
	.byte	1,5,32,9
	.half	.L66-.L600
	.byte	3,2,1,5,19,9
	.half	.L602-.L66
	.byte	3,3,1,5,73,9
	.half	.L603-.L602
	.byte	3,1,1,5,20,9
	.half	.L68-.L603
	.byte	3,3,1,5,48,9
	.half	.L1111-.L68
	.byte	1,5,45,9
	.half	.L1112-.L1111
	.byte	1,5,29,9
	.half	.L1113-.L1112
	.byte	1,5,15,9
	.half	.L1114-.L1113
	.byte	3,1,1,5,17,9
	.half	.L604-.L1114
	.byte	3,1,1,5,18,9
	.half	.L1115-.L604
	.byte	3,124,1,5,11,9
	.half	.L67-.L1115
	.byte	3,127,1,5,68,7,9
	.half	.L1116-.L67
	.byte	1,5,29,7,9
	.half	.L69-.L1116
	.byte	3,10,1,5,33,9
	.half	.L1117-.L69
	.byte	3,1,1,5,64,9
	.half	.L1118-.L1117
	.byte	3,111,1,5,53,9
	.half	.L65-.L1118
	.byte	1,5,1,7,9
	.half	.L1119-.L65
	.byte	3,20,1,7,9
	.half	.L265-.L1119
	.byte	0,1,1
.L1087:
	.sdecl	'.debug_ranges',debug,cluster('I2c_lRead')
	.sect	'.debug_ranges'
.L264:
	.word	-1,.L148,0,.L265-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_HwModuleAddr')
	.sect	'.debug_info'
.L266:
	.word	187
	.half	3
	.word	.L267
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L157
	.byte	3
	.byte	'I2c_HwModuleAddr',0,4,161,2,24
	.word	.L469
	.byte	5,3
	.word	I2c_HwModuleAddr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_HwModuleAddr')
	.sect	'.debug_abbrev'
.L267:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_ConfigPtr')
	.sect	'.debug_info'
.L268:
	.word	184
	.half	3
	.word	.L269
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L157
	.byte	3
	.byte	'I2c_ConfigPtr',0,4,190,2,31
	.word	.L422
	.byte	5,3
	.word	I2c_ConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_ConfigPtr')
	.sect	'.debug_abbrev'
.L269:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_ChannelMap')
	.sect	'.debug_info'
.L270:
	.word	185
	.half	3
	.word	.L271
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L157
	.byte	3
	.byte	'I2c_ChannelMap',0,4,220,2,14
	.word	.L470
	.byte	5,3
	.word	I2c_ChannelMap
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_ChannelMap')
	.sect	'.debug_abbrev'
.L271:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('I2c_ChannelInfo')
	.sect	'.debug_info'
.L272:
	.word	186
	.half	3
	.word	.L273
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\I2c\\ssc\\src\\I2c.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L157
	.byte	3
	.byte	'I2c_ChannelInfo',0,4,129,3,28
	.word	.L471
	.byte	5,3
	.word	I2c_ChannelInfo
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('I2c_ChannelInfo')
	.sect	'.debug_abbrev'
.L273:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_AsyncRead')
	.sect	'.debug_loc'
.L343:
	.word	-1,.L126,.L529-.L126,.L332-.L126
	.half	1
	.byte	108
	.word	0,0
.L334:
	.word	-1,.L126,0,.L524-.L126
	.half	1
	.byte	84
	.word	0,0
.L342:
	.word	-1,.L126,.L527-.L126,.L528-.L126
	.half	1
	.byte	111
	.word	0,0
.L336:
	.word	-1,.L126,0,.L525-.L126
	.half	1
	.byte	100
	.word	0,0
.L341:
	.word	-1,.L126,.L530-.L126,.L332-.L126
	.half	1
	.byte	111
	.word	.L525-.L126,.L524-.L126
	.half	1
	.byte	100
	.word	.L531-.L126,.L17-.L126
	.half	1
	.byte	100
	.word	0,0
.L125:
	.word	-1,.L126,0,.L332-.L126
	.half	2
	.byte	138,0
	.word	0,0
.L344:
	.word	-1,.L126,.L526-.L126,.L332-.L126
	.half	1
	.byte	88
	.word	.L532-.L126,.L332-.L126
	.half	1
	.byte	82
	.word	0,0
.L338:
	.word	-1,.L126,0,.L524-.L126
	.half	1
	.byte	85
	.word	0,0
.L340:
	.word	-1,.L126,0,.L524-.L126
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_AsyncWrite')
	.sect	'.debug_loc'
.L329:
	.word	-1,.L124,.L520-.L124,.L319-.L124
	.half	1
	.byte	108
	.word	0,0
.L321:
	.word	-1,.L124,0,.L516-.L124
	.half	1
	.byte	84
	.word	0,0
.L330:
	.word	-1,.L124,.L519-.L124,.L319-.L124
	.half	1
	.byte	111
	.word	0,0
.L323:
	.word	-1,.L124,0,.L517-.L124
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	-1,.L124,.L521-.L124,.L319-.L124
	.half	1
	.byte	109
	.word	.L517-.L124,.L516-.L124
	.half	1
	.byte	100
	.word	.L522-.L124,.L15-.L124
	.half	1
	.byte	100
	.word	0,0
.L123:
	.word	-1,.L124,0,.L319-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L331:
	.word	-1,.L124,.L518-.L124,.L319-.L124
	.half	1
	.byte	88
	.word	.L523-.L124,.L319-.L124
	.half	1
	.byte	82
	.word	0,0
.L325:
	.word	-1,.L124,0,.L516-.L124
	.half	1
	.byte	85
	.word	0,0
.L327:
	.word	-1,.L124,0,.L516-.L124
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_CancelOperation')
	.sect	'.debug_loc'
.L356:
	.word	-1,.L130,.L538-.L130,.L539-.L130
	.half	1
	.byte	111
	.word	0,0
.L352:
	.word	-1,.L130,0,.L535-.L130
	.half	1
	.byte	84
	.word	0,0
.L357:
	.word	-1,.L130,.L541-.L130,.L350-.L130
	.half	1
	.byte	111
	.word	0,0
.L355:
	.word	-1,.L130,.L536-.L130,.L540-.L130
	.half	1
	.byte	100
	.word	0,0
.L129:
	.word	-1,.L130,0,.L350-.L130
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	-1,.L130,.L542-.L130,.L350-.L130
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L360:
	.word	0,0
.L354:
	.word	-1,.L130,0,.L536-.L130
	.half	1
	.byte	100
	.word	.L537-.L130,.L350-.L130
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_DeInit')
	.sect	'.debug_loc'
.L290:
	.word	0,0
.L287:
	.word	-1,.L118,.L492-.L118,.L493-.L118
	.half	1
	.byte	111
	.word	0,0
.L288:
	.word	-1,.L118,.L498-.L118,.L8-.L118
	.half	1
	.byte	111
	.word	.L499-.L118,.L497-.L118
	.half	1
	.byte	100
	.word	0,0
.L291:
	.word	-1,.L118,.L496-.L118,.L497-.L118
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L117:
	.word	-1,.L118,0,.L285-.L118
	.half	2
	.byte	138,0
	.word	0,0
.L289:
	.word	-1,.L118,.L489-.L118,.L490-.L118
	.half	1
	.byte	88
	.word	.L491-.L118,.L9-.L118
	.half	1
	.byte	95
	.word	.L494-.L118,.L495-.L118
	.half	1
	.byte	95
	.word	.L490-.L118,.L285-.L118
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_GetStatus')
	.sect	'.debug_loc'
.L348:
	.word	-1,.L128,0,.L533-.L128
	.half	1
	.byte	84
	.word	0,0
.L127:
	.word	-1,.L128,0,.L346-.L128
	.half	2
	.byte	138,0
	.word	0,0
.L349:
	.word	-1,.L128,.L534-.L128,.L346-.L128
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_Init')
	.sect	'.debug_loc'
.L283:
	.word	-1,.L116,.L475-.L116,.L476-.L116
	.half	1
	.byte	89
	.word	.L2-.L116,.L487-.L116
	.half	1
	.byte	89
	.word	.L487-.L116,.L488-.L116
	.half	5
	.byte	144,32,157,32,0
	.word	.L6-.L116,.L5-.L116
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L278:
	.word	-1,.L116,.L477-.L116,.L2-.L116
	.half	1
	.byte	108
	.word	.L485-.L116,.L481-.L116
	.half	1
	.byte	100
	.word	0,0
.L282:
	.word	-1,.L116,.L473-.L116,.L474-.L116
	.half	1
	.byte	88
	.word	.L474-.L116,.L481-.L116
	.half	1
	.byte	82
	.word	.L482-.L116,.L274-.L116
	.half	1
	.byte	88
	.word	0,0
.L276:
	.word	-1,.L116,0,.L3-.L116
	.half	1
	.byte	100
	.word	.L472-.L116,.L274-.L116
	.half	1
	.byte	111
	.word	.L480-.L116,.L474-.L116
	.half	1
	.byte	100
	.word	0,0
.L280:
	.word	-1,.L116,.L483-.L116,.L4-.L116
	.half	1
	.byte	109
	.word	.L486-.L116,.L4-.L116
	.half	1
	.byte	100
	.word	0,0
.L284:
	.word	-1,.L116,.L478-.L116,.L2-.L116
	.half	1
	.byte	95
	.word	.L479-.L116,.L474-.L116
	.half	1
	.byte	84
	.word	.L484-.L116,.L481-.L116
	.half	1
	.byte	84
	.word	0,0
.L115:
	.word	-1,.L116,0,.L274-.L116
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_IsrI2cDtr')
	.sect	'.debug_loc'
.L366:
	.word	-1,.L152,.L625-.L152,.L626-.L152
	.half	1
	.byte	95
	.word	0,0
.L365:
	.word	-1,.L152,.L627-.L152,.L623-.L152
	.half	1
	.byte	101
	.word	.L91-.L152,.L92-.L152
	.half	1
	.byte	101
	.word	0,0
.L364:
	.word	-1,.L152,.L624-.L152,.L361-.L152
	.half	1
	.byte	111
	.word	.L628-.L152,.L623-.L152
	.half	1
	.byte	100
	.word	.L629-.L152,.L92-.L152
	.half	1
	.byte	100
	.word	0,0
.L363:
	.word	-1,.L152,0,.L623-.L152
	.half	1
	.byte	84
	.word	.L91-.L152,.L92-.L152
	.half	1
	.byte	84
	.word	0,0
.L151:
	.word	-1,.L152,0,.L361-.L152
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_IsrI2cError')
	.sect	'.debug_loc'
.L378:
	.word	-1,.L156,.L642-.L156,.L643-.L156
	.half	1
	.byte	111
	.word	.L105-.L156,.L375-.L156
	.half	1
	.byte	111
	.word	0,0
.L382:
	.word	-1,.L156,.L639-.L156,.L375-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L379:
	.word	-1,.L156,.L641-.L156,.L375-.L156
	.half	1
	.byte	100
	.word	0,0
.L381:
	.word	-1,.L156,.L644-.L156,.L108-.L156
	.half	1
	.byte	84
	.word	.L645-.L156,.L110-.L156
	.half	1
	.byte	84
	.word	.L646-.L156,.L112-.L156
	.half	1
	.byte	84
	.word	.L643-.L156,.L105-.L156
	.half	1
	.byte	84
	.word	0,0
.L380:
	.word	-1,.L156,.L640-.L156,.L375-.L156
	.half	1
	.byte	98
	.word	0,0
.L377:
	.word	-1,.L156,0,.L638-.L156
	.half	1
	.byte	84
	.word	0,0
.L155:
	.word	-1,.L156,0,.L375-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_IsrI2cProtocol')
	.sect	'.debug_loc'
.L370:
	.word	-1,.L154,.L634-.L154,.L635-.L154
	.half	1
	.byte	111
	.word	.L95-.L154,.L367-.L154
	.half	1
	.byte	111
	.word	0,0
.L374:
	.word	-1,.L154,.L631-.L154,.L367-.L154
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L371:
	.word	-1,.L154,.L633-.L154,.L367-.L154
	.half	1
	.byte	100
	.word	0,0
.L373:
	.word	-1,.L154,.L630-.L154,.L96-.L154
	.half	1
	.byte	84
	.word	.L636-.L154,.L98-.L154
	.half	1
	.byte	84
	.word	.L637-.L154,.L101-.L154
	.half	1
	.byte	84
	.word	.L97-.L154,.L95-.L154
	.half	1
	.byte	84
	.word	0,0
.L372:
	.word	-1,.L154,.L632-.L154,.L367-.L154
	.half	1
	.byte	98
	.word	0,0
.L369:
	.word	-1,.L154,0,.L630-.L154
	.half	1
	.byte	84
	.word	.L96-.L154,.L636-.L154
	.half	1
	.byte	84
	.word	.L98-.L154,.L637-.L154
	.half	1
	.byte	84
	.word	.L101-.L154,.L97-.L154
	.half	1
	.byte	84
	.word	.L95-.L154,.L94-.L154
	.half	1
	.byte	84
	.word	0,0
.L153:
	.word	-1,.L154,0,.L367-.L154
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_SyncRead')
	.sect	'.debug_loc'
.L317:
	.word	-1,.L122,.L511-.L122,.L306-.L122
	.half	1
	.byte	108
	.word	0,0
.L308:
	.word	-1,.L122,0,.L13-.L122
	.half	1
	.byte	84
	.word	.L509-.L122,.L306-.L122
	.half	1
	.byte	88
	.word	.L515-.L122,.L306-.L122
	.half	1
	.byte	84
	.word	0,0
.L316:
	.word	-1,.L122,.L510-.L122,.L306-.L122
	.half	1
	.byte	111
	.word	.L514-.L122,.L306-.L122
	.half	1
	.byte	101
	.word	0,0
.L310:
	.word	-1,.L122,0,.L508-.L122
	.half	1
	.byte	100
	.word	0,0
.L315:
	.word	-1,.L122,.L512-.L122,.L306-.L122
	.half	1
	.byte	109
	.word	.L508-.L122,.L13-.L122
	.half	1
	.byte	100
	.word	.L513-.L122,.L306-.L122
	.half	1
	.byte	100
	.word	0,0
.L121:
	.word	-1,.L122,0,.L306-.L122
	.half	2
	.byte	138,0
	.word	0,0
.L318:
	.word	0,0
.L312:
	.word	-1,.L122,0,.L13-.L122
	.half	1
	.byte	85
	.word	0,0
.L314:
	.word	-1,.L122,0,.L13-.L122
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_SyncWrite')
	.sect	'.debug_loc'
.L303:
	.word	-1,.L120,.L503-.L120,.L293-.L120
	.half	1
	.byte	108
	.word	0,0
.L295:
	.word	-1,.L120,0,.L11-.L120
	.half	1
	.byte	84
	.word	.L501-.L120,.L293-.L120
	.half	1
	.byte	88
	.word	.L507-.L120,.L293-.L120
	.half	1
	.byte	84
	.word	0,0
.L304:
	.word	-1,.L120,.L502-.L120,.L293-.L120
	.half	1
	.byte	111
	.word	.L506-.L120,.L293-.L120
	.half	1
	.byte	101
	.word	0,0
.L297:
	.word	-1,.L120,0,.L500-.L120
	.half	1
	.byte	100
	.word	0,0
.L302:
	.word	-1,.L120,.L504-.L120,.L293-.L120
	.half	1
	.byte	109
	.word	.L500-.L120,.L11-.L120
	.half	1
	.byte	100
	.word	.L505-.L120,.L293-.L120
	.half	1
	.byte	100
	.word	0,0
.L119:
	.word	-1,.L120,0,.L293-.L120
	.half	2
	.byte	138,0
	.word	0,0
.L305:
	.word	0,0
.L299:
	.word	-1,.L120,0,.L11-.L120
	.half	1
	.byte	85
	.word	0,0
.L301:
	.word	-1,.L120,0,.L11-.L120
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.debug_loc'
.L418:
	.word	-1,.L134,0,.L416-.L134
	.half	1
	.byte	100
	.word	0,0
.L133:
	.word	-1,.L134,0,.L416-.L134
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lHwEnableInterrupt')
	.sect	'.debug_loc'
.L412:
	.word	-1,.L138,0,.L410-.L138
	.half	1
	.byte	100
	.word	0,0
.L137:
	.word	-1,.L138,0,.L410-.L138
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lHwInit')
	.sect	'.debug_loc'
.L425:
	.word	-1,.L132,.L549-.L132,.L419-.L132
	.half	1
	.byte	82
	.word	0,0
.L423:
	.word	-1,.L132,0,.L543-.L132
	.half	1
	.byte	100
	.word	.L547-.L132,.L419-.L132
	.half	1
	.byte	108
	.word	0,0
.L424:
	.word	-1,.L132,.L548-.L132,.L419-.L132
	.half	1
	.byte	109
	.word	0,0
.L421:
	.word	-1,.L132,0,.L544-.L132
	.half	1
	.byte	84
	.word	.L545-.L132,.L546-.L132
	.half	1
	.byte	95
	.word	0,0
.L131:
	.word	-1,.L132,0,.L419-.L132
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.debug_loc'
.L430:
	.word	-1,.L136,0,.L426-.L136
	.half	1
	.byte	100
	.word	0,0
.L431:
	.word	-1,.L136,.L550-.L136,.L426-.L136
	.half	1
	.byte	111
	.word	0,0
.L428:
	.word	-1,.L136,0,.L426-.L136
	.half	1
	.byte	84
	.word	0,0
.L135:
	.word	-1,.L136,0,.L426-.L136
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lRead')
	.sect	'.debug_loc'
.L457:
	.word	-1,.L148,0,.L453-.L148
	.half	1
	.byte	101
	.word	0,0
.L467:
	.word	-1,.L148,.L603-.L148,.L65-.L148
	.half	1
	.byte	84
	.word	0,0
.L463:
	.word	-1,.L148,.L589-.L148,.L590-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	.L61-.L148,.L453-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L459:
	.word	-1,.L148,.L599-.L148,.L453-.L148
	.half	1
	.byte	111
	.word	0,0
.L468:
	.word	-1,.L148,.L598-.L148,.L453-.L148
	.half	1
	.byte	95
	.word	0,0
.L455:
	.word	-1,.L148,0,.L453-.L148
	.half	1
	.byte	100
	.word	0,0
.L147:
	.word	-1,.L148,0,.L453-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L466:
	.word	-1,.L148,.L600-.L148,.L601-.L148
	.half	1
	.byte	82
	.word	.L65-.L148,.L453-.L148
	.half	1
	.byte	82
	.word	0,0
.L460:
	.word	-1,.L148,.L602-.L148,.L65-.L148
	.half	1
	.byte	83
	.word	0,0
.L464:
	.word	-1,.L148,.L591-.L148,.L592-.L148
	.half	1
	.byte	81
	.word	.L61-.L148,.L597-.L148
	.half	1
	.byte	81
	.word	.L604-.L148,.L453-.L148
	.half	1
	.byte	81
	.word	0,0
.L462:
	.word	-1,.L148,.L590-.L148,.L593-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	.L62-.L148,.L63-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L461:
	.word	-1,.L148,.L594-.L148,.L62-.L148
	.half	1
	.byte	95
	.word	.L595-.L148,.L596-.L148
	.half	1
	.byte	95
	.word	0,0
.L465:
	.word	-1,.L148,.L592-.L148,.L63-.L148
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lResetKernels')
	.sect	'.debug_loc'
.L434:
	.word	-1,.L142,0,.L551-.L142
	.half	1
	.byte	100
	.word	.L552-.L142,.L432-.L142
	.half	1
	.byte	111
	.word	0,0
.L141:
	.word	-1,.L142,0,.L432-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L435:
	.word	0,0
.L436:
	.word	-1,.L142,.L23-.L142,.L432-.L142
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lSendMasterCode')
	.sect	'.debug_loc'
.L415:
	.word	-1,.L140,0,.L413-.L140
	.half	1
	.byte	100
	.word	0,0
.L139:
	.word	-1,.L140,0,.L413-.L140
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lSyncReceive')
	.sect	'.debug_loc'
.L403:
	.word	-1,.L150,0,.L71-.L150
	.half	1
	.byte	84
	.word	0,0
.L401:
	.word	-1,.L150,0,.L71-.L150
	.half	1
	.byte	101
	.word	.L606-.L150,.L397-.L150
	.half	1
	.byte	111
	.word	.L621-.L150,.L618-.L150
	.half	1
	.byte	101
	.word	0,0
.L407:
	.word	-1,.L150,.L611-.L150,.L612-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	.L73-.L150,.L618-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L404:
	.word	-1,.L150,.L609-.L150,.L397-.L150
	.half	1
	.byte	90
	.word	.L622-.L150,.L397-.L150
	.half	1
	.byte	82
	.word	0,0
.L399:
	.word	-1,.L150,0,.L71-.L150
	.half	1
	.byte	100
	.word	.L605-.L150,.L397-.L150
	.half	1
	.byte	108
	.word	.L615-.L150,.L612-.L150
	.half	1
	.byte	100
	.word	.L620-.L150,.L618-.L150
	.half	1
	.byte	100
	.word	0,0
.L149:
	.word	-1,.L150,0,.L397-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L408:
	.word	-1,.L150,.L613-.L150,.L614-.L150
	.half	1
	.byte	95
	.word	.L73-.L150,.L619-.L150
	.half	1
	.byte	95
	.word	0,0
.L406:
	.word	-1,.L150,.L608-.L150,.L397-.L150
	.half	1
	.byte	89
	.word	.L610-.L150,.L71-.L150
	.half	1
	.byte	91
	.word	.L616-.L150,.L617-.L150
	.half	1
	.byte	91
	.word	0,0
.L409:
	.word	-1,.L150,.L607-.L150,.L397-.L150
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lSyncTransmit')
	.sect	'.debug_loc'
.L389:
	.word	-1,.L146,0,.L44-.L146
	.half	1
	.byte	84
	.word	0,0
.L387:
	.word	-1,.L146,0,.L44-.L146
	.half	1
	.byte	101
	.word	.L578-.L146,.L383-.L146
	.half	1
	.byte	109
	.word	.L586-.L146,.L583-.L146
	.half	1
	.byte	101
	.word	0,0
.L394:
	.word	-1,.L146,.L582-.L146,.L583-.L146
	.half	5
	.byte	144,32,157,32,0
	.word	.L45-.L146,.L46-.L146
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L390:
	.word	-1,.L146,.L581-.L146,.L383-.L146
	.half	1
	.byte	90
	.word	.L588-.L146,.L383-.L146
	.half	1
	.byte	82
	.word	0,0
.L385:
	.word	-1,.L146,0,.L44-.L146
	.half	1
	.byte	100
	.word	.L577-.L146,.L383-.L146
	.half	1
	.byte	108
	.word	.L585-.L146,.L583-.L146
	.half	1
	.byte	100
	.word	.L587-.L146,.L46-.L146
	.half	1
	.byte	100
	.word	0,0
.L145:
	.word	-1,.L146,0,.L383-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L395:
	.word	-1,.L146,.L584-.L146,.L583-.L146
	.half	1
	.byte	81
	.word	.L45-.L146,.L46-.L146
	.half	1
	.byte	81
	.word	0,0
.L396:
	.word	-1,.L146,.L579-.L146,.L383-.L146
	.half	1
	.byte	88
	.word	0,0
.L392:
	.word	-1,.L146,.L580-.L146,.L383-.L146
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('I2c_lWrite')
	.sect	'.debug_loc'
.L441:
	.word	-1,.L144,0,.L437-.L144
	.half	1
	.byte	101
	.word	0,0
.L450:
	.word	-1,.L144,.L568-.L144,.L37-.L144
	.half	1
	.byte	81
	.word	.L571-.L144,.L35-.L144
	.half	1
	.byte	81
	.word	.L572-.L144,.L33-.L144
	.half	1
	.byte	81
	.word	0,0
.L446:
	.word	-1,.L144,.L553-.L144,.L437-.L144
	.half	1
	.byte	82
	.word	.L559-.L144,.L560-.L144
	.half	1
	.byte	95
	.word	0,0
.L443:
	.word	-1,.L144,.L563-.L144,.L437-.L144
	.half	1
	.byte	111
	.word	0,0
.L452:
	.word	-1,.L144,.L561-.L144,.L562-.L144
	.half	1
	.byte	85
	.word	.L576-.L144,.L437-.L144
	.half	1
	.byte	85
	.word	0,0
.L451:
	.word	-1,.L144,.L556-.L144,.L25-.L144
	.half	1
	.byte	84
	.word	.L557-.L144,.L26-.L144
	.half	1
	.byte	84
	.word	.L558-.L144,.L28-.L144
	.half	1
	.byte	84
	.word	.L27-.L144,.L437-.L144
	.half	1
	.byte	84
	.word	0,0
.L439:
	.word	-1,.L144,0,.L437-.L144
	.half	1
	.byte	100
	.word	0,0
.L143:
	.word	-1,.L144,0,.L437-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L448:
	.word	-1,.L144,.L565-.L144,.L566-.L144
	.half	5
	.byte	144,32,157,32,0
	.word	.L567-.L144,.L569-.L144
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L445:
	.word	-1,.L144,.L573-.L144,.L574-.L144
	.half	1
	.byte	95
	.word	0,0
.L444:
	.word	-1,.L144,.L564-.L144,.L565-.L144
	.half	5
	.byte	144,32,157,32,0
	.word	.L566-.L144,.L567-.L144
	.half	5
	.byte	144,32,157,32,0
	.word	.L569-.L144,.L33-.L144
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L447:
	.word	-1,.L144,.L554-.L144,.L555-.L144
	.half	1
	.byte	83
	.word	.L575-.L144,.L437-.L144
	.half	1
	.byte	83
	.word	0,0
.L449:
	.word	-1,.L144,.L570-.L144,.L571-.L144
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1120:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('I2c_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L116,.L274-.L116
	.sdecl	'.debug_frame',debug,cluster('I2c_DeInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L118,.L285-.L118
	.sdecl	'.debug_frame',debug,cluster('I2c_SyncWrite')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L120,.L293-.L120
	.sdecl	'.debug_frame',debug,cluster('I2c_SyncRead')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L122,.L306-.L122
	.sdecl	'.debug_frame',debug,cluster('I2c_AsyncWrite')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L124,.L319-.L124
	.sdecl	'.debug_frame',debug,cluster('I2c_AsyncRead')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L126,.L332-.L126
	.sdecl	'.debug_frame',debug,cluster('I2c_GetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L1120,.L128,.L346-.L128
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('I2c_CancelOperation')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L130,.L350-.L130
	.sdecl	'.debug_frame',debug,cluster('I2c_lHwInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L132,.L419-.L132
	.sdecl	'.debug_frame',debug,cluster('I2c_lHwClearAllInterrupts')
	.sect	'.debug_frame'
	.word	24
	.word	.L1120,.L134,.L416-.L134
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('I2c_lHwUpdateModuleReg')
	.sect	'.debug_frame'
	.word	24
	.word	.L1120,.L136,.L426-.L136
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('I2c_lHwEnableInterrupt')
	.sect	'.debug_frame'
	.word	24
	.word	.L1120,.L138,.L410-.L138
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('I2c_lSendMasterCode')
	.sect	'.debug_frame'
	.word	24
	.word	.L1120,.L140,.L413-.L140
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('I2c_lResetKernels')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L142,.L432-.L142
	.sdecl	'.debug_frame',debug,cluster('I2c_lWrite')
	.sect	'.debug_frame'
	.word	16
	.word	.L1120,.L144,.L437-.L144
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('I2c_lSyncTransmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L146,.L383-.L146
	.sdecl	'.debug_frame',debug,cluster('I2c_lRead')
	.sect	'.debug_frame'
	.word	20
	.word	.L1120,.L148,.L453-.L148
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('I2c_lSyncReceive')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L150,.L397-.L150
	.sdecl	'.debug_frame',debug,cluster('I2c_IsrI2cDtr')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L152,.L361-.L152
	.sdecl	'.debug_frame',debug,cluster('I2c_IsrI2cProtocol')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L154,.L367-.L154
	.sdecl	'.debug_frame',debug,cluster('I2c_IsrI2cError')
	.sect	'.debug_frame'
	.word	12
	.word	.L1120,.L156,.L375-.L156

; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2116  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2117  #if (I2C_VERSION_INFO_API == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2118  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2119  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2120  ** Syntax           : void I2c_GetVersionInfo                                 **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2121  **                    (                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2122  **                      Std_VersionInfoType * const VersionInfoPtr            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2123  **                    )                                                       **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2124  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2125  ** Description      : This API returns the version information of this module.**
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2126  **                    Note: This API is available only when I2cVersionInfoApi **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2127  **                    is configured as true.                                  **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2128  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2129  ** Service ID       : 0x55                                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2130  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2131  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2132  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2133  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2134  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2135  ** Parameters(in)   : none                                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2136  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2137  ** Parameters (out) : VersionInfoPtr -  Pointer to where to store the version **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2138  **                    information of this module                              **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2139  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2140  ** Return value     : void                                                    **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2141  **                                                                            **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2142  *******************************************************************************/
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2143  void I2c_GetVersionInfo(Std_VersionInfoType * const VersionInfoPtr)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2144  {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2145    #if(I2C_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2146    if ((VersionInfoPtr) == NULL_PTR)
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2147    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2148      /* Report to DET */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2149      (void)Det_ReportError(
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2150        I2C_MODULE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2151        I2C_INSTANCE_ID,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2152        I2C_SID_GETVERSIONINFO,
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2153        I2C_E_PARAM_POINTER
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2154      );
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2155    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2156    else
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2157    #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2158    {
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2159      /* Note that versioninfo pointer is not checked for NULL as the user
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2160         is supposed to send the memory allocated pointer */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2161      /* I2C Module ID */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2162      ((Std_VersionInfoType*)(VersionInfoPtr))->moduleID = I2C_MODULE_ID;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2163      /* I2C vendor ID */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2164      ((Std_VersionInfoType*)(VersionInfoPtr))->vendorID = I2C_VENDOR_ID;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2165      /* major version of I2C */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2166      ((Std_VersionInfoType*)(VersionInfoPtr))->sw_major_version =
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2167        (uint8)I2C_SW_MAJOR_VERSION;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2168      /* minor version of I2C */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2169      ((Std_VersionInfoType*)(VersionInfoPtr))->sw_minor_version =
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2170        (uint8)I2C_SW_MINOR_VERSION;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2171      /* patch version of I2C */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2172      ((Std_VersionInfoType*)(VersionInfoPtr))->sw_patch_version =
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2173        (uint8)I2C_SW_PATCH_VERSION;
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2174    }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2175  }
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2176  #endif
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2177  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2178  #define I2C_STOP_SEC_CODE_QM_LOCAL
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2179  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2180     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2181  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2182     guideline. */
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2183  #include "I2c_MemMap.h"
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2184  
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2185  /*******************************************************************************
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2186  **                            General Notes                                   **
; ..\Mcal\Tricore\I2c\ssc\src\I2c.c	  2187  *******************************************************************************/

	; Module end
