	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc28172a --dep-file=Mcal\\Tricore\\Port\\ssc\\src\\.Port.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=Mcal\\Tricore\\Port\\ssc\\src\\Port.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Mcal\\Tricore\\Port\\ssc\\src\\Port.src ..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c"
	.compiler_name		"ctc"
	;source	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c'

	
$TC162
	
	.sdecl	'.text.Port_Init.Code.Cpu0',code,cluster('Port_Init')
	.sect	'.text.Port_Init.Code.Cpu0'
	.align	2
	
	.global	Port_Init

; ..\Mcal\Tricore\Port\ssc\src\Port.c	     1  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     2  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     3  ** Copyright (C) Infineon Technologies (2021)                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     4  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     5  ** All rights reserved.                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     6  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    10  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    11  ********************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    12  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    13  **  FILENAME     : Port.c                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    14  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    15  **  VERSION      : 34.0.0                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    16  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    17  **  DATE         : 2021-09-21                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    18  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    19  **  VARIANT      : Variant PB                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    20  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    21  **  PLATFORM     : Infineon AURIX2G                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    22  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    23  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    24  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    25  **  VENDOR       : Infineon Technologies                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    26  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    27  **  DESCRIPTION  : Port Driver source file                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    28  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    29  **  SPECIFICATION(S) : Specification of Port Driver, AUTOSAR Release 4.2.2 and**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    30  **                       AUTOSAR 4.4.0                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    31  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    32  **  MAY BE CHANGED BY USER : no                                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    33  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    34  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    35  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    36  **                      Include Section                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    37  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    38  /* [cover parentID={F5CF0050-FA3F-4e14-8C3E-FD0E8CB08831}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    39  /* [cover parentID={E856B263-08D5-4c7b-A28C-B8E999A614B1},
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    40  {AD0B28C9-D316-40a1-ABA7-4CDC9BCABA97}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    41  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    42  /* Inclusion of Port Register structure header file */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    43  #include "IfxPort_reg.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    44  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    45  /* Global functions like Set/Reset END INIT protection bit,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    46    Enable/Disable interrupts, Automic write function */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    47  #include "McalLib.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    48  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    49  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    50  /* Own header file, this includes own configuration file also */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    51  #include "Port.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    52  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    53  #include "IfxPort_bf.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    54  /* Conditional Inclusion of Developement Error Tracer File */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    55  #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    56  #include "Det.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    57  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    58  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    59  /* Include Safety Error header definition */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    60  #if(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    61  #include "Mcal_SafetyError.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    62  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    63  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    64  #if (PORT_INIT_API_MODE != PORT_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    65  #include "McalLib_OsStub.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    66  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    67  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    68  **                          User Mode Supoort Macros                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    69  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    70  /* [cover parentID={786269B5-3FC5-478e-A662-98CAA3B8B059}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    71  /* [cover parentID={1A65EADD-AFD0-4845-B2D2-8257E086DD67}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    72  #if PORT_INIT_API_MODE ==  PORT_MCAL_SUPERVISOR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    73  /* Library APIs  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    74  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    75   * 'PORT_LIB_INIT_WRITESAFETYENDINITPROTREG'
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    76   * defined for User mode support in code.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    77   * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    78  #define PORT_LIB_INIT_WRITESAFETYENDINITPROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    79    Mcal_WriteSafetyEndInitProtReg(RegAdd,Data)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    80  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    81  * 'PORT_LIB_INIT_WRITESAFETYENDINITPROTREG'
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    82  * defined for User mode support in code.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    83  * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    84  #define PORT_LIB_INIT_WRITEPERIPENDINITPROTREG(RegAdd,Data) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    85    Mcal_WritePeripEndInitProtReg(RegAdd,Data)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    86  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    87  #else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    88  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    89  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    90   * 'PORT_LIB_INIT_WRITESAFETYENDINITPROTREG'
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    91   * defined for User mode support in code.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    92   * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    93  #define PORT_LIB_INIT_WRITESAFETYENDINITPROTREG(RegAdd,Data)    \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    94    MCAL_LIB_WRITESAFETYENDINITPROTREG(RegAdd,Data)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    95  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    96  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    97  * 'PORT_LIB_INIT_WRITEPERIPENDINITPROTREG'
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    98  * defined for User mode support in code.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	    99  * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   100  #define PORT_LIB_INIT_WRITEPERIPENDINITPROTREG(RegAdd,Data) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   101    MCAL_LIB_WRITEPERIPENDINITPROTREG(RegAdd,Data)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   102  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   103  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   104  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   105  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   106  **                      Imported Compiler Switch Check                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   107  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   108  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   109  /* Version checks */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   110  /* [cover parentID={D84FCB3F-517B-46fd-BA2F-94925DCBCEEB}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   111  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   112  #ifndef PORT_SW_MAJOR_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   113  #error "PORT_SW_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   114  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   115  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   116  #ifndef PORT_SW_MINOR_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   117  #error "PORT_SW_MINOR_VERSION is not defined. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   118  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   119  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   120  #ifndef PORT_SW_PATCH_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   121  #error "PORT_SW_PATCH_VERSION is not defined."
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   122  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   123  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   124  /* Check for Correct inclusion of headers */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   125  #if ( PORT_SW_MAJOR_VERSION != 20U )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   126  #error "PORT_SW_MAJOR_VERSION does not match. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   127  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   128  #if ( PORT_SW_MINOR_VERSION != 10U )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   129  #error "PORT_SW_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   130  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   131  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   132  #if(PORT_SW_PATCH_VERSION!= 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   133  #error "PORT_SW_PATCH_VERSION does not match."
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   134  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   135  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   136  #ifndef PORT_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   137  #error "PORT_AR_RELEASE_MAJOR_VERSION is not defined."
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   138  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   139  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   140  #ifndef PORT_AR_RELEASE_MINOR_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   141  #error "PORT_AR_RELEASE_MINOR_VERSION is not defined. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   142  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   143  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   144  #ifndef PORT_AR_RELEASE_REVISION_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   145  #error "PORT_AR_RELEASE_REVISION_VERSION is not defined. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   146  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   147  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   148  #if (PORT_AR_RELEASE_MAJOR_VERSION != MCAL_AR_RELEASE_MAJOR_VERSION )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   149  #error "PORT_AR_RELEASE_MAJOR_VERSION does not match."
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   150  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   151  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   152  #if (PORT_AR_RELEASE_MINOR_VERSION != MCAL_AR_RELEASE_MINOR_VERSION )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   153  #error "PORT_AR_RELEASE_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   154  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   155  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   156  #if ( PORT_AR_RELEASE_REVISION_VERSION != MCAL_AR_RELEASE_REVISION_VERSION )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   157  #error "PORT_AR_RELEASE_REVISION_VERSION does not match. "
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   158  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   159  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   160  /* [cover parentID={7D755BBC-2E98-4aaf-B2E7-86E896E303B2} ] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   161  #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   162  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   163  #ifndef DET_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   164  #error "DET_AR_RELEASE_MAJOR_VERSION is not defined."
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   165  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   166  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   167  #if ( DET_AR_RELEASE_MAJOR_VERSION != 4U )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   168  #error "DET_AR_RELEASE_MAJOR_VERSION does not match."
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   169  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   170  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   171  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   172  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   173  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   174  **                      Private Object Like Macro Definitions                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   175  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   176  /*
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   177    Offset definitions for data in Port configuration
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   178  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   179  /* Initial Control data offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   180  #define PORT_DATA_OFS_CTL      (0x0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   181  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   182  #define PORTS_READONLY_AVAIL   (PORTS_READONLY_00_31 + PORTS_READONLY_32_63)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   183  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   184  /* Initial level data offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   185   #define PORT_DATA_OFS_LEVEL    (0x4U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   186  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   187  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   188  /* If Direction changeable is enabled */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   189  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   190  /* If pin mode changeable is enabled */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   191  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   192  /* Pin direction data offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   193  #define PORT_DATA_OFS_DIR      (0x8U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   194  /* Control data 2 offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   195  #define PORT_DATA_OFS_CTL2     (0x9U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   196  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   197  #else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   198  /* Pin direction data offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   199  #define PORT_DATA_OFS_DIR      (0x7U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   200  /* Control data 2 offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   201  #define PORT_DATA_OFS_CTL2     (0x8U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   202  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   203  #endif /* (PORT_SET_PIN_MODE_API) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   204  #endif /* (PORT_SET_PIN_DIRECTION_API) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   205  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   206  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   207  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   208  /* Mask to get direction info from Pin control value */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   209  #define PORT_DIR_MSK           (0x80U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   210  /* Pin shift position */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   211  #define PIN_SHIFT             (0x1U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   212  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   213  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   214  /* IOCR0 register offset in Ifx_P */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   215  #define PORT_IOCR0_REG_OFFSET  (0x4U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   216  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   217  #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   218  /* LPCR register offset in Ifx_P */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   219  #define PORT_LPCR_REG_OFFSET   (0x28U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   220  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   221  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   222  /* PCSR register offset in Ifx_P */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   223  #define PORT_PCSR_REG_OFFSET   (0x19U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   224  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   225  /* PDISC register offset in Ifx_P */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   226  #define PORT_PDISC_REG_OFFSET  (0x18U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   227  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   228  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   229  /* Status to indicate that PORT is initialized */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   230  /* MISRA2012_RULE_2_5_JUSTIFICATION: This macro is referenced only when certain
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   231  precompile configuration switch is enabled */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   232  #define PORT_INITIALIZED       ((uint8)1)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   233  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   234  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   235  /* Before Setting the Iocr register, To Check the Port number below
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   236     macro's are used */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   237  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   238  #define PORT_PIN_4_7           (0x00F0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   239  #define PORT_PIN_8_11          (0x0F00U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   240  #define PORT_PIN_12_15         (0xF000U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   241  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   242  /* 8-bit mask value from 8th to 15th bit */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   243  #define PORT_PDR1_MASK         (0xFF00U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   244  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   245  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   246  /* offset value where the port number is present */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   247  #define PORT_NUMBER_OFFSET     (0x4U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   248  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   249  /* lower 8-bit mask value in hex to get the port number */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   250  #define PORT_NUM_LOW8_MASK     (0x000000FFU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   251  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   252  /* lower 4-bit mask value in hex to get the pin number of a port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   253  #define PORT_PIN_LOW4_MASK     (0x0FU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   254  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   255  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   256  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   257  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   258  /* general constants */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   259  #define PORT_NUMBER_32         (0x20U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   260  #define PORT_NUMBER_31         (0x1FU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   261  #define PORT_CONSTANT_0x01     (0x01U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   262  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   263  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   264  #define PORT_POPCNT_CALC         (31U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   265  #define PORT_POPCNT_CALC_32_63   (PORT_POPCNT_CALC + PORT_NUMBER_32)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   266  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   267  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   268  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   269  #define PORT_PIN_DIV           0x4
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   270  #define PORT_PIN_IOCR_LEN      0x8
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   271  #define PORT_PIN_MUL           0x8
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   272  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   273  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   274  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   275  /* (PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   276  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   277  /* Maximum port pin number */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   278  #define PORT_PIN_MAX_NUMBER    (0xFU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   279  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   280  #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   281  /*PortLPCR available */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   282  #define PORT_LPCR_AVAILABLE 0xFFFFU
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   283  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   284  /*PortPin available */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   285  #define PIN_AVAILABLE 16
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   286  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   287  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   288  /*mask for Errata*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   289  #define PORT_14_DISC_DISABLE      (0x0800U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   290  #if(PORT14_PDISC_MASK == PORT_14_DISC_DISABLE)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   291  #define PORT_LPCR5_COUNTER        (0x5U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   292  #define PORT_NUM_14               (0xEU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   293  #define PORT_IOCR_PULLUP_ENABLE   (0x2U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   294  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   295  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   296  /* mask for LCK bit in PCSR*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   297  #if(PORT_INIT_CHECK_API==STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   298  #define PORT_31_PCSR_MASK                (0x7FFFFFFFU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   299  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   300  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   301  /* used in SetPinMode API */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   302  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   303  /* Pin mode changeable or not offset */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   304  #define PORT_DATA_OFS_MODE                 (0x7U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   305  /* Shift for IOCR */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   306  #define IOCR_VALUE                         (0x4U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   307  #define MAX_ELEC_CHAR                      (0x08U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   308  #define PORT_PIN_GET_DIRECTION             (0x80U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   309  #define PORT_GET_ALT_VALUE_SET             (0x38U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   310  #define PORT_ALT_MODE_MASK                 (0xC0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   311  #define IOCR_ELEC_CHAR_MASK                ((uint8)0x07U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   312  #define PIN_NOINPUTPULL                    ((uint8)0x00U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   313  #define PIN_PULLDOWN                       ((uint8)0x08U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   314  #define PIN_PULLUP                         ((uint8)0x10U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   315  #define PIN_OPENDRAIN                      ((uint8)0x40U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   316  #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   317  #define PIN_CHARACTERISTIC_RANGE           ((uint8)0x05U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   318  #define PIN_MODE_RANGE                     ((uint8)0x07U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   319  #endif /* (PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   320  #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   321  #define PIN_MODE_OUT_RANGE                 ((uint8)0x04U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   322  #endif /* (PORT_SAFETY_ENABLE == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   323  #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   324  #define IOCR_ALT_MODE_MASK                 ((uint8)0xF8U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   325  #define IOCR_ALT_MODE_POS                  ((uint8)0x03U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   326  #define PORT_OUT_PIN_MASK                  ((uint8)0x80U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   327  #endif /* (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   328  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   329  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   330  **                   Function like macro definitions                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   331  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   332  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   333  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   334  **                      Private Type Definitions                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   335  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   336  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   337  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   338  **                      Global Constant Definitions                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   339  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   340  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   341  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   342  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   343  **                      Global Variable Definitions                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   344  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   345  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   346  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   347  **                      Private Constant Definitions                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   348  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   349  /* Mapping of 16 bit constant */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   350  /* [cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   351  /* [cover parentID={566ED99C-0D96-46ac-97BF-E97B04E2C700}] No Callout [/cover]*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   352  /* [cover parentID={33254E74-FBF6-488c-873C-B77A6484D4C9}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   353  #define PORT_START_SEC_CONST_ASIL_B_GLOBAL_16
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   354  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   355  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   356  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   357  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   358  /* Total pin count for each port, This constant is used during DET check */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   359  static const uint16 Port_kAvailablePins[] =
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   360  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   361    PORT_AVAILABLE_PINS_PORT0,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   362    PORT_AVAILABLE_PINS_PORT1,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   363    PORT_AVAILABLE_PINS_PORT2,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   364    PORT_AVAILABLE_PINS_PORT3,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   365    PORT_AVAILABLE_PINS_PORT4,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   366    PORT_AVAILABLE_PINS_PORT5,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   367    PORT_AVAILABLE_PINS_PORT6,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   368    PORT_AVAILABLE_PINS_PORT7,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   369    PORT_AVAILABLE_PINS_PORT8,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   370    PORT_AVAILABLE_PINS_PORT9,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   371    PORT_AVAILABLE_PINS_PORT10,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   372    PORT_AVAILABLE_PINS_PORT11,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   373    PORT_AVAILABLE_PINS_PORT12,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   374    PORT_AVAILABLE_PINS_PORT13,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   375    PORT_AVAILABLE_PINS_PORT14,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   376    PORT_AVAILABLE_PINS_PORT15,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   377    PORT_AVAILABLE_PINS_PORT16,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   378    PORT_AVAILABLE_PINS_PORT17,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   379    PORT_AVAILABLE_PINS_PORT18,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   380    PORT_AVAILABLE_PINS_PORT19,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   381    PORT_AVAILABLE_PINS_PORT20,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   382    PORT_AVAILABLE_PINS_PORT21,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   383    PORT_AVAILABLE_PINS_PORT22,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   384    PORT_AVAILABLE_PINS_PORT23,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   385    PORT_AVAILABLE_PINS_PORT24,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   386    PORT_AVAILABLE_PINS_PORT25,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   387    PORT_AVAILABLE_PINS_PORT26,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   388    PORT_AVAILABLE_PINS_PORT27,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   389    PORT_AVAILABLE_PINS_PORT28,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   390    PORT_AVAILABLE_PINS_PORT29,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   391    PORT_AVAILABLE_PINS_PORT30,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   392    PORT_AVAILABLE_PINS_PORT31,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   393    PORT_AVAILABLE_PINS_PORT32,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   394    PORT_AVAILABLE_PINS_PORT33,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   395    PORT_AVAILABLE_PINS_PORT34,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   396    PORT_AVAILABLE_PINS_PORT35,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   397    PORT_AVAILABLE_PINS_PORT36,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   398    PORT_AVAILABLE_PINS_PORT37,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   399    PORT_AVAILABLE_PINS_PORT38,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   400    PORT_AVAILABLE_PINS_PORT39,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   401    #if(PORT_MAX_NUMBER == 40U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   402    PORT_AVAILABLE_PINS_PORT40
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   403    #else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   404    PORT_AVAILABLE_PINS_PORT40,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   405    PORT_AVAILABLE_PINS_PORT41
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   406    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   407  };
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   408  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   409  #define PORT_STOP_SEC_CONST_ASIL_B_GLOBAL_16
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   410  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   411  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   412  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per Autosar
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   413     guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   414  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   415  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   416  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   417  **                      Private Variable Definitions                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   418  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   419  /* [cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}] [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   420  #define PORT_START_SEC_VAR_CLEARED_ASIL_B_GLOBAL_32
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   421  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   422  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   423  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per Autosar
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   424     guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   425  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   426  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   427  /* To store the Port driver configuration pointer */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   428  static  const Port_ConfigType  *Port_kConfigPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   429  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   430  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   431    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   432  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   433    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   434  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   435    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   436  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   437    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   438  #define PORT_STOP_SEC_VAR_CLEARED_ASIL_B_GLOBAL_32
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   439  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   440  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   441  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   442  Autosar  guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   443  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   444  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   445  #if ((PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON) ||(PORT_INIT_CHECK_API==STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   446  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   447    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   448  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   449    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   450  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   451    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   452  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   453    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   454  #define PORT_START_SEC_VAR_CLEARED_ASIL_B_GLOBAL_8
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   455  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   456  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   457  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   458  Autosar guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   459  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   460  /* Init Status Variable. It has to be initialized to "0U" after every reset as 0
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   461    represents the deinitialized state */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   462  static uint8 Port_InitStatus;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   463  /* Stop 8 bit variable section */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   464  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   465    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   466  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   467    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   468  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   469    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   470  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   471    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   472  #define PORT_STOP_SEC_VAR_CLEARED_ASIL_B_GLOBAL_8
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   473  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   474  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   475  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   476  Autosar guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   477  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   478  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   479  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   480  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}] [/cover]*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   481  #define PORT_START_SEC_CODE_ASIL_B_GLOBAL
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   482  /*mapping of code and data to specific memory sections via memory mapping file*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   483  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   484  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   485  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   486  Autosar guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   487  /*[cover parentID={EA0715EE-3E3C-4aac-A42E-4B5CFC96CEED}] [/cover]*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   488  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   489  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   490  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   491  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   492  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   493  **                      Private Function Declarations                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   494  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   495  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   496  /*INLINE function to initialize Port module*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   497  LOCAL_INLINE void Port_lIOInit(void);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   498  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   499  /*INLINE function to initialize Port module*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   500  LOCAL_INLINE void Port_lPDRInit(void);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   501  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   502  /*INLINE function to extract the Address of Px_OUT register */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   503  LOCAL_INLINE Ifx_P *Port_lAdr(uint32 PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   504  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   505  /*INLINE function to to check if the port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   506    is available or not for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   507  LOCAL_INLINE uint32 Port_lIsPortAvailable31(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   508  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   509  /*INLINE function to check if the port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   510    is available or not for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   511  LOCAL_INLINE uint32 Port_lIsPortAvailable63(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   512  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   513  /*INLINE function to check if the port is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   514    available or not for the microcontroller    */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   515  LOCAL_INLINE uint32 Port_lIsPortAvailable(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   516  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   517  #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   518  /*INLINE function to check if the port is read only or it is writable */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   519  LOCAL_INLINE uint32 Port_lIsPortReadOnly31(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   520  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   521  /*INLINE function to check if the port is read only or it is writable */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   522  LOCAL_INLINE uint32 Port_lIsPortReadOnly63(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   523  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   524  /*INLINE function to check if the port is read only or it is writable*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   525  LOCAL_INLINE uint32 Port_lIsPortReadOnly(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   526  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   527  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   528  /*INLINE function to check if the port pin is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   529    available or not for the microcontroller      */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   530  LOCAL_INLINE uint16 Port_lIsPinAvailable(uint32 Port, uint32 Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   531  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   532  /*INLINE function to check if any of the
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   533    portpin 8-15 is available or not for the micro*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   534  LOCAL_INLINE uint16 Port_lIsPortPdr1Available(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   535  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   536  /*INLINE function to check if the IOCRx register for the port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   537     is available or not for the micro */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   538  LOCAL_INLINE uint16 Port_lIsPortIocrAvailable(uint32 Port, uint16 Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   539  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   540  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   541  #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   542  /*INLINE function to check if the Pin Parameter */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   543  LOCAL_INLINE uint8 Port_lChkPin
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   544  (
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   545    Port_PinType Pin, uint32 PortNo, uint32 PinNo
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   546  );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   547  #endif /* (PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   548  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   549  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   550  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   551  #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   552  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   553  /*INLINE function to check the error
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   554    in the Port_SetPinMode Api  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   555  LOCAL_INLINE uint32 Port_lModeErrChk
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   556  (
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   557    const uint8 Dir, const uint8 PinMode, const uint8 PinCharacteristic,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   558    const uint32 ConfigIndex, const uint32 PinNumber
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   559  );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   560  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   561  /* (PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   562  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   563  /*(PORT_SET_PIN_MODE_API==STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   564  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   565  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   566  /*INLINE function to extract port number Port_PinType data */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   567  LOCAL_INLINE uint32 Port_lNumber(Port_PinType Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   568  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   569  /*INLINE function to extract pin number from Port_PinType data*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   570  LOCAL_INLINE uint32 Port_lPinNumber(Port_PinType Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   571  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   572  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   573  /*INLINE function to to check if the port supports LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   574     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   575  #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   576  LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   577  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   578  /*INLINE function to to check if the port supports LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   579     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   580  LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable63(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   581  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   582  /*INLINE function to to check if the port supports LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   583     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   584  LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   585  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   586  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   587  /*INLINE function to to check if the port supports PCSR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   588     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   589  LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   590  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   591  /*INLINE function to to check if the port supports PCSR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   592     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   593  LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable63(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   594  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   595  /*INLINE function to to check if the port supports PCSR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   596     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   597  LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   598  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   599  /*INLINE function to to check if the port supports PDISC
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   600     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   601  LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable31(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   602  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   603  /*INLINE function to to check if the port supports PDISC
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   604     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   605  LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable63(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   606  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   607  /*INLINE function to to check if the port supports PDISC
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   608     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   609  LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable(uint32 Port);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   610  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   611  /*INLINE function to to check if the port supports PCSR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   612     for the microcontroller */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   613  #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   614  LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable(uint32 PortLPCRvalue);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   615  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   616  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   617  #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   618  /*Local Function to report Safety Error and DET*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   619  static void Port_lReportError(const uint8 ApiId, const uint8 ErrorId);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   620  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   621  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   622  #if(PORT_INIT_CHECK_API==STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   623  LOCAL_INLINE Std_ReturnType Port_lPDRCheck(const Port_ConfigType* const ConfigPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   624  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   625  LOCAL_INLINE Std_ReturnType Port_lIOInitCheck(const Port_ConfigType* const ConfigPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   626  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   627  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   628  #if(PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   629  #if(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   630  LOCAL_INLINE uint8 Port_lDirectionChk(const Port_PinDirectionType Dir);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   631  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   632  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   633  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   634  #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   635  LOCAL_INLINE uint8 Port_lCheckInitStatus (const uint8 ApiId);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   636  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   637  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   638  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   639  **                      Global Function Definitions                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   640  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   641  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   642  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   643  ** Traceability:[cover parentID={F82C0F6A-6278-481b-8D05-B522AA65EF34}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   644  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   645  ** Syntax : void Port_Init                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   646  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   647  **                      const Port_ConfigType *const  ConfigPtr               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   648  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   649  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   650  ** Description : This Api:                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   651  **   - Initializes all the ports as per configuration                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   652  **   - Initializes the whole port structure of MCU                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   653  **   - Can be used to initialize and reinitialize the                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   654  **     port with different configuration                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   655  **   - Should be called first in order to initialize                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   656  **     the port for use                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   657  **    [/cover]                                                                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   658  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   659  ** Service ID:  0x00                                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   660  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   661  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   662  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   663  ** Reentrancy:  Non Reentrant                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   664  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   665  ** Parameters (in) :  ConfigPtr - Pointer to Port configuration               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   666  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   667  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   668  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   669  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   670  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   671  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   672  /* [cover parentID={B728EB0E-7DF1-43a6-BA99-26E5E5AB2820}
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   673    ,{FF638487-3C81-4b25-BB75-F23CC17B1D51}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   674  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   675  void Port_Init ( const Port_ConfigType * const ConfigPtr )
; Function Port_Init
.L50:
Port_Init:	.type	func
	sub.a	a10,#8
.L436:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	   676  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   677    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   678    uint8                              ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   679    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   680  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   681    /* [cover parentID={6F871482-D2C8-4afb-A935-87C2319D52B2}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   682     If DET and SAFETY Error Check is Enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   683    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   684  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   685    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   686    /* [cover parentID={AA59C056-39D2-446e-A53A-78319518692C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   687    Check if the input parameter is NULL pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   688    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   689  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   690    if (ConfigPtr == NULL_PTR)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   691    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   692      /* Report PORT_E_INIT_FAILED DET */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   693      /* [cover parentID={BB2CFE1F-730A-4d1f-93E3-A6D90B294464}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   694      Report error PORT_E_INIT_FAILED
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   695      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   696      Port_lReportError(PORT_SID_INIT, PORT_E_INIT_FAILED);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   697      ErrStatus = (uint8)E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   698    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   699    /* [cover parentID={F52B69B6-0EF6-43ad-8C12-069D84206D26}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   700    Have all checks passed?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   701    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   702    if(ErrStatus == (uint8)E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   703    #endif /*(PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   704    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   705      /* [cover parentID={3B6B18C3-8A08-4265-B81F-38BF48B7609A}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   706      Intitialize all  Port Variables
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   707      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   708      /* The function Port_Init() shall also initialize all variables
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   709        used by the PORT driver module to an initial state.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   710        There are no such variables in the port module
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   711      */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   712  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   713      Port_kConfigPtr = ConfigPtr;
	movh.a	a15,#@his(Port_kConfigPtr)
.L494:
	st.a	[a15]@los(Port_kConfigPtr),a4
.L89:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	   714      /* Initialise General Purpose I/O Ports and Peripheral I/O Lines */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   715      /* [cover parentID={C4061DE2-BE40-4247-B2EA-45125A8C94C2}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   716       Initialise General Purpose I/O Ports and Peripheral I/O Lines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   717      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   718  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   719      Port_lIOInit();
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   720  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   721      /* [cover parentID={6554EAD4-0747-405a-B40D-904D5321D11A}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   722       Set Driver state as Intialized
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   723      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   724  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   725      #if ((PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON) || (PORT_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   726      Port_InitStatus = PORT_INITIALIZED;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   727      #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   728    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   729  }/* Port_Init */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   730  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   731  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   732  /* Enable / Disable the use of the function */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   733  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   734  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   735  ** Traceability:[cover parentID={2795E968-B7CE-458b-A38E-D63D1FC188C2}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   736  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   737  ** Syntax :void Port_SetPinDirection                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   738  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   739  **                      const Port_PinType Pin,                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   740  **                      const Port_PinDirectionType Direction                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   741  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   742  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   743  ** Description :  This Api:                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   744  **  - sets the port pin direction during runtime                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   745  **  - Is available for parameter Pin                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   746  **    whose direction is configured as changeable during run time             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   747  **  - Is only available if the pre-compiler switch                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   748  **    PORT_SET_PIN_DIRECTION_API is set STD_ON.                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   749  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   750  ** Service ID:  0x01                                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   751  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   752  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   753  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   754  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   755  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   756  ** Parameters (in) :   Pin - port pin ID whose direction has                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   757  **                      to be set                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   758  **                     Direction - port pin direction                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   759  **                      to be set                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   760  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   761  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   762  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   763  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   764  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   765  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   766  /* [cover parentID={DD6796CD-419A-4189-970F-EC176967EBD0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   767  Port_SetPinDirection
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   768  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   769  void Port_SetPinDirection(
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   770    const Port_PinType Pin,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   771    const Port_PinDirectionType Direction
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   772  )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   773  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   774    /* Each Port Number for the hardware unit  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   775    uint32               PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   776    uint32               PinNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   777    uint32               PopcntTempVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   778  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   779    #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   780    uint8                ErrReport;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   781    #endif /*PORT_DEV_ERROR_DETECT == STD_ON*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   782    uint32               ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   783    const uint8         *IocrDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   784    volatile uint32      *IocrRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   785    const uint32        *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   786    Ifx_P               *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   787    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   788    uint8                              ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   789    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   790    /* Check for DET: PORT_E_UNINIT */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   791    /* [cover parentID={519C69CD-AB3D-42d6-AF95-BC951091AD26}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   792    Safety and DET check is ON
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   793    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   794    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   795     ErrStatus = Port_lCheckInitStatus(PORT_SID_SETPINDIRECTION);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   796    /* [cover parentID={DE864396-318F-4c9a-A6C3-3466313D6004}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   797    Have all checked passed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   798    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   799    if(ErrStatus == (uint8)E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   800    #endif /* PORT_DEV_ERROR_DETECT */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   801    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   802      /* Extract the port number and pin number from the Pin Symbolic ID */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   803      /* [cover parentID={AE6816B0-647B-45c0-9412-F1E7870997AC}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   804      Extract Pin Number from Pin symbolic id
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   805      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   806      PortNumber = (uint32)Port_lNumber(Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   807      /* [cover parentID={AF149DEE-8562-4a78-A480-54C5EC924D7F}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   808      Extract Port Number from Pin symbolic id
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   809      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   810      PinNumber  = (uint32)Port_lPinNumber(Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   811      /* [cover parentID={680F23BE-BE75-4381-BB60-DFA81F793974}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   812      Safety and DET check is ON
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   813      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   814      #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   815      /*  Function parameters are checked in the order in which they are
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   816                 passed.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   817      */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   818      /*  Check if Pin is valid */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   819      /* [cover parentID={E84A49BC-A223-4ebd-B952-82ED816CC379}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   820      Check if Pin is valid
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   821      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   822      ErrReport = Port_lChkPin(Pin, PortNumber, PinNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   823  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   824      if (ErrReport == (uint8)1U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   825      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   826        /*Report PORT_E_PARAM_PIN DET if the pin is out of range */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   827        /* [cover parentID={A873ECB9-A48C-431f-B4D2-B2C2D8F88D41}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   828        Report DET PORT_E_PARAM_PIN
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   829        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   830        Port_lReportError(PORT_SID_SETPINDIRECTION, PORT_E_PARAM_PIN);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   831        ErrStatus = (uint8)E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   832      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   833      /* [cover parentID={069D6832-BF8C-4a96-8CB8-55B552F337DB}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   834      Is the Pin passed valid
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   835      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   836      if(ErrStatus == (uint8)E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   837      #endif /* (PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   838      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   839        #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   840        ErrStatus = Port_lDirectionChk(Direction);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   841         /* [cover parentID={260E26AE-2773-4b64-8FF1-C68FC88A2FD0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   842         Have all check passed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   843         [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   844        if(ErrStatus == (uint8)E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   845        #endif /* PORT_SAFETY_ENABLE == STD_ON */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   846        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   847          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   848          /* [cover parentID={F1F12241-F396-4abb-BF8B-59D21349B878}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   849          check if port is available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   850          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   851          if(PortNumber < PORT_NUMBER_32)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   852          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   853           PopcntTempVal = PORTS_AVAILABLE_00_31 << (PORT_POPCNT_CALC - PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   854           ConfigIndex = POPCNT(PopcntTempVal) - 1U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   855          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   856          else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   857          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   858           ConfigIndex = POPCNT(PORTS_AVAILABLE_00_31);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   859           PopcntTempVal = (uint32)PORTS_AVAILABLE_32_63 <<(PORT_POPCNT_CALC_32_63 - PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   860           ConfigIndex += POPCNT(PopcntTempVal) - 1U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   861          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   862  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   863          /* Get the config data location for specified Port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   864          /* MISRA2012_RULE_11_5_JUSTIFICATION: The PortConfigSetPtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   865          to structure of type Port_n_ConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   866          for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   867          done as direct assignment to DataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   868          not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   869          aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   870          MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   871          /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   872          is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   873          and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   874          to DataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   875          will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   876          effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   877          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   878          configuration address calculation for each port and is within allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   879          range*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   880          DataPtr = (const uint32*)(const void*) ( \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   881                    (Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   882  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   883          /*parameter Pin is valid, check for pin direction changeable DET error */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   884          /*
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   885          Check if the direction is configured as changeable or not
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   886          */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   887  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   888          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   889           configuration address calculation for each port and is within allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   890          range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   891          /* [cover parentID={A334B935-4BA7-4b2d-9E15-833FC8D28A08}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   892          Is the directionof the specified pin configured as changable
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   893          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   894          if ( ((*(DataPtr + PORT_DATA_OFS_DIR)) & ((uint32)0x01U << PinNumber))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   895               == (uint32)PORT_PIN_DIRECTION_NOT_CHANGEABLE
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   896             )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   897          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   898            /* [cover parentID={F9F1FB83-95BC-4b2e-A0E0-682C717B488C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   899            Safety and DET check on
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   900            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   901  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   902            #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   903            /* Report PORT_E_DIRECTION_UNCHANGEABLE DET if pin is configured for
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   904               direction not changeable
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   905            */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   906            /*Report DET PORT_E_DIRECTION_UNCHANGEABLE*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   907            /* [cover parentID={3B687236-2279-44b3-AFDD-85E97281DF7C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   908            Report Port_E_Direction
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   909            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   910            Port_lReportError(PORT_SID_SETPINDIRECTION, PORT_E_DIRECTION_UNCHANGEABLE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   911            #endif /* PORT_DEV_ERROR_DETECT */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   912          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   913          else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   914          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   915  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   916            IocrDataPtr = (const uint8*)(DataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   917            /* Get Port Address */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   918            /* [cover parentID={30CB73AA-E6E7-4e75-89B1-3CB01C229116}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   919            Get Port Address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   920            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   921            PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   922            /* Get the IOCR0 register address of particular port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   923            /* MISRA2012_RULE_11_5_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   924            the required type (volatile uint32*) is done as direct assignment to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   925            IocrRegPtr, pointer of type volatile uint32 is not possible.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   926            The conversion will produce a pointer that is correctly aligned
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   927            and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   928            MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   929            /* MISRA2012_RULE_11_3_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   930            (volatile void*) is done as it can hold the address of any type, here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   931            a structure pointer and then typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   932            (volatile uint32*) as direct assignment to IocrRegPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   933            type volatile uint32 is not possible. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   934            pointer that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   935            by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   936            /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   937                          SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   938            IocrRegPtr = ((volatile uint32*)(volatile void*)PortAddressPtr + \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   939           ((PinNumber / (uint32)PORT_PIN_DIV) + (uint32)PORT_IOCR0_REG_OFFSET));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   940            /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   941              configuration address calculation for each pin and is within allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   942              range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   943            /* [cover parentID={978123C1-9373-4a8e-8866-21FA2FE9D41E}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   944            if((*(IocrDataPtr + PinNumber) & (uint8)PORT_DIR_MSK) == (uint8)Direction)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   945            {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   946              /* [cover parentID={49EF9B7C-7285-43c7-B045-2D566FDD679E}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   947              Mcal_SetBitAtomic(IocrRegPtr, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   948             ((PinNumber % ((uint32)PORT_PIN_DIV)) * (uint32)PORT_PIN_MUL), \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   949              PORT_PIN_IOCR_LEN, *(IocrDataPtr + PinNumber));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   950            }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   951            else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   952            {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   953              /* [cover parentID={E392C2BC-EE42-4d9d-B55F-90876B470B2B}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   954              Mcal_SetBitAtomic(IocrRegPtr, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   955              ((PinNumber % ((uint32)PORT_PIN_DIV)) * (uint32)PORT_PIN_MUL), \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   956              PORT_PIN_IOCR_LEN, *((const uint8*)(DataPtr + PORT_DATA_OFS_CTL2) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   957              + PinNumber));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   958            }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   959          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   960        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   961      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   962     }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   963    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   964    /* MISRA2012_RULE_2_2_JUSTIFICATION:Value assigned to variable
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   965    IocrRegPtr is passed to Mcal_SetBitAtomic operation.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   966    /* MISRA2012_RULE_8_13_JUSTIFICATION: No side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   967    by violating this MISRA rule, as the pointer IocrRegPtr is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   968    acessed using assembly instruction.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   969  } /* Port_SetPinDirection */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   970  #endif /* Direction changes allowed / Port_SetPinDirection API is ON */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   971  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   972  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   973  ** Traceability:  [cover parentID={8E391A13-5734-4f2a-BDEC-0ED98080F44B}]     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   974  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   975  ** Syntax :   void Port_RefreshPortDirection ( void )                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   976  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   977  ** Description :  This Api:                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   978  **   - refreshes the direction for all the port                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   979  **     pins that are configured as direction not changeable during run time   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   980  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   981  ** Service ID:  0x02                                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   982  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   983  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   984  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   985  ** Reentrancy:  Non Reentrant                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   986  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   987  ** Parameters (in) :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   988  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   989  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   990  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   991  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   992  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   993  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   994  void Port_RefreshPortDirection(void)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   995  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   996    uint32                LoopCtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   997    /* Each Port Number for the hardware unit  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   998    uint32                PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	   999    uint32                ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1000    #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1001    /* Direction changeable allowed */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1002    uint32                DirectionData;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1003    uint32                PinPos;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1004    #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1005    const uint32          *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1006    const uint8           *IocrDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1007    volatile uint8        *IocrRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1008    Ifx_P *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1009  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1010    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1011    uint8                              ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1012    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1013  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1014    /* [cover parentID={26108B2E-0030-4583-810D-4F9BD60FB0CA}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1015      If DET and SAFETY Error Check is Enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1016    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1017    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1018    /* Check if the Port is initialized*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1019    /* Check for DET: PORT_E_UNINIT */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1020    ErrStatus = Port_lCheckInitStatus(PORT_SID_REFRESHPORTDIR);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1021     /* [cover parentID={64BA028C-EFB8-440b-9F75-D837C37F4334}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1022    Have all checks passed?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1023    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1024    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1025    #endif /* (PORT_DEV_ERROR_DETECT) == STD_ON*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1026    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1027      /* Loop from Port 0 till last Port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1028      PortNumber = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1029      ConfigIndex = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1030      /* [cover parentID={E235D887-A3D6-4a3b-928B-544874EA9DDA}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1031      Refresh All Ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1032      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1033      do
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1034      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1035        /* [cover parentID={048A6B7E-A14B-4a96-88A5-DCB6E57ED548}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1036        /*[cover parentID={E06735D6-076F-4a2c-84B7-86E956B7E680}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1037        /*[cover parentID={E1E7197A-AB3F-46ef-B939-6ED36FB89690}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1038  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1039        /*Check if the port is available*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1040  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1041  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1042        if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1043        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1044          /* Pointer to the data for the port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1045          DataPtr = (const uint32*)(const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1046                    /* MISRA2012_RULE_11_5_JUSTIFICATION: The PortConfigSetPtr
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1047                    is a pointer to structure of type Port_n_ConfigType used to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1048                    keep configuration data for each port. The conversion to the
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1049                    required type (const uint32*) is done as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1050                    to DataPtr, pointer of type const uint32 is not possible. The
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1051                    conversion will produce a pointer that is correctly aligned
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1052                    and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1053                    MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1054                    /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1055                    (const void*) is done as it can hold the address of any
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1056                    type, here a structure pointer and then typecasted to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1057                    the required (const uint32*) as direct assignment to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1058                    DataPtr, pointer of   type const uint32 is not possible.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1059                    The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1060                    aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1061                    this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1062                    /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1063                    used due to configuration address calculation for each port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1064                    and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1065                    ((Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1066  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1067          /* [cover parentID={10A8B1D3-CACA-4205-9625-D08F224833E0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1068          Are changes in Pin direction allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1069          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1070          #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1071          /* Direction changeable allowed */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1072          /* Get the direction changeable configuration for all the port pins */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1073          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1074          configuration address calculation for each port and is within allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1075          range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1076          DirectionData = *(DataPtr + PORT_DATA_OFS_DIR);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1077          #endif /* PORT_SET_PIN_DIRECTION_API == STD_ON*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1078  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1079          /* Pointer to control data for the first pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1080          /* MISRA2012_RULE_11_5_JUSTIFICATION: Each 32-bit wide IOCR register
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1081          controls four GPIO port lines. Thus DataPtr is converted to (const uint8*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1082          to get the configuration address of each port. The conversion will
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1083          produce a pointer that is correctly aligned and hence no side effects
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1084          foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1085          /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1086          is done as it can hold the address of any type. Here DataPtr is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1087          typecasted to the required (const uint8*) as direct assignment to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1088          IocrDataPtr, pointer of type const uint8 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1089          will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1090          effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1091          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1092           configuration address calculation for each port and is within allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1093           range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1094          IocrDataPtr = (const uint8*)(const void*)(DataPtr + PORT_DATA_OFS_CTL);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1095  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1096          /* Pointer to control register for the first pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1097          /* Get Port Address */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1098          /* [cover parentID={97F0EB43-CEEA-4e13-9551-78AD7822B738}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1099          Get Port Address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1100          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1101          PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1102  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1103          /* Get the IOCR0 register address of particular port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1104          IocrRegPtr = (volatile uint8 *)(volatile void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1105                       /* MISRA2012_RULE_11_5_JUSTIFICATION: Performed to calculate
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1106                       SFR address for each port.  Each 32-bit wide IOCR register
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1107                       controls four GPIO port lines. Thus it is again converted
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1108                       to (volatile uint8 *) to get the SFR address of each port.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1109                       The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1110                       aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1111                       this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1112                       /* MISRA2012_RULE_11_3_JUSTIFICATION: Performed to calculate
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1113                       SFR address for each port. The conversion to (volatile void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1114                       is done as it can hold the address of any type. Each
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1115                       32-bit wide IOCR register controls four GPIO port lines.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1116                       Thus it is again converted to (volatile uint8 *) to get the
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1117                       SFR address of each port. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1118                       pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1119                       effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1120                       /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1121                       used due to SFR address calculation and is within allowed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1122                       range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1123                       ((volatile uint32 *)(volatile void*)PortAddressPtr + \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1124                       /* MISRA2012_RULE_11_5_JUSTIFICATION: Performed to calculate
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1125                       SFR address for each port.Here PortAddressPtr is typecasted
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1126                       to the required (volatile uint32 *) to get the base address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1127                       of the SFR. The conversion will produce a pointer that is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1128                       correctly aligned and hence no side effects foreseen by
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1129                       violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1130                       /* MISRA2012_RULE_11_3_JUSTIFICATION: Performed to calculate
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1131                       SFR address for each port. The conversion to (volatile void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1132                       is done as it can hold the address of any type. Here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1133                       PortAddressPtr is typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1134                       (volatile uint32 *) to get the base address of the SFR. The
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1135                       conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1136                       aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1137                       this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1138                        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1139                        SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1140                        PORT_IOCR0_REG_OFFSET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1141          /* [cover parentID={9D1A197B-09B9-457f-9D5F-088C8BA6BCA7}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1142           [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1143          #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1144          PinPos = 0x01U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1145          #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1146  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1147          /* Start from the first pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1148          LoopCtr = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1149          /* [cover parentID={5FEA88DC-BA19-495b-8EC5-239555D42EA6}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1150          LoopNode1
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1151          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1152          do
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1153          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1154            if(Port_lIsPinAvailable(PortNumber, LoopCtr) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1155            {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1156              /* [cover parentID={C242AA37-ADF0-4b0e-8B99-9F8A896C0FF7}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1157              Direction changeable is disabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1158              [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1159              /* [cover parentID={95C93A92-7730-4bdc-A8B0-888F6704A177}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1160               Direction changeable is enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1161               [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1162              #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1163              /* Direction changeable is enabled */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1164              if((DirectionData & PinPos) == (uint32)PORT_PIN_DIRECTION_NOT_CHANGEABLE)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1165              {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1166                /* Direction of the pin cannot be changed during run time */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1167                /* Write the default value to the control bit fields of the Pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1168                *IocrRegPtr =  *IocrDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1169              }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1170              #else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1171              {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1172                /* Direction changeable is disabled */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1173                /* Write the default value to the control bit fields of the Pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1174                *IocrRegPtr = *IocrDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1175              }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1176              #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1177            }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1178            /* Increment to point to the next pin in register */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1179            IocrRegPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1180            /* Increment to point to the next pin in configuration set */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1181            IocrDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1182            /* [cover parentID={9DE176C3-612D-4210-B034-7755FF5572B8}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1183            Write default value to control field bit
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1184            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1185            /* [cover parentID={6442CCBA-4597-4b82-8518-14B15F0D9914}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1186            #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1187            /* Shift the pin position to next pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1188            /* [cover parentID={ACDC676A-2312-44e2-B88F-8F4BB1AC6BF9}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1189            Write Default value to control bit fileld of pin
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1190            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1191            PinPos = PinPos << PIN_SHIFT;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1192            #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1193            /* Loop for each pin in the port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1194            LoopCtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1195          } while (LoopCtr <= (uint32)PORT_PIN_MAX_NUMBER );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1196          ConfigIndex++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1197        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1198        PortNumber++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1199      } while (PortNumber <= (uint32)PORT_MAX_NUMBER); /* Loop for all the ports */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1200    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1201  }/* Port_RefreshPortDirection */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1202  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1203  /* Enable / Disable the use of the function */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1204  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1205  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1206  ** Traceability:[cover parentID={3424D3D4-48B3-4d9a-A769-CC90A3B309FB}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1207  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1208  ** Syntax :void Port_SetPinMode                                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1209  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1210  **                      const Port_PinType Pin,                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1211  **                      const Port_PinModeType Mode                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1212  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1213  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1214  ** Description :  This Api:                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1215  **   - Sets the port pin mode during runtime.                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1216  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1217  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1218  ** Service ID:  0x04                                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1219  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1220  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1221  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1222  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1223  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1224  ** Parameters (in) :    Pin - port pin ID whose direction has                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1225  **                      to be set                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1226  **                      Mode - port pin mode to be set                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1227  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1228  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1229  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1230  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1231  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1232  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1233  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1234  /* [cover parentID={DD6796CD-419A-4189-970F-EC176967EBD0},
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1235  {E872D973-122B-4afa-8C53-EA61CA747541}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1236  Port_SetPinMode
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1237  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1238  void Port_SetPinMode(const Port_PinType Pin, const Port_PinModeType Mode)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1239  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1240    /* Each Port Number for the hardware unit  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1241    uint32           PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1242    uint32           PinNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1243    #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1244    uint32           ErrMode;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1245    uint8            ErrReport;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1246    uint8            Direction;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1247  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1248    /*Mode_Mask used for getting the last three bits */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1249    uint8 Mode_Mask =(Mode & IOCR_ALT_MODE_MASK);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1250    /* PinMode used for the getting the characterstic passed by the user */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1251    uint8 PinMode = (Mode_Mask >> IOCR_ALT_MODE_POS);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1252    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1253    uint32           ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1254    uint32           Index;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1255    const uint32     *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1256    volatile uint32  *IocrRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1257    uint8            ReadMode;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1258    uint8            SetMode;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1259    Ifx_P           *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1260    /* Array to store the iocr update value for various chracterstic */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1261    /*PinCharacteristic used to get the values except the charcerstic values */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1262    uint8 PinCharacteristic = Mode & (IOCR_ELEC_CHAR_MASK);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1263    /* [cover parentID={E88E8FD6-6EF8-4b35-8789-E25321923A81},
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1264    {FE1BC003-5F92-447e-966C-3C31F1649F10}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1265    Safety and DET Check ON
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1266    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1267    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1268    uint8                              ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1269    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1270    /* [cover parentID={E88E8FD6-6EF8-4b35-8789-E25321923A81}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1271    Safety and DET Check ON
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1272    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1273    #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1274    /* Report PORT_E_UNINIT DET if Port initialisation is not done
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1275    */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1276    /*Check if Port is not intialized */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1277    ErrStatus = Port_lCheckInitStatus(PORT_SID_SETPINMODE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1278     /* [cover parentID={20D124CE-1F65-47f6-9186-0E8F84C69F2E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1279    Have all checks passed?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1280    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1281  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1282    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1283    #endif /* PORT_DEV_ERROR_DETECT == STD_ON */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1284    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1285      /* Extract the port number and pin number from the Pin Symbolic ID */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1286      /* [cover parentID={031208B9-77C2-44e2-90F7-C288DD4A08E6}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1287      Extract the pin number  from the Pin Symbolic ID
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1288      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1289      PortNumber = (uint32)Port_lNumber(Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1290      /* [cover parentID={ABE23C13-9E60-4124-B8A9-DECFB6A3C518}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1291      Extract the port number  from the Pin Symbolic ID
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1292      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1293      PinNumber  = (uint32)Port_lPinNumber(Pin);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1294      /* [cover parentID={FE1BC003-5F92-447e-966C-3C31F1649F10}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1295      Safety and DET Check ON
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1296      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1297      #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1298      /*  Function parameters are checked in the order in which they are
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1299        passed.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1300      */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1301      /* Check if Pin is valid */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1302      /* [cover parentID={A0A4DB52-61AD-4734-B1C2-49ABBD76F872}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1303      Check if Pin is valid
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1304      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1305      ErrReport = Port_lChkPin(Pin, PortNumber, PinNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1306  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1307      if (ErrReport == (uint8)1U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1308      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1309  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1310        /* [cover parentID={D5FE479C-3B6A-4871-949A-7B7D4BCEC667}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1311         Report DET PORT_E_PARAM_PIN
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1312        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1313        /*Report PORT_E_PARAM_PIN DET if the pin is out of range */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1314        Port_lReportError(PORT_SID_SETPINMODE, PORT_E_PARAM_PIN);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1315        ErrStatus = (uint8)E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1316      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1317      /* [cover parentID={D1C48326-519E-40a7-BF4F-8171CFB5E5DF}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1318      Have all checks passed?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1319      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1320      if(ErrStatus == (uint8)E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1321      #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1322  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1323      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1324        ConfigIndex = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1325        /* [cover parentID={58731E92-3FAD-4cc1-9825-3C42C3ACED3D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1326        Check for available Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1327        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1328        for(Index = 0U; Index < PortNumber; Index++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1329        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1330          /* [cover parentID={B532B0B2-3AC6-40c2-BD12-B195CB12FAEF}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1331          Check if Port is  available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1332          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1333          if(Port_lIsPortAvailable(Index) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1334          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1335            ConfigIndex++; /* to identify the Index of configuration*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1336          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1337        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1338        /* Get the config data location for specified Port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1339        /* MISRA2012_RULE_11_5_JUSTIFICATION: The PortConfigSetPtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1340          to structure of type Port_n_ConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1341          for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1342          done as direct assignment to DataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1343          not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1344          aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1345          MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1346          /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1347          is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1348          and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1349          to DataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1350          will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1351          effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1352        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1353        configuration address calculation for each port and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1354        DataPtr = (const uint32*)(const void*) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1355                  ((Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1356  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1357        /* Get Port Address */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1358        /* [cover parentID={2AC99FEF-646E-4b2c-B3A4-DF4484F576C0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1359        Get Port Address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1360        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1361        PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1362        /* Get the IOCR0 register address of particular port */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1363        /* MISRA2012_RULE_11_5_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1364            the required type (volatile uint32*) is done as direct assignment to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1365            IocrRegPtr, pointer of type volatile uint32 is not possible.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1366            The conversion will produce a pointer that is correctly aligned
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1367            and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1368            MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1369            /* MISRA2012_RULE_11_3_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1370            (volatile void*) is done as it can hold the address of any type, here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1371            a structure pointer and then typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1372            (volatile uint32*) as direct assignment to IocrRegPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1373            type volatile uint32 is not possible. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1374            pointer that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1375            by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1376        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1377                      SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1378  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1379        IocrRegPtr = ((volatile uint32*)(volatile void*)PortAddressPtr + \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1380                      (PinNumber / (uint32)4) + PORT_IOCR0_REG_OFFSET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1381        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1382        configuration data calculation for each port and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1383        /* [cover parentID={D519305E-CD8B-436d-8177-8C84F4B33053},
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1384        {592484B8-FCFB-4bac-8134-1B8364504F20}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1385        Check if mode is invalid
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1386        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1387        if ((((*(DataPtr + PORT_DATA_OFS_MODE)) & ((uint32)PORT_CONSTANT_0x01  \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1388              << PinNumber))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1389             == (uint32)PORT_PIN_MODE_NOT_CHANGEABLE)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1390           )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1391        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1392          /* [cover parentID={6B6A40CE-F352-41fb-B28C-FA862B043E1C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1393          Report DET PORT_E_MODE_UNCHANGEABLE
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1394          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1395          /* [cover parentID={80B05273-FBFF-411b-8564-1A25350606F0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1396          DET Checks or Safety checks enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1397          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1398          /* Report PORT_E_MODE_UNCHANGEABLE DET if the pin is configured
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1399           as mode not changeable */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1400          #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1401          Port_lReportError(PORT_SID_SETPINMODE, PORT_E_MODE_UNCHANGEABLE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1402          #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1403  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1404        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1405        else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1406        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1407          /* [cover parentID={20DDBF5B-7556-4271-BE51-C64109F6BFEC}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1408          DET Checks or Safety checks enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1409          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1410          #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1411          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1412          SFR data calculation for each pin and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1413          Direction = (*((volatile uint8*)(IocrRegPtr) + (PinNumber % IOCR_VALUE))) & PORT_OUT_PIN_MASK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1414  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1415          ErrMode = Port_lModeErrChk(Direction, PinMode, PinCharacteristic, ConfigIndex, PinNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1416          /* [cover parentID={AAD027EA-86D2-4b3c-9ED5-074FC754F555}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1417          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1418          if (ErrMode == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1419          #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1420          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1421  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1422            /*Read the IOCR register value for the Pin */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1423            /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1424            SFR data calculation for each pin and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1425            ReadMode = *((volatile uint8*)(IocrRegPtr) + (PinNumber % (IOCR_VALUE)));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1426  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1427            uint8 PinAltMask = (Mode & PORT_GET_ALT_VALUE_SET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1428              /* Array to store the iocr update value for various chracterstic */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1429            uint8 IOCR_VALUE_TABLE[MAX_ELEC_CHAR]={((ReadMode & PORT_ALT_MODE_MASK) | PinAltMask),PIN_NOINPUTPULL,PIN_PULLDOWN,PIN_PULLUP,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1430            PinAltMask ,(PIN_OPENDRAIN|PinAltMask),0x00,0x00};
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1431  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1432            SetMode = (((ReadMode) & (PORT_PIN_GET_DIRECTION)) | (IOCR_VALUE_TABLE[PinCharacteristic]));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1433  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1434            /* [cover parentID={92E68909-8F48-407d-BA48-267EFDF6E342}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1435            Set the new mode in IOCR register
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1436            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1437            /* Set the new mode in IOCR register */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1438            Mcal_SetBitAtomic(IocrRegPtr, (PinNumber % ((uint32)PORT_PIN_DIV)) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1439                              *(uint32)PORT_PIN_MUL, PORT_PIN_IOCR_LEN,SetMode);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1440          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1441        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1442  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1443      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1444    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1445    /* MISRA2012_RULE_2_2_JUSTIFICATION:Value assigned to variable
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1446    SetMode is passed to Mcal_SetBitAtomic operation*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1447    /* MISRA2012_RULE_8_13_JUSTIFICATION:IocrRegPtr is declared as volatile.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1448    Declaring as pointing to const is not necessary*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1449  }/* Port_SetPinMode */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1450  #endif /* (PORT_SET_PIN_MODE_API == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1451  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1452  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1453  /* Enable / Disable the use of the function */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1454  #if (PORT_VERSION_INFO_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1455  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1456  ** Traceability:[cover parentID={2D85A6DA-805F-4156-9E3F-0E11E7BE2604}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1457  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1458  ** Syntax :void Port_GetVersionInfo                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1459  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1460  **                       Std_VersionInfoType* const versioninfo               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1461  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1462  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1463  ** Description :  This Api:                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1464  **   - This function returns the version information of this module           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1465  **     The version information include : Module ID, Vendor ID,                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1466  **     Vendor specific version numbers                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1467  **   - This function is available if the PORT_VERSION_INFO_API is             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1468  **     set ON                                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1469  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1470  ** Service ID:  0x03                                                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1471  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1472  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1473  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1474  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1475  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1476  ** Parameters (in) :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1477  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1478  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1479  ** Parameters (out):  versioninfo - Pointer to store the                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1480  **                    version information of this module.                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1481  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1482  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1483  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1484  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1485  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1486  /* [cover parentID={C68DD73A-BA58-4b13-8261-3BBD6DD8045D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1487  Retrive the version information of the module
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1488  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1489  /* [cover parentID={CE925AA6-2D11-46a5-A4ED-E3D7CF38220B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1490  Port_GetVersionInfo
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1491  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1492  void Port_GetVersionInfo(Std_VersionInfoType* const versioninfo)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1493  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1494    /* [cover parentID={F1B2FC7D-0D47-4bf6-A8CB-788E079F5D5A}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1495    If DET and SAFETY Error Check is Enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1496    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1497    #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1498    uint8                              ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1499    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1500  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1501    #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1502    /* [cover parentID={4F879E61-746A-4e5e-9724-82CD99391085}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1503    Check if the input parameter is NULL pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1504    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1505    /* Check for DET: PORT_E_PARAM_POINTER */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1506    if ((versioninfo) == NULL_PTR)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1507    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1508      /* [cover parentID={88D66642-8765-4500-AF00-C99E1DAB1E7C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1509         Report error PORT_E_PARAM_POINTER
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1510         [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1511      /* Report PORT_E_PARAM_POINTER DET if service called with
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1512         NULL_PTR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1513      */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1514      Port_lReportError(PORT_SID_GETVERSIONINFO, PORT_E_PARAM_POINTER);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1515      ErrStatus = (uint8)E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1516    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1517    /* [cover parentID={785EA334-13E9-4b89-94C7-73C6F5BFD253}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1518    Have all checks passed?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1519    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1520    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1521    #endif /*(PORT_VERSION_INFO_API==STD_ON)&&(PORT_DEV_ERROR_DETECT==STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1522    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1523      /* [cover parentID={C68DD73A-BA58-4b13-8261-3BBD6DD8045D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1524      Retrive the version information of the module
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1525      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1526      /* Vendor ID information */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1527      ((Std_VersionInfoType*)(versioninfo))->vendorID = PORT_VENDOR_ID;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1528      /* Port module ID information */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1529      ((Std_VersionInfoType*)(versioninfo))->moduleID = PORT_MODULE_ID;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1530      /* Port module Software major version information */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1531      ((Std_VersionInfoType*)(versioninfo))->sw_major_version =
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1532        (uint8)PORT_SW_MAJOR_VERSION;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1533      /* Port module Software minor version information */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1534      ((Std_VersionInfoType*)(versioninfo))->sw_minor_version =
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1535        (uint8)PORT_SW_MINOR_VERSION;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1536      /* Port module Software patch version information */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1537      ((Std_VersionInfoType*)(versioninfo))->sw_patch_version =
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1538        (uint8)PORT_SW_PATCH_VERSION;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1539    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1540  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1541  #endif /*(PORT_VERSION_INFO_API == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1542  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1543  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1544  **                      Private Function Definitions                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1545  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1546  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1547  **  Traceability:[cover parentID={2EAF025B-A798-4358-AB30-E29024E5B50E}]      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1548  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1549  ** Syntax :LOCAL_INLINE void Port_lIOInit(void)                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1550  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1551  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1552  **   -initializes Port registers                                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1553  **[/cover]                                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1554  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1555  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1556  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1557  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1558  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1559  ** Reentrancy:  Non Reentrant                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1560  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1561  ** Parameters (in) :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1562  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1563  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1564  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1565  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1566  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1567  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1568  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1569  LOCAL_INLINE void Port_lIOInit(void)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1570  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1571    const uint32            *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1572    const Port_n_ConfigType *ConfigDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1573    /* Each Port Number for the hardware unit */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1574    uint32                   PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1575    /* Each Port level for the hardware unit */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1576    uint32                   PortLevel;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1577    /* Each Port level for the hardware unit */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1578    uint32                   EmerStopConf;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1579    /* Index to identify the port configuration information
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1580    from the configuration array  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1581    uint32                   ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1582    Ifx_P                   *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1583    const uint32            *PCSRDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1584    const uint32            *PDISCDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1585    volatile const uint32   *PCSRRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1586    volatile const uint32   *PDISCRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1587     #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1588     uint32                   counter;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1589     const uint32            *LVDSDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1590     volatile const uint32   *LVDSRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1591    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1592    /* Function call to initialize PDR registers */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1593    /* [cover parentID={F889D63E-004B-47cc-98F4-647C43A94E70}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1594    Initialize PDR registers
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1595    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1596  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1597    Port_lPDRInit();
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1598    ConfigIndex = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1599  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1600     #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1601     /* MISRA2012_RULE_11_5_JUSTIFICATION: The Port_LVDSConfigTypePtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1602      to structure of type Port_n_LVDSConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1603      for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1604      done as direct assignment to LVDSDataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1605      not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1606      aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1607      MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1608      /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1609      is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1610      and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1611      to LVDSDataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1612      will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1613      effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1614    LVDSDataPtr = (const uint32*)(const void*) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1615                  (Port_kConfigPtr->Port_LVDSConfigTypePtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1616    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1617  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1618      /* MISRA2012_RULE_11_5_JUSTIFICATION: The Port_PCSRConfigTypePtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1619      to structure of type Port_PCSRConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1620      for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1621      done as direct assignment to PCSRDataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1622      not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1623      aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1624      MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1625      /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1626      is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1627      and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1628      to PCSRDataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1629      will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1630      effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1631    PCSRDataPtr = (const uint32*)(const void*)\ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1632                  (Port_kConfigPtr->Port_PCSRConfigTypePtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1633  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1634      /* MISRA2012_RULE_11_5_JUSTIFICATION: The PDiscSet is a pointer used to keep
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1635      configuration data for each port. The conversion to the required type
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1636      (const uint32*) is done as direct assignment to PDISCDataPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1637      type const uint32 is not possible. The conversion will produce a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1638      that is correctly aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1639      this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1640      /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1641      is done as it can hold the address of any type and then typecasted to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1642      the required (const uint32*) as direct assignment to PDISCDataPtr,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1643      pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1644      will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1645      effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1646    PDISCDataPtr = (const uint32*)(const void*)(Port_kConfigPtr->PDiscSet);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1647    /* [cover parentID={D5D7B024-C6C2-42ce-B672-F4E7A96B355E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1648    Write P_OUT and IOCR registers for all Ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1649    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1650    /* writing P_OUT and IOCR registers */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1651    for(PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER; PortNumber++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1652    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1653      /* [cover parentID={3B7F727B-8DC6-48e8-A3AF-7B1D3554463C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1654      Check if the Port is available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1655      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1656      /* [cover parentID={FB4FAE3B-D48D-4544-8A66-3530CA70E831}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1657      Is Port Available ?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1658      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1659      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1660      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1661        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1662        configuration address calculation for each port and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1663        ConfigDataPtr = (Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex ;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1664  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1665        /* Address of each port configuration */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1666        /* MISRA2012_RULE_11_5_JUSTIFICATION: The ConfigDataPtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1667          to structure of type Port_n_ConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1668          for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1669          done as direct assignment to DataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1670          not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1671          aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1672          MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1673          /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1674          is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1675          and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1676          to DataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1677          will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1678          effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1679        DataPtr = (const uint32 *)(const void*)(ConfigDataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1680        /* [cover parentID={539753A5-0E20-4ff6-8130-0AACC3226BC6}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1681        Get Port address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1682        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1683        PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1684        /*
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1685        OUT register is written before IOCR bit field to avoid
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1686        the glitches on the pin
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1687        */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1688        /* [cover parentID={27484890-FB95-4d48-B051-75AF3ABDD47E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1689        Check For Read Only Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1690        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1691        /* [cover parentID={110E0152-3E23-412d-8616-2CBCAFDA4AFD}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1692        Check For Read Only Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1693        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1694        /* [cover parentID={2AC1676A-8C13-4ef9-AD11-FE6E8A966ECD}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1695        Check For Read Only Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1696        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1697        #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1698  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1699        if(Port_lIsPortReadOnly(PortNumber) == (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1700        #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1701        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1702          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1703          configuration data calculation for each port and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1704          PortLevel = (*(DataPtr + PORT_DATA_OFS_LEVEL));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1705          PortAddressPtr->OUT.U = (uint32)PortLevel;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1706        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1707  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1708        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1709        configuration data calculation for each port and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1710        /* [cover parentID={B16CEA6F-BCC5-43c7-B827-91A30008E176}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1711        Configure the Port for Emergency stop
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1712        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1713        EmerStopConf = (*(DataPtr + PORT_DATA_OFS_EMER));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1714        /* MISRA2012_RULE_11_3_JUSTIFICATION: Conversion between pointers of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1715        different object types due to SFR access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1716        the required type is done by typecasting with ( uint32*) and
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1717        will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1718        effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1719        /* MISRA2012_RULE_11_8_JUSTIFICATION:The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1720        update the SFR. This is a register name which is having a volatile
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1721        qualifier and by typecasting, the input argument for the API discards
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1722        volatile keyword. No side effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1723        PORT_LIB_INIT_WRITEPERIPENDINITPROTREG((uint32*) & (PortAddressPtr->ESR.U), \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1724                                               EmerStopConf);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1725        /* [cover parentID={26C66A27-1BE3-4703-95D0-4882A6650331}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1726        Update the first set of  IOCR bits
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1727        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1728        PortAddressPtr->IOCR0.U  = *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1729        DataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1730        /* [cover parentID={77729584-F9FC-49de-925A-0C8A68591029}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1731        Update the IOCR bit feld
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1732        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1733        /* [cover parentID={714A20D0-2413-4477-A94F-9494BB046A34}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1734        Check if  IOCR4  bits is avilable for the Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1735        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1736        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_4_7) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1737        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1738          /* [cover parentID={26C66A27-1BE3-4703-95D0-4882A6650331}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1739          Update the second  set of  IOCR bits
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1740          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1741          PortAddressPtr->IOCR4.U  = *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1742        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1743        DataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1744        /* [cover parentID={9431ECB4-295D-4115-8202-7F5ACA538AF2}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1745        Check if IOCR8  bits is avilable for the Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1746        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1747        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_8_11) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1748        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1749          /* [cover parentID={178C5145-A9A3-4260-B89D-5CD445E0C467}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1750          Update the third set of  IOCR bits
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1751          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1752          PortAddressPtr->IOCR8.U  = *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1753        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1754        DataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1755        /* [cover parentID={D9F7A37F-E54F-451e-ADAB-E959A6D4B3EF}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1756        Check if IOCR12  bits is avilable for the Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1757        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1758        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_12_15) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1759        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1760          PortAddressPtr->IOCR12.U = *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1761        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1762        /* [cover parentID={2A9011F1-4A12-4d0d-A327-5FD4C3C08996}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1763        Check if Port supports LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1764        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1765  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1766        /* [cover parentID={32C4BED6-18CF-4f17-A87F-5579EC4D918B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1767        Check if Port supports LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1768        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1769       #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1770        if(Port_lIsPortLVDSAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1771        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1772          /* MISRA2012_RULE_11_5_JUSTIFICATION: Performed to calculate SFR address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1773          for each port. The conversion to the required type (volatile uint32*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1774          is done as direct assignment to LVDSRegPtr, pointer of type
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1775          volatile uint32 is not possible. The conversion will produce a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1776          that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1777          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1778          /* MISRA2012_RULE_11_3_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1779          (volatile void*) is done as it can hold the address of any type, here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1780          a structure pointer and then typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1781          (volatile uint32*) as direct assignment to LVDSRegPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1782          type volatile uint32 is not possible. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1783          pointer that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1784          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1785          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1786          SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1787          LVDSRegPtr  = ((volatile uint32*)(volatile void*)PortAddressPtr + \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1788                         PORT_LPCR_REG_OFFSET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1789  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1790          /* [cover parentID={54B20FB1-FE53-4c0d-8157-572AF5B3424B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1791          Checks if the Port Pin Pair for LVDS is available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1792          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1793  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1794          for(counter = (uint32)0U; counter < (uint32)PORT_MAX_LPCR_REG ; counter++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1795          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1796            /* [cover parentID={1EE0D069-1BB6-4be4-9B85-A8FB2C5A6638}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1797            Checks if the Port Pin Pair for LVDS is available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1798            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1799            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1800            {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1801              /* MISRA2012_RULE_11_3_JUSTIFICATION:  The typecasting is performed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1802              to update the SFR address for each PORT. The conversion to (uint32*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1803              will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1804              effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1805              /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1806              to update the SFR address for each PORT. The register name is having
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1807              a volatile qualifier and by typecasting, the input argument for
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1808              the API discards volatile keyword. No side effects foreseen by
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1809              violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1810              PORT_LIB_INIT_WRITEPERIPENDINITPROTREG((uint32*)LVDSRegPtr, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1811                                                     *LVDSDataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1812            }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1813            LVDSRegPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1814            LVDSDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1815          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1816        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1817         #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1818        /* [cover parentID={00ACE833-4BAB-4805-9CFF-13A3C27783BC}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1819        Take action depending on whether Port supports PCSR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1820        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1821        /* [cover parentID={05CAAD9A-A3DC-47fc-82B3-6E642BA3EE6C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1822         Check if Port supports PCSR
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1823         [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1824        /* [cover parentID={F98F129E-A66D-4d23-9F02-6C9937313727}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1825         Take action depending on whether Port supports PDISC
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1826        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1827        if(Port_lIsPortPCSRAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1828        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1829          /* MISRA2012_RULE_11_5_JUSTIFICATION: Performed to calculate SFR address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1830          for each port. The conversion to the required type (volatile uint32*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1831          is done as direct assignment to PCSRRegPtr, pointer of type
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1832          volatile uint32 is not possible. The conversion will produce a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1833          that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1834          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1835          /* MISRA2012_RULE_11_3_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1836          (volatile void*) is done as it can hold the address of any type, here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1837          a structure pointer and then typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1838          (volatile uint32*) as direct assignment to PCSRRegPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1839          type volatile uint32 is not possible. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1840          pointer that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1841          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1842          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1843             used due to SFR address calculation and is within allowe range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1844          PCSRRegPtr = ((volatile uint32*)(volatile void*)PortAddressPtr +
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1845          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1846             used due to SFR address calculation and is within allowe range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1847                       PORT_PCSR_REG_OFFSET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1848          /* PCSRn */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1849          /* MISRA2012_RULE_11_3_JUSTIFICATION:  The typecasting is performed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1850          to update the SFR address for each PORT. The conversion to (uint32 *)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1851          will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1852          effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1853          /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1854          to update the SFR address for each PORT. The register name is having
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1855          a volatile qualifier and by typecasting, the input argument for
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1856          the API discards volatile keyword. No side effects foreseen by
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1857          violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1858          PORT_LIB_INIT_WRITESAFETYENDINITPROTREG((uint32*)PCSRRegPtr, *PCSRDataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1859          PCSRDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1860        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1861        /* [cover parentID={70D88098-B0C1-4866-B940-8B460232350A}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1862           Check if Port supports PDISC
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1863        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1864        if(Port_lIsPortPDISCAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1865        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1866          /* MISRA2012_RULE_11_5_JUSTIFICATION: Performed to calculate SFR address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1867          for each port. The conversion to the required type (volatile uint32*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1868          is done as direct assignment to PDISCRegPtr, pointer of type
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1869          volatile uint32 is not possible. The conversion will produce a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1870          that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1871          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1872          /* MISRA2012_RULE_11_3_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1873          (volatile void*) is done as it can hold the address of any type, here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1874          a structure pointer and then typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1875          (volatile uint32*) as direct assignment to PDISCRegPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1876          type volatile uint32 is not possible. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1877          pointer that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1878          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1879          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1880            SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1881          PDISCRegPtr = ((volatile uint32*)(volatile void*)PortAddressPtr +
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1882           /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1883            SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1884                         PORT_PDISC_REG_OFFSET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1885           /* PDISC */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1886          /* MISRA2012_RULE_11_3_JUSTIFICATION: The typecasting is performed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1887          to update the SFR address for each PORT. The conversion to (uint32 *)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1888          will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1889          effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1890          /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1891          to update the SFR address for each PORT. The register name is having
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1892          a volatile qualifier and by typecasting, the input argument for
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1893          the API discards volatile keyword. No side effects foreseen by
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1894          violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1895          PORT_LIB_INIT_WRITEPERIPENDINITPROTREG((uint32 *)PDISCRegPtr, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1896                                                 *PDISCDataPtr );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1897          PDISCDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1898        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1899        ConfigIndex++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1900      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1901    } /* For loop */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1902    /*Fix for errata PORTS_TC.H012 - */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1903    #if(PORT14_PDISC_MASK == PORT_14_DISC_DISABLE)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1904    PORT_LIB_INIT_WRITEPERIPENDINITPROTREG(&P14_PDISC,0);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1905    P14_IOCR8.B.PC11 = PORT_IOCR_PULLUP_ENABLE;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1906    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1907  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1908  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1909  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1910  **Traceability:[cover parentID={A92C5FF9-6CDF-4cdf-B195-F9A319686BC4}]        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1911  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1912  ** Syntax :LOCAL_INLINE void Port_lPDRInit(void)                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1913  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1914  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1915  **   - initializes Port PDR registers                                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1916  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1917  **[/cover]                                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1918  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1919  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1920  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1921  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1922  ** Reentrancy:  Non Reentrant                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1923  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1924  ** Parameters (in) :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1925  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1926  **Parameters (out):  None                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1927  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1928  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1929  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1930  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1931  LOCAL_INLINE void Port_lPDRInit(void)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1932  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1933    /* Each Port Number for the hardware unit  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1934    uint32                  PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1935    /* Index to identify the port configuration information
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1936    from the configuration array  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1937    uint32                  ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1938    Ifx_P            *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1939  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1940    /* [cover parentID={AB50D951-A1C0-448b-99DE-EA5D2A0179F9}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1941    Loop To Configure Port Registers
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1942    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1943    ConfigIndex = 0U;
	mov	d8,#0
.L437:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1944    /* Port driver strength is configured in Port PDR0 register */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1945    /* [cover parentID={905FD984-26E8-4fb2-B472-B5CBCB3293BC}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1946    Take action depending on whether Port is Available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1947    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1948    for (PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER;
	mov	d9,d8
.L118:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1949         PortNumber++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1950      /* Parameter Port is checked for validity */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1951    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1952      /* [cover parentID={1B381BA8-061B-4edb-A49C-9359ECEE68BA}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1953      Check if Port is Available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1954      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1955      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1956      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1957        /* [cover parentID={111499FF-49CE-46aa-B9D1-44AF4FAA5AA8}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1958        Get port address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1959        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1960        PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1961        /* MISRA2012_RULE_11_3_JUSTIFICATION: The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1962        update the SFR. The conversion to (unit32*)will produce a pointer that
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1963        is correctly aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1964        this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1965        /* MISRA2012_RULE_11_8_JUSTIFICATION:The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1966        update the SFR. The register name which is having a volatile
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1967        qualifier and by typecasting, the input  argument for the API discards
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1968        volatile keyword. No side effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1969        /* [cover parentID={2D7A1D09-E3DA-407b-9096-883803226046}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1970        Initialize Port PDR0 register with Driver Strength 0
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1971        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1972        PORT_LIB_INIT_WRITEPERIPENDINITPROTREG(( uint32 *) \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1973                                               &PortAddressPtr->PDR0.U, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1974                                               Port_kConfigPtr->PortConfigSetPtr \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1975                                               [ConfigIndex].DriverStrength0);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1976        /* [cover parentID={9623618E-924D-4522-99B1-89AEEA26EB02}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1977        Check For Available PDR Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1978        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1979        /* [cover parentID={D08048AB-415B-4e0d-8E84-F0DF58E5B4C2}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1980        Check if PDR1 is Available for Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1981        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1982        if(Port_lIsPortPdr1Available(PortNumber) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1983        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1984          /* MISRA2012_RULE_11_3_JUSTIFICATION: The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1985          update the SFR. The conversion to (unit32*)will produce a pointer that
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1986          is correctly aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1987          this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1988          /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1989          update the SFR. This is a register name which is having a volatile
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1990          qualifier and by typecasting, the input  argument for the API
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1991          discards volatile keyword. No side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1992          this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1993          /* [cover parentID={39547610-8FF7-4f5d-8C8B-711E03CE320F}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1994          Initialize Port PDR1 register with Driver Strength 1
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1995          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1996          PORT_LIB_INIT_WRITEPERIPENDINITPROTREG \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1997          ((uint32*) &PortAddressPtr->PDR1.U, Port_kConfigPtr->PortConfigSetPtr \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1998           [ConfigIndex].DriverStrength1);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1999        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2000        ConfigIndex++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2001      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2002    }/* For loop */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2003  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2004  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2005  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2006  ** Traceability:[cover parentID={0B83EE98-A388-4e28-9F9B-6A45DC32B34A}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2007  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2008  ** Syntax :LOCAL_INLINE Ifx_P * Port_lAdr                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2009  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2010  **                      const uint32 PortNumber                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2011  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2012  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2013  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2014  **   - returns the address of P<x> Module                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2015  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2016  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2017  **        [/cover]                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2018  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2019  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2020  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2021  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2022  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2023  ** Parameters (in) :   PortNumber - Port number whose address                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2024  **                                  needs to be calculated                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2025  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2026  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2027  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2028  ** Return value    :  RetVal - P<x> Module address                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2029  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2030  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2031  LOCAL_INLINE Ifx_P * Port_lAdr(const uint32 PortNumber)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2032  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2033    Ifx_P *RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2034    /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2035    calculate address for a Port Number */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2036    RetVal = ( (&MODULE_P00 + PortNumber));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2037    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2038  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2039  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2040  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2041  ** Traceability:[cover parentID={0A078207-5D65-4e69-9023-260AAC1DD0BC}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2042  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2043  ** Syntax :LOCAL_INLINE uint32 Port_lIsPortAvailable31                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2044  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2045  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2046  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2047  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2048  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2049  **   - checks if the port is available or not for the microcontroller.        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2050  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2051  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2052  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2053  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2054  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2055  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2056  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2057  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2058  ** Parameters (in) :   Port - Port number to be checked                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2059  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2060  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2061  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2062  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2063  **                    available or not                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2064  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2065  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2066  LOCAL_INLINE uint32 Port_lIsPortAvailable31(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2067  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2068    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2069  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2070    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2071               ((uint32)PORTS_AVAILABLE_00_31)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2072             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2073    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2074  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2075  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2076  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2077  **Traceability:[cover parentID={FE637E21-FB88-42cd-8B1C-E4CC5029107C}]        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2078  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2079  ** Syntax :LOCAL_INLINE uint32 Port_lIsPortAvailable63                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2080  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2081  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2082  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2083  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2084  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2085  **   - checks if the port is available or not for the microcontroller.        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2086  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2087  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2088  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2089  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2090  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2091  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2092  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2093  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2094  ** Parameters (in) :   Port - Port number to be checked                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2095  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2096  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2097  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2098  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2099  **                    available or not                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2100  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2101  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2102  LOCAL_INLINE uint32 Port_lIsPortAvailable63(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2103  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2104    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2105  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2106    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - (uint32)PORT_NUMBER_32)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2107               ((uint32)PORTS_AVAILABLE_32_63)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2108             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2109    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2110  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2111  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2112  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2113  ** Traceability:[cover parentID={8B766961-0E0E-4b38-8FDC-3A2254FC2341}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2114  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2115  ** Syntax :LOCAL_INLINE uint32 Port_lIsPortAvailable                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2116  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2117  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2118  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2119  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2120  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2121  **   - checks if the port is available or not for the microcontroller.        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2122  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2123  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2124  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2125  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2126  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2127  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2128  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2129  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2130  ** Parameters (in) :   Port - Port number to be checked                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2131  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2132  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2133  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2134  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2135  **                    available or not                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2136  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2137  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2138  LOCAL_INLINE uint32 Port_lIsPortAvailable(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2139  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2140    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2141    /* [cover parentID={5C445631-C50C-4baa-A4DC-364030A53954}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2142    Port 31 Available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2143    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2144  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2145    /* [cover parentID={7C716CF4-1068-4953-B34B-6AF97561368D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2146    Port 63 Available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2147    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2148  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2149    /* [cover parentID={CF494E3C-EA55-4bac-90AF-7CAAF933E8BC}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2150    Is Port Greater than port number 31
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2151    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :
	mov	d10,#31
.L127:
	mov	d11,#1
.L128:
	mov	d12,d11
.L495:
	mov.u	d13,#64519
	addih	d13,d13,#240
.L119:
	mov.aa	a12,a15
.L143:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2153              (Port_lIsPortAvailable31(Port))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2154             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2155    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2156  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2157  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2158   /* [cover parentID={6D2A45CD-CDCE-415e-B79E-2ADEEBEFF76B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2159  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2160   #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2161  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2162  **   Traceability:[cover parentID={97F5070D-A3CE-46e8-98ED-CF9BD7490A4E}]     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2163  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2164  ** Syntax :LOCAL_INLINE uint32 Port_lIsPortReadOnly31                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2165  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2166  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2167  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2168  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2169  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2170  **   - checks if the port is read only or it is writable.                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2171  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2172  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2173  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2174  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2175  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2176  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2177  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2178  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2179  ** Parameters (in) :   Port - Port number to be checked                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2180  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2181  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2182  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2183  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2184  **                    is read only or not                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2185  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2186  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2187  LOCAL_INLINE uint32 Port_lIsPortReadOnly31(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2188  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2189    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2190  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2191    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2192               ((uint32)PORTS_READONLY_00_31)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2193             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2194    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2195  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2196  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2197  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2198  ** Traceability:[cover parentID={A6F94C19-6797-4f07-8A0C-2AC622B7EB7D}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2199  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2200  ** Syntax :LOCAL_INLINE uint32 Port_lIsPortReadOnly63                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2201  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2202  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2203  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2204  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2205  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2206  **   - checks if the port is read only or it is writable.                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2207  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2208  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2209  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2210  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2211  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2212  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2213  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2214  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2215  ** Parameters (in) :   Port - Port number to be checked                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2216  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2217  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2218  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2219  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2220  **                    is read only or not                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2221  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2222  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2223  LOCAL_INLINE uint32 Port_lIsPortReadOnly63(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2224  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2225    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2226  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2227    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - (uint32)PORT_NUMBER_32)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2228               ((uint32)PORTS_READONLY_32_63)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2229             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2230    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2231  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2232  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2233  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2234  **Traceability:[cover parentID={8E7DA982-ED44-4759-AFB3-1BF0FDA3C155}]        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2235  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2236  ** Syntax :LOCAL_INLINE uint32 Port_lIsPortReadOnly                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2237  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2238  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2239  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2240  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2241  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2242  **   - checks if the port is read only or it is writable.                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2243  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2244  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2245  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2246  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2247  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2248  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2249  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2250  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2251  ** Parameters (in) :   Port - Port number to be checked                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2252  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2253  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2254  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2255  ** Return value     : RetVal - Value which denotes whether the port is        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2256  **                    is read only or not                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2257  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2258  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2259  LOCAL_INLINE uint32 Port_lIsPortReadOnly(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2260  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2261    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2262    /* [cover parentID={83301BDA-9DEC-419f-B02D-B4578B2DBD91}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2263    Port 31 Readonly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2264    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2265  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2266    /* [cover parentID={C2A6F94C-D372-4956-BC90-528E09D2DE13}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2267    Port 63 ReadOnly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2268    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2269  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2270    /* [cover parentID={632CAF6E-1BB3-4cc6-9666-2F44B555340E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2271    Is port less than or equal to Port Number 31?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2272    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2273    RetVal = ((Port <= (uint32)PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2274              (Port_lIsPortReadOnly63(Port))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2275             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2276    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2277  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2278  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2279  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2280  ** Traceability:[cover parentID={CF03FF0C-F8DB-4fb2-A89C-62C67C9EE3EB}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2281  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2282  ** Syntax           : LOCAL_INLINE uint16 Port_lIsPinAvailable                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2283  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2284  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2285  **                      const uint32 Pin                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2286  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2287  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2288  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2289  **   - checks if the pin is available for port.                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2290  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2291  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2292  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2293  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2294  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2295  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2296  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2297  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2298  ** Parameters (in)  :  Port, Pin - Port and Pin to be checked                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2299  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2300  ** Parameters (out):  None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2301  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2302  ** Return value     : RetVal -Value which denotes whether the Pin is          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2303  **                     available for the Port or not.                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2304  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2305  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2306  LOCAL_INLINE uint16 Port_lIsPinAvailable(const uint32 Port, const uint32 Pin)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2307  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2308    uint16 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2309    RetVal = (uint16)(((uint32)PORT_CONSTANT_0x01 << (Pin)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2310                      (uint32)(Port_kAvailablePins[(Port)])
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2311                     );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2312    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2313  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2314  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2315  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2316  ** Traceability:[cover parentID={0BD5F473-AFE4-42e3-9CFB-52D21720021A}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2317  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2318  ** Syntax           : LOCAL_INLINE uint16 Port_lIsPortPdr1Available           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2319  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2320  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2321  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2322  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2323  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2324  **   - checks availablity of PDR1 register for the port  by checking          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2325  **     if any of the portpin 8 - 15 is available or not for the Port.         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2326  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2327  **[/cover]                                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2328  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2329  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2330  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2331  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2332  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2333  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2334  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2335  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2336  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2337  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2338  ** Return value     : RetVal - Value which denotes whether PDR1 register      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2339  **                    present for the port or not                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2340  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2341  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2342  LOCAL_INLINE uint16 Port_lIsPortPdr1Available(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2343  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2344    uint16 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2345  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2346    RetVal = (uint16)(((uint32)(PORT_PDR1_MASK)) &
	mov.u	d14,#65280
.L144:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1948    for (PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER;      (inlined)
	j	.L2

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1949         PortNumber++)      (inlined)
.L3:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	jge.u	d10,d9,.L4
.L133:
	add	d0,d9,#-32
.L496:
	sh	d15,d11,d0
.L497:
	and	d15,d15,#263
.L134:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	j	.L5
.L4:
	sh	d15,d12,d9
.L439:
	and	d15,d13

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
.L5:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1955      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)      (inlined)
	jeq	d15,#0,.L6
.L124:
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf003a000)
.L498:
	sh	d15,d9,#8
.L440:
	addsc.a	a13,a15,d15,#0
.L441:
	lea	a4,[a13]64
.L154:
	mul	d15,d8,#56
	ld.a	a15,[a12]@los(Port_kConfigPtr)
	ld.a	a15,[a15]
	addsc.a	a15,a15,d15,#0
	ld.w	d4,[a15]20
	call	Mcal_WritePeripEndInitProtReg
.L149:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2347                      (uint32)(Port_kAvailablePins[(Port)]));
	movh.a	a15,#@his(Port_kAvailablePins)
	lea	a15,[a15]@los(Port_kAvailablePins)
.L499:
	addsc.a	a15,a15,d9,#1
	ld.hu	d15,[a15]0
.L442:
	and	d15,d14
.L500:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1982        if(Port_lIsPortPdr1Available(PortNumber) != (uint16)0U)      (inlined)
	jeq	d15,#0,.L7
.L150:
	lea	a4,[a13]68
.L159:
	mul	d15,d8,#56
.L443:
	movh.a	a15,#@his(Port_kConfigPtr)
	ld.a	a15,[a15]@los(Port_kConfigPtr)
	ld.a	a15,[a15]
	addsc.a	a15,a15,d15,#0
	ld.w	d4,[a15]24
	call	Mcal_WritePeripEndInitProtReg

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1982        if(Port_lIsPortPdr1Available(PortNumber) != (uint16)0U)      (inlined)
.L7:
	add	d8,#1

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1955      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)      (inlined)
.L6:
	add	d9,#1

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1948    for (PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER;      (inlined)
.L2:
	mov	d15,#40
.L501:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1948    for (PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER;      (inlined)
	jge.u	d15,d9,.L3
.L112:
	mov	d8,#0
.L438:
	movh.a	a15,#@his(Port_kConfigPtr)
	ld.a	a15,[a15]@los(Port_kConfigPtr)
.L502:
	ld.a	a12,[a15]8
.L444:
	ld.a	a2,[a15]12
.L445:
	st.a	[a10],a2
.L446:
	ld.a	a13,[a15]4
.L447:
	mov	d9,d8
.L161:
	mov	d10,#1
.L503:
	mov.u	d11,#64519
	addih	d11,d11,#240
.L162:
	mov	d12,#31
.L178:
	mov	d13,d10
.L169:
	mov	d14,#240
.L504:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1651    for(PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER; PortNumber++)      (inlined)
	j	.L8
.L9:
	mov	d15,#31
.L505:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	jge.u	d15,d9,.L10
.L184:
	add	d0,d9,#-32
.L506:
	mov	d15,#1
.L507:
	sh	d15,d15,d0
.L508:
	and	d15,d15,#263
.L185:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	j	.L11
.L10:
	sh	d15,d10,d9
.L448:
	and	d15,d11

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
.L11:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1659      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)      (inlined)
	jeq	d15,#0,.L12
.L164:
	mul	d15,d8,#56
.L449:
	movh.a	a15,#@his(Port_kConfigPtr)
	ld.a	a15,[a15]@los(Port_kConfigPtr)
.L509:
	ld.a	a15,[a15]
.L510:
	addsc.a	a14,a15,d15,#0
.L187:
	movh.a	a2,#61444
	lea	a2,[a2]@los(0xf003a000)
.L511:
	sh	d15,d9,#8
.L512:
	addsc.a	a15,a2,d15,#0
.L174:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2273    RetVal = ((Port <= (uint32)PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :      (inlined)
	jlt.u	d12,d9,.L13
.L205:
	mov	d15,#0
.L206:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2273    RetVal = ((Port <= (uint32)PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :      (inlined)
	j	.L14
.L13:
	add	d15,d9,#-32
.L513:
	sh	d15,d13,d15
.L514:
	and	d15,d15,#256

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2273    RetVal = ((Port <= (uint32)PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :      (inlined)
.L14:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1699        if(Port_lIsPortReadOnly(PortNumber) == (uint32)0U)      (inlined)
	jne	d15,#0,.L15
.L175:
	ld.w	d15,[a14]16
.L189:
	st.w	[a15],d15

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1699        if(Port_lIsPortReadOnly(PortNumber) == (uint32)0U)      (inlined)
.L15:
	ld.w	d4,[a14]52
.L190:
	lea	a4,[a15]80
.L191:
	call	Mcal_WritePeripEndInitProtReg
.L450:
	ld.w	d15,[a14+]
.L192:
	st.w	[a15]16,d15
.L193:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2348    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2349  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2350  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2351  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2352  ** Traceability:[cover parentID={0B7099A1-EEB1-480b-B792-626627CCD86C}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2353  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2354  ** Syntax           : LOCAL_INLINE uint16 Port_lIsPortIocrAvailable           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2355  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2356  **                      const uint32 Port,                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2357  **                      const uint16 Pin                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2358  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2359  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2360  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2361  **   - checks if IOCR_x register for the port is available or not             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2362  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2363  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2364  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2365  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2366  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2367  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2368  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2369  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2370  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2371  ** Parameters (in)  :  Port, Pin - Port and Pin to be checked                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2372  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2373  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2374  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2375  ** Return value     : RetValue -Value which denotes whether Iocr_x register   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2376  **                    is available or not for the Port                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2377  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2378  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2379  LOCAL_INLINE uint16 Port_lIsPortIocrAvailable(const uint32 Port, const uint16 Pin)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2380  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2381    uint16 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2382  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2383    RetVal = (uint16)( ((uint32)(Pin)) & (uint32)(Port_kAvailablePins[(Port)]) );
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L515:
	addsc.a	a2,a2,d9,#1
	ld.hu	d15,[a2]0
.L451:
	and	d15,d14
.L516:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1736        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_4_7) != (uint16)0U)      (inlined)
	jeq	d15,#0,.L16
.L212:
	ld.w	d15,[a14]
.L194:
	st.w	[a15]20,d15

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1736        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_4_7) != (uint16)0U)      (inlined)
.L16:
	add.a	a14,#4
.L517:
	mov	d15,#3840
.L219:
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L518:
	addsc.a	a2,a2,d9,#1
	ld.hu	d0,[a2]0
.L452:
	and	d15,d0
.L519:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1747        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_8_11) != (uint16)0U)      (inlined)
	jeq	d15,#0,.L17
.L220:
	ld.w	d15,[a14]
.L195:
	st.w	[a15]24,d15

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1747        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_8_11) != (uint16)0U)      (inlined)
.L17:
	add.a	a14,#4
.L520:
	mov.u	d15,#61440
.L222:
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L521:
	addsc.a	a2,a2,d9,#1
	ld.hu	d0,[a2]0
.L453:
	and	d15,d0
.L522:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1758        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_12_15) != (uint16)0U)      (inlined)
	jeq	d15,#0,.L18
.L223:
	ld.w	d15,[a14]
.L196:
	st.w	[a15]28,d15

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1758        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_12_15) != (uint16)0U)      (inlined)
.L18:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2384    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2385  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2386  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2387  /* [cover parentID={DC88B28F-B066-4dc4-AE1E-F818AF563C72}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2388  DET is ON or Safety is ON
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2389  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2390  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2391  #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2392  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2393  ** Traceability:[cover parentID={A95470B9-DCFF-4970-AC65-3969CADCD849}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2394  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2395  ** Syntax           : LOCAL_INLINE uint32 Port_lModeErrChk                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2396  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2397  **                      const uint8 Dir,                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2398  **                      const Port_PinModeType Mode,                          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2399  **                      const uint32 ConfigIndex,                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2400  **                      const uint32 PinNumber                                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2401  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2402  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2403  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2404  **   - Checks for the validity of mode.                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2405  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON and  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2406  **     PORT_DEV_ERROR_DETECT is set ON                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2407  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2408  **[/cover]                                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2409  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2410  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2411  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2412  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2413  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2414  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2415  ** Parameters (in)  :   Dir - Current direction of a pin                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2416  **                      PinMode -mode to be set                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2417  **                      ConfigIndex - Array Index                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2418  **                      PinNumber - port pin number                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2419  **                      PinCharacteristic-Pin characteristic value passed     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2420  **                      by the user                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2421  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2422  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2423  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2424  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2425  ** Return value     : E_NOT_OK- No error in the pin mode                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2426  **                    ErrStatus -Error in the pin mode                        **     **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2427  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2428  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2429  LOCAL_INLINE uint32 Port_lModeErrChk
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2430  (
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2431    const uint8 Dir, const uint8 PinMode, const uint8 PinCharacteristic,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2432    const uint32 ConfigIndex,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2433    const uint32 PinNumber
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2434  )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2435  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2436    uint32 ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2437     #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2438     /* [cover parentID={8D90C76F-3D76-469d-9D9E-4DA2875CB942}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2439     [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2440     if((PinCharacteristic > PIN_CHARACTERISTIC_RANGE)  || (PinMode > PIN_MODE_RANGE))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2441      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2442       Port_lReportError(PORT_SID_SETPINMODE, PORT_E_PARAM_INVALID_MODE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2443       ErrStatus=E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2444      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2445      /* [cover parentID={CC8591DC-78F2-4555-B11B-14376A094192}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2446      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2447      if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2448     #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2449      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2450        /* [cover parentID={EF62A9D7-186E-462b-9779-FAED0609497F}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2451         [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2452        if(Dir == (uint8)PORT_PIN_OUT)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2453         {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2454            #if(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2455             /* [cover parentID={0F90B3AC-7795-4c38-85CA-F44B1A664B4B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2456            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2457            if((PinCharacteristic < PIN_MODE_OUT_RANGE)&&(PinCharacteristic != (uint8)0U))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2458             {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2459              Mcal_ReportSafetyError(PORT_MODULE_ID, PORT_INSTANCE_ID,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2460              PORT_SID_SETPINMODE, PORT_E_IMPLAUSIBLE_MODE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2461              ErrStatus=E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2462             }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2463             #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2464             if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2465             #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2466            #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2467            {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2468            #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2469              uint32 Mode_supported;  /* mode is supported or not */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2470              Mode_supported = ((uint32)PORT_CONSTANT_0x01) << PinMode;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2471              /* [cover parentID={4256F8B1-8DEF-447c-AF81-918E0D822FF3}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2472               [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2473              if(((uint32)(Port_kConfigPtr-> \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2474              PortPinHwSupportedModes[ConfigIndex].U[PinNumber]) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2475              Mode_supported ) == (uint32)0U
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2476                )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2477              {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2478               Port_lReportError(PORT_SID_SETPINMODE, PORT_E_PARAM_INVALID_MODE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2479               ErrStatus = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2480  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2481              }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2482            #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2483            UNUSED_PARAMETER(ConfigIndex);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2484            UNUSED_PARAMETER(PinNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2485            }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2486         }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2487         #if(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2488         else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2489         {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2490           /*[cover parentID={FEF26A84-8FE8-47b0-BAAA-15E697D809B5}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2491            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2492           /* [cover parentID={5B151392-8D9B-4e0e-9CBD-B76D52362C5D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2493            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2494           /* [cover parentID={2E637D8C-1A28-485e-8659-AFB9729EF54B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2495            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2496          if(((PinCharacteristic > IOCR_ALT_MODE_POS)||
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2497                (PinCharacteristic == (uint8)0U)) || (PinMode !=  (uint8)0U))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2498           {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2499           Mcal_ReportSafetyError(PORT_MODULE_ID, PORT_INSTANCE_ID,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2500           PORT_SID_SETPINMODE, PORT_E_IMPLAUSIBLE_MODE);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2501           ErrStatus=E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2502           }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2503         }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2504         #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2505      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2506    return(ErrStatus);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2507  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2508  #endif /*(PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2509  #endif /*(PORT_SET_PIN_MODE_API == STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2510  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2511  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2512  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2513  ** Traceability:[cover parentID={86FD513D-1831-4789-9F4E-8674FBEA1B6A}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2514  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2515  ** Syntax           : LOCAL_INLINE uint32 Port_lNumber                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2516  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2517  **                      const Port_PinType pin                                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2518  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2519  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2520  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2521  **   - extract the port number from pin symbolic ID                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2522  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2523  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2524  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2525  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2526  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2527  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2528  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2529  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2530  ** Parameters (in)  :  Pin - Pin symbolic Id                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2531  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2532  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2533  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2534  ** Return value     : RetValue -Value which denotes port number extracted     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2535  **                    from pin symbolic ID                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2536  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2537  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2538  LOCAL_INLINE uint32 Port_lNumber(const Port_PinType Pin)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2539  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2540    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2541    RetVal = (((uint32)(Pin) >> (uint32)PORT_NUMBER_OFFSET) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2542              (uint32)PORT_NUM_LOW8_MASK);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2543    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2544  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2545  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2546  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2547  ** Traceability:[cover parentID={1FC3CF0D-87EC-4fd6-B9DD-ACEFF233E71C}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2548  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2549  ** Syntax           : LOCAL_INLINE uint32 Port_lPinNumber                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2550  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2551  **                      const Port_PinType pin                                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2552  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2553  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2554  ** Description :  This INLINE function:                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2555  **   - extract the pin number from pin symbolic ID                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2556  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2557  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2558  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2559  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2560  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2561  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2562  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2563  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2564  ** Parameters (in)  :  Pin - Pin symbolic Id                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2565  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2566  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2567  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2568  ** Return value     : RetValue -Value which denotes pin number extracted      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2569  **                    from pin symbolic ID                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2570  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2571  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2572  LOCAL_INLINE uint32 Port_lPinNumber(const Port_PinType Pin)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2573  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2574    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2575    RetVal = ((uint32)(Pin) & (uint32)PORT_PIN_LOW4_MASK);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2576    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2577  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2578  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2579  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2580  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2581  #if (PORT_DEV_ERROR_DETECT == STD_ON)||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2582  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2583  **    Traceability:[cover parentID={C5C10F3A-C0D2-4276-8355-A5B51DD6020E}]    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2584  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2585  ** Syntax           : LOCAL_INLINE uint8 Port_lChkPin                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2586  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2587  **                      const Port_PinType Pin,                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2588  **                      const uint32 PortNo,                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2589  **                      const uint32 PinNo                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2590  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2591  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2592  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2593  **   - Checks for the error in Pin parameter.                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2594  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2595  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2596  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2597  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2598  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2599  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2600  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2601  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2602  ** Parameters (in)  :  Pin -  Pin Symbolic id                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2603  **                     PinNo - portpin number                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2604  **                     PortNo - port number                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2605  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2606  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2607  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2608  ** Return value     : 0 - Portpin is valid                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2609  **                    1 - Portpin is invalid                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2610  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2611  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2612  LOCAL_INLINE uint8 Port_lChkPin(const Port_PinType Pin, const uint32 PortNo,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2613                                  const uint32 PinNo)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2614  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2615    uint8 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2616    #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2617    uint32 PortReadOnly;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2618    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2619    uint32 PinAvailable;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2620    uint32 PortAvailable;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2621    RetVal = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2622    /* [cover parentID={38E2CA34-E6F4-46b6-8763-A05BD1DF95D7}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2623    Is pin within the range ?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2624    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2625  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2626    if((uint32)Pin < (uint32)PORT_MAX_PIN_ID)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2627    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2628      /* [cover parentID={1E678276-85F8-47f1-808F-F6C09EAAAE28}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2629      Check if the Port is Available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2630      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2631      PortAvailable = Port_lIsPortAvailable(PortNo);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2632      /* [cover parentID={2C8297DF-55BD-4826-9761-3B68EA9533D0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2633      Check if the Port is Read Only
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2634      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2635      /* [cover parentID={605CCFE7-9E17-497f-A004-77C4F2DF748E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2636      If Readonly port exist
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2637     [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2638      #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2639      PortReadOnly  = Port_lIsPortReadOnly(PortNo);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2640      #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2641      /* [cover parentID={5C34E60D-02DD-4189-9617-3A9D6DE60537}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2642      Is Port Available ?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2643      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2644      if( PortAvailable != (uint32)0U )
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2645      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2646        /* [cover parentID={2C5053DE-3EB5-4f39-BCC3-6F2294B4BFA7}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2647        Check if the Pin is Avaialble
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2648        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2649        PinAvailable  = Port_lIsPinAvailable(PortNo, PinNo);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2650      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2651      else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2652      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2653        /* If Port is not available, then Pin also Not available */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2654        PinAvailable = (uint32)0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2655      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2656      /* [cover parentID={0F80C124-78C4-4b67-834A-2AC7C8884E39}][/cover]]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2657      Is Port Read Only Or  Pin not Available ?*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2658  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2659      if (PinAvailable != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2660      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2661        /* [cover parentID={100F4A98-8CBB-4618-939B-A6D0CF949591},
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2662        {2ED7DC69-FCB2-4504-AB56-D7BC2DBDD856}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2663        If Readonly port exist
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2664        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2665       #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2666        if (PortReadOnly != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2667  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2668        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2669          RetVal = 1U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2670        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2671        #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2672      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2673      else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2674      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2675        RetVal = 1U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2676      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2677    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2678    else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2679    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2680      RetVal = 1U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2681    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2682  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2683    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2684  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2685  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2686  #endif /*(PORT_SET_PIN_DIRECTION_API==STD_ON)||(PORT_SET_PIN_MODE_API==STD_ON)*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2687  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2688   /* [cover parentID={BDAE9DA0-F247-435f-A729-BC820B14E272}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2689  [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2690  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2691  #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2692  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2693  ** Traceability:[cover parentID={288EE62C-9C6F-469b-8EE0-C86EF36E448F}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2694  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2695  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2696  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2697  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2698  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2699  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2700  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2701  **   - Checks if the port supports LVDS                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2702  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2703  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2704  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2705  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2706  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2707  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2708  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2709  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2710  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2711  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2712  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2713  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2714  ** Return value     : RetValue -Value which denotes whether Port supports LVDS**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2715  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2716  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2717  LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2718  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2719    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2720    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2721               ((uint32)PORTS_LVDS_00_31)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2722             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2723    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2724  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2725  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2726  ** Traceability:[cover parentID={8ED0FDB4-447A-484a-AEB8-F4D634F582DD}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2727  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2728  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable63         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2729  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2730  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2731  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2732  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2733  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2734  **   - Checks if the port supports LVDS                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2735  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2736  **   [/cover]                                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2737  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2738  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2739  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2740  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2741  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2742  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2743  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2744  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2745  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2746  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2747  ** Return value     : RetValue -Value which denotes whether Port supports LVDS**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2748  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2749  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2750  LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable63(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2751  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2752    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2753    RetVal = (((uint32)(PORT_CONSTANT_0x01) <<
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2754               (Port - (uint32)PORT_NUMBER_32)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2755              ((uint32)PORTS_LVDS_32_63)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2756             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2757    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2758  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2759  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2760  ** Traceability:[cover parentID={A48FA24F-D244-4c23-A8EB-D3421F5902F3}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2761  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2762  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2763  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2764  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2765  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2766  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2767  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2768  **   - Checks if the port supports LVDS                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2769  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2770  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2771  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2772  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2773  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2774  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2775  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2776  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2777  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2778  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2779  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2780  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2781  ** Return value     : RetValue -Value which denotes whether Port supports LVDS**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2782  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2783  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2784  LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2785  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2786    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2787    /* [cover parentID={AE46A589-B65C-459f-8163-A97E954810C0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2788    Check LVDS support for ports wih port number between 0 to 31
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2789    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2790    /* [cover parentID={05BAFEDA-DC67-4f5f-8213-2BBE6789DF8C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2791    Check LVDS support for ports wih port number between 32 to 63
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2792    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2793    /* [cover parentID={3E89142B-CE48-4c07-97AA-2D2C1D1D5822}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2794    Is port greater than port number 31?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2795    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2796    RetVal = ((Port > (uint32)PORT_NUMBER_31) ?
	mov	d15,#31
.L523:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2796    RetVal = ((Port > (uint32)PORT_NUMBER_31) ?      (inlined)
	jge.u	d15,d9,.L19
.L231:
	mov	d15,#0
.L232:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2797              (Port_lIsPortLVDSAvailable63(Port)) :      (inlined)
	j	.L20
.L19:
	mov	d15,#1
.L524:
	sh	d0,d15,d9
.L525:
	mov	d15,#24576
	addih	d15,d15,#96
.L454:
	and	d15,d0

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2797              (Port_lIsPortLVDSAvailable63(Port)) :      (inlined)
.L20:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1770        if(Port_lIsPortLVDSAvailable(PortNumber) != (uint32)0U)      (inlined)
	jeq	d15,#0,.L21
.L197:
	lea	a14,[a15]160
.L198:
	mov	d15,#0
.L455:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1794          for(counter = (uint32)0U; counter < (uint32)PORT_MAX_LPCR_REG ; counter++)      (inlined)
	j	.L22
.L23:
	ld.w	d4,[a12]
.L243:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2797              (Port_lIsPortLVDSAvailable63(Port)) :
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2798              (Port_lIsPortLVDSAvailable31(Port))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2799             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2800    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2801  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2802  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2803  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2804  ** Traceability:[cover parentID={DC5F6F75-60E6-4e4f-987E-C69DF95A9C8B}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2805  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2806  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2807  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2808  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2809  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2810  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2811  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2812  **   - Checks if the port supports PCSR                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2813  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2814  **   [/cover]                                                                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2815  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2816  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2817  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2818  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2819  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2820  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2821  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2822  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2823  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2824  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2825  ** Return value     : RetValue -Value which denotes whether Port supports PCSR**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2826  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2827  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2828  LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2829  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2830    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2831    RetVal = (((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2832              ((uint32)PORTS_PCSR_00_31)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2833             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2834    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2835  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2836  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2837  ** Traceability:[cover parentID={3CE7109D-0D9D-4a72-873C-76D6DC548E19}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2838  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2839  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable63         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2840  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2841  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2842  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2843  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2844  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2845  **   - Checks if the port supports PCSR                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2846  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2847  **     [/cover]                                                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2848  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2849  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2850  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2851  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2852  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2853  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2854  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2855  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2856  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2857  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2858  ** Return value     : RetValue -Value which denotes whether Port supports PCSR**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2859  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2860  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2861  LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable63(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2862  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2863    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2864    RetVal = (((uint32)(PORT_CONSTANT_0x01) <<
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2865               (Port - (uint32)PORT_NUMBER_32)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2866              ((uint32)PORTS_PCSR_32_63)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2867             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2868    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2869  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2870  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2871  **   Traceability:[cover parentID={D27DB93D-A692-4508-BB6F-D82C5B0962C2}]     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2872  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2873  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2874  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2875  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2876  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2877  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2878  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2879  **   - Checks if the port supports PCSR                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2880  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2881  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2882  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2883  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2884  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2885  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2886  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2887  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2888  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2889  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2890  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2891  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2892  ** Return value     : RetValue -Value which denotes whether Port supports PCSR**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2893  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2894  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2895  LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2896  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2897    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2898    /* [cover parentID={E1EF6255-238F-40a3-A886-2290D5FBF7BE}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2899    Check PCSR support for ports wih port number between 0 to 31
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2900    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2901  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2902    /* [cover parentID={AB03B297-A776-40a3-9EB9-853A56324F5A}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2903    Check PCSR support for ports wih port number between 32 to 63
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2904    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2905  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2906    /* [cover parentID={E3104988-DBA1-4ece-8AAD-044BF3F63A33}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2907    Is port greater than port number 31?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2908    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2909    RetVal = ((Port > (uint32)PORT_NUMBER_31) ?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2910              (Port_lIsPortPCSRAvailable63(Port)) :
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2911              (Port_lIsPortPCSRAvailable31(Port))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2912             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2913    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2914  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2915   #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2916  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2917  ** Traceability:[cover parentID={D5D1B03B-1B5C-46a4-9544-21F6A8FE645F}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2918  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2919  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2920  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2921  **                     const uint32 PortLPCRvalue                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2922  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2923  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2924  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2925  **   - Checks if the portpinpair for lvds is available                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2926  **     for the microcontroller.                                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2927  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2928  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2929  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2930  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2931  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2932  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2933  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2934  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2935  ** Parameters (in)  : PortLPCRvalue - Port LPCR Reg value to be checked       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2936  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2937  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2938  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2939  ** Return value     : RetVal - Value which denotes the LVDS configuration     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2940  **                    for the PortPinPair.                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2941  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2942  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2943  LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable(const uint32 PortLPCRvalue)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2944  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2945    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2946    RetVal = ( (PortLPCRvalue >> PIN_AVAILABLE) & (uint32)PORT_LPCR_AVAILABLE );
	sh	d0,d4,#-16
.L456:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1799            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == (uint32)0U)      (inlined)
	jne	d0,#0,.L24
.L244:
	mov.aa	a4,a14
.L457:
	call	Mcal_WritePeripEndInitProtReg

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1799            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == (uint32)0U)      (inlined)
.L24:
	add.a	a14,#4
.L526:
	add.a	a12,#4
.L527:
	add	d15,#1

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1794          for(counter = (uint32)0U; counter < (uint32)PORT_MAX_LPCR_REG ; counter++)      (inlined)
.L22:
	jlt.u	d15,#7,.L23

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1770        if(Port_lIsPortLVDSAvailable(PortNumber) != (uint32)0U)      (inlined)
.L21:
	mov	d15,#31
.L528:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2909    RetVal = ((Port > (uint32)PORT_NUMBER_31) ?      (inlined)
	jge.u	d15,d9,.L25
.L255:
	mov	d15,#1
.L529:
	add	d0,d9,#-32
.L530:
	sh	d15,d15,d0
.L531:
	and	d15,d15,#262
.L256:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2910              (Port_lIsPortPCSRAvailable63(Port)) :      (inlined)
	j	.L26
.L25:
	mov	d15,#1
.L532:
	sh	d0,d15,d9
.L533:
	mov	d15,#2049
.L458:
	and	d15,d0

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2910              (Port_lIsPortPCSRAvailable63(Port)) :      (inlined)
.L26:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1827        if(Port_lIsPortPCSRAvailable(PortNumber) != (uint32)0U)      (inlined)
	jeq	d15,#0,.L27
.L199:
	lea	a4,[a15]100
.L200:
	ld.a	a2,[a10]
.L460:
	ld.w	d4,[a2+]
	st.a	[a10],a2
	call	Mcal_WriteSafetyEndInitProtReg

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1827        if(Port_lIsPortPCSRAvailable(PortNumber) != (uint32)0U)      (inlined)
.L27:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2947    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2948  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2949  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2950  #if (PORT_DEV_ERROR_DETECT == STD_ON)|| (PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2951  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2952  ** Traceability:[cover parentID={03E8AAF6-6073-409b-A7EB-B6114FABD716}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2953  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2954  ** Syntax : static void Port_lReportError( const uint8 ApiId,                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2955  **                                          const uint8 ErrorId)              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2956  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2957  ** Service ID:       None                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2958  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2959  ** Sync/Async:       Synchronous                                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2960  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2961  ** Reentrancy:       Reentrant                                                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2962  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2963  ** Parameters (in):  ApiId - Service ID of the API reporting an error         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2964  **                   ErrorId - ID of the error reported                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2965  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2966  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2967  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2968  ** Return value:     None                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2969  ** Description :    Function to report Safety Error and DET                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2970  *                                                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2971  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2972  static void Port_lReportError(const uint8 ApiId, const uint8 ErrorId)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2973  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2974    /* [cover parentID={054709CF-D078-4a72-8C21-098111AD14C5}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2975    Is DEt Enabled
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2976    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2977    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2978    /* [cover parentID={4DB52DC1-D227-424b-AC57-D58D53065A99}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2979    Report Error
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2980    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2981    (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2982                    ApiId, ErrorId);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2983    /* End of report to DET */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2984    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2985    /* [cover parentID={363CAEEB-D6E7-446b-8CB0-B2A4A195EFDA}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2986    Is Safety Enable
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2987    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2988    #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2989    Mcal_ReportSafetyError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2990                           ApiId, ErrorId);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2991    /* End of report to Safety */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2992    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2993  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2994  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2995  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2996  ** Traceability:[cover parentID={4179B854-9E14-48f2-ADF8-97BB7A5B0E15}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2997  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2998  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2999  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3000  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3001  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3002  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3003  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3004  **   - Checks if the port supports PDISC                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3005  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3006  **[/cover]                                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3007  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3008  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3009  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3010  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3011  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3012  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3013  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3014  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3015  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3016  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3017  ** Return value     :RetValue -Value which denotes whether Port supports PDISC**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3018  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3019  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3020  LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3021  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3022    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3023    /* [cover parentID={A95D65A7-37C1-4713-908E-B66F29DF5F82}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3024    Check PDISC support for ports wih port number between 0 to 31
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3025    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3026  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3027    /* [cover parentID={FEBCBC52-A4C1-47f7-A29E-2D3C4F0F1808}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3028    Check PDISC support for ports wih port number between 32 to 63
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3029    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3030  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3031    /* [cover parentID={45687500-EEA8-4eb3-A360-0460F0D2E11E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3032    Is port greater than or equal to port number 31?
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3033    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3034    RetVal = ((Port > (uint32)PORT_NUMBER_31) ?
	mov	d15,#31
.L459:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3034    RetVal = ((Port > (uint32)PORT_NUMBER_31) ?      (inlined)
	jge.u	d15,d9,.L28
.L272:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3035              (Port_lIsPortPDISCAvailable63(Port)) :
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3036              (Port_lIsPortPDISCAvailable31(Port))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3037             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3038    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3039  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3040  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3041  **  Traceability:[cover parentID={D469D7BE-7B4F-4b88-B6E8-2CE50CBAA8B6}]      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3042  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3043  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable31        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3044  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3045  **                     const uint32 Port                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3046  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3047  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3048  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3049  **   - Checks if the port supports PDISC                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3050  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3051  **[/cover]                                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3052  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3053  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3054  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3055  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3056  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3057  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3058  ** Parameters (in) : Port - Port to be checked                                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3059  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3060  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3061  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3062  ** Return value    : RetValue -Value which denotes whether Port supports PDISC**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3063  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3064  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3065  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3066  LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable31(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3067  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3068    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3069    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3070               ((uint32)PORTS_PDISC_00_31)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3071             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3072    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3073  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3074  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3075  ** Traceability:[cover parentID={BDECAA57-C4F4-4eb0-95D9-DC409120457D}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3076  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3077  ** Syntax           : LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable63        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3078  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3079  **                      const uint32 Port                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3080  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3081  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3082  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3083  **   - Checks if the port supports PDISC                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3084  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3085  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3086  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3087  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3088  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3089  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3090  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3091  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3092  ** Parameters (in)  :  Port - Port to be checked                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3093  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3094  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3095  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3096  ** Return value     :RetValue -Value which denotes whether Port supports PDISC**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3097  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3098  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3099  LOCAL_INLINE uint32 Port_lIsPortPDISCAvailable63(const uint32 Port)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3100  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3101    uint32 RetVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3102    RetVal = (((uint32)(PORT_CONSTANT_0x01) <<
	mov	d15,#1
.L534:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3103               (Port - (uint32)PORT_NUMBER_32)) &
	add	d0,d9,#-32
.L535:
	sh	d15,d15,d0
.L536:
	and	d15,d15,#262
.L273:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3035              (Port_lIsPortPDISCAvailable63(Port)) :      (inlined)
	j	.L29
.L28:
	mov	d15,#1
.L537:
	sh	d15,d15,d9
.L461:
	and	d15,#7

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3035              (Port_lIsPortPDISCAvailable63(Port)) :      (inlined)
.L29:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1864        if(Port_lIsPortPDISCAvailable(PortNumber) != (uint32)0U)      (inlined)
	jeq	d15,#0,.L30
.L201:
	lea	a4,[a15]96
.L202:
	ld.w	d4,[a13+]
	call	Mcal_WritePeripEndInitProtReg

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1864        if(Port_lIsPortPDISCAvailable(PortNumber) != (uint32)0U)      (inlined)
.L30:
	add	d8,#1

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1659      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)      (inlined)
.L12:
	add	d9,#1

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1651    for(PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER; PortNumber++)      (inlined)
.L8:
	mov	d15,#40
.L538:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  1651    for(PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER; PortNumber++)      (inlined)
	jge.u	d15,d9,.L9
.L90:
	ret
.L85:
	
__Port_Init_function_end:
	.size	Port_Init,__Port_Init_function_end-Port_Init
.L65:
	; End of function
	
	.sdecl	'.text.Port_SetPinDirection.Code.Cpu0',code,cluster('Port_SetPinDirection')
	.sect	'.text.Port_SetPinDirection.Code.Cpu0'
	.align	2
	
	.global	Port_SetPinDirection
; Function Port_SetPinDirection
.L52:
Port_SetPinDirection:	.type	func
	mov	d15,d4
.L299:
	extr.u	d6,d15,#4,#8
.L300:
	and	d7,d15,#15
.L313:
	mov	d15,#32
.L305:
	jge.u	d6,d15,.L31
.L306:
	mov.u	d0,#64519
	addih	d0,d0,#240
.L307:
	rsub	d1,d6,#31
.L308:
	sh	d0,d0,d1
.L462:
	popcnt.w	d0,d0
.L463:
	add	d15,d0,#-1
.L464:
	j	.L32
.L31:
	mov.u	d0,#64519
	addih	d0,d0,#240
	popcnt.w	d0,d0
.L465:
	mov	d1,#263
.L309:
	rsub	d4,d6,#63
.L310:
	sh	d1,d1,d4
.L466:
	popcnt.w	d15,d1
.L543:
	add	d15,#-1
.L467:
	add	d15,d0
.L32:
	mul	d15,d15,#56
.L468:
	movh.a	a15,#@his(Port_kConfigPtr)
	ld.a	a15,[a15]@los(Port_kConfigPtr)
.L544:
	ld.a	a15,[a15]
.L545:
	addsc.a	a15,a15,d15,#0
.L469:
	ld.w	d15,[a15]32
.L546:
	mov	d0,#1
.L318:
	sh	d0,d0,d7
.L319:
	and	d15,d0
.L547:
	jeq	d15,#0,.L33
.L330:
	movh.a	a2,#61444
	lea	a2,[a2]@los(0xf003a000)
.L548:
	sh	d15,d6,#8
.L549:
	addsc.a	a2,a2,d15,#0
.L320:
	insert	d15,d7,#0,#0,#2
.L321:
	addsc.a	a2,a2,d15,#0
.L333:
	lea	a2,[a2]16
.L322:
	addsc.a	a4,a15,d7,#0
.L323:
	ld.bu	d0,[a4]
.L550:
	and	d15,d0,#128
.L551:
	jne	d15,d5,.L34
.L324:
	and	d15,d7,#3
.L325:
	sh	d15,#3
	
	imask e2,d0,d15,#(0x8) 
 ldmst [a2]0,e2
	
.L33:
	ret
.L34:
	addsc.a	a15,a15,d7,#0
.L326:
	ld.bu	d0,[a15]36
.L327:
	and	d15,d7,#3
.L328:
	sh	d15,#3
	
	imask e2,d0,d15,#(0x8) 
 ldmst [a2]0,e2
	
.L552:
	ret
.L283:
	
__Port_SetPinDirection_function_end:
	.size	Port_SetPinDirection,__Port_SetPinDirection_function_end-Port_SetPinDirection
.L70:
	; End of function
	
	.sdecl	'.text.Port_RefreshPortDirection.Code.Cpu0',code,cluster('Port_RefreshPortDirection')
	.sect	'.text.Port_RefreshPortDirection.Code.Cpu0'
	.align	2
	
	.global	Port_RefreshPortDirection
; Function Port_RefreshPortDirection
.L54:
Port_RefreshPortDirection:	.type	func
	mov	d1,#0
.L470:
	mov	d2,d1
.L346:
	mov	d3,#31
.L352:
	mov	d4,#1
.L353:
	mov	d5,#1
.L557:
	mov.u	d6,#64519
	addih	d6,d6,#240
.L347:
	movh.a	a2,#@his(Port_kConfigPtr)
.L363:
	mov	d7,#1
.L364:
	mov	d8,#15
.L558:
	mov	d9,#40
.L36:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	jge.u	d3,d1,.L37
.L356:
	add	d0,d1,#-32
.L559:
	sh	d0,d4,d0
.L560:
	and	d0,d0,#263
.L357:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	j	.L38
.L37:
	sh	d0,d5,d1
.L471:
	and	d0,d6

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
.L38:
	jeq	d0,#0,.L39
.L350:
	mul	d15,d2,#56
.L561:
	ld.a	a15,[a2]@los(Port_kConfigPtr)
.L562:
	ld.a	a15,[a15]
.L563:
	addsc.a	a15,a15,d15,#0
.L472:
	ld.w	d12,[a15]32
.L373:
	movh.a	a4,#61444
	lea	a4,[a4]@los(0xf003a000)
.L564:
	sh	d15,d1,#8
.L565:
	addsc.a	a4,a4,d15,#0
.L473:
	lea	a4,[a4]16
.L374:
	mov	d11,#1
.L474:
	mov	d13,#0
.L40:
	sh	d0,d7,d13
.L566:
	movh.a	a5,#@his(Port_kAvailablePins)
	lea	a5,[a5]@los(Port_kAvailablePins)
.L567:
	addsc.a	a5,a5,d1,#1
	ld.hu	d10,[a5]0
.L475:
	and	d0,d10
.L568:
	jeq	d0,#0,.L41
.L371:
	and	d15,d12,d11
.L569:
	jne	d15,#0,.L42
.L570:
	ld.bu	d15,[a15]
.L571:
	st.b	[a4],d15
.L42:
.L41:
	add.a	a4,#1
.L572:
	add.a	a15,#1
.L573:
	sh	d11,#1
.L574:
	add	d13,#1
.L575:
	jge.u	d8,d13,.L40
.L576:
	add	d2,#1
.L39:
	add	d1,#1
.L577:
	jge.u	d9,d1,.L36
.L578:
	ret
.L335:
	
__Port_RefreshPortDirection_function_end:
	.size	Port_RefreshPortDirection,__Port_RefreshPortDirection_function_end-Port_RefreshPortDirection
.L75:
	; End of function
	
	.sdecl	'.text.Port_SetPinMode.Code.Cpu0',code,cluster('Port_SetPinMode')
	.sect	'.text.Port_SetPinMode.Code.Cpu0'
	.align	2
	
	.global	Port_SetPinMode
; Function Port_SetPinMode
.L56:
Port_SetPinMode:	.type	func
	sub.a	a10,#8
.L476:
	mov	d15,d4
.L478:
	mov	d8,d5
.L479:
	and	d9,d8,#7
.L393:
	extr.u	d10,d15,#4,#8
.L394:
	and	d1,d15,#15
.L399:
	mov	d4,#0
.L477:
	mov	d5,d4
.L409:
	mov	d15,#31
.L415:
	mov	d6,#1
.L416:
	mov	d7,#1
.L583:
	mov.u	d11,#64519
	addih	d11,d11,#240
.L410:
	j	.L43
.L44:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	jge.u	d15,d5,.L45
.L419:
	add	d0,d5,#-32
.L584:
	sh	d0,d6,d0
.L585:
	and	d0,d0,#263
.L420:

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
	j	.L46
.L45:
	sh	d0,d7,d5
.L480:
	and	d0,d11

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  2152    RetVal = ((Port > (uint32)PORT_NUMBER_31) ? (Port_lIsPortAvailable63(Port)) :      (inlined)
.L46:
	ne	d0,d0,#0
.L413:
	add	d4,d0
.L586:
	add	d5,#1
.L43:
	jlt.u	d5,d10,.L44
.L397:
	mul	d15,d4,#56
.L587:
	movh.a	a15,#@his(Port_kConfigPtr)
	ld.a	a15,[a15]@los(Port_kConfigPtr)
.L588:
	ld.a	a15,[a15]
.L589:
	addsc.a	a15,a15,d15,#0
.L425:
	movh.a	a2,#61444
	lea	a2,[a2]@los(0xf003a000)
.L590:
	sh	d15,d10,#8
.L591:
	addsc.a	a2,a2,d15,#0
.L402:
	insert	d15,d1,#0,#0,#2
.L403:
	addsc.a	a2,a2,d15,#0
.L428:
	lea	a2,[a2]16
.L482:
	ld.w	d15,[a15]28
.L592:
	mov	d0,d6
.L404:
	sh	d0,d0,d1
.L405:
	and	d15,d0
.L593:
	jeq	d15,#0,.L47
.L406:
	and	d15,d1,#3
.L407:
	addsc.a	a15,a2,d15,#0
.L481:
	ld.bu	d0,[a15]
.L430:
	and	d15,d8,#56
.L484:
	movh.a	a15,#@his(.1.ini)
	lea	a15,[a15]@los(.1.ini)
.L594:
	mov.aa	a4,a10
	mov.a	a5,#7
.L48:
	ld.bu	d4,[a15+]
	st.b	[a4+],d4
	loop	a5,.L48
.L595:
	and	d4,d0,#192
.L596:
	or	d4,d15
.L597:
	st.b	[a10],d4
.L598:
	st.b	[a10]4,d15
.L599:
	or	d15,#64
.L485:
	st.b	[a10]5,d15
.L600:
	and	d15,d0,#128
.L601:
	addsc.a	a15,a10,d9,#0
	ld.bu	d0,[a15]
.L483:
	or	d0,d15
.L602:
	and	d15,d1,#3
	sh	d15,#3
	
	imask e2,d0,d15,#(0x8) 
 ldmst [a2]0,e2
	
.L47:
	ret
.L377:
	
__Port_SetPinMode_function_end:
	.size	Port_SetPinMode,__Port_SetPinMode_function_end-Port_SetPinMode
.L80:
	; End of function
	
	.sdecl	'.rodata.Port_kAvailablePins.Const.Cpu0.16bit',data,rom,cluster('Port_kAvailablePins')
	.sect	'.rodata.Port_kAvailablePins.Const.Cpu0.16bit'
	.align	2
Port_kAvailablePins:	.type	object
	.size	Port_kAvailablePins,82
	.half	8191,248,4095
	.space	14
	.half	511,65535,3,15
	.half	2047,511
	.space	8
	.half	32719,255,4095,255
	.space	16
	.half	255,65535,62
	.space	10
	.half	32767
	.sdecl	'.bss.Port_kConfigPtr.ClearedData.LmuNC.32bit',data,cluster('Port_kConfigPtr')
	.sect	'.bss.Port_kConfigPtr.ClearedData.LmuNC.32bit'
	.align	4
Port_kConfigPtr:	.type	object
	.size	Port_kConfigPtr,4
	.space	4
	.sdecl	'.rodata.Port..1.ini',data,rom
	.sect	'.rodata.Port..1.ini'
.1.ini:	.type	object
	.size	.1.ini,8
	.space	2
	.byte	8,16
	.space	4
	.calls	'Port_Init','Mcal_WritePeripEndInitProtReg'
	.calls	'Port_Init','Mcal_WriteSafetyEndInitProtReg'
	.calls	'Port_Init','',8
	.calls	'Port_SetPinDirection','',0
	.calls	'Port_RefreshPortDirection','',0
	.extern	Mcal_WriteSafetyEndInitProtReg
	.extern	Mcal_WritePeripEndInitProtReg
	.calls	'Port_SetPinMode','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L58:
	.word	13119
	.half	3
	.word	.L59
	.byte	4
.L57:
	.byte	1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L60
.L88:
	.byte	2
	.byte	'Port_lIOInit',0,3,1,161,12,19,1,1
.L91:
	.byte	3,4,4,4,4,4,4,4,4,4,4,4,0,0
.L111:
	.byte	2
	.byte	'Port_lPDRInit',0,3,1,139,15,19,1,1
.L113:
	.byte	3,4,4,4,0,0,5
	.byte	'unsigned int',0,4,7,5
	.byte	'int',0,4,5
.L388:
	.byte	5
	.byte	'unsigned char',0,1,8
.L151:
	.byte	5
	.byte	'unsigned short int',0,2,7,6
	.byte	'_Ifx_P_OUT_Bits',0,2,147,3,16,4,7
	.byte	'P0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'P1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'P2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'P3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'P4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'P5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'P6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'P7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'P8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'P9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'P10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'P11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'P12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'P13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'P14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'P15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,173,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	284
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMR_Bits',0,2,173,2,16,4,7
	.byte	'PS0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'PS2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'PS3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'PS4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'PS5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'PS6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'PS7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'PS8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'PS9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'PS10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'PS11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'PS12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'PS13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'PS14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'PS15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'PCL0',0,1
	.word	245
	.byte	1,7,2,35,2,7
	.byte	'PCL1',0,1
	.word	245
	.byte	1,6,2,35,2,7
	.byte	'PCL2',0,1
	.word	245
	.byte	1,5,2,35,2,7
	.byte	'PCL3',0,1
	.word	245
	.byte	1,4,2,35,2,7
	.byte	'PCL4',0,1
	.word	245
	.byte	1,3,2,35,2,7
	.byte	'PCL5',0,1
	.word	245
	.byte	1,2,2,35,2,7
	.byte	'PCL6',0,1
	.word	245
	.byte	1,1,2,35,2,7
	.byte	'PCL7',0,1
	.word	245
	.byte	1,0,2,35,2,7
	.byte	'PCL8',0,1
	.word	245
	.byte	1,7,2,35,3,7
	.byte	'PCL9',0,1
	.word	245
	.byte	1,6,2,35,3,7
	.byte	'PCL10',0,1
	.word	245
	.byte	1,5,2,35,3,7
	.byte	'PCL11',0,1
	.word	245
	.byte	1,4,2,35,3,7
	.byte	'PCL12',0,1
	.word	245
	.byte	1,3,2,35,3,7
	.byte	'PCL13',0,1
	.word	245
	.byte	1,2,2,35,3,7
	.byte	'PCL14',0,1
	.word	245
	.byte	1,1,2,35,3,7
	.byte	'PCL15',0,1
	.word	245
	.byte	1,0,2,35,3,0,8,2,253,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	600
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_ID_Bits',0,2,135,1,16,4,7
	.byte	'MODREV',0,1
	.word	245
	.byte	8,0,2,35,0,7
	.byte	'MODTYPE',0,1
	.word	245
	.byte	8,0,2,35,1,7
	.byte	'MODNUMBER',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,157,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1171
	.byte	4,2,35,0,0,10,4
	.word	245
	.byte	11,3,0,6
	.byte	'_Ifx_P_IOCR0_Bits',0,2,165,1,16,4,7
	.byte	'reserved_0',0,1
	.word	245
	.byte	3,5,2,35,0,7
	.byte	'PC0',0,1
	.word	245
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	245
	.byte	3,5,2,35,1,7
	.byte	'PC1',0,1
	.word	245
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	245
	.byte	3,5,2,35,2,7
	.byte	'PC2',0,1
	.word	245
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	245
	.byte	3,5,2,35,3,7
	.byte	'PC3',0,1
	.word	245
	.byte	5,0,2,35,3,0,8,2,173,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1300
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IOCR4_Bits',0,2,191,1,16,4,7
	.byte	'reserved_0',0,1
	.word	245
	.byte	3,5,2,35,0,7
	.byte	'PC4',0,1
	.word	245
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	245
	.byte	3,5,2,35,1,7
	.byte	'PC5',0,1
	.word	245
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	245
	.byte	3,5,2,35,2,7
	.byte	'PC6',0,1
	.word	245
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	245
	.byte	3,5,2,35,3,7
	.byte	'PC7',0,1
	.word	245
	.byte	5,0,2,35,3,0,8,2,189,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1515
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IOCR8_Bits',0,2,204,1,16,4,7
	.byte	'reserved_0',0,1
	.word	245
	.byte	3,5,2,35,0,7
	.byte	'PC8',0,1
	.word	245
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	245
	.byte	3,5,2,35,1,7
	.byte	'PC9',0,1
	.word	245
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	245
	.byte	3,5,2,35,2,7
	.byte	'PC10',0,1
	.word	245
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	245
	.byte	3,5,2,35,3,7
	.byte	'PC11',0,1
	.word	245
	.byte	5,0,2,35,3,0,8,2,197,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1730
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IOCR12_Bits',0,2,178,1,16,4,7
	.byte	'reserved_0',0,1
	.word	245
	.byte	3,5,2,35,0,7
	.byte	'PC12',0,1
	.word	245
	.byte	5,0,2,35,0,7
	.byte	'reserved_8',0,1
	.word	245
	.byte	3,5,2,35,1,7
	.byte	'PC13',0,1
	.word	245
	.byte	5,0,2,35,1,7
	.byte	'reserved_16',0,1
	.word	245
	.byte	3,5,2,35,2,7
	.byte	'PC14',0,1
	.word	245
	.byte	5,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	245
	.byte	3,5,2,35,3,7
	.byte	'PC15',0,1
	.word	245
	.byte	5,0,2,35,3,0,8,2,181,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	1947
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_IN_Bits',0,2,143,1,16,4,7
	.byte	'P0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'P1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'P2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'P3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'P4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'P5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'P6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'P7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'P8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'P9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'P10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'P11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'P12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'P13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'P14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'P15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,165,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	2167
	.byte	4,2,35,0,0,10,24
	.word	245
	.byte	11,23,0,6
	.byte	'_Ifx_P_PDR0_Bits',0,2,214,3,16,4,7
	.byte	'PD0',0,1
	.word	245
	.byte	2,6,2,35,0,7
	.byte	'PL0',0,1
	.word	245
	.byte	2,4,2,35,0,7
	.byte	'PD1',0,1
	.word	245
	.byte	2,2,2,35,0,7
	.byte	'PL1',0,1
	.word	245
	.byte	2,0,2,35,0,7
	.byte	'PD2',0,1
	.word	245
	.byte	2,6,2,35,1,7
	.byte	'PL2',0,1
	.word	245
	.byte	2,4,2,35,1,7
	.byte	'PD3',0,1
	.word	245
	.byte	2,2,2,35,1,7
	.byte	'PL3',0,1
	.word	245
	.byte	2,0,2,35,1,7
	.byte	'PD4',0,1
	.word	245
	.byte	2,6,2,35,2,7
	.byte	'PL4',0,1
	.word	245
	.byte	2,4,2,35,2,7
	.byte	'PD5',0,1
	.word	245
	.byte	2,2,2,35,2,7
	.byte	'PL5',0,1
	.word	245
	.byte	2,0,2,35,2,7
	.byte	'PD6',0,1
	.word	245
	.byte	2,6,2,35,3,7
	.byte	'PL6',0,1
	.word	245
	.byte	2,4,2,35,3,7
	.byte	'PD7',0,1
	.word	245
	.byte	2,2,2,35,3,7
	.byte	'PL7',0,1
	.word	245
	.byte	2,0,2,35,3,0,8,2,197,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	2491
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_PDR1_Bits',0,2,235,3,16,4,7
	.byte	'PD8',0,1
	.word	245
	.byte	2,6,2,35,0,7
	.byte	'PL8',0,1
	.word	245
	.byte	2,4,2,35,0,7
	.byte	'PD9',0,1
	.word	245
	.byte	2,2,2,35,0,7
	.byte	'PL9',0,1
	.word	245
	.byte	2,0,2,35,0,7
	.byte	'PD10',0,1
	.word	245
	.byte	2,6,2,35,1,7
	.byte	'PL10',0,1
	.word	245
	.byte	2,4,2,35,1,7
	.byte	'PD11',0,1
	.word	245
	.byte	2,2,2,35,1,7
	.byte	'PL11',0,1
	.word	245
	.byte	2,0,2,35,1,7
	.byte	'PD12',0,1
	.word	245
	.byte	2,6,2,35,2,7
	.byte	'PL12',0,1
	.word	245
	.byte	2,4,2,35,2,7
	.byte	'PD13',0,1
	.word	245
	.byte	2,2,2,35,2,7
	.byte	'PL13',0,1
	.word	245
	.byte	2,0,2,35,2,7
	.byte	'PD14',0,1
	.word	245
	.byte	2,6,2,35,3,7
	.byte	'PL14',0,1
	.word	245
	.byte	2,4,2,35,3,7
	.byte	'PD15',0,1
	.word	245
	.byte	2,2,2,35,3,7
	.byte	'PL15',0,1
	.word	245
	.byte	2,0,2,35,3,0,8,2,205,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	2795
	.byte	4,2,35,0,0,10,8
	.word	245
	.byte	11,7,0,6
	.byte	'_Ifx_P_ESR_Bits',0,2,113,16,4,7
	.byte	'EN0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'EN1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'EN2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'EN3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'EN4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'EN5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'EN6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'EN7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'EN8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'EN9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'EN10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'EN11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'EN12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'EN13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'EN14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'EN15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,149,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	3120
	.byte	4,2,35,0,0,10,12
	.word	245
	.byte	11,11,0,6
	.byte	'_Ifx_P_PDISC_Bits',0,2,192,3,16,4,7
	.byte	'PDIS0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'PDIS1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'PDIS2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'PDIS3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'PDIS4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'PDIS5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'PDIS6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'PDIS7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'PDIS8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'PDIS9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'PDIS10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'PDIS11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'PDIS12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'PDIS13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'PDIS14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'PDIS15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,189,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	3460
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_PCSR_Bits',0,2,169,3,16,4,7
	.byte	'SEL0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'SEL1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'SEL2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'SEL3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'SEL4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'SEL5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'SEL6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'SEL7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'SEL8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'SEL9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'SEL10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'SEL11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'SEL12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'SEL13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'SEL14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'SEL15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	15,1,2,35,2,7
	.byte	'LCK',0,1
	.word	245
	.byte	1,0,2,35,3,0,8,2,181,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	3826
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR0_Bits',0,2,232,2,16,4,7
	.byte	'PS0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'PS2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'PS3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'reserved_4',0,4
	.word	222
	.byte	28,0,2,35,0,0,8,2,141,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4190
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR4_Bits',0,2,253,2,16,4,7
	.byte	'reserved_0',0,1
	.word	245
	.byte	4,4,2,35,0,7
	.byte	'PS4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'PS5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'PS6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'PS7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'reserved_8',0,4
	.word	222
	.byte	24,0,2,35,0,0,8,2,157,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4337
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR8_Bits',0,2,136,3,16,4,7
	.byte	'reserved_0',0,1
	.word	245
	.byte	8,0,2,35,0,7
	.byte	'PS8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'PS9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'PS10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'PS11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'reserved_12',0,4
	.word	222
	.byte	20,0,2,35,0,0,8,2,165,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4506
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR12_Bits',0,2,242,2,16,4,7
	.byte	'reserved_0',0,2
	.word	262
	.byte	12,4,2,35,0,7
	.byte	'PS12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'PS13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'PS14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'PS15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,149,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4678
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR0_Bits',0,2,130,2,16,4,7
	.byte	'reserved_0',0,2
	.word	262
	.byte	16,0,2,35,0,7
	.byte	'PCL0',0,1
	.word	245
	.byte	1,7,2,35,2,7
	.byte	'PCL1',0,1
	.word	245
	.byte	1,6,2,35,2,7
	.byte	'PCL2',0,1
	.word	245
	.byte	1,5,2,35,2,7
	.byte	'PCL3',0,1
	.word	245
	.byte	1,4,2,35,2,7
	.byte	'reserved_20',0,2
	.word	262
	.byte	12,0,2,35,2,0,8,2,221,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	4853
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR4_Bits',0,2,151,2,16,4,7
	.byte	'reserved_0',0,4
	.word	222
	.byte	20,12,2,35,0,7
	.byte	'PCL4',0,1
	.word	245
	.byte	1,3,2,35,2,7
	.byte	'PCL5',0,1
	.word	245
	.byte	1,2,2,35,2,7
	.byte	'PCL6',0,1
	.word	245
	.byte	1,1,2,35,2,7
	.byte	'PCL7',0,1
	.word	245
	.byte	1,0,2,35,2,7
	.byte	'reserved_24',0,1
	.word	245
	.byte	8,0,2,35,3,0,8,2,237,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5027
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR8_Bits',0,2,162,2,16,4,7
	.byte	'reserved_0',0,4
	.word	222
	.byte	24,8,2,35,0,7
	.byte	'PCL8',0,1
	.word	245
	.byte	1,7,2,35,3,7
	.byte	'PCL9',0,1
	.word	245
	.byte	1,6,2,35,3,7
	.byte	'PCL10',0,1
	.word	245
	.byte	1,5,2,35,3,7
	.byte	'PCL11',0,1
	.word	245
	.byte	1,4,2,35,3,7
	.byte	'reserved_28',0,1
	.word	245
	.byte	4,0,2,35,3,0,8,2,245,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5201
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR12_Bits',0,2,141,2,16,4,7
	.byte	'reserved_0',0,4
	.word	222
	.byte	28,4,2,35,0,7
	.byte	'PCL12',0,1
	.word	245
	.byte	1,3,2,35,3,7
	.byte	'PCL13',0,1
	.word	245
	.byte	1,2,2,35,3,7
	.byte	'PCL14',0,1
	.word	245
	.byte	1,1,2,35,3,7
	.byte	'PCL15',0,1
	.word	245
	.byte	1,0,2,35,3,0,8,2,229,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5377
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMSR_Bits',0,2,210,2,16,4,7
	.byte	'PS0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'PS1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'PS2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'PS3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'PS4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'PS5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'PS6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'PS7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'PS8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'PS9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'PS10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'PS11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'PS12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'PS13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'PS14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'PS15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,133,5,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5533
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_OMCR_Bits',0,2,236,1,16,4,7
	.byte	'reserved_0',0,2
	.word	262
	.byte	16,0,2,35,0,7
	.byte	'PCL0',0,1
	.word	245
	.byte	1,7,2,35,2,7
	.byte	'PCL1',0,1
	.word	245
	.byte	1,6,2,35,2,7
	.byte	'PCL2',0,1
	.word	245
	.byte	1,5,2,35,2,7
	.byte	'PCL3',0,1
	.word	245
	.byte	1,4,2,35,2,7
	.byte	'PCL4',0,1
	.word	245
	.byte	1,3,2,35,2,7
	.byte	'PCL5',0,1
	.word	245
	.byte	1,2,2,35,2,7
	.byte	'PCL6',0,1
	.word	245
	.byte	1,1,2,35,2,7
	.byte	'PCL7',0,1
	.word	245
	.byte	1,0,2,35,2,7
	.byte	'PCL8',0,1
	.word	245
	.byte	1,7,2,35,3,7
	.byte	'PCL9',0,1
	.word	245
	.byte	1,6,2,35,3,7
	.byte	'PCL10',0,1
	.word	245
	.byte	1,5,2,35,3,7
	.byte	'PCL11',0,1
	.word	245
	.byte	1,4,2,35,3,7
	.byte	'PCL12',0,1
	.word	245
	.byte	1,3,2,35,3,7
	.byte	'PCL13',0,1
	.word	245
	.byte	1,2,2,35,3,7
	.byte	'PCL14',0,1
	.word	245
	.byte	1,1,2,35,3,7
	.byte	'PCL15',0,1
	.word	245
	.byte	1,0,2,35,3,0,8,2,213,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	5866
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_LPCR_Bits',0,2,217,1,16,4,7
	.byte	'REN_CTRL',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'RX_EN',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'TERM',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'LRXTERM',0,1
	.word	245
	.byte	3,2,2,35,0,7
	.byte	'LVDSM',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'PS',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'TEN_CTRL',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'TX_EN',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'VDIFFADJ',0,1
	.word	245
	.byte	2,4,2,35,1,7
	.byte	'VOSDYN',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'VOSEXT',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'TX_PD',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'TX_PWDPD',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved_16',0,2
	.word	262
	.byte	16,0,2,35,2,0,8,2,205,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6214
	.byte	4,2,35,0,0,10,32
	.word	6494
	.byte	11,7,0,10,56
	.word	245
	.byte	11,55,0,6
	.byte	'_Ifx_P_ACCEN1_Bits',0,2,107,16,4,7
	.byte	'reserved_0',0,4
	.word	222
	.byte	32,0,2,35,0,0,8,2,141,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6552
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P_ACCEN0_Bits',0,2,70,16,4,7
	.byte	'EN0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'EN1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'EN2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'EN3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'EN4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'EN5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'EN6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'EN7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'EN8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'EN9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'EN10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'EN11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'EN12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'EN13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'EN14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'EN15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'EN16',0,1
	.word	245
	.byte	1,7,2,35,2,7
	.byte	'EN17',0,1
	.word	245
	.byte	1,6,2,35,2,7
	.byte	'EN18',0,1
	.word	245
	.byte	1,5,2,35,2,7
	.byte	'EN19',0,1
	.word	245
	.byte	1,4,2,35,2,7
	.byte	'EN20',0,1
	.word	245
	.byte	1,3,2,35,2,7
	.byte	'EN21',0,1
	.word	245
	.byte	1,2,2,35,2,7
	.byte	'EN22',0,1
	.word	245
	.byte	1,1,2,35,2,7
	.byte	'EN23',0,1
	.word	245
	.byte	1,0,2,35,2,7
	.byte	'EN24',0,1
	.word	245
	.byte	1,7,2,35,3,7
	.byte	'EN25',0,1
	.word	245
	.byte	1,6,2,35,3,7
	.byte	'EN26',0,1
	.word	245
	.byte	1,5,2,35,3,7
	.byte	'EN27',0,1
	.word	245
	.byte	1,4,2,35,3,7
	.byte	'EN28',0,1
	.word	245
	.byte	1,3,2,35,3,7
	.byte	'EN29',0,1
	.word	245
	.byte	1,2,2,35,3,7
	.byte	'EN30',0,1
	.word	245
	.byte	1,1,2,35,3,7
	.byte	'EN31',0,1
	.word	245
	.byte	1,0,2,35,3,0,8,2,133,4,9,4,9
	.byte	'U',0
	.word	222
	.byte	4,2,35,0,9
	.byte	'I',0
	.word	238
	.byte	4,2,35,0,9
	.byte	'B',0
	.word	6639
	.byte	4,2,35,0,0,6
	.byte	'_Ifx_P',0,2,222,5,25,128,2,9
	.byte	'OUT',0
	.word	560
	.byte	4,2,35,0,9
	.byte	'OMR',0
	.word	1131
	.byte	4,2,35,4,9
	.byte	'ID',0
	.word	1251
	.byte	4,2,35,8,9
	.byte	'reserved_C',0
	.word	1291
	.byte	4,2,35,12,9
	.byte	'IOCR0',0
	.word	1475
	.byte	4,2,35,16,9
	.byte	'IOCR4',0
	.word	1690
	.byte	4,2,35,20,9
	.byte	'IOCR8',0
	.word	1907
	.byte	4,2,35,24,9
	.byte	'IOCR12',0
	.word	2127
	.byte	4,2,35,28,9
	.byte	'reserved_20',0
	.word	1291
	.byte	4,2,35,32,9
	.byte	'IN',0
	.word	2442
	.byte	4,2,35,36,9
	.byte	'reserved_28',0
	.word	2482
	.byte	24,2,35,40,9
	.byte	'PDR0',0
	.word	2755
	.byte	4,2,35,64,9
	.byte	'PDR1',0
	.word	3071
	.byte	4,2,35,68,9
	.byte	'reserved_48',0
	.word	3111
	.byte	8,2,35,72,9
	.byte	'ESR',0
	.word	3411
	.byte	4,2,35,80,9
	.byte	'reserved_54',0
	.word	3451
	.byte	12,2,35,84,9
	.byte	'PDISC',0
	.word	3786
	.byte	4,2,35,96,9
	.byte	'PCSR',0
	.word	4150
	.byte	4,2,35,100,9
	.byte	'reserved_68',0
	.word	3111
	.byte	8,2,35,104,9
	.byte	'OMSR0',0
	.word	4297
	.byte	4,2,35,112,9
	.byte	'OMSR4',0
	.word	4466
	.byte	4,2,35,116,9
	.byte	'OMSR8',0
	.word	4638
	.byte	4,2,35,120,9
	.byte	'OMSR12',0
	.word	4813
	.byte	4,2,35,124,9
	.byte	'OMCR0',0
	.word	4987
	.byte	4,3,35,128,1,9
	.byte	'OMCR4',0
	.word	5161
	.byte	4,3,35,132,1,9
	.byte	'OMCR8',0
	.word	5337
	.byte	4,3,35,136,1,9
	.byte	'OMCR12',0
	.word	5493
	.byte	4,3,35,140,1,9
	.byte	'OMSR',0
	.word	5826
	.byte	4,3,35,144,1,9
	.byte	'OMCR',0
	.word	6174
	.byte	4,3,35,148,1,9
	.byte	'reserved_98',0
	.word	3111
	.byte	8,3,35,152,1,9
	.byte	'LPCR',0
	.word	6534
	.byte	32,3,35,160,1,9
	.byte	'reserved_C0',0
	.word	6543
	.byte	56,3,35,192,1,9
	.byte	'ACCEN1',0
	.word	6599
	.byte	4,3,35,248,1,9
	.byte	'ACCEN0',0
	.word	7166
	.byte	4,3,35,252,1,0,12
	.word	7206
.L101:
	.byte	13
	.word	7776
.L96:
	.byte	5
	.byte	'unsigned long int',0,4,7,14
	.word	7786
.L153:
	.byte	15
	.byte	'Port_lAdr',0,3,1,239,15,22
	.word	7781
	.byte	1,1
.L155:
	.byte	16
	.byte	'PortNumber',0,1,239,15,45
	.word	7807
.L157:
	.byte	4,0,14
	.word	7786
.L136:
	.byte	15
	.byte	'Port_lIsPortAvailable31',0,3,1,146,16,21
	.word	7786
	.byte	1,1
.L137:
	.byte	16
	.byte	'Port',0,1,146,16,58
	.word	7856
.L139:
	.byte	4,0,14
	.word	7786
.L126:
	.byte	15
	.byte	'Port_lIsPortAvailable63',0,3,1,182,16,21
	.word	7786
	.byte	1,1
.L129:
	.byte	16
	.byte	'Port',0,1,182,16,58
	.word	7913
.L131:
	.byte	4,0,14
	.word	7786
.L117:
	.byte	15
	.byte	'Port_lIsPortAvailable',0,3,1,218,16,21
	.word	7786
	.byte	1,1
.L120:
	.byte	16
	.byte	'Port',0,1,218,16,56
	.word	7970
.L122:
	.byte	3,4,4,0,0,14
	.word	7786
.L204:
	.byte	15
	.byte	'Port_lIsPortReadOnly31',0,3,1,139,17,21
	.word	7786
	.byte	1,1
.L207:
	.byte	16
	.byte	'Port',0,1,139,17,57
	.word	8028
.L209:
	.byte	4,0,14
	.word	7786
.L177:
	.byte	15
	.byte	'Port_lIsPortReadOnly63',0,3,1,175,17,21
	.word	7786
	.byte	1,1
.L179:
	.byte	16
	.byte	'Port',0,1,175,17,57
	.word	8084
.L181:
	.byte	4,0,14
	.word	7786
.L168:
	.byte	15
	.byte	'Port_lIsPortReadOnly',0,3,1,211,17,21
	.word	7786
	.byte	1,1
.L170:
	.byte	16
	.byte	'Port',0,1,211,17,55
	.word	8140
.L172:
	.byte	3,4,4,0,0,14
	.word	7786
	.byte	14
	.word	7786
.L362:
	.byte	15
	.byte	'Port_lIsPinAvailable',0,3,1,130,18,21
	.word	262
	.byte	1,1
.L365:
	.byte	16
	.byte	'Port',0,1,130,18,55
	.word	8197
.L367:
	.byte	16
	.byte	'Pin',0,1,130,18,74
	.word	8202
.L369:
	.byte	4,0,14
	.word	7786
.L142:
	.byte	15
	.byte	'Port_lIsPortPdr1Available',0,3,1,166,18,21
	.word	262
	.byte	1,1
.L145:
	.byte	16
	.byte	'Port',0,1,166,18,60
	.word	8269
.L147:
	.byte	4,0,14
	.word	7786
	.byte	14
	.word	262
.L211:
	.byte	15
	.byte	'Port_lIsPortIocrAvailable',0,3,1,203,18,21
	.word	262
	.byte	1,1
.L213:
	.byte	16
	.byte	'Port',0,1,203,18,60
	.word	8328
.L215:
	.byte	16
	.byte	'Pin',0,1,203,18,79
	.word	8333
.L217:
	.byte	4,0,14
	.word	262
.L298:
	.byte	15
	.byte	'Port_lNumber',0,3,1,234,19,21
	.word	7786
	.byte	1,1
.L301:
	.byte	16
	.byte	'Pin',0,1,234,19,53
	.word	8405
.L303:
	.byte	4,0,14
	.word	262
.L312:
	.byte	15
	.byte	'Port_lPinNumber',0,3,1,140,20,21
	.word	7786
	.byte	1,1
.L314:
	.byte	16
	.byte	'Pin',0,1,140,20,56
	.word	8450
.L316:
	.byte	4,0,14
	.word	7786
.L237:
	.byte	15
	.byte	'Port_lIsPortLVDSAvailable31',0,3,1,157,21,21
	.word	7786
	.byte	1,1
.L238:
	.byte	16
	.byte	'Port',0,1,157,21,62
	.word	8498
.L240:
	.byte	4,0,14
	.word	7786
.L230:
	.byte	15
	.byte	'Port_lIsPortLVDSAvailable63',0,3,1,190,21,21
	.word	7786
	.byte	1,1
.L233:
	.byte	16
	.byte	'Port',0,1,190,21,62
	.word	8559
.L235:
	.byte	4,0,14
	.word	7786
.L225:
	.byte	15
	.byte	'Port_lIsPortLVDSAvailable',0,3,1,224,21,21
	.word	7786
	.byte	1,1
.L226:
	.byte	16
	.byte	'Port',0,1,224,21,60
	.word	8620
.L228:
	.byte	3,4,4,0,0,14
	.word	7786
.L261:
	.byte	15
	.byte	'Port_lIsPortPCSRAvailable31',0,3,1,140,22,21
	.word	7786
	.byte	1,1
.L262:
	.byte	16
	.byte	'Port',0,1,140,22,62
	.word	8682
.L264:
	.byte	4,0,14
	.word	7786
.L254:
	.byte	15
	.byte	'Port_lIsPortPCSRAvailable63',0,3,1,173,22,21
	.word	7786
	.byte	1,1
.L257:
	.byte	16
	.byte	'Port',0,1,173,22,62
	.word	8743
.L259:
	.byte	4,0,14
	.word	7786
.L249:
	.byte	15
	.byte	'Port_lIsPortPCSRAvailable',0,3,1,207,22,21
	.word	7786
	.byte	1,1
.L250:
	.byte	16
	.byte	'Port',0,1,207,22,60
	.word	8804
.L252:
	.byte	3,4,4,0,0,14
	.word	7786
.L278:
	.byte	15
	.byte	'Port_lIsPortPDISCAvailable31',0,3,1,250,23,21
	.word	7786
	.byte	1,1
.L279:
	.byte	16
	.byte	'Port',0,1,250,23,63
	.word	8866
.L281:
	.byte	4,0,14
	.word	7786
.L271:
	.byte	15
	.byte	'Port_lIsPortPDISCAvailable63',0,3,1,155,24,21
	.word	7786
	.byte	1,1
.L274:
	.byte	16
	.byte	'Port',0,1,155,24,63
	.word	8928
.L276:
	.byte	4,0,14
	.word	7786
.L266:
	.byte	15
	.byte	'Port_lIsPortPDISCAvailable',0,3,1,204,23,21
	.word	7786
	.byte	1,1
.L267:
	.byte	16
	.byte	'Port',0,1,204,23,61
	.word	8990
.L269:
	.byte	3,4,4,0,0,14
	.word	7786
.L242:
	.byte	15
	.byte	'Port_lIsPortPinPairAvailable',0,3,1,255,22,21
	.word	7786
	.byte	1,1
.L245:
	.byte	16
	.byte	'PortLPCRvalue',0,1,255,22,63
	.word	9053
.L247:
	.byte	4,0,17
	.byte	'__popcntw',0
	.word	222
	.byte	1,1,1,1,18
	.byte	'a',0
	.word	222
	.byte	0,19
	.byte	'void',0,12
	.word	9151
	.byte	13
	.word	9157
	.byte	14
	.word	9162
	.byte	14
	.word	7786
	.byte	20
	.byte	'Mcal_WriteSafetyEndInitProtReg',0,3,178,3,13,1,1,1,1,16
	.byte	'RegAddress',0,3,179,3,24
	.word	9167
	.byte	16
	.byte	'DataValue',0,3,179,3,49
	.word	9172
	.byte	0,14
	.word	9162
	.byte	14
	.word	7786
	.byte	20
	.byte	'Mcal_WritePeripEndInitProtReg',0,3,165,4,13,1,1,1,1,16
	.byte	'RegAddress',0,3,166,4,24
	.word	9257
	.byte	16
	.byte	'DataValue',0,3,166,4,49
	.word	9262
	.byte	0,21,4,194,1,9,16,9
	.byte	'PC0',0
	.word	245
	.byte	1,2,35,0,9
	.byte	'PC1',0
	.word	245
	.byte	1,2,35,1,9
	.byte	'PC2',0
	.word	245
	.byte	1,2,35,2,9
	.byte	'PC3',0
	.word	245
	.byte	1,2,35,3,9
	.byte	'PC4',0
	.word	245
	.byte	1,2,35,4,9
	.byte	'PC5',0
	.word	245
	.byte	1,2,35,5,9
	.byte	'PC6',0
	.word	245
	.byte	1,2,35,6,9
	.byte	'PC7',0
	.word	245
	.byte	1,2,35,7,9
	.byte	'PC8',0
	.word	245
	.byte	1,2,35,8,9
	.byte	'PC9',0
	.word	245
	.byte	1,2,35,9,9
	.byte	'PC10',0
	.word	245
	.byte	1,2,35,10,9
	.byte	'PC11',0
	.word	245
	.byte	1,2,35,11,9
	.byte	'PC12',0
	.word	245
	.byte	1,2,35,12,9
	.byte	'PC13',0
	.word	245
	.byte	1,2,35,13,9
	.byte	'PC14',0
	.word	245
	.byte	1,2,35,14,9
	.byte	'PC15',0
	.word	245
	.byte	1,2,35,15,0,21,4,218,1,9,4,7
	.byte	'P0',0,1
	.word	245
	.byte	1,7,2,35,0,7
	.byte	'P1',0,1
	.word	245
	.byte	1,6,2,35,0,7
	.byte	'P2',0,1
	.word	245
	.byte	1,5,2,35,0,7
	.byte	'P3',0,1
	.word	245
	.byte	1,4,2,35,0,7
	.byte	'P4',0,1
	.word	245
	.byte	1,3,2,35,0,7
	.byte	'P5',0,1
	.word	245
	.byte	1,2,2,35,0,7
	.byte	'P6',0,1
	.word	245
	.byte	1,1,2,35,0,7
	.byte	'P7',0,1
	.word	245
	.byte	1,0,2,35,0,7
	.byte	'P8',0,1
	.word	245
	.byte	1,7,2,35,1,7
	.byte	'P9',0,1
	.word	245
	.byte	1,6,2,35,1,7
	.byte	'P10',0,1
	.word	245
	.byte	1,5,2,35,1,7
	.byte	'P11',0,1
	.word	245
	.byte	1,4,2,35,1,7
	.byte	'P12',0,1
	.word	245
	.byte	1,3,2,35,1,7
	.byte	'P13',0,1
	.word	245
	.byte	1,2,2,35,1,7
	.byte	'P14',0,1
	.word	245
	.byte	1,1,2,35,1,7
	.byte	'P15',0,1
	.word	245
	.byte	1,0,2,35,1,7
	.byte	'reserved',0,2
	.word	262
	.byte	16,0,2,35,2,0,21,4,131,2,9,56,9
	.byte	'PinControl',0
	.word	9346
	.byte	16,2,35,0,9
	.byte	'PinLevel',0
	.word	9567
	.byte	4,2,35,16,9
	.byte	'DriverStrength0',0
	.word	7786
	.byte	4,2,35,20,9
	.byte	'DriverStrength1',0
	.word	7786
	.byte	4,2,35,24,9
	.byte	'ModeChangeControl',0
	.word	9567
	.byte	4,2,35,28,9
	.byte	'DirChangeControl',0
	.word	9567
	.byte	4,2,35,32,9
	.byte	'PinControl2',0
	.word	9346
	.byte	16,2,35,36,9
	.byte	'EmergencyStopConf',0
	.word	9567
	.byte	4,2,35,52,0,14
	.word	9824
.L94:
	.byte	13
	.word	10020
	.byte	14
	.word	7786
.L92:
	.byte	13
	.word	10030
	.byte	21,4,161,2,9,28,9
	.byte	'LPCR0',0
	.word	7786
	.byte	4,2,35,0,9
	.byte	'LPCR1',0
	.word	7786
	.byte	4,2,35,4,9
	.byte	'LPCR2',0
	.word	7786
	.byte	4,2,35,8,9
	.byte	'LPCR3',0
	.word	7786
	.byte	4,2,35,12,9
	.byte	'LPCR4',0
	.word	7786
	.byte	4,2,35,16,9
	.byte	'LPCR5',0
	.word	7786
	.byte	4,2,35,20,9
	.byte	'LPCR6',0
	.word	7786
	.byte	4,2,35,24,0,14
	.word	10040
	.byte	13
	.word	10152
	.byte	14
	.word	7786
	.byte	13
	.word	10162
	.byte	21,4,196,2,9,16,9
	.byte	'PortConfigSetPtr',0
	.word	10025
	.byte	4,2,35,0,9
	.byte	'PDiscSet',0
	.word	10035
	.byte	4,2,35,4,9
	.byte	'Port_LVDSConfigTypePtr',0
	.word	10157
	.byte	4,2,35,8,9
	.byte	'Port_PCSRConfigTypePtr',0
	.word	10167
	.byte	4,2,35,12,0,14
	.word	10172
.L435:
	.byte	13
	.word	10287
.L86:
	.byte	14
	.word	10292
	.byte	12
	.word	7786
	.byte	14
	.word	10302
.L105:
	.byte	13
	.word	10307
.L284:
	.byte	14
	.word	262
	.byte	22,4,179,1,9,1,23
	.byte	'PORT_PIN_IN',0,0,23
	.byte	'PORT_PIN_OUT',0,128,1,0
.L286:
	.byte	14
	.word	10322
	.byte	14
	.word	245
.L292:
	.byte	13
	.word	10364
	.byte	12
	.word	7786
.L294:
	.byte	13
	.word	10374
	.byte	12
	.word	245
.L343:
	.byte	13
	.word	10384
.L378:
	.byte	14
	.word	262
.L380:
	.byte	14
	.word	245
.L432:
	.byte	10,8
	.word	245
	.byte	11,7,0,24
	.word	159
	.byte	3,25
	.word	9058
	.byte	26
	.word	9099
	.byte	27
	.word	9122
	.byte	0,4,25
	.word	7812
	.byte	26
	.word	7834
	.byte	27
	.word	7854
	.byte	0,4,25
	.word	8338
	.byte	26
	.word	8376
	.byte	26
	.word	8390
	.byte	27
	.word	8403
	.byte	0,4,25
	.word	8338
	.byte	26
	.word	8376
	.byte	26
	.word	8390
	.byte	27
	.word	8403
	.byte	0,4,25
	.word	8338
	.byte	26
	.word	8376
	.byte	26
	.word	8390
	.byte	27
	.word	8403
	.byte	0,4,25
	.word	7975
	.byte	26
	.word	8009
	.byte	28
	.word	8023
	.byte	25
	.word	7861
	.byte	26
	.word	7897
	.byte	27
	.word	7911
	.byte	0,27
	.word	8024
	.byte	25
	.word	7918
	.byte	26
	.word	7954
	.byte	27
	.word	7968
	.byte	0,27
	.word	8025
	.byte	0,0,4,25
	.word	8145
	.byte	26
	.word	8178
	.byte	28
	.word	8192
	.byte	25
	.word	8033
	.byte	26
	.word	8068
	.byte	27
	.word	8082
	.byte	0,27
	.word	8193
	.byte	25
	.word	8089
	.byte	26
	.word	8124
	.byte	27
	.word	8138
	.byte	0,27
	.word	8194
	.byte	0,0,4,25
	.word	8625
	.byte	26
	.word	8663
	.byte	28
	.word	8677
	.byte	25
	.word	8564
	.byte	26
	.word	8604
	.byte	27
	.word	8618
	.byte	0,27
	.word	8678
	.byte	25
	.word	8503
	.byte	26
	.word	8543
	.byte	27
	.word	8557
	.byte	0,27
	.word	8679
	.byte	0,0,4,25
	.word	8809
	.byte	26
	.word	8847
	.byte	28
	.word	8861
	.byte	25
	.word	8687
	.byte	26
	.word	8727
	.byte	27
	.word	8741
	.byte	0,27
	.word	8862
	.byte	25
	.word	8748
	.byte	26
	.word	8788
	.byte	27
	.word	8802
	.byte	0,27
	.word	8863
	.byte	0,0,4,25
	.word	8995
	.byte	26
	.word	9034
	.byte	28
	.word	9048
	.byte	25
	.word	8871
	.byte	26
	.word	8912
	.byte	27
	.word	8926
	.byte	0,27
	.word	9049
	.byte	25
	.word	8933
	.byte	26
	.word	8974
	.byte	27
	.word	8988
	.byte	0,27
	.word	9050
	.byte	0,0,4,25
	.word	194
	.byte	28
	.word	216
	.byte	25
	.word	7812
	.byte	26
	.word	7834
	.byte	27
	.word	7854
	.byte	0,27
	.word	217
	.byte	25
	.word	8274
	.byte	26
	.word	8312
	.byte	27
	.word	8326
	.byte	0,27
	.word	218
	.byte	25
	.word	7975
	.byte	26
	.word	8009
	.byte	28
	.word	8023
	.byte	25
	.word	7861
	.byte	26
	.word	7897
	.byte	27
	.word	7911
	.byte	0,27
	.word	8024
	.byte	25
	.word	7918
	.byte	26
	.word	7954
	.byte	27
	.word	7968
	.byte	0,27
	.word	8025
	.byte	0,0,27
	.word	219
	.byte	0,0,4,0,0,24
	.word	194
	.byte	3,25
	.word	7812
	.byte	26
	.word	7834
	.byte	27
	.word	7854
	.byte	0,4,25
	.word	8274
	.byte	26
	.word	8312
	.byte	27
	.word	8326
	.byte	0,4,25
	.word	7975
	.byte	26
	.word	8009
	.byte	28
	.word	8023
	.byte	25
	.word	7861
	.byte	26
	.word	7897
	.byte	27
	.word	7911
	.byte	0,27
	.word	8024
	.byte	25
	.word	7918
	.byte	26
	.word	7954
	.byte	27
	.word	7968
	.byte	0,27
	.word	8025
	.byte	0,0,4,0,0,24
	.word	7812
	.byte	26
	.word	7834
	.byte	4,0,24
	.word	7861
	.byte	26
	.word	7897
	.byte	4,0,24
	.word	7918
	.byte	26
	.word	7954
	.byte	4,0,24
	.word	7975
	.byte	26
	.word	8009
	.byte	3,25
	.word	7861
	.byte	26
	.word	7897
	.byte	27
	.word	7911
	.byte	0,4,25
	.word	7918
	.byte	26
	.word	7954
	.byte	27
	.word	7968
	.byte	0,4,0,0,24
	.word	8033
	.byte	26
	.word	8068
	.byte	4,0,24
	.word	8089
	.byte	26
	.word	8124
	.byte	4,0,24
	.word	8145
	.byte	26
	.word	8178
	.byte	3,25
	.word	8033
	.byte	26
	.word	8068
	.byte	27
	.word	8082
	.byte	0,4,25
	.word	8089
	.byte	26
	.word	8124
	.byte	27
	.word	8138
	.byte	0,4,0,0,24
	.word	8207
	.byte	26
	.word	8240
	.byte	26
	.word	8254
	.byte	4,0,24
	.word	8274
	.byte	26
	.word	8312
	.byte	4,0,24
	.word	8338
	.byte	26
	.word	8376
	.byte	26
	.word	8390
	.byte	4,0,24
	.word	8410
	.byte	26
	.word	8435
	.byte	4,0,24
	.word	8455
	.byte	26
	.word	8483
	.byte	4,0,24
	.word	8503
	.byte	26
	.word	8543
	.byte	4,0,24
	.word	8564
	.byte	26
	.word	8604
	.byte	4,0,24
	.word	8625
	.byte	26
	.word	8663
	.byte	3,25
	.word	8564
	.byte	26
	.word	8604
	.byte	27
	.word	8618
	.byte	0,4,25
	.word	8503
	.byte	26
	.word	8543
	.byte	27
	.word	8557
	.byte	0,4,0,0,24
	.word	8687
	.byte	26
	.word	8727
	.byte	4,0,24
	.word	8748
	.byte	26
	.word	8788
	.byte	4,0,24
	.word	8809
	.byte	26
	.word	8847
	.byte	3,25
	.word	8687
	.byte	26
	.word	8727
	.byte	27
	.word	8741
	.byte	0,4,25
	.word	8748
	.byte	26
	.word	8788
	.byte	27
	.word	8802
	.byte	0,4,0,0,24
	.word	8871
	.byte	26
	.word	8912
	.byte	4,0,24
	.word	8933
	.byte	26
	.word	8974
	.byte	4,0,24
	.word	8995
	.byte	26
	.word	9034
	.byte	3,25
	.word	8871
	.byte	26
	.word	8912
	.byte	27
	.word	8926
	.byte	0,4,25
	.word	8933
	.byte	26
	.word	8974
	.byte	27
	.word	8988
	.byte	0,4,0,0,24
	.word	9058
	.byte	26
	.word	9099
	.byte	4,0,29,1,13
	.word	11491
	.byte	30
	.byte	'__codeptr',0,1,1,1
	.word	11493
	.byte	30
	.byte	'Ifx_UReg_8Bit',0,5,79,24
	.word	245
	.byte	30
	.byte	'Ifx_UReg_32Bit',0,5,81,24
	.word	222
	.byte	30
	.byte	'Ifx_SReg_32Bit',0,5,84,24
	.word	238
	.byte	30
	.byte	'Ifx_P_ACCEN0_Bits',0,2,104,3
	.word	6639
	.byte	30
	.byte	'Ifx_P_ACCEN1_Bits',0,2,110,3
	.word	6552
	.byte	30
	.byte	'Ifx_P_ESR_Bits',0,2,132,1,3
	.word	3120
	.byte	30
	.byte	'Ifx_P_ID_Bits',0,2,140,1,3
	.word	1171
	.byte	30
	.byte	'Ifx_P_IN_Bits',0,2,162,1,3
	.word	2167
	.byte	30
	.byte	'Ifx_P_IOCR0_Bits',0,2,175,1,3
	.word	1300
	.byte	30
	.byte	'Ifx_P_IOCR12_Bits',0,2,188,1,3
	.word	1947
	.byte	30
	.byte	'Ifx_P_IOCR4_Bits',0,2,201,1,3
	.word	1515
	.byte	30
	.byte	'Ifx_P_IOCR8_Bits',0,2,214,1,3
	.word	1730
	.byte	30
	.byte	'Ifx_P_LPCR_Bits',0,2,233,1,3
	.word	6214
	.byte	30
	.byte	'Ifx_P_OMCR_Bits',0,2,255,1,3
	.word	5866
	.byte	30
	.byte	'Ifx_P_OMCR0_Bits',0,2,138,2,3
	.word	4853
	.byte	30
	.byte	'Ifx_P_OMCR12_Bits',0,2,148,2,3
	.word	5377
	.byte	30
	.byte	'Ifx_P_OMCR4_Bits',0,2,159,2,3
	.word	5027
	.byte	30
	.byte	'Ifx_P_OMCR8_Bits',0,2,170,2,3
	.word	5201
	.byte	30
	.byte	'Ifx_P_OMR_Bits',0,2,207,2,3
	.word	600
	.byte	30
	.byte	'Ifx_P_OMSR_Bits',0,2,229,2,3
	.word	5533
	.byte	30
	.byte	'Ifx_P_OMSR0_Bits',0,2,239,2,3
	.word	4190
	.byte	30
	.byte	'Ifx_P_OMSR12_Bits',0,2,250,2,3
	.word	4678
	.byte	30
	.byte	'Ifx_P_OMSR4_Bits',0,2,133,3,3
	.word	4337
	.byte	30
	.byte	'Ifx_P_OMSR8_Bits',0,2,144,3,3
	.word	4506
	.byte	30
	.byte	'Ifx_P_OUT_Bits',0,2,166,3,3
	.word	284
	.byte	30
	.byte	'Ifx_P_PCSR_Bits',0,2,189,3,3
	.word	3826
	.byte	30
	.byte	'Ifx_P_PDISC_Bits',0,2,211,3,3
	.word	3460
	.byte	30
	.byte	'Ifx_P_PDR0_Bits',0,2,232,3,3
	.word	2491
	.byte	30
	.byte	'Ifx_P_PDR1_Bits',0,2,253,3,3
	.word	2795
	.byte	30
	.byte	'Ifx_P_ACCEN0',0,2,138,4,3
	.word	7166
	.byte	30
	.byte	'Ifx_P_ACCEN1',0,2,146,4,3
	.word	6599
	.byte	30
	.byte	'Ifx_P_ESR',0,2,154,4,3
	.word	3411
	.byte	30
	.byte	'Ifx_P_ID',0,2,162,4,3
	.word	1251
	.byte	30
	.byte	'Ifx_P_IN',0,2,170,4,3
	.word	2442
	.byte	30
	.byte	'Ifx_P_IOCR0',0,2,178,4,3
	.word	1475
	.byte	30
	.byte	'Ifx_P_IOCR12',0,2,186,4,3
	.word	2127
	.byte	30
	.byte	'Ifx_P_IOCR4',0,2,194,4,3
	.word	1690
	.byte	30
	.byte	'Ifx_P_IOCR8',0,2,202,4,3
	.word	1907
	.byte	30
	.byte	'Ifx_P_LPCR',0,2,210,4,3
	.word	6494
	.byte	30
	.byte	'Ifx_P_OMCR',0,2,218,4,3
	.word	6174
	.byte	30
	.byte	'Ifx_P_OMCR0',0,2,226,4,3
	.word	4987
	.byte	30
	.byte	'Ifx_P_OMCR12',0,2,234,4,3
	.word	5493
	.byte	30
	.byte	'Ifx_P_OMCR4',0,2,242,4,3
	.word	5161
	.byte	30
	.byte	'Ifx_P_OMCR8',0,2,250,4,3
	.word	5337
	.byte	30
	.byte	'Ifx_P_OMR',0,2,130,5,3
	.word	1131
	.byte	30
	.byte	'Ifx_P_OMSR',0,2,138,5,3
	.word	5826
	.byte	30
	.byte	'Ifx_P_OMSR0',0,2,146,5,3
	.word	4297
	.byte	30
	.byte	'Ifx_P_OMSR12',0,2,154,5,3
	.word	4813
	.byte	30
	.byte	'Ifx_P_OMSR4',0,2,162,5,3
	.word	4466
	.byte	30
	.byte	'Ifx_P_OMSR8',0,2,170,5,3
	.word	4638
	.byte	30
	.byte	'Ifx_P_OUT',0,2,178,5,3
	.word	560
	.byte	30
	.byte	'Ifx_P_PCSR',0,2,186,5,3
	.word	4150
	.byte	30
	.byte	'Ifx_P_PDISC',0,2,194,5,3
	.word	3786
	.byte	30
	.byte	'Ifx_P_PDR0',0,2,202,5,3
	.word	2755
	.byte	30
	.byte	'Ifx_P_PDR1',0,2,210,5,3
	.word	3071
	.byte	12
	.word	7206
	.byte	30
	.byte	'Ifx_P',0,2,130,6,3
	.word	12778
	.byte	30
	.byte	'uint8',0,6,106,29
	.word	245
	.byte	30
	.byte	'uint16',0,6,110,29
	.word	262
	.byte	30
	.byte	'uint32',0,6,114,29
	.word	7786
	.byte	30
	.byte	'unsigned_int',0,7,75,22
	.word	222
	.byte	30
	.byte	'Port_PinType',0,4,174,1,16
	.word	262
	.byte	30
	.byte	'Port_PinDirectionType',0,4,183,1,3
	.word	10322
	.byte	30
	.byte	'Port_PinModeType',0,4,188,1,15
	.word	245
	.byte	30
	.byte	'Port_n_ControlType',0,4,214,1,3
	.word	9346
	.byte	30
	.byte	'Port_n_PinType',0,4,239,1,3
	.word	9567
	.byte	30
	.byte	'Port_n_ConfigType',0,4,155,2,3
	.word	9824
	.byte	30
	.byte	'Port_n_LVDSConfigType',0,4,185,2,3
	.word	10040
	.byte	30
	.byte	'Port_n_PCSRConfigType',0,4,189,2,16
	.word	7786
	.byte	30
	.byte	'Port_ConfigType',0,4,212,2,3
	.word	10172
	.byte	10,82
	.word	262
	.byte	11,40,0
.L434:
	.byte	14
	.word	13108
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L59:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	1,0,0,4,11,0,0,0,5,36,0,3,8,11,15,62,15,0,0,6,19,1,3,8,58,15,59,15,57,15,11,15,0,0,7,13,0,3,8,11,15,73
	.byte	19,13,15,12,15,56,9,0,0,8,23,1,58,15,59,15,57,15,11,15,0,0,9,13,0,3,8,73,19,11,15,56,9,0,0,10,1,1,11,15
	.byte	73,19,0,0,11,33,0,47,15,0,0,12,53,0,73,19,0,0,13,15,0,73,19,0,0,14,38,0,73,19,0,0,15,46,1,3,8,32,13,58
	.byte	15,59,15,57,15,73,19,54,15,39,12,0,0,16,5,0,3,8,58,15,59,15,57,15,73,19,0,0,17,46,1,3,8,73,19,54,15,39
	.byte	12,63,12,60,12,0,0,18,5,0,3,8,73,19,0,0,19,59,0,3,8,0,0,20,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12
	.byte	60,12,0,0,21,19,1,58,15,59,15,57,15,11,15,0,0,22,4,1,58,15,59,15,57,15,11,15,0,0,23,40,0,3,8,28,13,0,0
	.byte	24,46,1,49,19,0,0,25,29,1,49,19,0,0,26,5,0,49,19,0,0,27,11,0,49,19,0,0,28,11,1,49,19,0,0,29,21,0,54,15
	.byte	0,0,30,22,0,3,8,58,15,59,15,57,15,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L60:
	.word	.L487-.L486
.L486:
	.half	3
	.word	.L489-.L488
.L488:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0,0
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'McalLib.h',0,2,0,0
	.byte	'Port.h',0,3,0,0
	.byte	'Ifx_TypesReg.h',0,1,0,0
	.byte	'Platform_Types.h',0,4,0,0
	.byte	'Mcal_Compiler.h',0,2,0,0,0
.L489:
.L487:
	.sdecl	'.debug_info',debug,cluster('Port_Init')
	.sect	'.debug_info'
.L61:
	.word	2532
	.half	3
	.word	.L62
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L64,.L63
	.byte	2
	.word	.L57
	.byte	3
	.byte	'Port_Init',0,1,163,5,6,1,1,1
	.word	.L50,.L85,.L49
	.byte	4
	.byte	'ConfigPtr',0,1,163,5,48
	.word	.L86,.L87
	.byte	5
	.word	.L50,.L85
	.byte	6
	.word	.L88,.L89,.L90
	.byte	7
	.word	.L91,.L89,.L90
	.byte	8
	.byte	'DataPtr',0,1,163,12,28
	.word	.L92,.L93
	.byte	8
	.byte	'ConfigDataPtr',0,1,164,12,28
	.word	.L94,.L95
	.byte	8
	.byte	'PortNumber',0,1,166,12,28
	.word	.L96,.L97
	.byte	8
	.byte	'PortLevel',0,1,168,12,28
	.word	.L96,.L98
	.byte	8
	.byte	'EmerStopConf',0,1,170,12,28
	.word	.L96,.L99
	.byte	8
	.byte	'ConfigIndex',0,1,173,12,28
	.word	.L96,.L100
	.byte	8
	.byte	'PortAddressPtr',0,1,174,12,28
	.word	.L101,.L102
	.byte	8
	.byte	'PCSRDataPtr',0,1,175,12,28
	.word	.L92,.L103
	.byte	8
	.byte	'PDISCDataPtr',0,1,176,12,28
	.word	.L92,.L104
	.byte	8
	.byte	'PCSRRegPtr',0,1,177,12,28
	.word	.L105,.L106
	.byte	8
	.byte	'PDISCRegPtr',0,1,178,12,28
	.word	.L105,.L107
	.byte	8
	.byte	'counter',0,1,180,12,29
	.word	.L96,.L108
	.byte	8
	.byte	'LVDSDataPtr',0,1,181,12,29
	.word	.L92,.L109
	.byte	8
	.byte	'LVDSRegPtr',0,1,182,12,29
	.word	.L105,.L110
	.byte	6
	.word	.L111,.L89,.L112
	.byte	7
	.word	.L113,.L89,.L112
	.byte	8
	.byte	'PortNumber',0,1,142,15,27
	.word	.L96,.L114
	.byte	8
	.byte	'ConfigIndex',0,1,145,15,27
	.word	.L96,.L115
	.byte	8
	.byte	'PortAddressPtr',0,1,146,15,21
	.word	.L101,.L116
	.byte	6
	.word	.L117,.L118,.L119
	.byte	9
	.word	.L120,.L121
	.byte	10
	.word	.L122,.L123
	.byte	8
	.byte	'RetVal',0,1,220,16,10
	.word	.L96,.L125
	.byte	6
	.word	.L126,.L127,.L128
	.byte	9
	.word	.L129,.L130
	.byte	10
	.word	.L131,.L132
	.byte	8
	.byte	'RetVal',0,1,184,16,10
	.word	.L96,.L135
	.byte	0,0,6
	.word	.L136,.L128,.L119
	.byte	9
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L140
	.byte	8
	.byte	'RetVal',0,1,148,16,10
	.word	.L96,.L141
	.byte	0,0,6
	.word	.L126,.L133,.L134
	.byte	9
	.word	.L129,.L130
	.byte	0,6
	.word	.L136,.L4,.L124
	.byte	9
	.word	.L137,.L138
	.byte	0,0,0,6
	.word	.L142,.L143,.L144
	.byte	9
	.word	.L145,.L146
	.byte	10
	.word	.L147,.L148
	.byte	8
	.byte	'RetVal',0,1,168,18,10
	.word	.L151,.L152
	.byte	0,0,6
	.word	.L117,.L3,.L124
	.byte	9
	.word	.L120,.L121
	.byte	0,6
	.word	.L153,.L124,.L154
	.byte	9
	.word	.L155,.L156
	.byte	10
	.word	.L157,.L158
	.byte	8
	.byte	'RetVal',0,1,241,15,10
	.word	.L101,.L160
	.byte	0,0,6
	.word	.L142,.L149,.L150
	.byte	9
	.word	.L145,.L146
	.byte	0,6
	.word	.L153,.L150,.L159
	.byte	9
	.word	.L155,.L156
	.byte	0,0,0,6
	.word	.L117,.L161,.L162
	.byte	9
	.word	.L120,.L121
	.byte	10
	.word	.L122,.L163
	.byte	8
	.byte	'RetVal',0,1,220,16,10
	.word	.L96,.L165
	.byte	6
	.word	.L136,.L161,.L162
	.byte	9
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L166
	.byte	8
	.byte	'RetVal',0,1,148,16,10
	.word	.L96,.L167
	.byte	0,0,6
	.word	.L126,.L184,.L185
	.byte	9
	.word	.L129,.L130
	.byte	7
	.word	.L131,.L184,.L185
	.byte	8
	.byte	'RetVal',0,1,184,16,10
	.word	.L96,.L186
	.byte	0,0,6
	.word	.L136,.L10,.L164
	.byte	9
	.word	.L137,.L138
	.byte	0,0,0,6
	.word	.L168,.L162,.L169
	.byte	9
	.word	.L170,.L171
	.byte	10
	.word	.L172,.L173
	.byte	8
	.byte	'RetVal',0,1,213,17,10
	.word	.L96,.L176
	.byte	6
	.word	.L177,.L178,.L169
	.byte	9
	.word	.L179,.L180
	.byte	10
	.word	.L181,.L182
	.byte	8
	.byte	'RetVal',0,1,177,17,10
	.word	.L96,.L183
	.byte	0,0,6
	.word	.L204,.L205,.L206
	.byte	9
	.word	.L207,.L208
	.byte	7
	.word	.L209,.L205,.L206
	.byte	8
	.byte	'RetVal',0,1,141,17,10
	.word	.L96,.L210
	.byte	0,0,6
	.word	.L177,.L13,.L175
	.byte	9
	.word	.L179,.L180
	.byte	0,0,0,6
	.word	.L117,.L9,.L164
	.byte	9
	.word	.L120,.L121
	.byte	0,6
	.word	.L153,.L187,.L174
	.byte	9
	.word	.L155,.L156
	.byte	10
	.word	.L157,.L188
	.byte	8
	.byte	'RetVal',0,1,241,15,10
	.word	.L101,.L203
	.byte	0,0,6
	.word	.L168,.L174,.L175
	.byte	9
	.word	.L170,.L171
	.byte	0,6
	.word	.L153,.L189,.L15
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L153,.L190,.L191
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L153,.L192,.L193
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L211,.L193,.L212
	.byte	9
	.word	.L213,.L214
	.byte	9
	.word	.L215,.L216
	.byte	7
	.word	.L217,.L193,.L212
	.byte	8
	.byte	'RetVal',0,1,205,18,10
	.word	.L151,.L218
	.byte	0,0,6
	.word	.L153,.L194,.L16
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L211,.L219,.L220
	.byte	9
	.word	.L213,.L214
	.byte	9
	.word	.L215,.L216
	.byte	7
	.word	.L217,.L219,.L220
	.byte	8
	.byte	'RetVal',0,1,205,18,10
	.word	.L151,.L221
	.byte	0,0,6
	.word	.L153,.L195,.L17
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L211,.L222,.L223
	.byte	9
	.word	.L213,.L214
	.byte	9
	.word	.L215,.L216
	.byte	7
	.word	.L217,.L222,.L223
	.byte	8
	.byte	'RetVal',0,1,205,18,10
	.word	.L151,.L224
	.byte	0,0,6
	.word	.L153,.L196,.L18
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L225,.L18,.L197
	.byte	9
	.word	.L226,.L227
	.byte	7
	.word	.L228,.L18,.L197
	.byte	8
	.byte	'RetVal',0,1,226,21,10
	.word	.L96,.L229
	.byte	6
	.word	.L230,.L231,.L232
	.byte	9
	.word	.L233,.L234
	.byte	7
	.word	.L235,.L231,.L232
	.byte	8
	.byte	'RetVal',0,1,192,21,10
	.word	.L96,.L236
	.byte	0,0,6
	.word	.L237,.L19,.L197
	.byte	9
	.word	.L238,.L239
	.byte	7
	.word	.L240,.L19,.L197
	.byte	8
	.byte	'RetVal',0,1,159,21,10
	.word	.L96,.L241
	.byte	0,0,0,0,6
	.word	.L153,.L197,.L198
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L242,.L243,.L244
	.byte	9
	.word	.L245,.L246
	.byte	7
	.word	.L247,.L243,.L244
	.byte	8
	.byte	'RetVal',0,1,129,23,10
	.word	.L96,.L248
	.byte	0,0,6
	.word	.L249,.L21,.L199
	.byte	9
	.word	.L250,.L251
	.byte	7
	.word	.L252,.L21,.L199
	.byte	8
	.byte	'RetVal',0,1,209,22,10
	.word	.L96,.L253
	.byte	6
	.word	.L254,.L255,.L256
	.byte	9
	.word	.L257,.L258
	.byte	7
	.word	.L259,.L255,.L256
	.byte	8
	.byte	'RetVal',0,1,175,22,10
	.word	.L96,.L260
	.byte	0,0,6
	.word	.L261,.L25,.L199
	.byte	9
	.word	.L262,.L263
	.byte	7
	.word	.L264,.L25,.L199
	.byte	8
	.byte	'RetVal',0,1,142,22,10
	.word	.L96,.L265
	.byte	0,0,0,0,6
	.word	.L153,.L199,.L200
	.byte	9
	.word	.L155,.L156
	.byte	0,6
	.word	.L266,.L27,.L201
	.byte	9
	.word	.L267,.L268
	.byte	7
	.word	.L269,.L27,.L201
	.byte	8
	.byte	'RetVal',0,1,206,23,10
	.word	.L96,.L270
	.byte	6
	.word	.L271,.L272,.L273
	.byte	9
	.word	.L274,.L275
	.byte	7
	.word	.L276,.L272,.L273
	.byte	8
	.byte	'RetVal',0,1,157,24,10
	.word	.L96,.L277
	.byte	0,0,6
	.word	.L278,.L28,.L201
	.byte	9
	.word	.L279,.L280
	.byte	7
	.word	.L281,.L28,.L201
	.byte	8
	.byte	'RetVal',0,1,252,23,10
	.word	.L96,.L282
	.byte	0,0,0,0,6
	.word	.L153,.L201,.L202
	.byte	9
	.word	.L155,.L156
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_Init')
	.sect	'.debug_abbrev'
.L62:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_Init')
	.sect	'.debug_line'
.L63:
	.word	.L491-.L490
.L490:
	.half	3
	.word	.L493-.L492
.L492:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0,0,0,0,0
.L493:
	.byte	5,6,7,0,5,2
	.word	.L50
	.byte	3,162,5,1,5,5,9
	.half	.L436-.L50
	.byte	3,38,1,5,21,9
	.half	.L494-.L436
	.byte	1,5,15,9
	.half	.L89-.L494
	.byte	3,206,9,1,5,19,9
	.half	.L437-.L89
	.byte	3,5,1,5,21,9
	.half	.L118-.L437
	.byte	3,204,1,1,5,15,9
	.half	.L127-.L118
	.byte	3,82,1,9
	.half	.L128-.L127
	.byte	3,92,1,9
	.half	.L495-.L128
	.byte	3,1,1,5,7,9
	.half	.L119-.L495
	.byte	3,157,127,1,5,22,9
	.half	.L143-.L119
	.byte	3,246,2,1,5,70,9
	.half	.L144-.L143
	.byte	3,242,124,1,5,13,9
	.half	.L3-.L144
	.byte	3,204,1,1,5,53,7,9
	.half	.L133-.L3
	.byte	3,82,1,5,44,9
	.half	.L496-.L133
	.byte	1,5,80,9
	.half	.L497-.L496
	.byte	1,5,79,9
	.half	.L134-.L497
	.byte	3,46,1,5,44,9
	.half	.L4-.L134
	.byte	3,174,127,1,5,55,9
	.half	.L439-.L4
	.byte	1,5,5,9
	.half	.L5-.L439
	.byte	3,141,127,1,5,16,7,9
	.half	.L124-.L5
	.byte	3,209,0,1,5,29,9
	.half	.L498-.L124
	.byte	1,5,27,9
	.half	.L440-.L498
	.byte	1,5,7,9
	.half	.L441-.L440
	.byte	3,64,1,5,30,9
	.half	.L149-.L441
	.byte	3,247,2,1,5,49,9
	.half	.L499-.L149
	.byte	1,5,21,9
	.half	.L442-.L499
	.byte	1,5,7,9
	.half	.L500-.L442
	.byte	3,147,125,1,5,9,7,9
	.half	.L150-.L500
	.byte	3,14,1,5,18,9
	.half	.L7-.L150
	.byte	3,4,1,9
	.half	.L6-.L7
	.byte	3,77,1,5,47,9
	.half	.L2-.L6
	.byte	3,127,1,5,70,9
	.half	.L501-.L2
	.byte	1,5,15,7,9
	.half	.L112-.L501
	.byte	3,162,125,1,5,18,9
	.half	.L438-.L112
	.byte	3,17,1,5,33,9
	.half	.L502-.L438
	.byte	1,9
	.half	.L444-.L502
	.byte	3,17,1,5,62,9
	.half	.L446-.L444
	.byte	3,14,1,5,18,9
	.half	.L447-.L446
	.byte	3,5,1,5,15,9
	.half	.L161-.L447
	.byte	3,163,3,1,9
	.half	.L503-.L161
	.byte	3,1,1,5,22,9
	.half	.L162-.L503
	.byte	3,202,1,1,5,15,9
	.half	.L178-.L162
	.byte	3,82,1,5,48,9
	.half	.L169-.L178
	.byte	3,149,124,1,5,69,9
	.half	.L504-.L169
	.byte	3,171,127,1,5,21,9
	.half	.L9-.L504
	.byte	3,245,3,1,5,13,9
	.half	.L505-.L9
	.byte	1,5,53,7,9
	.half	.L184-.L505
	.byte	3,82,1,5,15,9
	.half	.L506-.L184
	.byte	1,5,44,9
	.half	.L507-.L506
	.byte	1,5,80,9
	.half	.L508-.L507
	.byte	1,5,79,9
	.half	.L185-.L508
	.byte	3,46,1,5,44,9
	.half	.L10-.L185
	.byte	3,174,127,1,5,55,9
	.half	.L448-.L10
	.byte	1,5,5,9
	.half	.L11-.L448
	.byte	3,229,124,1,5,59,7,9
	.half	.L164-.L11
	.byte	3,4,1,5,24,9
	.half	.L449-.L164
	.byte	1,5,39,9
	.half	.L509-.L449
	.byte	1,5,59,9
	.half	.L510-.L509
	.byte	1,5,16,9
	.half	.L187-.L510
	.byte	3,245,2,1,5,29,9
	.half	.L511-.L187
	.byte	1,5,27,9
	.half	.L512-.L511
	.byte	1,5,13,9
	.half	.L174-.L512
	.byte	3,237,1,1,5,3,7,9
	.half	.L205-.L174
	.byte	3,177,127,1,5,79,9
	.half	.L206-.L205
	.byte	3,207,0,1,5,53,9
	.half	.L13-.L206
	.byte	3,82,1,5,44,9
	.half	.L513-.L13
	.byte	1,5,80,9
	.half	.L514-.L513
	.byte	1,5,7,9
	.half	.L14-.L514
	.byte	3,240,123,1,5,22,7,9
	.half	.L175-.L14
	.byte	3,5,1,5,31,9
	.half	.L189-.L175
	.byte	3,1,1,5,23,9
	.half	.L15-.L189
	.byte	3,8,1,5,7,9
	.half	.L190-.L15
	.byte	3,10,1,5,34,9
	.half	.L450-.L190
	.byte	3,5,1,5,32,9
	.half	.L192-.L450
	.byte	1,5,49,9
	.half	.L193-.L192
	.byte	3,143,5,1,5,68,9
	.half	.L515-.L193
	.byte	1,5,38,9
	.half	.L451-.L515
	.byte	1,5,7,9
	.half	.L516-.L451
	.byte	3,249,122,1,5,36,7,9
	.half	.L212-.L516
	.byte	3,5,1,5,34,9
	.half	.L194-.L212
	.byte	1,5,14,9
	.half	.L16-.L194
	.byte	3,2,1,5,48,9
	.half	.L517-.L16
	.byte	3,4,1,5,49,9
	.half	.L219-.L517
	.byte	3,252,4,1,5,68,9
	.half	.L518-.L219
	.byte	1,5,38,9
	.half	.L452-.L518
	.byte	1,5,7,9
	.half	.L519-.L452
	.byte	3,132,123,1,5,36,7,9
	.half	.L220-.L519
	.byte	3,5,1,5,34,9
	.half	.L195-.L220
	.byte	1,5,14,9
	.half	.L17-.L195
	.byte	3,2,1,5,48,9
	.half	.L520-.L17
	.byte	3,4,1,5,49,9
	.half	.L222-.L520
	.byte	3,241,4,1,5,68,9
	.half	.L521-.L222
	.byte	1,5,38,9
	.half	.L453-.L521
	.byte	1,5,7,9
	.half	.L522-.L453
	.byte	3,143,123,1,5,36,7,9
	.half	.L223-.L522
	.byte	3,2,1,5,34,9
	.half	.L196-.L223
	.byte	1,5,21,9
	.half	.L18-.L196
	.byte	3,140,8,1,5,13,9
	.half	.L523-.L18
	.byte	1,5,3,7,9
	.half	.L231-.L523
	.byte	3,89,1,5,49,9
	.half	.L232-.L231
	.byte	3,40,1,5,15,9
	.half	.L19-.L232
	.byte	3,179,127,1,5,44,9
	.half	.L524-.L19
	.byte	1,5,15,9
	.half	.L525-.L524
	.byte	3,1,1,5,55,9
	.half	.L454-.L525
	.byte	3,127,1,5,7,9
	.half	.L20-.L454
	.byte	3,202,120,1,5,73,7,9
	.half	.L197-.L20
	.byte	3,17,1,5,21,9
	.half	.L198-.L197
	.byte	3,7,1,5,71,9
	.half	.L455-.L198
	.byte	1,5,43,9
	.half	.L23-.L455
	.byte	3,5,1,5,29,9
	.half	.L243-.L23
	.byte	3,251,8,1,5,11,9
	.half	.L456-.L243
	.byte	3,133,119,1,5,13,7,9
	.half	.L244-.L456
	.byte	3,11,1,5,21,9
	.half	.L24-.L244
	.byte	3,3,1,5,22,9
	.half	.L526-.L24
	.byte	3,1,1,5,80,9
	.half	.L527-.L526
	.byte	3,108,1,5,71,9
	.half	.L22-.L527
	.byte	1,5,21,7,9
	.half	.L21-.L22
	.byte	3,219,8,1,5,13,9
	.half	.L528-.L21
	.byte	1,5,14,7,9
	.half	.L255-.L528
	.byte	3,83,1,5,20,9
	.half	.L529-.L255
	.byte	3,1,1,5,43,9
	.half	.L530-.L529
	.byte	3,127,1,5,47,9
	.half	.L531-.L530
	.byte	3,1,1,5,49,9
	.half	.L256-.L531
	.byte	3,45,1,5,14,9
	.half	.L25-.L256
	.byte	3,177,127,1,5,43,9
	.half	.L532-.L25
	.byte	1,5,14,9
	.half	.L533-.L532
	.byte	3,1,1,5,54,9
	.half	.L458-.L533
	.byte	3,127,1,5,7,9
	.half	.L26-.L458
	.byte	3,148,120,1,5,72,7,9
	.half	.L199-.L26
	.byte	3,17,1,5,9,9
	.half	.L200-.L199
	.byte	3,14,1,5,21,9
	.half	.L27-.L200
	.byte	3,152,9,1,5,13,9
	.half	.L459-.L27
	.byte	1,5,14,7,9
	.half	.L272-.L459
	.byte	3,196,0,1,5,20,9
	.half	.L534-.L272
	.byte	3,1,1,5,43,9
	.half	.L535-.L534
	.byte	3,127,1,5,47,9
	.half	.L536-.L535
	.byte	3,1,1,5,50,9
	.half	.L273-.L536
	.byte	3,188,127,1,5,15,9
	.half	.L28-.L273
	.byte	3,34,1,5,44,9
	.half	.L537-.L28
	.byte	1,5,55,9
	.half	.L461-.L537
	.byte	1,5,7,9
	.half	.L29-.L461
	.byte	3,203,118,1,5,73,7,9
	.half	.L201-.L29
	.byte	3,17,1,5,9,9
	.half	.L202-.L201
	.byte	3,14,1,5,18,9
	.half	.L30-.L202
	.byte	3,4,1,5,81,9
	.half	.L12-.L30
	.byte	3,136,126,1,5,46,9
	.half	.L8-.L12
	.byte	1,5,69,9
	.half	.L538-.L8
	.byte	1,5,1,7,9
	.half	.L90-.L538
	.byte	3,230,120,1,7,9
	.half	.L65-.L90
	.byte	0,1,1
.L491:
	.sdecl	'.debug_ranges',debug,cluster('Port_Init')
	.sect	'.debug_ranges'
.L64:
	.word	-1,.L50,0,.L65-.L50,0,0
.L123:
	.word	-1,.L50,.L118-.L50,.L119-.L50,.L3-.L50,.L124-.L50,0,0
.L132:
	.word	-1,.L50,.L127-.L50,.L128-.L50,.L133-.L50,.L134-.L50,0,0
.L140:
	.word	-1,.L50,.L128-.L50,.L119-.L50,.L4-.L50,.L124-.L50,0,0
.L148:
	.word	-1,.L50,.L143-.L50,.L144-.L50,.L149-.L50,.L150-.L50,0,0
.L158:
	.word	-1,.L50,.L124-.L50,.L154-.L50,.L150-.L50,.L159-.L50,0,0
.L163:
	.word	-1,.L50,.L161-.L50,.L162-.L50,.L9-.L50,.L164-.L50,0,0
.L166:
	.word	-1,.L50,.L161-.L50,.L162-.L50,.L10-.L50,.L164-.L50,0,0
.L173:
	.word	-1,.L50,.L162-.L50,.L169-.L50,.L174-.L50,.L175-.L50,0,0
.L182:
	.word	-1,.L50,.L178-.L50,.L169-.L50,.L13-.L50,.L175-.L50,0,0
.L188:
	.word	-1,.L50,.L187-.L50,.L174-.L50,.L189-.L50,.L15-.L50,.L190-.L50,.L191-.L50,.L192-.L50,.L193-.L50,.L194-.L50
	.word	.L16-.L50,.L195-.L50,.L17-.L50,.L196-.L50,.L18-.L50,.L197-.L50,.L198-.L50,.L199-.L50,.L200-.L50,.L201-.L50
	.word	.L202-.L50,0,0
	.sdecl	'.debug_info',debug,cluster('Port_SetPinDirection')
	.sect	'.debug_info'
.L66:
	.word	843
	.half	3
	.word	.L67
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L69,.L68
	.byte	2
	.word	.L57
	.byte	3
	.byte	'Port_SetPinDirection',0,1,129,6,6,1,1,1
	.word	.L52,.L283,.L51
	.byte	4
	.byte	'Pin',0,1,130,6,22
	.word	.L284,.L285
	.byte	4
	.byte	'Direction',0,1,131,6,31
	.word	.L286,.L287
	.byte	5
	.word	.L52,.L283
	.byte	6
	.byte	'PortNumber',0,1,135,6,24
	.word	.L96,.L288
	.byte	6
	.byte	'PinNumber',0,1,136,6,24
	.word	.L96,.L289
	.byte	6
	.byte	'PopcntTempVal',0,1,137,6,24
	.word	.L96,.L290
	.byte	6
	.byte	'ConfigIndex',0,1,142,6,24
	.word	.L96,.L291
	.byte	6
	.byte	'IocrDataPtr',0,1,143,6,24
	.word	.L292,.L293
	.byte	6
	.byte	'IocrRegPtr',0,1,144,6,25
	.word	.L294,.L295
	.byte	6
	.byte	'DataPtr',0,1,145,6,24
	.word	.L92,.L296
	.byte	6
	.byte	'PortAddressPtr',0,1,146,6,24
	.word	.L101,.L297
	.byte	7
	.word	.L298,.L299,.L300
	.byte	8
	.word	.L301,.L302
	.byte	9
	.word	.L303,.L304
	.byte	6
	.byte	'RetVal',0,1,236,19,10
	.word	.L96,.L311
	.byte	0,0,7
	.word	.L312,.L300,.L313
	.byte	8
	.word	.L314,.L315
	.byte	9
	.word	.L316,.L317
	.byte	6
	.byte	'RetVal',0,1,142,20,10
	.word	.L96,.L329
	.byte	0,0,7
	.word	.L298,.L305,.L306
	.byte	8
	.word	.L301,.L302
	.byte	0,7
	.word	.L298,.L307,.L308
	.byte	8
	.word	.L301,.L302
	.byte	0,7
	.word	.L298,.L309,.L310
	.byte	8
	.word	.L301,.L302
	.byte	0,7
	.word	.L312,.L318,.L319
	.byte	8
	.word	.L314,.L315
	.byte	0,7
	.word	.L153,.L330,.L320
	.byte	8
	.word	.L155,.L331
	.byte	9
	.word	.L157,.L332
	.byte	6
	.byte	'RetVal',0,1,241,15,10
	.word	.L101,.L334
	.byte	0,0,7
	.word	.L312,.L320,.L321
	.byte	8
	.word	.L314,.L315
	.byte	0,7
	.word	.L153,.L321,.L333
	.byte	8
	.word	.L155,.L331
	.byte	0,7
	.word	.L312,.L322,.L323
	.byte	8
	.word	.L314,.L315
	.byte	0,7
	.word	.L312,.L324,.L325
	.byte	8
	.word	.L314,.L315
	.byte	0,7
	.word	.L312,.L34,.L326
	.byte	8
	.word	.L314,.L315
	.byte	0,7
	.word	.L312,.L327,.L328
	.byte	8
	.word	.L314,.L315
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_SetPinDirection')
	.sect	'.debug_abbrev'
.L67:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Port_SetPinDirection')
	.sect	'.debug_line'
.L68:
	.word	.L540-.L539
.L539:
	.half	3
	.word	.L542-.L541
.L541:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0,0,0,0,0
.L542:
	.byte	5,6,7,0,5,2
	.word	.L52
	.byte	3,128,6,1,5,59,9
	.half	.L299-.L52
	.byte	3,236,13,1,5,27,9
	.half	.L300-.L299
	.byte	3,34,1,5,25,9
	.half	.L313-.L300
	.byte	3,196,114,1,5,9,9
	.half	.L305-.L313
	.byte	1,5,26,7,9
	.half	.L306-.L305
	.byte	3,2,1,5,69,9
	.half	.L307-.L306
	.byte	1,5,48,9
	.half	.L308-.L307
	.byte	1,5,24,9
	.half	.L462-.L308
	.byte	3,1,1,5,46,9
	.half	.L463-.L462
	.byte	1,5,82,9
	.half	.L464-.L463
	.byte	3,127,1,5,24,9
	.half	.L31-.L464
	.byte	3,5,1,5,26,9
	.half	.L465-.L31
	.byte	3,1,1,5,82,9
	.half	.L309-.L465
	.byte	1,5,56,9
	.half	.L310-.L309
	.byte	1,5,25,9
	.half	.L466-.L310
	.byte	3,1,1,5,47,9
	.half	.L543-.L466
	.byte	1,5,22,9
	.half	.L467-.L543
	.byte	1,5,55,9
	.half	.L32-.L467
	.byte	3,21,1,5,20,9
	.half	.L468-.L32
	.byte	1,5,35,9
	.half	.L544-.L468
	.byte	1,5,55,9
	.half	.L545-.L544
	.byte	1,5,16,9
	.half	.L469-.L545
	.byte	3,13,1,5,51,9
	.half	.L546-.L469
	.byte	1,5,65,9
	.half	.L318-.L546
	.byte	1,5,48,9
	.half	.L319-.L318
	.byte	1,5,9,9
	.half	.L547-.L319
	.byte	1,5,16,7,9
	.half	.L330-.L547
	.byte	3,246,8,1,5,29,9
	.half	.L548-.L330
	.byte	1,5,27,9
	.half	.L549-.L548
	.byte	1,5,12,9
	.half	.L320-.L549
	.byte	3,183,119,1,5,74,9
	.half	.L321-.L320
	.byte	3,127,1,5,29,9
	.half	.L322-.L321
	.byte	3,6,1,5,15,9
	.half	.L323-.L322
	.byte	1,5,42,9
	.half	.L550-.L323
	.byte	1,5,11,9
	.half	.L551-.L550
	.byte	1,5,13,7,9
	.half	.L324-.L551
	.byte	3,3,1,5,1,9
	.half	.L33-.L324
	.byte	3,22,1,5,13,7,9
	.half	.L34-.L33
	.byte	3,113,1,5,1,9
	.half	.L552-.L34
	.byte	3,15,1,7,9
	.half	.L70-.L552
	.byte	0,1,1
.L540:
	.sdecl	'.debug_ranges',debug,cluster('Port_SetPinDirection')
	.sect	'.debug_ranges'
.L69:
	.word	-1,.L52,0,.L70-.L52,0,0
.L304:
	.word	-1,.L52,.L299-.L52,.L300-.L52,.L305-.L52,.L306-.L52,.L307-.L52,.L308-.L52,.L309-.L52,.L310-.L52,0,0
.L317:
	.word	-1,.L52,.L300-.L52,.L313-.L52,.L318-.L52,.L319-.L52,.L320-.L52,.L321-.L52,.L322-.L52,.L323-.L52,.L324-.L52
	.word	.L325-.L52,.L34-.L52,.L326-.L52,.L327-.L52,.L328-.L52,0,0
.L332:
	.word	-1,.L52,.L330-.L52,.L320-.L52,.L321-.L52,.L333-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_info'
.L71:
	.word	816
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L57
	.byte	3
	.byte	'Port_RefreshPortDirection',0,1,226,7,6,1,1,1
	.word	.L54,.L335,.L53
	.byte	4
	.word	.L54,.L335
	.byte	5
	.byte	'LoopCtr',0,1,228,7,25
	.word	.L96,.L336
	.byte	5
	.byte	'PortNumber',0,1,230,7,25
	.word	.L96,.L337
	.byte	5
	.byte	'ConfigIndex',0,1,231,7,25
	.word	.L96,.L338
	.byte	5
	.byte	'DirectionData',0,1,234,7,25
	.word	.L96,.L339
	.byte	5
	.byte	'PinPos',0,1,235,7,25
	.word	.L96,.L340
	.byte	5
	.byte	'DataPtr',0,1,237,7,26
	.word	.L92,.L341
	.byte	5
	.byte	'IocrDataPtr',0,1,238,7,26
	.word	.L292,.L342
	.byte	5
	.byte	'IocrRegPtr',0,1,239,7,26
	.word	.L343,.L344
	.byte	5
	.byte	'PortAddressPtr',0,1,240,7,10
	.word	.L101,.L345
	.byte	6
	.word	.L117,.L346,.L347
	.byte	7
	.word	.L120,.L348
	.byte	8
	.word	.L122,.L349
	.byte	5
	.byte	'RetVal',0,1,220,16,10
	.word	.L96,.L351
	.byte	6
	.word	.L126,.L352,.L353
	.byte	7
	.word	.L129,.L354
	.byte	8
	.word	.L131,.L355
	.byte	5
	.byte	'RetVal',0,1,184,16,10
	.word	.L96,.L358
	.byte	0,0,6
	.word	.L136,.L353,.L347
	.byte	7
	.word	.L137,.L359
	.byte	8
	.word	.L139,.L360
	.byte	5
	.byte	'RetVal',0,1,148,16,10
	.word	.L96,.L361
	.byte	0,0,6
	.word	.L126,.L356,.L357
	.byte	7
	.word	.L129,.L354
	.byte	0,6
	.word	.L136,.L37,.L350
	.byte	7
	.word	.L137,.L359
	.byte	0,0,0,6
	.word	.L362,.L363,.L364
	.byte	7
	.word	.L365,.L366
	.byte	7
	.word	.L367,.L368
	.byte	8
	.word	.L369,.L370
	.byte	5
	.byte	'RetVal',0,1,132,18,10
	.word	.L151,.L372
	.byte	0,0,6
	.word	.L117,.L36,.L350
	.byte	7
	.word	.L120,.L348
	.byte	0,6
	.word	.L153,.L373,.L374
	.byte	7
	.word	.L155,.L375
	.byte	9
	.word	.L157,.L373,.L374
	.byte	5
	.byte	'RetVal',0,1,241,15,10
	.word	.L101,.L376
	.byte	0,0,6
	.word	.L362,.L40,.L371
	.byte	7
	.word	.L365,.L366
	.byte	7
	.word	.L367,.L368
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,85,6,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_line'
.L73:
	.word	.L554-.L553
.L553:
	.half	3
	.word	.L556-.L555
.L555:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0,0,0,0,0
.L556:
	.byte	5,16,7,0,5,2
	.word	.L54
	.byte	3,131,8,1,5,17,9
	.half	.L470-.L54
	.byte	3,1,1,5,21,9
	.half	.L346-.L470
	.byte	3,227,8,1,5,15,9
	.half	.L352-.L346
	.byte	3,82,1,9
	.half	.L353-.L352
	.byte	3,92,1,9
	.half	.L557-.L353
	.byte	3,1,1,5,21,9
	.half	.L347-.L557
	.byte	3,146,120,1,5,22,9
	.half	.L363-.L347
	.byte	3,220,9,1,5,29,9
	.half	.L364-.L363
	.byte	3,166,119,1,5,28,9
	.half	.L558-.L364
	.byte	3,4,1,5,13,9
	.half	.L36-.L558
	.byte	3,185,7,1,5,53,7,9
	.half	.L356-.L36
	.byte	3,82,1,5,44,9
	.half	.L559-.L356
	.byte	1,5,80,9
	.half	.L560-.L559
	.byte	1,5,79,9
	.half	.L357-.L560
	.byte	3,46,1,5,44,9
	.half	.L37-.L357
	.byte	3,174,127,1,5,55,9
	.half	.L471-.L37
	.byte	1,5,7,9
	.half	.L38-.L471
	.byte	3,252,119,1,5,56,7,9
	.half	.L350-.L38
	.byte	3,23,1,5,21,9
	.half	.L561-.L350
	.byte	1,5,36,9
	.half	.L562-.L561
	.byte	1,5,56,9
	.half	.L563-.L562
	.byte	1,5,25,9
	.half	.L472-.L563
	.byte	3,11,1,5,16,9
	.half	.L373-.L472
	.byte	3,192,7,1,5,29,9
	.half	.L564-.L373
	.byte	1,5,27,9
	.half	.L565-.L564
	.byte	1,5,73,9
	.half	.L473-.L565
	.byte	3,239,120,1,5,16,9
	.half	.L374-.L473
	.byte	3,21,1,5,17,9
	.half	.L474-.L374
	.byte	3,4,1,5,49,9
	.half	.L40-.L474
	.byte	3,137,9,1,5,30,9
	.half	.L566-.L40
	.byte	3,1,1,5,49,9
	.half	.L567-.L566
	.byte	1,5,59,9
	.half	.L475-.L567
	.byte	3,127,1,5,11,9
	.half	.L568-.L475
	.byte	3,253,118,1,5,31,7,9
	.half	.L371-.L568
	.byte	3,10,1,5,13,9
	.half	.L569-.L371
	.byte	1,5,30,7,9
	.half	.L570-.L569
	.byte	3,4,1,5,27,9
	.half	.L571-.L570
	.byte	1,5,21,9
	.half	.L41-.L571
	.byte	3,11,1,5,22,9
	.half	.L572-.L41
	.byte	3,2,1,5,27,9
	.half	.L573-.L572
	.byte	3,10,1,5,18,9
	.half	.L574-.L573
	.byte	3,3,1,5,58,9
	.half	.L575-.L574
	.byte	3,1,1,5,20,7,9
	.half	.L576-.L575
	.byte	3,1,1,5,17,9
	.half	.L39-.L576
	.byte	3,2,1,5,52,9
	.half	.L577-.L39
	.byte	3,1,1,5,1,7,9
	.half	.L578-.L577
	.byte	3,2,1,7,9
	.half	.L75-.L578
	.byte	0,1,1
.L554:
	.sdecl	'.debug_ranges',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L54,0,.L75-.L54,0,0
.L349:
	.word	-1,.L54,.L346-.L54,.L347-.L54,.L36-.L54,.L350-.L54,0,0
.L355:
	.word	-1,.L54,.L352-.L54,.L353-.L54,.L356-.L54,.L357-.L54,0,0
.L360:
	.word	-1,.L54,.L353-.L54,.L347-.L54,.L37-.L54,.L350-.L54,0,0
.L370:
	.word	-1,.L54,.L363-.L54,.L364-.L54,.L40-.L54,.L371-.L54,0,0
	.sdecl	'.debug_info',debug,cluster('Port_SetPinMode')
	.sect	'.debug_info'
.L76:
	.word	1051
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L79,.L78
	.byte	2
	.word	.L57
	.byte	3
	.byte	'Port_SetPinMode',0,1,214,9,6,1,1,1
	.word	.L56,.L377,.L55
	.byte	4
	.byte	'Pin',0,1,214,9,41
	.word	.L378,.L379
	.byte	4
	.byte	'Mode',0,1,214,9,69
	.word	.L380,.L381
	.byte	5
	.word	.L56,.L377
	.byte	6
	.byte	'PortNumber',0,1,217,9,20
	.word	.L96,.L382
	.byte	6
	.byte	'PinNumber',0,1,218,9,20
	.word	.L96,.L383
	.byte	6
	.byte	'ConfigIndex',0,1,229,9,20
	.word	.L96,.L384
	.byte	6
	.byte	'Index',0,1,230,9,20
	.word	.L96,.L385
	.byte	6
	.byte	'DataPtr',0,1,231,9,21
	.word	.L92,.L386
	.byte	6
	.byte	'IocrRegPtr',0,1,232,9,21
	.word	.L294,.L387
	.byte	6
	.byte	'ReadMode',0,1,233,9,20
	.word	.L388,.L389
	.byte	6
	.byte	'SetMode',0,1,234,9,20
	.word	.L388,.L390
	.byte	6
	.byte	'PortAddressPtr',0,1,235,9,20
	.word	.L101,.L391
	.byte	6
	.byte	'PinCharacteristic',0,1,238,9,9
	.word	.L388,.L392
	.byte	7
	.word	.L298,.L393,.L394
	.byte	8
	.word	.L301,.L395
	.byte	9
	.word	.L303,.L396
	.byte	6
	.byte	'RetVal',0,1,236,19,10
	.word	.L96,.L398
	.byte	0,0,7
	.word	.L312,.L394,.L399
	.byte	8
	.word	.L314,.L400
	.byte	9
	.word	.L316,.L401
	.byte	6
	.byte	'RetVal',0,1,142,20,10
	.word	.L96,.L408
	.byte	0,0,7
	.word	.L117,.L409,.L410
	.byte	8
	.word	.L120,.L411
	.byte	9
	.word	.L122,.L412
	.byte	6
	.byte	'RetVal',0,1,220,16,10
	.word	.L96,.L414
	.byte	7
	.word	.L126,.L415,.L416
	.byte	8
	.word	.L129,.L417
	.byte	9
	.word	.L131,.L418
	.byte	6
	.byte	'RetVal',0,1,184,16,10
	.word	.L96,.L421
	.byte	0,0,7
	.word	.L136,.L416,.L410
	.byte	8
	.word	.L137,.L422
	.byte	9
	.word	.L139,.L423
	.byte	6
	.byte	'RetVal',0,1,148,16,10
	.word	.L96,.L424
	.byte	0,0,7
	.word	.L126,.L419,.L420
	.byte	8
	.word	.L129,.L417
	.byte	0,7
	.word	.L136,.L45,.L413
	.byte	8
	.word	.L137,.L422
	.byte	0,0,0,7
	.word	.L117,.L44,.L413
	.byte	8
	.word	.L120,.L411
	.byte	0,7
	.word	.L298,.L43,.L397
	.byte	8
	.word	.L301,.L395
	.byte	0,7
	.word	.L153,.L425,.L402
	.byte	8
	.word	.L155,.L426
	.byte	9
	.word	.L157,.L427
	.byte	6
	.byte	'RetVal',0,1,241,15,10
	.word	.L101,.L429
	.byte	0,0,7
	.word	.L312,.L402,.L403
	.byte	8
	.word	.L314,.L400
	.byte	0,7
	.word	.L153,.L403,.L428
	.byte	8
	.word	.L155,.L426
	.byte	0,7
	.word	.L312,.L404,.L405
	.byte	8
	.word	.L314,.L400
	.byte	0,7
	.word	.L312,.L406,.L407
	.byte	8
	.word	.L314,.L400
	.byte	0,5
	.word	.L430,.L47
	.byte	6
	.byte	'PinAltMask',0,1,147,11,17
	.word	.L388,.L431
	.byte	6
	.byte	'IOCR_VALUE_TABLE',0,1,149,11,17
	.word	.L432,.L433
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_SetPinMode')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Port_SetPinMode')
	.sect	'.debug_line'
.L78:
	.word	.L580-.L579
.L579:
	.half	3
	.word	.L582-.L581
.L581:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0,0,0,0,0
.L582:
	.byte	5,6,7,0,5,2
	.word	.L56
	.byte	3,213,9,1,5,34,9
	.half	.L479-.L56
	.byte	3,24,1,5,59,9
	.half	.L393-.L479
	.byte	3,255,9,1,5,27,9
	.half	.L394-.L393
	.byte	3,34,1,5,19,9
	.half	.L399-.L394
	.byte	3,157,118,1,5,17,9
	.half	.L477-.L399
	.byte	3,4,1,5,21,9
	.half	.L409-.L477
	.byte	3,184,6,1,5,15,9
	.half	.L415-.L409
	.byte	3,82,1,9
	.half	.L416-.L415
	.byte	3,92,1,9
	.half	.L583-.L416
	.byte	3,1,1,5,41,9
	.half	.L410-.L583
	.byte	3,153,122,1,5,13,9
	.half	.L44-.L410
	.byte	3,184,6,1,5,53,7,9
	.half	.L419-.L44
	.byte	3,82,1,5,44,9
	.half	.L584-.L419
	.byte	1,5,80,9
	.half	.L585-.L584
	.byte	1,5,79,9
	.half	.L420-.L585
	.byte	3,46,1,5,44,9
	.half	.L45-.L420
	.byte	3,174,127,1,5,55,9
	.half	.L480-.L45
	.byte	1,5,41,9
	.half	.L46-.L480
	.byte	3,159,122,1,5,22,9
	.half	.L413-.L46
	.byte	3,2,1,5,48,9
	.half	.L586-.L413
	.byte	3,121,1,5,41,9
	.half	.L43-.L586
	.byte	1,5,54,7,9
	.half	.L397-.L43
	.byte	3,27,1,5,19,9
	.half	.L587-.L397
	.byte	1,5,34,9
	.half	.L588-.L587
	.byte	1,5,54,9
	.half	.L589-.L588
	.byte	1,5,16,9
	.half	.L425-.L589
	.byte	3,169,5,1,5,29,9
	.half	.L590-.L425
	.byte	1,5,27,9
	.half	.L591-.L590
	.byte	1,5,22,9
	.half	.L402-.L591
	.byte	3,240,122,1,5,70,9
	.half	.L403-.L402
	.byte	3,127,1,5,45,9
	.half	.L428-.L403
	.byte	3,1,1,5,14,9
	.half	.L482-.L428
	.byte	3,7,1,5,50,9
	.half	.L592-.L482
	.byte	1,5,13,9
	.half	.L404-.L592
	.byte	3,1,1,5,47,9
	.half	.L405-.L404
	.byte	3,127,1,5,7,9
	.half	.L593-.L405
	.byte	1,5,57,7,9
	.half	.L406-.L593
	.byte	3,38,1,5,54,9
	.half	.L407-.L406
	.byte	1,5,22,9
	.half	.L481-.L407
	.byte	1,5,36,9
	.half	.L430-.L481
	.byte	3,2,1,5,49,9
	.half	.L484-.L430
	.byte	3,2,1,5,48,9
	.half	.L594-.L484
	.byte	1,5,61,9
	.half	.L595-.L594
	.byte	1,5,83,9
	.half	.L596-.L595
	.byte	1,5,51,9
	.half	.L597-.L596
	.byte	1,5,11,9
	.half	.L598-.L597
	.byte	3,1,1,5,38,9
	.half	.L599-.L598
	.byte	1,5,24,9
	.half	.L485-.L599
	.byte	1,5,34,9
	.half	.L600-.L485
	.byte	3,2,1,5,81,9
	.half	.L601-.L600
	.byte	1,5,62,9
	.half	.L483-.L601
	.byte	1,5,11,9
	.half	.L602-.L483
	.byte	3,6,1,5,1,9
	.half	.L47-.L602
	.byte	3,11,1,7,9
	.half	.L80-.L47
	.byte	0,1,1
.L580:
	.sdecl	'.debug_ranges',debug,cluster('Port_SetPinMode')
	.sect	'.debug_ranges'
.L79:
	.word	-1,.L56,0,.L80-.L56,0,0
.L396:
	.word	-1,.L56,.L393-.L56,.L394-.L56,.L43-.L56,.L397-.L56,0,0
.L401:
	.word	-1,.L56,.L394-.L56,.L399-.L56,.L402-.L56,.L403-.L56,.L404-.L56,.L405-.L56,.L406-.L56,.L407-.L56,0,0
.L412:
	.word	-1,.L56,.L409-.L56,.L410-.L56,.L44-.L56,.L413-.L56,0,0
.L418:
	.word	-1,.L56,.L415-.L56,.L416-.L56,.L419-.L56,.L420-.L56,0,0
.L423:
	.word	-1,.L56,.L416-.L56,.L410-.L56,.L45-.L56,.L413-.L56,0,0
.L427:
	.word	-1,.L56,.L425-.L56,.L402-.L56,.L403-.L56,.L428-.L56,0,0
	.sdecl	'.debug_info',debug,cluster('Port_kAvailablePins')
	.sect	'.debug_info'
.L81:
	.word	192
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L57
	.byte	3
	.byte	'Port_kAvailablePins',0,1,231,2,21
	.word	.L434
	.byte	5,3
	.word	Port_kAvailablePins
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Port_kAvailablePins')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Port_kConfigPtr')
	.sect	'.debug_info'
.L83:
	.word	188
	.half	3
	.word	.L84
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Port\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L57
	.byte	3
	.byte	'Port_kConfigPtr',0,1,172,3,33
	.word	.L435
	.byte	5,3
	.word	Port_kConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Port_kConfigPtr')
	.sect	'.debug_abbrev'
.L84:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Port_Init')
	.sect	'.debug_loc'
.L95:
	.word	-1,.L50,.L187-.L50,.L198-.L50
	.half	1
	.byte	110
	.word	0,0
.L100:
	.word	-1,.L50,.L438-.L50,.L85-.L50
	.half	1
	.byte	88
	.word	0,0
.L115:
	.word	-1,.L50,.L437-.L50,.L438-.L50
	.half	1
	.byte	88
	.word	0,0
.L87:
	.word	-1,.L50,0,.L3-.L50
	.half	1
	.byte	100
	.word	0,0
.L93:
	.word	0,0
.L99:
	.word	-1,.L50,.L190-.L50,.L450-.L50
	.half	1
	.byte	84
	.word	0,0
.L109:
	.word	-1,.L50,.L444-.L50,.L85-.L50
	.half	1
	.byte	108
	.word	0,0
.L110:
	.word	-1,.L50,.L198-.L50,.L21-.L50
	.half	1
	.byte	110
	.word	.L457-.L50,.L24-.L50
	.half	1
	.byte	100
	.word	0,0
.L103:
	.word	-1,.L50,.L445-.L50,.L9-.L50
	.half	1
	.byte	98
	.word	.L446-.L50,.L85-.L50
	.half	2
	.byte	145,120
	.word	.L460-.L50,.L27-.L50
	.half	1
	.byte	98
	.word	0,0
.L106:
	.word	-1,.L50,.L200-.L50,.L27-.L50
	.half	1
	.byte	100
	.word	0,0
.L104:
	.word	-1,.L50,.L447-.L50,.L85-.L50
	.half	1
	.byte	109
	.word	0,0
.L107:
	.word	-1,.L50,.L202-.L50,.L30-.L50
	.half	1
	.byte	100
	.word	0,0
.L216:
	.word	0,0
.L138:
	.word	0,0
.L130:
	.word	0,0
.L121:
	.word	0,0
.L208:
	.word	0,0
.L180:
	.word	0,0
.L171:
	.word	0,0
.L146:
	.word	0,0
.L214:
	.word	0,0
.L239:
	.word	0,0
.L234:
	.word	0,0
.L227:
	.word	0,0
.L263:
	.word	0,0
.L258:
	.word	0,0
.L251:
	.word	0,0
.L268:
	.word	0,0
.L280:
	.word	0,0
.L275:
	.word	0,0
.L102:
	.word	0,0
.L116:
	.word	0,0
.L246:
	.word	0,0
.L98:
	.word	-1,.L50,.L189-.L50,.L15-.L50
	.half	1
	.byte	95
	.word	0,0
.L97:
	.word	-1,.L50,.L161-.L50,.L85-.L50
	.half	1
	.byte	89
	.word	0,0
.L114:
	.word	-1,.L50,.L118-.L50,.L161-.L50
	.half	1
	.byte	89
	.word	0,0
.L156:
	.word	0,0
.L49:
	.word	-1,.L50,0,.L436-.L50
	.half	2
	.byte	138,0
	.word	.L436-.L50,.L85-.L50
	.half	2
	.byte	138,8
	.word	.L85-.L50,.L85-.L50
	.half	2
	.byte	138,0
	.word	0,0
.L203:
	.word	-1,.L50,.L174-.L50,.L12-.L50
	.half	1
	.byte	111
	.word	0,0
.L160:
	.word	-1,.L50,.L441-.L50,.L6-.L50
	.half	1
	.byte	109
	.word	0,0
.L141:
	.word	-1,.L50,.L134-.L50,.L4-.L50
	.half	1
	.byte	95
	.word	.L439-.L50,.L440-.L50
	.half	1
	.byte	95
	.word	0,0
.L167:
	.word	-1,.L50,.L185-.L50,.L10-.L50
	.half	1
	.byte	95
	.word	.L448-.L50,.L449-.L50
	.half	1
	.byte	95
	.word	0,0
.L186:
	.word	0,0
.L135:
	.word	0,0
.L125:
	.word	0,0
.L165:
	.word	0,0
.L210:
	.word	0,0
.L183:
	.word	-1,.L50,.L206-.L50,.L13-.L50
	.half	1
	.byte	95
	.word	.L14-.L50,.L189-.L50
	.half	1
	.byte	95
	.word	0,0
.L176:
	.word	0,0
.L152:
	.word	-1,.L50,.L442-.L50,.L443-.L50
	.half	1
	.byte	95
	.word	0,0
.L221:
	.word	-1,.L50,.L452-.L50,.L195-.L50
	.half	1
	.byte	95
	.word	0,0
.L224:
	.word	-1,.L50,.L453-.L50,.L196-.L50
	.half	1
	.byte	95
	.word	0,0
.L218:
	.word	-1,.L50,.L451-.L50,.L194-.L50
	.half	1
	.byte	95
	.word	0,0
.L241:
	.word	-1,.L50,.L232-.L50,.L19-.L50
	.half	1
	.byte	95
	.word	.L454-.L50,.L455-.L50
	.half	1
	.byte	95
	.word	0,0
.L236:
	.word	0,0
.L229:
	.word	0,0
.L265:
	.word	-1,.L50,.L256-.L50,.L25-.L50
	.half	1
	.byte	95
	.word	.L458-.L50,.L459-.L50
	.half	1
	.byte	95
	.word	0,0
.L260:
	.word	0,0
.L253:
	.word	0,0
.L248:
	.word	-1,.L50,.L456-.L50,.L24-.L50
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L270:
	.word	0,0
.L282:
	.word	-1,.L50,.L273-.L50,.L28-.L50
	.half	1
	.byte	95
	.word	.L461-.L50,.L12-.L50
	.half	1
	.byte	95
	.word	0,0
.L277:
	.word	0,0
.L108:
	.word	-1,.L50,.L455-.L50,.L21-.L50
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_loc'
.L338:
	.word	-1,.L54,.L346-.L54,.L335-.L54
	.half	1
	.byte	82
	.word	0,0
.L341:
	.word	-1,.L54,.L472-.L54,.L39-.L54
	.half	1
	.byte	111
	.word	0,0
.L339:
	.word	-1,.L54,.L373-.L54,.L39-.L54
	.half	1
	.byte	92
	.word	0,0
.L342:
	.word	0,0
.L344:
	.word	-1,.L54,.L374-.L54,.L39-.L54
	.half	1
	.byte	100
	.word	0,0
.L336:
	.word	-1,.L54,.L40-.L54,.L39-.L54
	.half	1
	.byte	93
	.word	0,0
.L368:
	.word	0,0
.L340:
	.word	-1,.L54,.L474-.L54,.L39-.L54
	.half	1
	.byte	91
	.word	0,0
.L359:
	.word	0,0
.L354:
	.word	0,0
.L348:
	.word	0,0
.L366:
	.word	0,0
.L345:
	.word	0,0
.L337:
	.word	-1,.L54,.L470-.L54,.L335-.L54
	.half	1
	.byte	81
	.word	0,0
.L375:
	.word	0,0
.L53:
	.word	-1,.L54,0,.L335-.L54
	.half	2
	.byte	138,0
	.word	0,0
.L376:
	.word	-1,.L54,.L473-.L54,.L374-.L54
	.half	1
	.byte	100
	.word	0,0
.L361:
	.word	-1,.L54,.L357-.L54,.L37-.L54
	.half	5
	.byte	144,32,157,32,0
	.word	.L471-.L54,.L40-.L54
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L358:
	.word	0,0
.L351:
	.word	0,0
.L372:
	.word	-1,.L54,.L475-.L54,.L39-.L54
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Port_SetPinDirection')
	.sect	'.debug_loc'
.L291:
	.word	-1,.L52,.L464-.L52,.L31-.L52
	.half	1
	.byte	95
	.word	.L465-.L52,.L32-.L52
	.half	5
	.byte	144,32,157,32,0
	.word	.L467-.L52,.L468-.L52
	.half	1
	.byte	95
	.word	0,0
.L296:
	.word	-1,.L52,.L469-.L52,.L326-.L52
	.half	1
	.byte	111
	.word	0,0
.L287:
	.word	-1,.L52,0,.L283-.L52
	.half	1
	.byte	85
	.word	0,0
.L293:
	.word	0,0
.L295:
	.word	-1,.L52,.L322-.L52,.L33-.L52
	.half	1
	.byte	98
	.word	.L34-.L52,.L283-.L52
	.half	1
	.byte	98
	.word	0,0
.L285:
	.word	-1,.L52,0,.L310-.L52
	.half	1
	.byte	84
	.word	.L299-.L52,.L305-.L52
	.half	1
	.byte	95
	.word	0,0
.L302:
	.word	0,0
.L315:
	.word	0,0
.L289:
	.word	0,0
.L290:
	.word	-1,.L52,.L462-.L52,.L463-.L52
	.half	5
	.byte	144,32,157,32,0
	.word	.L466-.L52,.L32-.L52
	.half	1
	.byte	81
	.word	0,0
.L297:
	.word	0,0
.L288:
	.word	0,0
.L331:
	.word	0,0
.L51:
	.word	-1,.L52,0,.L283-.L52
	.half	2
	.byte	138,0
	.word	0,0
.L334:
	.word	-1,.L52,.L320-.L52,.L333-.L52
	.half	1
	.byte	98
	.word	0,0
.L311:
	.word	-1,.L52,.L300-.L52,.L283-.L52
	.half	1
	.byte	86
	.word	0,0
.L329:
	.word	-1,.L52,.L313-.L52,.L283-.L52
	.half	1
	.byte	87
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Port_SetPinMode')
	.sect	'.debug_loc'
.L384:
	.word	-1,.L56,.L477-.L56,.L48-.L56
	.half	1
	.byte	84
	.word	0,0
.L386:
	.word	-1,.L56,.L425-.L56,.L481-.L56
	.half	1
	.byte	111
	.word	0,0
.L433:
	.word	-1,.L56,0,.L377-.L56
	.half	2
	.byte	145,120
	.word	0,0
.L385:
	.word	-1,.L56,.L409-.L56,.L377-.L56
	.half	1
	.byte	85
	.word	0,0
.L387:
	.word	-1,.L56,.L482-.L56,.L377-.L56
	.half	1
	.byte	98
	.word	0,0
.L381:
	.word	-1,.L56,0,.L409-.L56
	.half	1
	.byte	85
	.word	.L479-.L56,.L377-.L56
	.half	1
	.byte	88
	.word	0,0
.L379:
	.word	-1,.L56,0,.L477-.L56
	.half	1
	.byte	84
	.word	.L478-.L56,.L415-.L56
	.half	1
	.byte	95
	.word	0,0
.L395:
	.word	0,0
.L400:
	.word	0,0
.L431:
	.word	-1,.L56,.L484-.L56,.L485-.L56
	.half	1
	.byte	95
	.word	0,0
.L392:
	.word	-1,.L56,.L393-.L56,.L377-.L56
	.half	1
	.byte	89
	.word	0,0
.L383:
	.word	0,0
.L422:
	.word	0,0
.L417:
	.word	0,0
.L411:
	.word	0,0
.L391:
	.word	0,0
.L382:
	.word	0,0
.L426:
	.word	0,0
.L55:
	.word	-1,.L56,0,.L476-.L56
	.half	2
	.byte	138,0
	.word	.L476-.L56,.L377-.L56
	.half	2
	.byte	138,8
	.word	.L377-.L56,.L377-.L56
	.half	2
	.byte	138,0
	.word	0,0
.L389:
	.word	-1,.L56,.L430-.L56,.L483-.L56
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L429:
	.word	-1,.L56,.L402-.L56,.L428-.L56
	.half	1
	.byte	98
	.word	0,0
.L424:
	.word	-1,.L56,.L420-.L56,.L45-.L56
	.half	5
	.byte	144,32,157,32,0
	.word	.L480-.L56,.L413-.L56
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L421:
	.word	0,0
.L414:
	.word	0,0
.L398:
	.word	-1,.L56,.L394-.L56,.L377-.L56
	.half	1
	.byte	90
	.word	0,0
.L408:
	.word	-1,.L56,.L399-.L56,.L377-.L56
	.half	1
	.byte	81
	.word	0,0
.L390:
	.word	-1,.L56,.L483-.L56,.L47-.L56
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L603:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Port_Init')
	.sect	'.debug_frame'
	.word	36
	.word	.L603,.L50,.L85-.L50
	.byte	4
	.word	(.L436-.L50)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L85-.L436)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Port_SetPinDirection')
	.sect	'.debug_frame'
	.word	20
	.word	.L603,.L52,.L283-.L52
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_frame'
	.word	20
	.word	.L603,.L54,.L335-.L54
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Port_SetPinMode')
	.sect	'.debug_frame'
	.word	40
	.word	.L603,.L56,.L377-.L56
	.byte	8,19,8,22,8,23,4
	.word	(.L476-.L56)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L377-.L476)/2
	.byte	19,0,8,26

; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3104              ((uint32)PORTS_PDISC_32_63)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3105             );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3106    return(RetVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3107  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3108  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3109  #if(PORT_INIT_CHECK_API==STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3110  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3111  ** Traceability      : [cover parentID={7B5DEFB5-5759-49d1-8475-3278D54022D8},**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3112  **                      {696A0D06-6692-44dc-B15B-AF178D0FA750} ]              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3113  **                     [/cover]                                               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3114  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3115  ** Syntax           :Std_ReturnType Port_InitCheck (const Port_ConfigType*    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3116  **                   const ConfigPtr)                                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3117  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3118  ** Service ID       : 0x05                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3119  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3120  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3121  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3122  ** Reentrancy       : Non Reentrant                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3123  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3124  ** Parameters(in)   :ConfigPtr - Pointer to Port configuration                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3125  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3126  ** Parameters (out) :                                                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3127  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3128  ** Return value     : E_OK - Operation successfully performed                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3129  **                    E_NOT_OK - Operation failed eg. Due to invalid          **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3130  **                      parameters.                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3131  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3132  ** Description      : This API checks the initialization values after PORT is **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3133  **                    initialized. It should be called after Port_Init to     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3134  **                    check the initialization values.                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3135  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3136  /* [cover parentID={41FC0F28-97F4-4d16-8C00-6F654869397F}][/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3137  Std_ReturnType Port_InitCheck (const Port_ConfigType* const ConfigPtr)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3138  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3139    Std_ReturnType ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3140    /* [cover parentID={3E9E6763-2D6B-4e4b-8565-E2D23E1FE9D0}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3141    check if port is initialised
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3142    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3143    if((Port_InitStatus == PORT_INITIALIZED ) && (ConfigPtr ==Port_kConfigPtr))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3144    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3145      ErrorFlag = Port_lPDRCheck(ConfigPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3146      /* [cover parentID={29FAFD9A-63A7-4cb3-9DB5-B2833B579E59}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3147      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3148      if(ErrorFlag == E_OK)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3149      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3150       ErrorFlag = Port_lIOInitCheck(ConfigPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3151      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3152    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3153   return ErrorFlag;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3154  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3155  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3156  ** Traceability     : [cover parentID={6F886031-4EFD-4741-9C03-763AD16D28FF}] **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3157  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3158  ** Syntax           :LOCAL_INLINE  Std_ReturnType Port_lPDRCheck              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3159  **                   (                                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3160  **                   const Port_ConfigType* const ConfigPtr)                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3161  **                   )                                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3162  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3163  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3164  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3165  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3166  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3167  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3168  ** Reentrancy       : Non Reentrant                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3169  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3170  ** Parameters(in)   : ConfigPtr - Pointer to Port configuration               **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3171  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3172  ** Parameters (out) :                                                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3173  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3174  ** Return value     : E_OK - Operation successfully performed                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3175  **                    E_NOT_OK - Operation failed                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3176  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3177  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3178  ** Description      : This API checks the initialization values after PORT is **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3179  **                   initialized. It should be called after Port_Init to check**
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3180  **                    the initialization values.                              **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3181  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3182  LOCAL_INLINE Std_ReturnType Port_lPDRCheck(const Port_ConfigType* const ConfigPtr)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3183  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3184    /* Each Port Number for the hardware unit  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3185    uint32                  PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3186    Ifx_P            const *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3187    uint32                  ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3188    uint32 SfrVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3189    uint32 CfgVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3190    volatile uint32 CompareFlag = 0xFFFFFFFFU;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3191    Std_ReturnType ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3192    /* [cover parentID={53EEC855-043E-4456-B3AB-5302A039AECA}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3193    Loop Among Available Ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3194    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3195    ConfigIndex = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3196    /* [cover parentID={AE95EDF9-336D-4845-A949-BC8507FA06E4}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3197    Check for available ports_1
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3198    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3199    for (PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER; PortNumber++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3200    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3201      /* [cover parentID={345D0DE6-F794-4fc6-90CA-21BFC217AE1B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3202      If Available Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3203      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3204      /* [cover parentID={345D0DE6-F794-4fc6-90CA-21BFC217AE1B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3205      If Available Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3206      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3207      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3208      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3209        /* [cover parentID={3F9B0CF9-4D0A-4577-95A0-37CE3971A60B}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3210        Get Port Address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3211        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3212        PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3213  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3214        SfrVal = PortAddressPtr->PDR0.U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3215        CfgVal = ConfigPtr->PortConfigSetPtr [ConfigIndex].DriverStrength0;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3216        CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3217        /* [cover parentID={04CB7276-80BB-4436-B294-B6CE9444955D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3218        Check for Available Ports_2
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3219        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3220        /* [cover parentID={EE726271-930A-43ba-A4F7-F2A19EC9064E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3221        If Available Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3222        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3223        if(Port_lIsPortPdr1Available(PortNumber) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3224        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3225  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3226          SfrVal = PortAddressPtr->PDR1.U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3227          CfgVal = ConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength1;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3228          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3229        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3230        ConfigIndex++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3231      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3232  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3233    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3234    /* [cover parentID={EB60E0CA-F98A-4a90-96DC-FC24A2497925}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3235    Check for Flag
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3236    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3237    if (CompareFlag != 0xFFFFFFFFU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3238    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3239      ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3240    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3241    else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3242    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3243      ErrorFlag = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3244    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3245    return ErrorFlag;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3246  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3247  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3248  ** Traceability:[cover parentID={F25C5539-AD55-4f91-A2C2-310F5A87DDFA}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3249  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3250  ** Syntax           :LOCAL_INLINE Std_ReturnType Port_lIOInitCheck            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3251  **                   (                                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3252  **                   const Port_ConfigType* const ConfigPtr)                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3253  **                   )                                                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3254  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3255  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3256  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3257  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3258  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3259  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3260  ** Reentrancy       : Non Reentrant                                           **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3261  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3262  ** Parameters(in)   :ConfigPtr - Pointer to Port configuration                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3263  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3264  ** Parameters (out) :                                                         **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3265  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3266  ** Return value     : E_OK - Operation successfully performed                 **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3267  **                    E_NOT_OK - Operation failed                             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3268  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3269  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3270  ** Description      : This API checks the initialization values after PORT is **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3271  **                   initialized. It should be called after Port_InitCheck to **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3272  **                    check the initialization values.                        **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3273  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3274  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3275  LOCAL_INLINE Std_ReturnType Port_lIOInitCheck(const Port_ConfigType* const ConfigPtr)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3276  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3277  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3278    const Port_n_ConfigType *ConfigDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3279    const uint32            *DataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3280    Std_ReturnType ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3281    Ifx_P                   const *PortAddressPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3282    /* Each Port Number for the hardware unit */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3283    uint32                  PortNumber;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3284    uint32                  SfrVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3285    uint32                  CfgVal;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3286    const uint32            *Ptr_Config;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3287    const uint32            *PCSRDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3288    const uint32            *PDISCDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3289    volatile uint32 CompareFlag = 0xFFFFFFFFU;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3290    /* Index to identify the port configuration information
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3291    from the configuration array  */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3292    uint32                   ConfigIndex;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3293    #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3294    volatile const uint32   *LVDSRegPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3295    const uint32            *LVDSDataPtr;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3296    uint32                   counter;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3297    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3298    /* [cover parentID={1A58972A-934B-4579-9BA0-73DE290A3B98}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3299    Loop among Available Ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3300    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3301    ConfigIndex = 0U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3302  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3303    #if (PORT_MAX_LPCR_REG !=0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3304    /* MISRA2012_RULE_11_5_JUSTIFICATION: The Port_LVDSConfigTypePtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3305      to structure of type Port_n_LVDSConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3306      for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3307      done as direct assignment to LVDSDataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3308      not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3309      aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3310      MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3311      /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3312      is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3313      and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3314      to LVDSDataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3315      will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3316      effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3317    LVDSDataPtr = (const uint32*)(const void*)(ConfigPtr->Port_LVDSConfigTypePtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3318    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3319   /* MISRA2012_RULE_11_5_JUSTIFICATION: The Port_PCSRConfigTypePtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3320      to structure of type Port_PCSRConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3321      for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3322      done as direct assignment to PCSRDataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3323      not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3324      aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3325      MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3326      /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3327      is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3328      and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3329      to PCSRDataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3330      will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3331      effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3332    PCSRDataPtr = (const uint32*)(const void*)  (ConfigPtr->Port_PCSRConfigTypePtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3333    /* MISRA2012_RULE_11_5_JUSTIFICATION: The PDiscSet is a pointer used to keep
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3334      configuration data for each port. The conversion to the required type
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3335      (const uint32*) is done as direct assignment to PDISCDataPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3336      type const uint32 is not possible. The conversion will produce a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3337      that is correctly aligned and hence no side effects foreseen by violating
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3338      this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3339      /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3340      is done as it can hold the address of any type and then typecasted to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3341      the required (const uint32*) as direct assignment to PDISCDataPtr,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3342      pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3343      will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3344      effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3345    PDISCDataPtr = (const uint32*)(const void*) (ConfigPtr->PDiscSet);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3346    /* [cover parentID={9FDD7385-47AA-4913-9918-E2C345F6402F}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3347    Check For Available Ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3348    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3349    for(PortNumber = (uint32)0U; PortNumber <= (uint32)PORT_MAX_NUMBER ; PortNumber++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3350    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3351      /* [cover parentID={F70B7330-D368-4523-8648-6EDA997FAB06}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3352      If Available Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3353      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3354      if(Port_lIsPortAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3355      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3356        /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3357        configuration address calculation for each port and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3358        ConfigDataPtr = (ConfigPtr->PortConfigSetPtr) + ConfigIndex ;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3359        /* MISRA2012_RULE_11_5_JUSTIFICATION: The ConfigDataPtr is a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3360        to structure of type Port_n_ConfigType used to keep configuration data
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3361        for each port. The conversion to the required type (const uint32*) is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3362        done as direct assignment to DataPtr, pointer of type const uint32 is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3363        not possible. The conversion will produce a pointer that is correctly
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3364        aligned and hence no side effects foreseen by violating this
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3365        MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3366        /* MISRA2012_RULE_11_3_JUSTIFICATION: The conversion to (const void*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3367        is done as it can hold the address of any type, here a structure pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3368        and then typecasted to the required (const uint32*) as direct assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3369        to DataPtr, pointer of type const uint32 is not possible. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3370        will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3371        effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3372        DataPtr = (const uint32 *)(const void*)(ConfigDataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3373        /* [cover parentID={64FE7B89-0357-48b9-94DB-23633F4E37CD}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3374        Get Port Address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3375        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3376        PortAddressPtr = Port_lAdr(PortNumber);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3377        /* [cover parentID={0852F649-2816-45c5-A612-99950D0C6C76}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3378        Check for read only ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3379        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3380        /* [cover parentID={223985C4-2E26-43d6-A501-DD9A64A93DEF}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3381        If ReadOnly Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3382        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3383        /* [cover parentID={655A083F-9819-4516-B2A1-F0AA482AA7FC}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3384        If ReadOnly Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3385        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3386        #if (PORTS_READONLY_AVAIL != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3387        if(Port_lIsPortReadOnly(PortNumber) == (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3388        #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3389        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3390          SfrVal = PortAddressPtr->OUT.U ;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3391          /* MISRA2012_RULE_11_3_JUSTIFICATION: The compiler prevents the
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3392          assignment of value of the element PinLevel of structure ConfigPtr
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3393          into a uint32 variable as PinLevel element is of type Port_n_PinType
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3394          which is a bitfield structure. Port_n_PinType structure is of size
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3395          uint32 and hence using a uint32 pointer typecast to derive the value.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3396          The conversion will produce a pointer that is correctly aligned and
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3397          hence no side effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3398          /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3399          access configuration data for each port. This ConfigPtr which is having
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3400          a const qualifier and by typecasting with (uint32*), it discards const
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3401          keyword. No side effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3402          /* MISRA2012_RULE_1_3_JUSTIFICATION: The compiler prevents the
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3403          assignment of value of the element PinLevel of structure ConfigPtr
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3404          into a uint32 variable as PinLevel element is of type Port_n_PinType
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3405          which is a bitfield structure. Port_n_PinType structure is of size
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3406          uint32 and hence using a uint32 pointer typecast to derive the value.
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3407          Thus no issues seen.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3408          Ptr_Config = (uint32 *)& (ConfigPtr->PortConfigSetPtr[ConfigIndex].PinLevel);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3409          CfgVal = *(Ptr_Config);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3410          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3411        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3412        SfrVal = PortAddressPtr->ESR.U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3413        /* MISRA2012_RULE_11_3_JUSTIFICATION: The compiler prevents the assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3414        of value of the element EmergencyStopConf of structure ConfigPtr into
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3415        a uint32 variable as EmergencyStopConf element is of type Port_n_PinType
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3416        which is a bitfield structure. Port_n_PinType is of size uint32 and
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3417        hence using a uint32 pointer typecast to derive the value. The conversion
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3418        will produce a pointer that is correctly aligned and hence no side
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3419        effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3420        /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3421        access configuration data for each port. This ConfigPtr which is having
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3422        a const qualifier and by typecasting with (uint32*), it discards const
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3423        keyword. No side effects foreseen by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3424        /* MISRA2012_RULE_1_3_JUSTIFICATION: The compiler prevents the assignment
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3425        of value of the element EmergencyStopConf of structure ConfigPtr into
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3426        a uint32 variable as EmergencyStopConf element is of type Port_n_PinType
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3427        which is a bitfield structure. Port_n_PinType is of size uint32 and
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3428        hence using a uint32 pointer typecast to derive the value. Thus no
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3429        issues seen.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3430        Ptr_Config = (uint32 *)&(ConfigPtr->PortConfigSetPtr[ConfigIndex].EmergencyStopConf);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3431        CfgVal = *(Ptr_Config);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3432  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3433        CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3434        SfrVal = PortAddressPtr->IOCR0.U ;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3435        CfgVal = *(DataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3436        DataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3437        CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3438        /* [cover parentID={2477DBB6-8164-49f6-9398-7EC5D83849F4}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3439        If fisrt set of IOCR is not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3440        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3441        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_4_7) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3442        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3443          SfrVal = PortAddressPtr->IOCR4.U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3444          CfgVal = *(DataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3445          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3446        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3447        DataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3448        /* [cover parentID={BC7CE8C3-8254-4e04-AAC9-02E7A859E2A9}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3449        If second set of IOCR is not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3450        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3451        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_8_11) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3452        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3453          SfrVal = PortAddressPtr->IOCR8.U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3454          CfgVal = *(DataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3455          #if(PORT14_PDISC_MASK == PORT_14_DISC_DISABLE)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3456          /* [cover parentID={75D2C28F-7E85-4578-8B67-8AB0E2F4303E}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3457          Is Port Number 14
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3458          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3459          if(PortNumber == 14U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3460          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3461            CfgVal &= (~(IFX_P_IOCR8_PC11_MSK << IFX_P_IOCR8_PC11_OFF));
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3462            CfgVal |= (PORT_IOCR_PULLUP_ENABLE<<IFX_P_IOCR8_PC11_OFF );
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3463          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3464          #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3465          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3466        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3467        DataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3468        /* [cover parentID={A3AF9558-B526-4d2e-980F-AF369F6A340C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3469        If third set of IOCR is not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3470        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3471        if(Port_lIsPortIocrAvailable(PortNumber, (uint16)PORT_PIN_12_15) != (uint16)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3472        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3473          SfrVal = PortAddressPtr->IOCR12.U;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3474          CfgVal = *(DataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3475          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3476        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3477        /* [cover parentID={C84B2C24-2296-4411-94E5-B8806A07E34C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3478        Check for Available LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3479        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3480        /* [cover parentID={9DBD42FA-B5D2-49cc-AC36-720BE37AF9A7}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3481        If LVDS Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3482        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3483         /* [cover parentID={63C38308-AE40-4d18-94F1-1639DC622C89}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3484        If LVDS Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3485        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3486  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3487        #if (PORT_MAX_LPCR_REG != 0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3488        if(Port_lIsPortLVDSAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3489        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3490          /* MISRA2012_RULE_11_5_JUSTIFICATION: Performed to calculate SFR address
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3491          for each port. The conversion to the required type (volatile uint32*)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3492          is done as direct assignment to LVDSRegPtr, pointer of type
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3493          volatile uint32 is not possible. The conversion will produce a pointer
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3494          that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3495          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3496          /* MISRA2012_RULE_11_3_JUSTIFICATION: SFR Access. The conversion to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3497          (volatile void*) is done as it can hold the address of any type, here
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3498          a structure pointer and then typecasted to the required
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3499          (volatile uint32*) as direct assignment to LVDSRegPtr, pointer of
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3500          type volatile uint32 is not possible. The conversion will produce a
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3501          pointer that is correctly aligned and hence no side effects foreseen
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3502          by violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3503          /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is used due to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3504          SFR address calculation and is within allowed range.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3505          /* MISRA2012_RULE_11_8_JUSTIFICATION: The typecasting is performed to
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3506          update the SFR address for each port. The PortAddressPtr is
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3507          having a const qualifier and by typecasting, the input  argument
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3508          for the API discards this keyword. No side effects foreseen by
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3509          violating this MISRA rule.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3510          LVDSRegPtr  = ((volatile uint32*)(volatile void*)PortAddressPtr \ 
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3511                         + PORT_LPCR_REG_OFFSET);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3512  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3513          /* [cover parentID={A7E42B70-13DF-4658-ABD5-58F8CA46B1AB}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3514          Check for LVDS
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3515          [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3516          for(counter = (uint32)0U; counter < (uint32)PORT_MAX_LPCR_REG ; counter++)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3517          {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3518            /* [cover parentID={9A60ED46-B1E1-4bc0-BD65-9CE89CC35314}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3519            If LVDS Pin is available
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3520            [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3521            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3522            {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3523              SfrVal = *(LVDSRegPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3524              CfgVal = *(LVDSDataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3525              CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3526            }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3527            LVDSRegPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3528            LVDSDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3529          }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3530        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3531       #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3532  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3533        /* [cover parentID={B488AB94-6D94-42e5-8D80-0C648C39AE82}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3534        Check for PCSR Ports
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3535        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3536        /* [cover parentID={B69735DA-9884-4f43-BD56-5B31DB027120}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3537        If PCSR Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3538        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3539        /* [cover parentID={960B09E9-B096-4213-AABD-0CFDEAD31235}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3540        Check for PDISC Port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3541        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3542        /* [cover parentID={BF88175E-977A-4160-84BC-CA4EF25904B7}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3543        If PDISC Port not equal to zero
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3544        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3545        if(Port_lIsPortPCSRAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3546        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3547          SfrVal = (PortAddressPtr->PCSR.U) & PORT_31_PCSR_MASK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3548          CfgVal = (*(PCSRDataPtr)) & PORT_31_PCSR_MASK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3549          CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3550          PCSRDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3551        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3552        if(Port_lIsPortPDISCAvailable(PortNumber) != (uint32)0U)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3553        {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3554         SfrVal = (PortAddressPtr->PDISC.U);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3555         CfgVal = *(PDISCDataPtr);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3556         CompareFlag &= ~(SfrVal ^ CfgVal);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3557         PDISCDataPtr++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3558        }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3559        ConfigIndex++;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3560      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3561    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3562    #if(PORT14_PDISC_MASK == PORT_14_DISC_DISABLE)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3563    CompareFlag &= ~(P14_PDISC.U ^ 0x0U);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3564    #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3565    if (CompareFlag != 0xFFFFFFFFU)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3566    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3567      ErrorFlag = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3568    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3569    else
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3570    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3571      ErrorFlag = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3572    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3573    return ErrorFlag;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3574  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3575  #endif
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3576  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3577  #if(PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3578  #if(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3579  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3580  ** Traceability:[cover parentID={41E32907-EB61-4dd1-8F96-DE39C66B3272}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3581  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3582  ** Syntax           : LOCAL_INLINE uint8 Port_lDirectionChk                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3583  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3584  **                        const Port_PinDirectionType  Dir                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3585  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3586  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3587  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3588  **   - Checks for the error in passed direction  parameter.                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3589  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3590  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3591  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3592  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3593  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3594  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3595  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3596  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3597  ** Parameters (in)  :  Dir -  Port pin direction to be checked                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3598  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3599  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3600  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3601  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3602  ** Return value     : E_OK -   Direction passed is valid                      **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3603  **                   E_NOT_OK- Direction passed is invalid                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3604  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3605  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3606  LOCAL_INLINE uint8 Port_lDirectionChk( const Port_PinDirectionType Dir)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3607  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3608    uint8 ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3609    /* [cover parentID={C7364599-76EB-4f2a-8657-50160A20C08D}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3610    Check if direction passed is valid
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3611    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3612    if((Dir != PORT_PIN_IN) && ( Dir != PORT_PIN_OUT))
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3613    {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3614      ErrStatus = E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3615      /* [cover parentID={B5D1507C-8BEC-45a2-BF68-4040258BF247}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3616      Mcal_ReportSafetyError
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3617      [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3618       Mcal_ReportSafetyError(PORT_MODULE_ID, PORT_INSTANCE_ID,
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3619                    PORT_SID_SETPINDIRECTION, PORT_E_PARAM_INVALID_DIRECTION);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3620    }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3621    return(ErrStatus);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3622  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3623  #endif /*(PORT_SAFETY_ENABLE == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3624  #endif /* (PORT_SET_PIN_DIRECTION_API == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3625  #if (PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3626  /*******************************************************************************
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3627  ** Traceability:[cover parentID={748F1600-0954-4c11-B30F-8CF9746D48E3}]       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3628  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3629  ** Syntax           : LOCAL_INLINE uint8 Port_lCheckInitStatus                **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3630  **                    (                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3631  **                        const uint8 ApiId                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3632  **                    )                                                       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3633  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3634  ** Description      : This INLINE function:                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3635  **   - Check if Port is intialised or not .                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3636  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3637  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3638  ** Service ID:  NA                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3639  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3640  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3641  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3642  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3643  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3644  ** Parameters (in)  :  ApiId - Service ID of the API reporting an error       **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3645  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3646  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3647  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3648  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3649  ** Return value     : E_OK - Port_InitStatus is intialized                    **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3650  **                    E_NOT_OK- Port_InitStatus is not intialized             **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3651  **                                                                            **
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3652  *******************************************************************************/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3653  LOCAL_INLINE uint8 Port_lCheckInitStatus (const uint8 ApiId)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3654  {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3655    uint8 ErrStatus = E_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3656    /* [cover parentID={F78E386B-0771-4b63-B068-BE7F64B21F7C}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3657    Check for Intialized state of port
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3658    [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3659    if (Port_InitStatus != PORT_INITIALIZED)
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3660      {
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3661        /* [cover parentID={2A1742C4-C05F-484c-91B8-689596DAD248}]
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3662        Report DET PORT_E_UNINIT
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3663        [/cover] */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3664        Port_lReportError(ApiId, PORT_E_UNINIT);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3665        ErrStatus = (uint8)E_NOT_OK;
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3666      }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3667    return (ErrStatus);
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3668  }
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3669  #endif /*(PORT_DEV_ERROR_DETECT == STD_ON )||(PORT_SAFETY_ENABLE == STD_ON) */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3670  
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3671  #define PORT_STOP_SEC_CODE_ASIL_B_GLOBAL
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3672  /*mapping of code and data to specific memory sections via memory mapping file*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3673  /* MISRA2012_RULE_4_10_JUSTIFICATION: To be compliant with autosar guidelines
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3674  Port_Memmap.h header is included without safegaurd.*/
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3675  /* MISRA2012_RULE_20_1_JUSTIFICATION: Port_Memmap.h header included as per
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3676  Autosar guidelines. */
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3677  #include "Port_MemMap.h"
; ..\Mcal\Tricore\Port\ssc\src\Port.c	  3678  

	; Module end
