	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc35172a --dep-file=Mcal\\Tricore\\Adc\\ssc\\src\\.Adc.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=Mcal\\Tricore\\Adc\\ssc\\src\\Adc.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Mcal\\Tricore\\Adc\\ssc\\src\\Adc.src ..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c"
	.compiler_name		"ctc"
	;source	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c'

	
$TC162
	
	.sdecl	'.text.Adc_Init.Code.Cpu0',code,cluster('Adc_Init')
	.sect	'.text.Adc_Init.Code.Cpu0'
	.align	2
	
	.global	Adc_Init

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     1  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     2  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     3  ** Copyright (C) Infineon Technologies (2023)                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     4  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     5  ** All rights reserved.                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     6  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    10  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    11  ********************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    12  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    13  **  FILENAME     : Adc.c                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    14  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    15  **  VERSION      : 40.0.0                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    16  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    17  **  DATE         : 2023-05-18                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    18  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    19  **  VARIANT      : Variant PB                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    20  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    21  **  PLATFORM     : Infineon AURIX2G                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    22  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    23  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    24  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    25  **  VENDOR       : Infineon Technologies                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    26  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    27  **  TRACEABILITY : [cover parentID={898E18F0-71B4-4e5b-9D37-46B8135C292E}]    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    28  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    29  **  DESCRIPTION  : Adc Driver source file                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    30  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    31  **  [/cover]                                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    32  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    33  **  SPECIFICATION(S) : Specification of ADC Driver,                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    34  **                     AUTOSAR Release 4.2.2 and 4.4.0                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    35  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    36  **  MAY BE CHANGED BY USER : no                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    37  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    38  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    39  /*[cover parentID={B2A31D0F-3CF7-47d9-BD9E-36AE5295CFEF}] File Structure
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    40  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    41  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    42  /*[cover parentID={5A3ADFAA-3D3E-4c98-9E2B-B3BF1BD77BB9}] Adc_Irq.c File to be
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    43  developed by user [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    44  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    45  **                      Includes                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    46  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    47  /*[cover parentID={DE6EB695-89E0-4a47-B354-EFE3CADF580B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    48  Imported Interfaces [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    49  #include "Mcal_Compiler.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    50  #include "Adc.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    51  /*[cover parentID={90DAD596-ABB0-4e8c-A0F6-DDD50B853D79},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    52  {8790813B-BDC0-4356-A4E2-F7D8C4308EEA}] Exclusive Usage of EVADC
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    53  register [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    54  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    55  #include "IfxEvadc_bf.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    56  #include "IfxEvadc_reg.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    57  #include "IfxScu_bf.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    58  #include "IfxScu_reg.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    59  #include "IfxSrc_bf.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    60  #include "IfxSrc_reg.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    61  #include "SchM_Adc.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    62  #if ((ADC_CLC_FAILURE_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    63       (ADC_CONV_STOP_TIME_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    64  	 (ADC_RUNTIME_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    65  #include "Mcal_Wrapper.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    66  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    67  #if (ADC_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    68  #include "Det.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    69  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    70  /* [cover parentID={A5B1DAC2-4EA6-4fe3-A61E-A351E74D6639}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    71      Safety Mechanism for reporting errors in ASIL B usecase [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    72  #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    73  #include "Mcal_SafetyError.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    74  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    75  #if( (ADC_INIT_DEINIT_API_MODE != ADC_MCAL_SUPERVISOR)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    76       (ADC_RUN_TIME_API_MODE != ADC_MCAL_SUPERVISOR) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    77  #include "McalLib_OsStub.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    78  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    79  /*[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    80  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    81  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    82  **                      Imported Compiler Switch Check                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    83  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    84  #ifndef ADC_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    85    #error "ADC_AR_RELEASE_MAJOR_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    86  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    87  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    88  #ifndef ADC_AR_RELEASE_MINOR_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    89    #error "ADC_AR_RELEASE_MINOR_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    90  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    91  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    92  #ifndef ADC_AR_RELEASE_REVISION_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    93    #error "ADC_AR_RELEASE_REVISION_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    94  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    95  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    96  /*[cover parentID={57675972-EF57-41f1-A663-665E62D0DD60},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    97                    {F5CF0050-FA3F-4e14-8C3E-FD0E8CB08831}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    98                    Modules version consistency check [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	    99  #if ( ADC_AR_RELEASE_MAJOR_VERSION != MCAL_AR_RELEASE_MAJOR_VERSION)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   100    #error "ADC_AR_RELEASE_MAJOR_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   101  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   102  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   103  #if ( ADC_AR_RELEASE_MINOR_VERSION != MCAL_AR_RELEASE_MINOR_VERSION)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   104    #error "ADC_AR_RELEASE_MINOR_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   105  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   106  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   107  #if ( ADC_AR_RELEASE_REVISION_VERSION != MCAL_AR_RELEASE_REVISION_VERSION)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   108    #error "ADC_AR_RELEASE_REVISION_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   109  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   110  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   111  #ifndef ADC_SW_MAJOR_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   112    #error "ADC_SW_MAJOR_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   113  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   114  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   115  #ifndef ADC_SW_MINOR_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   116    #error "ADC_SW_MINOR_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   117  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   118  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   119  #ifndef ADC_SW_PATCH_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   120    #error "ADC_SW_PATCH_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   121  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   122  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   123  /*[cover parentID={57675972-EF57-41f1-A663-665E62D0DD60}] Modules version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   124  consistency check [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   125  #if ( ADC_SW_MAJOR_VERSION != 20U )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   126    #error "ADC_SW_MAJOR_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   127  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   128  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   129  #if ( ADC_SW_MINOR_VERSION != 25U )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   130    #error "ADC_SW_MINOR_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   131  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   132  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   133  #if ( ADC_SW_PATCH_VERSION != 0U )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   134    #error "ADC_SW_PATCH_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   135  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   136  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   137  /*[cover parentID={D9C75887-D938-4689-BDD4-B8BD24AB1711}] Version Check for DET
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   138  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   139  #if (ADC_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   140  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   141    #ifndef DET_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   142      #error "DET_AR_RELEASE_MAJOR_VERSION is not defined."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   143    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   144  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   145    #if (DET_AR_RELEASE_MAJOR_VERSION != MCAL_AR_RELEASE_MAJOR_VERSION)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   146      #error "DET_AR_RELEASE_MAJOR_VERSION does not match."
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   147    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   148  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   149  #endif /* End for ADC_DEV_ERROR_DETECT */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   150  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   151  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   152  **                      Private Macro Definitions                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   153  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   154  #define ADC_ONE_U                       (1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   155  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   156  #define ADC_INVALID_GROUP_ID            ((Adc_GroupType)0xFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   157  #define ADC_INVALID_CHANNEL_ID          ((Adc_ChannelType)0xFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   158  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   159  #define ADC_INVALID_KERNEL_ID           ((uint8)0xFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   160  #endif /* End for ADC_SYNC_CONV_ENABLE */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   161  #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   162  #define ADC_INVALID_RS_ID               ((uint8)0xFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   163  #if ( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   164        ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   165        && (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   166  #define ADC_MAX_PRIORITY_LVL            ((Adc_GroupPriorityType)0xFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   167  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   168  #endif /* End for ADC_PRIORITY_IMPLEMENTATION */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   169  #define ADC_RS0_ID                       ((uint8)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   170  #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   171  #define ADC_RS1_ID                       ((uint8)1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   172  #define ADC_RS2_ID                       ((uint8)2U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   173  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   174  #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   175  #define ADC_LIMIT_CHECK_SRN              ((uint8)3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   176  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   177  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   178  #define ADC_KERNEL_ID_START_POS         (5U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   179  #define ADC_KERNEL_ID_NO_OF_BITS        (11U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   180  #define ADC_GROUP_ID_MASK               (0x1FU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   181  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   182  #define ADC_ERU_EICR_REG_SEL_MASK       (3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   183  #define ADC_ERU_IGCR_REG_SEL_MASK       (3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   184  #define ADC_ERU_CH_CFG_BIT_POS_SHIFT    (4U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   185  #define ADC_INIT_DEINIT                 (0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   186  #define ADC_RUNTIME                     (1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   187  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   188  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   189  #define ADC_STARTUP_CAL_STARTED         (1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   190  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   191  #define ADC_PRIMARY_CONV_CHANNEL_COUNT     (8U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   192  #define ADC_SECONDARY_CONV_CHANNEL_COUNT   (16U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   193  #define ADC_MAX_RESULT_REGISTERS           (16U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   194  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   195  #define ADC_TARGET_POWER_STATE_MASK     (0x00000003U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   196  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   197  #define ADC_BITS_PER_POWER_STATE        (3)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   198  #define ADC_INVALID_POWER_STATE         ((uint8)0xFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   199  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   200  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   201  #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   202  #if (ADC_RESULT_ALIGNMENT == ADC_ALIGN_RIGHT)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   203  #define ADC_12BIT_RESULT_MASK  (0x00000FFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   204  #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   205  #define ADC_12BIT_RESULT_MASK  (0x0000FFF0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   206  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   207  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   208  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   209  #if (ADC_TRIGGER_ONE_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   210  #define ADC_WAIT_FOR_DUMMY_CONV (0x00005000U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   211  #endif /* End for ADC_TRIGGER_ONE_CONV_ENABLE */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   212  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   213  #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   214       (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   215  #define ADC_CHANNEL_RESULT_CLR_MASK     ((uint16)0xFFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   216  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   217  #define ADC_CLR_VALID_FLAG_REG          ((uint32)0x0000FFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   218  #define ADC_REQTM_RESET_VALUE           ((uint32)0xFFC00000U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   219  #define ADC_CLR_SOURCE_EVENT            ((uint32)0x00000007U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   220  #define ADC_CLR_RESULT_EVENT            ((uint32)0x0000FFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   221  #define ADC_CLR_PRIMARY_CH_EVENT        ((uint32)0x000000FFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   222  #if (ADC_SECONDARY_KERNEL_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   223  #define ADC_CLR_SECONDARY_CH_EVENT      ((uint32)0x0000FFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   224  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   225  #define ADC_ANCFG_DEFAULT_VALUE         ((uint32)0x00300004U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   226  #if (ADC_DEINIT_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   227  #define ADC_CLC_DEFAULT_VALUE           ((uint32)0x00000001U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   228  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   229  #define ADC_ALIAS_DEFAULT_VALUE         ((uint32)0x00000100U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   230  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   231  #define ADC_ERU_WR_MASK                 ((uint32)0x0000FFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   232  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   233  #if (ADC_RUN_TIME_API_MODE != ADC_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   234  #define ADC_CLR_SRC_MASK                ((uint32)0xFFFFFFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   235  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   236  #define ADC_SEVNP_INIT_CFG_VALUE        ((uint32)0x00000210U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   237  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   238  #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   239  #define ADC_CEVNP_INIT_CFG_VALUE        ((uint32)0x33333333U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   240  #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   241  #define ADC_CEVNP_INIT_CFG_VALUE        ((uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   242  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   243  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   244  #if(ADC_RESULT_HANDLING_IMPLEMENTATION == ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   245  #define ADC_REVNP_INIT_CFG_VALUE        ((uint32)0x33333333U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   246  #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   247  #define ADC_REVNP_INIT_CFG_VALUE        ((uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   248  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   249  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   250  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_INIT_CHECK_API == STD_ON) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   251  (ADC_GTM_AVAILABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   252  #define ADC_TOM_ATOM_CH_CNTRL_REG_RST_VAL ((uint32)0x00000800U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   253  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   254  #define ADC_Q_CTRL_WRITE_PROTECT_MSK    ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   255                             ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QCTRL_TMWC_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   256                             ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QCTRL_GTWC_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   257                             ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QCTRL_XTWC_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   258  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   259  #define ADC_GLOBCFG_WRITE_PROTECT_MSK    (\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   260                             (uint32)ADC_ONE_U<<IFX_EVADC_GLOBCFG_CPWC_OFF)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   261  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   262  #define ADC_GLOBTF_WRITE_PROTECT_MSK   ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   263                             ((uint32)ADC_ONE_U<<IFX_EVADC_GLOB_TF_MDWC_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   264                             ((uint32)ADC_ONE_U<<IFX_EVADC_GLOB_TF_CDWC_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   265  #if ((ADC_TRIGGER_ONE_CONV_ENABLE == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   266      (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   267  #define ADC_START_SW_TRIG_CONV         ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   268                             ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_ENGT_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   269                             ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_TREV_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   270  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   271  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   272  #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   273  #define ADC_ARBPR_PRIO_MSK            ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   274          ((uint32)IFX_EVADC_G_ARBPR_PRIO0_MSK<<IFX_EVADC_G_ARBPR_PRIO0_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   275          ((uint32)IFX_EVADC_G_ARBPR_PRIO1_MSK<<IFX_EVADC_G_ARBPR_PRIO1_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   276          ((uint32)IFX_EVADC_G_ARBPR_PRIO2_MSK<<IFX_EVADC_G_ARBPR_PRIO2_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   277  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   278  #define ADC_ARBPR_ASEN_MSK            ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   279          ((uint32)IFX_EVADC_G_ARBPR_ASEN0_MSK<<IFX_EVADC_G_ARBPR_ASEN0_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   280          ((uint32)IFX_EVADC_G_ARBPR_ASEN1_MSK<<IFX_EVADC_G_ARBPR_ASEN1_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   281          ((uint32)IFX_EVADC_G_ARBPR_ASEN2_MSK<<IFX_EVADC_G_ARBPR_ASEN2_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   282  #endif /* End for ADC_PRIORITY_IMPLEMENTATION */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   283  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   284  #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   285  #define ADC_EMUX_SEQUENCE_MODE       (uint32)(3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   286  #define ADC_EMUX_GRAYCODE_ENABLED    (uint32)(1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   287  #define ADC_EMUX_STCE_ENABLED        (uint32)(1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   288  #define ADC_EMUX_ARB_CH_SEL_STYLE    (uint32)(0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   289  #define ADC_EMUX_IDLE                (uint8)(0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   290  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   291  #if ((ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   292      (ADC_GRP_NOTIF_CAPABILITY == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   293  #define ADC_EMUX_COMPLETED           (uint8)(1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   294  #endif/*End for Interrupt Mode Handling or Notification capability*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   295  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   296  #if (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   297  #define ADC_EMUX_STREAM_COMPLETED    (uint8)(2U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   298  #endif/*End for Interrupt Mode Handling*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   299  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   300  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   301  #define ADC_EMUX_RESULT_NOTIF_STATUS (uint8)(0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   302  #endif/*End for Notification capability*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   303  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   304  /* This macro is used to program the dummy EMUX mode */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   305  #define ADC_EMUX_DUMMY_MODE_PROGRAM ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   306          ((uint32)ADC_EMUX_GRAYCODE_ENABLED<<IFX_EVADC_G_EMUXCTR_EMXCOD_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   307          ((uint32)ADC_EMUX_STCE_ENABLED<<IFX_EVADC_G_EMUXCTR_EMXST_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   308          ((uint32)ADC_EMUX_ARB_CH_SEL_STYLE<<IFX_EVADC_G_EMUXCTR_EMXCSS_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   309          ((uint32)ADC_ONE_U<<IFX_EVADC_G_EMUXCTR_EMXWC_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   310  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   311  /* This macro is used to program the actual EMUX mode */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   312  #define ADC_EMUX_SEQUENCE_MODE_PROGRAM ((uint32)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   313          ((uint32)ADC_EMUX_SEQUENCE_MODE<<IFX_EVADC_G_EMUXCTR_EMUXMODE_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   314          ((uint32)ADC_EMUX_GRAYCODE_ENABLED<<IFX_EVADC_G_EMUXCTR_EMXCOD_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   315          ((uint32)ADC_EMUX_STCE_ENABLED<<IFX_EVADC_G_EMUXCTR_EMXST_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   316          ((uint32)ADC_EMUX_ARB_CH_SEL_STYLE<<IFX_EVADC_G_EMUXCTR_EMXCSS_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   317          ((uint32)ADC_ONE_U<<IFX_EVADC_G_EMUXCTR_EMXWC_OFF)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   318  #endif /* End for EMUX feature */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   319  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   320  **                         User Mode Macros                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   321  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   322  /*[cover parentID={1A65EADD-AFD0-4845-B2D2-8257E086DD67}] User Mode Support via
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   323  OS function calls Macros [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   324  /* [cover parentID={8699AFA6-421D-4ee0-BA97-AA99A3FB4974}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   325  Precompile Time support for User Mode
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   326  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   327  #if(ADC_INIT_DEINIT_API_MODE == ADC_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   328  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   329     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   330     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   331    #define ADC_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   332      Mcal_WritePeripEndInitProtReg(RegAdd,Data)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   333  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   334  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   335     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   336     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   337  /* MISRA2012_RULE_2_5_JUSTIFICATION: A Generic function like macro is defined
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   338     to use in the code for user mode support. No side effects foreseen by
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   339     violating this MISRA rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   340    #define ADC_INIT_DEINIT_WRITE_SAFETY_ENDINIT_PROTREGMASK(RegAdd,Data,Mask)   \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   341      Mcal_WriteSafetyEndInitProtRegMask(RegAdd,Data,Mask)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   342  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   343  #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   344  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   345  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   346     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   347     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   348    #define ADC_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(RegAdd,Data)   \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   349      MCAL_LIB_WRITEPERIPENDINITPROTREG(RegAdd,Data)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   350  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   351     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   352     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   353  /* MISRA2012_RULE_2_5_JUSTIFICATION: A Generic function like macro is defined
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   354     to use in the code for user mode support. No side effects foreseen by
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   355     violating this MISRA rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   356    #define ADC_INIT_DEINIT_WRITE_SAFETY_ENDINIT_PROTREGMASK(RegAdd,Data,Mask)   \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   357      MCAL_LIB_WRITESAFETYENDINITPROTREGMASK(RegAdd,Data,Mask)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   358  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   359  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   360  /* [cover parentID={8699AFA6-421D-4ee0-BA97-AA99A3FB4974}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   361  Precompile Time support for User Mode
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   362  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   363  #if (ADC_RUN_TIME_API_MODE == ADC_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   364  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   365     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   366     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   367  /* MISRA2012_RULE_2_5_JUSTIFICATION: A Generic function like macro is defined
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   368     to use in the code for user mode support. No side effects foreseen by
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   369     violating this MISRA rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   370    #define ADC_RUNTIME_WRITE_SAFETY_ENDINIT_PROTREGMASK(RegAdd,Data,Mask)    \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   371    Mcal_WriteSafetyEndInitProtRegMask(RegAdd,Data,Mask)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   372  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   373     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   374     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   375    #define ADC_RUNTIME_OS_MODIFY32(ModuleId, RegAdd, ClearMask, SetMask)        \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   376                           ((RegAdd->U) = ((RegAdd->U)|(SetMask)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   377  #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   378  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   379     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   380     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   381  /* MISRA2012_RULE_2_5_JUSTIFICATION: A Generic function like macro is defined
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   382     to use in the code for user mode support. No side effects foreseen by
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   383     violating this MISRA rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   384    #define ADC_RUNTIME_WRITE_SAFETY_ENDINIT_PROTREGMASK(RegAdd,Data,Mask)    \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   385    MCAL_LIB_WRITESAFETYENDINITPROTREGMASK(RegAdd,Data,Mask)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   386  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro is defined for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   387     User mode support in code. No side effects foreseen by violating this MISRA
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   388     rule. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   389    #define ADC_RUNTIME_OS_MODIFY32(ModuleId,RegAdd,ClearMask,SetMask)  \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   390    MCAL_SFR_OS_MODIFY32(ModuleId, RegAdd, ClearMask, SetMask)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   391  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   392  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   393  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   394  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   395  **                      Private Type Definitions                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   396  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   397  /*Type Definition for  Adc_QueueDataType*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   398  #if((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   399      (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   400  /* [cover parentID={D2B0DFB9-22B0-4701-9A79-C8F6F5395F39}]  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   401  typedef struct
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   402  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   403    Adc_GroupType PreviousGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   404    Adc_GroupType NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   405  } Adc_QueueDataType;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   406  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   407  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   408  /* [cover parentID={A9A0357F-AEFA-49b9-BD7F-1D59EF9A3238}]  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   409  typedef struct
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   410  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   411    Adc_GroupType ActiveGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   412    Adc_ChannelType ActiveLimitChkCh;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   413    #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   414        (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   415    Adc_QueueDataType QueueOfSwGroup[ADC_MAX_GROUPS];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   416    Adc_GroupType PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   417    Adc_GroupType PushGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   418    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   419    uint8 IsrNoServiceFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   420  } Adc_RSDataType;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   421  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   422  /* [cover parentID={8B9BC580-36C9-4ad6-A9E5-536F89214AAE}]  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   423  typedef struct
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   424  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   425    #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   426    Adc_ValueGroupType *GrpResBuffer[ADC_MAX_GROUPS];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   427    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   428    uint32 GrpStatus;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   429    uint32 GrpResultStatus;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   430    uint32 GrpBufferEndResultStatus;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   431    uint32 GrpNotifStatus;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   432    #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   433    Adc_QueueDataType QueueOfSwGroup[ADC_MAX_GROUPS];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   434    Adc_GroupType PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   435    Adc_GroupType PushGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   436    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   437    Adc_RSDataType RSData[ADC_REQSRC_USED_COUNT];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   438    uint16 AllRunningChannels;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   439    uint16 AllRunningResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   440    #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   441    Adc_StreamNumSampleType NumofValidConRes[ADC_MAX_GROUPS];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   442    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   443    #if(ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   444    #if(ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   445    uint8 LimitChkActiveFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   446    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   447    uint8 AliasActiveFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   448    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   449    #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   450    uint8 EmuxConversionActiveFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   451    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   452  } Adc_GlobalDataType;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   453  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   454  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   455      (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   456  /* [cover parentID={D32920D5-83CC-42b1-8ED8-13F77188534C}]  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   457  typedef enum
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   458  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   459    ADC_UNINIT_COMPLETED = 0U,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   460    ADC_UNINIT_STARTED = 1U,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   461    ADC_INITIALIZED = 2U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   462  } Adc_InitStateType;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   463  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   464  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   465  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   466  **                      Private Function Declarations                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   467  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   468  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   469  Code Memory section naming as per AS [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   470  /* [cover parentID={EA0715EE-3E3C-4aac-A42E-4B5CFC96CEED}] Memory mapping
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   471  support [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   472  /*[cover parentID={37748051-6EE3-4713-A929-15FE090C4A8E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   473  MemMap_h file to be developed by user [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   474  #define ADC_START_SEC_CODE_ASIL_B_GLOBAL
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   475  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   476  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   477  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   478  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   479  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   480  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   481  LOCAL_INLINE uint32 Adc_lGetAdcKernel(const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   482  LOCAL_INLINE Adc_GroupType Adc_lGetKernelGroupId(const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   483  LOCAL_INLINE Adc_GlobalDataType* Adc_lGetKernelDataAddress(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   484                               const uint32 KernelId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   485  #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   486  LOCAL_INLINE uint8 Adc_lGetGrpReqSrc(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   487                                       const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   488                                       const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   489  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   490  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   491  /************** Local APIs for Group Status - Start **************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   492  LOCAL_INLINE void Adc_lSetGroupStatusBusyAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   493          Adc_GlobalDataType * const KernelDataPtr,const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   494  LOCAL_INLINE void Adc_lSetGroupResultAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   495         Adc_GlobalDataType *const KernelDataPtr, const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   496  LOCAL_INLINE void Adc_lSetResBuffEndStatusAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   497            Adc_GlobalDataType *const KernelDataPtr, const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   498  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   499  LOCAL_INLINE void Adc_lSetStartupCalStatusAtomic(void);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   500  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   501  LOCAL_INLINE void Adc_lClrGroupStatusBusyAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   502                Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   503                const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   504  LOCAL_INLINE void Adc_lClrGroupResultAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   505                Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   506                const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   507  LOCAL_INLINE void Adc_lClrResBuffEndStatusAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   508                Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   509                const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   510  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   511  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   512  LOCAL_INLINE void Adc_lClrStartupCalStatusAtomic(void);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   513  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   514  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   515  LOCAL_INLINE uint32 Adc_lGetGroupStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   516          const Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   517          const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   518  LOCAL_INLINE uint32 Adc_lGetGroupResultStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   519          const Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   520          const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   521  LOCAL_INLINE uint32 Adc_lGetResBuffEndStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   522          const Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   523          const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   524  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   525  LOCAL_INLINE uint32 Adc_lGetStartupCalStatusAtomic(void);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   526  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   527  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   528  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   529       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   530  LOCAL_INLINE uint32 Adc_lGetAllGroupStatus(const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   531  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   532  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   533  #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   534       (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   535  static void Adc_lSetRunningChAndResReg(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   536                                      const Adc_GroupCfgType * const GrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   537                                      const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   538  static void Adc_lClrRunningChAndResReg(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   539                                       const Adc_GroupCfgType * const GrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   540                                       const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   541  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   542  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   543  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   544  LOCAL_INLINE void Adc_lSetGrpNotifAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   545                Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   546                const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   547  LOCAL_INLINE void Adc_lClrGrpNotifAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   548                Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   549                const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   550  LOCAL_INLINE uint32 Adc_lGetGroupNotifStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   551          const Adc_GlobalDataType * const KernelDataPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   552          const Adc_GroupType GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   553  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   554  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   555  /************** Local APIs for Group Status - End **************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   556  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   557  LOCAL_INLINE void Adc_lInit(const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   558  LOCAL_INLINE void Adc_lResetGlobalSfr(void);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   559  static void Adc_lResetCoreGlobalVars(const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   560  LOCAL_INLINE void Adc_lKernelInit(const Adc_HwUnitCfgType * const KernelCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   561                                    const uint32 KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   562  static void Adc_lKernelDeInit(const Adc_HwUnitCfgType * const KernelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   563                                const uint32 KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   564  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   565  static void Adc_lPrepareGrpForStart(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   566                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   567  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   568  static void Adc_lEnableSyncCh(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   569                                const Adc_ChannelType AnChannelNum,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   570                                const uint32 ChctrValue,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   571                                const Adc_ResultRegType ResReg,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   572                                const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   573  static void Adc_lClearSyncCh(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   574                                const Adc_ChannelType AnChannelNum,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   575                                const Adc_ResultRegType ResReg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   576  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   577  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   578  #if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   579  static void Adc_lStartSwConversion(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   580                                     const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   581                                     const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   582  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   583  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   584  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   585  LOCAL_INLINE void Adc_lClearSlaveEvents(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   586                                          const uint32 KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   587  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   588  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   589  #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   590  LOCAL_INLINE void Adc_lAdjustRsPriorities(const uint32 KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   591  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   592  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   593  #if(((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   594  (ADC_ENABLE_QUEUING == STD_ON)) && (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   595  LOCAL_INLINE void Adc_lPushToQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   596                                     const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   597                                     const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   598  static void Adc_lScheduleFromQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   599                                     const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   600                                     const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   601  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   602  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   603  #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   604     (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   605  static void Adc_lPopFromQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   606                                const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   607                                const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   608  LOCAL_INLINE void Adc_lRemoveFromQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   609          Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   610          const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   611  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   612  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   613  #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   614  LOCAL_INLINE uint8 Adc_lGetReqSrcForGrp(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   615                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   616  LOCAL_INLINE void Adc_lPushToScheduler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   617                                         const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   618                                         const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   619                                         const uint8 PriorityBoost);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   620  static void Adc_lSchedulerOnStart(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   621                                    const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   622                                    const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   623  #if(ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   624  LOCAL_INLINE Adc_GroupType Adc_lPopFromScheduler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   625                                                   const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   626  static void Adc_lScheduleNext(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   627                                const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   628                                const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   629  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   630  static void Adc_lSchedulerOnStop(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   631                                   const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   632                                   const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   633  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   634  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   635  static void Adc_lStopConvRequest(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   636                                   const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   637                                   const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   638  static void Adc_lClearGroupSfr(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   639                                 const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   640                                 const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   641  LOCAL_INLINE void Adc_lRemoveActiveGroup(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   642                                       Adc_GlobalDataType * const KernelDataPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   643                                       const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   644                                       const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   645  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   646  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   647  LOCAL_INLINE void Adc_lResetHwTrigger(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   648                                        const uint8 Mode);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   649  LOCAL_INLINE void Adc_lSetHwTrigger(const Adc_GroupCfgType * const GrpPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   650  LOCAL_INLINE void Adc_lStartHwConversion(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   651                                           const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   652                                           const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   653  #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   654  LOCAL_INLINE void Adc_lGtmChannelInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   655                   const Mcu_17_Gtm_TomAtomChConfigType * const GtmChannelCfgPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   656  LOCAL_INLINE void Adc_lGtmChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   657                   const Mcu_17_Gtm_TomAtomChConfigType * const GtmChannelCfgPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   658  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   659  LOCAL_INLINE void Adc_lEruChannelInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   660                            const Adc_EruChannelCfgType * const EruChannelCfgPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   661  LOCAL_INLINE void Adc_lEruChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   662          const Adc_EruChannelCfgType * const EruChannelCfgPtr, const uint8 Mode);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   663  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   664  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   665  #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   666  static void Adc_lUpdateResBuffer(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   667                                   const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   668                                   const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   669  static void Adc_lGrpSequenceHandler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   670           const Adc_GroupType GroupId, const uint8 ReqSrc, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   671  #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   672  static void Adc_lUpdateEmuxResBuffer(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   673                                   const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   674                                   const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   675  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   676  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   677  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   678  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   679  static void Adc_lUpdateSlaveResult(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   680                                     const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   681                                     Adc_ValueGroupType * const CurrentResBufPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   682                                     const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   683  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   684  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   685  #if ((ADC_READ_GROUP_API == STD_ON) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   686       (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   687       (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   688  static void Adc_lReadSlaveResult(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   689                                   const Adc_GroupCfgType* const GrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   690                                   const Adc_ValueGroupType* const ResultBufPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   691                                   Adc_ValueGroupType* const DataBufPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   692                                   const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   693  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   694  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   695  static void Adc_lRSEventHandler(const uint32 KernelId, const uint8 RequestSrc,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   696                                  const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   697  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   698  #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   699  static void Adc_lLimitChkEventHandler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   700            const Adc_GroupType GroupId, const uint32 CoreId, const uint8 ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   701  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   702  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   703  #if (ADC_TRIGGER_ONE_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   704  static Std_ReturnType Adc_lTriggerOneConversion(void);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   705  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   706  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   707  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   708  static uint8 Adc_lGetCurrentPwrState(const uint8 ServiceId,const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   709  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   710  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   711  /************** Local APIs for DET checks - Start**************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   712  #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   713  LOCAL_INLINE uint8 Adc_lInitDetCheck(const Adc_ConfigType * const ConfigPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   714                                       const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   715  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   716  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   717  #if (((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   718       (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   719  LOCAL_INLINE uint8 Adc_lSetupResBufDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   720    const Adc_GroupType GroupId, const Adc_ValueGroupType * const DataBufferPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   721    const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   722  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   723  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   724  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   725                                                        (ADC_DEINIT_API ==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   726  LOCAL_INLINE uint8 Adc_lDeInitDetCheck(const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   727  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   728  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   729  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   730                                                (ADC_STARTUP_CALIB_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   731  LOCAL_INLINE uint8 Adc_lTrigStartupCalDetCheck(void);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   732  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   733  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   734  #if((ADC_SAFETY_ENABLE == STD_ON) && (ADC_STARTUP_CALIB_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   735  LOCAL_INLINE uint8 Adc_lCheckStartupCalibOngoingDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   736                                                      const uint8 ServiceId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   737  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   738  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   739  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   740                                        (ADC_ENABLE_START_STOP_GROUP_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   741  LOCAL_INLINE uint8 Adc_lStartGrpConvDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   742                               const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   743  LOCAL_INLINE uint8 Adc_lStopGrpConvDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   744                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   745  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   746  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   747  #if( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   748       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   749        && (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   750  LOCAL_INLINE uint8 Adc_lCheckGrpPrioSwDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   751                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   752  LOCAL_INLINE uint8 Adc_lCheckGrpPrioHwDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   753                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   754  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   755  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   756  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   757                                                     (ADC_READ_GROUP_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   758  LOCAL_INLINE uint8 Adc_lReadGrpDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   759         const Adc_ValueGroupType * const DataBufferPtr, const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   760         const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   761  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   762  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   763  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   764  LOCAL_INLINE uint8 Adc_lGetGrpStatusDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   765                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   766  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   767  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   768  #if (((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   769       (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   770  LOCAL_INLINE uint8 Adc_lGetStrmPtrDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   771    const Adc_GroupType GroupId, Adc_ValueGroupType ** const PtrToSamplePtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   772    const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   773  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   774  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   775  #if (((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   776                                             (ADC_GRP_NOTIF_CAPABILITY == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   777  LOCAL_INLINE uint8 Adc_lEnGrpNotifDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   778                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   779  LOCAL_INLINE uint8 Adc_lDisGrpNotifDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   780                                const Adc_GroupType GroupId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   781  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   782  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   783  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   784                                                     (ADC_HW_TRIGGER_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   785  LOCAL_INLINE uint8 Adc_lEnHwTriggerDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   786                                 const Adc_GroupType GroupId,const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   787  LOCAL_INLINE uint8 Adc_lDisHwTriggerDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   788                                const Adc_GroupType GroupId,const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   789  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   790  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   791  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   792  LOCAL_INLINE uint8 Adc_lCheckUnInitDet(const uint8 ServiceId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   793                                         const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   794  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   795  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   796  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   797  LOCAL_INLINE uint8 Adc_lCheckParamGrpDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   798         const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   799  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   800  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   801  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   802  LOCAL_INLINE uint8 Adc_lCheckWrongTrigSrcDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   803           const Adc_GroupType GroupId,const uint8 ServiceId,const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   804  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   805  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   806  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   807      (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   808  LOCAL_INLINE uint8 Adc_lCheckBufferUnInitDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   809           const Adc_GroupType GroupId,const uint8 ServiceId,const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   810  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   811  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   812  #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   813       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   814  LOCAL_INLINE uint8 Adc_lCheckGrpIdleDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   815         const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   816  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   817  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   818  #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   819       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   820  LOCAL_INLINE uint8 Adc_lCheckGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   821         const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   822  LOCAL_INLINE uint8 Adc_lChkStartGrpConvGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   823    const Adc_GroupType GroupId, const Adc_GlobalDataType * const KernelDataPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   824    const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   825  LOCAL_INLINE uint8 Adc_lChkEnHwTrigGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   826    const Adc_GroupType GroupId, const Adc_GlobalDataType * const KernelDataPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   827    const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   828  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   829  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   830  #if( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   831       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   832        && (ADC_SYNC_CONV_ENABLE == STD_ON) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   833  LOCAL_INLINE uint8 Adc_lCheckSlaveGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   834                                               const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   835                                               const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   836                                               const uint8 ApiId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   837  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   838  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   839  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   840                                              (ADC_GRP_NOTIF_CAPABILITY ==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   841  LOCAL_INLINE uint8 Adc_lCheckNotifCapableDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   842         const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   843  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   844  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   845  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   846                                                     (ADC_HW_TRIGGER_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   847  LOCAL_INLINE uint8 Adc_lCheckWrongConvModeDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   848         const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   849  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   850  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   851  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   852  LOCAL_INLINE uint8 Adc_lCheckParamPointerDet( const void * const Ptr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   853                                                const uint8 ServiceId );
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   854  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   855  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   856  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   857                                          (ADC_LOW_POWER_STATE_SUPPORT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   858  LOCAL_INLINE uint8 Adc_lPreparePowerStateDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   859       const Adc_PowerStateType PowerState,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   860       Adc_PowerStateRequestResultType * const Result,const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   861  LOCAL_INLINE uint8 Adc_lSetPowerStateDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   862              Adc_PowerStateRequestResultType * const Result,const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   863              const uint32 TargetPwrState);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   864  LOCAL_INLINE uint8 Adc_lGetPowerStateDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   865                       const Adc_PowerStateType * const PowerState,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   866                       Adc_PowerStateRequestResultType * const Result,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   867                       const uint8 ServiceId,  const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   868  LOCAL_INLINE uint8 Adc_lCheckPowerStateNotSuppDet(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   869                  const Adc_PowerStateType PowerState,const uint8 ServiceId );
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   870  LOCAL_INLINE uint8 Adc_lCheckPeripheralPreparedDet(const uint32 TargetPwrState,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   871                                                     const uint8 ServiceId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   872  LOCAL_INLINE uint8 Adc_lCheckConverterOffDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   873                                               const uint8 ServiceId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   874  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   875  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   876  #if( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   877       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   878        && (ADC_LOW_POWER_STATE_SUPPORT == STD_ON) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   879  LOCAL_INLINE uint8 Adc_lCheckHwUnitDisEngagedDet(const uint8 ServiceId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   880                                                   const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   881  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   882  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   883  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   884  static void Adc_lReportError(const uint8 ApiId, const uint8 ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   885  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   886  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   887  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   888       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   889  static void Adc_lReportRuntimeDetError(const uint8 ApiId, const uint8 ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   890  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   891  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   892  #if( (ADC_MULTICORE_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   893       ((ADC_SAFETY_ENABLE == STD_ON) && (MCAL_NO_OF_CORES > ADC_ONE_U)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   894  static void Adc_lReportMulticoreError(const uint8 ApiId, const uint8 ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   895  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   896  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   897  #if ((ADC_CLC_FAILURE_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   898       (ADC_CONV_STOP_TIME_DEM_NOTIF == ADC_ENABLE_DEM_REPORT))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   899  static void Adc_lReportDemError(const Dem_EventIdType EventId,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   900  const Dem_EventStatusType EventStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   901  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   902  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   903  /********************* Local APIs for Init Check - Start***********************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   904  #if (ADC_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   905  LOCAL_INLINE Std_ReturnType Adc_lInitCheck(const uint32 CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   906  LOCAL_INLINE uint32 Adc_lCheckKernelSfr(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   907               const Adc_HwUnitCfgType *const KernelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   908               const uint32 KernelId, const uint32 CompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   909  LOCAL_INLINE uint32 Adc_lCheckGlobalSfr(const uint32 CompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   910  LOCAL_INLINE uint32 Adc_lCheckGlobalCoreVars(const uint32 CoreId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   911                                               const uint32 CompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   912  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   913  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   914  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   915  #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   916  LOCAL_INLINE uint32 Adc_lCheckGtmSfr (\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   917                     const Adc_HwUnitCfgType *const KernelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   918                     const uint32 CompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   919  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   920  LOCAL_INLINE uint32 Adc_lCheckEruSfr (\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   921              const Adc_HwUnitCfgType *const KernelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   922              const uint32 CompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   923  LOCAL_INLINE uint32 Adc_lCheckEruChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   924                       const Adc_EruChannelCfgType * const EruChannelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   925                       const uint32 CompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   926  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   927  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   928  Code Memory section naming as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   929  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   930  #define ADC_STOP_SEC_CODE_ASIL_B_GLOBAL
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   931  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   932  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   933  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   934  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   935  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   936  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   937  /************** Local APIs for DET checks - End**************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   938  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   939  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   940  **                      Global Variable Definitions                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   941  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   942  /*[cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   943  Variables Memory section as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   944  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   945  #if (ADC_KERNEL_USED_COUNT_CORE0 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   946  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_CORE0_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   947  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   948  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   949  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   950  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   951  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   952  static Adc_GlobalDataType Adc_KernelData_Core0[ADC_KERNEL_USED_COUNT_CORE0];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   953  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   954  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_CORE0_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   955  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   956  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   957  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   958  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   959  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   960  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   961  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   962  #if (MCAL_NO_OF_CORES > 1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   963  #if (ADC_KERNEL_USED_COUNT_CORE1 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   964  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   965  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   966  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   967  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   968  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   969  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   970  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   971  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   972  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_CORE1_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   973  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   974  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   975  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   976  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   977  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   978  static Adc_GlobalDataType Adc_KernelData_Core1[ADC_KERNEL_USED_COUNT_CORE1];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   979  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   980  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   981  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   982  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   983  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   984  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   985  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   986  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   987  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   988  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_CORE1_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   989  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   990  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   991  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   992  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   993  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   994  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   995  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   996  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   997  #if (MCAL_NO_OF_CORES > 2U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   998  #if (ADC_KERNEL_USED_COUNT_CORE2 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	   999  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1000  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1001  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1002  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1003  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1004  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1005  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1006  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1007  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_CORE2_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1008  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1009  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1010  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1011  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1012  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1013  static Adc_GlobalDataType Adc_KernelData_Core2[ADC_KERNEL_USED_COUNT_CORE2];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1014  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1015  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1016  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1017  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1018  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1019  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1020  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1021  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1022  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1023  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_CORE2_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1024  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1025  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1026  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1027  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1028  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1029  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1030  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1031  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1032  #if (MCAL_NO_OF_CORES > 3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1033  #if (ADC_KERNEL_USED_COUNT_CORE3 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1034  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1035  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1036  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1037  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1038  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1039  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1040  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1041  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1042  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_CORE3_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1043  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1044  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1045  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1046  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1047  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1048  static Adc_GlobalDataType Adc_KernelData_Core3[ADC_KERNEL_USED_COUNT_CORE3];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1049  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1050  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1051  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1052  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1053  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1054  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1055  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1056  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1057  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1058  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_CORE3_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1059  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1060  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1061  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1062  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1063  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1064  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1065  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1066  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1067  #if (MCAL_NO_OF_CORES > 4U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1068  #if (ADC_KERNEL_USED_COUNT_CORE4 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1069  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1070  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1071  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1072  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1073  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1074  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1075  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1076  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1077  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_CORE4_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1078  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1079  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1080  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1081  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1082  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1083  static Adc_GlobalDataType Adc_KernelData_Core4[ADC_KERNEL_USED_COUNT_CORE4];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1084  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1085  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1086  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1087  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1088  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1089  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1090  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1091  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1092  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1093  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_CORE4_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1094  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1095  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1096  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1097  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1098  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1099  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1100  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1101  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1102  #if (MCAL_NO_OF_CORES > 5U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1103  #if (ADC_KERNEL_USED_COUNT_CORE5 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1104  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1105  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1106  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1107  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1108  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1109  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1110  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1111  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1112  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_CORE5_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1113  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1114  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1115  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1116  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1117  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1118  static Adc_GlobalDataType Adc_KernelData_Core5[ADC_KERNEL_USED_COUNT_CORE5];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1119  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1120  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1121  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1122  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1123  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1124  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1125  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1126  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1127  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1128  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_CORE5_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1129  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1130  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1131  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1132  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1133  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1134  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1135  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1136  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1137  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1138  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1139  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1140  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1141  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1142  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1143  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1144  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1145  #define ADC_START_SEC_VAR_CLEARED_ASIL_B_GLOBAL_32
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1146  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1147  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1148  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1149  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1150  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1151  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1152  static const Adc_ConfigType *Adc_ConfigPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1153  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1154  #if((ADC_DEV_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1155      (ADC_SAFETY_ENABLE == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1156      (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1157  static Adc_InitStateType Adc_InitStatus[MCAL_NO_OF_CORES];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1158  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1159  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1160  #if(ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1161  static uint32 Adc_StartupCalStatus;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1162  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1163  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1164  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1165  static uint32 Adc_PowerStateTransitionRequestBit;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1166  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1167  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1168  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1169  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1170  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1171  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1172  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1173  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1174  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1175  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1176  #define ADC_STOP_SEC_VAR_CLEARED_ASIL_B_GLOBAL_32
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1177  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1178  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1179  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1180  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1181  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1182  /*[cover parentID={72DABBEB-F27B-4677-B6B4-B53F634341BA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1183  Variables Memory section as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1184  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1185  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1186  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1187  **                      Global Constant Definitions                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1188  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1189  /*[cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1190  Constant Memory section as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1191  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1192  #define ADC_START_SEC_CONST_ASIL_B_GLOBAL_8
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1193  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1194  guideline.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1195  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1196  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1197  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1198  /*MISRA2012_RULE_8_9_JUSTIFICATION: Variable not defined at block scope.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1199  The size of this array is derived from a configuration constant.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1200  The function uses this returns the address of this variable,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1201  and the content of the variable is changed from different APIs'*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1202  static const uint8 Adc_kKernelDataIndex[MCAL_NO_OF_CORES][ADC_MAX_KERNEL_ID] =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1203  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1204    { ADCX_KERNEL_INDEX_CORE0 }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1205    #if (MCAL_NO_OF_CORES > 1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1206    , { ADCX_KERNEL_INDEX_CORE1 }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1207    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1208    #if (MCAL_NO_OF_CORES > 2U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1209    , { ADCX_KERNEL_INDEX_CORE2 }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1210    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1211    #if (MCAL_NO_OF_CORES > 3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1212    , { ADCX_KERNEL_INDEX_CORE3 }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1213    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1214    #if (MCAL_NO_OF_CORES > 4U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1215    , { ADCX_KERNEL_INDEX_CORE4 }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1216    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1217    #if (MCAL_NO_OF_CORES > 5U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1218    , { ADCX_KERNEL_INDEX_CORE5 }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1219    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1220  };
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1221  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1222  /*MISRA2012_RULE_8_9_JUSTIFICATION: This constant cannot be defined at block
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1223  scope, since it is used in multiple functions. Also, since memmap pragmas cannot
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1224  be used at block scope it is necessary to keep this declaration at file scope.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1225  static const uint8 Adc_kKernelUsedCount[MCAL_NO_OF_CORES] =
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1226  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1227    ADC_KERNEL_USED_COUNT_CORE0
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1228    #if (MCAL_NO_OF_CORES > 1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1229    , ADC_KERNEL_USED_COUNT_CORE1
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1230    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1231    #if (MCAL_NO_OF_CORES > 2U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1232    , ADC_KERNEL_USED_COUNT_CORE2
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1233    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1234    #if (MCAL_NO_OF_CORES > 3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1235    , ADC_KERNEL_USED_COUNT_CORE3
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1236    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1237    #if (MCAL_NO_OF_CORES > 4U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1238    , ADC_KERNEL_USED_COUNT_CORE4
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1239    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1240    #if (MCAL_NO_OF_CORES > 5U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1241    , ADC_KERNEL_USED_COUNT_CORE5
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1242    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1243  };
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1244  /*[cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1245  Constant Memory section as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1246  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1247  #define ADC_STOP_SEC_CONST_ASIL_B_GLOBAL_8
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1248  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1249  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1250  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1251  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1252  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1253  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1254  /*[cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1255  Constant Memory section as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1256  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1257  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1258  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1259  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1260  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1261  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1262  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1263  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1264  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1265  #define ADC_START_SEC_CONST_ASIL_B_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1266  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1267  guideline.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1268  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1269  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1270  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1271  static Adc_GlobalDataType * const Adc_kKernelData[MCAL_NO_OF_CORES] =
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1272  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1273    #if (ADC_KERNEL_USED_COUNT_CORE0 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1274    &Adc_KernelData_Core0[0U]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1275    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1276    (Adc_GlobalDataType*)0U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1277    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1278    #if (MCAL_NO_OF_CORES > 1U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1279    #if (ADC_KERNEL_USED_COUNT_CORE1 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1280    , &Adc_KernelData_Core1[0U]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1281    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1282    , (Adc_GlobalDataType*)0U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1283    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1284    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1285    #if (MCAL_NO_OF_CORES > 2U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1286    #if (ADC_KERNEL_USED_COUNT_CORE2 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1287    , &Adc_KernelData_Core2[0U]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1288    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1289    , (Adc_GlobalDataType*)0U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1290    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1291    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1292    #if (MCAL_NO_OF_CORES > 3U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1293    #if (ADC_KERNEL_USED_COUNT_CORE3 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1294    , &Adc_KernelData_Core3[0U]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1295    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1296    , (Adc_GlobalDataType*)0U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1297    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1298    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1299    #if (MCAL_NO_OF_CORES > 4U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1300    #if (ADC_KERNEL_USED_COUNT_CORE4 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1301    , &Adc_KernelData_Core4[0U]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1302    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1303    , (Adc_GlobalDataType*)0U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1304    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1305    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1306    #if (MCAL_NO_OF_CORES > 5U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1307    #if (ADC_KERNEL_USED_COUNT_CORE5 > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1308    , &Adc_KernelData_Core5[0U]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1309    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1310    , (Adc_GlobalDataType*)0U
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1311    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1312    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1313  };
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1314  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1315  /*[cover parentID={5713A17A-3FA1-427f-A0B6-89125A17689A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1316  Constant Memory section as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1317  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1318  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1319  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1320  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1321  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1322  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1323  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1324  /*MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1325  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1326  #define ADC_STOP_SEC_CONST_ASIL_B_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1327  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1328  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1329  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1330  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1331  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1332  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1333  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1334  **                      Global Function Definitions                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1335  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1336  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1337  Code Memory section naming as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1338  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1339  /*[cover parentID={BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1340  Code Memory section executable by all cores
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1341  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1342  #define ADC_START_SEC_CODE_ASIL_B_GLOBAL
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1343  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1344  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1345  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1346  guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1347  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1348  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1349  ** Traceability: [cover parentID={71F84EBA-6E78-4178-8A14-339C88B58F59},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1350                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1351  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1352  ** Syntax           : void Adc_Init                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1353  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1354  **                      const Adc_ConfigType * const ConfigPtr                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1355  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1356  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1357  ** Description      : This API initializes the ADC hardware units and clear   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1358  **                    global variables to their reset state. The SFRs of the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1359  **                    configured kernels are first reset to default values and**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1360  **                    then initialized as per the configuration.              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1361  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1362  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1363  ** Service ID       : 0x00                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1364  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1365  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1366  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1367  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1368  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1369  ** Parameters(in)   : ConfigPtr - Pointer to ADC configuration Set            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1370  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1371  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1372  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1373  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1374  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1375  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1376  void Adc_Init(const Adc_ConfigType * const ConfigPtr)
; Function Adc_Init
.L87:
Adc_Init:	.type	func
	mov.aa	a15,a4
.L755:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1377  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1378    uint32 lClcReadBack;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1379    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1380    uint32 lClcDemErr = 0U;
	mov	d8,#0
.L756:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1381  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1382    /* [cover parentID={265B2B2A-70F9-4640-8FF7-B4DFF47A79FC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1383    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1384    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1385    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1386    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1387  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1388    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1389    lCoreId = Mcal_GetCpuIndex();
	call	Mcal_GetCpuIndex
.L754:
	mov	d9,d2
.L758:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1390  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1391    /* [cover parentID={265B2B2A-70F9-4640-8FF7-B4DFF47A79FC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1392    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1393    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1394    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1395    lDetVal = Adc_lInitDetCheck(ConfigPtr, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1396    /* [cover parentID={0F45BB53-CBC2-4ea9-A568-68B0DCBC9FD6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1397    Init DET Error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1398    if(ADC_E_NO_ERR == lDetVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1399    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1400    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1401      /* [cover parentID={B0535324-DA26-4b89-B672-BB4B60F5F2CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1402      Is CoreId is equal to Master CoreId [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1403      if (MCAL_MASTER_COREID == lCoreId)
	jne	d9,#0,.L2
.L951:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1404      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1405        /* [cover parentID={43914327-20BF-482c-90FA-8640C7819CF1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1406        Enable module clock via CLC [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1407        ADC_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&MODULE_EVADC.CLC, \ 
	movh.a	a4,#61442
	mov	d4,#0
	call	Mcal_WritePeripEndInitProtReg
.L757:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1408            ((uint32)ADC_SLEEP_MODE_CFG << IFX_EVADC_CLC_EDIS_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1409  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1410        /* Time required to set Safety Endinit should be sufficient for CLC
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1411         to be enabled*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1412        lClcReadBack = (uint32)MODULE_EVADC.CLC.U;
	movh.a	a2,#61442
	ld.w	d15,[a2]
.L759:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1413  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1414        /* [cover parentID={DCB12A31-B477-4f5d-B9BE-622F30A22561}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1415           Clock Enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1416        if((lClcReadBack &\ 
	jnz.t	d15:1,.L3
.L952:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1417            ((uint32)IFX_EVADC_CLC_DISS_MSK << IFX_EVADC_CLC_DISS_OFF)) == \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1418            (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1419        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1420          /* [cover parentID={9AE22EA1-E7A0-4bf4-8070-4463F89E2F22}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1421             Production Error NOTIFY is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1422          #if (ADC_CLC_FAILURE_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1423          /* [cover parentID={3ED1D538-A90C-47be-937A-E329380EACC9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1424          Report Production error PASS when CLC enabling is successful [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1425          Adc_lReportDemError(ADC_E_CLC_FAILURE, DEM_EVENT_STATUS_PASSED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1426          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1427          /* Store the config pointer passed */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1428          Adc_ConfigPtr = ConfigPtr;
	movh.a	a2,#@his(Adc_ConfigPtr)
.L953:
	st.a	[a2]@los(Adc_ConfigPtr),a15
.L954:
	j	.L4
.L3:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1429        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1430        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1431        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1432          #if (ADC_CLC_FAILURE_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1433          /* [cover parentID={260003D2-19DE-4254-B9CD-CBE0CED64AEC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1434          Report Production error FAIL when CLC enabling fails [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1435          Adc_lReportDemError(ADC_E_CLC_FAILURE, DEM_EVENT_STATUS_FAILED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1436          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1437          lClcDemErr = (uint32)ADC_ONE_U;
	mov	d8,#1
.L4:
.L2:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1438        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1439      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1440      /* [cover parentID={5E3D5269-76D2-4513-BDDE-A8C7133D22C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1441      Production Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1442      if(0U == lClcDemErr)
	jne	d8,#0,.L5
.L257:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1443      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1444        /* [cover parentID={163DEC39-F738-41af-BA81-9C2989887BEA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1445           Initialize Module(Initialize all kernels on slave cores) [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1446        Adc_lInit(lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1447  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1448        /* [cover parentID={D7A46752-B8C0-451b-B12D-DB11CF2D43F2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1449        DET is ON or SAFETY is ON or InitCheck is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1450        #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1451             (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1452        /* [cover parentID={38B9C750-90E1-416a-8103-3C3C6DA6A951}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1453        Set Driver state to Initialized after complete intialization is done
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1454        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1455        Adc_InitStatus[lCoreId] = ADC_INITIALIZED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1456        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1457      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1458    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1459  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1460  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1461  #if (ADC_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1462  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1463  ** Traceability: [cover parentID={17FDEC48-F0CE-4e73-84BE-035E6D26D973},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1464                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1465  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1466  ** Syntax           : Std_ReturnType Adc_InitCheck                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1467  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1468  **                      const Adc_ConfigType * const ConfigPtr                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1469  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1470  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1471  ** Description      : This API returns the status of the modules              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1472  **                    initialization in context to the core from where the    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1473  **                    API is invoked. The API is available when safety is     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1474  **                    enabled or initialization check is explicitly enabled   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1475  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1476  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1477  ** Service ID       : 0x32                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1478  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1479  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1480  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1481  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1482  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1483  ** Parameters(in)   : ConfigPtr - Pointer to ADC configuration Set            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1484  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1485  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1486  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1487  ** Return value     : E_OK: Initialization verification passed                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1488  **                    E_NOT_OK: Initialization verification failed            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1489  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1490  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1491  Std_ReturnType Adc_InitCheck(const Adc_ConfigType * const ConfigPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1492  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1493    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1494    uint32 lCoreId, lSfrVal, lCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1495    uint32 lCompareFlag = 0xFFFFFFFFU;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1496  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1497    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1498    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1499  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1500    /* [cover parentID={08AB50A2-7A67-4897-8791-1F5AD50EDF45}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1501    Config Ptr is NULL or ADC module is not initialized [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1502    if((ConfigPtr == NULL_PTR) || (Adc_InitStatus[lCoreId] != ADC_INITIALIZED))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1503    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1504      /* Update E_NOT_OK if Configuration pointer is NULL pointer */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1505      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1506    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1507    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1508    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1509      /* [cover parentID={4ECC285C-8347-415b-8AE9-74F960574971}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1510      Compare global clock control register with configuration value & Update
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1511      flag as per result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1512      lSfrVal = ((uint32)MODULE_EVADC.CLC.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1513      lCfgVal = ((uint32)ADC_SLEEP_MODE_CFG << IFX_EVADC_CLC_EDIS_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1514      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1515  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1516      /* [cover parentID={481847AE-B054-477f-B64A-C5F2B4721CA1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1517      Is global clock control regiter initialized properly [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1518      if (lCompareFlag == 0xFFFFFFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1519      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1520        /* [cover parentID={33F11E5D-0539-4d40-842A-DA5E3DA0F3E6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1521        Perform Initialization check for all kernels on slave cores [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1522        lRetVal = Adc_lInitCheck(lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1523      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1524      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1525      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1526        /* [cover parentID={EFD20EAF-760A-4aba-A712-7F7F9ADDD92C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1527        Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1528        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1529      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1530    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1531    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1532  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1533  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1534  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1535  #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1536  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1537  ** Traceability: [cover parentID={71C95AFB-3C66-4bb7-A52E-7A871CE34B6C},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1538                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1539  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1540  ** Syntax           : Std_ReturnType Adc_SetupResultBuffer                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1541  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1542  **                      const Adc_GroupType Group,                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1543  **                      const Adc_ValueGroupType *const DataBufferPtr         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1544  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1545  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1546  ** Description      : This API sets up the start address of group specific    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1547  **                    result buffers, where the conversion results will be    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1548  **                    stored. The application has to ensure that the          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1549  **                    application buffer, where DataBufferPtr points to, can  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1550  **                    hold all the conversion results of the specified group. **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1551  **                    Note: This API is not available when                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1552  **                    AdcResultHandlingImplementation is set to DMA mode of   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1553  **                    result handling. In this scenario the start of the      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1554  **                    application result buffer is provided via DMA channels  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1555  **                    destination address.                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1556  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1557  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1558  ** Service ID       : 0x0C                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1559  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1560  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1561  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1562  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1563  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1564  ** Parameters(in)   : Group - Numeric ID of requested ADC channel group.,     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1565  **                  DataBufferPtr - Pointer to the start of result data buffer**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1566  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1567  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1568  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1569  ** Return value     : Std_ReturnType                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1570  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1571  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1572  Std_ReturnType Adc_SetupResultBuffer(const Adc_GroupType Group,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1573                                  const Adc_ValueGroupType * const DataBufferPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1574  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1575    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1576    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1577    uint32 lKernelId, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1578    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1579    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1580       (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1581    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1582    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1583    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1584    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1585    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1586  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1587    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1588    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1589    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1590    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1591  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1592    /* [cover parentID={C4FA5630-B542-4d4e-A511-5E3D858A0872}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1593    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1594    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1595    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1596    lErrVal = Adc_lSetupResBufDetCheck(lKernelId,lGroupId,DataBufferPtr,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1597    /* [cover parentID={3E1EB63D-A4FF-4308-9D51-DA8792EE97AB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1598    DET or Safety Error Occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1599    if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1600    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1601      /* [cover parentID={05F4AF9B-F7AD-4e27-A7E5-3102F3BEEE59}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1602      Return value as E_NOT_OK  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1603      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1604    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1605    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1606    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1607    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1608      /* [cover parentID={0748CF11-2366-498e-8A2F-DF2E61C8E666}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1609      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1610      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1611      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1612          ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1613      /* Group should be IDLE mode to set up the result buffer*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1614      /* [cover parentID={0C8821B8-6060-4357-A28B-CC4E3E758829},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1615      {184D4C05-26C3-48f1-9F79-00A963B97CB1}] Start of Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1616      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1617  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1618      /* Check Group Busy Development or Safety or Runtime Error */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1619      lErrVal = Adc_lCheckGrpBusyDet(lKernelId, lGroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1620                                   ADC_SID_SETUP_RESULT_BUFFER, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1621      /* [cover parentID={32D4AD11-D8C4-4e2e-B459-765AF13034B6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1622      DET Error or Safety Error or Runtime Error Occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1623      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1624      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1625        /* [cover parentID={B177E473-BA16-4f24-9C30-4A7F0E54E39D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1626        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1627        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1628        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1629        /* [cover parentID={05F4AF9B-F7AD-4e27-A7E5-3102F3BEEE59}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1630        Return value as E_NOT_OK  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1631        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1632      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1633      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1634      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1635      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1636        /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1637        lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1638  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1639        /*Since the group result pointer and No of valid conversion are
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1640        updated in ISR, they are accessed under critical section*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1641        /* [cover parentID={C42C87AC-7CDC-48db-A190-A366A337A3EC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1642        Critical Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1643        /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1644        #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1645        /* [cover parentID={C942C156-DD60-4cfd-8DD0-56048F102B70}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1646        DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1647        #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1648        /* [cover parentID={DA73DEAE-5FA5-455a-898A-8EA4AC80FFE2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1649        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1650            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1651        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1652        /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1653        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1654        /* [cover parentID={C942C156-DD60-4cfd-8DD0-56048F102B70}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1655        Runtime error detection is OFF and Safety is OFF when Autosar version is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1656        4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1657        #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1658        /* [cover parentID={DA73DEAE-5FA5-455a-898A-8EA4AC80FFE2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1659        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1660            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1661        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1662        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1663  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1664        /* MISRA2012_RULE_11_8_JUSTIFICATION: The address of the buffer pointer
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1665        is received as a const, so that it cannot be modified in the APIs context.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1666        The address is stored to a pointer variable, and the pointer is later used
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1667        in the ISR to update the results to the intial buffer address passed.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1668        Hence, the pointer variable cannot be made as a pointer to a const and the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1669        type cast is required*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1670        /* [cover parentID={D295EE51-F0BC-4526-AE5A-E8D808B18F72}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1671        Initialize the Result buffer pointer in the Kernel data pointer with
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1672        buffer address passed [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1673        lKernelDataPtr->GrpResBuffer[lGroupId] \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1674         = (Adc_ValueGroupType *)DataBufferPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1675        /* Reset Next Buffer Position and Valid Result count to 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1676        lKernelDataPtr->NumofValidConRes[lGroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1677  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1678        /* [cover parentID={CA863247-EC61-44e5-BA74-EDDD2A2F9519}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1679        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1680        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1681  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1682        /* [cover parentID={FA7C9F21-8DC6-4d1f-AFE3-4CE8DFEEF8D4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1683        Return value as E_OK  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1684        lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1685      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1686    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1687    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1688  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1689  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1690  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1691  #if (ADC_DEINIT_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1692  /*CYCLOMATIC_Adc_DeInit_JUSTIFICATION: This API resets all SFRs of the kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1693  configured by Adc_Init to their reset states and performs the DET or Safety or
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1694  Multi-core DET or Runtime Error check for AR422 and AR440 based on the enable
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1695  of pre-compile macros. The different if conditions cause the complexity to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1696  increase, but actually during run-time out of all if conditions many will be
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1697  pre-compile time removed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1698  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1699  ** Traceability: [cover parentID={D9AF4C1E-0A23-422b-BA5D-C5AC306804D6},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1700                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1701  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1702  ** Syntax           : void Adc_DeInit                                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1703  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1704  **                      void                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1705  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1706  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1707  ** Description      : This API resets all SFRs of the kernels                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1708  **                    configured by Adc_Init to their reset states. It also   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1709  **                    resets the global SFR's (common to all Kernels) of the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1710  **                    EVADC IP.                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1711  **                    Note: SFRs of kernels not configured by Adc_Init are    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1712  **                    not de-initialized by this API                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1713  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1714  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1715  ** Service ID       : 0x01                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1716  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1717  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1718  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1719  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1720  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1721  ** Parameters(in)   : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1722  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1723  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1724  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1725  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1726  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1727  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1728  void Adc_DeInit(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1729  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1730  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1731    uint32 lKernelCount, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1732    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1733       (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1734    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1735    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1736    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1737    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1738    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1739  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1740    /* [cover parentID={74107589-AA9E-4602-B8FD-77A09A071DB8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1741    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1742    #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1743    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1744    lErrVal = Adc_lDeInitDetCheck(lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1745    /* [cover parentID={3F5A3FD1-8A86-47f8-9EB5-2CE3122062F1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1746    DET Error Occured  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1747    if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1748    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1749    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1750      /* [cover parentID={3EEB6BC4-5154-4769-92EC-5D2887C311DF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1751      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1752      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1753      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1754          ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1755      /* [cover parentID={813CE5A2-A62C-481b-95A0-C06467FF15B5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1756      Check Group Busy Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1757      lErrVal = Adc_lCheckGrpBusyDet((uint32)0U, (Adc_GroupType)0U, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1758                                     ADC_SID_DEINIT, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1759      /* [cover parentID={0C748293-212B-4db9-987A-A2BE108F6E82}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1760      Error Occured  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1761      if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1762      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1763      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1764        /* [cover parentID={0B994985-FF23-40d5-BA48-AA1402CE5936}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1765        InitCheck is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1766        #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1767             (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1768        /* [cover parentID={4610E680-11B9-445e-AACA-DE381AF68623}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1769        Set driver state to uninitialization started  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1770        Adc_InitStatus[lCoreId] = ADC_UNINIT_STARTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1771        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1772        /* [cover parentID={A039D7F2-BF9F-4b72-9F2A-3C053ED8B417}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1773        Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1774        for(lKernelCount = (uint32)0U; lKernelCount < ADC_MAX_KERNEL_ID; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1775            lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1776        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1777          /* [cover parentID={DF5B2276-B58A-4d33-A1E8-0F499DE4817E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1778          Check if Kernel is Configured   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1779          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1780              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1781          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1782            /* [cover parentID={8D0724BF-AD7C-4f3c-BE10-D2BFC02F535A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1783            De-Initialize the Kernels  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1784            Adc_lKernelDeInit(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1785                              HwUnitCfgPtr[lKernelCount], lKernelCount);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1786          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1787        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1788        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1789        Adc_lResetCoreGlobalVars(lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1790        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1791        /* [cover parentID={A4EC70D5-D95E-4d22-9957-F3109043EBF6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1792        Is CoreId is equal to Master CoreId  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1793        if (MCAL_MASTER_COREID == lCoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1794        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1795          Adc_lResetGlobalSfr();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1796          /* [cover parentID={F0F424B3-F905-448c-9E3C-4EA662D0968D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1797          Disable the Module clock [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1798          ADC_INIT_DEINIT_WRITE_PERIP_ENDINIT_PROTREG(&MODULE_EVADC.CLC,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1799                           ((uint32)ADC_CLC_DEFAULT_VALUE));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1800        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1801          /* Store Config pointer locally & Reset Config pointer to NULL */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1802          Adc_ConfigPtr = NULL_PTR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1803        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1804          /* [cover parentID={CF45F919-D987-49a5-B581-368572475EC3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1805          ADC StartUp Calib API is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1806          #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1807          /* [cover parentID={66ED1E1A-B9D4-4591-A122-F22588CB474C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1808          Clear Start-up Calibration status   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1809          Adc_lClrStartupCalStatusAtomic();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1810          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1811        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1812        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1813        /* [cover parentID={77CC7F2A-640E-46ef-983E-53B31D538FD7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1814        DET is on or Safety is on or InitCheck is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1815        #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1816             (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1817        /* [cover parentID={23F60A58-3CC8-41a4-8F83-6CFE1C0815CA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1818        Set driver state to uninitialization completed  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1819        Adc_InitStatus[lCoreId] = ADC_UNINIT_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1820        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1821      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1822    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1823  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1824  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1825  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1826  #if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1827  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1828  ** Traceability: [cover parentID={418D22C8-F770-43f0-81B4-E682075DB2FB},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1829                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1830  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1831  ** Syntax           : void Adc_StartGroupConversion                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1832  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1833  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1834  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1835  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1836  ** Description      : This API setups the group for conversion and starts the **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1837  **                    conversion of the requested ADC Channel group           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1838  **                    Note: This API is available only when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1839  **                    AdcEnableStartStopGroupApi is configured as true.       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1840  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1841  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1842  ** Service ID       : 0x02                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1843  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1844  ** Sync/Async       : Asynchronous                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1845  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1846  ** Reentrancy       : Reentrant for channel groups executing on different     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1847  **                    ADC hardware groups                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1848  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1849  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1850  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1851  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1852  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1853  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1854  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1855  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1856  void Adc_StartGroupConversion(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1857  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1858    uint32 lKernelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1859    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1860    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1861    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1862       (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1863    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1864    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1865    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1866    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1867    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1868  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1869    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1870    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1871    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1872    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1873  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1874    /* [cover parentID={DCAEA4B1-7EF7-4faa-A4D4-92FBDB7EF1EC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1875    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1876    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1877    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1878    lErrVal = Adc_lStartGrpConvDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1879    /* [cover parentID={0FD80C79-2495-4a40-8FC1-FF8FC4D7F58B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1880    Start Group Conversion DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1881    if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1882    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1883    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1884      /* [cover parentID={6985491E-5295-4f78-99E7-AFBBD2AA4161}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1885      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1886      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1887      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1888          ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1889      /* [cover parentID={E429EE92-D946-4277-BBDD-0C2730124703}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1890      Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1891      /* [cover parentID={C2F4CCFB-3F72-4022-98BF-91CB610407B2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1892      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1893      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1894      /* [cover parentID={0D36E639-7F77-45c4-ABCC-0877ACCE83A6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1895      Check Group Busy Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1896      lErrVal = Adc_lCheckGrpBusyDet(lKernelId, lGroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1897                                     ADC_SID_START_GROUP_CONVERSION, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1898      /* [cover parentID={33ED6712-5BBD-45d0-957E-2F73F9D44BEB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1899      Group Busy DET Error or Runtime Error occurred  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1900      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1901      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1902        /* [cover parentID={03F1F210-F323-480c-BD91-A59042F8078B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1903        End of Critical Section - DET Fails   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1904        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1905      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1906      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1907      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1908      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1909        /* [cover parentID={DDBC41ED-57D8-40dd-A755-093C4D882733}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1910        Is QUEUE mode is ON or Prioirty mode is ON? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1911        /* [cover parentID={F2316B53-0A22-46f6-92F3-3A6D00F5347A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1912        Priority is ON or Queueing Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1913        /* [cover parentID={0F8BD0DA-0610-4000-BA24-345BF5CF286C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1914        Critical Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1915        #if((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1916          (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1917        /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1918        #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1919        /* [cover parentID={FD9EAFBA-FD62-44f6-931F-6136F02FFE81}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1920        DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1921        #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1922        /* [cover parentID={0809F1F3-E9D6-4cbe-B3BB-AB712BCB05F2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1923        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1924            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1925        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1926        /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1927        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1928        /* [cover parentID={FD9EAFBA-FD62-44f6-931F-6136F02FFE81}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1929        Runtime error detection is OFF and Safety is OFF when Autosar version is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1930        4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1931        #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1932        /* [cover parentID={0809F1F3-E9D6-4cbe-B3BB-AB712BCB05F2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1933        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1934            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1935        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1936        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1937  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1938        /* [cover parentID={5E6A4B52-D00B-4ed3-A330-125384143CF1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1939        HW-SW Priority mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1940        #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1941        /* [cover parentID={202CCC8E-3ECF-49eb-8C44-ACA3C71EB606}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1942        Start or Push the group to pending queue. Group is started immediately
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1943        if group priority is high enough. Otherwise pushed to queue.[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1944        Adc_lSchedulerOnStart(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1945        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1946        /* [cover parentID={4C7F40DF-D777-448b-BCA9-CE3A2944BBC2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1947        If Priority mode is not HW-SW [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1948        /* [cover parentID={7C54FA60-7BD6-40ac-849F-449C2F159585}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1949        Push the group on to the SW queue,groups is started immediately if the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1950        SW queue is currently empty [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1951        Adc_lPushToQueue(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1952        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1953        /* [cover parentID={94F5EFF2-C8D9-4489-8760-05D0599F1D49}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1954        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1955        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1956        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1957          /* [cover parentID={7601EE44-4702-48e5-81D3-4F5F858EB687}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1958          Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1959          /* [cover parentID={06321113-3138-4d36-BDA0-C63267164A34}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1960          Priority is OFF and Queueing Mode is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1961          Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1962          const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1963  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1964          /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1965          lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1966          /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1967          lGrpCfgPtr =  &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1968                        HwUnitCfgPtr[lKernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1969          /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1970          #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1971          /* [cover parentID={A83AB12D-DCF7-4068-8982-57CE604230AA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1972          DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1973          #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1974          /* [cover parentID={317E77C4-6A4C-4651-AF6F-A8326BAEA08D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1975          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1976              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1977          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1978          /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1979          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1980          /* [cover parentID={A83AB12D-DCF7-4068-8982-57CE604230AA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1981          Runtime error detection is OFF and Safety is OFF when Autosar version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1982          is 4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1983          #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1984          /* [cover parentID={317E77C4-6A4C-4651-AF6F-A8326BAEA08D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1985          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1986              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1987          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1988          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1989  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1990          /* [cover parentID={5FB9F609-8602-4f3e-B2F8-825BDB0C3A15}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1991          Update group status to Busy  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1992          Adc_lSetGroupStatusBusyAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1993          /* [cover parentID={CF8926FF-AA60-47f5-AE94-CA6848C8F031}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1994          Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1995          Adc_lClrGroupResultAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1996          /* [cover parentID={50225A65-95E3-4b43-BEE5-D9A95E21206B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1997          Clear Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1998          Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  1999          /* [cover parentID={E9AB2CCE-378C-458c-96E1-92183075AD4C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2000          DMA Mode Result handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2001          #if (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2002          /* [cover parentID={E0DC4985-586E-443c-879B-BF1002A56C73}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2003          Reset conversion result count to 0  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2004          lKernelDataPtr->NumofValidConRes[lGroupId]=(Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2005          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2006          /* Update the Active group ID to RS runtime data */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2007          lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].ActiveGroupId=lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2008          /* [cover parentID={07586FF7-EBDA-4f0f-8B4F-6FE357CA9D28}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2009          Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2010          #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2011  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2012          /* [cover parentID={BDF33F98-09C5-4083-8252-3B3DC2C036F9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2013          Set flags for used channels and result registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2014          Adc_lSetRunningChAndResReg(lKernelId, lGrpCfgPtr, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2015          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2016  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2017          /* [cover parentID={36F6A462-B4BD-4799-BF09-4BE4F5AB7436}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2018          Limit check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2019          #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2020          if((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2021          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2022            /* [cover parentID={C69539FF-5198-44a4-B790-00AB467A7290}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2023            Update Analog channel to Active limit check channel  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2024            lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].ActiveLimitChkCh=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2025               lGrpCfgPtr->GroupDefinition[0U].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2026          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2027          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2028  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2029          /* [cover parentID={C769C69D-B8A2-44e2-A578-65AF23708650}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2030          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2031          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2032  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2033          /* [cover parentID={C51653C3-9C21-47ce-97C1-48D697467DC7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2034          Prepare Group to Start Conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2035          Adc_lPrepareGrpForStart(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2036  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2037          /* Enable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2038          lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].IsrNoServiceFlag =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2039                                                                       (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2040  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2041          /* [cover parentID={95CF0562-D281-4675-AB91-B896428C7B90}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2042          Start Software Conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2043          Adc_lStartSwConversion(lGrpCfgPtr,lKernelId,lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2044        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2045      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2046    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2047  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2048  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2049  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2050  #if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2051  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2052  ** Traceability: [cover parentID={84B9A797-BC16-44b2-8F17-4DCF01C31957},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2053                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2054  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2055  ** Syntax           : void Adc_StopGroupConversion                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2056  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2057  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2058  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2059  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2060  ** Description      : This API stops the conversion of the requested ADC      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2061  **                    Channel group                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2062  **                    Note: This API is available only when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2063  **                    AdcEnableStartStopGroupApi is configured as true.       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2064  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2065  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2066  ** Service ID       : 0x03                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2067  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2068  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2069  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2070  ** Reentrancy       : Reentrant for channel groups executing on different     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2071  **                    ADC hardware groups                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2072  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2073  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2074  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2075  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2076  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2077  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2078  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2079  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2080  void Adc_StopGroupConversion(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2081  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2082    uint32 lKernelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2083    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2084    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2085    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2086       (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2087    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2088    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2089    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2090    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2091    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2092  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2093    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2094    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2095    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2096    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2097  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2098    /* [cover parentID={7516362E-46BF-46a1-BC5C-09CEF6D0530E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2099    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2100    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2101    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2102    lErrVal = Adc_lStopGrpConvDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2103    /* [cover parentID={61E9A506-8660-4ed7-A71B-9D31E297905E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2104    Stop Group Conversion DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2105    if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2106    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2107    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2108      /* [cover parentID={91E623DE-8F0C-481a-BD19-AADA54315192}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2109      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2110      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2111      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2112          ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2113      /* [cover parentID={9C5A9F2E-7FBD-450d-B75D-06782D8AD650}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2114      Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2115      /* [cover parentID={F60DC1A1-E90D-46d0-910D-BC0D27A7C353}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2116      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2117      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2118      /* [cover parentID={85852DB9-A183-4bae-AAFF-4745D38748AC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2119      Check Group Idle Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2120      lErrVal = Adc_lCheckGrpIdleDet(lKernelId,lGroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2121                                     ADC_SID_STOP_GROUP_CONVERSION,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2122      /* [cover parentID={92F4E292-D415-4e86-8CD9-00400CB73753}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2123      Group Idle DET Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2124      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2125      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2126        /* [cover parentID={DABB487C-5EF8-47dd-BFB5-2398EBE14C9A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2127        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2128        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2129      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2130      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2131      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2132      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2133        /* [cover parentID={0937961C-E815-47ae-B16C-0FAE5192EDA0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2134        Is QUEUE mode is ON or Prioirty mode is ON? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2135        /* [cover parentID={EA723BE7-2E7D-4b4f-9C4D-5AA1AC644536}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2136        Priority is ON or Queueing Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2137        /* [cover parentID={CF3DB727-B8A7-4f49-BC41-97F36E2702CA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2138        Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2139        #if((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2140            (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2141          /* Pop/remove the group on to the SW queue,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2142             groups has to be stopped if the group is at the currently
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2143             converting*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2144          /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2145          #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2146          /* [cover parentID={30A9E5E8-7CB4-4144-ABB3-E79C4D6B5912}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2147          DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2148          #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2149          /* [cover parentID={0784FC96-97DD-4f70-9E6E-46C21CA6966E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2150          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2151              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2152          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2153          /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2154          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2155          /* [cover parentID={30A9E5E8-7CB4-4144-ABB3-E79C4D6B5912}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2156          Runtime error detection is OFF and Safety is OFF when Autosar version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2157          is 4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2158          #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2159          /* [cover parentID={0784FC96-97DD-4f70-9E6E-46C21CA6966E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2160          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2161              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2162          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2163          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2164          /* [cover parentID={6B7AE267-786F-42bb-A978-EF5C65D502CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2165          HW-SW Priority mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2166          #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2167          /* [cover parentID={6146A481-1118-4316-B0FA-52E4C373D8C6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2168          Stop the current executing Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2169          Adc_lSchedulerOnStop(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2170          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2171          /* [cover parentID={BC357ECE-3BED-4e56-AA15-FA30DE028735}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2172          If priority mode is not HW-SW [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2173          /* [cover parentID={C31902EF-0257-43ef-9116-7EC0EE7F6BB8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2174          Pop from Queue   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2175          Adc_lPopFromQueue(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2176          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2177          /* [cover parentID={81AAB971-B0F4-4d87-AE21-A09AD5C66031}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2178          Stop of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2179          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2180        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2181          /* [cover parentID={68AF9EAC-B422-4c3e-A183-4E1D175191CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2182          Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2183          /* [cover parentID={93DCFB11-EDB3-413a-8150-755D307240E9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2184          Priority is OFF and Queueing Mode is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2185          Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2186          const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2187  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2188          /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2189          lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2190          /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2191          lGrpCfgPtr =  &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2192                      HwUnitCfgPtr[lKernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2193          /* [cover parentID={68AF9EAC-B422-4c3e-A183-4E1D175191CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2194          Critical Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2195          /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2196          #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2197          /* [cover parentID={CEE10FF2-5117-4290-A990-06E850D970ED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2198          DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2199          #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2200          /* [cover parentID={460AA140-A6AE-4ff4-82FD-0428DB769B1E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2201          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2202              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2203          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2204          /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2205          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2206          /* [cover parentID={CEE10FF2-5117-4290-A990-06E850D970ED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2207          Runtime error detection is OFF and Safety is OFF when Autosar version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2208          is 4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2209          #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2210          /* [cover parentID={460AA140-A6AE-4ff4-82FD-0428DB769B1E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2211          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2212              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2213          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2214          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2215  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2216          /* [cover parentID={0F079DF2-1084-4f77-A50B-55D33D100925}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2217          Is Group BUSY [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2218          if(Adc_lGetGroupStatus(lKernelDataPtr, lGroupId) == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2219          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2220            /* Disable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2221            lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].IsrNoServiceFlag = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2222                (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2223            /* [cover parentID={8337A4D3-13C8-4b99-A434-512B59190A88}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2224            End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2225            SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2226            /* [cover parentID={9289BE75-94A0-474e-A387-90C626497108}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2227            Stop the ongoing conversions  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2228            Adc_lStopConvRequest(lGrpCfgPtr, lKernelId, lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2229            /* Remove Active Group ID from the Global Kernel Data */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2230            Adc_lRemoveActiveGroup(lKernelDataPtr, lGrpCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2231                                   lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2232            /* [cover parentID={3B38E039-C5D0-42f6-8AFD-7FA6DB4605FF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2233            Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2234            #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2235            /* [cover parentID={C4461D25-A160-4829-9411-5BB53A325FE1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2236            Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2237            /* [cover parentID={EF1BED9C-EF61-494f-A2B2-4B2B3498E815}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2238            Start of Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2239            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2240            /* [cover parentID={55A455D7-F417-4ab4-B3A9-FC9BC8789CD8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2241            Clear channels & Result registers flags [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2242            Adc_lClrRunningChAndResReg(lKernelId, lGrpCfgPtr, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2243            /* [cover parentID={661B00D5-69DE-46c7-8615-53F5219B9714}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2244            Stop of Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2245            SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2246            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2247          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2248          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2249          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2250            /* [cover parentID={003549AB-BBC9-4ba3-86E2-36A4C8FEC2AB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2251            End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2252            SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2253          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2254          /* [cover parentID={78724D8F-29AA-44d3-ADE4-9C961C963946}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2255          Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2256          /* [cover parentID={650AEEB7-D0EB-4819-85E0-53F71698E4F0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2257          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2258          SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2259          /*Restore group status to IDLE*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2260          /* [cover parentID={9B2933E7-7ADB-41ed-8E5F-8AB94A0BB545}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2261          Clear Group Status busy [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2262          Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2263          /* [cover parentID={10818040-27C2-4431-A4BB-B9DFBF0D22D6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2264          Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2265          Adc_lClrGroupResultAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2266          /* [cover parentID={43348CDF-11D8-483b-AB54-8603AE2622B1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2267          Clear Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2268          Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2269          /* [cover parentID={70526CB9-929B-4274-9FBB-9760DAE6BECC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2270          DMA Mode Result handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2271          #if (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2272          /* [cover parentID={456AAED6-3818-4a05-8494-0CD92A303E46}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2273          Reset conversion result count to 0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2274          lKernelDataPtr->NumofValidConRes[lGroupId] \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2275            = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2276          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2277          /* [cover parentID={4EE741C1-1CC9-4645-A953-08206478559A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2278          Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2279          #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2280          /* [cover parentID={8D487EC3-401A-45bc-B648-1ECB956680C3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2281          Disable group notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2282          Adc_lClrGrpNotifAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2283          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2284          
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2285          /* [cover parentID={953A283E-7D52-4863-A87A-29A7B989B5C3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2286          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2287          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2288        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2289      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2290    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2291  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2292  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2293  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2294  #if ((ADC_READ_GROUP_API == STD_ON) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2295       (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2296  /*CYCLOMATIC_Adc_ReadGroup_JUSTIFICATION: This API reads the group conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2297  results and performs the DET or Safety or Runtime Error check for AR422 and
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2298  AR440 based on the enable of pre-compile macros and also reads the result of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2299  slave kernels if ADC_SYNC_CONV_ENABLE pre-compile macro is enabled. The
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2300  different if conditions cause the complexity to increase, but actually during
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2301  run-time out of all if conditions many will be pre-compile time removed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2302  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2303  ** Traceability: [cover parentID={2851AF0C-C875-445f-8096-2D0576BF2580},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2304                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2305  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2306  ** Syntax           : Std_ReturnType Adc_ReadGroup                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2307  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2308  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2309  **                      Adc_ValueGroupType * const DataBufferPtr              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2310  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2311  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2312  ** Description      : This API reads the group conversion result of the last  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2313  **                    completed conversion round of the requested group and   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2314  **                    stores the channel's conversion value starting from     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2315  **                    DataBufferPtr address. The channel's conversion values  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2316  **                    are stored in ascending channel number order            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2317  **                    Note:                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2318  **                    1. This API is available only when AdcReadGroupApi      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2319  **                       is configured as true.                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2320  **                    2. This API is not available when                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2321  **                       AdcResultHandlingImplementation is set to DMA mode of**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2322  **                       result handling                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2323  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2324  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2325  ** Service ID       : 0x04                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2326  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2327  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2328  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2329  ** Reentrancy       : Reentrant for different AdcChannel Groups               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2330  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2331  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2332  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2333  ** Parameters(in-out): DataBufferPtr -Location to store the requested Group's **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2334  **                     channels conversion result                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2335  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2336  ** Return value     : E_OK - Results are available and written to the data    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2337  **                           buffer                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2338  **                    E_NOT_OK - No results are available or development      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2339  **                               error occurred                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2340  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2341  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2342  Std_ReturnType Adc_ReadGroup(const Adc_GroupType Group,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2343                               Adc_ValueGroupType * const DataBufferPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2344  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2345    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2346    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2347    const Adc_ValueGroupType *lCurrentResultPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2348    uint32 lKernelId, lBusyFlag, lResultFlag, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2349    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2350    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2351    Adc_StreamNumSampleType lNoofValidConv, lNumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2352    uint8 lNoOfChannels, lCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2353    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2354       (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2355    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2356    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2357    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2358    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2359    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2360  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2361    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2362    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2363    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2364    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2365  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2366    /* [cover parentID={FDD1B6D9-5E86-457e-9FBE-B72D90B7CCAA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2367    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2368    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2369    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2370    lErrVal = Adc_lReadGrpDetCheck(DataBufferPtr, lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2371    /* [cover parentID={F06737E7-47F0-451d-BB4F-97BC609DC694}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2372    Read Group DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2373    if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2374    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2375      /* [cover parentID={961FA51A-79B5-4b62-A8C5-E1B2CFB9CF7E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2376      Return status as E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2377      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2378    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2379    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2380    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2381    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2382      /* [cover parentID={801FD9D7-A9AD-4265-A281-BC2DB0B21B7A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2383      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2384      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2385      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2386          ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2387      /* [cover parentID={B1CD0210-76F6-4abe-BC66-CD3640719BB4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2388      Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2389      /* [cover parentID={FFB56F32-61D2-4cac-ADD3-25092D4246B8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2390      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2391      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2392      
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2393      /* [cover parentID={9948FC74-682F-4a27-9F84-C8C2718E6B45}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2394      Check Group Idle Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2395      lErrVal = Adc_lCheckGrpIdleDet(lKernelId, lGroupId, ADC_SID_READ_GROUP, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2396                                     lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2397      /* [cover parentID={232B978F-858C-4b69-BF51-5ECE5FF9F142}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2398      Group Idle DET Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2399      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2400      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2401        /* [cover parentID={98D7E543-8FC1-4cd1-BBAD-339ED5EE40B3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2402        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2403        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2404        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2405        /* [cover parentID={961FA51A-79B5-4b62-A8C5-E1B2CFB9CF7E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2406        Return status as E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2407        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2408      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2409      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2410      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2411      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2412        /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2413        lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2414        /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2415        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2416                       HwUnitCfgPtr[lKernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2417        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2418        /* Get number of samples per Channel*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2419        lNumOfSamples = lGrpCfgPtr->NumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2420  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2421        /* [cover parentID={A74AF51E-C5AA-44bf-B338-B953B943743A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2422        EMUX mode is ON [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2423        #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2424        uint8 lEmuxGrp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2425        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2426        /* Get the Emux data of the Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2427        lEmuxGrp = (ADC_ONE_U & (lGrpCfgPtr->GrpEmuxCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2428        /* [cover parentID={68266C61-D8CD-43c9-B103-3FAEE57A5EAA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2429        Is Group configured with the EMUX channel [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2430        if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2431        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2432          /* [cover parentID={8544CBEC-6F6F-4f52-85AE-6F8630856900}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2433          Get Number of channels configured for EMUX group
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2434          i.e. Maximum selected channel + 1 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2435          lNoOfChannels = ((lGrpCfgPtr->GrpEmuxCfg) >> ADC_ONE_U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2436          lNoOfChannels = lNoOfChannels + (uint8)1U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2437        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2438        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2439        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2440  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2441        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2442          /* [cover parentID={7389A097-CA96-432f-BACF-DA5BEC7F50D0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2443          Get Number of channels configured for the group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2444          lNoOfChannels = lGrpCfgPtr->NoOfChannels;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2445        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2446  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2447        /*Critical Section is protecting the result copy to application.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2448          Since, for continuous conversion groups with 1 streaming sample,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2449          the same result buffer position will be written in ISR and read from
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2450          this API. Hence, while the read is ON, the write from ISR should be
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2451          protected, to get a consistent result set for all the channels*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2452          /* [cover parentID={894BD85D-A869-4b20-85C7-E57CA486718D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2453          Critical Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2454          /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2455          #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2456          /* [cover parentID={24D82E1C-3C75-455c-A907-849B8806EE98}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2457          DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2458          #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2459          /* [cover parentID={FAF60D79-C34A-4b90-A356-1483023416DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2460          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2461              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2462          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2463          /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2464          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2465          /* [cover parentID={24D82E1C-3C75-455c-A907-849B8806EE98}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2466          Runtime error detection is OFF and Safety is OFF when Autosar version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2467          is 4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2468          #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2469          /* [cover parentID={FAF60D79-C34A-4b90-A356-1483023416DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2470          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2471              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2472          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2473          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2474        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2475        /* Get group status flags */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2476        lBusyFlag = Adc_lGetGroupStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2477        lResultFlag = Adc_lGetGroupResultStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2478        /* [cover parentID={B60EE688-EC33-49f0-98BA-E43016C41632}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2479        Read the number of valid results available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2480        lNoofValidConv = lKernelDataPtr->NumofValidConRes[lGroupId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2481        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2482        /* [cover parentID={6D1DC85B-1F58-4860-B5A6-D45636FC9D54}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2483        Group is busy with no results [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2484        if((lBusyFlag == (uint32)1U) && (lResultFlag == (uint32)0U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2485        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2486          /* [cover parentID={961FA51A-79B5-4b62-A8C5-E1B2CFB9CF7E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2487          Return status as E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2488          lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2489        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2490        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2491        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2492          /*
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2493           Application Result Buffer organisation for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2494           a)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2495           - 5 Channels - CH9, CH1, CH2, CH3 and CH4
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2496           - 3 streaming samples for each channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2497           - No synchronous conversion kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2498        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2499            Result Buffer:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2500            Buffer Start                                       Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2501            +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2502            |CH9|CH9|CH9|CH1|CH1|CH1|CH2|CH2|CH2|CH3|CH3|CH3|CH4|CH4|CH4|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2503            +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2504        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2505            Data Buffer (DataBufferPtr):
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2506            Buffer Start                                       Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2507            +---+---+---+---+---+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2508            |CH9|CH1|CH2|CH3|CH4|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2509            +---+---+---+---+---+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2510        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2511            b)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2512           - 3 Channels - CH9, CH1, and CH2
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2513           - 2 streaming samples for each channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2514           - Kernel K0 synchronization master, kernel K1 and K2 synchronization
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2515             slaves
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2516           - Channels CH9 and CH2 enabled for synchronous conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2517        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2518            Result Buffer:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2519            Buffer Start
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2520            +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2521            |K0CH9|K0CH9|K0CH1|K0CH1|K0CH2|K0CH2| => |K1CH9|K1CH9|K1CH2|K1CH2| =>
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2522            +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2523        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2524                              Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2525               +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2526            => |K2CH9|K2CH9|K2CH1|K2CH1|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2527               +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2528        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2529            Data Buffer (DataBufferPtr):
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2530            Buffer Start                                       Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2531            +-----+-----+-----+-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2532            |K0CH9|K0CH1|K0CH2|K1CH9|K1CH2|K2CH9|K2CH1|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2533            +-----+-----+-----+-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2534        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2535            c)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2536           - 3 Channels - CH9, CH1, and CH2
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2537           - 2 streaming samples for each channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2538           - Kernel K1 synchronization master, kernel K0 and K3 synchronization
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2539             slaves
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2540           - Channels CH1 and CH2 enabled for synchronous conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2541        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2542            Result Buffer:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2543            Buffer Start
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2544            +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2545            |K1CH9|K1CH9|K1CH1|K1CH1|K1CH2|K1CH2| => |K0CH1|K0CH1|K0CH2|K0CH2| =>
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2546            +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2547        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2548                              Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2549               +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2550            => |K3CH1|K3CH1|K3CH2|K3CH2|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2551               +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2552        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2553            Data Buffer (DataBufferPtr):
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2554            Buffer Start                                       Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2555            +-----+-----+-----+-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2556            |K1CH9|K1CH1|K1CH2|K0CH1|K0CH2|K2CH1|K2CH2|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2557            +-----+-----+-----+-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2558          */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2559        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2560          /* [cover parentID={C58F9673-A3E4-4569-B64D-D2BB92B6785F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2561          Get pointer to the latest result sample set available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2562          lCurrentResultPtr = lKernelDataPtr->GrpResBuffer[lGroupId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2563          lCurrentResultPtr = &lCurrentResultPtr[lNoofValidConv - \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2564                                                 (Adc_StreamNumSampleType)1U];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2565          /* [cover parentID={03BD01DD-B048-4b0f-85F4-950A04B21A33}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2566          Till the last available channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2567          for(lCount = 0U; lCount < lNoOfChannels; lCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2568          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2569            /* [cover parentID={0AD1D3D1-03EE-4b1b-BC62-A34C05948CED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2570            Copy results to data buffer pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2571            DataBufferPtr[lCount] = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2572                     lCurrentResultPtr[(uint32)lCount*(uint32)lNumOfSamples];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2573          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2574        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2575          /* [cover parentID={3A28A59E-4A9F-40a1-8A8A-30F78A12C71A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2576          Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2577          #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2578          if (lGrpCfgPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2579          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2580            lCurrentResultPtr = &lCurrentResultPtr[(uint32)lNoOfChannels *
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2581                                   (uint32)lNumOfSamples];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2582            /* [cover parentID={DBEF38CF-C43E-4a89-8657-A78EDBB64355}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2583            Read result of Slave Kernels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2584            Adc_lReadSlaveResult(lKernelId, lGrpCfgPtr, lCurrentResultPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2585                                 &DataBufferPtr[lNoOfChannels], lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2586          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2587          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2588        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2589          /* [cover parentID={8D0A348D-FEAF-4c6e-9510-191A2B7BB55D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2590          Clear Group result status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2591          Adc_lClrGroupResultAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2592          /* [cover parentID={0D432239-0A5D-484a-8801-4905C297BDF2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2593          Clear Result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2594          Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2595          /* [cover parentID={05431D66-9239-445e-BDB1-622C6B83AC9B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2596          Groups which are not converting - implicitly stopped are put to IDLE
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2597          state & Reset the Number of valid conversion to ZERO   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2598          if(lBusyFlag == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2599          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2600            /* [cover parentID={05431D66-9239-445e-BDB1-622C6B83AC9B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2601            For implicitly stopped groups, Clear the valid number of samples for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2602            implicity stopped group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2603            lKernelDataPtr->NumofValidConRes[lGroupId] = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2604                                                   (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2605          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2606          /* [cover parentID={9F7FA04E-CDC1-438c-AD81-0E881117C245}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2607          Return status as E_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2608          lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2609        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2610        /* [cover parentID={814F3F63-82C1-426c-A42D-1BF3A70068EB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2611        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2612        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2613      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2614    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2615    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2616  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2617  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2618  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2619  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2620  /*CYCLOMATIC_Adc_EnableHardwareTrigger_JUSTIFICATION: This API enables the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2621  hardware trigger for the requested ADC Group for different modes of ADC
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2622  operation (No priority,Queuing,HW priority & HW-SW priority) and performs the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2623  DET or Safety or Runtime Error check for AR422 and AR440 based on the enable
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2624  of pre-compile macros. The different if conditions in different operating
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2625  modes cause the complexity to increase, but actually during run-time out of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2626  all if conditions many will be pre-compile time removed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2627  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2628  ** Traceability: [cover parentID={60737F4B-61A1-4ca9-B525-132F23E5533C},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2629                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2630  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2631  ** Syntax           : void Adc_EnableHardwareTrigger                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2632  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2633  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2634  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2635  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2636  ** Description      : This API setups the group for conversion and enables    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2637  **                    the hardware trigger for the requested ADC Group.       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2638  **                    Note: This API is available only when AdcHwTriggerApi   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2639  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2640  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2641  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2642  ** Service ID       : 0x05                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2643  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2644  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2645  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2646  ** Reentrancy       : Reentrant for channel groups executing on different     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2647  **                    ADC hardware groups                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2648  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2649  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2650  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2651  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2652  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2653  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2654  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2655  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2656  void Adc_EnableHardwareTrigger(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2657  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2658    #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2659    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2660    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2661    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2662    uint32 lKernelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2663    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2664    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2665    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2666        (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2667    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2668    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2669    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2670    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2671    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2672  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2673    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2674    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2675    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2676    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2677  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2678    /* [cover parentID={7B137ADE-6A92-4a29-8422-E6A6174DEFC7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2679    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2680    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2681    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2682    lErrVal = Adc_lEnHwTriggerDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2683    /* [cover parentID={CE410160-E3A3-43f4-8627-FC457677869C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2684    Enable Hardware Trigger DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2685    if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2686    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2687    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2688      /* [cover parentID={DBBE310C-B75E-4c96-AEBE-5F2BFBBFB234}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2689      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2690      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2691      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2692           ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2693      /* [cover parentID={EFD46631-0639-462d-98B3-376EC63FB984}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2694      Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2695      /* [cover parentID={2D03377A-4B71-4834-9273-3530709E5E15}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2696      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2697      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2698      
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2699      /* [cover parentID={70FB7153-862A-4ebc-B976-C35DA904C624}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2700      Check Group Busy Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2701      lErrVal = Adc_lCheckGrpBusyDet(lKernelId, lGroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2702                                     ADC_SID_ENABLE_HARDWARE_TRIGGER,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2703      /* [cover parentID={95C1D1F1-456D-4628-B5A7-72572A5220ED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2704      Group Busy Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2705      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2706      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2707        /* [cover parentID={9BE3E4B5-6914-4d89-A856-64D4F2AB27ED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2708        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2709        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2710      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2711      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2712      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2713      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2714        /* [cover parentID={997603AF-0AB5-4575-9B52-89B047A7B385}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2715        Critical Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2716        /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2717        #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2718        /* [cover parentID={DC178EB9-5D74-47a0-90E3-272E87868CE4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2719        DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2720        #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2721        /* [cover parentID={64E177C2-C3B3-4edf-B352-220D2693A753}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2722        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2723            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2724        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2725        /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2726        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2727        /* [cover parentID={DC178EB9-5D74-47a0-90E3-272E87868CE4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2728        Runtime error detection is OFF and Safety is OFF when Autosar version is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2729        4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2730        #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2731        /* [cover parentID={64E177C2-C3B3-4edf-B352-220D2693A753}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2732        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2733            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2734        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2735        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2736        /* [cover parentID={63955155-6166-434f-9288-EFE53CE3E7C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2737        HW-SW Priority mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2738        #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2739          /* [cover parentID={A48447EE-A83D-4188-AB4D-D06DC745C1B7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2740          Schedule the group for start [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2741          Adc_lSchedulerOnStart(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2742        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2743          /* [cover parentID={C776C3DA-F7AD-402d-9AEC-FACF2C3DC9BA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2744          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2745          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2746        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2747          /* [cover parentID={DCF95BD2-5953-4792-A5A4-5F798657018F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2748          HW-SW Priority mode is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2749          /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2750          lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2751          /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2752          lGrpCfgPtr =  &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2753                          HwUnitCfgPtr[lKernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2754          /* [cover parentID={F0275002-2640-43c1-A441-9FDDDE4BAD60}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2755          Priority mode is Hw or Queue Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2756          #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2757              (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2758          /* Since, the SW queue is empty, place the group on Queue head
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2759          Further calls to to start SW Triggered group will be queued and
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2760          will be started when current HW triggered groups is stopped */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2761          /* [cover parentID={FCEB490C-D0D2-4ddf-B4DA-2B17399E7EBC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2762          Push Group ID and Pop Group ID to current Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2763          lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId = lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2764          lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId = lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2765          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2766          
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2767          /* [cover parentID={DFBFF5D8-B7E2-4065-BB41-5550ECA7A4B8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2768          Set Group Status to Busy    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2769          Adc_lSetGroupStatusBusyAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2770          /* [cover parentID={1ECF5A4E-C68D-4288-91E6-C97CD9E054A9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2771          Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2772          Adc_lClrGroupResultAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2773          /* [cover parentID={0F69F691-CF60-4944-B77F-208E277CBDE8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2774          Clear Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2775          Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2776          /* [cover parentID={7A58AEA1-7C8E-4d26-B813-84CAEBC4CDFA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2777          DMA Result handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2778          #if (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2779          /* [cover parentID={49D933C9-96D0-4530-98B7-42EAD2E24942}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2780          Reset  the Conversion result count to ZERO    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2781          lKernelDataPtr->NumofValidConRes[lGroupId] \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2782            = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2783          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2784          /* [cover parentID={9F3F77E9-344D-46e3-894D-C6A78E4813F2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2785          Update Active Group ID to the corresponding Request Source data
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2786          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2787          lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].ActiveGroupId \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2788            = lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2789  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2790          /* [cover parentID={07FC9F8A-E7A5-4c11-B995-BEFC0B97EA8D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2791          Priority mode is HW or Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2792          #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2793               (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2794          /* [cover parentID={79542019-5D1A-4ed3-8FEF-872D4B87FC76}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2795          Set flags for used channels and result registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2796          Adc_lSetRunningChAndResReg(lKernelId, lGrpCfgPtr, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2797          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2798  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2799          /* [cover parentID={CC63809D-AF08-43da-B655-20550DB324AC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2800          Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2801          #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2802          if((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2803          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2804            /* [cover parentID={249BAE3C-8A52-4c1c-9462-7D104B2FB828}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2805            Set the limit check group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2806            lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].ActiveLimitChkCh=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2807                  lGrpCfgPtr->GroupDefinition[0U].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2808          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2809          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2810  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2811          /* [cover parentID={3D1A1A91-A862-44c3-A451-317A13184CB1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2812          Priority Mode is Hardware [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2813          #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2814          /* [cover parentID={1B50E6F1-6FCD-47b3-A7D1-5DB743F275DD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2815          Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2816          #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2817          /* [cover parentID={CEBA17F4-B6D6-430c-A9F9-F0D6F0EB47E2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2818          Is group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2819          if ((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2820          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2821            /* [cover parentID={CEBA17F4-B6D6-430c-A9F9-F0D6F0EB47E2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2822            Set the limit check group active flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2823            lKernelDataPtr->LimitChkActiveFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2824          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2825          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2826          /* [cover parentID={8D751053-F019-4fe3-9723-77FC1A6A8A53}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2827          Is group enabled with Alias [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2828          if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2829          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2830            /* [cover parentID={8D751053-F019-4fe3-9723-77FC1A6A8A53}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2831            Set the alias group active flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2832            lKernelDataPtr->AliasActiveFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2833          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2834          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2835  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2836          /* [cover parentID={C9692026-DE64-4bf8-9FDA-40BDE0E75171}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2837          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2838          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2839  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2840          /* [cover parentID={11DC401C-3F2A-4395-84A1-80FA115CE6FF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2841          Prepare channels and result registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2842          Adc_lPrepareGrpForStart(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2843          
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2844          /* Enable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2845          lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].IsrNoServiceFlag \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2846            =(uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2847  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2848          /* [cover parentID={FB9D8412-7C98-48e5-8581-6594F90AE04B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2849          Prepare queue and Enable Hardware trigger peripheral conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2850          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2851          Adc_lStartHwConversion(lGrpCfgPtr, lKernelId, lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2852        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2853      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2854    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2855  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2856  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2857  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2858  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2859  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2860  ** Traceability: [cover parentID={6DE6E72B-D488-4665-8302-4801AAA6C11F},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2861                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2862  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2863  ** Syntax           : void Adc_DisableHardwareTrigger                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2864  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2865  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2866  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2867  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2868  ** Description      : This function  stops the ongoing conversion and disables**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2869  **                    hardware trigger for the requested ADC Channel group.   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2870  **                    Note: This API is available only when AdcHwTriggerApi   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2871  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2872  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2873  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2874  ** Service ID       : 0x06                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2875  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2876  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2877  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2878  ** Reentrancy       : Reentrant for channel groups executing on different     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2879  **                    ADC hardware groups                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2880  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2881  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2882  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2883  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2884  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2885  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2886  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2887  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2888  void Adc_DisableHardwareTrigger(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2889  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2890    uint32 lKernelId, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2891    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2892    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2893        (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2894    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2895    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2896  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2897    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2898    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2899  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2900    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2901    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2902    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2903    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2904    /* [cover parentID={9DBA16F5-A65C-4935-999E-A595B4A722B7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2905    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2906    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2907    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2908    lErrVal = Adc_lDisHwTriggerDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2909    /* [cover parentID={AFA59FD4-1BBD-46fe-B457-CC17A1D0C485}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2910    Disable Hardware Trigger DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2911    if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2912    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2913    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2914      /* [cover parentID={CB4C4760-8666-448b-9B61-F1CF44156EC7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2915      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2916      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2917      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2918           ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2919      /* [cover parentID={4CB7CB24-8CBE-4fbc-A8C7-196A8A9C7E22}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2920      Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2921      /* [cover parentID={283048CA-2BBB-49bf-AB96-40169319E65A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2922      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2923      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2924      
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2925      /* [cover parentID={BFA2B421-2D78-4442-8D11-71ABA28DEACF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2926      Check Group Idle Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2927      lErrVal = Adc_lCheckGrpIdleDet(lKernelId,lGroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2928                                     ADC_SID_DISABLE_HARDWARE_TRIGGER,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2929      /* [cover parentID={41FE7B88-72A6-43f0-B7D0-07DD3B5F8CCB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2930      Group Idle Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2931      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2932      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2933        /* [cover parentID={437D992F-BE41-4732-A0CD-EC314E550371}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2934        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2935        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2936      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2937      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2938      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2939      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2940        /* [cover parentID={E1ADE6F3-5111-4bb0-AE41-4ED80117EBFC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2941        Is QUEUE mode is ON or Prioirty mode is ON? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2942        /* [cover parentID={A0E5A739-A65B-4017-AE99-537291BED1D6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2943        Priority Mode is ON or Queueing Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2944        /* [cover parentID={BD98810D-E2B8-4bca-8693-753D9F7460CD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2945        Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2946        #if((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2947            (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2948          /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2949          #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2950          /* [cover parentID={68570614-413B-41ef-BC15-F8C981EF9547}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2951          DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2952          #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2953          /* [cover parentID={5FD8EA13-987D-411e-9549-F9ABBBD2648F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2954          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2955              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2956          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2957          /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2958          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2959          /* [cover parentID={68570614-413B-41ef-BC15-F8C981EF9547}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2960          Runtime error detection is OFF and Safety is OFF when Autosar version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2961          is 4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2962          #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2963          /* [cover parentID={5FD8EA13-987D-411e-9549-F9ABBBD2648F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2964          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2965              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2966          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2967          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2968          /* [cover parentID={D5A96981-9062-46c5-8C81-49855C1607AC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2969          HW-SW Priority is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2970          #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2971            /* [cover parentID={07607915-FF37-40ca-8BB7-D15D8C760601}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2972            Stop group or remove it from queue of pending groups [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2973            Adc_lSchedulerOnStop(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2974          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2975            /* [cover parentID={1F72FBDD-BD75-4ebe-B685-F6AA2C6728A0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2976            HW-SW Priority is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2977            /* [cover parentID={E1E45B0A-E0C2-4bda-A480-88B9E838BAE6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2978            Pop from the Queue  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2979            Adc_lPopFromQueue(lKernelId,lGroupId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2980          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2981          /* [cover parentID={DB6DAE87-3250-4434-9540-4F8E27C2CA48}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2982          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2983          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2984        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2985          /* [cover parentID={01C07362-3EEB-473a-B68E-32C35628152D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2986          Priority is OFF and Queueing Mode is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2987          /* [cover parentID={A6CAA948-17B5-4d40-A5BE-0933098A5737}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2988          Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2989          Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2990          const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2991  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2992          /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2993          lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2994          /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2995          lGrpCfgPtr =  &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2996                          HwUnitCfgPtr[lKernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2997          /* [cover parentID={36745ABA-9E53-45fb-AF09-6FFFCE26D974}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2998          Critical Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  2999          /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3000          #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3001          /* [cover parentID={36745ABA-9E53-45fb-AF09-6FFFCE26D974}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3002          DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3003          #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3004          /* [cover parentID={DB89E451-EAE7-4595-A1BE-8D5F5863AFDE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3005          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3006              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3007          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3008          /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3009          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3010          /* [cover parentID={36745ABA-9E53-45fb-AF09-6FFFCE26D974}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3011          Runtime error detection is OFF and Safety is OFF when Autosar version
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3012          is 4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3013          #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3014          /* [cover parentID={DB89E451-EAE7-4595-A1BE-8D5F5863AFDE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3015          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3016              SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3017          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3018          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3019          /* [cover parentID={505A9EFB-B97D-434c-967D-C90D5B9022FE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3020          Is Group Busy [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3021          if(Adc_lGetGroupStatus(lKernelDataPtr,lGroupId) == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3022          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3023            /* [cover parentID={3142EDC9-A29A-4ea0-82D9-C85AFA46EE6B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3024            Disable ISR servicing for the Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3025            lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].IsrNoServiceFlag =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3026                                                                 (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3027            /* [cover parentID={C7651E50-F2E8-46ff-8626-713118FDECB7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3028            End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3029            SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3030            /* [cover parentID={F006871C-B584-44f3-8F5D-FAD0AF47F585}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3031            Stop the ongoing conversions [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3032            Adc_lStopConvRequest(lGrpCfgPtr,lKernelId,lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3033            /* Remove Active Group ID from the Global Kernel Data */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3034            Adc_lRemoveActiveGroup(lKernelDataPtr,lGrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3035                                   lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3036            /* [cover parentID={AF8ECF6E-A7D7-4ce6-8C1D-E7A29BB89CB2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3037            Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3038            #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3039            /* [cover parentID={DBF50E82-A5ED-48fa-9E99-352F95D5632B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3040            Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3041            /* [cover parentID={A25AC1DE-FEFF-4878-81A5-B517747FA4D5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3042            Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3043            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3044            /* [cover parentID={1394231A-36C0-4b6b-B3C7-2851187B0A0B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3045            Clear all running channels & Registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3046            Adc_lClrRunningChAndResReg(lKernelId,lGrpCfgPtr,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3047            /* [cover parentID={F2120D8B-713D-41ee-906B-A7A3F5C9E8D3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3048            Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3049            SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3050            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3051          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3052          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3053          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3054            /* [cover parentID={9EC4626C-D43E-4d4e-847E-AA67C5E20015}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3055            End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3056            SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3057          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3058  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3059          /* [cover parentID={057C4D45-A5D9-4c15-A114-8CB1F397ED31}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3060          Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3061          /* [cover parentID={4275311F-FDBC-4d1e-B7DF-2DF4D9FE21D3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3062          Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3063          SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3064          /*Restore group status to IDLE*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3065          /* [cover parentID={B378BCDC-9726-4502-AC63-EBACA074157B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3066          Clear Group Busy Status  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3067          Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3068          /* [cover parentID={8EDF33D8-8823-44f0-85D2-B49CB0EB6C17}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3069          Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3070          Adc_lClrGroupResultAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3071          /* [cover parentID={096C1317-F043-4fbd-9C7C-9C213B2C1764}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3072          Clear Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3073          Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3074          /* [cover parentID={53FB2EB0-9DBE-449a-959B-BB1EC416712C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3075          DMA Mode Result handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3076          #if (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3077          /* [cover parentID={B5C50125-B212-43c8-9ECB-D3A2D4307250}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3078          Reset conversion result count to 0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3079          lKernelDataPtr->NumofValidConRes[lGroupId] \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3080            = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3081          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3082          /* [cover parentID={E5B6E623-E8EC-455a-A572-4902914F9E30}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3083          Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3084          #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3085          /* [cover parentID={7A677A53-0259-4378-B847-3A3C3F38F741}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3086          Disable Group Notification if Enabled  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3087          Adc_lClrGrpNotifAtomic(lKernelDataPtr,lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3088          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3089  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3090          /* [cover parentID={4D7A90B2-BE4A-49fb-AD79-23293C8FED6B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3091          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3092          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3093        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3094      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3095    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3096  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3097  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3098  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3099  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3100  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3101  ** Traceability: [cover parentID={7A184FF1-BFEB-4a52-BCC6-C68AD3B1B12C},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3102                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3103  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3104  ** Syntax           : void Adc_EnableGroupNotification                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3105  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3106  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3107  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3108  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3109  ** Description      : This API enables the notification mechanism for the     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3110  **                    requested ADC Channel group.                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3111  **                    Note: This API is only available when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3112  **                    AdcGrpNotifCapability is configures as true.            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3113  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3114  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3115  ** Service ID       : 0x07                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3116  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3117  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3118  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3119  ** Reentrancy       : Reentrant for different channel groups                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3120  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3121  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3122  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3123  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3124  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3125  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3126  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3127  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3128  void Adc_EnableGroupNotification(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3129  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3130    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3131    uint32 lKernelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3132    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3133    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3134  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3135    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3136    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3137  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3138    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3139    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3140    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3141    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3142  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3143    /* [cover parentID={7C163C3C-4DD8-4fe4-BD6D-6514BFA6AC72}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3144    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3145    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3146  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3147    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3148    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3149    lDetVal = Adc_lEnGrpNotifDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3150    /* [cover parentID={02F4CE7C-B9A4-4e79-B601-6F88DF959F50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3151    Enable Group Notify DET Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3152    if(ADC_E_NO_ERR == lDetVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3153    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3154    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3155      /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3156      lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3157      /* [cover parentID={5E3A08FE-9DA9-434a-B4C9-DE3FBCBC6A1D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3158      Enable Group Notifications [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3159      Adc_lSetGrpNotifAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3160    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3161  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3162  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3163  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3164  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3165  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3166  ** Traceability: [cover parentID={4470141E-4BB1-498e-ABB4-7F1E009E1FC9},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3167                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3168  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3169  ** Syntax           : void Adc_DisableGroupNotification                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3170  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3171  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3172  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3173  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3174  ** Description      : This API disables the notification mechanism for the    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3175  **                    requested ADC Channel group.                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3176  **                    Note: This API is only available when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3177  **                    AdcGrpNotifCapability is configures as true.            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3178  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3179  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3180  ** Service ID       : 0x08                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3181  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3182  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3183  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3184  ** Reentrancy       : Reentrant for different channel groups                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3185  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3186  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3187  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3188  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3189  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3190  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3191  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3192  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3193  void Adc_DisableGroupNotification(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3194  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3195    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3196    uint32 lKernelId, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3197    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3198  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3199    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3200    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3201  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3202    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3203    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3204    /* Extract Kernel specific GroupID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3205    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3206  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3207    /* [cover parentID={C2703D75-5E4A-46a4-A498-AF283C03FACD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3208    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3209    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3210  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3211    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3212    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3213    lDetVal = Adc_lDisGrpNotifDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3214    /* [cover parentID={BEF0E7C8-99B1-40ac-8E06-BD7A2E05B23A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3215    Disable Group Notify DET Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3216    if(ADC_E_NO_ERR == lDetVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3217    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3218    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3219      /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3220      lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3221      /* [cover parentID={9B2B6A79-69C8-4bad-BF8E-0A80375A8A51}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3222      Disable Group Notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3223      Adc_lClrGrpNotifAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3224    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3225  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3226  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3227  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3228  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3229  ** Traceability: [cover parentID={27A8A099-530D-4a3f-988C-47EB6F8C7D00},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3230                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3231  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3232  ** Syntax           : Adc_StatusType Adc_GetGroupStatus                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3233  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3234  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3235  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3236  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3237  ** Description      : This API returns the conversion status of the requested **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3238  **                    ADC Channel group.                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3239  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3240  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3241  ** Service ID       : 0x09                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3242  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3243  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3244  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3245  ** Reentrancy       : Reentrant for different channel groups                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3246  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3247  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3248  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3249  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3250  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3251  ** Return value     : Adc_StatusType                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3252  **                    Conversion status for the requested group               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3253  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3254  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3255  Adc_StatusType Adc_GetGroupStatus(const Adc_GroupType Group)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3256  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3257    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3258    uint32 lKernelId, lStrmCompletedFlag, lResultFlag, lBusyFlag, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3259    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3260    Adc_StatusType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3261  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3262    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3263    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3264  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3265    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3266    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3267    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3268    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3269  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3270    /* [cover parentID={5C7C41B7-A07C-42ba-85B6-35AC8CA97EDC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3271    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3272    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3273  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3274    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3275    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3276    lDetVal = Adc_lGetGrpStatusDetCheck(lKernelId, lGroupId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3277    /* [cover parentID={3B62AF23-670C-438a-8262-7590544DAC21}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3278    Group Status DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3279    if(ADC_E_NO_ERR != lDetVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3280    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3281      /* Return status as IDLE in case of DET */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3282      lRetVal = ADC_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3283    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3284    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3285    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3286    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3287      /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3288      lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3289  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3290      /* [cover parentID={0196B5F2-1419-49a5-8C5A-7BD2DEB09EF6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3291      Critcal Section   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3292      /* [cover parentID={5A4BA557-0414-4403-97DE-10A43EA04F93}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3293      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3294      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3295  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3296      /* [cover parentID={8E42CE39-314B-478f-B513-0E9744F6E5DA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3297      Read Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3298      lStrmCompletedFlag = Adc_lGetResBuffEndStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3299      /* [cover parentID={027E4F95-FA66-4b64-8C40-796067AB399B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3300      Read Group Result Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3301      lResultFlag = Adc_lGetGroupResultStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3302      /* [cover parentID={70F6F60D-581A-498f-AFAD-941A4ED4129A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3303      Read Group Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3304      lBusyFlag = Adc_lGetGroupStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3305  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3306      /* [cover parentID={385400E5-AE2D-47e6-AA58-F649F3EA021C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3307      End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3308      SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3309  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3310      /* [cover parentID={6049AC9B-9BD4-495e-B019-B1352A306085}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3311      Result Buffer End status is True [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3312      if((uint32)ADC_ONE_U == lStrmCompletedFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3313      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3314        /* [cover parentID={E51BA18A-CBEA-4743-BC24-EE91FBC8AE72}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3315        Update return value as Adc Stream Completed   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3316        lRetVal = ADC_STREAM_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3317      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3318      /* [cover parentID={D605F55F-1D0F-4c5c-8941-60722136CC1D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3319      Group Result status is True [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3320      else if((uint32)ADC_ONE_U == lResultFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3321      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3322        /* [cover parentID={AE9CD3D2-B80C-462e-83D8-95F5ADBF2F30}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3323        Update return value as Adc Completed     [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3324        lRetVal = ADC_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3325      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3326      /* [cover parentID={1D6A5632-E2CA-4dff-9CC3-694DF27AD606}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3327      Group status is True [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3328      else if((uint32)ADC_ONE_U == lBusyFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3329      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3330        /* [cover parentID={B74DD191-2A38-4b9f-901B-0A4DD4AD30E2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3331        Update return value as Adc Busy [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3332        lRetVal = ADC_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3333      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3334      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3335      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3336        /* [cover parentID={D4EA1640-B061-4dc4-92C6-A567CFE8F5DD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3337        Update return value as Adc Idle    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3338        lRetVal = ADC_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3339      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3340    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3341    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3342  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3343  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3344  #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3345  /*CYCLOMATIC_Adc_GetStreamLastPointer_JUSTIFICATION: This API returns the number
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3346  of valid samples per channel and pointer to the result buffer containing the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3347  latest available conversion results and performs the DET or Safety or Runtime
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3348  Error check for AR422 and AR440 based on the enable of pre-compile macros.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3349  The different if conditions cause the complexity to increase, but actually
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3350  during run-time out of all if conditions many will be pre-compile time removed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3351  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3352  ** Traceability: [cover parentID={55DAAA3E-BD02-466d-A350-DB68D50EE588},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3353                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3354  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3355  ** Syntax           : Adc_StreamNumSampleType Adc_GetStreamLastPointer        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3356  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3357  **                      const Adc_GroupType Group                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3358  **                      Adc_ValueGroupType ** const PtrToSamplePtr            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3359  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3360  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3361  ** Description      : This API returns the number of valid samples per channel**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3362  **                    stored in the result buffer. It also returns a pointer  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3363  **                    to the result buffer containing the latest available    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3364  **                    conversion results.                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3365  **                    Refer Adc_ReadGroup API for a description of the buffer **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3366  **                    layout.                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3367  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3368  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3369  ** Service ID       : 0x0b                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3370  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3371  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3372  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3373  ** Reentrancy       : Reentrant for different AdcChannel Groups               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3374  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3375  ** Parameters(in)   : Group - Numeric ID of requested ADC Channel group.      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3376  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3377  ** Parameters (out) : PtrToSamplePtr - Pointer to the last acquired value.    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3378  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3379  ** Return value     : Adc_StreamNumSampleType                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3380  **                    Number of valid samples per channel.                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3381  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3382  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3383  Adc_StreamNumSampleType Adc_GetStreamLastPointer(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3384         const Adc_GroupType Group,  Adc_ValueGroupType ** const PtrToSamplePtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3385  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3386    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3387    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3388    Adc_StreamNumSampleType lNoOfValidConv;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3389    uint32 lKernelId, lBusyFlag, lStrmCompletedFlag, lResultFlag, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3390    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3391    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3392        (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3393    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3394    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3395  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3396    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3397    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3398  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3399    /* Extract Kernel ID from Group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3400    lKernelId = Adc_lGetAdcKernel(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3401    /* Extract Kernel specific GroupID from Group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3402    lGroupId = Adc_lGetKernelGroupId(Group);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3403    /* [cover parentID={7C3114B9-5997-4029-9DB2-D28900629690}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3404    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3405    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3406    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3407    lErrVal = Adc_lGetStrmPtrDetCheck(lKernelId, lGroupId,PtrToSamplePtr,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3408    /* [cover parentID={8261AD0B-B4C8-4a0c-AF95-1E0E5E4D294C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3409    DET Error occurred [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3410    if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3411    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3412      /* [cover parentID={F577EF05-3617-4319-811F-6A88433E21C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3413      Update Number of valid conversion to ZERO [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3414      lNoOfValidConv = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3415      /* [cover parentID={849147A1-CF31-408b-B8CF-3CEDB5638239}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3416      Pointer to Sample pointer is a NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3417      if(PtrToSamplePtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3418      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3419        /* [cover parentID={28BEE7CF-935B-40b0-8735-9DFBCF7558D4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3420        Update pointer to sample pointer with a NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3421        *PtrToSamplePtr = NULL_PTR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3422      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3423    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3424    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3425    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3426    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3427      /* [cover parentID={91CB0882-047B-4e0f-ACFD-9ABD656D8052}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3428      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3429      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3430      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3431           ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3432      /* [cover parentID={A602615D-05D6-4ddb-BECF-B25387278200}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3433      Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3434      /* [cover parentID={9D0A2FD1-472E-4bb6-BB82-F01DD724CCF5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3435      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3436      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3437  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3438      /* [cover parentID={1A860E47-8ECD-4b9a-A0AA-98DB1ED515BA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3439      Check Group Idle Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3440      lErrVal = Adc_lCheckGrpIdleDet(lKernelId, lGroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3441                                     ADC_SID_GET_STREAM_LAST_POINTER, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3442      /* [cover parentID={B7116175-0BA6-4a51-BF5E-E9F08C8CDED5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3443      Group Idle Error   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3444      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3445      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3446        /* [cover parentID={B0304201-C355-4889-A748-F4E380649148}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3447        End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3448        SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3449  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3450        /* [cover parentID={F577EF05-3617-4319-811F-6A88433E21C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3451        Update Number of valid conversion to ZERO [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3452        lNoOfValidConv = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3453  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3454        /* [cover parentID={28BEE7CF-935B-40b0-8735-9DFBCF7558D4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3455        Update pointer to sample pointer with a NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3456        *PtrToSamplePtr = NULL_PTR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3457      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3458      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3459      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3460      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3461        /* [cover parentID={AB0B9310-22C1-4866-BEE0-3C82E6C0F4BD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3462        Critcal Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3463        /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3464        lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3465        /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3466        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3467                       HwUnitCfgPtr[lKernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3468  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3469        /*The status flags and number of valid results are read in critical
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3470        section. The calculation of the last result set pointer location need not
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3471        be in critical section*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3472        /* AUTOSAR version is 4.2.2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3473        #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3474        /* [cover parentID={C7E8D32F-38C0-49d3-B621-22812053B1BF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3475        DET is OFF and Safety is OFF when Autosar version is 4.2.2 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3476        #if((ADC_SAFETY_ENABLE == STD_OFF) && (ADC_DEV_ERROR_DETECT == STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3477        /* [cover parentID={FB052376-D0DB-4796-BE35-A9A3192149C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3478        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3479            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3480        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3481        /* AUTOSAR version is 4.4.0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3482        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3483        /* [cover parentID={C7E8D32F-38C0-49d3-B621-22812053B1BF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3484        Runtime error detection is OFF and Safety is OFF when Autosar version is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3485        4.4.0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3486        #if((ADC_SAFETY_ENABLE==STD_OFF) && (ADC_RUNTIME_ERROR_DETECT==STD_OFF))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3487        /* [cover parentID={FB052376-D0DB-4796-BE35-A9A3192149C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3488        Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3489            SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3490        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3491        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3492  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3493        /* [cover parentID={F6A7EA0E-0317-4e11-9A18-6177D4ED1987}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3494        Read Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3495        lStrmCompletedFlag = Adc_lGetResBuffEndStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3496        lResultFlag = Adc_lGetGroupResultStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3497        lBusyFlag = Adc_lGetGroupStatus(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3498        lNoOfValidConv = lKernelDataPtr->NumofValidConRes[lGroupId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3499  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3500        /* [cover parentID={7250C8FA-697D-436e-A833-39FB0B5341A7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3501        Is Group busy with no results [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3502        if((lBusyFlag == (uint32)1U) && (lResultFlag == (uint32)0U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3503        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3504          /* [cover parentID={575629CF-B4CC-4d48-BB34-30DFC90A65E9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3505          Conversion ongoing but No result set availabe yet [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3506          /* [cover parentID={15DF6302-8D78-4eaf-BE05-1DF86B6C8DBC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3507          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3508          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3509          /* [cover parentID={F577EF05-3617-4319-811F-6A88433E21C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3510          Update Number of valid conversion to ZERO & NULL pointer for pointer to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3511          sample pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3512          lNoOfValidConv = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3513          *PtrToSamplePtr = NULL_PTR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3514        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3515        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3516        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3517          /* [cover parentID={B7593182-0F99-4610-A568-17F78E821CF6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3518          Clear Group Result  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3519          Adc_lClrGroupResultAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3520          /* [cover parentID={750080D2-CC24-469e-AB65-6579A7686066}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3521          Clear Result Buffer End Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3522          Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3523  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3524          /* [cover parentID={F6366990-9AED-47c8-B6B8-7B50C78D7D03}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3525          Put Groups to Idle state,which are not converting and are implicitly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3526          stopped [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3527          if(lBusyFlag == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3528          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3529            /* [cover parentID={D868F88A-EA66-4982-A7D9-D061B79DDF55}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3530            Read number of Valid conversion counts [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3531            lKernelDataPtr->NumofValidConRes[lGroupId] = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3532                                                 (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3533          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3534          /* [cover parentID={0AF8010C-70E8-432d-A9AE-D82C3E0871F8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3535          End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3536          SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3537  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3538          /* [cover parentID={131FD8E2-56FE-463d-830D-01B717AE4311}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3539          Update current valid result position to pointer to sample pointer
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3540          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3541          *PtrToSamplePtr = &((lKernelDataPtr->GrpResBuffer[lGroupId])\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3542          [lNoOfValidConv - (Adc_StreamNumSampleType)1U]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3543  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3544          /* [cover parentID={EB656AD9-60A8-4c39-B095-D37808B79107}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3545          Stream Samples Completed [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3546          if(lStrmCompletedFlag == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3547          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3548            /* [cover parentID={74CA7590-F584-4b29-BF9D-5DCD6B64536A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3549            No of Valid conversions are equal to No of configured Samples
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3550            [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3551            lNoOfValidConv = lGrpCfgPtr->NumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3552          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3553        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3554      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3555    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3556    return(lNoOfValidConv);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3557  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3558  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3559  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3560  #if(ADC_VERSION_INFO_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3561  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3562  ** Traceability: [cover parentID={072F1443-09A2-4b4b-A538-85815FA2E68C},      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3563  **                               {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3564  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3565  ** Syntax           : void Adc_GetVersionInfo                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3566  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3567  **                      Std_VersionInfoType * const versioninfo               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3568  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3569  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3570  ** Description      : This API returns the version information of this module.**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3571  **                    Note: This API is available only when AdcVersionInfoApi **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3572  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3573  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3574  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3575  ** Service ID       : 0x0a                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3576  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3577  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3578  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3579  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3580  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3581  ** Parameters(in)   : none                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3582  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3583  ** Parameters (out) : versioninfo -  Pointer to where to store the version    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3584  **                    information of this module                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3585  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3586  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3587  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3588  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3589  void Adc_GetVersionInfo(Std_VersionInfoType * const versioninfo)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3590  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3591    /* [cover parentID={3F356509-3143-40ae-9ACA-883508FFF0E3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3592    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3593    #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3594    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3595    lErrVal = Adc_lCheckParamPointerDet(versioninfo, ADC_SID_GET_VERSION_INFO);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3596    /* [cover parentID={852F8896-A4B1-4713-B8C9-7D59D6608A21}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3597    Param Pointer DET Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3598    if (ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3599    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3600    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3601      /* [cover parentID={920D10EE-6C58-4146-BE3F-0A9A115ACC04}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3602      Update Version Information in the location referenced by versioninfo
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3603      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3604      /* [cover parentID={9BD4444B-68F8-4ce1-9F0A-1B6090310D54}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3605      Adc_GetVersionInfo [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3606      versioninfo->moduleID = (uint16)ADC_MODULE_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3607      versioninfo->vendorID = (uint16)ADC_VENDOR_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3608      versioninfo->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3609      versioninfo->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3610      versioninfo->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3611    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3612  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3613  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3614  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3615  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3616  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3617  ** Traceability: [cover parentID={2D15A3EE-022B-4aa9-BEA3-C3C837ACC3FB},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3618                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3619  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3620  ** Syntax           : Std_ReturnType Adc_PreparePowerState                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3621  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3622  **                      const Adc_PowerStateType PowerState                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3623  **                      Adc_PowerStateRequestResultType * const Result        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3624  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3625  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3626  ** Description      : API starts the needed process to allow the ADC hardware **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3627  **                    module to enter the target power state if current power **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3628  **                    state of all the hardware units is not same as the      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3629  **                    target power state. The API must be invoked from all the**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3630  **                    cores using the ADC driver, as each call prepares the   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3631  **                    power state only for the ADC hardware groups used by the**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3632  **                    calling core.                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3633  **                    Note: This API is available only when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3634  **                    AdcLowPowerStatesSupport is configured as true.         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3635  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3636  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3637  ** Service ID       : 0x13                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3638  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3639  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3640  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3641  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3642  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3643  ** Parameters(in)   : PowerState - Target power state intended to be attained **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3644  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3645  ** Parameters (out) : Result - Result of Power state change preparation       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3646  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3647  ** Return value     : E_OK: Preparation process started                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3648  **                    E_NOT_OK: Service is rejected                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3649  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3650  Std_ReturnType Adc_PreparePowerState(const Adc_PowerStateType PowerState,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3651                                  Adc_PowerStateRequestResultType * const Result)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3652  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3653    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3654    uint32 lCoreId, lBitPosn, lTempPowerState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3655    uint8 lPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3656  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3657    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3658    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3659    /* [cover parentID={FCB6A86A-0B22-4cda-8528-907A942AFD66}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3660    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3661    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3662    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3663    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3664    lDetVal = Adc_lPreparePowerStateDetCheck(PowerState, Result, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3665    /* [cover parentID={1C90A9AD-AEB8-4751-831E-2FB1A4F93946}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3666    Prepare power state DET error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3667    if(lDetVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3668    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3669      /* [cover parentID={823E5C83-8EF0-48ee-B79A-C375ED2DC9F4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3670      Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3671      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3672    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3673    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3674    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3675    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3676      /* [cover parentID={9B9BB9B4-C945-4d3b-892F-C8F1EE82A618}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3677      Get the current power state of the ADC hardware units [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3678      lPwrState = Adc_lGetCurrentPwrState(ADC_SID_PREPARE_POWER_STATE, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3679  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3680      /* [cover parentID={2F48DE02-37BB-43f1-BB2A-550DE7255B7F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3681      Current power state is a valid power state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3682      if(lPwrState != ADC_INVALID_POWER_STATE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3683      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3684        /* [cover parentID={C6835FA8-79AE-4330-8E5F-BED0BBAF6135}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3685        Current power state is same as the configured power state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3686        if(lPwrState == PowerState)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3687        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3688          /* [cover parentID={2D7C80D5-E49A-4436-9DE9-5BA03FCEB210}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3689          Update result as ADC_SEQUENCE_ERROR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3690          *Result = ADC_SEQUENCE_ERROR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3691        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3692        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3693        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3694          /* [cover parentID={B4059497-57BA-40c5-B256-F0815B0F641F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3695          Update result as ADC_SERVICE_ACCEPTED [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3696          *Result = ADC_SERVICE_ACCEPTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3697  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3698          /* Set the Power state transition request bit */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3699          lTempPowerState = ((uint32)PowerState << ADC_ONE_U) | ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3700  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3701          /* Calculate bit position based on Core Id */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3702          lBitPosn = (lCoreId * (uint32)ADC_BITS_PER_POWER_STATE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3703  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3704          /* [cover parentID={FA52DCC3-F7C9-4a1a-A5F5-E557879E1B3F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3705          Update the requested power state & request bit of the core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3706          Mcal_SetBitAtomic(&Adc_PowerStateTransitionRequestBit, (uint8)lBitPosn,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3707                            ADC_BITS_PER_POWER_STATE, lTempPowerState);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3708        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3709        /* [cover parentID={E98020AE-49D3-4270-B910-FE93C2F91F40}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3710        Update return value as E_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3711        lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3712      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3713      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3714      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3715        /* [cover parentID={21730EBD-88BA-49e9-880B-A6B6E44D343D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3716        Update result as ADC_HW_FAILURE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3717        *Result = ADC_HW_FAILURE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3718  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3719        /* [cover parentID={5A748E76-0CE3-4fd9-AC6E-81CA14228ABD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3720        Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3721        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3722      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3723    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3724    /* MISRA2012_RULE_2_2_JUSTIFICATION: Tricore Atomic instructions are used
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3725    to update global variables in this function call, which is not detected
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3726    by MISRA. Hence, the assignment is not a dead code*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3727    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3728  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3729  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3730  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3731  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3732  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3733  ** Traceability: [cover parentID={E7F3E2D7-36B5-4165-BEC5-C847DAEE25C3},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3734                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3735  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3736  ** Syntax           : Std_ReturnType Adc_SetPowerState                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3737  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3738  **                      Adc_PowerStateRequestResultType * const Result        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3739  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3740  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3741  ** Description      : API configures the ADC module so that it enters the     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3742  **                    already prepared power state,chosen between a predefined**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3743  **                    set of configured ones.The API must be invoked from all **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3744  **                    the cores using the ADC driver, as each call sets the   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3745  **                    power state only for the ADC hardware groups used by    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3746  **                    the calling core                                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3747  **             Note: 1.When the converter is set to 'full power mode', then   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3748  **                     the conversion is started immediately by the hardware  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3749  **                     after a request (no additional time delay). This is the**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3750  **                     default mode after modules initialization.             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3751  **                   2.When the converter is set to 'Fast standby mode' or    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3752  **                     'Slow standby mode' and no conversion is requested,then**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3753  **                     it saves power. When a conversion is triggered then the**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3754  **                     converter wakes up automatically, but it needs certain **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3755  **                     wake-up time before conversions can be performed. There**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3756  **                     is no power saving while the conversions are being     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3757  **                     performed during this mode.During this phase the driver**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3758  **                     reports the current power state as 'Fast standby mode' **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3759  **                     or 'Slow standby mode'. In this mode, when the         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3760  **                     conversion is no longer active,then the converter saves**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3761  **                     power and a new conversion request will trigger the    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3762  **                     wake-up cycle again (time delay for wake-up).          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3763  **                   3.When the converter is set to 'off mode',it enters power**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3764  **                     saving mode and no further conversions are possible    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3765  **                     until a power mode transition is made explicitly to    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3766  **                     come out of 'off mode'.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3767  **                   4.This API is available only when                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3768  **                     AdcLowPowerStatesSupport is configured as true.        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3769  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3770  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3771  ** Service ID       : 0x10                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3772  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3773  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3774  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3775  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3776  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3777  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3778  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3779  ** Parameters (out) : Result - Result of Power state change                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3780  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3781  ** Return value     : E_OK: Power Mode changed                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3782  **                    E_NOT_OK: Service is rejected                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3783  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3784  Std_ReturnType Adc_SetPowerState(Adc_PowerStateRequestResultType * const Result)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3785  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3786    Std_ReturnType lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3787    uint32 lKernelCount, lCoreId, lBitPosn, lTargetPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3788    #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3789        (ADC_DEV_ERROR_DETECT == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3790    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3791    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3792  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3793    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3794    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3795  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3796    /* Calculate the bit position of power state based on CoreId */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3797    lBitPosn = lCoreId * (uint32)ADC_BITS_PER_POWER_STATE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3798  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3799    /* [cover parentID={1FFD16DD-64DF-4d0e-8A2E-FC8D10631D1C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3800    Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3801    /* [cover parentID={2D5D4B6F-6378-480e-9611-1E19B88E4907}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3802    Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3803    SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3804  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3805    /* [cover parentID={C7DBA3B2-CB3E-412a-B6EB-75097C81808E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3806    Read the targeted power state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3807    lTargetPwrState = (uint32)(Mcal_GetBitAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3808          Adc_PowerStateTransitionRequestBit,(uint8)lBitPosn, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3809          (uint32)ADC_BITS_PER_POWER_STATE));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3810    /* [cover parentID={3810DB26-73B0-4975-9AA2-8557438C29CA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3811    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3812    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3813  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3814    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3815    lErrVal = Adc_lSetPowerStateDetCheck(Result, lCoreId, lTargetPwrState);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3816    /* [cover parentID={90CAB158-699F-4404-AA23-2D31D7DF578B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3817    Is Set power state DET error occured ? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3818    if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3819    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3820      /* [cover parentID={90D540FE-B05E-4456-BFE2-65C941BB9BB7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3821      Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3822      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3823    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3824    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3825    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3826    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3827      /* [cover parentID={D888A158-062B-4597-9114-02F855E1F3D3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3828      DET is ON for AUTOSAR version 4.2.2 or SAFETY is ON or Runtime Error
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3829      Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3830      #if((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3831         ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3832      /* [cover parentID={319328BE-2CA3-4904-80BC-B1A5C6E40FE7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3833      Check Hardware Unit DisEngaged Development or Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3834      lErrVal = Adc_lCheckHwUnitDisEngagedDet(ADC_SID_SET_POWER_STATE,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3835      /* [cover parentID={2AED0954-03DA-4dcd-B44F-E7912DA7E2EE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3836      Hardware Unit DisEngaged Development or Runtime Error occurred [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3837      if(ADC_E_NO_ERR != lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3838      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3839        /* [cover parentID={6B36A0C6-84A5-4762-AEC0-27032B8245EF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3840        Update result pointer with ADC_TRANS_NOT_POSSIBLE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3841        *Result = ADC_TRANS_NOT_POSSIBLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3842        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3843        /* Update return value with E_NOT_OK */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3844        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3845      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3846      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3847      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3848      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3849        /* Right shift once to get the already prepared power mode */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3850        lTargetPwrState = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3851                  ADC_TARGET_POWER_STATE_MASK & (~(lTargetPwrState >> ADC_ONE_U));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3852  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3853        /* [cover parentID={F1B52FF7-E9F9-4b3a-ADD4-98DFDD6A9298}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3854        Till the last available kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3855        for(lKernelCount = (uint32)0U; lKernelCount < ADC_MAX_KERNEL_ID; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3856          lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3857        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3858            /* [cover parentID={E2C8755B-E78B-4393-AEEA-63FAF182BDA0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3859            Check if Kernel is Configured for current core */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3860          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3861                                                                         NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3862          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3863            /*Change ANONC only for MASTER and STANDALONE kernels*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3864            /* [cover parentID={E2C8755B-E78B-4393-AEEA-63FAF182BDA0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3865            Set the already prepared power state for Master & Stand-alone Kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3866            [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3867            if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[lKernelCount]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3868              SyncConvMode != ADC_SYNC_CONV_MODE_SLAVE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3869            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3870              /* MISRA2012_RULE_10_3_JUSTIFICATION: The bitfied of SFR are
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3871              programed with an unsigned long value. Since, bitfields are of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3872              different type than unsigned long MISRA populates this warning.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3873              However the write is performed only to the intended bits by
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3874              applying proper masks*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3875              /* [cover parentID={E2C8755B-E78B-4393-AEEA-63FAF182BDA0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3876              Set the already prepared power state for Master & Stand-alone 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3877              Kernels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3878              MODULE_EVADC.G[lKernelCount].ARBCFG.B.ANONC = lTargetPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3879            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3880          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3881        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3882        /* [cover parentID={78589036-BF32-4561-BBAE-D8A309E2C498}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3883        Clear the power state & power state transition request [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3884        Mcal_SetBitAtomic(&Adc_PowerStateTransitionRequestBit, (uint8)lBitPosn, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3885                        ADC_BITS_PER_POWER_STATE, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3886        /* [cover parentID={4072E7F1-71CF-4fe0-989F-4A78890B2EE6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3887        Update return value with E_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3888        lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3889  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3890        /* [cover parentID={6F1E2592-2435-4f37-8E93-7C7920CA1853}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3891        Update result with ADC_SERVICE_ACCEPTED [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3892        *Result = ADC_SERVICE_ACCEPTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3893      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3894    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3895    /* [cover parentID={5C32FA12-8A4F-40c6-87BC-5F5466F8A544}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3896    End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3897    SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3898    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3899  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3900  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3901  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3902  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3903  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3904  ** Traceability: [cover parentID={A250E667-B430-4753-A4C4-EAA8C64D58BB}],
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3905                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3906  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3907  ** Syntax           : Std_ReturnType Adc_GetTargetPowerState                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3908  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3909  **                      Adc_PowerStateType * const TargetPowerState           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3910  **                      Adc_PowerStateRequestResultType * const Result        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3911  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3912  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3913  ** Description      : API reports the power state passed and successfully     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3914  **                    prepared during the Adc_PreparePowerState() If the power**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3915  **                    state was not prepared, then the current power state of **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3916  **                    hardware units of the invoking core is returned         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3917  **                    Note: This API is available only when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3918  **                          AdcLowPowerStatesSupport is configured as true.   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3919  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3920  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3921  ** Service ID       : 0x12                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3922  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3923  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3924  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3925  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3926  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3927  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3928  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3929  ** Parameters(out)   :Result - Result of Target Power mode                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3930  **                    TargetPowerState - Target Power mode of ADC HW Units    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3931  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3932  ** Return value     : E_OK: Mode could be read                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3933  **                    E_NOT_OK: Service is rejected                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3934  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3935  Std_ReturnType Adc_GetTargetPowerState(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3936                 Adc_PowerStateType * const TargetPowerState,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3937                 Adc_PowerStateRequestResultType * const Result)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3938  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3939    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3940    uint32 lCoreId, lBitPosn;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3941    uint8 lPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3942  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3943    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3944    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3945  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3946    /* [cover parentID={2C8F62AF-2746-49a6-9163-EA2AE68F56DD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3947    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3948    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3949    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3950    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3951    lDetVal = Adc_lGetPowerStateDetCheck(TargetPowerState, Result, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3952                                         ADC_SID_GET_TARGET_POWER_STATE, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3953    /* [cover parentID={902064BC-E248-4ab2-8618-A064AC9A5EBC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3954    Is Get power state DET error occured? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3955    if(lDetVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3956    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3957      /* [cover parentID={F6F519F0-1D3B-4b64-B54A-C8B76BAA66BB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3958      Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3959      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3960    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3961    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3962    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3963    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3964      /* Calculate the bit position of power state based on CoreId */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3965      lBitPosn = lCoreId * (uint32)ADC_BITS_PER_POWER_STATE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3966  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3967      /* [cover parentID={FA4BDCEC-173D-42e2-97D3-9818A8374284}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3968      Read the prepared power state and transition request bit [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3969      lPwrState = (uint8)(Mcal_GetBitAtomic(Adc_PowerStateTransitionRequestBit, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3970                             (uint8)lBitPosn, (uint32)ADC_BITS_PER_POWER_STATE));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3971      /* [cover parentID={1FD055F1-996A-488f-8F85-111ADB66112C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3972      Is target power state prepared? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3973      if(lPwrState != (uint8)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3974      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3975        /* [cover parentID={2D5613CD-5010-44ba-8E1B-9640AEF3A9F9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3976        Get the prepared power state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3977        lPwrState = (lPwrState >> ADC_ONE_U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3978      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3979      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3980      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3981        /* [cover parentID={B90FBAB2-B411-4b1c-9FB9-986E96BB1247}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3982        Get the current power state of the ADC hardware units [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3983        lPwrState = Adc_lGetCurrentPwrState(ADC_SID_GET_TARGET_POWER_STATE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3984                                            lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3985      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3986      /* [cover parentID={5DF629A0-66CF-4434-9CE2-E5CCCDC33A53}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3987      Current power state is not a valid power state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3988      if(lPwrState == ADC_INVALID_POWER_STATE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3989      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3990        /* [cover parentID={F8C3D084-77E4-4ead-8510-D2BAE9127B1C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3991        Update result as ADC_HW_FAILURE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3992        *Result = ADC_HW_FAILURE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3993  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3994        /* [cover parentID={38D30316-E7E2-4006-80D2-729925953299}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3995        Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3996        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3997      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3998      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  3999      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4000        /* [cover parentID={03AADFEF-A1E3-4f0a-99E7-4890D5E87349}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4001        Update return value with E_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4002        lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4003        /* Update power state pointer with current or target power state */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4004        *TargetPowerState = (Adc_PowerStateType)lPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4005        /* [cover parentID={EB8040BB-F379-4e13-979D-9BB49FA88FD9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4006        Update result as ADC_SERVICE_ACCEPTED [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4007        *Result = ADC_SERVICE_ACCEPTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4008      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4009    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4010    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4011  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4012  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4013  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4014  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4015  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4016  ** Traceability: [cover parentID={D8F34FC8-2D68-4fed-BD87-3EEA89743F99},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4017                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4018  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4019  ** Syntax           : Std_ReturnType Adc_GetCurrentPowerState                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4020  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4021  **                      Adc_PowerStateType * const CurrentPowerState          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4022  **                      Adc_PowerStateRequestResultType * const Result        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4023  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4024  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4025  ** Description      : API returns the current power state of the ADC hardware **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4026  **                    groups used by the calling core.                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4027  **                    Note: This API is available only when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4028  **                          AdcLowPowerStatesSupport is configured as true.   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4029  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4030  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4031  ** Service ID       : 0x11                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4032  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4033  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4034  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4035  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4036  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4037  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4038  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4039  ** Parameters(out)   :CurrentPowerState - Current Power mode of ADC HW Units  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4040  **                    Result - Result of Current Power mode                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4041  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4042  ** Return value     : E_OK: Mode could be read                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4043  **                    E_NOT_OK: Service is rejected                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4044  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4045  Std_ReturnType Adc_GetCurrentPowerState(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4046                 Adc_PowerStateType * const CurrentPowerState,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4047                 Adc_PowerStateRequestResultType * const Result)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4048  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4049    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4050    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4051    uint8 lCurrentPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4052  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4053    /* Get the Core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4054    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4055    /* [cover parentID={D02E5A1F-8629-41fc-A1B8-8688BBADFBFF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4056    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4057    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4058    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4059    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4060    lDetVal = Adc_lGetPowerStateDetCheck(CurrentPowerState, Result, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4061                                         ADC_SID_GET_CURRENT_POWER_STATE,lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4062    /* [cover parentID={2B5E67D3-0B0F-4718-9024-3F3812734AE6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4063    Is Get power state DET error occured? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4064    if(lDetVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4065    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4066      /* [cover parentID={E26D933F-CCA9-47e0-BA70-7CA4FB7D84CA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4067      Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4068      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4069    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4070    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4071    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4072    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4073      /* [cover parentID={D7CBEF91-4351-4d61-84A9-B53ABDFD18E7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4074      Get current power state of the ADC hardware units [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4075      lCurrentPwrState = Adc_lGetCurrentPwrState(ADC_SID_GET_CURRENT_POWER_STATE,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4076                                                                         lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4077      /* [cover parentID={4179E182-DE9E-4f43-BDFA-35A116A3042C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4078      Is current power state valid ? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4079      if(lCurrentPwrState != ADC_INVALID_POWER_STATE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4080      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4081        /* Update pointer with current power state */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4082        *CurrentPowerState = (Adc_PowerStateType)lCurrentPwrState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4083  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4084        /* [cover parentID={4154C92F-AB97-4a9f-9323-157EB5D57FD9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4085        Update result as ADC_SERVICE_ACCEPTED [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4086        *Result = ADC_SERVICE_ACCEPTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4087  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4088        /* [cover parentID={361AA08A-C515-4765-8422-4DEE4A410EFD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4089        Update return value with E_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4090        lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4091      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4092      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4093      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4094        /* [cover parentID={55169F07-0D2B-4ee0-A2FE-F3FC4AD3B6A0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4095        Update result as ADC_HW_FAILURE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4096        *Result = ADC_HW_FAILURE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4097  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4098        /* [cover parentID={12BC5C13-5C5F-4742-9757-8355D2E34A3D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4099        Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4100        lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4101      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4102    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4103    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4104  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4105  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4106  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4107  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4108  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4109  ** Traceability: [cover parentID={31CBFA99-822B-49c9-9E0F-090F042D833F},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4110                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4111  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4112  ** Syntax           : Std_ReturnType Adc_TriggerStartupCal                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4113  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4114  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4115  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4116  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4117  ** Description      : This API triggers the start-up calibration. The API can **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4118  **                    be invoked from any core, it should be ensured that     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4119  **                    initialization sequence of all the cores is over before **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4120  **                    invoking the API.                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4121  **                    Note: This API is available only when AdcCalibStatusApi **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4122  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4123  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4124  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4125  ** Service ID       : 0x31                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4126  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4127  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4128  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4129  ** Reentrancy       : Non Reentrant                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4130  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4131  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4132  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4133  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4134  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4135  ** Return value     : E_OK: Startup calibration has been started              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4136  **                    E_NOT_OK: Development error occured                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4137  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4138  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4139  Std_ReturnType Adc_TriggerStartupCal(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4140  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4141    Std_ReturnType lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4142    /* [cover parentID={424396B4-E000-4022-AD68-AB6686110565}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4143    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4144    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4145    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4146  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4147    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4148    lDetVal = Adc_lTrigStartupCalDetCheck();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4149  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4150    /* [cover parentID={B63F12A1-94F6-44e1-AC04-2172DD1DBBC4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4151    DET Error Occured  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4152    if(lDetVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4153    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4154      /* [cover parentID={B1CB619C-B7A0-436f-B630-7870C19D99DE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4155      Update return value as E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4156      lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4157    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4158    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4159    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4160    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4161      /* [cover parentID={2E1C4712-61E4-47f1-BB96-E51A87479E80}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4162      Trigger One Conv Enable is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4163      #if (ADC_TRIGGER_ONE_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4164      lRetVal = Adc_lTriggerOneConversion();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4165      /* [cover parentID={EDAA81D4-2548-401f-A25A-BC845AB095C1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4166      Return value is not equal to E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4167      if(E_NOT_OK != lRetVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4168      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4169      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4170        /* [cover parentID={784965B1-AFD9-4b98-9F0D-3DA119DA33B8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4171        Trigger the Start-Up Calibration [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4172        Mcal_SetBitAtomic(&MODULE_EVADC.GLOBCFG.U, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4173                          (uint8)IFX_EVADC_GLOBCFG_SUCAL_OFF, 1, 1U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4174        /* [cover parentID={A6248276-98AE-40b9-876C-B15FC2F0411B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4175        Set the Status of start-up calibration [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4176        Adc_lSetStartupCalStatusAtomic();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4177        /* [cover parentID={FFE0B71C-9B07-4504-BF0B-FADCE05C5A32}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4178        Update return value as E_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4179        lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4180      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4181    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4182    return lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4183  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4184  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4185  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4186  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4187  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4188  ** Traceability: [cover parentID={DC2DD497-4276-40a6-8233-AC6B451543CF},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4189                                   {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4190  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4191  ** Syntax           : Adc_StartupCalibStatusType Adc_GetStartupCalStatus      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4192  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4193  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4194  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4195  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4196  ** Description      : This API returns the status of the start-up calibration **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4197  **                    for all the Adc HW groups used by the calling core.     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4198  **                    Note: This API is available only when AdcCalibStatusApi **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4199  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4200  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4201  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4202  ** Service ID       : 0x30                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4203  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4204  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4205  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4206  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4207  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4208  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4209  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4210  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4211  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4212  ** Return value     : ADC_STARTUP_CALIB_NOT_TRIGGERED: Startup calibration has**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4213  **                                                     not been triggered     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4214  **                    ADC_STARTUP_CALIB_ONGOING: Startup calibration is       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4215  **                                               ongoing                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4216  **                    ADC_STARTUP_CALIB_OVER: Startup calibration has         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4217  **                                            completed                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4218  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4219  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4220  Adc_StartupCalibStatusType Adc_GetStartupCalStatus(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4221  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4222    uint32 lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4223    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4224    /* [cover parentID={347BB669-DEB3-4e3a-836F-E2B96ACB5085}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4225    Update return value as Startup calibration has completed [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4226    Adc_StartupCalibStatusType lRetVal = ADC_STARTUP_CALIB_OVER;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4227    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4228    uint8 lDetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4229    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4230  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4231    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4232    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4233  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4234    /* [cover parentID={30CC1146-AFDE-4d0e-AF6F-7315D6EB8D71}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4235    DET is ON or SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4236    #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4237    /* Check DET's for the API */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4238    lDetVal = Adc_lCheckUnInitDet(ADC_SID_GET_STARTUP_CAL_STATUS, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4239    /* [cover parentID={E862FE3C-A0CB-41ff-AECE-78E7F68C64EA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4240    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4241    if(lDetVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4242    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4243      lRetVal = ADC_STARTUP_CALIB_NOT_TRIGGERED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4244    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4245    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4246    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4247    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4248      /* [cover parentID={E1CD3C63-3202-48f6-A31F-B35DAC8679D2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4249      Read the Start-up Calibration Status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4250      /* [cover parentID={43F9DBCA-D6CB-40c1-ABA2-AFCD37EC8AE1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4251      Is Start-up Calibarion Triggered [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4252      if ((uint32)ADC_STARTUP_CAL_STARTED != Adc_lGetStartupCalStatusAtomic())
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4253      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4254        /* [cover parentID={D2820549-6B4B-416a-A7FA-792391A49366}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4255        Update return value as Startup calibration has not been triggered
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4256        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4257        lRetVal = ADC_STARTUP_CALIB_NOT_TRIGGERED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4258      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4259      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4260      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4261        /* [cover parentID={A2CB8D3E-F11F-45b2-8A57-3A67B280EA9B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4262        Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4263        for(lKernelCount = (uint32)0U; lKernelCount < ADC_MAX_KERNEL_ID; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4264            lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4265        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4266          /* [cover parentID={EAF848B3-108B-4507-AAFE-A6C796BBF7EE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4267          Check if Kernel is Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4268          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4269              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4270          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4271            /* [cover parentID={ABA92A2E-BE6A-424b-96D9-7CD1AA8C217F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4272            Read Calibration status and Update return value as Startup calibration
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4273            is ongoing if Calibration is active [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4274            if(MODULE_EVADC.G[lKernelCount].ARBCFG.B.CAL == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4275            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4276              /* [cover parentID={ABA92A2E-BE6A-424b-96D9-7CD1AA8C217F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4277              Read Calibration status and Update return value as Startup
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4278              calibration is ongoing if Calibration is active [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4279              lRetVal = ADC_STARTUP_CALIB_ONGOING;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4280              break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4281            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4282          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4283        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4284      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4285    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4286    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4287  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4288  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4289  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4290  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4291  ** Traceability: [cover parentID={D88A917E-FBB5-4df1-9569-0A75DE716C14},      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4292  **                               {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4293  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4294  ** Syntax           : void Adc_RS0EventInterruptHandler                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4295  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4296  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4297  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4298  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4299  ** Description      : This API Handles the interrupts from Request source 0   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4300  **                    for passed ADC KernelId.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4301  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4302  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4303  ** Service ID       : 0x33                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4304  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4305  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4306  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4307  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4308  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4309  ** Parameters(in)   : KernelId - Kernel ID for which the Interrupt handler    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4310  **                    is invoked                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4311  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4312  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4313  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4314  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4315  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4316  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4317  void Adc_RS0EventInterruptHandler(const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4318  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4319    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4320  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4321    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4322    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4323  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4324    /*Since there is no DET check in interrupts, hence validation of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4325      configuration pointers is done here*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4326    /* [cover parentID={51D2D15F-70F4-4bdc-B156-837C032EED36}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4327    Is Configuration pointer not equal to NULL Pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4328    if(Adc_ConfigPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4329    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4330      /* [cover parentID={69B4FA70-C978-4f87-9366-653DA6B78872}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4331      Core configuration pointer is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4332      if(Adc_ConfigPtr->CoreCfgPtr[lCoreId] != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4333      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4334        /* [cover parentID={1FBD81F3-2767-4eee-89F7-5E8AC0B91879}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4335        Is Kernel ID is within the Max Kernel ID? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4336        if(KernelId < ADC_MAX_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4337        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4338          /* [cover parentID={25E77D6A-2C59-452b-B5BD-A8D7D9DD1E50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4339          Is HW Unit Configuration pointer of Kernel ID for which Interrupt
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4340          Handler is invoked is not equal to NULL pointer? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4341          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[KernelId] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4342             NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4343          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4344            /* [cover parentID={FDDC420B-E586-423d-9CAC-542566C54F98}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4345            Check validity of interrupt via the HW flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4346            if(MODULE_EVADC.G[KernelId].SEFLAG.B.SEV0 == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4347            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4348              /* [cover parentID={1F7D71D9-3BAD-490d-AFEB-98537B4CBC58}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4349              Clear Request Source event flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4350              MODULE_EVADC.G[KernelId].SEFCLR.U = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4351                                 ((uint32)ADC_ONE_U<<IFX_EVADC_G_SEFCLR_SEV0_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4352              /* [cover parentID={8E483D08-83EC-429b-8993-A1B9CC1E8DD0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4353              Call Request Source Event Handler [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4354              Adc_lRSEventHandler(KernelId, ADC_RS0_ID, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4355            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4356            /* [cover parentID={1D00982B-2FC2-4e17-B37D-2DC015B52225}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4357            Safety is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4358            #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4359            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4360            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4361              /* [cover parentID={6E0B3E3B-D47B-4be4-99F6-D9D3AB08584A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4362              Report Interrupt Plausibility Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4363              Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4364                             ADC_SID_RS0_INTRPT_HANDLER, ADC_SE_INT_PLAUSIBILITY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4365            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4366            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4367          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4368          /* [cover parentID={8DF683D4-1648-4ee4-BA4F-CBB42C4EC050}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4369          Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4370          #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4371          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4372          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4373            /* [cover parentID={C291E97C-95AE-401e-A06E-3D582CABEEA5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4374            Report Safety Error if Kernel ID is not configured to the core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4375            [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4376            Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4377                                 ADC_SID_RS0_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4378          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4379          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4380        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4381        /* [cover parentID={8DF683D4-1648-4ee4-BA4F-CBB42C4EC050}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4382        Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4383        #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4384        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4385        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4386          /* [cover parentID={C291E97C-95AE-401e-A06E-3D582CABEEA5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4387          Report Safety Error for Kernel ID greater than Max available kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4388          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4389          Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4390                                 ADC_SID_RS0_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4391        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4392        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4393      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4394    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4395  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4396  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4397  #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4398  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4399  ** Traceability: [cover parentID={0DB01903-CE3D-4400-BA83-2EA818C5767A},      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4400  **                               {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4401  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4402  ** Syntax           : void Adc_RS1EventInterruptHandler                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4403  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4404  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4405  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4406  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4407  ** Description      : This API Handles the interrupts from Request source 1   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4408  **                    for passed ADC KernelId.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4409  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4410  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4411  ** Service ID       : 0x34                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4412  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4413  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4414  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4415  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4416  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4417  ** Parameters(in)   : KernelId - Kernel ID for which the Interrupt handler    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4418  **                    is invoked                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4419  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4420  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4421  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4422  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4423  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4424  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4425  void Adc_RS1EventInterruptHandler(const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4426  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4427    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4428  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4429    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4430    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4431  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4432    /*Since there is no DET check in interrupts, hence validation of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4433      configuration pointers is done here*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4434    /* [cover parentID={B54E0B00-A339-469a-890E-968AD83659E2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4435    Is Kernel Configuration pointer not equal to NULL Pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4436    if(Adc_ConfigPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4437    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4438      /* [cover parentID={E5F2878E-3204-4785-A2C6-D9FD14C24C1E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4439      Core configuration pointer is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4440      if(Adc_ConfigPtr->CoreCfgPtr[lCoreId] != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4441      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4442        /* [cover parentID={ED8400A7-40ED-49f4-9BF9-1E77417BFEB9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4443        Is Kernel ID is within the Max Kernel ID? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4444        if(KernelId < ADC_MAX_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4445        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4446          /* [cover parentID={A4544E72-E003-4315-9473-3402177740D8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4447          Is HW Unit Configuration pointer of Kernel ID for which Interrupt
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4448          Handler is invoked is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4449          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[KernelId] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4450              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4451          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4452            /* [cover parentID={C9E36780-7525-48f7-9948-B64947984AF9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4453            Check validity of interrupt via the HW flag  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4454            if(MODULE_EVADC.G[KernelId].SEFLAG.B.SEV1 == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4455            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4456              /* [cover parentID={9E53C956-0384-440c-9092-7F755EEBF98E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4457              Clear Request Source event flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4458              MODULE_EVADC.G[KernelId].SEFCLR.U = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4459                                 ((uint32)ADC_ONE_U<<IFX_EVADC_G_SEFCLR_SEV1_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4460              /* [cover parentID={FFA725C7-478D-49fe-A65E-3820927B47DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4461              Call Request Source Event Handler [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4462              Adc_lRSEventHandler(KernelId, ADC_RS1_ID, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4463            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4464            /* [cover parentID={1B52D5C4-FB00-483c-9A93-0B030115D7D9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4465            Safety is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4466            #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4467            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4468            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4469              /* [cover parentID={F6C67629-9920-4273-B33A-1CD4584A8762}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4470              Report Interrupt Plausibility Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4471              Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4472                             ADC_SID_RS1_INTRPT_HANDLER, ADC_SE_INT_PLAUSIBILITY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4473            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4474            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4475          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4476          /* [cover parentID={FE183915-703E-41c5-9032-08F792F7C62A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4477          Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4478          #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4479          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4480          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4481            /* [cover parentID={C09390B4-B24C-4e96-ABF6-DBEE05EB3137}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4482            Report Safety Error if Kernel ID is not configured to the core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4483            [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4484            Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4485                                 ADC_SID_RS1_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4486          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4487          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4488        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4489        /* [cover parentID={FE183915-703E-41c5-9032-08F792F7C62A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4490        Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4491        #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4492        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4493        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4494          /* [cover parentID={C09390B4-B24C-4e96-ABF6-DBEE05EB3137}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4495          Report Safety Error for Kernel ID greater than Max available kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4496          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4497          Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4498                                 ADC_SID_RS1_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4499        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4500        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4501      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4502    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4503  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4504  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4505  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4506  #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4507  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4508  ** Traceability: [cover parentID={477E8E2B-2614-4bd1-BAB1-DED74ADFD98E},      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4509  **                               {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4510  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4511  ** Syntax           : void Adc_RS2EventInterruptHandler                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4512  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4513  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4514  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4515  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4516  ** Description      : This API Handles the interrupts from Request source 2   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4517  **                    for passed ADC KernelId.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4518  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4519  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4520  ** Service ID       : 0x35                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4521  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4522  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4523  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4524  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4525  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4526  ** Parameters(in)   : KernelId - Kernel ID for which the Interrupt handler    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4527  **                    is invoked                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4528  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4529  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4530  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4531  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4532  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4533  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4534  void Adc_RS2EventInterruptHandler(const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4535  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4536    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4537  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4538    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4539    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4540  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4541    /*Since there is no DET check in interrupts, hence validation of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4542      configuration pointers is done here*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4543    /* [cover parentID={46210C60-0838-47e3-B24D-1F9CBD57D654}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4544    Is Kernel Configuration pointer not equal to NULL Pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4545    if(Adc_ConfigPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4546    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4547      /* [cover parentID={5D3EEA39-4F8F-40be-ADBA-46E20BAC23A5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4548      Core configuration pointer is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4549      if(Adc_ConfigPtr->CoreCfgPtr[lCoreId] != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4550      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4551        /* [cover parentID={54A82090-AC7F-41b0-9916-7E4F44F49535}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4552        Is Kernel ID is within the Max Kernel ID? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4553        if(KernelId < ADC_MAX_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4554        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4555          /* [cover parentID={BFE2E7BA-EC0C-4c49-84A5-22CA02671F53}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4556          Is HW Unit Configuration pointer of Kernel ID for which Interrupt
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4557          Handler is invoked is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4558          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[KernelId] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4559              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4560          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4561            /* [cover parentID={B8402FDD-5EAC-4081-8BE3-67F815DC2245}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4562            Check validity of interrupt via the HW flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4563            if(MODULE_EVADC.G[KernelId].SEFLAG.B.SEV2 == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4564            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4565              /* [cover parentID={9883A3E2-0595-4b09-A771-14BC7DBF7322}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4566              Clear Request Source event flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4567              MODULE_EVADC.G[KernelId].SEFCLR.U = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4568                                 ((uint32)ADC_ONE_U<<IFX_EVADC_G_SEFCLR_SEV2_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4569              /* [cover parentID={98919F01-161E-4455-9AB0-5BBD8B443AF6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4570              Call Request Source Event Handler   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4571              Adc_lRSEventHandler(KernelId, ADC_RS2_ID, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4572            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4573            /* [cover parentID={9BCEE3F1-F168-4872-B215-F89001B9A7BB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4574            Safety is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4575            #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4576            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4577            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4578              /* [cover parentID={AB869CF4-456B-4e40-A9AD-BE503F7EADA9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4579              Report Interrupt Plausibility Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4580              Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4581                             ADC_SID_RS2_INTRPT_HANDLER, ADC_SE_INT_PLAUSIBILITY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4582            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4583            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4584          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4585          /* [cover parentID={200114C4-A585-47bf-89AE-50731C4AD29F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4586          Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4587          #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4588          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4589          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4590            /* [cover parentID={D7125C94-DE8D-4a47-ABEB-63FA12D68414}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4591            Report Safety Error if Kernel ID is not configured to the core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4592            [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4593            Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4594                                 ADC_SID_RS2_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4595          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4596          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4597        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4598        /* [cover parentID={200114C4-A585-47bf-89AE-50731C4AD29F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4599        Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4600        #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4601        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4602        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4603          /* [cover parentID={D7125C94-DE8D-4a47-ABEB-63FA12D68414}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4604          Report Safety Error for Kernel ID greater than Max available kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4605          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4606          Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4607                                 ADC_SID_RS2_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4608        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4609        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4610      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4611    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4612  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4613  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4614  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4615  #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4616  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4617  ** Traceability: [cover parentID={590EE9F2-54AC-48b4-B5A7-723C9BE2421B},      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4618  **                               {BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4619  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4620  ** Syntax           : void Adc_ChEventInterruptHandler                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4621  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4622  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4623  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4624  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4625  ** Description      : This API Handles the interrupts from ADC Channel Event  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4626  **                    for passed ADC KernelId.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4627  **                    Note: This API is available only when AdcLimitCheckApi  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4628  **                    is configured as true.                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4629  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4630  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4631  ** Service ID       : 0x36                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4632  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4633  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4634  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4635  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4636  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4637  ** Parameters(in)   : KernelId - Kernel ID for which the Interrupt handler    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4638  **                    is invoked                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4639  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4640  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4641  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4642  ** Return value     : void                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4643  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4644  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4645  void Adc_ChEventInterruptHandler(const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4646  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4647    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4648    uint32 lChannelMask, lRsCount, lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4649    Adc_ChannelType lLimitChkCh;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4650    #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4651    uint8 lChannelRqstRaised = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4652    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4653  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4654    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4655    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4656  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4657    /*Since there is no DET check in interrupts, hence validation of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4658      configuration pointers is done here*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4659    /* [cover parentID={7A286400-ADB6-4d2e-A7FA-7402E53E9570}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4660    Is Kernel Configuration pointer not equal to NULL Pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4661    if(Adc_ConfigPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4662    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4663      /* [cover parentID={641A4AB0-81A9-4754-8020-0302A7C5F9E1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4664      Core configuration pointer is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4665      if(Adc_ConfigPtr->CoreCfgPtr[lCoreId] != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4666      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4667        /* [cover parentID={96D361A9-C101-4274-8668-881CA0906F26}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4668        Is Kernel ID is within the Max Kernel ID? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4669        if(KernelId < ADC_MAX_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4670        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4671          /* [cover parentID={B93EF855-FCF0-4df3-9194-BEDB179E2C67}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4672          Is HW Unit Configuration pointer of Kernel ID for which Interrupt
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4673          Handler is invoked is not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4674          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[KernelId] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4675              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4676          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4677            lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4678            /* [cover parentID={0B913515-14E1-4d83-B2B1-B2839921FAFB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4679            Till the last Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4680            for(lRsCount=(uint32)0U; lRsCount<ADC_REQSRC_USED_COUNT; lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4681            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4682              lLimitChkCh = lKernelDataPtr->RSData[lRsCount].ActiveLimitChkCh;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4683              /* [cover parentID={4EF4EB4F-5C71-4c14-A66F-CF5D094DD90A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4684              If Limit check channel is less than Max available channel & If
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4685              channel event occured  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4686              if(lLimitChkCh < (Adc_ChannelType)ADC_SECONDARY_CONV_CHANNEL_COUNT)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4687              {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4688                lChannelMask = ((uint32)ADC_ONE_U << lLimitChkCh);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4689                if((MODULE_EVADC.G[KernelId].CEFLAG.U & lChannelMask) == \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4690                                                                     lChannelMask)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4691                {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4692                  /* [cover parentID={9A3F4291-98DB-4c4c-9C1A-052B593BA6C5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4693                  Clear the Channel event flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4694                  MODULE_EVADC.G[KernelId].CEFCLR.U = lChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4695                  /* [cover parentID={9CC9BF30-8F11-4a09-B515-7F5288561454}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4696                  Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4697                  #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4698                  /* [cover parentID={08B5AB9F-A99D-45c2-9D75-9280C735A262}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4699                  Set a flag if request raised from any of the request surce
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4700                  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4701                  lChannelRqstRaised = ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4702                  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4703                  /* [cover parentID={56A75003-AC6C-400b-81EF-DB5CF551A863}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4704                  Call Limit Check Event Handler  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4705                  Adc_lLimitChkEventHandler(KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4706                        lKernelDataPtr->RSData[lRsCount].ActiveGroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4707                        lCoreId,(uint8)lRsCount);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4708                }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4709              }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4710            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4711            /* [cover parentID={B2D89A79-AE9D-4ae8-AA3B-EFA25060225F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4712            Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4713            #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4714            /* [cover parentID={68682F0F-D4B7-449d-B86E-BDFB452D3EDE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4715            Channel Event is not raised from any analog channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4716            if(lChannelRqstRaised != ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4717            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4718              /* [cover parentID={6382F20A-B24D-473d-AC02-17A871C1F2C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4719              Report Interrupt Plausibility Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4720              Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4721                              ADC_SID_CH_INTRPT_HANDLER, ADC_SE_INT_PLAUSIBILITY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4722            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4723            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4724          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4725          /* [cover parentID={E4C4B8D8-816E-43da-934E-7B363034887C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4726          Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4727          #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4728          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4729          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4730            /* [cover parentID={FF14982D-B34A-4826-BD3D-520EA3758DF7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4731            Report Safety Error if Kernel ID is not configured to the core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4732            [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4733            Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4734                                 ADC_SID_CH_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4735          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4736          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4737        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4738        /* [cover parentID={E4C4B8D8-816E-43da-934E-7B363034887C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4739        Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4740        #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4741        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4742        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4743          /* [cover parentID={FF14982D-B34A-4826-BD3D-520EA3758DF7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4744          Report Safety Error for Kernel ID greater than Max available kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4745          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4746          Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4747                                  ADC_SID_CH_INTRPT_HANDLER, ADC_SE_PARAM_KERNEL);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4748        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4749        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4750      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4751    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4752  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4753  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4754  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4755  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4756  **                      Private Function Definitions                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4757  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4758  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4759  ** Traceability: [cover parentID={D9FAB69D-A392-4ab6-A81E-0D2F49CAB118}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4760  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4761  ** Syntax           : LOCAL_INLINE uint32 Adc_lGetAdcKernel                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4762  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4763  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4764  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4765  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4766  ** Description      : This function derives the Adc kernel number from the    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4767  **                    Adc channel group number.                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4768  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4769  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4770  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4771  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4772  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4773  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4774  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4775  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4776  ** Parameters(in)   : GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4777  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4778  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4779  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4780  ** Return value     : Kernel Number                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4781  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4782  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4783  LOCAL_INLINE uint32 Adc_lGetAdcKernel(const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4784  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4785    /* [cover parentID={DB254306-E32E-4a81-984A-BCBB7F214982}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4786    Get Kernel number from channel group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4787    return((uint32)(Mcal_GetBitAtomic((uint32)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4788                                      ADC_KERNEL_ID_START_POS, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4789                                      ADC_KERNEL_ID_NO_OF_BITS)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4790  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4791  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4792  ** Traceability: [cover parentID={8E262E05-22C4-45d8-8ECD-8DFE45DE5DF9}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4793  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4794  ** Syntax           : LOCAL_INLINE Adc_GroupType Adc_lGetKernelGroupId        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4795  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4796  **                      const  Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4797  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4798  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4799  ** Description      : This function derives the Group Number from the         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4800  **                    Adc channel group ID.                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4801  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4802  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4803  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4804  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4805  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4806  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4807  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4808  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4809  ** Parameters(in)   : GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4810  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4811  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4812  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4813  ** Return value     : Group Number                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4814  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4815  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4816  LOCAL_INLINE Adc_GroupType Adc_lGetKernelGroupId(const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4817  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4818    /* [cover parentID={89207E57-13A5-4afd-BD2C-1AC59C4F8F79}] Extract Kernel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4819    specific GroupID from Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4820    return((Adc_GroupType)(GroupId & (Adc_GroupType)ADC_GROUP_ID_MASK));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4821  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4822  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4823  ** Traceability: [cover parentID={9B043C7C-9260-4568-8AD8-97A4BCB9331C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4824  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4825  ** Syntax           :LOCAL_INLINE Adc_GlobalDataType*Adc_lGetKernelDataAddress**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4826  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4827  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4828  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4829  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4830  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4831  ** Description      : This function returns the address of the element of the **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4832  **                    array - Adc_KernelData, where kernel specific run-time  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4833  **                    data stored.                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4834  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4835  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4836  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4837  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4838  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4839  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4840  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4841  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4842  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4843  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4844  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4845  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4846  ** Return value     : address of the element of the Adc_KernelData            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4847  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4848  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4849  LOCAL_INLINE Adc_GlobalDataType* Adc_lGetKernelDataAddress(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4850                                      const uint32 KernelId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4851  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4852    return(&Adc_kKernelData[CoreId][Adc_kKernelDataIndex[CoreId][KernelId]]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4853  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4854  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4855  #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4856  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4857  ** Traceability: [cover parentID={06008D66-95B3-4772-844B-48F1257545DE}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4858  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4859  ** Syntax           :LOCAL_INLINE uint8 Adc_lGetGrpReqSrc                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4860  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4861  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4862  **                      const Adc_GroupType GroupId,                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4863  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4864  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4865  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4866  ** Description      : This function returns the request source on which a     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4867  **                    group is currently installed.                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4868  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4869  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4870  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4871  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4872  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4873  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4874  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4875  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4876  **                    GroupId - Group ID                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4877  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4878  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4879  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4880  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4881  ** Return value     : Request source of the group or ADC_INVALID_RS_ID if the **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4882  **                    group is currently not installed on any RS              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4883  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4884  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4885  LOCAL_INLINE uint8 Adc_lGetGrpReqSrc(const uint32 KernelId,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4886                                const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4887  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4888    uint8 lReqSrc;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4889    uint8 lRetVal = ADC_INVALID_RS_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4890    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4891  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4892    /* Get kernel data pointer */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4893    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4894  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4895    /* Check if requested group is installed on any request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4896    /* [cover parentID={C2F97E86-7C54-4ff2-A731-F12623E0E60A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4897    Till the last available RS or Group ID found [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4898    for (lReqSrc = (uint8)0U; lReqSrc < (uint8)ADC_REQSRC_USED_COUNT; lReqSrc++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4899    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4900      /* [cover parentID={7BEECD1B-624B-405d-B904-E362A66AEC7F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4901      Group ID is equal to Active Group ID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4902      if (lKernelDataPtr->RSData[lReqSrc].ActiveGroupId == GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4903      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4904        /* [cover parentID={C305183E-764C-49c8-9C07-E7EDFC2CFAC7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4905        Return the RS on which the group is running [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4906        lRetVal = lReqSrc;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4907        break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4908      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4909    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4910  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4911    return lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4912  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4913  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4914  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4915  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4916  ** Traceability: [cover parentID={3A7A0185-43C6-4b05-8284-77AA6BB3829F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4917  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4918  ** Syntax           : LOCAL_INLINE void Adc_lSetGroupStatusBusyAtomic         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4919  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4920  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4921  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4922  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4923  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4924  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4925  ** Description      : This function sets the Group Status to ADC_BUSY         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4926  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4927  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4928  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4929  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4930  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4931  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4932  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4933  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4934  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4935  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4936  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4937  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4938  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4939  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4940  LOCAL_INLINE void Adc_lSetGroupStatusBusyAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4941      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4942  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4943    /* [cover parentID={5A8C33A6-A2F7-43a3-BD1A-B789B92F1A0D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4944    Set the group status busy flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4945    Mcal_SetBitAtomic(&(KernelDataPtr->GrpStatus), (uint8)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4946                      1, 1U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4947    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4948       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4949    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4950       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4951    /* MISRA2012_RULE_8_13_JUSTIFICATION: Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4952       instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4953  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4954  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4955  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4956  ** Traceability: [cover parentID={2582C034-CBD6-47dd-A4A5-BA035DE4ADC2}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4957  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4958  ** Syntax           : LOCAL_INLINE void Adc_lSetGroupResultAtomic             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4959  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4960  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4961  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4962  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4963  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4964  ** Description      : This function changes the group conversion result status**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4965  **                    to 'results-available'.                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4966  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4967  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4968  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4969  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4970  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4971  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4972  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4973  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4974  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4975  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4976  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4977  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4978  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4979  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4980  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4981  LOCAL_INLINE void Adc_lSetGroupResultAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4982      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4983  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4984    /* [cover parentID={19AEEDE0-29FB-42a0-BABA-B35A5720EC52}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4985    Set the group conversion result status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4986    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4987                      1, 1U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4988    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4989       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4990    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4991       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4992    /* MISRA2012_RULE_8_13_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4993       instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4994  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4995  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4996  ** Traceability: [cover parentID={820D4D00-4326-4b14-8DB1-1F17469CE383}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4997  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4998  ** Syntax           : LOCAL_INLINE void Adc_lSetResBuffEndStatusAtomic        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4999  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5000  **                       Adc_GlobalDataType *const KernelDataPtr              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5001  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5002  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5003  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5004  ** Description      : This function changes the group conversion result       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5005  **                    status to 'buffer full' (stream completed)              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5006  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5007  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5008  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5009  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5010  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5011  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5012  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5013  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5014  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5015  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5016  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5017  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5018  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5019  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5020  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5021  LOCAL_INLINE void Adc_lSetResBuffEndStatusAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5022      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5023  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5024    /* [cover parentID={7FD4E3FE-2F0C-4531-A92B-180910EC9525}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5025    Set the result buffer end status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5026    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5027                      1, 1U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5028    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5029       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5030    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5031     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5032    /* MISRA2012_RULE_8_13_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5033     instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5034  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5035  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5036  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5037  ** Traceability: [cover parentID={0820E1A6-1F7A-4253-87FA-090F0AC28936}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5038  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5039  ** Syntax           : LOCAL_INLINE void Adc_lSetGrpNotifAtomic                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5040  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5041  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5042  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5043  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5044  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5045  ** Description      : This function enables the group notification for        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5046  **                    the passed group                                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5047  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5048  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5049  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5050  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5051  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5052  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5053  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5054  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5055  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5056  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5057  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5058  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5059  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5060  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5061  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5062  LOCAL_INLINE void Adc_lSetGrpNotifAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5063      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5064  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5065    /* [cover parentID={8911CC38-9CA9-4daf-ADF1-AC97C465A4C5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5066    Set group notification flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5067    Mcal_SetBitAtomic(&(KernelDataPtr->GrpNotifStatus), (uint8)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5068                      1, 1U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5069    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5070     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5071    /* MISRA2012_RULE_8_13_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5072     instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5073  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5074  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5075  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5076  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5077  ** Traceability: [cover parentID={433512DF-05F4-47a0-843D-CE66924A3A2C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5078  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5079  ** Syntax           : LOCAL_INLINE void Adc_lSetStartupCalStatusAtomic        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5080  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5081  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5082  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5083  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5084  ** Description      : This function sets the startup calibration status to    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5085  **                    STARTED value                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5086  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5087  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5088  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5089  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5090  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5091  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5092  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5093  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5094  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5095  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5096  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5097  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5098  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5099  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5100  LOCAL_INLINE void Adc_lSetStartupCalStatusAtomic(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5101  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5102    /* [cover parentID={EB9D8D9D-C4B3-4261-8FC2-12ACC3AFBB9D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5103    Set the start-up calibration status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5104    Mcal_SetBitAtomic(&Adc_StartupCalStatus, (uint8)0U, 1, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5105                      ADC_STARTUP_CAL_STARTED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5106  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5107  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5108  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5109  ** Traceability: [cover parentID={E3C90EE4-A853-4728-A4D9-805DAE334076}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5110  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5111  ** Syntax           : LOCAL_INLINE void Adc_lClrGroupStatusBusyAtomic         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5112  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5113  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5114  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5115  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5116  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5117  ** Description      : This function clears the Group Status flag to indicate  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5118  **                    ADC_IDLE state.                                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5119  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5120  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5121  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5122  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5123  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5124  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5125  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5126  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5127  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5128  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5129  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5130  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5131  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5132  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5133  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5134  LOCAL_INLINE void Adc_lClrGroupStatusBusyAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5135      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5136  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5137    /* [cover parentID={5636327F-9D28-481b-B9A0-657A7A98871D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5138    Clears the group status busy flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5139    Mcal_SetBitAtomic(&(KernelDataPtr->GrpStatus), (uint8)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5140                      1, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5141    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5142     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5143    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5144     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5145    /* MISRA2012_RULE_8_13_JUSTIFICATION: Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5146     instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5147  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5148  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5149  ** Traceability: [cover parentID={3FA8282D-21D3-4320-A7BC-2B99C0B0EEA7}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5150  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5151  ** Syntax           : LOCAL_INLINE void Adc_lClrGroupResultAtomic             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5152  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5153  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5154  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5155  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5156  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5157  ** Description      : This function changes the group conversion result status**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5158  **                    to un-available                                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5159  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5160  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5161  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5162  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5163  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5164  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5165  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5166  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5167  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5168  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5169  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5170  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5171  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5172  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5173  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5174  LOCAL_INLINE void Adc_lClrGroupResultAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5175      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5176  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5177    /* [cover parentID={09A8B538-E429-43b6-AF83-CA85ACA8A3CC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5178    Clears group result status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5179    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5180                      1, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5181    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5182     instruction, hence they are not unused. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5183    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5184     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5185    /* MISRA2012_RULE_8_13_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5186     instruction, hence cannot be passed as const. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5187  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5188  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5189  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5190  ** Traceability: [cover parentID={8D04B305-3A20-4fb7-BDDD-0B0A973B142D}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5191  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5192  ** Syntax           : LOCAL_INLINE void Adc_lClrResBuffEndStatusAtomic        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5193  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5194  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5195  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5196  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5197  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5198  ** Description      : This function changes the group conversion result buffer**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5199  **                    status to buffer not full.                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5200  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5201  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5202  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5203  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5204  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5205  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5206  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5207  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5208  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5209  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5210  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5211  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5212  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5213  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5214  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5215  LOCAL_INLINE void Adc_lClrResBuffEndStatusAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5216      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5217  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5218    /* [cover parentID={E504C68C-C881-4431-B278-D9CC430745E3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5219    Clears result buffer end status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5220    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5221                      1, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5222    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5223       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5224    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5225       instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5226    /* MISRA2012_RULE_8_13_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5227       instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5228  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5229  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5230  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5231  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5232  ** Traceability: [cover parentID={F22B1E31-A2AF-456f-A730-66C19C41DE4A}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5233  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5234  ** Syntax           : LOCAL_INLINE void Adc_lClrGrpNotifAtomic                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5235  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5236  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5237  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5238  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5239  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5240  ** Description      : This function disables the group notification for the   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5241  **                    passed group.                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5242  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5243  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5244  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5245  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5246  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5247  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5248  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5249  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5250  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5251  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5252  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5253  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5254  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5255  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5256  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5257  LOCAL_INLINE void Adc_lClrGrpNotifAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5258      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5259  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5260    /* [cover parentID={506E8C9D-26BC-4698-B982-B7FFCD4075A5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5261    Clears the group notification flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5262    Mcal_SetBitAtomic(&(KernelDataPtr->GrpNotifStatus), (uint8)GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5263                      1, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5264    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5265     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5266    /* MISRA2012_RULE_2_7_JUSTIFICATION:Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5267     instruction, hence they are not unused.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5268    /* MISRA2012_RULE_8_13_JUSTIFICATION: Parameter are updated via assembly
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5269     instruction, hence cannot be passed as const.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5270  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5271  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5272  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5273  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5274  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5275  ** Traceability: [cover parentID={2F40225D-FC09-48b1-B44F-D32ECE1748F5}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5276  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5277  ** Syntax           : LOCAL_INLINE void Adc_lClrStartupCalStatusAtomic        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5278  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5279  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5280  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5281  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5282  ** Description      : This function clears the startup calibration status to  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5283  **                    NOT STARTED value                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5284  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5285  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5286  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5287  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5288  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5289  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5290  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5291  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5292  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5293  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5294  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5295  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5296  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5297  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5298  LOCAL_INLINE void Adc_lClrStartupCalStatusAtomic(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5299  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5300    /* [cover parentID={F40FDADA-3C86-432c-88AB-064CC8B50CE9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5301    Clears the startup calibration status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5302    Mcal_SetBitAtomic(&Adc_StartupCalStatus, (uint8)0U, 1, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5303  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5304  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5305  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5306  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5307  ** Traceability: [cover parentID={2D130EB1-AADC-408e-9F4A-DD03EAD1818D}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5308  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5309  ** Syntax           : LOCAL_INLINE uint32  Adc_lGetGroupStatus                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5310  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5311  **                       const Adc_GlobalDataType * const KernelDataPtr       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5312  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5313  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5314  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5315  ** Description      : This function returns the Adc group status              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5316  **                    ADC_IDLE/ADC_BUSY.                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5317  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5318  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5319  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5320  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5321  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5322  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5323  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5324  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5325  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5326  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5327  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5328  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5329  ** Return value     : 0U:ADC_IDLE                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5330  **                    1U:ADC_BUSY                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5331  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5332  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5333  LOCAL_INLINE uint32 Adc_lGetGroupStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5334    const Adc_GlobalDataType * const KernelDataPtr,  const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5335  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5336    /* [cover parentID={2BA52126-B36A-459f-BCF9-1178C2FF9B5B},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5337    {7CDAEA32-F9C9-424e-968E-07D8700D211F}]  Read Group status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5338    return((uint32)(Mcal_GetBitAtomic((uint32)KernelDataPtr->GrpStatus, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5339                                      GroupId, 1U)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5340  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5341  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5342  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5343  ** Traceability: [cover parentID={870294C3-CB35-4754-A309-02A169041B1E}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5344  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5345  ** Syntax           : LOCAL_INLINE uint32  Adc_lGetGroupResultStatus          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5346  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5347  **                       const Adc_GlobalDataType * const KernelDataPtr       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5348  **                       Adc_GroupType GroupId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5349  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5350  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5351  ** Description      : This function returns whether results are available for **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5352  **                     the Group ID                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5353  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5354  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5355  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5356  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5357  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5358  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5359  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5360  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5361  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5362  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5363  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5364  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5365  ** Return value     : 0U:Adc results are not available                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5366  **                    1U:Atleast one streaming sample is completed            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5367  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5368  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5369  LOCAL_INLINE uint32 Adc_lGetGroupResultStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5370     const Adc_GlobalDataType * const KernelDataPtr,const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5371  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5372    /* [cover parentID={C49CDEDF-92B1-4a4e-BB62-FE775F8D59DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5373    Read Group result status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5374    return((uint32)(Mcal_GetBitAtomic((uint32)KernelDataPtr->GrpResultStatus, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5375                                      GroupId, 1U)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5376  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5377  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5378  ** Traceability: [cover parentID={4D4DD2DD-2B2C-4f8a-8EBC-D80BDD7E80EC}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5379  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5380  ** Syntax           : LOCAL_INLINE uint32  Adc_lGetResBuffEndStatus           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5381  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5382  **                       const Adc_GlobalDataType * const KernelDataPtr       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5383  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5384  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5385  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5386  ** Description      : This function returns the Result buffer end status      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5387  **                   (ADC_STREAM_COMPLETED)                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5388  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5389  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5390  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5391  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5392  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5393  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5394  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5395  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5396  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5397  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5398  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5399  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5400  ** Return value     : 0U:Adc result buffer is not full                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5401  **                    1U:Adc result buffer is full                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5402  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5403  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5404  LOCAL_INLINE uint32 Adc_lGetResBuffEndStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5405       const Adc_GlobalDataType *const KernelDataPtr,const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5406  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5407    /* [cover parentID={E484A794-16F7-43de-9B60-0751057209EB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5408    Read the Result buffer end status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5409    return((uint32)(Mcal_GetBitAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5410                      (uint32)KernelDataPtr->GrpBufferEndResultStatus,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5411                      GroupId,1U)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5412  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5413  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5414  #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5415  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5416  ** Traceability: [cover parentID={4BE0E071-1D42-46e1-ADEA-E6743A1D5DDF}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5417  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5418  ** Syntax           : LOCAL_INLINE uint32  Adc_lGetGroupNotifStatus           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5419  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5420  **                       const Adc_GlobalDataType * const KernelDataPtr       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5421  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5422  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5423  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5424  ** Description      : This function returns the notification enabled status   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5425  **                   for the Group ID                                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5426  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5427  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5428  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5429  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5430  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5431  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5432  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5433  ** Parameters(in)   : KernelDataPtr - Pointer to Adc_KernelData array element **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5434  **                    GroupId - Adc Channel Group number                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5435  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5436  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5437  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5438  ** Return value     : 0U:Adc Groups notification is disabled                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5439  **                    1U:Adc Groups notification is enabled                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5440  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5441  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5442  LOCAL_INLINE uint32 Adc_lGetGroupNotifStatus(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5443     const Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5444  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5445    /* [cover parentID={10BF53A8-D027-4c09-B615-F49D3CAE4241}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5446    Read group notification enabled status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5447    return((uint32)(Mcal_GetBitAtomic((uint32)KernelDataPtr->GrpNotifStatus, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5448                                      GroupId, 1U)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5449  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5450  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5451  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5452  #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5453  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5454  ** Traceability: [cover parentID={B75A6131-C11E-4b18-97F9-2A4ED48734B0}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5455  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5456  ** Syntax           : LOCAL_INLINE uint32 Adc_lGetStartupCalStatusAtomic      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5457  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5458  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5459  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5460  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5461  ** Description      : This function returns the startup calibration status    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5462  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5463  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5464  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5465  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5466  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5467  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5468  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5469  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5470  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5471  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5472  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5473  ** Return value     : 0U:Startup calibration not started                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5474  **                    1U:Startup calibration started                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5475  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5476  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5477  LOCAL_INLINE uint32 Adc_lGetStartupCalStatusAtomic(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5478  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5479    /* [cover parentID={706AF351-DE5D-42ca-8163-DA5F84BD887D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5480    Read the Start-up calibration status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5481    return ((uint32)Mcal_GetBitAtomic((uint32)Adc_StartupCalStatus, (uint8)0U, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5482                                      1U));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5483  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5484  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5485  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5486  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5487       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5488  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5489  ** Traceability: [cover parentID={4E86096B-BE3F-46eb-8676-44DED325F428}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5490  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5491  ** Syntax           : LOCAL_INLINE uint32  Adc_lGetAllGroupStatus             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5492  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5493  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5494  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5495  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5496  ** Description      : This function checks the BUSY / IDLE status of all the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5497  **                    groups across all the kernels                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5498  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5499  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5500  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5501  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5502  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5503  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5504  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5505  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5506  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5507  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5508  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5509  ** Return value     : 0U:All groups are in ADC_IDLE state                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5510  **                    1U:Atleast one group is in ADC_BUSY state               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5511  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5512  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5513  LOCAL_INLINE uint32 Adc_lGetAllGroupStatus(const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5514  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5515    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5516    uint32 lKernelCount, lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5517    lRetVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5518    /* [cover parentID={FD4BB6AC-BCB2-4b81-A146-7E9E26DE37E4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5519    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5520    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5521    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5522      /* [cover parentID={E050FE45-29B3-4d4e-B619-811B519A7CA8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5523      Is Kernel Config pointer not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5524      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5525          NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5526      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5527        lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelCount, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5528        /* [cover parentID={246E93EF-FBC9-4bf3-9F30-575CB5F8A35F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5529        Check if any group is busy, then return a busy state  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5530        if( (lKernelDataPtr->GrpStatus) != (uint32)0U )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5531        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5532          lRetVal = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5533          break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5534        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5535      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5536    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5537    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5538  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5539  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5540  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5541  #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5542       (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5543  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5544  ** Traceability: [cover parentID={BA588035-CF4B-4356-BB68-49EB32920F22}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5545  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5546  ** Syntax           : static void  Adc_lSetRunningChAndResReg                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5547  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5548  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5549  **                      const Adc_GroupCfgType * const GrpCfgPtr,             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5550  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5551  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5552  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5553  ** Description      : This function sets the running channels and result      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5554  **                    registers for a kernel and, if the kernel is            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5555  **                    synchronization master, also for all slave kernels of   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5556  **                    the synchronization group                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5557  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5558  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5559  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5560  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5561  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5562  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5563  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5564  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5565  **                    GrpCfgPtr - Pointer to the group configuration          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5566  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5567  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5568  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5569  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5570  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5571  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5572  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5573  static void Adc_lSetRunningChAndResReg(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5574                                        const Adc_GroupCfgType * const GrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5575                                        const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5576  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5577    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5578  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5579    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5580  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5581    /* [cover parentID={25C2A78C-30D8-4593-851F-6290D421D8C0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5582    Set flags for used channels and result registers for Master kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5583    lKernelDataPtr->AllRunningChannels |= GrpCfgPtr->ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5584    lKernelDataPtr->AllRunningResReg |= GrpCfgPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5585  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5586    /* [cover parentID={A2C09F43-4C56-4eb0-90F6-F649D5DFC351}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5587    Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5588    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5589    /* [cover parentID={84F10512-2928-4b1d-800E-EA01DDEDBCD8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5590    Channel of group configured for Sync conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5591    if (GrpCfgPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5592    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5593      const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5594      uint8 lKernelCount, lSlaveKernel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5595  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5596      /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5597      lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5598  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5599      /* [cover parentID={F7AAA234-49AB-44d4-BBDD-192F441B9E13}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5600      Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5601      for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5602           lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5603      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5604        lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5605        /* [cover parentID={2A2585C8-A0E1-4f8c-9A3B-1BE267AAB3E8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5606        Valid Slave Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5607        if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5608        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5609          lKernelDataPtr = Adc_lGetKernelDataAddress(lSlaveKernel, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5610          /* [cover parentID={ADD974F8-0C2C-46bb-B975-4ABCBB1CCC2C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5611          Set all running Channels & running Result register for slave kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5612          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5613          lKernelDataPtr->AllRunningChannels |= GrpCfgPtr->SyncChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5614          lKernelDataPtr->AllRunningResReg |= GrpCfgPtr->SyncResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5615        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5616      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5617    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5618    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5619  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5620  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5621  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5622  #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5623       (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5624  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5625  ** Traceability: [cover parentID={4AD66CCC-980F-452b-951E-B873705DF1A4}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5626  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5627  ** Syntax           : static void  Adc_lClrRunningChAndResReg                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5628  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5629  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5630  **                      const Adc_GroupCfgType * const GrpCfgPtr,             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5631  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5632  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5633  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5634  ** Description      : This function clears the running channels and result    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5635  **                    registers for a kernel and, if the kernel is            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5636  **                    synchronization master, also for all slave kernels of   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5637  **                    the synchronization group                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5638  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5639  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5640  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5641  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5642  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5643  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5644  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5645  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5646  **                    GrpCfgPtr - Pointer to the group configuration          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5647  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5648  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5649  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5650  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5651  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5652  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5653  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5654  static void Adc_lClrRunningChAndResReg(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5655                                      const Adc_GroupCfgType * const GrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5656                                      const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5657  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5658    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5659  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5660    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5661  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5662    /* [cover parentID={46DDFDAA-2EA8-4b97-AF0A-7F3723691B61}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5663    Clear flags for used channels and result registers for Master Kernel[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5664    lKernelDataPtr->AllRunningChannels &= \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5665      (uint16)((~(GrpCfgPtr->ChannelMask))& ADC_CHANNEL_RESULT_CLR_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5666    lKernelDataPtr->AllRunningResReg &= \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5667      (uint16)((~(GrpCfgPtr->ResultRegMask)) & ADC_CHANNEL_RESULT_CLR_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5668  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5669    /* [cover parentID={D00F1051-9EA9-438b-AA46-BC6656041381}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5670    Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5671    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5672    /* [cover parentID={8A0532F1-B8E2-4859-AD95-2419F4709850}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5673    Any channel configured for Sync conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5674    if (GrpCfgPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5675    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5676      const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5677      uint8 lKernelCount, lSlaveKernel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5678  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5679      /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5680      lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5681  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5682      /* [cover parentID={DE3FB344-AC36-4f7f-B75E-F725406EBB12}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5683      Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5684      for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5685           lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5686      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5687        lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5688        /* [cover parentID={490049C6-4CA9-4e9a-8E03-89A8C4C6B948}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5689        Valid Slave Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5690        if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5691        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5692          lKernelDataPtr = Adc_lGetKernelDataAddress(lSlaveKernel, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5693  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5694          /* [cover parentID={5AC3CD7F-128D-4c5c-A1EB-30321ACA2C57}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5695          Clear all running Channels & running Result register for slave kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5696          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5697          lKernelDataPtr->AllRunningChannels &= \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5698            (uint16)((~GrpCfgPtr->SyncChannelMask) & ADC_CHANNEL_RESULT_CLR_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5699          lKernelDataPtr->AllRunningResReg &= \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5700            (uint16)((~GrpCfgPtr->SyncResRegMask) & ADC_CHANNEL_RESULT_CLR_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5701        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5702      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5703    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5704    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5705  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5706  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5707  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5708  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5709  ** Traceability: [cover parentID={529A8B95-316F-4ee4-935D-F60454F83ADE}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5710  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5711  ** Syntax           : LOCAL_INLINE void Adc_lInit                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5712  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5713  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5714  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5715  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5716  ** Description      : This function resets the global and kernel specific SFRs**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5717  **                    to reset values and then initializes them as per        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5718  **                    configuration.                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5719  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5720  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5721  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5722  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5723  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5724  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5725  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5726  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5727  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5728  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5729  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5730  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5731  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5732  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5733  LOCAL_INLINE void Adc_lInit(const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5734  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5735    uint32 lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5736    /***** Start of DEINIT Process *****/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5737    /* [cover parentID={CCD3A440-B4AA-4712-9CE3-10E6462412B0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5738    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5739    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5740    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5741      /* [cover parentID={8E126E2C-6B38-43d7-8799-D18A508584E4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5742      Check if Kernel is Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5743      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \ 
	movh.a	a12,#@his(Adc_ConfigPtr)
.L955:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5739    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
	j	.L6
.L5:
	ret

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5739    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
.L7:
	ld.a	a15,[a12]@los(Adc_ConfigPtr)
.L956:
	addsc.a	a15,a15,d9,#2
	ld.a	a15,[a15]4
.L760:
	addsc.a	a15,a15,d8,#2
.L761:
	ld.w	d15,[a15]
.L957:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5743      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \       (inlined)
	jeq	d15,#0,.L8
.L958:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5744          NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5745      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5746        /* [cover parentID={E1A553C1-FDC5-46dc-8926-A5416CEC4047}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5747        De-Initialize the Kernels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5748        Adc_lKernelDeInit(Adc_ConfigPtr->CoreCfgPtr[CoreId]-> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5749                          HwUnitCfgPtr[lKernelCount], lKernelCount);
	ld.a	a4,[a15]
.L762:
	mov	d4,d8
.L763:
	call	Adc_lKernelDeInit

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5743      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \       (inlined)
.L8:
	add	d8,#1

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5739    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
.L6:
	jlt.u	d8,#12,.L7
.L764:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5755    if (MCAL_MASTER_COREID == CoreId)      (inlined)
	jne	d9,#0,.L9
.L264:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5750      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5751    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5752    /* [cover parentID={E848EEC7-1586-453a-9096-04780F02DD20}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5753    Is CoreId is equal to Master CoreId
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5754    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5755    if (MCAL_MASTER_COREID == CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5756    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5757      Adc_lResetGlobalSfr();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5758      /***** End of DEINIT Process *****/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5759      /***** Start of INIT Process *****/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5760      /* [cover parentID={F6D426A3-719A-42f0-BA69-4CE486AF02C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5761      Configure the Global Register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5762      MODULE_EVADC.GLOBCFG.U = ( (Adc_ConfigPtr->GlobalCfgPtr->GlobalCfg)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5763                                 (uint32)ADC_GLOBCFG_WRITE_PROTECT_MSK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5764      MODULE_EVADC.GLOB.ICLASS[0U].U = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5765                               Adc_ConfigPtr->GlobalCfgPtr->GlobInputClass0Cfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5766      MODULE_EVADC.GLOB.ICLASS[1U].U = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5767                               Adc_ConfigPtr->GlobalCfgPtr->GlobInputClass1Cfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5768  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5769      /* Configure Global EMUX Interface Register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5770      MODULE_EVADC.EMUXSEL.U = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5771                       Adc_ConfigPtr->GlobalCfgPtr->GlobEmuxGrpInterfaceCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5772  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5773      /* [cover parentID={2260EB2A-A128-4ac0-8526-889FDE51E2F5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5774      Adc Calibration Status API is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5775      #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5776      /* MISRA2012_RULE_2_2_JUSTIFICATION: Tricore Atomic instructions are used
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5777      to update global variables in this function call, which is not detected
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5778      by MISRA. Hence, this function call is not a dead code*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5779      /* [cover parentID={39DC007C-582A-4c82-A709-EB21C7C46301}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5780      Clear Start-up Calibration status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5781      Adc_lClrStartupCalStatusAtomic();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5782      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5783    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5784  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5785    /* [cover parentID={24F66B64-3DC4-4acc-9235-185575EB8AFB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5786    Till the last available kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5787    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5788    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5789      /* [cover parentID={E5D7F0EF-55DA-4e97-B66C-E86A63DD97DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5790      Check if Kernel is Configured for current core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5791      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5792          NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5793      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5794        /* [cover parentID={FD1A7B89-ED6C-4197-86D6-AA25A6EDEB53}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5795        Initialize the Kernels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5796        Adc_lKernelInit(Adc_ConfigPtr->CoreCfgPtr[CoreId]-> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5797                        HwUnitCfgPtr[lKernelCount], lKernelCount);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5798      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5799    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5800  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5801    /* [cover parentID={25CC5098-87D2-4d58-91D4-DDEE31BE68E3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5802    Loop till the last kernel ID,missing or un-configured kernels will be
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5803    NULL PTR in the config set [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5804    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5805    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5806      /* [cover parentID={5F22ED4F-3113-4487-8848-FCFA8C7735F8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5807      Check if Kernel is Configured for current core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5808      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5809          NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5810      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5811        /* Converter is put to always ON mode via the ANONC bit,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5812           after all registers are configured */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5813        /* Converters need to be switched ON here,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5814           because startup calibration requires all converters to be ON */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5815        /* MISRA2012_RULE_10_3_JUSTIFICATION: The bitfied of SFR are programed
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5816        with an unsigned long value. Since, bitfields are of different type
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5817        than unsigned long MISRA populates this warning. However the write is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5818        performed only to the intended bits by applying proper masks*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5819        /* [cover parentID={A1377B25-6229-4fe3-A294-675D0B4F3235}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5820        Switch on kernels to full power as generated in configuration structure
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5821        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5822        MODULE_EVADC.G[lKernelCount].ARBCFG.B.ANONC = (Adc_ConfigPtr->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5823                     CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5824                     HwCfgPtr->GrpArbitCfg & (uint32)ADC_TARGET_POWER_STATE_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5825        /* Ensure register is written and converter is switched ON */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5826        DSYNC();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5827      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5828    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5829    Adc_lResetCoreGlobalVars(CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5830    /***** End of INIT Process *****/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5831  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5832  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5833  #if (ADC_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5834  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5835  ** Traceability: [cover parentID={4E5181CA-A240-4e90-8290-A1652275DEE7}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5836  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5837  ** Syntax           : LOCAL_INLINE Std_ReturnType Adc_lInitCheck              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5838  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5839  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5840  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5841  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5842  ** Description      : This function checks the value of initialized global    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5843  **                    and kernel specific SFRs with configured value          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5844  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5845  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5846  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5847  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5848  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5849  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5850  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5851  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5852  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5853  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5854  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5855  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5856  ** Return value     : E_OK: Initialization verification passed                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5857  **                    E_NOT_OK: Initialization verification failed            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5858  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5859  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5860  LOCAL_INLINE Std_ReturnType Adc_lInitCheck(const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5861  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5862    Std_ReturnType lErrVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5863    uint32 lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5864    uint32 lCompareFlag = 0xFFFFFFFFU;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5865  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5866    /* [cover parentID={DE7D23C9-0CAF-450b-A903-58D13BCBD325}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5867    Core Id is equal to Master Core Id [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5868    if (MCAL_MASTER_COREID == CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5869    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5870      /* [cover parentID={266762F7-8867-4bc6-8F9A-2A22B96824C3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5871      Global SFR Check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5872      lCompareFlag = Adc_lCheckGlobalSfr(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5873  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5874      /* [cover parentID={8EFDD2E5-647A-4719-8FDC-A9D21AB1B9DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5875      Startup Calibration API is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5876      #if (ADC_STARTUP_CALIB_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5877      uint32 lSfrVal, lCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5878      /* [cover parentID={D96B87E4-CEA3-446a-8889-D95BD03DE49E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5879      Compare Startup calibration status with reset value & Update flag as
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5880      per result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5881      lSfrVal = (uint32)(Adc_StartupCalStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5882      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5883      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5884      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5885    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5886  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5887    /* [cover parentID={0DCB5978-7E12-4fd2-9266-7A606FE95BFA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5888    Loop till the last kernel ID, missing or un-configured kernels will be
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5889    NULL PTR in the config set [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5890    for(lKernelCount=(uint32)0U; lKernelCount < ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5891    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5892      /* [cover parentID={A7DE9942-63F5-4408-9710-D35A75C40E8D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5893      Check if Kernel is Configured for current core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5894      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount]!=NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5895      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5896        /* [cover parentID={55F2AD10-1699-4573-A3AE-1A08EFEA21C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5897        Kernel Sfr check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5898        lCompareFlag = Adc_lCheckKernelSfr(Adc_ConfigPtr->CoreCfgPtr[CoreId]-> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5899                          HwUnitCfgPtr[lKernelCount], lKernelCount, lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5900  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5901        /* [cover parentID={72ECE23F-AEF3-4693-A9E7-59272501116D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5902        HW Trigger API is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5903        #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5904        /* [cover parentID={6E53EEF0-8C59-453b-B851-D8B4DF50D720}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5905        GTM is available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5906        #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5907        /* [cover parentID={ED7A26D7-CB35-4558-8054-172DCA588D97}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5908        GTM Sfrcheck [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5909        lCompareFlag = Adc_lCheckGtmSfr(Adc_ConfigPtr->CoreCfgPtr[CoreId]-> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5910                                        HwUnitCfgPtr[lKernelCount], lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5911        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5912        /* [cover parentID={EFB9B393-7A33-4ed5-983A-9A9DADF7B10A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5913        ERU Sfr Check  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5914        lCompareFlag = Adc_lCheckEruSfr(Adc_ConfigPtr->CoreCfgPtr[CoreId]-> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5915                                        HwUnitCfgPtr[lKernelCount], lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5916        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5917  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5918      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5919    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5920    /* [cover parentID={0EBD4963-F18F-4420-8002-5613E64B112F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5921    Verify reset values of global variables [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5922    lCompareFlag = Adc_lCheckGlobalCoreVars(CoreId, lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5923  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5924    /* [cover parentID={F0DEB2CE-09D4-4800-9B7A-62074DF9B3D7}] 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5925    Check if any bit is not as per configured value [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5926    if (lCompareFlag != 0xFFFFFFFFU)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5927    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5928      /* Update error value as E_NOT_OK */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5929      lErrVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5930    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5931    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5932  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5933  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5934  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5935  #if (ADC_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5936  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5937  ** Traceability: [cover parentID={3972B576-1F0F-4f92-858E-D1825A3530B5}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5938  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5939  ** Syntax           : LOCAL_INLINE uint32 Adc_lCheckGlobalSfr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5940  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5941  **                       const uint32 CompareFlag                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5942  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5943  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5944  ** Description      : This function checks the reset value of global SFRs     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5945  **                    with configured value                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5946  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5947  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5948  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5949  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5950  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5951  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5952  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5953  ** Parameters(in)   : CompareFlag - Flag to compare with configured SFRs or   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5954  **                    Variables                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5955  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5956  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5957  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5958  ** Return value     : Compare flag value - all bits as 1 indicates a pass case**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5959  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5960  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5961  LOCAL_INLINE uint32 Adc_lCheckGlobalSfr(const uint32 CompareFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5962  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5963    uint32 lSfrVal, lCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5964    uint32 lCompareFlag = CompareFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5965    const Ifx_EVADC_GLOB *lEvadcGlobalSfr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5966    lEvadcGlobalSfr = &(MODULE_EVADC.GLOB);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5967  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5968    /* Compare global config register with configuration value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5969       as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5970    lSfrVal = MODULE_EVADC.GLOBCFG.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5971    lCfgVal = (Adc_ConfigPtr->GlobalCfgPtr->GlobalCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5972    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5973  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5974    /* Compare External Multiplexer Interface Select Register with config values
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5975       & Update flag based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5976    lSfrVal = (MODULE_EVADC.EMUXSEL.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5977    lCfgVal = (Adc_ConfigPtr->GlobalCfgPtr->GlobEmuxGrpInterfaceCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5978    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5979  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5980    /* Compare global input class0 register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5981    Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5982    lSfrVal = MODULE_EVADC.GLOB.ICLASS[0U].U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5983    lCfgVal = (Adc_ConfigPtr->GlobalCfgPtr->GlobInputClass0Cfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5984    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5985  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5986    /* Compare global input class1 register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5987       Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5988    lSfrVal = MODULE_EVADC.GLOB.ICLASS[1U].U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5989    lCfgVal = (Adc_ConfigPtr->GlobalCfgPtr->GlobInputClass1Cfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5990    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5991  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5992    /* Compare boundary select register with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5993       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5994    lSfrVal = (lEvadcGlobalSfr->BOUND.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5995    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5996    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5997  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5998    /* Compare event flag register with config values & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5999       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6000    lSfrVal = (lEvadcGlobalSfr->EFLAG.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6001    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6002    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6003  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6004    /* Compare event node pointer register with config values & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6005       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6006    lSfrVal = (lEvadcGlobalSfr->EVNP.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6007    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6008    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6009  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6010    /* Compare Test function register with config values & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6011       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6012    lSfrVal = (lEvadcGlobalSfr->TF.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6013    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6014    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6015  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6016    /* Compare Test Enable register with config values & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6017       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6018    lSfrVal = (lEvadcGlobalSfr->TE.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6019    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6020    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6021  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6022    /* Compare Result control register with config values & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6023       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6024    lSfrVal = (lEvadcGlobalSfr->RCR.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6025    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6026    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6027  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6028    /* Compare group result register with config values & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6029       based on result*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6030    lSfrVal = (lEvadcGlobalSfr->RES.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6031    lSfrVal = lSfrVal &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6032              ((uint32)IFX_EVADC_GLOB_RES_VF_MSK << IFX_EVADC_GLOB_RES_VF_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6033    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6034    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6035  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6036    return(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6037  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6038  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6039  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6040  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6041  ** Traceability: [cover parentID={522687F7-22BF-4886-BA40-D2D3B6D56537}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6042  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6043  ** Syntax           : LOCAL_INLINE void Adc_lResetGlobalSfr                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6044  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6045  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6046  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6047  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6048  ** Description      : This function resets the global SFRs of EVADC           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6049  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6050  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6051  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6052  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6053  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6054  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6055  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6056  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6057  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6058  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6059  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6060  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6061  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6062  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6063  LOCAL_INLINE void Adc_lResetGlobalSfr(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6064  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6065    Ifx_EVADC_GLOB *lEvadcGlobalSfr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6066    lEvadcGlobalSfr = &(MODULE_EVADC.GLOB);
	movh.a	a15,#61442
.L765:
	lea	a15,[a15]@los(0xf00200a0)
.L959:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6067    /* Reset Global SFRs to default values */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6068    lEvadcGlobalSfr->ICLASS[0U].U = (uint32)0U;
	mov	d0,#0
.L960:
	st.w	[a15],d0
.L961:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6069    lEvadcGlobalSfr->ICLASS[1U].U = (uint32)0U;
	st.w	[a15]4,d0
.L962:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6070    lEvadcGlobalSfr->BOUND.U      = (uint32)0U;
	st.w	[a15]24,d0
.L963:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6071    lEvadcGlobalSfr->RCR.U        = (uint32)0U;
	st.w	[a15]480,d0
.L964:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6072    lEvadcGlobalSfr->RES.U        = ((uint32)ADC_ONE_U << \ 
	movh	d15,#32768
.L965:
	st.w	[a15]608,d15
.L966:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6073                                     IFX_EVADC_GLOB_RESD_VF_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6074    lEvadcGlobalSfr->EFLAG.U      = ((uint32)ADC_ONE_U << \ 
	movh	d15,#256
.L967:
	st.w	[a15]64,d15
.L968:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6075                                     IFX_EVADC_GLOB_EFLAG_REVGLBCLR_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6076    lEvadcGlobalSfr->EVNP.U       = (uint32)0U;
	st.w	[a15]160,d0
.L969:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6077    lEvadcGlobalSfr->TE.U         = (uint32)0U;
	st.w	[a15]196,d0
.L970:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6078    lEvadcGlobalSfr->TF.U         = ADC_GLOBTF_WRITE_PROTECT_MSK;
	mov.u	d15,#32768
	addih	d15,d15,#128
.L971:
	st.w	[a15]192,d15
.L972:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6079    MODULE_EVADC.EMUXSEL.U        = (uint32)0U;
	movh.a	a2,#61442
	st.w	[a2]@los(0xf00203f0),d0
.L973:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6080    MODULE_EVADC.GLOBCFG.U        = (uint32)ADC_GLOBCFG_WRITE_PROTECT_MSK;
	mov.u	d15,#32768
.L974:
	st.w	[a2]@los(0xf0020080),d15
.L265:
	movh.a	a4,#@his(Adc_ConfigPtr)
	ld.a	a15,[a4]@los(Adc_ConfigPtr)
.L766:
	ld.a	a15,[a15]
.L975:
	ld.w	d15,[a15]
.L976:
	insert	d15,d15,#1,#15,#1
.L977:
	st.w	[a2]@los(0xf0020080),d15
.L978:
	ld.a	a15,[a4]@los(Adc_ConfigPtr)
.L979:
	ld.a	a15,[a15]
.L980:
	ld.w	d15,[a15]4
.L981:
	st.w	[a2]@los(0xf00200a0),d15
.L982:
	ld.a	a15,[a4]@los(Adc_ConfigPtr)
.L983:
	ld.a	a15,[a15]
.L984:
	ld.w	d15,[a15]8
.L985:
	st.w	[a2]@los(0xf00200a4),d15
.L986:
	ld.a	a15,[a4]@los(Adc_ConfigPtr)
.L987:
	ld.a	a15,[a15]
.L988:
	ld.w	d15,[a15]12
.L989:
	st.w	[a2]@los(0xf00203f0),d15
.L270:
	movh.a	a15,#@his(Adc_StartupCalStatus)
	lea	a15,[a15]@los(Adc_StartupCalStatus)

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5302    Mcal_SetBitAtomic(&Adc_StartupCalStatus, (uint8)0U, 1, 0U);      (inlined)
	
	imask e2,d0,d0,#(1) 
 ldmst [a15]0,e2
	

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5755    if (MCAL_MASTER_COREID == CoreId)      (inlined)
.L9:
	mov	d0,#0
.L767:
	movh.a	a2,#@his(Adc_ConfigPtr)
.L273:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6081  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6082  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6083  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6084  ** Traceability: [cover parentID={3E867D04-186C-4c82-B2C0-8E41432B521C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6085  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6086  ** Syntax           : static void Adc_lResetCoreGlobalVars                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6087  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6088  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6089  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6090  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6091  ** Description      : This function resets the global variables of ADC driver **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6092  **                    for the currently executing CPU core                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6093  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6094  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6095  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6096  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6097  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6098  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6099  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6100  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6101  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6102  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6103  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6104  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6105  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6106  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6107  static void Adc_lResetCoreGlobalVars(const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6108  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6109    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6110    uint8 lLoopCount, lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6111    /* Loop for all the indices of the array Adc_KernelData */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6112  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6113    /* [cover parentID={1B11016D-9F49-4984-BB13-7467B1512E8E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6114    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6115    for(lLoopCount = (uint8)0U; lLoopCount < Adc_kKernelUsedCount[CoreId]; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6116        lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6117    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6118      lKernelDataPtr = &Adc_kKernelData[CoreId][lLoopCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6119  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6120      /* [cover parentID={EDE394E7-65BE-48d7-A462-FE1BACEE49CF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6121      DMA Mode Result Handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6122      #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6123      /* When ADC_RESULT_HANDLING_IMPLEMENTATION is ADC_DMA_MODE_RESULT_HANDLING,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6124         then ADC_ENABLE_QUEUING will always be STD_OFF.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6125         Hence, this loop is not required when ADC_RESULT_HANDLING_IMPLEMENTATION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6126         is ADC_DMA_MODE_RESULT_HANDLING  */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6127      uint8 lGroupCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6128      for(lGroupCount = (uint8)0U; lGroupCount < ADC_MAX_GROUPS; lGroupCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6129      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6130        /* [cover parentID={F594617E-EB48-40c6-A8D0-5CE67A9A8D89}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6131        Reset the Group variables to Default values [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6132        lKernelDataPtr->GrpResBuffer[lGroupCount] = (Adc_ValueGroupType *)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6133        lKernelDataPtr->NumofValidConRes[lGroupCount] = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6134            (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6135  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6136        /* [cover parentID={CC1B181E-8C5F-4770-99E5-1A6298AA0335}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6137        Hw Priority is ON or Queue Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6138        #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6139            (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6140        /* Intialize queue elements with invalid group ID */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6141        for(lRsCount = (uint8)0U; lRsCount < ADC_REQSRC_USED_COUNT; lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6142        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6143          /* [cover parentID={AAD55E9E-ECC2-430f-8E92-9F52DA531645}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6144          Intialize the Queue elements with Invalid group ID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6145          lKernelDataPtr->RSData[lRsCount].QueueOfSwGroup[lGroupCount].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6146          PreviousGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6147          lKernelDataPtr->RSData[lRsCount].QueueOfSwGroup[lGroupCount].NextGroup=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6148                                                          ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6149        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6150        /* [cover parentID={BA01C756-FB09-4097-817F-69B6ADF7C5B6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6151        HW-SW Priority is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6152        #elif(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6153        /* [cover parentID={0A8C1914-2D9B-47b8-8CBC-ED7A07685DC1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6154        Reset Queue Of Sw Group with Invalid Group ID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6155        lKernelDataPtr->QueueOfSwGroup[lGroupCount].PreviousGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6156                                                ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6157        lKernelDataPtr->QueueOfSwGroup[lGroupCount].NextGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6158                                                ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6159        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6160      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6161      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6162  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6163      /* [cover parentID={43DFC2F5-BF43-4333-A8C9-9D2D03E5FBE7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6164      Till the last available Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6165      for(lRsCount = (uint8)0U; lRsCount < ADC_REQSRC_USED_COUNT; lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6166      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6167        lKernelDataPtr->RSData[lRsCount].ActiveGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6168        lKernelDataPtr->RSData[lRsCount].ActiveLimitChkCh = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6169                                                        ADC_INVALID_CHANNEL_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6170        lKernelDataPtr->RSData[lRsCount].IsrNoServiceFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6171        /* [cover parentID={CFE2BDA7-765A-4ae9-9C0B-E311DB674FB0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6172        Hw Priority is ON or Queue Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6173        #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6174            (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6175        /* [cover parentID={27AD6803-BC77-4ab4-B4A2-8085DD397184}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6176        Intialize queue elements with Invalid group ID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6177        lKernelDataPtr->RSData[lRsCount].PopGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6178        lKernelDataPtr->RSData[lRsCount].PushGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6179        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6180      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6181  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6182      lKernelDataPtr->GrpStatus = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6183      lKernelDataPtr->GrpResultStatus = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6184      lKernelDataPtr->GrpBufferEndResultStatus = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6185      lKernelDataPtr->GrpNotifStatus = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6186      lKernelDataPtr->AllRunningChannels = (uint16)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6187      lKernelDataPtr->AllRunningResReg = (uint16)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6188      #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6189      lKernelDataPtr->PopGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6190      lKernelDataPtr->PushGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6191      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6192  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6193      /* [cover parentID={20A21461-40FA-41d8-B002-60EB18D18AC5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6194      Priority mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6195      #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6196      /* [cover parentID={DF905651-5CAA-42e5-B6EA-C189D0DAB625}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6197      Limit check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6198      #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6199      /* [cover parentID={FD9F85E4-BFAF-4af2-B721-715FEFD4683D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6200      Reset limit check active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6201      lKernelDataPtr->LimitChkActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6202      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6203      /* [cover parentID={6A40180B-D061-4b5b-B55C-DF6BE619E43D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6204      Reset alias active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6205      lKernelDataPtr->AliasActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6206      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6207  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6208      /* [cover parentID={08D32820-40AE-4f1c-8C9D-BBEEDB188F54}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6209      Low Power State Support is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6210      #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6211      /* [cover parentID={696F4B82-DE3C-4428-B8E0-AB995E5D5BCD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6212      Reset Low power state support variable [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6213      Mcal_SetBitAtomic(&Adc_PowerStateTransitionRequestBit, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6214                        (uint8)(CoreId * ADC_BITS_PER_POWER_STATE),
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6215                        ADC_BITS_PER_POWER_STATE, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6216      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6217  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6218      #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6219      /* Reset Emux Conversion Active Flag */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6220      lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6221      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6222    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6223  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6224  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6225  #if (ADC_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6226  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6227  ** Traceability: [cover parentID={0842D2A4-27DD-469a-A676-FDED00356089}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6228  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6229  ** Syntax           : LOCAL_INLINE uint32 Adc_lCheckGlobalCoreVars            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6230  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6231  **                       const uint32 CoreId,                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6232  **                       const uint32 CompareFlag                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6233  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6234  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6235  ** Description      : This function checks the reset value of global variable **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6236  **                    with config value for the currently executing CPU core  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6237  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6238  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6239  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6240  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6241  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6242  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6243  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6244  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6245  **                  : CompareFlag - Flag to compare with configured SFRs or   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6246  **                    Variables                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6247  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6248  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6249  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6250  ** Return value     : Compare flag value - all bits as 1 indicates a pass case**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6251  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6252  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6253  LOCAL_INLINE uint32 Adc_lCheckGlobalCoreVars(const uint32 CoreId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6254                                                         const uint32 CompareFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6255  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6256    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6257    uint8 lLoopCount, lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6258    uint32 lSfrVal, lCfgVal, lCompareFlag = CompareFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6259  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6260    /* [cover parentID={61E62711-4C4D-4f0e-BFBF-9F94CC7552BC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6261    Loop for all the indices of the array Adc_KernelData [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6262    for(lLoopCount = (uint8)0U; (lLoopCount < Adc_kKernelUsedCount[CoreId]); \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6263        lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6264    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6265      lKernelDataPtr = &Adc_kKernelData[CoreId][lLoopCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6266  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6267      /* [cover parentID={D59453D5-93E8-4dcc-94CC-379EECB0BE5B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6268      DMA Mode result handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6269      #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6270      /* When ADC_RESULT_HANDLING_IMPLEMENTATION is ADC_DMA_MODE_RESULT_HANDLING,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6271         then ADC_ENABLE_QUEUING will always be STD_OFF.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6272         Hence, this loop is not required when ADC_RESULT_HANDLING_IMPLEMENTATION
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6273         is ADC_DMA_MODE_RESULT_HANDLING  */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6274      uint8 lGroupCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6275      /* [cover parentID={034D1913-4170-42c8-8D4F-6E845E8602C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6276      Till the last available Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6277      for(lGroupCount = (uint8)0U; (lGroupCount < ADC_MAX_GROUPS); lGroupCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6278      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6279        /* [cover parentID={B46C9522-A309-4386-B18D-A86AC2FFCCE9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6280        Verify all elements of group specific structure are reset to default value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6281        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6282  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6283        /* MISRA2012_RULE_11_4_JUSTIFICATION:The address of the buffer pointer is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6284        stores in a local variable to be comapred against 0-NULL.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6285        There are no other operation performed, hence this convesion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6286        does not cause any issue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6287        /* MISRA2012_RULE_11_6_JUSTIFICATION:The address of the buffer pointer is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6288        stores in a local variable to be comapred against 0-NULL.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6289        There are no other operation performed, hence this convesion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6290        does not cause any issue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6291        /* Compare result buffer values with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6292        based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6293        lSfrVal = (uint32)(lKernelDataPtr->GrpResBuffer[lGroupCount]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6294        lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6295        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6296  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6297        /* Compare number of valid conversion values with config value & Update
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6298        flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6299        lSfrVal = (uint32)(lKernelDataPtr->NumofValidConRes[lGroupCount]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6300        lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6301        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6302  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6303        #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6304            (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6305        /* [cover parentID={0C99DD4D-C3C1-4aff-A933-E1C866F8F480}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6306        Till the last available Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6307        for(lRsCount = (uint8)0U; (lRsCount < ADC_REQSRC_USED_COUNT); lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6308        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6309          /* [cover parentID={23BE5A57-E8E1-46e2-A082-CBE907F46C55}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6310          Verify all elements of RS specific structure are reset to default value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6311          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6312          /* Compare software group Queue values for previous group with config
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6313             value & Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6314          lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6315                             QueueOfSwGroup[lGroupCount].PreviousGroup);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6316          lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6317          lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6318  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6319          /* Compare software group Queue values for next group with config
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6320             value & Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6321          lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6322                             QueueOfSwGroup[lGroupCount].NextGroup);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6323          lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6324          lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6325        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6326        #elif(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6327        /* Compare software group Queue values for Previous group with config
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6328             value & Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6329        lSfrVal = (uint32)lKernelDataPtr->QueueOfSwGroup[lGroupCount].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6330                                                                    PreviousGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6331        lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6332        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6333  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6334        /* Compare software group Queue values for next group with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6335        Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6336        lSfrVal = (uint32)lKernelDataPtr->QueueOfSwGroup[lGroupCount].NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6337        lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6338        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6339        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6340      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6341      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6342      /* [cover parentID={0C99DD4D-C3C1-4aff-A933-E1C866F8F480}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6343      Till the last available Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6344      for(lRsCount = (uint8)0U; (lRsCount < ADC_REQSRC_USED_COUNT); lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6345      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6346        /* [cover parentID={23BE5A57-E8E1-46e2-A082-CBE907F46C55}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6347        Verify all elements of RS specific structure are reset to default value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6348        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6349        /* Compare Active Group ID values with config value & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6350           on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6351        lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].ActiveGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6352        lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6353        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6354  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6355        /* Compare Active limit check channel values with config value & Update
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6356           flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6357        lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].ActiveLimitChkCh);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6358        lCfgVal = (uint32)ADC_INVALID_CHANNEL_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6359        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6360  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6361        /* Compare ISR No service flag values with config value & Update
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6362           flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6363        lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].IsrNoServiceFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6364        lCfgVal = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6365        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6366  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6367        #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6368            (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6369        /* Compare group ID value with config value for pop & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6370           on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6371        lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].PopGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6372        lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6373        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6374  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6375        /* Compare group ID value with config value for push & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6376           on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6377        lSfrVal = (uint32)(lKernelDataPtr->RSData[lRsCount].PushGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6378        lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6379        lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6380        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6381      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6382  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6383      /* [cover parentID={E49F5D28-6707-4a8c-BD43-4E100E174ACE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6384      Verify all elements of structure are reset to default value [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6385      /* Compare group status value with config value & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6386         on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6387      lSfrVal = (uint32)(lKernelDataPtr->GrpStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6388      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6389      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6390  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6391      /* Compare group result status value with config value & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6392         on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6393      lSfrVal = (uint32)(lKernelDataPtr->GrpResultStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6394      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6395      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6396  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6397      /* Compare group buffer end result status value with config value & Update
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6398         flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6399      lSfrVal = (uint32)(lKernelDataPtr->GrpBufferEndResultStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6400      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6401      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6402  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6403      /* Compare group notify status value with config value & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6404         on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6405      lSfrVal = (uint32)(lKernelDataPtr->GrpNotifStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6406      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6407      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6408  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6409      /* Compare all running channels value with config value & Update flag based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6410         on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6411      lSfrVal = (uint32)(lKernelDataPtr->AllRunningChannels);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6412      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6413      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6414  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6415      /* Compare all running result Reg value with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6416         based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6417      lSfrVal = (uint32)(lKernelDataPtr->AllRunningResReg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6418      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6419      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6420  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6421      #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6422      /* Compare Pop Group ID with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6423      based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6424      lSfrVal = (uint32)(lKernelDataPtr->PopGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6425      lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6426      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6427  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6428      /* Compare Push Group ID with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6429      based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6430      lSfrVal = (uint32)(lKernelDataPtr->PushGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6431      lCfgVal = (uint32)ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6432      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6433      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6434  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6435      #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6436      #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6437      lSfrVal = (uint8)lKernelDataPtr->LimitChkActiveFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6438      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6439      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6440      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6441      lSfrVal = (uint32)lKernelDataPtr->AliasActiveFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6442      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6443      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6444      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6445  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6446      /* [cover parentID={236A5F78-F48E-48b6-848A-46217175B81B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6447      Low power state support is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6448      #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6449      /* [cover parentID={57A95ABF-9929-4c8f-818F-72F24B064DCD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6450      Verify the power state transition request bit for core is reset to ZERO
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6451      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6452      uint32 lBitPosn;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6453      lBitPosn = CoreId * (uint32)ADC_BITS_PER_POWER_STATE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6454      /* Compare configured power state with reset value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6455      lSfrVal = (uint32)((Mcal_GetBitAtomic(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6456           Adc_PowerStateTransitionRequestBit, (uint8)lBitPosn, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6457                                              (uint32)ADC_BITS_PER_POWER_STATE)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6458      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6459      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6460      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6461  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6462      /* [cover parentID={E3A9B08A-8B84-4868-A2ED-D9F1A7BEFC9F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6463      EMUX mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6464      #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6465      /* [cover parentID={ABECC2CD-45FB-45cc-BC46-19525521A4E1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6466      Compare Emux Conversion Active Flag with reset value [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6467      lSfrVal = (uint8)lKernelDataPtr->EmuxConversionActiveFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6468      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6469      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6470      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6471    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6472    return(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6473  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6474  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6475  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6476  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6477  ** Traceability: [cover parentID={4D100DF8-F519-43d7-B284-5EBE0BCF4B4A}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6478  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6479  ** Syntax           : LOCAL_INLINE void Adc_lKernelInit                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6480  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6481  **                       const Adc_HwUnitCfgType * const KernelCfgPtr         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6482                           const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6483  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6484  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6485  ** Description      : This function programs the kernels Analog Function,     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6486  **                    Input Class and Arbiter specific SFRs.                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6487  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6488  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6489  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6490  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6491  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6492  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6493  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6494  ** Parameters(in)   : KernelCfgPtr - Pointer to the Kernel Config Data        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6495  **                    KernelId  - Kernel ID                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6496  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6497  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6498  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6499  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6500  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6501  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6502  LOCAL_INLINE void Adc_lKernelInit(const Adc_HwUnitCfgType *const KernelCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6503                                    const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6504  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6505    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6506    const Adc_HwCfgType *lHwCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6507  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6508    /* Get the HW configuration address*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6509    lHwCfgPtr = KernelCfgPtr->HwCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6510    /* Get the SFR base address for the kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6511    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6512  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6513    /*Initialize kernel SFRs from the configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6514    lEvadcGroupPtr->ANCFG.U      = lHwCfgPtr->GrpAnalogFuncCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6515    lEvadcGroupPtr->ARBPR.U      = lHwCfgPtr->GrpArbitPrioCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6516    lEvadcGroupPtr->ICLASS[0U].U = lHwCfgPtr->KernelInputClass0Cfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6517    lEvadcGroupPtr->ICLASS[1U].U = lHwCfgPtr->KernelInputClass1Cfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6518    lEvadcGroupPtr->SYNCTR.U     = lHwCfgPtr->GrpSyncCtrlCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6519  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6520    /* Initialize the Service nodes for Request Source events */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6521    /* RSx event is mapped to SRx, x = 0..2*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6522    lEvadcGroupPtr->SEVNP.U      = ADC_SEVNP_INIT_CFG_VALUE;
	mov	d1,#528
.L990:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6523  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6524    /* Set channel event node pointer to SR3 for all channels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6525    Channel event will be triggered only when CHCTR.CHEVMODE is enabled
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6526    for Limit checking groups */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6527    /* Initialize the service request node for channel events */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6528    lEvadcGroupPtr->CEVNP0.U = ADC_CEVNP_INIT_CFG_VALUE;
	mov	e2,d0,d0
.L274:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5787    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
	j	.L10
.L11:
	ld.a	a15,[a2]@los(Adc_ConfigPtr)
.L991:
	addsc.a	a15,a15,d9,#2
	ld.a	a15,[a15]4
.L992:
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L993:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5791      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \       (inlined)
	jeq	d15,#0,.L12
.L994:
	ld.a	a15,[a15]
.L281:
	ld.a	a15,[a15]
.L768:
	movh.a	a4,#61442
	lea	a4,[a4]@los(0xf0020400)
.L995:
	sh	d15,d0,#10
.L996:
	addsc.a	a4,a4,d15,#0
.L769:
	ld.w	d15,[a15]
.L997:
	st.w	[a4]136,d15
.L998:
	ld.w	d15,[a15]8
.L999:
	st.w	[a4]132,d15
.L1000:
	ld.w	d15,[a15]12
.L1001:
	st.w	[a4]160,d15
.L1002:
	ld.w	d15,[a15]16
.L1003:
	st.w	[a4]164,d15
.L1004:
	ld.w	d15,[a15]20
.L1005:
	st.w	[a4]192,d15
.L1006:
	st.w	[a4]448,d1
.L1007:
	st.w	[a4]416,d2
.L1008:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6531    if(KernelId > ADC_LAST_PRIMARY_KERNELID)      (inlined)
	jlt.u	d0,#5,.L13
.L1009:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6529    /* Secondary kernel is available */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6530    #if (ADC_SECONDARY_KERNEL_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6531    if(KernelId > ADC_LAST_PRIMARY_KERNELID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6532    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6533      lEvadcGroupPtr->CEVNP1.U = ADC_CEVNP_INIT_CFG_VALUE;
	st.w	[a4]420,d2

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6531    if(KernelId > ADC_LAST_PRIMARY_KERNELID)      (inlined)
.L13:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6534    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6535    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6536    /* Initialize the service node for result event */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6537    lEvadcGroupPtr->REVNP0.U      = ADC_REVNP_INIT_CFG_VALUE;
	st.w	[a4]432,d3
.L1010:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6538    lEvadcGroupPtr->REVNP1.U      = ADC_REVNP_INIT_CFG_VALUE;
	st.w	[a4]436,d3
.L1011:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6539  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6540    /* Converter is NOT SWITCHED ON here */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6541    lEvadcGroupPtr->ARBCFG.U     = lHwCfgPtr->GrpArbitCfg;
	ld.w	d15,[a15]4
.L1012:
	st.w	[a4]128,d15

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5791      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \       (inlined)
.L12:
	add	d0,#1

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5787    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
.L10:
	jlt.u	d0,#12,.L11
.L1013:
	mov	d0,#0
.L1014:
	mov.aa	a5,a2
.L1015:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5804    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
	j	.L14
.L15:
	ld.a	a15,[a5]@los(Adc_ConfigPtr)
.L1016:
	addsc.a	a15,a15,d9,#2
	ld.a	a15,[a15]4
.L1017:
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1018:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5808      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \       (inlined)
	jeq	d15,#0,.L16
.L1019:
	movh.a	a2,#61442
	lea	a2,[a2]@los(0xf0020400)
.L1020:
	sh	d15,d0,#10
.L1021:
	addsc.a	a2,a2,d15,#0
.L1022:
	movh.a	a4,#61442
	lea	a4,[a4]@los(0xf0020400)
.L1023:
	addsc.a	a4,a4,d15,#0
.L1024:
	ld.bu	d1,[a4]128
.L1025:
	ld.a	a15,[a15]
.L1026:
	ld.a	a15,[a15]
.L1027:
	ld.w	d15,[a15]4
.L1028:
	insert	d15,d1,d15,#0,#2
	st.b	[a2]128,d15
.L1029:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5826        DSYNC();      (inlined)
	dsync

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5808      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \       (inlined)
.L16:
	add	d0,#1

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5804    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)      (inlined)
.L14:
	jlt.u	d0,#12,.L15
.L1030:
	mov	d4,d9
.L770:
	j	Adc_lResetCoreGlobalVars
.L249:
	
__Adc_Init_function_end:
	.size	Adc_Init,__Adc_Init_function_end-Adc_Init
.L136:
	; End of function
	
	.sdecl	'.text.Adc_SetupResultBuffer.Code.Cpu0',code,cluster('Adc_SetupResultBuffer')
	.sect	'.text.Adc_SetupResultBuffer.Code.Cpu0'
	.align	2
	
	.global	Adc_SetupResultBuffer
; Function Adc_SetupResultBuffer
.L89:
Adc_SetupResultBuffer:	.type	func
	mov	d15,d4
.L771:
	mov.aa	a12,a4
.L772:
	call	Mcal_GetCpuIndex
.L300:
	extr.u	d0,d15,#5,#11
.L301:
	and	d15,#31
.L306:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1035:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1036:
	mul	d1,d2,#12
.L1037:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1038:
	addsc.a	a2,a2,d1,#0
.L1039:
	addsc.a	a2,a2,d0,#0
	ld.bu	d0,[a2]
.L774:
	sha	d0,#5
.L1040:
	addsc.a	a15,a15,d0,#0
.L311:
	call	SchM_Enter_Adc_KernelData
.L773:
	addsc.a	a2,a15,d15,#2
.L1041:
	st.a	[a2],a12
.L1042:
	addsc.a	a15,a15,d15,#0
.L1043:
	mov	d15,#0
.L1044:
	st.b	[a15]28,d15
.L1045:
	call	SchM_Exit_Adc_KernelData
.L1046:
	mov	d2,#0
.L775:
	ret
.L287:
	
__Adc_SetupResultBuffer_function_end:
	.size	Adc_SetupResultBuffer,__Adc_SetupResultBuffer_function_end-Adc_SetupResultBuffer
.L141:
	; End of function
	
	.sdecl	'.text.Adc_StartGroupConversion.Code.Cpu0',code,cluster('Adc_StartGroupConversion')
	.sect	'.text.Adc_StartGroupConversion.Code.Cpu0'
	.align	2
	
	.global	Adc_StartGroupConversion
; Function Adc_StartGroupConversion
.L91:
Adc_StartGroupConversion:	.type	func
	mov	d15,d4
.L777:
	call	Mcal_GetCpuIndex
.L776:
	mov	d8,d2
.L323:
	extr.u	d9,d15,#5,#11
.L324:
	and	d10,d15,#31
.L326:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1051:
	addsc.a	a15,a15,d8,#2
	ld.a	a15,[a15]
.L1052:
	mul	d15,d8,#12
.L778:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1053:
	addsc.a	a2,a2,d15,#0
.L1054:
	addsc.a	a2,a2,d9,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1055:
	addsc.a	a12,a15,d0,#0
.L331:
	mul	d15,d10,#60
.L1056:
	movh.a	a15,#@his(Adc_ConfigPtr)
	ld.a	a15,[a15]@los(Adc_ConfigPtr)
.L1057:
	addsc.a	a15,a15,d8,#2
	ld.a	a15,[a15]4
.L1058:
	addsc.a	a15,a15,d9,#2
	ld.a	a15,[a15]
.L1059:
	ld.a	a15,[a15]8
.L1060:
	addsc.a	a13,a15,d15,#0
.L779:
	call	SchM_Enter_Adc_KernelData
.L335:
	mov	d15,#1
	lea	a15,[a12]4

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4945    Mcal_SetBitAtomic(&(KernelDataPtr->GrpStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d15,d10,#(1) 
 ldmst [a15]0,e2
	
.L336:
	mov	d15,#0
	lea	a15,[a12]8

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5179    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d15,d10,#(1) 
 ldmst [a15]0,e2
	
.L343:
	lea	a15,[a12]12

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5220    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\       (inlined)
	
	imask e2,d15,d10,#(1) 
 ldmst [a15]0,e2
	
.L350:
	addsc.a	a15,a12,d10,#0
.L1061:
	st.b	[a15]28,d15
.L1062:
	ld.bu	d15,[a13]55
.L1063:
	addsc.a	a15,a12,d15,#2
.L1064:
	st.h	[a15]20,d10
.L1065:
	call	SchM_Exit_Adc_KernelData
.L1066:
	mov	e4,d10,d9
	mov	d6,d8
.L780:
	call	Adc_lPrepareGrpForStart
.L781:
	ld.bu	d15,[a13]55
.L1067:
	addsc.a	a15,a12,d15,#2
.L1068:
	mov	d15,#0
.L1069:
	st.b	[a15]23,d15
.L1070:
	ld.bu	d5,[a13]55
	mov.aa	a4,a13
.L782:
	mov	d4,d9
	j	Adc_lStartSwConversion
.L317:
	
__Adc_StartGroupConversion_function_end:
	.size	Adc_StartGroupConversion,__Adc_StartGroupConversion_function_end-Adc_StartGroupConversion
.L146:
	; End of function
	
	.sdecl	'.text.Adc_StopGroupConversion.Code.Cpu0',code,cluster('Adc_StopGroupConversion')
	.sect	'.text.Adc_StopGroupConversion.Code.Cpu0'
	.align	2
	
	.global	Adc_StopGroupConversion
; Function Adc_StopGroupConversion
.L93:
Adc_StopGroupConversion:	.type	func
	mov	d15,d4
.L783:
	call	Mcal_GetCpuIndex
.L362:
	extr.u	d9,d15,#5,#11
.L363:
	and	d8,d15,#31
.L365:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1075:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1076:
	mul	d15,d2,#12
.L784:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1077:
	addsc.a	a2,a2,d15,#0
.L1078:
	addsc.a	a2,a2,d9,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1079:
	addsc.a	a12,a15,d0,#0
.L369:
	mul	d15,d8,#60
.L1080:
	movh.a	a2,#@his(Adc_ConfigPtr)
	ld.a	a2,[a2]@los(Adc_ConfigPtr)
.L1081:
	addsc.a	a15,a2,d2,#2
	ld.a	a15,[a15]4
.L1082:
	addsc.a	a15,a15,d9,#2
	ld.a	a15,[a15]
.L1083:
	ld.a	a15,[a15]8
.L1084:
	addsc.a	a15,a15,d15,#0
.L785:
	call	SchM_Enter_Adc_KernelData
.L373:
	ld.w	d15,[a12]4
	extr.u	d15,d15,d8,#1
.L374:
	jne	d15,#1,.L18
.L1085:
	ld.bu	d15,[a15]55
.L1086:
	addsc.a	a2,a12,d15,#2
.L1087:
	mov	d15,#1
.L1088:
	st.b	[a2]23,d15
.L1089:
	call	SchM_Exit_Adc_KernelData
.L1090:
	ld.bu	d5,[a15]55
	mov.aa	a4,a15
.L787:
	mov	d4,d9
	call	Adc_lStopConvRequest
.L788:
	ld.bu	d15,[a15]55
.L381:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6542  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6543  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6544  #if (ADC_INIT_CHECK_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6545  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6546  ** Traceability: [cover parentID={25920956-D591-4a1d-8D37-C7E5E8F7D758}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6547  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6548  ** Syntax           : LOCAL_INLINE uint32 Adc_lCheckKernelSfr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6549  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6550  **                       const Adc_HwUnitCfgType * const KernelCfgPtr         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6551  **                       const uint32 KernelId,                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6552  **                       const uint32 CompareFlag                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6553  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6554  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6555  ** Description      : This function checks the SFR values of Initialized      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6556  **                    kernels with configured values                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6557  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6558  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6559  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6560  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6561  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6562  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6563  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6564  ** Parameters(in)   : KernelCfgPtr - Pointer to the Kernel Config Data        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6565  **                    KernelId  - Kernel ID                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6566  **                  : CompareFlag - Flag to compare with configured SFRs or   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6567  **                    Variables                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6568  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6569  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6570  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6571  ** Return value     : Compare flag value - all bits as 1 indicates a pass case**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6572  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6573  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6574  LOCAL_INLINE uint32 Adc_lCheckKernelSfr(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6575             const Adc_HwUnitCfgType *const KernelCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6576             const uint32 KernelId, const uint32 CompareFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6577  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6578    const Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6579    uint32 lSfrVal, lCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6580    uint32 lCompareFlag = CompareFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6581    uint8 lLoopCount, lChannelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6582    const Adc_HwCfgType *lHwCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6583  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6584    /* Get the HW configuration address*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6585    lHwCfgPtr = KernelCfgPtr->HwCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6586    /* Get the SFR base address for the kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6587    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6588  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6589    /* Compare Trigger control Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6590    Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6591    lSfrVal = lEvadcGroupPtr->TRCTR.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6592    lSfrVal = lSfrVal & ((uint32)~((uint32)IFX_EVADC_G_TRCTR_TSC_MSK));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6593    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6594    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6595  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6596    /* Compare ANONS and ANONC values */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6597    lSfrVal = (((uint32)MODULE_EVADC.G[KernelId].ARBCFG.U) &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6598         (((uint32)IFX_EVADC_G_ARBCFG_ANONC_MSK<<IFX_EVADC_G_ARBCFG_ANONC_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6599          ((uint32)IFX_EVADC_G_ARBCFG_ANONS_MSK<<IFX_EVADC_G_ARBCFG_ANONS_OFF)) );
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6600    lCfgVal = (lHwCfgPtr->GrpArbitCfg & \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6601            ((uint32)IFX_EVADC_G_ARBCFG_ANONC_MSK<<IFX_EVADC_G_ARBCFG_ANONC_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6602    lCfgVal |= (uint32)(((~(uint32)ADC_FULL_POWER) & \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6603                         ADC_TARGET_POWER_STATE_MASK) << \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6604                        IFX_EVADC_G_ARBCFG_ANONS_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6605  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6606    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6607  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6608    /* Compare Arbitration Priority register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6609       Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6610    lSfrVal = (lEvadcGroupPtr->ARBPR.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6611    lCfgVal = (lHwCfgPtr->GrpArbitPrioCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6612    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6613  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6614    /* Compare Analog function control register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6615       Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6616    lSfrVal = (lEvadcGroupPtr->ANCFG.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6617    lCfgVal = (lHwCfgPtr->GrpAnalogFuncCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6618    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6619  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6620    /* Compare Input Class0 register value with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6621       based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6622    lSfrVal = (lEvadcGroupPtr->ICLASS[0U].U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6623    lCfgVal = (lHwCfgPtr->KernelInputClass0Cfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6624    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6625  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6626    /* Compare Input Class1 register value with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6627       based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6628    lSfrVal = (lEvadcGroupPtr->ICLASS[1U].U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6629    lCfgVal = (lHwCfgPtr->KernelInputClass1Cfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6630    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6631  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6632    /* Compare Alias Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6633    Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6634    lSfrVal = lEvadcGroupPtr->ALIAS.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6635    lCfgVal = ADC_ALIAS_DEFAULT_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6636    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6637  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6638    /* Compare Bound Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6639    Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6640    lSfrVal = lEvadcGroupPtr->BOUND.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6641    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6642    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6643  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6644    /* Compare Sync Control register value with config value & Update flag
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6645    based on result for Slave Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6646    lSfrVal = (lEvadcGroupPtr->SYNCTR.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6647    lCfgVal = (lHwCfgPtr->GrpSyncCtrlCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6648    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6649  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6650    for(lLoopCount = (uint8)0U; (lLoopCount < ADC_REQSRC_COUNT); lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6651    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6652      /* Compare Queue Source control Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6653      Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6654      lSfrVal = ( ((uint32)lEvadcGroupPtr->Q[lLoopCount].QCTRL.U) & ((uint32)\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6655      (~(((uint32)IFX_EVADC_G_Q_QCTRL_XTLVL_MSK<<IFX_EVADC_G_Q_QCTRL_XTLVL_OFF)|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6656      ((uint32)IFX_EVADC_G_Q_QCTRL_GTLVL_MSK<<IFX_EVADC_G_Q_QCTRL_GTLVL_OFF)))) );
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6657      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6658      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6659  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6660      /* Compare Queue Mode Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6661      Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6662      lSfrVal = lEvadcGroupPtr->Q[lLoopCount].QMR.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6663      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6664      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6665  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6666      /* Compare Queue status Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6667      Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6668      lSfrVal = (((uint32)lEvadcGroupPtr->Q[lLoopCount].QSR.U) & \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6669                 ((uint32)~((uint32)IFX_EVADC_G_Q_QSR_REQGT_MSK << \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6670                            IFX_EVADC_G_Q_QSR_REQGT_OFF)));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6671      lCfgVal = ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QSR_EMPTY_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6672      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6673  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6674      /* Compare Queue Request Timer Mode Register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6675      Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6676      lSfrVal = lEvadcGroupPtr->Q[lLoopCount].REQTM.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6677      lCfgVal = ADC_REQTM_RESET_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6678      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6679  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6680    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6681  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6682    /* Compare Channel event flag registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6683    & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6684    lSfrVal = lEvadcGroupPtr->CEFLAG.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6685    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6686    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6687  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6688    /* Compare Result event flag registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6689    & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6690    lSfrVal = lEvadcGroupPtr->REFLAG.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6691    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6692    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6693  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6694    /* Compare Source event flag registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6695    & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6696    lSfrVal = lEvadcGroupPtr->SEFLAG.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6697    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6698    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6699  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6700    /* Compare Channel Event Node pointer0 register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6701       Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6702    lSfrVal = (lEvadcGroupPtr->CEVNP0.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6703    lCfgVal = (ADC_CEVNP_INIT_CFG_VALUE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6704    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6705  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6706    #if (ADC_SECONDARY_KERNEL_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6707    if(KernelId > ADC_LAST_PRIMARY_KERNELID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6708    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6709      /* Compare Channel Event Node pointer1 register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6710         Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6711      lSfrVal = (lEvadcGroupPtr->CEVNP1.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6712      lCfgVal = (ADC_CEVNP_INIT_CFG_VALUE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6713      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6714    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6715    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6716  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6717    /* Compare Result Event Node pointer0 register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6718       Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6719    lSfrVal = (lEvadcGroupPtr->REVNP0.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6720    lCfgVal = (ADC_REVNP_INIT_CFG_VALUE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6721    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6722  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6723    /* Compare Result Event Node pointer1 register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6724       Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6725    lSfrVal = (lEvadcGroupPtr->REVNP1.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6726    lCfgVal = (ADC_REVNP_INIT_CFG_VALUE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6727    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6728  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6729    /* Compare Source Event Node pointer register value with config value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6730       Update flag based on result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6731    lSfrVal = (lEvadcGroupPtr->SEVNP.U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6732    lCfgVal = (ADC_SEVNP_INIT_CFG_VALUE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6733    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6734  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6735    /* Compare External Multiplexer Control register with configuration value &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6736    Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6737    lSfrVal = lEvadcGroupPtr->EMUXCTR.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6738    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6739    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6740  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6741    /* Compare Ext. Multiplexer Channel Select Register with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6742       & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6743    lSfrVal = lEvadcGroupPtr->EMUXCS.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6744    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6745    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6746  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6747    /* Compare Valid flag registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6748    & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6749    lSfrVal = lEvadcGroupPtr->VFR.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6750    lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6751    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6752  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6753    if(KernelId > ADC_LAST_PRIMARY_KERNELID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6754    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6755      /* Update channel count value for secondary Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6756      lChannelCount = (uint8)ADC_SECONDARY_CONV_CHANNEL_COUNT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6757    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6758    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6759    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6760      /* Update channel count value for primary Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6761      lChannelCount = (uint8)ADC_PRIMARY_CONV_CHANNEL_COUNT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6762    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6763  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6764    for(lLoopCount = (uint8)0U; (lLoopCount < lChannelCount); lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6765    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6766      /* Compare Channel control registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6767      & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6768      lSfrVal = lEvadcGroupPtr->CHCTR[lLoopCount].U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6769      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6770      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6771    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6772  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6773    for(lLoopCount = (uint8)0U; (lLoopCount < (uint8)ADC_MAX_RESULT_REGISTERS); \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6774        lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6775    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6776      /* Compare Result control registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6777      & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6778      lSfrVal = lEvadcGroupPtr->RCR[lLoopCount].U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6779      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6780      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6781  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6782      /* Compare Result control registers with configuration value
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6783      & Update flag as per result */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6784      lSfrVal = lEvadcGroupPtr->RES[lLoopCount].U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6785      lSfrVal = lSfrVal &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6786                ((uint32)IFX_EVADC_G_RES_VF_MSK << IFX_EVADC_G_RES_VF_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6787      lCfgVal = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6788      lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6789    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6790    return(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6791  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6792  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6793  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6794  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6795  ** Traceability: [cover parentID={C6FB6B18-9430-4db9-A6BF-4F2E01256FAC}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6796  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6797  ** Syntax           : static void Adc_lKernelDeInit                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6798  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6799  **                       const Adc_HwUnitCfgType * const KernelCfgPtr         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6800  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6801  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6802  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6803  ** Description      : This function resets the global SFRs of EVADC           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6804  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6805  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6806  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6807  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6808  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6809  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6810  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6811  ** Parameters(in)   : KernelCfgPtr - Pointer to the Kernel Config Data        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6812  **                    KernelId  - Kernel ID                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6813  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6814  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6815  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6816  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6817  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6818  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6819  static void Adc_lKernelDeInit(const Adc_HwUnitCfgType *const KernelCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6820                                const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6821  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6822    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6823    uint8 lLoopCount, lChannelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6824  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6825    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6826    /* [cover parentID={A3BBAD45-CECD-41fa-912F-D198D357B4F2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6827    HW Trigger API is Enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6828    #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6829    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6830    uint8 lGroupCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6831  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6832    lGrpCfgPtr = KernelCfgPtr->GrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6833    lGroupCount = KernelCfgPtr->NoOfGroups;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6834  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6835    /* Loop for all the HW triggered groups, and reset the HW trigger peripheral*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6836    for(lLoopCount = (uint8)0U; lLoopCount < lGroupCount; lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6837    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6838      /* [cover parentID={19FA0141-8A36-4a96-A8C4-E5FD9905A40D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6839      Is HW Trigger Group and Request Timer not configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6840      if((lGrpCfgPtr[lLoopCount].TriggerSource) == ADC_TRIGG_SRC_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6841      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6842        /* [cover parentID={19FA0141-8A36-4a96-A8C4-E5FD9905A40D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6843        Is HW Trigger Group and Request Timer not configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6844        if (lGrpCfgPtr[lLoopCount].GrpReqTmCfg == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6845        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6846          /* [cover parentID={319CE3CD-62D7-4ff1-818C-1706124AACCC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6847          Reset HW Trigger  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6848          Adc_lResetHwTrigger(&lGrpCfgPtr[lLoopCount], (uint8)ADC_INIT_DEINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6849        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6850      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6851    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6852    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6853    UNUSED_PARAMETER(KernelCfgPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6854  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6855    for(lLoopCount = (uint8)0U; lLoopCount < ADC_REQSRC_COUNT; lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6856    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6857      /* Flush the Queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6858      lEvadcGroupPtr->Q[lLoopCount].QMR.U =(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6859                                ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_FLUSH_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6860                                ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_CEV_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6861                                ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_CLRV_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6862      lEvadcGroupPtr->Q[lLoopCount].QCTRL.U = ADC_Q_CTRL_WRITE_PROTECT_MSK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6863      lEvadcGroupPtr->Q[lLoopCount].REQTM.U = ADC_REQTM_RESET_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6864    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6865  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6866    /* Clear Kernel registers and Switch off the converter also */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6867    lEvadcGroupPtr->ARBCFG.U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6868    /* Ensure register is written and converter is switched OFF */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6869    DSYNC();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6870  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6871    lEvadcGroupPtr->TRCTR.U = ((uint32)ADC_ONE_U << \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6872                               IFX_EVADC_G_TRCTR_COV_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6873  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6874    lEvadcGroupPtr->ARBPR.U        = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6875    lEvadcGroupPtr->ANCFG.U        = ADC_ANCFG_DEFAULT_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6876    lEvadcGroupPtr->ICLASS[0U].U   = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6877    lEvadcGroupPtr->ICLASS[1U].U   = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6878    lEvadcGroupPtr->ALIAS.U        = ADC_ALIAS_DEFAULT_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6879    lEvadcGroupPtr->BOUND.U        = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6880    lEvadcGroupPtr->SYNCTR.U       = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6881    lEvadcGroupPtr->EMUXCTR.U      = (uint32)ADC_ONE_U << \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6882                                     IFX_EVADC_G_EMUXCTR_EMXWC_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6883    lEvadcGroupPtr->EMUXCS.U       = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6884  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6885    if(KernelId > ADC_LAST_PRIMARY_KERNELID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6886    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6887      lChannelCount = (uint8)ADC_SECONDARY_CONV_CHANNEL_COUNT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6888    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6889    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6890    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6891      lChannelCount = (uint8)ADC_PRIMARY_CONV_CHANNEL_COUNT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6892    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6893    for(lLoopCount = (uint8)0U; lLoopCount < lChannelCount; lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6894    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6895      /*Clear Channel control registers,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6896        - 8 channels for primary converter
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6897        - 16 channels for primary converter */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6898      lEvadcGroupPtr->CHCTR[lLoopCount].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6899    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6900    for(lLoopCount = (uint8)0U; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6901        lLoopCount < (uint8)ADC_MAX_RESULT_REGISTERS; lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6902    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6903      /* Clear all 16 result control registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6904      lEvadcGroupPtr->RCR[lLoopCount].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6905    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6906  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6907    /* Clear Source events, result event ,channel event flags and
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6908       service node pointers*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6909    lEvadcGroupPtr->VFR.U      = ADC_CLR_VALID_FLAG_REG;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6910    lEvadcGroupPtr->SEFCLR.U   = ADC_CLR_SOURCE_EVENT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6911    lEvadcGroupPtr->REFCLR.U   = ADC_CLR_RESULT_EVENT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6912    lEvadcGroupPtr->SEVNP.U    = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6913    lEvadcGroupPtr->REVNP0.U   = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6914    lEvadcGroupPtr->REVNP1.U   = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6915    lEvadcGroupPtr->CEVNP0.U   = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6916  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6917    #if (ADC_SECONDARY_KERNEL_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6918    if(KernelId > ADC_LAST_PRIMARY_KERNELID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6919    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6920      /* Since channel count for secondary converters is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6921         hence Channel event register and CEVNP1 are cleared here*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6922      lEvadcGroupPtr->CEFCLR.U = ADC_CLR_SECONDARY_CH_EVENT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6923      lEvadcGroupPtr->CEVNP1.U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6924    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6925    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6926    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6927    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6928      /* Channel count for primary converters is 8 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6929      lEvadcGroupPtr->CEFCLR.U = ADC_CLR_PRIMARY_CH_EVENT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6930    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6931  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6932  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6933  #if (ADC_TRIGGER_ONE_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6934  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6935  ** Traceability: [cover parentID={8478D451-B801-4f2c-9DAC-57E3DD256555}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6936  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6937  ** Syntax           : static Std_ReturnType Adc_lTriggerOneConversion         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6938  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6939  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6940  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6941  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6942  ** Description      : This function triggers dummy conversion for each        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6943  **                    configured ADC HW group (Refer Errata ADC_TC.083)       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6944  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6945  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6946  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6947  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6948  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6949  ** Reentrancy       : Non Reentrant                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6950  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6951  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6952  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6953  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6954  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6955  ** Return value     : E_OK: Dummy conversion successfully completed           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6956  **                    E_NOT_OK: Dummy conversion not completed                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6957  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6958  static Std_ReturnType Adc_lTriggerOneConversion(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6959  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6960    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6961    Ifx_EVADC_G_Q *lEvadcQPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6962    uint32 lVfrReg, lCoreId, lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6963    uint32 lTriggeredKernels = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6964    uint32 lWaitCount = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6965    Std_ReturnType lRetVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6966  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6967    for(lCoreId = 0U; lCoreId < MCAL_NO_OF_CORES; lCoreId++ )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6968    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6969      /* [cover parentID={A77C0846-D561-4cf8-9374-49D4C9F388AB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6970      Is Core Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6971      if(Adc_ConfigPtr->CoreCfgPtr[lCoreId] != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6972      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6973        /* [cover parentID={72900E14-77AB-418f-AD42-B4279B4FA8A2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6974        Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6975        for(lKernelCount = (uint32)0U; lKernelCount < ADC_MAX_KERNEL_ID; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6976            lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6977        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6978          /* [cover parentID={35998E4A-B1C0-4eaa-BC02-A44455AE5540}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6979          Is Kernel Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6980          if(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6981              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6982          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6983            /* [cover parentID={21442C93-8EE3-426f-93A9-022363625A56}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6984            Trigger one dummy Conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6985            lEvadcGroupPtr = &MODULE_EVADC.G[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6986            lEvadcQPtr = &MODULE_EVADC.G[lKernelCount].Q[0U];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6987            lEvadcGroupPtr->CHCTR[0U].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6988            lEvadcGroupPtr->RCR[0U].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6989            lEvadcGroupPtr->VFR.U = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6990            lEvadcQPtr->QCTRL.U = (uint32)ADC_Q_CTRL_WRITE_PROTECT_MSK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6991            lEvadcQPtr->QINR.U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6992            lEvadcQPtr->QMR.U = ADC_START_SW_TRIG_CONV;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6993            lTriggeredKernels |= (uint32)ADC_ONE_U << lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6994          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6995        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6996      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6997    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6998    /* [cover parentID={E6B1D8FB-C7CD-45c4-92C4-473D8FE24778}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  6999    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7000    for(lKernelCount = (uint32)0U; lKernelCount < ADC_MAX_KERNEL_ID; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7001        lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7002    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7003      /* [cover parentID={33EC6A57-9643-44ce-888F-216BBA9C892A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7004      Is Kernel Triggered [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7005      if( (lTriggeredKernels & ((uint32)ADC_ONE_U << lKernelCount)) != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7006      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7007        lEvadcGroupPtr = &MODULE_EVADC.G[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7008        /* [cover parentID={A349F2FD-16A8-44c7-9A67-E863F54F5544}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7009        Till the defined Max WaitCount & Valid Result flag is equal to ZERO
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7010        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7011        lWaitCount = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7012        do
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7013        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7014          /* [cover parentID={B34CD187-C755-4ade-B6CF-606541FF0FE2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7015          Read the Valid flag of Result register & Increment the WaitCount
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7016          [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7017          lVfrReg = lEvadcGroupPtr->VFR.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7018          lWaitCount++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7019        }while((lVfrReg == 0U) && (lWaitCount < (uint32)ADC_WAIT_FOR_DUMMY_CONV));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7020        /* Flush the RS queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7021        lEvadcGroupPtr->Q[0U].QMR.U =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7022                        (((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_FLUSH_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7023                        ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_CEV_OFF)|\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7024                        ((uint32)ADC_ONE_U<<IFX_EVADC_G_Q_QMR_CLRV_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7025        /* Clear valid flags and event flags*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7026        lEvadcGroupPtr->SEFCLR.U = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7027        lEvadcGroupPtr->CEFCLR.U = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7028        lEvadcGroupPtr->REFCLR.U = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7029        lEvadcGroupPtr->VFR.U = (uint32)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7030        /* [cover parentID={C857F799-8EE1-4bd5-B29E-F16A0BB767EB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7031        WaitCount is greater than or equal to defined Max WaitCount [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7032        if(lWaitCount >= ADC_WAIT_FOR_DUMMY_CONV)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7033        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7034          /* [cover parentID={CDF0DF8F-FFBA-47de-98F1-33A6F579C871}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7035          Update return value with E_NOT_OK [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7036          lRetVal = E_NOT_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7037        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7038      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7039    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7040    return lRetVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7041  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7042  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7043  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7044  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7045  ** Traceability: [cover parentID={EB9DD6B6-5AD9-4391-B824-5E454CD75B1A}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7046  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7047  ** Syntax           : static void Adc_lPrepareGrpForStart                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7048  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7049  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7050  **                      const Adc_GroupType  GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7051  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7052  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7053  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7054  ** Description      : This function prepares (configures) all the analog      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7055  **                   channels and result registers of the group for conversion**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7056  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7057  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7058  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7059  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7060  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7061  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7062  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7063  ** Parameters(in)   : KernelId  - ADC Kernel to which the group belongs       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7064  **                    GroupId   - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7065  **                    CoreId    - Logical CPU core ID                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7066  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7067  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7068  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7069  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7070  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7071  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7072  static void Adc_lPrepareGrpForStart(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7073                                  const Adc_GroupType GroupId,const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7074  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7075    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7076    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7077    const Adc_ChannelCfgType *lChCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7078    const Adc_GroupDefType *lGrpDefCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7079    uint32 lChctrCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7080    Adc_ChannelType lAsChannelId, lAnChannelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7081    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7082    uint8 lNoOfChannels, lChloopCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7083    #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7084    uint8 lEmuxGrp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7085    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7086  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7087    /*Get the SFR base address for the kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7088    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7089    /*Get the base address of the group configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7090    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7091                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7092    /*Get the base address of the channel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7093    lChCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7094                ChCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7095    /* Get the base address of the group definition */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7096    lGrpDefCfgPtr = lGrpCfgPtr->GroupDefinition;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7097  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7098    lNoOfChannels = lGrpCfgPtr->NoOfChannels;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7099  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7100    /* [cover parentID={59AD44B6-B3F2-4bc4-8389-4C21E2C16122}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7101    Is the group configured for alias? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7102    if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7103    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7104      /* [cover parentID={667FC348-2E6D-419a-BAE8-89EF407C8128}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7105      Program alias registers as per configuration [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7106      lEvadcGroupPtr->ALIAS.U = lGrpCfgPtr->AliasChCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7107    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7108    /* [cover parentID={1BF04B0E-26CF-4098-A100-DEDCC7CD515C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7109    EMUX is enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7110    #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7111    uint8 lEmuxStartSelVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7112    lEmuxGrp = (ADC_ONE_U & (lGrpCfgPtr->GrpEmuxCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7113    /* [cover parentID={9C09F698-EA1A-4b40-9F67-E851F583BEED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7114    Group is configured with the EMUX [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7115    if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7116    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7117      /* [cover parentID={F24F1A44-F7C7-42c0-B581-DBC890C42A40}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7118      Program the EMUX control register with the start selection value of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7119      emux when EMUX mode is 000U [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7120      lEmuxStartSelVal = ((lGrpCfgPtr->GrpEmuxCfg) >> ADC_ONE_U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7121      lEvadcGroupPtr->EMUXCTR.U = ((uint32)lEmuxStartSelVal | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7122                                                     ADC_EMUX_DUMMY_MODE_PROGRAM);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7123      /* Program the EMUX control register with actual EMUX mode */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7124      lEvadcGroupPtr->EMUXCTR.U = ((uint32)lEmuxStartSelVal | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7125                                                  ADC_EMUX_SEQUENCE_MODE_PROGRAM);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7126    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7127    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7128    lChloopCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7129    /* [cover parentID={63F185D6-5E0A-44df-8A09-BD85073FCF3E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7130    Till the last available channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7131    do
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7132    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7133      /*Get the AS channel ID, this is used to get the CHCTR config value*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7134      lAsChannelId = lGrpDefCfgPtr[lChloopCount].ASChannelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7135      /* Get the analog channel number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7136      lAnChannelId = lGrpDefCfgPtr[lChloopCount].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7137      /* [cover parentID={26FB08AE-85F3-486e-88FD-839406F29E06}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7138      EMUX is enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7139      #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7140      /* [cover parentID={2A42C3F1-1C17-4a42-8E8A-7898457A72E5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7141      Group is configured with the EMUX [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7142      if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7143      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7144        /* [cover parentID={2A42C3F1-1C17-4a42-8E8A-7898457A72E5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7145        Program the  EMUX channel select register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7146        lEvadcGroupPtr->EMUXCS.U = lAnChannelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7147      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7148      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7149  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7150      lResReg = lGrpDefCfgPtr[lChloopCount].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7151  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7152      /* Program Channel configuration with result register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7153      lChctrCfgVal = (lChCfgPtr[lAsChannelId].ChannelChctrCfg | ((uint32)lResReg\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7154                      << IFX_EVADC_G_CHCTR_RESREG_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7155  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7156      /* [cover parentID={D65037C1-2D39-4383-8D10-DAE25E99E065}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7157      Configure channel conrtol register   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7158      /* Write the CHCTR value back to SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7159      lEvadcGroupPtr->CHCTR[lAnChannelId].U = lChctrCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7160      lEvadcGroupPtr->RCR[lResReg].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7161  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7162      /* [cover parentID={1A23377F-796A-4d54-B8CE-A23AE6C43948}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7163      Sync Conversion is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7164      #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7165      /* [cover parentID={8A00E242-7200-4378-8225-2FDE200FA4BB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7166      Is channel configured for Sync conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7167      if(((uint16)(lGrpCfgPtr->SyncChannelMask &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7168          (uint16)((uint16)1U <<lAnChannelId)))!= (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7169      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7170        /* [cover parentID={78AF8FF5-48C6-412a-BF96-133912894715}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7171        Enable Sync channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7172        Adc_lEnableSyncCh(KernelId, lAnChannelId, lChctrCfgVal, lResReg, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7173      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7174      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7175  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7176      lChloopCount++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7177    } while(lChloopCount < lNoOfChannels);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7178  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7179    /* [cover parentID={DEB59273-1EA8-41dd-89F4-68DA2BC790D7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7180    DMA mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7181    #if(ADC_RESULT_HANDLING_IMPLEMENTATION == ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7182    /* [cover parentID={E619480D-F939-4414-B1D2-914474252B3E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7183    Enable Result event for last conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7184    lEvadcGroupPtr->RCR[lResReg].U = (uint32)ADC_ONE_U<<IFX_EVADC_G_RCR_SRGEN_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7185    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7186  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7187    /* [cover parentID={CB488856-3944-44db-8D26-5AEE993A1F12}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7188    Limit Checking is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7189    #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7190    /* [cover parentID={1657BA4C-4D88-4a52-BECE-B4F2CD72016F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7191    Is Adc Limit Check for Group is enabled  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7192    if((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7193    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7194      /* [cover parentID={FEC6169D-C3CE-4b5c-ADE7-2236B7E28669}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7195      Program Boundary values   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7196      /* Set limit check boundary values and channel event node pointer */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7197      lEvadcGroupPtr->BOUND.U = lChCfgPtr[lAsChannelId].BoundaryValues;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7198    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7199    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7200  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7201  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7202  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7203  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7204  ** Traceability: [cover parentID={A1E6D446-8FB6-46b2-9B67-47970273DEA4}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7205  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7206  ** Syntax           : static void Adc_lEnableSyncCh                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7207  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7208  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7209  **                      const Adc_ChannelType AnChannelNum,                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7210  **                      const uint32 ChctrValue,                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7211  **                      const Adc_ResultRegType ResReg,                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7212  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7213  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7214  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7215  ** Description      : This configures the slave channels of a synchronization **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7216  **                    group                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7217  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7218  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7219  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7220  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7221  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7222  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7223  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7224  ** Parameters(in)   : KernelId     - ADC Kernel                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7225  **                    AnChannelNum - Analog channel number                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7226  **                    ChctrValue   - CHCTR register value to configure        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7227  **                    ResReg       - Result register of the channel           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7228  **                    CoreId       - Logical CPU core ID                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7229  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7230  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7231  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7232  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7233  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7234  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7235  static void Adc_lEnableSyncCh(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7236                                const Adc_ChannelType AnChannelNum,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7237                                const uint32 ChctrValue,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7238                                const Adc_ResultRegType ResReg,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7239                                const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7240  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7241    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7242    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7243    uint8 lKernelCount, lSlaveKernel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7244  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7245    /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7246    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7247  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7248    /* [cover parentID={2DDAC232-4D74-49c4-BA19-B295AD7EC847}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7249    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7250    for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7251         lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7252    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7253      lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7254      /* [cover parentID={E7C200C0-E802-4e51-B8B6-E6084E89866D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7255      Valid Slave Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7256      if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7257      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7258        /* Get the SFR base address for the current slave kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7259        lEvadcGroupPtr = &MODULE_EVADC.G[lSlaveKernel];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7260  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7261        /* [cover parentID={FB93277D-92A9-4a19-8B66-63BA2637701C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7262        Configure channel control register & reset Result control register
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7263        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7264        lEvadcGroupPtr->CHCTR[AnChannelNum].U = ChctrValue;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7265        lEvadcGroupPtr->RCR[ResReg].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7266      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7267    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7268  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7269  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7270  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7271  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7272  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7273  ** Traceability: [cover parentID={93B5E617-74F5-46af-BB26-84293C290F35}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7274  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7275  ** Syntax           : static void Adc_lClearSyncCh                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7276  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7277  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7278  **                      const Adc_ChannelType AnChannelNum,                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7279  **                      const Adc_ResultRegType ResReg,                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7280  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7281  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7282  ** Description      : This clears the slave channels for synchronization      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7283  **                    group                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7284  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7285  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7286  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7287  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7288  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7289  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7290  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7291  ** Parameters(in)   : KernelId     - ADC Kernel                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7292  **                    AnChannelNum - Analog channel number                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7293  **                    ResReg       - Result register of the channel           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7294  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7295  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7296  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7297  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7298  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7299  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7300  static void Adc_lClearSyncCh(const uint32 KernelId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7301                               const Adc_ChannelType AnChannelNum, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7302                               const Adc_ResultRegType ResReg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7303  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7304    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7305    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7306    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7307    uint8 lKernelCount, lSlaveKernel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7308  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7309    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7310    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7311  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7312    /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7313    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7314  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7315    /* [cover parentID={5ECB66CC-367E-4a4e-A729-F748544C7AFE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7316    Till the last available Slave Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7317    for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7318         lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7319    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7320      lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7321      /* [cover parentID={8C3BB865-3966-4c58-A020-10AB875FEEDD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7322      Clear slave channel register and result control register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7323      if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7324      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7325        /* Get the SFR base address for the current slave kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7326        lEvadcGroupPtr = &MODULE_EVADC.G[lSlaveKernel];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7327  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7328        /* [cover parentID={8C3BB865-3966-4c58-A020-10AB875FEEDD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7329        Clear slave channel register and result control register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7330        lEvadcGroupPtr->CHCTR[AnChannelNum].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7331        lEvadcGroupPtr->RCR[ResReg].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7332      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7333    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7334  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7335  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7336  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7337  #if(ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7338  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7339  ** Traceability: [cover parentID={C7F76F85-5D91-4c47-98A6-ACE7616B57A7}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7340  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7341  ** Syntax           : static void Adc_lStartSwConversion                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7342  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7343  **                      const Adc_GroupCfgType * const GrpPtr,                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7344  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7345  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7346  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7347  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7348  ** Description      : This function programs the Request Source Queue and     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7349  **                    triggers the start of conversion.                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7350  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7351  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7352  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7353  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7354  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7355  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7356  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7357  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7358  **                    KernelId  - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7359  **                    RegSrc - Request source on which to start the group     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7360  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7361  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7362  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7363  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7364  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7365  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7366  static void Adc_lStartSwConversion(const Adc_GroupCfgType * const GrpPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7367                                     const uint32 KernelId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7368                                     const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7369  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7370    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7371    Ifx_EVADC_G_Q *lEvadcQPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7372    const Adc_GroupDefType *lGrpDefCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7373    uint32 lConvMode, lRsIntpt;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7374    uint8 lNoOfChannels, lChloopCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7375  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7376    /* Get base address of the kernel SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7377    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7378    /* Get base address of the RS SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7379  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7380    lEvadcQPtr = &MODULE_EVADC.G[KernelId].Q[ReqSrc];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7381  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7382    /* Get the group definition configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7383    lGrpDefCfgPtr = GrpPtr->GroupDefinition;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7384  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7385    /* Flush the RS queue, clear valid flags, before channels are queued up
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7386       for conversion */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7387    lEvadcQPtr->QMR.U = (((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_FLUSH_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7388                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CEV_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7389                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CLRV_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7390  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7391    /* Clear RS event, Channel event and result event flags */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7392    lEvadcGroupPtr->SEFCLR.U = ((uint32)ADC_ONE_U << ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7393    lEvadcGroupPtr->CEFCLR.U = (uint32)GrpPtr->ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7394    lEvadcGroupPtr->REFCLR.U = (uint32)GrpPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7395    /* Clear valid flag for all result registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7396    lEvadcGroupPtr->VFR.U = (uint32)GrpPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7397  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7398    /* [cover parentID={3B15D2BA-4BEC-4dc8-875C-E893D21A77C0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7399     [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7400    #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7401    /* [cover parentID={46197595-FA8C-479d-96E0-65DF05374A6D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7402    Is Group configured with Diagnostic channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7403    if(GrpPtr->DiagnosticChGrp == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7404    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7405      /* [cover parentID={2AB0D1A9-757B-467b-8A68-971CA47D7596}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7406      Enable Test function for corresponding Kernel of the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7407      Mcal_SetBitAtomic(&(MODULE_EVADC.GLOB.TE.U), (uint8)KernelId, 1, ADC_ONE_U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7408    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7409    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7410  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7411    /* [cover parentID={3DB53821-0700-41f3-A263-9E02ABB8A6DC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7412    EMUX mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7413    #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7414    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7415    uint8 lEmuxGrp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7416    lEmuxGrp = (ADC_ONE_U & (GrpPtr->GrpEmuxCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7417    /* [cover parentID={444FD4F7-6FA4-43ac-856A-D521B09BE0A5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7418    Group is configured with the EMUX [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7419    if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7420    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7421      /* [cover parentID={243E4A2C-DD97-49ad-97DB-06B2286AC1E6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7422      Configure the Wait-For-Read mode when emux feature is enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7423      lResReg = lGrpDefCfgPtr[0U].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7424      lEvadcGroupPtr->RCR[lResReg].U |= \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7425                                    ((uint32)ADC_ONE_U<<IFX_EVADC_G_RCR_WFR_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7426    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7427    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7428  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7429    /* [cover parentID={0BD66C2D-739D-4c99-BE48-4D1809055DE2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7430    Sync conversion is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7431    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7432    /* [cover parentID={25294F9A-DB76-4c13-9126-26292CD2E973}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7433    Sync conversion is configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7434    if(GrpPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7435    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7436      /* [cover parentID={48E79809-F4CD-4054-A767-195E7F062A3B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7437      Clear Slave events [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7438      Adc_lClearSlaveEvents(GrpPtr, KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7439    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7440    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7441  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7442    /* [cover parentID={E4005B76-7EC4-45d4-BF4A-AD7090D2D596}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7443    Is Group is in continuous conversion mode [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7444    if(GrpPtr->ConvMode == ADC_CONV_MODE_CONTINUOUS)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7445    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7446      /* [cover parentID={5677A0A7-C2CB-4db6-A628-77EA33781828},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7447      {B9568FC8-DC93-4299-A713-C3BA9A6E7A0D}]Enable REFILL mode of Queue[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7448      /* If group is in continuous mode, enable REFILL mode of Queue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7449      lConvMode = (uint32)ADC_ONE_U << IFX_EVADC_G_Q_QINR_RF_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7450    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7451    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7452    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7453      /* [cover parentID={CA739E58-269B-40d1-8D95-0A913FF6D921}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7454      Disable REFILL mode of Queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7455      lConvMode = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7456    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7457  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7458    /* [cover parentID={98B3AC90-C3F8-4cc4-BDB0-AEE919020BDF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7459    Limit Checking is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7460    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7461    /* [cover parentID={D1D32C5E-4297-4a8e-8E4D-BE8B1A969D35}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7462    Is Group a Limit Check  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7463    if(GrpPtr->LimitCheckGroup == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7464    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7465      /* [cover parentID={5C424B85-B035-4480-A0F2-08530704E7C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7466      Disable the Request Source interrupt  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7467      lRsIntpt = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7468    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7469    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7470    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7471    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7472      /* [cover parentID={AA1887E5-6A08-4de3-BA9C-E36D6AF5B721}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7473      Enable the Request Source interrupt [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7474      lRsIntpt = (uint32)ADC_ONE_U << IFX_EVADC_G_Q_QINR_ENSI_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7475    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7476  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7477    lNoOfChannels = GrpPtr->NoOfChannels;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7478    lChloopCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7479  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7480    /* Update QCTRL from the configuration directly */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7481    lEvadcQPtr->QCTRL.U =(uint32)\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7482                (GrpPtr->GroupQCtrlCfg | ADC_Q_CTRL_WRITE_PROTECT_MSK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7483  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7484    /* [cover parentID={99B94939-2713-4d7b-BD7A-4773F6730F1F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7485    Till the all channels except last one [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7486    while(lChloopCount < (lNoOfChannels - (uint8)1U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7487    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7488      /* [cover parentID={F7C9363B-DBEC-4700-BF2E-386088ED434A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7489      Analog channels are pushed to RS queue with refill mode and configured
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7490      Diagnostics feature information [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7491      lEvadcQPtr->QINR.U = (lConvMode |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7492                        (uint32)(lGrpDefCfgPtr[lChloopCount].AnalogChannelNo) |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7493                        (uint32)(lGrpDefCfgPtr[lChloopCount].AnChDiagnosticsCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7494      lChloopCount++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7495    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7496  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7497    /* [cover parentID={E748A9F6-6849-4575-BAC3-E434857D37CB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7498    Last Analog channel is  pushed to RS queue with refill mode and configured
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7499    Diagnostics feature information and RS interrupt enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7500    lEvadcQPtr->QINR.U =(lConvMode | lRsIntpt |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7501               (uint32)(lGrpDefCfgPtr[lChloopCount].AnalogChannelNo) |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7502               (uint32)(lGrpDefCfgPtr[lChloopCount].AnChDiagnosticsCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7503  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7504    /* [cover parentID={0467DF16-33EA-4a46-8E2A-297C450121A4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7505    Priority Implementation is HW-SW Priority [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7506    #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7507    /* [cover parentID={D0A1209A-04BA-4c39-8961-830C899875CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7508    Adjust the Request Source priorities [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7509    Adc_lAdjustRsPriorities(KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7510    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7511  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7512    /* [cover parentID={6A8167EC-3955-4f9a-B527-D9B32B057444}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7513    Ignore Gating signal and Trigger Start of conversion via SW trigger bit
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7514    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7515    lEvadcQPtr->QMR.U = ADC_START_SW_TRIG_CONV;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7516  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7517  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7518  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7519  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7520  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7521  ** Traceability: [cover parentID={D9FBCCA8-B0F5-4e72-BD96-3465CF3CAE39}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7522  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7523  ** Syntax           : static void Adc_lClearSlaveEvents                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7524  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7525  **                      const Adc_GroupCfgType * const GrpPtr,                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7526  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7527  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7528  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7529  ** Description      : This function clears the channel and result events for  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7530  **                    slave kernels of a synchronization group.               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7531  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7532  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7533  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7534  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7535  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7536  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7537  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7538  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7539  **                    KernelId  - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7540  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7541  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7542  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7543  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7544  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7545  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7546  LOCAL_INLINE void Adc_lClearSlaveEvents(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7547                                          const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7548  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7549    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7550    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7551    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7552    uint8 lKernelCount, lSlaveKernel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7553  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7554    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7555    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7556  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7557    /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7558    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[lCoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7559  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7560    /* [cover parentID={F660BCB1-DC46-432b-8693-C9F1DE7FAC08}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7561    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7562    for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7563         lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7564    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7565      lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7566      /* [cover parentID={3E39680D-6101-4e75-9CEA-8EF12B90D350}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7567      Valid Slave Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7568      if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7569      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7570        /* Get the SFR base address for the current slave kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7571        lEvadcGroupPtr = &MODULE_EVADC.G[lSlaveKernel];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7572  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7573        /* [cover parentID={BB6AF7A0-E9F1-4ff4-8436-CE386DB28958}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7574        Clear Channel event, Result event & Valid flag registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7575        lEvadcGroupPtr->CEFCLR.U = (uint32)GrpPtr->SyncChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7576        lEvadcGroupPtr->REFCLR.U = (uint32)GrpPtr->SyncResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7577        /* Clear valid flag for all result registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7578        lEvadcGroupPtr->VFR.U = (uint32)GrpPtr->SyncResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7579      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7580    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7581  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7582  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7583  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7584  #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7585  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7586  ** Traceability: [cover parentID={69524FE9-9C52-40bd-B8D1-DD18CC4E8859}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7587  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7588  ** Syntax           : static void Adc_lAdjustRsPriorities                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7589  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7590  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7591  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7592  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7593  ** Description      : This function checks and (if required) programs the     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7594  **                    Request Source priorities as per priorities of the      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7595  **                    groups installed on them.                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7596  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7597  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7598  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7599  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7600  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7601  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7602  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7603  ** Parameters(in)   : KernelId  - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7604  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7605  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7606  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7607  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7608  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7609  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7610  LOCAL_INLINE void Adc_lAdjustRsPriorities(const uint32 KernelId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7611  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7612    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7613    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7614    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7615    uint8 lRsPrios[ADC_REQSRC_COUNT];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7616    uint8 lGroupPrios[ADC_REQSRC_COUNT];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7617    uint8 lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7618    uint32 lFinalPrio, lCoreId, lArbPrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7619  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7620    /* Get the core Id from which it is called */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7621    lCoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7622  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7623    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7624    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, lCoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7625  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7626    /* Get the SFR base address for the kernel and the queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7627    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7628  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7629    /* Get priorities (0..255) of installed groups and initialize required RS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7630     * priorities with 0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7631    /* [cover parentID={8EADC793-2868-420f-BC6C-2C0081F5F7A1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7632    Till the last available RS [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7633    for (lRsCount = (uint8)0U; lRsCount < (uint8)ADC_REQSRC_USED_COUNT; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7634         lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7635    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7636      if (lKernelDataPtr->RSData[lRsCount].ActiveGroupId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7637      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7638        /* [cover parentID={997CA6FF-021B-4a5a-ACDD-C7F590FB3F3F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7639        Read the priorities of the groups installed on all RS and Initialize
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7640        required RS priority with 0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7641        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[lCoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7642                       HwUnitCfgPtr[KernelId]->GrpCfgPtr\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7643                       [lKernelDataPtr->RSData[lRsCount].ActiveGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7644        lGroupPrios[lRsCount] = lGrpCfgPtr->GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7645      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7646      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7647      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7648        lGroupPrios[lRsCount] = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7649      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7650      lRsPrios[lRsCount] = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7651    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7652  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7653    /* Get required RS priorities */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7654    if (lGroupPrios[0] > lGroupPrios[1])
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7655    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7656      lRsPrios[0]++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7657    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7658    else if (lGroupPrios[1] > lGroupPrios[0])
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7659    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7660      lRsPrios[1]++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7661    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7662    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7663    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7664      /* Priorities equal - nothing to do */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7665    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7666  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7667    if (lGroupPrios[0] > lGroupPrios[2])
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7668    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7669      lRsPrios[0]++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7670    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7671    else if (lGroupPrios[2] > lGroupPrios[0])
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7672    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7673      lRsPrios[2]++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7674    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7675    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7676    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7677      /* Priorities equal - nothing to do */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7678    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7679  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7680    if (lGroupPrios[1] > lGroupPrios[2])
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7681    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7682      lRsPrios[1]++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7683    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7684    else if (lGroupPrios[2] > lGroupPrios[1])
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7685    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7686      lRsPrios[2]++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7687    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7688    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7689    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7690      /* Priorities equal - nothing to do */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7691    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7692  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7693    /* Update RS priorities as per group priorities */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7694    lFinalPrio = (uint32)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7695        ((uint32)((uint32)lRsPrios[0] << IFX_EVADC_G_ARBPR_PRIO0_OFF) |
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7696         (uint32)((uint32)lRsPrios[1] << IFX_EVADC_G_ARBPR_PRIO1_OFF) |
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7697         (uint32)((uint32)lRsPrios[2] << IFX_EVADC_G_ARBPR_PRIO2_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7698    /* [cover parentID={122DBA7F-0EA6-4410-A515-A7FB88E46364}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7699    Priorities needs to change [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7700    if ((lEvadcGroupPtr->ARBPR.U & ADC_ARBPR_PRIO_MSK) != lFinalPrio)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7701    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7702      /* [cover parentID={3E2DA8FB-A8F1-4824-9B74-9263F43D0ADD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7703      Disable aribration of all Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7704      lArbPrVal = lEvadcGroupPtr->ARBPR.U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7705      lArbPrVal &= ~(ADC_ARBPR_ASEN_MSK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7706      /* Repeated write to catch corner case where RS is stopped just when a
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7707         conversion requested by it starts */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7708      lEvadcGroupPtr->ARBPR.U = lArbPrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7709      lEvadcGroupPtr->ARBPR.U = lArbPrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7710  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7711      /* [cover parentID={880B9B9E-F187-4ce1-8AA5-3947080A6F07}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7712      Reset request source priorities [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7713      lArbPrVal &= ~(ADC_ARBPR_PRIO_MSK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7714      lEvadcGroupPtr->ARBPR.U = lArbPrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7715  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7716      /* [cover parentID={B88CAD87-07D4-4e41-A78F-5F69D1FEB4C6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7717      Update RS priorities & Re-enable arbitration sources [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7718      lEvadcGroupPtr->ARBPR.U |= lFinalPrio;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7719  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7720      /* [cover parentID={B88CAD87-07D4-4e41-A78F-5F69D1FEB4C6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7721      Update RS priorities & Re-enable arbitration sources [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7722      lEvadcGroupPtr->ARBPR.U |= ADC_ARBPR_ASEN_MSK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7723    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7724  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7725  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7726  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7727  #if(((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7728   (ADC_ENABLE_QUEUING == STD_ON)) && (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7729  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7730  ** Traceability: [cover parentID={C98FBF8B-1A59-4301-9718-93EE42597C02}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7731  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7732  ** Syntax           : LOCAL_INLINE void  Adc_lPushToQueue                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7733  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7734  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7735  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7736  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7737  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7738  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7739  ** Description      :The function places the new requested group in Queue and **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7740  **                   updates the Queue data. If Queue is empty, the requested **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7741  **                   Group conversion is started.                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7742  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7743  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7744  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7745  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7746  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7747  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7748  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7749  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7750  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7751  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7752  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7753  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7754  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7755  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7756  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7757  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7758  LOCAL_INLINE void Adc_lPushToQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7759                                     const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7760                                     const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7761  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7762    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7763    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7764    Adc_GroupType lPushGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7765  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7766    /*Get the base address of the group configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7767    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7768                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7769    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7770    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7771  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7772    /* [cover parentID={36253C22-79F4-4234-9D63-C3FA6D11FADA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7773    Set group status to BUSY, as it is in the queue now [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7774    Adc_lSetGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7775    /* [cover parentID={72D10A6C-4917-4e45-8AE0-DB4189F56ADC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7776    Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7777    Adc_lClrGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7778    /* [cover parentID={152E7BFD-4263-4b9b-8A40-FF59FE3B2714}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7779    Clear result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7780    Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7781    lKernelDataPtr->NumofValidConRes[GroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7782  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7783    /* [cover parentID={AFD306E3-0C8E-41cb-A9AC-9405C753BA75}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7784    Priority Implementation is ON or Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7785    #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7786         (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7787    /* [cover parentID={056C496C-0258-4850-9441-093F144F6CE9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7788    Sets the running channels and result registers for all slave kernels[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7789    Adc_lSetRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7790    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7791  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7792    /* [cover parentID={130F4874-6D82-4952-84E4-A863DD9BAC0C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7793    Priority Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7794    #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7795    /* [cover parentID={AB97672D-E6F0-443b-9177-9E3BFFBD9360}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7796    Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7797    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7798    /* [cover parentID={A8CED414-54D7-4c80-90E4-58A9CBD2905C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7799    Is Group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7800    if ((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7801    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7802      /* [cover parentID={213A2567-83A9-4d3d-9F7A-5F02FB4BB902}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7803      Set limit check active status flag before installing group into request
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7804      source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7805      lKernelDataPtr->LimitChkActiveFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7806    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7807    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7808  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7809    /* [cover parentID={877AC307-2D2E-4b1f-99C6-0E7B468624B7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7810    Is the group configured for alias? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7811    if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7812    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7813      /* [cover parentID={61F649F9-C9D9-41d4-AE12-609B841FE5EB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7814      Set alias active status flag before installing group into request source
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7815      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7816      lKernelDataPtr->AliasActiveFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7817    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7818    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7819  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7820    /* [cover parentID={79C90658-5176-452a-ACBE-FA604F7A3563}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7821    Is Queue Empty [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7822    if(lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId == \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7823          ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7824    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7825      /* [cover parentID={562269D4-E07B-4e16-8A1D-15AAAC92D817}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7826      Push the Current group to queue head  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7827      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7828      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7829      /* [cover parentID={0C238C74-B8C3-4c5e-BE69-983EC8C07A3A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7830      Schedule from the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7831      Adc_lScheduleFromQueue(KernelId, CoreId, lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7832    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7833    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7834    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7835      /* [cover parentID={CECC13EA-BE16-4ab6-B553-4E1688B591D6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7836      Add group to the end of the queue   [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7837      lPushGrpId = lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7838      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].QueueOfSwGroup[lPushGrpId].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7839                                                            NextGroup = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7840      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].QueueOfSwGroup[GroupId].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7841                                                     PreviousGroup = lPushGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7842      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7843    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7844  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7845  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7846  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7847  #if(((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7848   (ADC_ENABLE_QUEUING == STD_ON)) && (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7849  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7850  ** Traceability: [cover parentID={E6780B17-BD23-4f84-94D0-FE8FA2F3DACC}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7851  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7852  ** Syntax           : static void Adc_lScheduleFromQueue                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7853  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7854  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7855  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7856  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7857  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7858  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7859  ** Description      :This function Schedules the Group for conversion which   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7860  **                   is pointed by Pop index.                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7861  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7862  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7863  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7864  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7865  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7866  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7867  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7868  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7869  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7870  **                    ReqSrc - Request source for which to schedule           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7871  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7872  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7873  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7874  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7875  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7876  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7877  static void Adc_lScheduleFromQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7878                                     const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7879                                     const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7880  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7881    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7882    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7883    Adc_GroupType lPopGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7884  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7885    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7886    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7887  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7888    /* [cover parentID={AE2D36E5-02EE-4035-AEDF-F39EE63400C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7889    Get Group to be started at the queue head [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7890    lPopGrpId = lKernelDataPtr->RSData[ReqSrc].PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7891  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7892    /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7893    lGrpCfgPtr =  &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7894                    GrpCfgPtr[lPopGrpId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7895  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7896    /* [cover parentID={F75BEED7-FE7E-4383-AF16-FCF47B05E02E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7897    Update Active Group ID to the Kernel Data [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7898    lKernelDataPtr->RSData[ReqSrc].ActiveGroupId = lPopGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7899  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7900    /* [cover parentID={4F8F7079-6BB9-4d69-B595-B4E80DD24909}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7901    Limit Checking is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7902    #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7903    if((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7904    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7905      /* [cover parentID={C0B216C4-D0CF-4e3d-AE90-AE02DFA3ABEB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7906      Update Limit checkgroup ID to the Kernel Data [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7907      lKernelDataPtr->RSData[ReqSrc].ActiveLimitChkCh = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7908          lGrpCfgPtr->GroupDefinition[0U].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7909    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7910    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7911  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7912    /* [cover parentID={EAC48EBC-0DD2-47a7-ADF7-C054B583874A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7913    Prepare Group to Start conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7914    Adc_lPrepareGrpForStart(KernelId, lPopGrpId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7915    /* Enable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7916    lKernelDataPtr->RSData[ReqSrc].IsrNoServiceFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7917    /* [cover parentID={6056B00A-7C97-4f32-A2DD-E93D4328A6F5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7918    Start Sw Conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7919    Adc_lStartSwConversion(lGrpCfgPtr, KernelId, ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7920  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7921  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7922  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7923  #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7924      (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7925  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7926  ** Traceability: [cover parentID={B759583E-6011-4128-B9D2-A62DA378FC55}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7927  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7928  ** Syntax           : static void Adc_lPopFromQueue                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7929  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7930  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7931  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7932  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7933  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7934  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7935  ** Description      :The function removes the requested group from Queue and  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7936  **                   updates the Queue data. If requested Group is currently  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7937  **                   converting, the Group is stopped and the next Group in   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7938  **                   Queue is started for conversion (if any).                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7939  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7940  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7941  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7942  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7943  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7944  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7945  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7946  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7947  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7948  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7949  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7950  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7951  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7952  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7953  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7954  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7955  static void Adc_lPopFromQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7956                                const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7957                                const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7958  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7959    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7960    Adc_QueueDataType *lQueuePtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7961    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7962    Adc_GroupType lPopGrpId, lTempPrevGrpId, lTempNextGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7963  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7964    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7965    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7966    /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7967    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7968                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7969    /* Get Base address of the Queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7970    lQueuePtr =  &(lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7971                   QueueOfSwGroup[0U]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7972  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7973    /* [cover parentID={8EA4C72C-B10F-4f07-AD03-24D2900155BE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7974    Priority Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7975    #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7976    /* [cover parentID={74E32476-92C3-4506-8427-80FEBC24FFDE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7977    Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7978    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7979    /* [cover parentID={669F9DD1-B516-423b-A3BD-981566A3B460}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7980    Is Group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7981    if ((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7982    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7983      /* [cover parentID={A9D37CB6-165F-47df-A572-7B872D0FB27B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7984      Reset limit check active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7985      lKernelDataPtr->LimitChkActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7986    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7987    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7988  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7989    /* [cover parentID={98342C15-A61C-42b2-8CE4-FAD15FA35D53}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7990    Is the group configured for alias? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7991    if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7992    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7993      /* [cover parentID={91EF1D06-580E-460e-9814-D5E1B05D0BD0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7994      Reset alias active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7995      lKernelDataPtr->AliasActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7996    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7997    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7998  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  7999    /* [cover parentID={411F7C4E-19D8-4286-9E1A-9DBDA0CB8F7F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8000    Is POP element currently in conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8001    if(lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId == GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8002    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8003      /* Disable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8004      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].IsrNoServiceFlag = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8005          (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8006  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8007      /* [cover parentID={FD692131-80AE-407c-B289-EAE1A6305081}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8008      Remove the requested group from queue pop head and place the new group
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8009      at the pop head [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8010      lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8011          lQueuePtr[GroupId].NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8012      lPopGrpId = lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8013      /* Are there further groups in the queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8014      if(lPopGrpId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8015      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8016        lQueuePtr[GroupId].NextGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8017        lQueuePtr[lPopGrpId].PreviousGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8018      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8019      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8020      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8021        /*Since, there are no further groups in the queue, Queue is marked empty*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8022        lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8023            ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8024      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8025  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8026      /* Stop the ongoing conversion */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8027      Adc_lStopConvRequest(lGrpCfgPtr, KernelId, lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8028  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8029      /* Clear Kernel Data variable */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8030      Adc_lRemoveActiveGroup(lKernelDataPtr, lGrpCfgPtr, lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8031      /* [cover parentID={988E965B-513A-4fa9-A07A-F635017D865D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8032      Sync Conversion is on or HW Priority Mode [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8033      #if ((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8034           (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8035      /* [cover parentID={D8425544-4121-481c-BFBC-4D6683CCAE7B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8036      Clear slaves running channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8037      Adc_lClrRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8038      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8039  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8040      /* [cover parentID={921BB0F9-0EE4-473a-893B-973DDFB393EA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8041      Clear Group status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8042      Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8043      /* [cover parentID={85F56BC9-E558-4c20-91AE-8C6B96E37DCD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8044      Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8045      Adc_lClrGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8046      /* [cover parentID={A77B4E91-A3BC-4cf9-8EF6-01EABC55C886}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8047      Clear Result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8048      Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8049      lKernelDataPtr->NumofValidConRes[GroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8050      /* [cover parentID={001C0399-2483-453d-9358-FE81ACA4E7AB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8051      Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8052      #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8053      /* [cover parentID={01E3DC3F-5F76-4f90-8542-FA0E5C085415}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8054      Disable group notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8055      Adc_lClrGrpNotifAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8056      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8057      /* [cover parentID={F415DAB4-9C61-43bb-B8C4-E44550C2B208}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8058      Enable Start Stop Group API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8059      #if(ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8060      /* [cover parentID={D2E51118-A381-4e65-A837-9AD5B7EA44F7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8061      Is Queue has more Groups [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8062      if(lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId !=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8063                                                  ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8064      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8065        /* [cover parentID={887B15F3-3868-4175-BC2B-0BA68B0EE8EB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8066        Schedule next Group from the Queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8067        Adc_lScheduleFromQueue(KernelId, CoreId, lGrpCfgPtr->GrpPriority);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8068      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8069      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8070    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8071    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8072    { /*Group is in between or at the end of the queue, only Link is removed.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8073        No need to stop any conversion or clear SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8074      lTempPrevGrpId = lQueuePtr[GroupId].PreviousGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8075      lTempNextGrpId = lQueuePtr[GroupId].NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8076      if(lTempPrevGrpId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8077      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8078        lQueuePtr[lTempPrevGrpId].NextGroup = lTempNextGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8079      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8080      if(lTempNextGrpId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8081      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8082        lQueuePtr[lTempNextGrpId].PreviousGroup = lTempPrevGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8083      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8084      /* [cover parentID={BADA0420-19B2-4db2-8EEE-D1A802C830A1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8085      Remove the group from in between the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8086      lQueuePtr[GroupId].PreviousGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8087      lQueuePtr[GroupId].NextGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8088  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8089      if(lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId == GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8090      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8091        /*If the removed group is last in the queue, update the push group ID*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8092        lKernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8093                                                      lTempPrevGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8094      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8095  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8096      /* [cover parentID={856702F0-D785-4b87-93E0-A6FFBD6A8D4A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8097      Clear Group status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8098      Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8099      /* [cover parentID={984643BF-987A-49df-98AB-422945D31F79}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8100      Clear Group Result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8101      Adc_lClrGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8102      /* [cover parentID={A75C6689-FB1A-4061-9362-6B2AB1BF5250}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8103      Clear Result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8104      Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8105      lKernelDataPtr->NumofValidConRes[GroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8106  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8107      /* [cover parentID={F4388723-F162-434d-9585-5DFC707FBA8A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8108      Sync Conversion is on or Priority Mode not equal to None [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8109      #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8110           (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8111      /* [cover parentID={1F6413A7-51A2-4c25-9AAB-6A1980D48489}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8112      Clear slaves running channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8113      Adc_lClrRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8114      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8115  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8116      /* [cover parentID={12D547E5-0AF6-4181-B0E6-3C9B21F669CB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8117      Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8118      #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8119      /* [cover parentID={E79BD343-2F8B-44fb-B8C4-434FC979C5F8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8120      Disable group notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8121      Adc_lClrGrpNotifAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8122      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8123    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8124  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8125  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8126  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8127  #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8128      (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8129  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8130  ** Traceability: [cover parentID={DE8C896F-5F42-4dd0-96F3-1BDC11F3890C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8131  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8132  ** Syntax           : LOCAL_INLINE void Adc_lRemoveFromQueue                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8133  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8134  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8135  **                       Adc_GlobalDataType * const KernelDataPtr             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8136  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8137  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8138  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8139  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8140  ** Description      :This function Removes the Group from Queue which has     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8141  **                   just completed the conversion (implicitly stopped)       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8142  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8143  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8144  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8145  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8146  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8147  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8148  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8149  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8150  **                    KernelDataPtr - Pointer to the kernels global data      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8151  **                                    structure                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8152  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8153  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8154  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8155  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8156  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8157  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8158  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8159  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8160  LOCAL_INLINE void Adc_lRemoveFromQueue(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8161      Adc_GlobalDataType * const KernelDataPtr, const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8162      const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8163  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8164    Adc_QueueDataType *lQueuePtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8165    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8166    Adc_GroupType lPopGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8167  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8168    /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8169    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8170                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8171    /* Get Base address of the Queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8172    lQueuePtr = &(KernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8173                  QueueOfSwGroup[0U]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8174  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8175    /*Update the next group in queue as the POP group*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8176    KernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8177        lQueuePtr[GroupId].NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8178    lPopGrpId = KernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8179    /* [cover parentID={3131A5DD-0057-4b64-A83D-B87E34E666B9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8180    Any Group is in Queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8181    if(lPopGrpId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8182    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8183      /* [cover parentID={8F40F301-FC45-415d-BCE3-64AF6DBFCF32}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8184      Remove the group from the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8185      lQueuePtr[GroupId].NextGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8186      lQueuePtr[lPopGrpId].PreviousGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8187    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8188    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8189    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8190      /* [cover parentID={C1DDE6D1-45F8-45e1-8AC6-A0B2BE610D50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8191      Mark queue as empty, since no group in the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8192      KernelDataPtr->RSData[lGrpCfgPtr->GrpPriority].PushGroupId = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8193          ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8194    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8195  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8196  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8197  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8198  #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8199  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8200  ** Traceability: [cover parentID={8C84BADE-FAE8-4bdc-881B-18207E7DA9D9}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8201  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8202  ** Syntax           : LOCAL_INLINE uint8 Adc_lGetReqSrcForGrp                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8203  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8204  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8205  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8206  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8207  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8208  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8209  ** Description      :This function is to find a request source on which a     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8210  **                   given group could be installed immediately.              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8211  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8212  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8213  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8214  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8215  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8216  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8217  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8218  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8219  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8220  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8221  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8222  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8223  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8224  ** Return value     : Request source index on which to install the requested  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8225  **                    group or ADC_INVALID_RS_ID if group cannot be started   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8226  **                    immediately.                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8227  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8228  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8229  LOCAL_INLINE uint8 Adc_lGetReqSrcForGrp(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8230                                 const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8231  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8232    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8233    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8234    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8235    Adc_GroupPriorityType lGroupPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8236    uint8 lRetVal = ADC_INVALID_RS_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8237    uint8 lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8238  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8239    /* Get priority of group to be started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8240    lGroupPriority = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8241                                    GrpCfgPtr[GroupId].GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8242  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8243    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8244    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8245  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8246    /* [cover parentID={448E17D0-336C-4c0e-B240-8BCE50014B94}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8247    Till the last available RS [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8248    for (lRsCount = (uint8)0U; lRsCount < (uint8)ADC_REQSRC_USED_COUNT; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8249         lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8250    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8251      /* Get current group ID for each RS: */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8252      lGroupId = lKernelDataPtr->RSData[lRsCount].ActiveGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8253      /* [cover parentID={31DEBEE5-619F-458e-9516-2ED521BAE9A6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8254      Is current RS free [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8255      if (ADC_INVALID_GROUP_ID == lGroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8256      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8257        /* [cover parentID={C427020B-9666-4c44-B84B-8D0F074AC9F0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8258        RS is free, group can be started [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8259        lRetVal = lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8260        break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8261      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8262    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8263  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8264    /* No RS is free, check if lower priority SW group could be stopped */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8265    /* [cover parentID={9D37B110-C512-4597-87CC-CB2C8C6FFDD6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8266    No RS is free [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8267    if (lRetVal == ADC_INVALID_RS_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8268    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8269      /* [cover parentID={D5BD428A-5553-435e-8019-56CD2782A024}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8270      Till the last available RS [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8271      for (lRsCount = (uint8)0U; lRsCount < (uint8)ADC_REQSRC_USED_COUNT; \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8272           lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8273      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8274        /* Get current group ID for each RS: */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8275        lGroupId = lKernelDataPtr->RSData[lRsCount].ActiveGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8276        /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8277        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8278                       HwUnitCfgPtr[KernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8279  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8280        /* [cover parentID={14AE6EC8-C00A-4b76-9D82-E9AD39CF64A3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8281        Is lower priority SW group is converting [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8282        if ((lGrpCfgPtr->TriggerSource == ADC_TRIGG_SRC_SW) &&
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8283            (lGrpCfgPtr->GrpPriority < lGroupPriority))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8284        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8285          /* SW group with lower priority could be stopped to start the new
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8286             group; continue searching for another SW group with even lower
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8287             priority */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8288          /* [cover parentID={4F9EA754-DD3D-47ba-8FBE-700BF23884B8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8289          Get index of RS on which to install the requested group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8290          lRetVal = lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8291          lGroupPriority = lGrpCfgPtr->GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8292        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8293      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8294    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8295  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8296    return(lRetVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8297  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8298  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8299  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8300  #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8301  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8302  ** Traceability: [cover parentID={D5FF68A6-EC43-4828-BA2C-DFDDC6F315CC}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8303  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8304  ** Syntax           : LOCAL_INLINE void Adc_lPushToScheduler                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8305  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8306  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8307  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8308  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8309  **                       const uint8 PriorityBoost                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8310  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8311  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8312  ** Description      : This function pushs a group to the ordered SW queue of  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8313  **                    the scheduler                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8314  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8315  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8316  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8317  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8318  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8319  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8320  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8321  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8322  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8323  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8324  **                    PriorityBoost - 0: Group is inserted after all the      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8325  **                                       groups of the same priority (last    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8326  **                                       amongst same priority)               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8327  **                                    1: Group is inserted before all the     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8328  **                                       groups of the same priority (first   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8329  **                                       amongst same priority)               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8330  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8331  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8332  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8333  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8334  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8335  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8336  LOCAL_INLINE void Adc_lPushToScheduler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8337                                         const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8338                                         const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8339                                         const uint8 PriorityBoost)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8340  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8341    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8342    Adc_GroupType lGroupInsertBefore;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8343    Adc_GroupType lNextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8344    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8345    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8346    const Adc_GroupCfgType *lGrpCfgPtrTmp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8347  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8348    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8349    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8350  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8351    /* [cover parentID={C5600984-5F9E-469c-A2F0-764FA785DE11}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8352    Queue is Empty [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8353    if (ADC_INVALID_GROUP_ID == lKernelDataPtr->PushGroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8354    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8355      /* [cover parentID={DAD89ED9-0A1B-487b-9783-A9A6F310FEB6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8356      Add group to the head of the queue (first) [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8357      lKernelDataPtr->QueueOfSwGroup[GroupId].NextGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8358      lKernelDataPtr->QueueOfSwGroup[GroupId].PreviousGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8359                                                             ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8360      lKernelDataPtr->PopGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8361      lKernelDataPtr->PushGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8362    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8363    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8364    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8365      /* [cover parentID={45D09BA0-9A64-4235-A9B0-304FC8E3BE70}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8366      Read base address for group configuration [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8367      lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8368                     HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8369  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8370      lGroupInsertBefore = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8371      lGroupId = lKernelDataPtr->PushGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8372  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8373      /* [cover parentID={0861CB1B-B93E-4ff6-8AFB-4362584BD61D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8374      Group is inserted after all the groups of the same priority when
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8375      PriorityBoost is 0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8376      if (PriorityBoost == (uint8)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8377      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8378        /* [cover parentID={83E1463B-51FA-49e1-99C2-61A347D306BD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8379        Find location inside the SW queue to insert the new group at (based
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8380        on priority) [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8381        do
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8382        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8383          /* Get temporary group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8384          lGrpCfgPtrTmp = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8385                            HwUnitCfgPtr[KernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8386          /* No priority boost: New group is inserted before pending groups
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8387          with the same priority */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8388          if (lGrpCfgPtrTmp->GrpPriority >= lGrpCfgPtr->GrpPriority)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8389          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8390            lGroupInsertBefore = lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8391          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8392          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8393          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8394            lGroupId = lKernelDataPtr->QueueOfSwGroup[lGroupId].PreviousGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8395          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8396        } while ((lGroupId != ADC_INVALID_GROUP_ID) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8397                 (lGroupInsertBefore == ADC_INVALID_GROUP_ID));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8398      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8399      /* [cover parentID={DFCFE545-1EC1-4518-9F37-D6D65550360D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8400      Group is inserted at the head of the queue when PriorityBoost is 1, since it
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8401      was just removed from being active, it has to be next executed when Request
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8402      source is free or Is the requested group is having highest priority among
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8403      all the groups when PriorityBoost is 0 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8404      if (ADC_INVALID_GROUP_ID == lGroupInsertBefore)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8405      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8406        /* [cover parentID={3AC4F86E-9AAC-4f22-AEAC-8BBB523B1366}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8407        Insert group at the head of the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8408        lKernelDataPtr->QueueOfSwGroup[lKernelDataPtr->PopGroupId].PreviousGroup=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8409                                                                          GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8410        lKernelDataPtr->QueueOfSwGroup[GroupId].NextGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8411                                                       lKernelDataPtr->PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8412        lKernelDataPtr->QueueOfSwGroup[GroupId].PreviousGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8413                                                             ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8414        lKernelDataPtr->PopGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8415      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8416      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8417      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8418        /* [cover parentID={4EC83D48-814C-4d10-9EE6-9BEF79C7A53F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8419        Insert group before the Group Inserted earlier [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8420        lNextGroup = lKernelDataPtr->QueueOfSwGroup[lGroupInsertBefore].\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8421                                                                        NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8422        lKernelDataPtr->QueueOfSwGroup[lGroupInsertBefore].NextGroup = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8423        lKernelDataPtr->QueueOfSwGroup[GroupId].NextGroup = lNextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8424        lKernelDataPtr->QueueOfSwGroup[GroupId].PreviousGroup =lGroupInsertBefore;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8425        if (lNextGroup == ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8426        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8427          lKernelDataPtr->PushGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8428        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8429        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8430        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8431          lKernelDataPtr->QueueOfSwGroup[lNextGroup].PreviousGroup = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8432        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8433      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8434    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8435  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8436  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8437  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8438  #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)&&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8439      (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8440  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8441  ** Traceability: [cover parentID={3CAB6D0C-BC19-4f76-80B9-9D77E7BF7EBE}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8442  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8443  ** Syntax           : LOCAL_INLINE Adc_GroupType Adc_lPopFromScheduler        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8444  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8445  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8446  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8447  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8448  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8449  ** Description      : This function pops the highest priority group from the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8450  **                    ordered SW queue of the scheduler                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8451  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8452  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8453  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8454  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8455  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8456  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8457  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8458  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8459  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8460  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8461  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8462  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8463  ** Return value     : GroupId of popped group or ADC_INVALID_GROUP_ID if SW   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8464  **                    queue is empty                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8465  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8466  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8467  LOCAL_INLINE Adc_GroupType Adc_lPopFromScheduler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8468                                                   const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8469  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8470    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8471    Adc_GroupType lNextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8472    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8473  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8474    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8475    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8476    lGroupId = lKernelDataPtr->PopGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8477    /* [cover parentID={173869DF-6DD9-4594-85C5-0D5EF3F1AF8E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8478    Are there any groups in SW queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8479    if (lGroupId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8480    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8481      /* [cover parentID={831919A5-5D32-4a01-8D6C-471B6321DCB4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8482      Group present in the queue is the last one [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8483      if (lKernelDataPtr->PushGroupId == lGroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8484      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8485        /* [cover parentID={96C0C517-9F75-4590-A144-7026EA40C0B8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8486        Clear the group and return the last group ID in queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8487        lKernelDataPtr->PopGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8488        lKernelDataPtr->PushGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8489      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8490      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8491      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8492        /* [cover parentID={029D8F0F-9E0C-4680-8F39-AA26AA5F47CB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8493        Remove the 1st group ID from the queue. Next element is now at the head
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8494        of the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8495        lNextGroup = lKernelDataPtr->QueueOfSwGroup[lGroupId].NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8496        lKernelDataPtr->PopGroupId = lNextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8497        lKernelDataPtr->QueueOfSwGroup[lNextGroup].PreviousGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8498                                                             ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8499        lKernelDataPtr->QueueOfSwGroup[lGroupId].NextGroup =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8500                                                             ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8501      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8502    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8503  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8504    return(lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8505  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8506  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8507  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8508  #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8509  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8510  ** Traceability: [cover parentID={6C9435D4-FE05-43fc-BBDE-A73FA61C0313}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8511  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8512  ** Syntax           : static void  Adc_lSchedulerOnStart                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8513  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8514  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8515  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8516  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8517  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8518  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8519  ** Description      :The function marks the new requested group busy. If the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8520  **                   group is SW triggered, it is either immediately          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8521  **                   installed on a request source or just marked busy for    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8522  **                   later conversion. HW triggered groups are always started **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8523  **                   immediately.                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8524  **                   If no request source is currently free, but a SW         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8525  **                   triggered group with lower priority than the new group   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8526  **                   is executing, the lower priority group is temporarily    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8527  **                   stopped.                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8528  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8529  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8530  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8531  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8532  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8533  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8534  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8535  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8536  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8537  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8538  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8539  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8540  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8541  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8542  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8543  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8544  static void Adc_lSchedulerOnStart(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8545                                    const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8546                                    const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8547  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8548    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8549    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8550    uint8 lReqSrc;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8551  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8552    /*Get the base address of the group configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8553    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8554                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8555    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8556    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8557  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8558    /* [cover parentID={49108012-1036-41c5-AD6F-E4E210F90AEC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8559    Set group status to BUSY, as it is either started immediately or pushed
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8560    to the queue now [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8561    Adc_lSetGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8562    /* [cover parentID={909B7A49-E798-4923-9C08-445F6DED7CFA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8563    Clear group result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8564    Adc_lClrGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8565    /* [cover parentID={52EB4A47-ED77-45bb-A014-DA0B36127E17}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8566    Clear result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8567    Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8568    lKernelDataPtr->NumofValidConRes[GroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8569  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8570    /* Set flags for used channels and result registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8571    Adc_lSetRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8572  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8573    /* [cover parentID={80EDB030-3486-4e9a-BDCE-19AD9363B1B4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8574    Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8575    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8576    /* [cover parentID={DE3D8E08-F822-4b1c-85D5-06C8C83C6772}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8577    Is Group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8578    if ((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8579    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8580      /* [cover parentID={F3C1B4F1-7EF4-43c2-A906-683D0AE90420}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8581      Set limit check active status flag before installing group into request
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8582      source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8583      lKernelDataPtr->LimitChkActiveFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8584    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8585    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8586  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8587    /* [cover parentID={4A404036-18BA-47d7-9730-ED8CC172CEA5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8588    Is the group configured for alias? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8589    if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8590    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8591      /* [cover parentID={4CCC4FE2-3A59-49c9-A2A7-1914AB734CA3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8592      Set alias active status flag before installing group into request source
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8593      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8594      lKernelDataPtr->AliasActiveFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8595    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8596  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8597    /* [cover parentID={3CEA4C12-B992-4f52-B681-244E373BEFCB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8598    Read request source to start the group immediately [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8599    lReqSrc = Adc_lGetReqSrcForGrp(KernelId, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8600  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8601    /* [cover parentID={29454C6B-6AF0-448d-855F-C63FAE8CBA6F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8602    Is any RS free [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8603    if(lReqSrc != ADC_INVALID_RS_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8604    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8605      /* [cover parentID={228250F7-043B-40a8-89DD-88A3EBB16032}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8606      Is any group currently running on the RS [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8607      if(lKernelDataPtr->RSData[lReqSrc].ActiveGroupId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8608      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8609        Adc_GroupType lStopGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8610        const Adc_GroupCfgType *lStopGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8611  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8612        /* Get configuration base address of group to be stopped */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8613        lStopGrpId = lKernelDataPtr->RSData[lReqSrc].ActiveGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8614        lStopGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8615                           HwUnitCfgPtr[KernelId]->GrpCfgPtr[lStopGrpId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8616  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8617        /* Disable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8618        lKernelDataPtr->RSData[lReqSrc].IsrNoServiceFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8619  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8620        /* [cover parentID={488E4648-19CB-46e1-9CC4-60AF89DBB88B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8621        Stop the ongoing conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8622        Adc_lStopConvRequest(lStopGrpCfgPtr, KernelId, lReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8623  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8624        /*Assign Invalid Group ID to active group variable*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8625        lKernelDataPtr->RSData[lReqSrc].ActiveGroupId = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8626  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8627        /* [cover parentID={26F83428-60C1-4be9-B9F4-D177DB333D30}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8628        Limit Check is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8629        #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8630        if((uint8)ADC_ONE_U == lStopGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8631        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8632          /* [cover parentID={5DBD00CC-51E6-4e43-9FCE-857A51018F89}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8633          Set active limit check channel ID to INVALID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8634          lKernelDataPtr->RSData[lReqSrc].ActiveLimitChkCh = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8635              ADC_INVALID_CHANNEL_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8636        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8637        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8638  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8639        /* [cover parentID={1126D70D-73CE-4c9e-AF8A-8286AFE20083}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8640        Push group to scheduler queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8641        Adc_lPushToScheduler(KernelId, lStopGrpId, CoreId, (uint8)1U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8642      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8643  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8644      /* Start the group conversion */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8645  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8646      /* Set the active group variable*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8647      lKernelDataPtr->RSData[lReqSrc].ActiveGroupId = GroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8648  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8649      /* [cover parentID={539B39F2-9E04-4bcb-87AD-016A96DBF80E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8650      Limit Check is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8651      #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8652      if((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8653      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8654        /* [cover parentID={8C8A0F88-3349-4f9a-B34E-C2BF0DFF1666}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8655        Set active limit check channel ID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8656        lKernelDataPtr->RSData[lReqSrc].ActiveLimitChkCh = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8657            lGrpCfgPtr->GroupDefinition[0U].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8658      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8659      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8660  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8661      /* Prepare channels and result registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8662      Adc_lPrepareGrpForStart(KernelId, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8663      /* Enable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8664      lKernelDataPtr->RSData[lReqSrc].IsrNoServiceFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8665  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8666      /* [cover parentID={90C86616-0857-4fb6-B463-007CBCCA4CC0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8667      Trigger Source is SW [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8668      if (lGrpCfgPtr->TriggerSource == ADC_TRIGG_SRC_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8669      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8670        /* [cover parentID={F934A372-288E-41a0-86A7-C6458FA02003}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8671        Enable Start Stop Group API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8672        #if(ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8673        /* [cover parentID={63AA1399-4853-4f4f-8E26-DE9AAB2E0FA6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8674        Start conversion of the group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8675        Adc_lStartSwConversion(lGrpCfgPtr, KernelId, lReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8676        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8677      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8678      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8679      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8680        /* [cover parentID={42D76FFC-5704-4aec-B80F-9E4968054173}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8681        HW Trigger API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8682        #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8683        /* [cover parentID={FA7E8BE8-2102-4548-A707-985FBB3CDFC0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8684        Start conversion of the group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8685        Adc_lStartHwConversion(lGrpCfgPtr, KernelId, lReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8686        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8687      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8688    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8689    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8690    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8691      /* Note: DET check prevents this path being executed for HW triggered
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8692               groups. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8693  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8694      /* Group cannot be started immediately, keep it busy for later conversion,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8695      and push group to scheduler queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8696      /* [cover parentID={FDD789A4-1A0D-429e-BB9F-A64BACD8030F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8697      Push group to scheduler queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8698      Adc_lPushToScheduler(KernelId, GroupId, CoreId, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8699    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8700  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8701  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8702  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8703  #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)&&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8704      (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8705  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8706  ** Traceability: [cover parentID={3E8DCCFC-991B-40cd-B9E3-C7952A3BD815}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8707  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8708  ** Syntax           : static void Adc_lScheduleNext                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8709  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8710  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8711  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8712  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8713  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8714  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8715  ** Description      :This function Schedules the pending Group for conversion **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8716  **                   which has highest priority.                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8717  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8718  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8719  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8720  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8721  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8722  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8723  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8724  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8725  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8726  **                    ReqSrc - Request source for which to schedule           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8727  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8728  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8729  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8730  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8731  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8732  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8733  static void Adc_lScheduleNext(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8734                                const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8735                                const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8736  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8737    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8738    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8739    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8740  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8741    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8742    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8743  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8744    /* [cover parentID={23FB90EF-8CAD-4bcc-8865-4C64E4118244}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8745    Read next group to be converted [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8746    lGroupId = Adc_lPopFromScheduler(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8747  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8748    /* [cover parentID={4AD4B8F6-B2B9-4560-ACA7-F8893E53BD56}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8749    Valid Group ID [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8750    if (lGroupId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8751    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8752      /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8753      lGrpCfgPtr =  &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8754                      GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8755  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8756      /* Set the active group variable*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8757      lKernelDataPtr->RSData[ReqSrc].ActiveGroupId = lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8758  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8759      /* [cover parentID={549CCED3-7A27-43b0-B2D1-F85AF8AC8A8D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8760      Limit Check is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8761      #if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8762      if((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8763      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8764        /* [cover parentID={D955DA08-6803-4f66-A1B3-EBBBB4DBBC2A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8765        Set limit check Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8766        lKernelDataPtr->RSData[ReqSrc].ActiveLimitChkCh = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8767            lGrpCfgPtr->GroupDefinition[0U].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8768      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8769      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8770  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8771      /* [cover parentID={754D8F47-2294-42ea-A3DE-ED343119A35A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8772      Prepare channels and result registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8773      Adc_lPrepareGrpForStart(KernelId, lGroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8774      /* Enable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8775      lKernelDataPtr->RSData[ReqSrc].IsrNoServiceFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8776      /* [cover parentID={AE2D36E5-02EE-4035-AEDF-F39EE63400C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8777      Start conversion for group at the queue head  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8778      /* Prepare HW RS queue and trigger the SW conversion */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8779      Adc_lStartSwConversion(lGrpCfgPtr, KernelId, ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8780    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8781  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8782  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8783  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8784  #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8785  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8786  ** Traceability: [cover parentID={1D74134A-C83C-4883-82C4-58649FBB060D}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8787  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8788  ** Syntax           : static void Adc_lSchedulerOnStop                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8789  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8790  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8791  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8792  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8793  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8794  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8795  ** Description      : Group passed to this function is stopped if it is       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8796  **                    currently converting then the next group in the queue   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8797  **                    is started (if any). If the group is not converting,it  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8798  **                    is removed from the queue of pending groups.            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8799  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8800  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8801  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8802  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8803  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8804  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8805  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8806  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8807  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8808  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8809  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8810  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8811  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8812  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8813  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8814  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8815  static void Adc_lSchedulerOnStop(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8816                                   const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8817                                   const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8818  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8819    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8820    Adc_QueueDataType *lQueuePtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8821    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8822    Adc_GroupType lTempPrevGrpId, lTempNextGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8823  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8824    uint8 lGrpReqSrc;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8825  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8826    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8827    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8828    /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8829    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8830                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8831  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8832    /* [cover parentID={4A551680-4ABF-472a-9697-5E632DA1FE32}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8833    Read request source on which group is installed [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8834    lGrpReqSrc = Adc_lGetGrpReqSrc(KernelId, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8835  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8836    /* [cover parentID={3061E726-4F93-40a3-B118-3DEB71D4CF5B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8837    Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8838    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8839    /* [cover parentID={FE0E95AB-407C-489d-B5DD-F6506509E05E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8840    Is Group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8841    if ((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8842    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8843      /* [cover parentID={6982EB8A-00EC-43f1-8225-8B424557E6D3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8844      Reset limit check active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8845      lKernelDataPtr->LimitChkActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8846    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8847    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8848  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8849    /* [cover parentID={2BB04F98-7582-4f97-AB78-83222ED4C39D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8850    Is the group configured for alias? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8851    if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8852    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8853      /* [cover parentID={F13285F8-C7EE-4a2a-88F0-7FFF69DB08D7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8854      Reset alias active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8855      lKernelDataPtr->AliasActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8856    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8857  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8858    /* [cover parentID={071663DB-3625-4ae7-8121-45DE5D7F82F3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8859    Group is currently converting [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8860    if (lGrpReqSrc != ADC_INVALID_RS_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8861    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8862      /* Disable ISR servicing for the request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8863      lKernelDataPtr->RSData[lGrpReqSrc].IsrNoServiceFlag = (uint8)ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8864  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8865      /* [cover parentID={E0B4DA57-90CD-4138-A3ED-8C320FD81A52}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8866      Stop on going conversions [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8867      Adc_lStopConvRequest(lGrpCfgPtr, KernelId, lGrpReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8868  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8869      /* Clear Kernel Data variable */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8870      Adc_lRemoveActiveGroup(lKernelDataPtr, lGrpCfgPtr, lGrpReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8871      Adc_lClrRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8872  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8873      /* [cover parentID={B47AFF5B-6E71-466e-8E82-D09999AC9D15}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8874      Clear Group busy status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8875      Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8876      /* [cover parentID={D46A70A2-C3D6-435f-9EEE-E5C0F90F736F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8877      Clear Group result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8878      Adc_lClrGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8879      /* [cover parentID={88D3C886-4625-4493-8A95-62A0FC84C2AD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8880      Clear result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8881      Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8882      lKernelDataPtr->NumofValidConRes[GroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8883      /* [cover parentID={DF9C77A9-660F-4b00-9C3E-723D28076B47}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8884      Notification is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8885      #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8886      /* [cover parentID={E49E8588-C832-4a63-85AE-D659A296298F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8887      Disable group notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8888      Adc_lClrGrpNotifAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8889      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8890  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8891      /* [cover parentID={8195DE57-8D88-4d30-B818-71016E77A60F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8892      Enable Start Stop Group API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8893      #if(ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8894      /* [cover parentID={4413FCBE-D3D7-4819-A97C-13DDFD407D23}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8895      If more groups are present in the queue,Start the next group in the queue
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8896      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8897      Adc_lScheduleNext(KernelId, CoreId, lGrpReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8898      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8899    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8900    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8901    { /*Group is in the queue of pending groups. Only Link is removed.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8902        No need to stop any conversion or clear SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8903  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8904      /* Get Base address of the Queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8905      lQueuePtr =  &(lKernelDataPtr->QueueOfSwGroup[0U]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8906      lTempPrevGrpId = lQueuePtr[GroupId].PreviousGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8907      lTempNextGrpId = lQueuePtr[GroupId].NextGroup;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8908      if(lTempPrevGrpId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8909      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8910        lQueuePtr[lTempPrevGrpId].NextGroup = lTempNextGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8911      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8912      if(lTempNextGrpId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8913      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8914        lQueuePtr[lTempNextGrpId].PreviousGroup = lTempPrevGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8915      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8916      /* [cover parentID={9149D6A9-9CCF-4271-AEC0-CADBC96DADD2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8917      Remove the group from the queue of pending groups [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8918      lQueuePtr[GroupId].PreviousGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8919      lQueuePtr[GroupId].NextGroup = ADC_INVALID_GROUP_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8920  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8921      if(lKernelDataPtr->PushGroupId == GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8922      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8923        /*If the removed group is last in the queue, update the push group ID*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8924        lKernelDataPtr->PushGroupId = lTempPrevGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8925      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8926      if(lKernelDataPtr->PopGroupId == GroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8927      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8928        /*If the removed group is first in the queue, update the pop group ID*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8929        lKernelDataPtr->PopGroupId = lTempNextGrpId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8930      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8931  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8932      /* [cover parentID={39FBB5FE-1AD4-4551-AEA6-28DBC6FA6707}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8933      Clear Group busy status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8934      Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8935      /* [cover parentID={44103670-97DC-430b-AEC2-B7D55F5080B0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8936      Clear Group result [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8937      Adc_lClrGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8938      /* [cover parentID={94FEF9BC-B68B-4805-9024-B14F3A9F2600}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8939      Clear result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8940      Adc_lClrResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8941      lKernelDataPtr->NumofValidConRes[GroupId] = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8942  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8943      /* [cover parentID={A8A0A0BD-CF19-4404-A0A2-4EA2D46D5095}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8944      Clear flags for used channels and result registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8945      Adc_lClrRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8946  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8947      /* [cover parentID={7EF850E6-C912-49fb-8980-FA05C83DA660}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8948      Notification is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8949      #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8950      /* [cover parentID={AF952EF1-AF84-4cd1-AC0D-4EC58B6A848A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8951      Disable group notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8952      Adc_lClrGrpNotifAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8953      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8954    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8955  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8956  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8957  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8958  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8959  ** Traceability: [cover parentID={7EA698D7-6BF5-4745-BB0E-73B717FC4E38}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8960  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8961  ** Syntax           : static void Adc_lStopConvRequest                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8962  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8963  **                      const Adc_GroupCfgType * const GrpPtr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8964  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8965  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8966  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8967  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8968  ** Description      : This function  stops the on-going Adc group conversion  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8969  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8970  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8971  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8972  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8973  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8974  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8975  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8976  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8977  **                    KernelId  - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8978  **                    ReqSrc - Request Source of the Group                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8979  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8980  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8981  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8982  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8983  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8984  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8985  static void Adc_lStopConvRequest(const Adc_GroupCfgType *const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8986                                   const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8987                                   const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8988  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8989    Ifx_EVADC_G_Q *lEvadcQPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8990    /* MISRA2012_RULE_19_2_JUSTIFICATION: No side effects foreseen by violating
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8991    this MISRA rule. Union usage is required to access SFR data type and implement
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8992    efficiently for clearing of pending service requrest in Interrupt control
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8993    register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8994    volatile Ifx_SRC_SRCR *lVadcGrpSrcPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8995  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8996    /* Read the base address of group specific Queue register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8997    lEvadcQPtr = &MODULE_EVADC.G[KernelId].Q[ReqSrc];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8998  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  8999    /* Disable the GATE signal of the Queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9000    lEvadcQPtr->QMR.B.ENGT = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9001  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9002    /* Flush the RS queue and clear the valid flags  */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9003    lEvadcQPtr->QMR.U = (((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_FLUSH_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9004                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CEV_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9005                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CLRV_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9006  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9007    /* [cover parentID={36E5198D-8F7F-4329-91C6-A7D68C1D35F6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9008    HW Trigger API Enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9009    #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9010    /* [cover parentID={EA6E802B-9C42-4f6d-AA13-FDE7ED627331}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9011    Is the Group HW Trigger [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9012    if(ADC_TRIGG_SRC_HW == GrpPtr->TriggerSource)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9013    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9014      /* [cover parentID={BD628C24-6691-415e-8D30-7C4933CE1488}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9015      Request timer configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9016      if (GrpPtr->GrpReqTmCfg != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9017      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9018        /* [cover parentID={A9B6D9AB-58F5-47bf-8766-933B464CADF4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9019        Reset request timer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9020        lEvadcQPtr->REQTM.U = ADC_REQTM_RESET_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9021      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9022      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9023      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9024        /* [cover parentID={1FF9998C-EB39-4462-89F2-A8CF797B3029}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9025        Reset GTM/ERU Channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9026        Adc_lResetHwTrigger(GrpPtr, (uint8)ADC_RUNTIME);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9027      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9028    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9029    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9030    /* Wait for stop conversion required */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9031    /* [cover parentID={B850A7FC-9500-4084-AF7D-222F9B0A975B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9032    ADC Maximum Channel Conversion Time is greater than ZERO [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9033    #if (ADC_MAX_CH_CONV_TIME > 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9034    /* Wait for the ongoing conversion to stop */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9035    uint32 lWaitCount, lCurrentRS, lBusyFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9036    const Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9037  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9038    /* Get the base address of the Kernel SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9039    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9040  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9041    lWaitCount = (uint32)ADC_MAX_CH_CONV_TIME;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9042  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9043    /* Get the currently converting RS */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9044    lCurrentRS = (uint32)lEvadcGroupPtr->ARBCFG.B.CSRC;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9045    /* Get the Converter Busy flag */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9046    lBusyFlag = (uint32)lEvadcGroupPtr->ARBCFG.B.BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9047  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9048    /*If BUSY flag is 1, CSRC bit indicates the current converting RS ,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9049    If Busy flag is 0, CSRC bit indicates the last converted RS,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9050    If BUSY flag is 1, while CSRC points to RS of the stopped AdcGroup,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9051    then the stopped conversion has not yet completed */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9052    /* [cover parentID={00471AC0-397D-4c8f-B8F4-18674792787E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9053    Till WaitCount Expired or Busy flag is Cleared [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9054    while((lBusyFlag == (uint32)ADC_ONE_U) && (lCurrentRS == ReqSrc) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9055          (lWaitCount > (uint32)0U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9056    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9057      /* [cover parentID={CC1EB2BF-538D-443e-B2B3-A77864362F64}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9058      Decrement the WaitCount & Get the Converter busy flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9059      lWaitCount--;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9060      /* Get the currently converting RS */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9061      lCurrentRS = (uint32)lEvadcGroupPtr->ARBCFG.B.CSRC;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9062      /* Get the Converter Busy flag */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9063      lBusyFlag = (uint32)lEvadcGroupPtr->ARBCFG.B.BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9064    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9065    /* [cover parentID={1AE6114A-0A1A-4185-8A6C-84E3D842313C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9066    Production error Reporting is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9067    #if (ADC_CONV_STOP_TIME_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9068    /* [cover parentID={974BC09F-E4AC-40f5-95A7-2182F1C3D65B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9069    Is WaitCount Expired [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9070    if(lWaitCount != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9071    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9072      /* [cover parentID={FE02B674-750A-49fc-B09D-02EDD47704F8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9073      Report Production error PASS [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9074      Adc_lReportDemError(ADC_E_CONV_STOP_TIME_FAILURE,DEM_EVENT_STATUS_PASSED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9075    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9076    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9077    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9078      /* [cover parentID={93E3CC99-A3E4-4de9-99E2-21EF7864AC87}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9079      Report Production error FAIL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9080      /* Failure of Production error raised, when stop count reaches 0 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9081      Adc_lReportDemError(ADC_E_CONV_STOP_TIME_FAILURE,DEM_EVENT_STATUS_FAILED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9082    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9083    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9084    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9085  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9086    /* Read the base address of group specific Service request control register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9087    lVadcGrpSrcPtr = &(MODULE_SRC.VADC.G[KernelId].SR0);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9088  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9089    /* [cover parentID={97B237ED-8845-4f09-8879-DAB6F41A5FB5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9090    Limit check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9091    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9092    /* [cover parentID={648374CC-53C3-4812-93D0-F8EE3C7571B8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9093    Is group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9094    if(GrpPtr->LimitCheckGroup == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9095    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9096      /* Address of Service request control register for Limit check group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9097      /* MISRA2012_RULE_18_1_JUSTIFICATION: Array based indexing is performed to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9098      access the Interrupt control registers efficiently.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9099      The access is checked to be within the bounds of the SFRs available in
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9100      the HW*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9101      /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is performed to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9102      access the Interrupt control registers efficiently.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9103      The access is checked to be within the valid memory access of the SFRs
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9104      available in the HW*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9105      /* MISRA2012_RULE_1_3_JUSTIFICATION: Pointer arithmetic and Array based 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9106      indexing is performed to access the Interrupt control registers efficiently.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9107      The access is checked to be within the valid memory access and within the 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9108      bounds of the SFRs available in the HW, hence no occurrence of undefined
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9109      behaviour*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9110      /* [cover parentID={68622B54-6894-476e-9812-2426A15CD3FF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9111      Calculate address of Service request control register for Limit check group
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9112      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9113      lVadcGrpSrcPtr = (lVadcGrpSrcPtr + ADC_LIMIT_CHECK_SRN);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9114    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9115    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9116    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9117    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9118      /* Address of Service request control register based on request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9119      /* MISRA2012_RULE_18_1_JUSTIFICATION: Array based indexing is performed to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9120      access the Interrupt control registers efficiently.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9121      The access is checked to be within the bounds of the SFRs available in
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9122      the HW*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9123      /* MISRA2012_RULE_18_4_JUSTIFICATION: Pointer arithmetic is performed to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9124      access the Interrupt control registers efficiently.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9125      The access is checked to be within the valid memory access of the SFRs
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9126      available in the HW*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9127      /* [cover parentID={FEFFC6DA-E285-413e-8CB2-1B9F9C454BB1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9128      Calculate address of Service request control register based on request
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9129      source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9130      lVadcGrpSrcPtr = (lVadcGrpSrcPtr + ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9131    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9132    /* [cover parentID={1D628E43-43B4-455c-8820-C43DED8CE39F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9133    Supervisor mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9134    #if (ADC_RUN_TIME_API_MODE == ADC_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9135    /* [cover parentID={FFC35476-3FE8-41ab-AF67-873B93F71ECC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9136    Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9137    /* [cover parentID={1E0E66D3-797E-48f2-A8A2-ED7C8BF99CBF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9138    Start of critical section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9139    SchM_Enter_Adc_SrcRegAccess();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9140    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9141  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9142    /* Clear Service Request bit to avoid unintended interrupt occurrence */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9143    /* MISRA2012_RULE_18_1_JUSTIFICATION: Array based indexing is performed to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9144    access the Interrupt control registers efficiently.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9145    The access is checked to be within the bounds of the SFRs available in
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9146    the HW*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9147    /* [cover parentID={F651A39F-FD34-44c1-BDAB-9F35B52B8B72}] Clear pending
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9148    service request [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9149    ADC_RUNTIME_OS_MODIFY32(ADC_MODULE_ID, lVadcGrpSrcPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9150                    ADC_CLR_SRC_MASK, ((uint32)ADC_ONE_U<<IFX_SRC_SRCR_CLRR_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9151  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9152    /* [cover parentID={2937CFFA-C568-486f-B839-8F07126C5F5E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9153    Supervisor mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9154    #if (ADC_RUN_TIME_API_MODE == ADC_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9155    /* [cover parentID={D097C7C3-833D-42eb-9D31-0F11B338AD78}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9156    End of critical section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9157    SchM_Exit_Adc_SrcRegAccess();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9158    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9159  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9160    /* Clear CHCTR, RCR and valid flags for the stopped group */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9161    Adc_lClearGroupSfr(GrpPtr, KernelId, ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9162  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9163  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9164  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9165  ** Traceability: [cover parentID={F2553855-F097-41bc-ADA0-9A9EE8487CA9}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9166  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9167  ** Syntax           : static void Adc_lClearGroupSfr                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9168  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9169  **                      const Adc_GroupCfgType * const GrpPtr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9170  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9171  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9172  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9173  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9174  ** Description      : This function clears all the Channel Control Registers, **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9175  **                    Result Control Registers and Queue Control Register for **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9176  ** [/cover]           the group ID.                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9177  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9178  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9179  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9180  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9181  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9182  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9183  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9184  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9185  **                    KernelId  - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9186  **                    ReqSrc - Request Source of the Group                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9187  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9188  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9189  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9190  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9191  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9192  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9193  static void Adc_lClearGroupSfr(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9194                                 const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9195                                 const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9196  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9197    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9198    Ifx_EVADC_G_Q *lEvadcQPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9199    const Adc_GroupDefType *lGrpDefCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9200    Adc_ChannelType lAnChannelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9201    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9202    uint8 lNoOfChannels, lChloopCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9203  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9204    /* Get the base address of the Kernel SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9205    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9206  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9207    /* Get the base address of the RS Queue SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9208    lEvadcQPtr = &MODULE_EVADC.G[KernelId].Q[ReqSrc];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9209  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9210    /* Get the base address of the groups definition */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9211    lGrpDefCfgPtr = GrpPtr->GroupDefinition;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9212  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9213    /* [cover parentID={2EA1C230-3012-4758-A38B-EB583758AB54}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9214     [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9215    #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9216    /* [cover parentID={AD537D9E-A091-4a50-89C1-2C8A9A7DB388}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9217    Is Group configured with Diagnostic channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9218    if(GrpPtr->DiagnosticChGrp == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9219    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9220      /* [cover parentID={DBF090E6-E6D5-438c-A9BD-B49F71832256}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9221      Disable Test function for corresponding Kernel of the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9222      Mcal_SetBitAtomic(&(MODULE_EVADC.GLOB.TE.U), (uint8)KernelId, 1, 0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9223    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9224    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9225  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9226    /* Clear Queue mode register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9227    lEvadcQPtr->QMR.U = (((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_FLUSH_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9228                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CEV_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9229                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CLRV_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9230  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9231    /*Clear Queue control register*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9232    lEvadcQPtr->QCTRL.U = ADC_Q_CTRL_WRITE_PROTECT_MSK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9233  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9234    /* Reset Alias configuration; Alias is set / reset only for groups with
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9235      non-default Alias configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9236    if (ADC_ALIAS_DEFAULT_VALUE != GrpPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9237    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9238      lEvadcGroupPtr->ALIAS.U = ADC_ALIAS_DEFAULT_VALUE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9239    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9240    /* [cover parentID={0C1EC9F7-2C78-4034-BB16-FA35C18EC181}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9241    Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9242    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9243    /* [cover parentID={00E667C5-4692-40dc-851A-090A66063724}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9244    Is Sync channel configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9245    if(GrpPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9246    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9247      /* [cover parentID={B72D04C9-B642-4889-AA86-6DC9C4495C3C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9248      Clears the channel and result events for slave kernels of a synchronization
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9249      group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9250      Adc_lClearSlaveEvents(GrpPtr, KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9251    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9252    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9253  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9254    lChloopCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9255    lNoOfChannels = GrpPtr->NoOfChannels;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9256    /* [cover parentID={E4F3995F-E3A7-42a3-A472-F9E0C4B4A8A5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9257    Till the Last channel of the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9258    do
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9259    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9260      /* Clear all channel control and result control register */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9261      lAnChannelId = lGrpDefCfgPtr[lChloopCount].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9262      lResReg = lGrpDefCfgPtr[lChloopCount].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9263      lEvadcGroupPtr->CHCTR[lAnChannelId].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9264      lEvadcGroupPtr->RCR[lResReg].U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9265      /* [cover parentID={8231F767-9CCB-4a9e-9D64-E983DB3D4D38}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9266      Sync Conversion is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9267      #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9268      if(((uint16)(GrpPtr->SyncChannelMask &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9269                   (uint16)((uint16)ADC_ONE_U << lAnChannelId))) != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9270      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9271        /* [cover parentID={2BEBC113-5176-43f9-97B7-27BD91C367D6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9272        Clears the slave channels of synchronization group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9273        Adc_lClearSyncCh(KernelId, lAnChannelId, lResReg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9274      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9275      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9276      lChloopCount++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9277    } while(lChloopCount < lNoOfChannels);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9278  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9279    /* [cover parentID={4D0B5820-91D3-44b1-AFA2-AA54960BD8C3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9280    Enable Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9281    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9282    /* [cover parentID={0832B66F-012D-43c6-9DDE-AC923B306F08}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9283    Is Group enabled with Limit Check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9284    if(GrpPtr->LimitCheckGroup == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9285    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9286      /* [cover parentID={E31A02A8-90B0-44f2-8236-9A99EE29AFAD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9287      Clear Group bound register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9288      lEvadcGroupPtr->BOUND.U = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9289    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9290    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9291  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9292    /* [cover parentID={0E003331-2934-49e2-A173-CD09E1C87903}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9293     [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9294    #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9295    uint8 lEmuxGrp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9296    lEmuxGrp = (ADC_ONE_U & (GrpPtr->GrpEmuxCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9297    /* [cover parentID={776746F7-11DF-4499-8390-D466EF651936}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9298    Group is configured with the EMUX [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9299    if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9300    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9301      /* [cover parentID={776746F7-11DF-4499-8390-D466EF651936}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9302      Clear the EMUX control and channel selection register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9303      lEvadcGroupPtr->EMUXCTR.U      = (uint32)ADC_ONE_U << \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9304                                                    IFX_EVADC_G_EMUXCTR_EMXWC_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9305      lEvadcGroupPtr->EMUXCS.U       = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9306    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9307    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9308  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9309    /* Clear RS event, Channel event and result event flags */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9310    lEvadcGroupPtr->SEFCLR.U = ((uint32)ADC_ONE_U << ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9311    lEvadcGroupPtr->CEFCLR.U = (uint32)GrpPtr->ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9312    lEvadcGroupPtr->REFCLR.U = (uint32)GrpPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9313    /* Clear valid flags for all result registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9314    lEvadcGroupPtr->VFR.U = (uint32)GrpPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9315  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9316  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9317  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9318  ** Traceability: [cover parentID={4DE88169-095F-42bd-92DB-13BFCFF000E8}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9319  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9320  ** Syntax           : LOCAL_INLINE void Adc_lRemoveActiveGroup                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9321  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9322  **                      Adc_GlobalDataType * const KernelDataPtr              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9323  **                      const Adc_GroupCfgType * const GrpPtr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9324  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9325  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9326  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9327  ** Description      : This Function removes the active group from the Kernel  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9328  **                    Data                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9329  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9330  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9331  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9332  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9333  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9334  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9335  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9336  ** Parameters(in)   : KernelDataPtr  - Pointer to the Kernel specific data    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9337  **                  : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9338  **                  : RegSrc - Request source of the group                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9339  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9340  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9341  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9342  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9343  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9344  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9345  LOCAL_INLINE void Adc_lRemoveActiveGroup(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9346                                       Adc_GlobalDataType *const KernelDataPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9347                                       const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9348                                       const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9349  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9350    /*Assign Invalid Group ID to active group variable*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9351    KernelDataPtr->RSData[ReqSrc].ActiveGroupId = ADC_INVALID_GROUP_ID;
	addsc.a	a15,a12,d15,#2
.L786:
	mov	d15,#255
.L1091:
	st.h	[a15]20,d15
.L382:
	j	.L19
.L18:
	call	SchM_Exit_Adc_KernelData
.L19:
	call	SchM_Enter_Adc_KernelData
.L391:
	mov	d15,#0
	lea	a15,[a12]4

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5139    Mcal_SetBitAtomic(&(KernelDataPtr->GrpStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d15,d8,#(1) 
 ldmst [a15]0,e2
	
.L392:
	lea	a15,[a12]8

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5179    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d15,d8,#(1) 
 ldmst [a15]0,e2
	
.L398:
	lea	a15,[a12]12

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5220    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\       (inlined)
	
	imask e2,d15,d8,#(1) 
 ldmst [a15]0,e2
	
.L401:
	addsc.a	a15,a12,d8,#0
.L1092:
	st.b	[a15]28,d15
.L405:
	lea	a15,[a12]16

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5262    Mcal_SetBitAtomic(&(KernelDataPtr->GrpNotifStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d15,d8,#(1) 
 ldmst [a15]0,e2
	
.L406:
	j	SchM_Exit_Adc_KernelData
.L356:
	
__Adc_StopGroupConversion_function_end:
	.size	Adc_StopGroupConversion,__Adc_StopGroupConversion_function_end-Adc_StopGroupConversion
.L151:
	; End of function
	
	.sdecl	'.text.Adc_ReadGroup.Code.Cpu0',code,cluster('Adc_ReadGroup')
	.sect	'.text.Adc_ReadGroup.Code.Cpu0'
	.align	2
	
	.global	Adc_ReadGroup
; Function Adc_ReadGroup
.L95:
Adc_ReadGroup:	.type	func
	mov	d8,d4
.L789:
	mov.aa	a12,a4
.L790:
	call	Mcal_GetCpuIndex
.L431:
	extr.u	d15,d8,#5,#11
.L432:
	and	d8,d8,#31
.L434:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1097:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1098:
	mul	d0,d2,#12
.L1099:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1100:
	addsc.a	a2,a2,d0,#0
.L1101:
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1102:
	addsc.a	a13,a15,d0,#0
.L436:
	mul	d0,d8,#60
.L1103:
	movh.a	a2,#@his(Adc_ConfigPtr)
	ld.a	a2,[a2]@los(Adc_ConfigPtr)
.L1104:
	addsc.a	a15,a2,d2,#2
	ld.a	a15,[a15]4
.L1105:
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
.L1106:
	ld.a	a15,[a15]8
.L1107:
	addsc.a	a15,a15,d0,#0
.L792:
	ld.bu	d9,[a15]52
.L794:
	ld.bu	d10,[a15]56
.L795:
	call	SchM_Enter_Adc_KernelData
.L439:
	ld.w	d15,[a13]4
.L791:
	extr.u	d1,d15,d8,#1
.L440:
	ld.w	d15,[a13]8
	extr.u	d15,d15,d8,#1
.L444:
	addsc.a	a15,a13,d8,#0
.L793:
	ld.bu	d0,[a15]28
.L797:
	jne	d1,#1,.L20
.L1108:
	jne	d15,#0,.L21
.L1109:
	mov	d15,#1
.L798:
	j	.L22
.L21:
.L20:
	addsc.a	a15,a13,d8,#2
	ld.a	a15,[a15]
.L1110:
	addsc.a	a15,a15,d0,#1
	lea	a15,[a15]-2
.L799:
	mov	d15,#0
.L801:
	j	.L23
.L24:
	addsc.a	a2,a12,d15,#1
.L1111:
	mul	d0,d15,d9
.L1112:
	addsc.a	a4,a15,d0,#1
	ld.hu	d0,[a4]0
.L1113:
	st.h	[a2],d0
.L1114:
	add	d0,d15,#1
	extr.u	d15,d0,#0,#8
.L23:
	jlt.u	d15,d10,.L24
.L450:
	mov	d0,#0
	lea	a15,[a13]8
.L800:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5179    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d0,d8,#(1) 
 ldmst [a15]0,e2
	
.L451:
	mov	d15,#0
.L802:
	lea	a15,[a13]12

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5220    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\       (inlined)
	
	imask e2,d15,d8,#(1) 
 ldmst [a15]0,e2
	
.L454:
	jne	d1,#0,.L25
.L1115:
	addsc.a	a15,a13,d8,#0
.L1116:
	st.b	[a15]28,d15
.L25:
.L22:
	call	SchM_Exit_Adc_KernelData
.L796:
	mov	d2,d15
.L803:
	ret
.L412:
	
__Adc_ReadGroup_function_end:
	.size	Adc_ReadGroup,__Adc_ReadGroup_function_end-Adc_ReadGroup
.L156:
	; End of function
	
	.sdecl	'.text.Adc_EnableGroupNotification.Code.Cpu0',code,cluster('Adc_EnableGroupNotification')
	.sect	'.text.Adc_EnableGroupNotification.Code.Cpu0'
	.align	2
	
	.global	Adc_EnableGroupNotification
; Function Adc_EnableGroupNotification
.L97:
Adc_EnableGroupNotification:	.type	func
	mov	d15,d4
.L804:
	call	Mcal_GetCpuIndex
.L464:
	extr.u	d0,d15,#5,#11
.L465:
	and	d15,#31
.L467:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1121:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1122:
	mul	d1,d2,#12
.L1123:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1124:
	addsc.a	a2,a2,d1,#0
.L1125:
	addsc.a	a2,a2,d0,#0
	ld.bu	d0,[a2]
.L806:
	sha	d0,#5
.L1126:
	addsc.a	a15,a15,d0,#0
.L469:
	mov	d0,#1
	lea	a15,[a15]16
.L807:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5067    Mcal_SetBitAtomic(&(KernelDataPtr->GrpNotifStatus), (uint8)GroupId, \       (inlined)
	
.L805:
	imask e2,d0,d15,#(1) 
 ldmst [a15]0,e2
	
.L473:
	ret
.L457:
	
__Adc_EnableGroupNotification_function_end:
	.size	Adc_EnableGroupNotification,__Adc_EnableGroupNotification_function_end-Adc_EnableGroupNotification
.L161:
	; End of function
	
	.sdecl	'.text.Adc_DisableGroupNotification.Code.Cpu0',code,cluster('Adc_DisableGroupNotification')
	.sect	'.text.Adc_DisableGroupNotification.Code.Cpu0'
	.align	2
	
	.global	Adc_DisableGroupNotification
; Function Adc_DisableGroupNotification
.L99:
Adc_DisableGroupNotification:	.type	func
	mov	d15,d4
.L808:
	call	Mcal_GetCpuIndex
.L486:
	extr.u	d0,d15,#5,#11
.L487:
	and	d15,#31
.L489:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1131:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1132:
	mul	d1,d2,#12
.L1133:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1134:
	addsc.a	a2,a2,d1,#0
.L1135:
	addsc.a	a2,a2,d0,#0
	ld.bu	d0,[a2]
.L810:
	sha	d0,#5
.L1136:
	addsc.a	a15,a15,d0,#0
.L491:
	mov	d0,#0
	lea	a15,[a15]16
.L811:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5262    Mcal_SetBitAtomic(&(KernelDataPtr->GrpNotifStatus), (uint8)GroupId, \       (inlined)
	
.L809:
	imask e2,d0,d15,#(1) 
 ldmst [a15]0,e2
	
.L494:
	ret
.L479:
	
__Adc_DisableGroupNotification_function_end:
	.size	Adc_DisableGroupNotification,__Adc_DisableGroupNotification_function_end-Adc_DisableGroupNotification
.L166:
	; End of function
	
	.sdecl	'.text.Adc_GetGroupStatus.Code.Cpu0',code,cluster('Adc_GetGroupStatus')
	.sect	'.text.Adc_GetGroupStatus.Code.Cpu0'
	.align	2
	
	.global	Adc_GetGroupStatus
; Function Adc_GetGroupStatus
.L101:
Adc_GetGroupStatus:	.type	func
	mov	d15,d4
.L812:
	call	Mcal_GetCpuIndex
.L509:
	extr.u	d0,d15,#5,#11
.L510:
	and	d9,d15,#31
.L512:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1141:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1142:
	mul	d15,d2,#12
.L813:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1143:
	addsc.a	a2,a2,d15,#0
.L1144:
	addsc.a	a2,a2,d0,#0
	ld.bu	d0,[a2]
.L814:
	sha	d0,#5
.L1145:
	addsc.a	a15,a15,d0,#0
.L514:
	call	SchM_Enter_Adc_KernelData
.L518:
	ld.w	d15,[a15]12
	extr.u	d8,d15,d9,#1
.L519:
	ld.w	d15,[a15]8
	extr.u	d10,d15,d9,#1
.L525:
	ld.w	d15,[a15]4
	extr.u	d15,d15,d9,#1
.L528:
	call	SchM_Exit_Adc_KernelData
.L1146:
	jne	d8,#1,.L27
.L1147:
	mov	d2,#3
.L815:
	ret
.L27:
	jne	d10,#1,.L29
.L1148:
	mov	d2,#2
.L816:
	ret
.L29:
	eq	d2,d15,#1
.L817:
	ret
.L497:
	
__Adc_GetGroupStatus_function_end:
	.size	Adc_GetGroupStatus,__Adc_GetGroupStatus_function_end-Adc_GetGroupStatus
.L171:
	; End of function
	
	.sdecl	'.text.Adc_GetStreamLastPointer.Code.Cpu0',code,cluster('Adc_GetStreamLastPointer')
	.sect	'.text.Adc_GetStreamLastPointer.Code.Cpu0'
	.align	2
	
	.global	Adc_GetStreamLastPointer
; Function Adc_GetStreamLastPointer
.L103:
Adc_GetStreamLastPointer:	.type	func
	mov	d8,d4
.L818:
	mov.aa	a12,a4
.L819:
	call	Mcal_GetCpuIndex
.L545:
	extr.u	d15,d8,#5,#11
.L546:
	and	d8,d8,#31
.L548:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1153:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L1154:
	mul	d0,d2,#12
.L1155:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1156:
	addsc.a	a2,a2,d0,#0
.L1157:
	addsc.a	a2,a2,d15,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1158:
	addsc.a	a15,a15,d0,#0
.L550:
	mul	d0,d8,#60
.L1159:
	movh.a	a2,#@his(Adc_ConfigPtr)
	ld.a	a2,[a2]@los(Adc_ConfigPtr)
.L1160:
	addsc.a	a2,a2,d2,#2
	ld.a	a2,[a2]4
.L1161:
	addsc.a	a2,a2,d15,#2
	ld.a	a2,[a2]
.L1162:
	ld.a	a2,[a2]8
.L1163:
	addsc.a	a13,a2,d0,#0
.L822:
	call	SchM_Enter_Adc_KernelData
.L553:
	ld.w	d15,[a15]12
.L820:
	extr.u	d9,d15,d8,#1
.L554:
	ld.w	d15,[a15]8
	extr.u	d0,d15,d8,#1
.L557:
	ld.w	d15,[a15]4
	extr.u	d15,d15,d8,#1
.L560:
	addsc.a	a2,a15,d8,#0
	ld.bu	d10,[a2]28
.L823:
	jne	d15,#1,.L32
.L1164:
	jne	d0,#0,.L33
.L1165:
	call	SchM_Exit_Adc_KernelData
.L1166:
	mov	d10,#0
.L1167:
	mov.a	a15,#0
.L821:
	st.a	[a12],a15
.L1168:
	j	.L34
.L33:
.L32:
	mov	d0,#0
	lea	a2,[a15]8

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5179    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d0,d8,#(1) 
 ldmst [a2]0,e2
	
.L563:
	lea	a2,[a15]12

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5220    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\       (inlined)
	
	imask e2,d0,d8,#(1) 
 ldmst [a2]0,e2
	
.L566:
	jne	d15,#0,.L35
.L1169:
	addsc.a	a2,a15,d8,#0
.L1170:
	st.b	[a2]28,d15
.L35:
	call	SchM_Exit_Adc_KernelData
.L1171:
	addsc.a	a15,a15,d8,#2
.L824:
	ld.a	a15,[a15]
.L1172:
	addsc.a	a15,a15,d10,#1
	lea	a15,[a15]-2
.L1173:
	st.a	[a12],a15
.L1174:
	jne	d9,#1,.L36
.L1175:
	ld.bu	d10,[a13]52
.L36:
.L34:
	mov	d2,d10
.L825:
	ret
.L531:
	
__Adc_GetStreamLastPointer_function_end:
	.size	Adc_GetStreamLastPointer,__Adc_GetStreamLastPointer_function_end-Adc_GetStreamLastPointer
.L176:
	; End of function
	
	.sdecl	'.text.Adc_TriggerStartupCal.Code.Cpu0',code,cluster('Adc_TriggerStartupCal')
	.sect	'.text.Adc_TriggerStartupCal.Code.Cpu0'
	.align	2
	
	.global	Adc_TriggerStartupCal
; Function Adc_TriggerStartupCal
.L105:
Adc_TriggerStartupCal:	.type	func
	mov	d0,#1
	mov	d15,#31
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020080)
	
	imask e2,d0,d15,#(1) 
 ldmst [a15]0,e2
	
.L572:
	mov	d15,#1
	mov	d0,#0
	movh.a	a15,#@his(Adc_StartupCalStatus)
	lea	a15,[a15]@los(Adc_StartupCalStatus)

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5104    Mcal_SetBitAtomic(&Adc_StartupCalStatus, (uint8)0U, 1, \       (inlined)
	
	imask e2,d15,d0,#(1) 
 ldmst [a15]0,e2
	
.L573:
	mov	d2,#0
.L826:
	ret
.L569:
	
__Adc_TriggerStartupCal_function_end:
	.size	Adc_TriggerStartupCal,__Adc_TriggerStartupCal_function_end-Adc_TriggerStartupCal
.L181:
	; End of function
	
	.sdecl	'.text.Adc_GetStartupCalStatus.Code.Cpu0',code,cluster('Adc_GetStartupCalStatus')
	.sect	'.text.Adc_GetStartupCalStatus.Code.Cpu0'
	.align	2
	
	.global	Adc_GetStartupCalStatus
; Function Adc_GetStartupCalStatus
.L107:
Adc_GetStartupCalStatus:	.type	func
	mov	d8,#2
.L827:
	call	Mcal_GetCpuIndex
.L580:
	movh.a	a15,#@his(Adc_StartupCalStatus)
	ld.w	d15,[a15]@los(Adc_StartupCalStatus)
.L581:
	jnz.t	d15:0,.L39
.L1184:
	mov	d8,#0
.L1185:
	j	.L40
.L39:
	mov	d0,#0
.L829:
	movh.a	a2,#@his(Adc_ConfigPtr)
.L1186:
	j	.L41
.L42:
	ld.a	a15,[a2]@los(Adc_ConfigPtr)
.L1187:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]4
.L1188:
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1189:
	jeq	d15,#0,.L43
.L1190:
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1191:
	sh	d15,d0,#10
.L1192:
	addsc.a	a15,a15,d15,#0
.L1193:
	ld.bu	d15,[a15]131
.L1194:
	jz.t	d15:4,.L44
.L1195:
	mov	d8,#1
.L1196:
	j	.L45
.L44:
.L43:
	add	d0,#1
.L41:
	jlt.u	d0,#12,.L42
.L45:
.L40:
	mov	d2,d8
.L828:
	ret
.L575:
	
__Adc_GetStartupCalStatus_function_end:
	.size	Adc_GetStartupCalStatus,__Adc_GetStartupCalStatus_function_end-Adc_GetStartupCalStatus
.L186:
	; End of function
	
	.sdecl	'.text.Adc_RS0EventInterruptHandler.Code.Cpu0',code,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.text.Adc_RS0EventInterruptHandler.Code.Cpu0'
	.align	2
	
	.global	Adc_RS0EventInterruptHandler
; Function Adc_RS0EventInterruptHandler
.L109:
Adc_RS0EventInterruptHandler:	.type	func
	mov	d8,d4
.L831:
	call	Mcal_GetCpuIndex
.L830:
	movh.a	a15,#@his(Adc_ConfigPtr)
	ld.w	d15,[a15]@los(Adc_ConfigPtr)
.L1201:
	jeq	d15,#0,.L47
.L1202:
	ld.a	a15,[a15]@los(Adc_ConfigPtr)
.L1203:
	addsc.a	a15,a15,d2,#2
	ld.w	d15,[a15]4
.L1204:
	jeq	d15,#0,.L48
.L1205:
	jge.u	d8,#12,.L49
.L1206:
	ld.a	a15,[a15]4
.L1207:
	addsc.a	a15,a15,d8,#2
	ld.w	d15,[a15]
.L1208:
	jeq	d15,#0,.L50
.L1209:
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1210:
	sh	d15,d8,#10
.L1211:
	addsc.a	a15,a15,d15,#0
.L1212:
	ld.bu	d0,[a15]392
.L1213:
	jz.t	d0:0,.L51
.L1214:
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1215:
	addsc.a	a15,a15,d15,#0
.L1216:
	mov	d15,#1
.L1217:
	st.w	[a15]408,d15
.L1218:
	mov	d5,#0
.L1219:
	mov	d4,d8
.L832:
	mov	d6,d2
.L833:
	j	Adc_lRSEventHandler
.L51:
.L50:
.L49:
.L48:
.L47:
	ret
.L583:
	
__Adc_RS0EventInterruptHandler_function_end:
	.size	Adc_RS0EventInterruptHandler,__Adc_RS0EventInterruptHandler_function_end-Adc_RS0EventInterruptHandler
.L191:
	; End of function
	
	.sdecl	'.text.Adc_lResetCoreGlobalVars.Code.Cpu0',code,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.text.Adc_lResetCoreGlobalVars.Code.Cpu0'
	.align	2
	
; Function Adc_lResetCoreGlobalVars
.L111:
Adc_lResetCoreGlobalVars:	.type	func
	mov	d0,#0
.L594:
	mov.a	a4,#0
.L1224:
	mov	d1,d0
.L835:
	mov	d2,#255
.L1225:
	mov	d3,#1
.L1226:
	mov	d5,d0
.L595:
	j	.L52
.L53:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1227:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L1228:
	sha	d15,d0,#5
.L1229:
	addsc.a	a15,a15,d15,#0
.L596:
	mov	d15,#0
.L836:
	j	.L54
.L55:
	addsc.a	a2,a15,d15,#2
.L1230:
	st.a	[a2],a4
.L1231:
	addsc.a	a2,a15,d15,#0
.L838:
	st.b	[a2]28,d1
.L839:
	add	d15,#1
.L54:
	jeq	d15,#0,.L55
.L1232:
	mov	d15,#0
.L837:
	j	.L56
.L57:
	addsc.a	a2,a15,d15,#2
.L1233:
	st.h	[a2]20,d2
.L1234:
	st.b	[a2]22,d2
.L1235:
	st.b	[a2]23,d3
.L1236:
	add	d15,#1
.L56:
	jeq	d15,#0,.L57
.L1237:
	lea	a2,[a15]4
.L840:
	st.w	[a2+],d5
.L1238:
	st.w	[a2+],d5
.L1239:
	st.w	[a2+],d5
.L1240:
	st.w	[a2+],d5
.L1241:
	st.h	[a15]24,d5
.L1242:
	st.h	[a15]26,d5
.L597:
	add	d0,#1
.L834:
	extr.u	d0,d0,#0,#8
.L52:
	movh.a	a15,#@his(Adc_kKernelUsedCount)
	lea	a15,[a15]@los(Adc_kKernelUsedCount)
.L1243:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1244:
	jlt.u	d0,d15,.L53
.L1245:
	ret
.L587:
	
__Adc_lResetCoreGlobalVars_function_end:
	.size	Adc_lResetCoreGlobalVars,__Adc_lResetCoreGlobalVars_function_end-Adc_lResetCoreGlobalVars
.L196:
	; End of function
	
	.sdecl	'.text.Adc_lKernelDeInit.Code.Cpu0',code,cluster('Adc_lKernelDeInit')
	.sect	'.text.Adc_lKernelDeInit.Code.Cpu0'
	.align	2
	
; Function Adc_lKernelDeInit
.L113:
Adc_lKernelDeInit:	.type	func
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1250:
	sh	d15,d4,#10
.L1251:
	addsc.a	a15,a15,d15,#0
.L841:
	mov	d0,#0
.L842:
	mov	d1,#3328
.L1252:
	mov.u	d2,#32768
	addih	d2,d2,#32896
.L1253:
	movh	d3,#65472
.L1254:
	j	.L58
.L59:
	sha	d15,d0,#5
.L1255:
	addsc.a	a2,a15,d15,#0
.L1256:
	st.w	[a2]260,d1
.L1257:
	st.w	[a2]256,d2
.L1258:
	st.w	[a2]280,d3
.L1259:
	add	d0,#1
.L58:
	jlt.u	d0,#3,.L59
.L1260:
	mov	d15,#0
.L1261:
	st.w	[a15]128,d15
.L1262:
	dsync
.L1263:
	movh	d15,#32768
.L1264:
	st.w	[a15]16,d15
.L1265:
	mov	d15,#0
.L843:
	st.w	[a15]132,d15
.L1266:
	mov	d0,#4
	addih	d0,d0,#48
.L1267:
	st.w	[a15]136,d0
.L1268:
	st.w	[a15]160,d15
.L1269:
	st.w	[a15]164,d15
.L1270:
	mov	d0,#256
.L1271:
	st.w	[a15]176,d0
.L1272:
	st.w	[a15]184,d15
.L1273:
	st.w	[a15]192,d15
.L1274:
	mov.u	d0,#32768
.L1275:
	st.w	[a15]496,d0
.L1276:
	st.w	[a15]500,d15
.L1277:
	mov	d0,#4
.L1278:
	lt.u	d0,d0,d4
	sha	d0,#3
	add	d0,d0,#8
.L845:
	mov	d1,d15
.L847:
	j	.L60
.L61:
	addsc.a	a2,a15,d15,#2
.L848:
	st.w	[a2]512,d1
.L849:
	add	d15,#1
.L844:
	extr.u	d15,d15,#0,#8
.L60:
	jlt.u	d15,d0,.L61
.L1279:
	mov	d15,#0
.L1280:
	mov	d0,d15
.L846:
	mov	d1,#16
.L1281:
	j	.L62
.L63:
	addsc.a	a2,a15,d15,#2
.L851:
	st.w	[a2]640,d0
.L852:
	add	d15,#1
.L62:
	jlt.u	d15,d1,.L63
.L1282:
	mov.u	d15,#65535
.L850:
	st.w	[a15]504,d15
.L1283:
	mov	d0,#7
.L1284:
	st.w	[a15]408,d0
.L1285:
	st.w	[a15]404,d15
.L1286:
	mov	d0,#0
.L1287:
	st.w	[a15]448,d0
.L1288:
	st.w	[a15]432,d0
.L1289:
	st.w	[a15]436,d0
.L1290:
	st.w	[a15]416,d0
.L1291:
	jlt.u	d4,#5,.L64
.L1292:
	st.w	[a15]400,d15
.L1293:
	st.w	[a15]420,d0
.L1294:
	ret
.L64:
	mov	d15,#255
.L1295:
	st.w	[a15]400,d15
.L1296:
	ret
.L599:
	
__Adc_lKernelDeInit_function_end:
	.size	Adc_lKernelDeInit,__Adc_lKernelDeInit_function_end-Adc_lKernelDeInit
.L201:
	; End of function
	
	.sdecl	'.text.Adc_lPrepareGrpForStart.Code.Cpu0',code,cluster('Adc_lPrepareGrpForStart')
	.sect	'.text.Adc_lPrepareGrpForStart.Code.Cpu0'
	.align	2
	
; Function Adc_lPrepareGrpForStart
.L115:
Adc_lPrepareGrpForStart:	.type	func
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1301:
	sh	d15,d4,#10
.L1302:
	addsc.a	a5,a15,d15,#0
.L853:
	mul	d15,d5,#60
.L1303:
	movh.a	a15,#@his(Adc_ConfigPtr)
	ld.a	a15,[a15]@los(Adc_ConfigPtr)
.L1304:
	addsc.a	a15,a15,d6,#2
	ld.a	a15,[a15]4
.L1305:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L1306:
	ld.a	a2,[a15]8
.L1307:
	addsc.a	a2,a2,d15,#0
.L854:
	ld.a	a4,[a15]4
.L855:
	ld.a	a6,[a2]4
.L856:
	ld.bu	d0,[a2]56
.L857:
	ld.w	d15,[a2]32
.L1308:
	mov	d1,#256
.L1309:
	jeq	d15,d1,.L66
.L1310:
	st.w	[a5]176,d15
.L66:
	mov	d1,#0
.L858:
	mov	d2,d1
.L67:
	addsc.a	a15,a6,d1,#3
.L1311:
	ld.bu	d3,[a15]
.L860:
	ld.bu	d4,[a15]1
.L862:
	ld.bu	d5,[a15]2
.L863:
	mul	d15,d3,#12
	addsc.a	a15,a4,d15,#0
.L1312:
	ld.w	d15,[a15]
.L1313:
	sh	d3,d5,#16
.L861:
	or	d15,d3
.L1314:
	addsc.a	a15,a5,d4,#2
.L1315:
	st.w	[a15]512,d15
.L1316:
	addsc.a	a15,a5,d5,#2
.L864:
	st.w	[a15]640,d2
.L865:
	add	d1,#1
.L859:
	extr.u	d1,d1,#0,#8
.L866:
	jlt.u	d1,d0,.L67
.L1317:
	ret
.L607:
	
__Adc_lPrepareGrpForStart_function_end:
	.size	Adc_lPrepareGrpForStart,__Adc_lPrepareGrpForStart_function_end-Adc_lPrepareGrpForStart
.L206:
	; End of function
	
	.sdecl	'.text.Adc_lStartSwConversion.Code.Cpu0',code,cluster('Adc_lStartSwConversion')
	.sect	'.text.Adc_lStartSwConversion.Code.Cpu0'
	.align	2
	
; Function Adc_lStartSwConversion
.L117:
Adc_lStartSwConversion:	.type	func
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1322:
	sh	d15,d4,#10
.L1323:
	addsc.a	a2,a15,d15,#0
.L868:
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1324:
	addsc.a	a15,a15,d15,#0
.L1325:
	sha	d15,d5,#5
.L1326:
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]256
.L869:
	ld.a	a5,[a4]4
.L870:
	mov	d15,#3328
.L1327:
	st.w	[a15]4,d15
.L1328:
	mov	d15,#1
.L1329:
	sh	d15,d15,d5
.L1330:
	st.w	[a2]408,d15
.L1331:
	ld.hu	d15,[a4]40
.L1332:
	st.w	[a2]400,d15
.L1333:
	ld.hu	d15,[a4]42
.L1334:
	st.w	[a2]404,d15
.L1335:
	ld.hu	d15,[a4]42
.L1336:
	st.w	[a2]504,d15
.L1337:
	ld.bu	d15,[a4]49
.L1338:
	eq	d15,d15,#1
	sh	d0,d15,#5
.L871:
	mov	d1,#64
.L873:
	ld.bu	d2,[a4]56
.L874:
	mov	d3,#0
.L876:
	ld.w	d15,[a4]24
.L1339:
	mov.u	d4,#32768
.L867:
	addih	d4,d4,#32896
.L1340:
	or	d15,d4
.L1341:
	st.w	[a15],d15
.L1342:
	add	d2,#-1
.L875:
	j	.L68
.L69:
	addsc.a	a2,a5,d3,#3
.L1343:
	ld.bu	d15,[a2]1
.L1344:
	or	d4,d0,d15
.L1345:
	ld.w	d15,[a2]4
.L1346:
	or	d4,d15
.L1347:
	st.w	[a15]16,d4
.L1348:
	add	d3,#1
.L877:
	extr.u	d3,d3,#0,#8
.L68:
	jlt	d3,d2,.L69
.L1349:
	or	d0,d1
.L872:
	addsc.a	a2,a5,d3,#3
.L1350:
	ld.bu	d15,[a2]1
.L1351:
	or	d0,d15
.L1352:
	ld.w	d15,[a2]4
.L1353:
	or	d0,d15
.L1354:
	st.w	[a15]16,d0
.L1355:
	mov	d15,#513
.L1356:
	st.w	[a15]4,d15
.L1357:
	ret
.L626:
	
__Adc_lStartSwConversion_function_end:
	.size	Adc_lStartSwConversion,__Adc_lStartSwConversion_function_end-Adc_lStartSwConversion
.L211:
	; End of function
	
	.sdecl	'.text.Adc_lStopConvRequest.Code.Cpu0',code,cluster('Adc_lStopConvRequest')
	.sect	'.text.Adc_lStopConvRequest.Code.Cpu0'
	.align	2
	
; Function Adc_lStopConvRequest
.L119:
Adc_lStopConvRequest:	.type	func
	mov.aa	a12,a4
.L879:
	mov	e8,d5,d4
.L1362:
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L880:
	sh	d15,d8,#10
.L881:
	addsc.a	a15,a15,d15,#0
.L882:
	sha	d15,d9,#5
.L883:
	addsc.a	a15,a15,d15,#0
.L1363:
	ld.bu	d0,[a15]260
.L1364:
	insert	d0,d0,#0,#0,#2
	st.b	[a15]260,d0
.L1365:
	mov	d0,#3328
.L1366:
	st.w	[a15]260,d0
.L1367:
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038670)
.L884:
	sh	d15,d8,#4
.L885:
	addsc.a	a15,a15,d15,#0
.L886:
	addsc.a	a15,a15,d9,#2
.L887:
	call	SchM_Enter_Adc_SrcRegAccess
.L878:
	ld.w	d15,[a15]
	insert	d15,d15,#1,#25,#1
	st.w	[a15],d15
.L1368:
	call	SchM_Exit_Adc_SrcRegAccess
.L1369:
	mov.aa	a4,a12
.L888:
	mov	e4,d9,d8
.L889:
	j	Adc_lClearGroupSfr
.L641:
	
__Adc_lStopConvRequest_function_end:
	.size	Adc_lStopConvRequest,__Adc_lStopConvRequest_function_end-Adc_lStopConvRequest
.L216:
	; End of function
	
	.sdecl	'.text.Adc_lClearGroupSfr.Code.Cpu0',code,cluster('Adc_lClearGroupSfr')
	.sect	'.text.Adc_lClearGroupSfr.Code.Cpu0'
	.align	2
	
; Function Adc_lClearGroupSfr
.L121:
Adc_lClearGroupSfr:	.type	func
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1374:
	sh	d15,d4,#10
.L1375:
	addsc.a	a2,a15,d15,#0
.L890:
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1376:
	addsc.a	a15,a15,d15,#0
.L1377:
	sha	d15,d5,#5
.L1378:
	addsc.a	a15,a15,d15,#0
.L1379:
	ld.a	a5,[a4]4
.L891:
	mov	d15,#3328
.L1380:
	st.w	[a15]260,d15
.L1381:
	mov.u	d15,#32768
	addih	d15,d15,#32896
.L1382:
	st.w	[a15]256,d15
.L1383:
	ld.w	d15,[a4]32
.L1384:
	mov	d0,#256
.L1385:
	jeq	d15,d0,.L70
.L1386:
	st.w	[a2]176,d0
.L70:
	mov	d0,#0
.L892:
	ld.bu	d1,[a4]56
.L894:
	mov	d2,d0
.L71:
	addsc.a	a15,a5,d0,#3
.L1387:
	ld.bu	d15,[a15]1
.L895:
	ld.bu	d3,[a15]2
.L897:
	addsc.a	a15,a2,d15,#2
.L898:
	st.w	[a15]512,d2
.L899:
	addsc.a	a15,a2,d3,#2
.L900:
	st.w	[a15]640,d2
.L901:
	add	d0,#1
.L893:
	extr.u	d0,d0,#0,#8
.L902:
	jlt.u	d0,d1,.L71
.L1388:
	mov	d15,#1
.L896:
	sh	d15,d15,d5
.L1389:
	st.w	[a2]408,d15
.L1390:
	ld.hu	d15,[a4]40
.L1391:
	st.w	[a2]400,d15
.L1392:
	ld.hu	d15,[a4]42
.L1393:
	st.w	[a2]404,d15
.L1394:
	ld.hu	d15,[a4]42
.L1395:
	st.w	[a2]504,d15
.L1396:
	ret
.L651:
	
__Adc_lClearGroupSfr_function_end:
	.size	Adc_lClearGroupSfr,__Adc_lClearGroupSfr_function_end-Adc_lClearGroupSfr
.L221:
	; End of function
	
	.sdecl	'.text.Adc_lRSEventHandler.Code.Cpu0',code,cluster('Adc_lRSEventHandler')
	.sect	'.text.Adc_lRSEventHandler.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9352  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9353    /* [cover parentID={6A252B82-0EB4-4dfa-A027-A7C371A3F835}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9354    Limit Checking is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9355    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9356    /* [cover parentID={689A1CA5-9184-4c9e-AA7D-A93E43914944}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9357    Is Limit Checking enabled for the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9358    if((uint8)ADC_ONE_U == GrpPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9359    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9360      /* [cover parentID={E3B9FCA5-57FF-4eaa-8AA6-4B221CE23EA0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9361      Assign Invalid channel ID to an Active limit check channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9362      KernelDataPtr->RSData[ReqSrc].ActiveLimitChkCh = ADC_INVALID_CHANNEL_ID;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9363    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9364    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9365    UNUSED_PARAMETER(GrpPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9366  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9367  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9368  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9369  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9370  ** Traceability: [cover parentID={F7828BB7-D6BD-48cf-92E1-8752745C7E60}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9371  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9372  ** Syntax           : LOCAL_INLINE void Adc_lResetHwTrigger                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9373  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9374  **                      const Adc_GroupCfgType * const GrpPtr,                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9375  **                      const uint8 Mode                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9376  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9377  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9378  ** Description      : This Function disables the GTM/ERU channel used by the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9379  **                    group.                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9380  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9381  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9382  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9383  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9384  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9385  ** Reentrancy       : Reentrant for different HW channels                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9386  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9387  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9388  **                    Mode  - Indicates the phase in which the fucntion is    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9389  **                            invoked (Runtime or Init - De Init)             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9390  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9391  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9392  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9393  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9394  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9395  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9396  LOCAL_INLINE void Adc_lResetHwTrigger(const Adc_GroupCfgType *const GrpPtr,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9397                                        const uint8 Mode)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9398  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9399    /* [cover parentID={D13D0351-49D5-4ed8-A2D1-D05BF7496A7A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9400    Is ERU Trig Confg not equal to NULL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9401    if(GrpPtr->EruTrigCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9402    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9403      /* [cover parentID={7598C062-B938-435f-B028-06108E550500}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9404      De-initialize ERU channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9405      Adc_lEruChannelDeInit(GrpPtr->EruTrigCfg, Mode);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9406    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9407    /* [cover parentID={C731D272-4590-4cbd-89FF-9DA5FA064F06}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9408    GTM is available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9409    #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9410    /* [cover parentID={9A9BB01D-8A8F-406d-A8D7-5C159A0D4CA5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9411    Is GTM Trig Confg not equal to NULL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9412    else if(GrpPtr->GtmTrigCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9413    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9414      /* [cover parentID={D1BC755E-57B0-448c-BC70-8A2704222C61}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9415      De-initialize GTM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9416      Adc_lGtmChannelDeInit(GrpPtr->GtmTrigCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9417    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9418    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9419    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9420    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9421      /*Do Nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9422    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9423    /* [cover parentID={38414ADA-18D7-4b95-8B2E-22F83B0244A6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9424    Is ERU Gate Signal Confg not equal to NULL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9425    if(GrpPtr->EruGateCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9426    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9427      /* [cover parentID={3837322A-A3C8-4ce0-9840-EC5F1C031701}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9428      De-initialize ERU Gate Signal [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9429      Adc_lEruChannelDeInit(GrpPtr->EruGateCfg, Mode);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9430    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9431    /* [cover parentID={6AE57FA1-5115-4d78-B26E-8D67B721A175}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9432    GTM is available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9433    #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9434    /* [cover parentID={0ED1CB91-5ACA-4887-986D-2CC49CA04F86}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9435    Is GTM Gate Signal Confg not equal to NULL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9436    else if(GrpPtr->GtmGateCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9437    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9438      /* [cover parentID={8C1997F0-4282-4057-BB46-E6CC9551F3E2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9439      De-initialize GTM Gate Signal [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9440      Adc_lGtmChannelDeInit(GrpPtr->GtmGateCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9441    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9442    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9443    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9444    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9445      /*Do Nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9446    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9447  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9448  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9449  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9450  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_INIT_CHECK_API == STD_ON) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9451       (ADC_GTM_AVAILABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9452  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9453  ** Traceability: [cover parentID={CA17F9AE-BE8B-450e-8005-E4709C8597F8}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9454  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9455  ** Syntax           : LOCAL_INLINE uint32 Adc_lCheckGtmSfr                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9456  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9457  **                      const Adc_HwUnitCfgType *const KernelCfgPtr,          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9458  **                      const uint32 CompareFlag                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9459  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9460  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9461  ** Description      : This Function verify the disabled state of GTM Channel  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9462  **                    used by the group.                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9463  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9464  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9465  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9466  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9467  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9468  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9469  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9470  ** Parameters(in)   : KernelCfgPtr - Pointer to the Kernel Config Data        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9471  **                  : CompareFlag - Flag to compare with configured SFRs or   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9472  **                    Variables                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9473  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9474  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9475  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9476  ** Return value     : Compare flag value - all bits as 1 indicates a pass case**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9477  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9478  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9479  LOCAL_INLINE uint32 Adc_lCheckGtmSfr (\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9480               const Adc_HwUnitCfgType *const KernelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9481               const uint32 CompareFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9482  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9483    /* Initialize error value with E_OK */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9484    uint8 lLoopCount, lGroupCount, lErrVal = E_OK;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9485    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9486    uint32 lCompareFlag = CompareFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9487    Mcu_17_Gtm_TomAtomChConfigType lGtmTomAtomChConfig;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9488  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9489    lGrpCfgPtr = KernelCfgPtr->GrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9490    lGroupCount = KernelCfgPtr->NoOfGroups;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9491  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9492    /* [cover parentID={9ADE8ADF-8752-44a6-9035-CF838B1125C1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9493    Till the last available Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9494    for(lLoopCount = (uint8)0U; (lLoopCount < lGroupCount); lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9495    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9496      /* [cover parentID={37B5D45E-B5BA-437f-A3A9-5070649E7364}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9497      Group configured with HW Trigger source and Request Timer not configured
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9498      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9499      if((lGrpCfgPtr[lLoopCount].TriggerSource) == ADC_TRIGG_SRC_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9500      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9501        /* [cover parentID={37B5D45E-B5BA-437f-A3A9-5070649E7364}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9502        Group configured with HW Trigger source and Request Timer not configured
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9503        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9504        if (lGrpCfgPtr[lLoopCount].GrpReqTmCfg == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9505        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9506          /* [cover parentID={738A2752-B2A9-425f-8AF1-DFDA10E9C331}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9507          GTM Trigger Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9508          if(lGrpCfgPtr[lLoopCount].GtmTrigCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9509          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9510            /* Initialize the structure elements to reset state to verify the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9511            reseting of Tom/Atom related SFRs for InitCheck */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9512            /* [cover parentID={40C4EEF1-6228-4003-A961-65430611B749}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9513            Initialize the structure elements of GTM Trigger to reset state
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9514            [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9515            lGtmTomAtomChConfig.TimerType = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9516                                    lGrpCfgPtr[lLoopCount].GtmTrigCfg->TimerType;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9517            lGtmTomAtomChConfig.TimerId = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9518                                      lGrpCfgPtr[lLoopCount].GtmTrigCfg->TimerId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9519            lGtmTomAtomChConfig.TimerChCtrlReg = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9520                                               ADC_TOM_ATOM_CH_CNTRL_REG_RST_VAL;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9521            lGtmTomAtomChConfig.TimerChCN0Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9522            lGtmTomAtomChConfig.TimerChCM0Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9523            lGtmTomAtomChConfig.TimerChCM1Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9524            lGtmTomAtomChConfig.TimerChSR0Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9525            lGtmTomAtomChConfig.TimerChSR1Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9526            lGtmTomAtomChConfig.TimerChIntEnMode = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9527  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9528            /* [cover parentID={AB95E04A-ACF3-4e3b-ADD0-E248791FC883}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9529            GTM timer type is TOM [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9530            if(lGtmTomAtomChConfig.TimerType == MCU_GTM_TIMER_TOM)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9531            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9532              /* MISRA2012_RULE_1_3_JUSTIFICATION: Address of auto variable
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9533              lGtmTomAtomChConfig is used inside Mcu_17_Gtm_TomChInitCheck() to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9534              read the values. The address is not used beyond the context of the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9535              API, hence it is not an issue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9536              /* [cover parentID={16115E88-585F-4db8-9D6D-DD8A497E7819}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9537              Perform Tom Initcheck [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9538              lErrVal = Mcu_17_Gtm_TomChInitCheck(&lGtmTomAtomChConfig);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9539            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9540            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9541            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9542              /* MISRA2012_RULE_1_3_JUSTIFICATION: Address of auto variable
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9543              lGtmTomAtomChConfig is used inside Mcu_17_Gtm_AtomChInitCheck() to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9544              read the values. The address is not used beyond the context of the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9545              API, hence it is not an issue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9546              /* [cover parentID={30F4218A-1958-413e-89B9-B2F56AFBFE1A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9547              Perform ATOM InitCheck [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9548              lErrVal = Mcu_17_Gtm_AtomChInitCheck(&lGtmTomAtomChConfig);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9549            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9550          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9551          /* [cover parentID={29FBD62B-932E-4f2b-85FC-5D49CD1AC4C1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9552          GTM Gate Configured and No error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9553          if((lGrpCfgPtr[lLoopCount].GtmGateCfg != NULL_PTR) && (lErrVal == E_OK))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9554          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9555            /* Initialize the structure elements to reset state to verify the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9556            reseting of Tom/Atom related SFRs for InitCheck */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9557            /* [cover parentID={5B55CEF4-8648-4f9d-A2AA-5BA4FA10AD02}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9558            Initialize the structure elements of GTM Gate to reset state[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9559            lGtmTomAtomChConfig.TimerType = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9560                                    lGrpCfgPtr[lLoopCount].GtmGateCfg->TimerType;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9561            lGtmTomAtomChConfig.TimerId = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9562                                      lGrpCfgPtr[lLoopCount].GtmGateCfg->TimerId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9563            lGtmTomAtomChConfig.TimerChCtrlReg = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9564                                       ADC_TOM_ATOM_CH_CNTRL_REG_RST_VAL;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9565            lGtmTomAtomChConfig.TimerChCN0Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9566            lGtmTomAtomChConfig.TimerChCM0Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9567            lGtmTomAtomChConfig.TimerChCM1Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9568            lGtmTomAtomChConfig.TimerChSR0Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9569            lGtmTomAtomChConfig.TimerChSR1Reg = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9570            lGtmTomAtomChConfig.TimerChIntEnMode = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9571  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9572            /* [cover parentID={C56E64D0-9745-4a8e-86A1-454D35033BF4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9573            GTM timer type is TOM [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9574            if(lGtmTomAtomChConfig.TimerType == MCU_GTM_TIMER_TOM)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9575            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9576              /* MISRA2012_RULE_1_3_JUSTIFICATION: Address of auto variable
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9577              lGtmTomAtomChConfig is used inside Mcu_17_Gtm_TomChInitCheck() to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9578              read the values. The address is not used beyond the context of the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9579              API, hence it is not an issue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9580              /* [cover parentID={1B1A26BC-F66D-47ab-8DB2-59D63246CAA6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9581              Perform Tom Initcheck [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9582              lErrVal = Mcu_17_Gtm_TomChInitCheck(&lGtmTomAtomChConfig);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9583            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9584            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9585            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9586              /* MISRA2012_RULE_1_3_JUSTIFICATION: Address of auto variable
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9587              lGtmTomAtomChConfig is used inside Mcu_17_Gtm_AtomChInitCheck() to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9588              read the values. The address is not used beyond the context of the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9589              API, hence it is not an issue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9590              /* [cover parentID={D0C6959C-2456-46f7-A0F7-259318BA7EF3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9591              Perform GTM Atom InitCheck [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9592              lErrVal = Mcu_17_Gtm_AtomChInitCheck(&lGtmTomAtomChConfig);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9593            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9594          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9595          /* [cover parentID={4444ADA0-3986-49c4-84F7-84C90E59C5DD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9596          Error in GTM Tom or Atom InitCheck [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9597          if(lErrVal != E_OK)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9598          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9599            /* [cover parentID={0A1215B0-AC73-4c43-85C1-CADA48D3E6C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9600            Corrupt the Compare Flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9601            lCompareFlag = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9602            break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9603          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9604        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9605      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9606    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9607    return(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9608  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9609  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9610  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9611  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9612  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9613  ** Traceability: [cover parentID={7C3B0680-4429-4a4b-8042-0232736EE3F0}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9614  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9615  ** Syntax           : LOCAL_INLINE uint32 Adc_lCheckEruSfr                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9616  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9617  **                      const Adc_HwUnitCfgType *const KernelCfgPtr,          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9618  **                      const uint32 CompareFlag                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9619  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9620  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9621  ** Description      : This Function verify the disabled state of ERU          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9622  **                    channel used by the group.                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9623  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9624  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9625  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9626  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9627  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9628  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9629  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9630  ** Parameters(in)   : KernelCfgPtr - Pointer to the Kernel Config Data        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9631  **                  : CompareFlag - Flag to compare with configured SFRs or   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9632  **                    Variables                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9633  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9634  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9635  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9636  ** Return value     : Compare flag value - all bits as 1 indicates a pass case**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9637  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9638  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9639  LOCAL_INLINE uint32 Adc_lCheckEruSfr(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9640               const Adc_HwUnitCfgType *const KernelCfgPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9641               const uint32 CompareFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9642  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9643    /* Initialize error value with E_OK */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9644    uint8 lLoopCount, lGroupCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9645    uint32 lCompareFlag = CompareFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9646    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9647  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9648    lGrpCfgPtr = KernelCfgPtr->GrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9649    lGroupCount = KernelCfgPtr->NoOfGroups;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9650  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9651    /* Loop for all the HW triggered groups and Verify the reset state */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9652    /* [cover parentID={5F22F90A-11DF-4a1b-82F2-125DED02F52A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9653    Till the last available Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9654    for(lLoopCount = (uint8)0U; (lLoopCount < lGroupCount); lLoopCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9655    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9656      /* [cover parentID={3CBD251A-F066-40f2-A335-B0B50E5F9742}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9657      Group configured with HW Trigger source & Request Timer not configured
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9658      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9659      if((lGrpCfgPtr[lLoopCount].TriggerSource) == ADC_TRIGG_SRC_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9660      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9661        /* [cover parentID={3CBD251A-F066-40f2-A335-B0B50E5F9742}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9662        Group configured with HW Trigger source & Request Timer not configured
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9663        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9664        if (lGrpCfgPtr[lLoopCount].GrpReqTmCfg == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9665        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9666          /* [cover parentID={162676E2-570B-4008-835E-20D10930547B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9667          ERU Trigger Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9668          if(lGrpCfgPtr[lLoopCount].EruTrigCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9669          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9670            /* [cover parentID={F36A433B-ADFA-47e1-BF23-650E49CBDA75}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9671            Perform ERU Trigger Channel De-Init Check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9672            lCompareFlag = Adc_lCheckEruChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9673                           lGrpCfgPtr[lLoopCount].EruTrigCfg, lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9674          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9675          /* [cover parentID={66BCF051-25D2-4486-9EC0-F0052F48DD15}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9676          ERU Gate Configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9677          if(lGrpCfgPtr[lLoopCount].EruGateCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9678          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9679            /* [cover parentID={FB264DBF-2A57-4731-8B2E-FE71C69F0B4E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9680            Perform ERU Gate Channel De-Init Check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9681            lCompareFlag = Adc_lCheckEruChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9682                           lGrpCfgPtr[lLoopCount].EruGateCfg, lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9683          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9684        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9685      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9686    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9687    return(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9688  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9689  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9690  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9691  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9692  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9693  ** Traceability: [cover parentID={9D620829-64CB-450d-83DD-A941394ECFC9}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9694  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9695  ** Syntax           : LOCAL_INLINE void Adc_lSetHwTrigger                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9696  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9697  **                      const Adc_GroupCfgType * const GrpPtr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9698  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9699  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9700  ** Description      : This Function Enables the GTM/ERU channel used by the   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9701  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9702  **                    group.                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9703  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9704  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9705  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9706  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9707  ** Reentrancy       : Reentrant for different HW channels                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9708  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9709  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9710  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9711  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9712  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9713  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9714  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9715  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9716  LOCAL_INLINE void Adc_lSetHwTrigger(const Adc_GroupCfgType * const GrpPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9717  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9718    /* [cover parentID={39BD5D8B-00A5-4d15-BBBA-549FF88DA568}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9719    Is ERU trigger signal configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9720    if(GrpPtr->EruTrigCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9721    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9722      /* [cover parentID={DD6AC386-58E9-4311-8E05-266A0928E607}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9723      Configures and Triggers the start of the ERUchannel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9724      Adc_lEruChannelInit(GrpPtr->EruTrigCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9725    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9726    /* [cover parentID={8D44C7D0-4D80-4cfe-9345-C66B12D77305}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9727    GTM is available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9728    #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9729    /* [cover parentID={5C67B1AD-FC0A-415a-BBE7-E2AA13395A76}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9730    Is GTM trigger signal configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9731    else if(GrpPtr->GtmTrigCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9732    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9733      /* [cover parentID={D63EDF02-95D1-4f1f-AA17-94EDEF1D828F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9734      Configures and Triggers the start of the GTM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9735      Adc_lGtmChannelInit(GrpPtr->GtmTrigCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9736    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9737    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9738    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9739    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9740      /*Do Nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9741    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9742  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9743    /* [cover parentID={692487F4-2D65-4402-BAA5-D89C77818673}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9744    Is ERU gate signal configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9745    if(GrpPtr->EruGateCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9746    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9747      /* [cover parentID={0515D6FE-1A69-47ef-BF67-D19231E6AE62}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9748      Configures and Triggers the start of the ERU Gate Signal [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9749      Adc_lEruChannelInit(GrpPtr->EruGateCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9750    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9751    /* [cover parentID={5437467C-9AF0-48fe-B69A-64A37382D5A6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9752    GTM is available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9753    #if (ADC_GTM_AVAILABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9754    /* [cover parentID={0F7242D8-D71D-4155-856D-E0FCAF25CE09}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9755    Is GTM gate signal configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9756    else if(GrpPtr->GtmGateCfg != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9757    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9758      /* [cover parentID={78C3C2A3-2ABE-47d2-89BF-106F657D8447}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9759      Configures and Triggers the start of the GTM Gate Signal [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9760      Adc_lGtmChannelInit(GrpPtr->GtmGateCfg);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9761    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9762    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9763    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9764    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9765      /*Do Nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9766    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9767  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9768  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9769  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9770  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9771  ** Traceability: [cover parentID={14785AA7-E1CB-48f1-8099-159E842D4D31}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9772  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9773  ** Syntax           : LOCAL_INLINE void Adc_lStartHwConversion                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9774  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9775  **                      const Adc_GroupCfgType * const GrpPtr                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9776  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9777  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9778  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9779  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9780  ** Description      : This function programs the Request Source Queue and     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9781  **                    triggers the start of conversion.                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9782  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9783  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9784  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9785  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9786  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9787  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9788  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9789  ** Parameters(in)   : GrpPtr  - Pointer to the Group configuration data       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9790  **                    KernelId  - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9791  **                    ReqSrc  - Request source on which to start the group    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9792  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9793  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9794  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9795  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9796  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9797  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9798  LOCAL_INLINE void Adc_lStartHwConversion(const Adc_GroupCfgType * const GrpPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9799                                           const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9800                                           const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9801  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9802    Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9803    Ifx_EVADC_G_Q *lEvadcQPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9804    const Adc_GroupDefType *lGrpDefCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9805    uint32 lConvMode, lRsIntpt, lWaitForTrigger;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9806    uint8 lNoOfChannels, lChloopCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9807  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9808    /* Get base address of the kernel SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9809    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9810    /* Get base address of the RS SFR */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9811  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9812    lEvadcQPtr = &MODULE_EVADC.G[KernelId].Q[ReqSrc];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9813    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9814    /* Get the group definition configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9815    lGrpDefCfgPtr = GrpPtr->GroupDefinition;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9816    
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9817    /* Flush the RS queue, before channels are queued up for conversion */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9818    lEvadcQPtr->QMR.U = (((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_FLUSH_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9819                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CEV_OFF) | \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9820                         ((uint32)ADC_ONE_U << IFX_EVADC_G_Q_QMR_CLRV_OFF));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9821  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9822    /* Clear RS event, Channel event and result event flags */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9823    lEvadcGroupPtr->SEFCLR.U = ((uint32)ADC_ONE_U << ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9824    lEvadcGroupPtr->CEFCLR.U = (uint32)GrpPtr->ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9825    lEvadcGroupPtr->REFCLR.U = (uint32)GrpPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9826    /* Clear valid flag for all result registers */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9827    lEvadcGroupPtr->VFR.U = (uint32)GrpPtr->ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9828  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9829    /* [cover parentID={1EAA0F64-8A95-46a6-8794-057B79E3F6CF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9830    Priority Implementation is HW Priority [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9831    #if(ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9832    /* [cover parentID={C825CB39-5402-452e-B9DD-496BDA364FD4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9833    Is Group Configured with Diagnostic channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9834    if(GrpPtr->DiagnosticChGrp == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9835    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9836      /* [cover parentID={3E3F0FA1-B8EB-47c9-B3C3-52E7D1147AE6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9837      Enable Test function for corresponding Kernel of the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9838      Mcal_SetBitAtomic(&(MODULE_EVADC.GLOB.TE.U), (uint8)KernelId, 1, ADC_ONE_U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9839    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9840    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9841  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9842    /* [cover parentID={711BD69A-85AF-4860-B0F3-2347AA32BB0C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9843     [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9844    #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9845    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9846    uint8 lEmuxGrp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9847  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9848    /* [cover parentID={2324D378-57CD-4d09-B5D1-1A69024B69C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9849    Group is configured with the EMUX [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9850    lEmuxGrp = (ADC_ONE_U & (GrpPtr->GrpEmuxCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9851    if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9852    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9853      /* [cover parentID={2324D378-57CD-4d09-B5D1-1A69024B69C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9854      Configure the Wait-For-Read mode when emux feature is enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9855      lResReg = lGrpDefCfgPtr[0U].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9856      lEvadcGroupPtr->RCR[lResReg].U |= \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9857                                    ((uint32)ADC_ONE_U<<IFX_EVADC_G_RCR_WFR_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9858    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9859    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9860  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9861    /* [cover parentID={33F297B1-9A54-49c7-A912-9DF8C2F037C5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9862    Sync conversion mode is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9863    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9864    /* [cover parentID={3992B075-8725-46b7-BBED-86C84D8CA273}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9865    Sync Channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9866    if(GrpPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9867    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9868      /* [cover parentID={2B42041A-AB54-4d15-827A-CE082385093A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9869      Clear slave events [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9870      Adc_lClearSlaveEvents(GrpPtr, KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9871    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9872    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9873  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9874    /* [cover parentID={7D79E7C1-080A-4e88-9275-B50613068874}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9875    Enable Refill mode for Hardware conversions [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9876    lConvMode = (uint32)ADC_ONE_U << IFX_EVADC_G_Q_QINR_RF_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9877  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9878    /* [cover parentID={BEF0F4E5-067C-47de-BAF6-5579E90401A3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9879    Limit Checking is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9880    #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9881    /* [cover parentID={56629BE2-8A40-49a3-A833-5AE8E5905175}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9882    Is Group enabled with limit check [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9883    if(GrpPtr->LimitCheckGroup == (uint8)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9884    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9885      /* [cover parentID={D9CFE81F-6BCF-464d-B68C-97920BBB6B10}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9886      Disable the Request Source interrupt [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9887      lRsIntpt = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9888    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9889    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9890    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9891    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9892      /* [cover parentID={4FF84DCD-75EB-45eb-AE85-2317365185F5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9893      Enable the Request Source interrupt  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9894      /* If group is not LIMIT CHECKING, enable the RS interrupt */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9895      lRsIntpt = (uint32)ADC_ONE_U << IFX_EVADC_G_Q_QINR_ENSI_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9896    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9897  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9898    lNoOfChannels = GrpPtr->NoOfChannels;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9899    lChloopCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9900  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9901    /* Update QCTRL from configuration directly */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9902    lEvadcQPtr->QCTRL.U = (uint32)\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9903                (GrpPtr->GroupQCtrlCfg | ADC_Q_CTRL_WRITE_PROTECT_MSK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9904  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9905    /* Enable wait for external trigger for the 1st entry in the queue */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9906    /* [cover parentID={D5A2F0A5-9C4D-4745-8BBA-883DB126A386}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9907    1st Entry in the queue shall wait for a Hardware trigger event [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9908    lWaitForTrigger = (uint32)ADC_ONE_U << IFX_EVADC_G_Q_QINR_EXTR_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9909  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9910    /* [cover parentID={F3600562-8F7C-4c4c-9E70-7ED4FBAF3FBA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9911    Till the all channels except last one [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9912    while(lChloopCount < (lNoOfChannels - (uint8)1U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9913    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9914      /* [cover parentID={C160A45C-1F09-4360-A20F-3BC2EA505C46},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9915      {B9568FC8-DC93-4299-A713-C3BA9A6E7A0D}] Analog channels are pushed to RS 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9916      queue with refill mode and Diagnostics feature information [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9917      /* 1st channel is programmed to wait for a HW trigger event*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9918      lEvadcQPtr->QINR.U =\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9919          (lConvMode | lWaitForTrigger |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9920          (uint32)(lGrpDefCfgPtr[lChloopCount].AnalogChannelNo) |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9921          (uint32)(lGrpDefCfgPtr[lChloopCount].AnChDiagnosticsCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9922      /* Reset wait for trigger, for subsequent queue entries */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9923      lWaitForTrigger = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9924      lChloopCount++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9925    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9926  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9927    /* If there is only one channel in the group
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9928       Wait for HW trigger event is enabled here */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9929    /* [cover parentID={D86B5A7D-C4EE-465b-B91B-9E925BDD6A0C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9930    Last Analog channel is pushed to RS queue with refill mode and and Diagnostics
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9931    feature information and RS interrupt enabled [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9932    lEvadcQPtr->QINR.U =(lConvMode | lWaitForTrigger | lRsIntpt  |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9933                        (uint32)(lGrpDefCfgPtr[lChloopCount].AnalogChannelNo) |\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9934                        (uint32)(lGrpDefCfgPtr[lChloopCount].AnChDiagnosticsCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9935  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9936    /* [cover parentID={79777411-BFBB-4be4-8A29-CABBBDB2E50C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9937    Set Up the HW trigger peripheral [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9938  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9939    /* [cover parentID={F71436E6-392E-4db3-A3E1-815EFC754285}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9940    Request timer configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9941    if (GrpPtr->GrpReqTmCfg != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9942    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9943      /* [cover parentID={DA63712F-FF60-4385-BA0C-A6154E0878AE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9944      Update request timer register with configured value [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9945      lEvadcQPtr->REQTM.U = GrpPtr->GrpReqTmCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9946    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9947    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9948    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9949      /* [cover parentID={79777411-BFBB-4be4-8A29-CABBBDB2E50C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9950      Set Up the HW trigger peripheral [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9951      Adc_lSetHwTrigger(GrpPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9952    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9953  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9954    /* [cover parentID={1673201D-EA4B-460d-871E-0CFA65D860A9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9955    Priority Implementation is HW-SW Priority [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9956    #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9957    /* [cover parentID={0B0DFCBC-32FA-43d6-A824-D5CEC9DF88A5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9958    Adjust RS priority [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9959    Adc_lAdjustRsPriorities(KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9960    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9961  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9962    /* [cover parentID={57676D1F-48FF-43c5-BA14-FD7AF1F1FE2E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9963    Program the QMR register from configuration, Wait for trigger event now to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9964    start conversions [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9965    lEvadcQPtr->QMR.U = GrpPtr->GroupQModeCfg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9966    /* [cover parentID={F1F45E7F-733B-4be1-AA9B-72FA1C19EB17}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9967    Request timer configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9968    if (GrpPtr->GrpReqTmCfg != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9969    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9970      /* [cover parentID={B454F93C-9837-4884-83DA-39BB8509FB3B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9971      Start the request timer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9972      lEvadcQPtr->REQTM.B.REQTS = 1U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9973    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9974  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9975  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9976  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9977  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_GTM_AVAILABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9978  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9979  ** Traceability: [cover parentID={EE0AC5ED-FEAC-4559-9D9A-0548399BC41A}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9980  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9981  ** Syntax           : LOCAL_INLINE void Adc_lGtmChannelInit                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9982  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9983  **                      const Mcu_17_Gtm_TomAtomChConfigType *                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9984  **                      const GtmChannelCfgPtr                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9985  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9986  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9987  ** Description      : This function configures and triggers the start of the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9988  **                    GTM channel.                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9989  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9990  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9991  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9992  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9993  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9994  ** Reentrancy       : Reentrant for different GTM channel                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9995  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9996  ** Parameters(in)   : GtmChannelCfgPtr  - Pointer to the GTM channel          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9997  **                    configuration structure.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9998  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  9999  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10000  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10001  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10002  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10003  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10004  LOCAL_INLINE void Adc_lGtmChannelInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10005                  const Mcu_17_Gtm_TomAtomChConfigType * const GtmChannelCfgPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10006  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10007    uint8 lGtmModuleNo, lGtmChNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10008  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10009    /* Retrieve the TOM module  number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10010    lGtmModuleNo = (uint8)((GtmChannelCfgPtr->TimerId & GTM_MODULE_NO_MASK) >> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10011                           GTM_MODULE_NO_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10012  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10013    /* Retrieve the TOM module channel number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10014    lGtmChNo = (uint8)((GtmChannelCfgPtr->TimerId & GTM_CHANNEL_NO_MASK) >> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10015                       GTM_CHANNEL_NO_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10016  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10017    /* [cover parentID={98127654-3C59-4ee1-8CE8-492B69C690DB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10018    Is GTM channel configured Timer type is TOM [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10019    if(GtmChannelCfgPtr->TimerType == MCU_GTM_TIMER_TOM)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10020    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10021      /* [cover parentID={A9A6D91C-9CCB-4c06-8C86-B0D208723CA7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10022      Initialize the TOM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10023      Mcu_17_Gtm_TomChannelInit(GtmChannelCfgPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10024      /* [cover parentID={E2D95263-218A-4a71-8388-7912D7D99B17}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10025      Shadow Transfer trigger for TOM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10026      Mcu_17_Gtm_TomChannelShadowTransfer(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10027      /* [cover parentID={895AB5D8-CB72-436c-943B-59ED7A87FFDD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10028      Enable the channel & Output [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10029      Mcu_17_Gtm_TomChannelEnable(lGtmModuleNo, lGtmChNo, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10030                                  MCU_GTM_TIMER_OUT_ENABLE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10031    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10032    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10033    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10034      /* [cover parentID={3770463C-5092-46cf-A504-FE160EF85082}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10035      Initialize the ATOM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10036      Mcu_17_Gtm_AtomChannelInit(GtmChannelCfgPtr);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10037      /* [cover parentID={8BAE04F7-5A98-422a-BF50-4D3033176FBF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10038      Shadow Transfer trigger for ATOM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10039      Mcu_17_Gtm_AtomChannelShadowTransfer(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10040      /* [cover parentID={C9437F1E-4F08-4dde-B50C-B0B29A170830}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10041      Enable the channel & Output [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10042      Mcu_17_Gtm_AtomChannelEnable(lGtmModuleNo, lGtmChNo, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10043                                   MCU_GTM_TIMER_OUT_ENABLE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10044    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10045  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10046  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10047  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10048  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_GTM_AVAILABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10049  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10050  ** Traceability: [cover parentID={659720C3-53B5-4738-9DDA-BBB3CF0BC4D8}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10051  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10052  ** Syntax           : LOCAL_INLINE void Adc_lGtmChannelDeInit                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10053  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10054  **                       const Mcu_17_Gtm_TomAtomChConfigType *               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10055  **                       const GtmChannelCfgPtr **                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10056  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10057  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10058  ** Description      : This function stops and de-initializes a GTM channel.   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10059  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10060  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10061  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10062  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10063  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10064  ** Reentrancy       : Reentrant for different GTM channel                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10065  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10066  ** Parameters(in)   : GtmChannelCfgPtr  - Pointer to the GTM channel          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10067  **                    configuration structure.                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10068  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10069  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10070  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10071  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10072  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10073  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10074  LOCAL_INLINE void Adc_lGtmChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10075                  const Mcu_17_Gtm_TomAtomChConfigType * const GtmChannelCfgPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10076  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10077    uint8 lGtmModuleNo, lGtmChNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10078  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10079    /* Retrieve the TOM module  number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10080    lGtmModuleNo = (uint8)((GtmChannelCfgPtr->TimerId & GTM_MODULE_NO_MASK) >> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10081                           GTM_MODULE_NO_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10082  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10083    /* Retrieve the TOM module channel number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10084    lGtmChNo = (uint8)((GtmChannelCfgPtr->TimerId & GTM_CHANNEL_NO_MASK) >> \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10085                       GTM_CHANNEL_NO_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10086  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10087    /* [cover parentID={89F8EBA8-F96B-4f2d-9142-4A1072EB6167}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10088    Is GTM channel configured Timer type is TOM [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10089    if(GtmChannelCfgPtr->TimerType == MCU_GTM_TIMER_TOM)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10090    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10091      /* [cover parentID={45B48AC5-D065-4073-9CCB-EE19BE7DAD90}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10092      Disable the channel & Output [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10093      Mcu_17_Gtm_TomChannelDisable(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10094      /* [cover parentID={E7BE7BCC-BB79-4401-9B1C-370E96E7AADF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10095      De-initialize the TOM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10096      Mcu_17_Gtm_TomChannelDeInit(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10097      /* [cover parentID={F1755792-0BA3-40cd-AD61-3D741A2C503E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10098      Shadow Transfer trigger for TOM Channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10099      Mcu_17_Gtm_TomChannelShadowTransfer(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10100    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10101    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10102    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10103      /* [cover parentID={4836A67E-8C29-4453-9FBA-FD8C3FA821F1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10104      Disable the channel & Output [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10105      Mcu_17_Gtm_AtomChannelDisable(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10106      /* [cover parentID={A6D0AC59-4450-46f4-9E8C-04041424E867}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10107      De-initialize the ATOM channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10108      Mcu_17_Gtm_AtomChannelDeInit(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10109      /* [cover parentID={6F64F8A5-C34B-419d-8A6B-3B9E3CFEE0E7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10110      Shadow Transfer trigger for ATOM Channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10111      Mcu_17_Gtm_AtomChannelShadowTransfer(lGtmModuleNo, lGtmChNo);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10112    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10113  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10114  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10115  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10116  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10117  /******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10118  ** Traceability: [cover parentID={8914AF2D-3897-4806-A8BB-6DF1760BD4F8}]     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10119  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10120  ** Syntax           : LOCAL_INLINE void Adc_lEruChannelInit                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10121  **                    (                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10122  **                      const Adc_EruChannelCfgType * const EruChannelCfgPtr **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10123  **                    )                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10124  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10125  ** Description      : This function configures and triggers the start of the **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10126  **                    ERU channel.                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10127  ** [/cover]                                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10128  ** Service ID       : NA                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10129  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10130  ** Sync/Async       : Synchronous                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10131  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10132  ** Reentrancy       : Reentrant for different ERU Channels                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10133  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10134  ** Parameters(in)   : EruChannelCfgPtr  - Pointer to the ERU channel         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10135  **                    configuration structure.                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10136  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10137  ** Parameters (out) : None                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10138  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10139  ** Return value     : None                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10140  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10141  ******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10142  LOCAL_INLINE void Adc_lEruChannelInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10143                const Adc_EruChannelCfgType * const EruChannelCfgPtr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10144  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10145    uint32 lEicrIndex, lIgcrIndex;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10146    uint8 lEicrPos, lIgcrPos;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10147  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10148    /* Each EICR register consists of 2 channels, hence index is div 2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10149    lEicrIndex = (((uint32)(EruChannelCfgPtr->ErsChannel) >> (uint32)ADC_ONE_U) &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10150                  (uint32)ADC_ERU_EICR_REG_SEL_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10151    /* Odd Channels are at bit position is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10152      and for even channels bit position is 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10153    lEicrPos = (uint8)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10154    ((uint32)(EruChannelCfgPtr->ErsChannel) & (uint32)ADC_ONE_U)<<\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10155                                           (uint32)ADC_ERU_CH_CFG_BIT_POS_SHIFT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10156  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10157    /* Each IGCR register consists of 2 channels, hence index is div 2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10158    lIgcrIndex = (((uint32)(EruChannelCfgPtr->OguChannel)>>(uint32)ADC_ONE_U) &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10159                                            (uint32)ADC_ERU_IGCR_REG_SEL_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10160    /* Odd Channels are at bit position is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10161      and for even channels bit position is 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10162    lIgcrPos = (uint8)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10163    ((uint32)(EruChannelCfgPtr->OguChannel) & (uint32)ADC_ONE_U)<<\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10164                                           (uint32)ADC_ERU_CH_CFG_BIT_POS_SHIFT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10165  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10166    /* [cover parentID={838833ED-99DB-433b-AF6F-03F1B9621465}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10167    Program External input channel register  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10168    ADC_RUNTIME_WRITE_SAFETY_ENDINIT_PROTREGMASK(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10169                             (&MODULE_SCU.EICR[lEicrIndex]),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10170                             ((uint32)EruChannelCfgPtr->EruEicrCfg<<lEicrPos),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10171                             (ADC_ERU_WR_MASK<<lEicrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10172  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10173    /* [cover parentID={4BDE1B61-40C6-452d-B747-A8848308252C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10174    Program Interrupt gating control register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10175    ADC_RUNTIME_WRITE_SAFETY_ENDINIT_PROTREGMASK(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10176                             (&MODULE_SCU.IGCR[lIgcrIndex]),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10177                             ((uint32)EruChannelCfgPtr->EruIgcrCfg<<lIgcrPos),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10178                             (ADC_ERU_WR_MASK<<lIgcrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10179  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10180  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10181  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10182  #if (ADC_HW_TRIGGER_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10183  /******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10184  ** Traceability: [cover parentID={EDB26D17-38BB-4bd5-B8E3-45D73A68E4AB}]     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10185  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10186  ** Syntax           : LOCAL_INLINE void Adc_lEruChannelDeInit                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10187  **                    (                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10188  **                      const Adc_EruChannelCfgType * const EruChannelCfgPtr,**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10189  **                      const uint8 Mode                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10190  **                    )                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10191  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10192  ** Description      : This function de-initializes ERS and OGU pointed by    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10193  **                    EruChannelCfgPtr                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10194  ** [/cover]                                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10195  ** Service ID       : NA                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10196  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10197  ** Sync/Async       : Synchronous                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10198  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10199  ** Reentrancy       : Reentrant for different ERU Channels                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10200  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10201  ** Parameters(in)   : EruChannelCfgPtr  - Pointer to the ERU channel         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10202  **                    configuration structure.                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10203  **                    Mode  - Indicates the phase in which the fucntion is   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10204  **                            invoked (Runtime or Init - De Init)            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10205  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10206  ** Parameters (out) : None                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10207  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10208  ** Return value     : None                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10209  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10210  ******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10211  LOCAL_INLINE void Adc_lEruChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10212                 const Adc_EruChannelCfgType * const EruChannelCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10213                 const uint8 Mode)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10214  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10215    uint32 lEicrIndex, lIgcrIndex;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10216    uint8 lEicrPos, lIgcrPos;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10217  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10218    /* Each EICR register consists of 2 channels, hence index is div 2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10219    lEicrIndex = (((uint32)(EruChannelCfgPtr->ErsChannel) >> (uint32)ADC_ONE_U) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10220                  & (uint32)ADC_ERU_EICR_REG_SEL_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10221    /* Odd Channels are at bit position is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10222      and for even channels bit position is 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10223    lEicrPos = (uint8)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10224    ((uint32)(EruChannelCfgPtr->ErsChannel) & (uint32)ADC_ONE_U)<<\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10225                                           (uint32)ADC_ERU_CH_CFG_BIT_POS_SHIFT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10226  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10227    /* Each IGCR register consists of 2 channels, hence index is div 2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10228    lIgcrIndex = (((uint32)(EruChannelCfgPtr->OguChannel)>>(uint32)ADC_ONE_U) &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10229                                            (uint32)ADC_ERU_IGCR_REG_SEL_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10230    /* Odd Channels are at bit position is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10231      and for even channels bit position is 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10232    lIgcrPos = (uint8)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10233    ((uint32)(EruChannelCfgPtr->OguChannel) & (uint32)ADC_ONE_U)<<\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10234                                           (uint32)ADC_ERU_CH_CFG_BIT_POS_SHIFT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10235    /* [cover parentID={CC4F6ED5-B3A2-4c02-B1E0-78E42C32B47C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10236    Mode is equal to ADC_INIT_DEINIT [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10237    if(Mode == (uint8)ADC_INIT_DEINIT)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10238    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10239      /* [cover parentID={4CBB4289-C56A-42a8-ABB1-18056B848C2C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10240      InitDeInit API Mode:Reset External input channel register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10241      ADC_INIT_DEINIT_WRITE_SAFETY_ENDINIT_PROTREGMASK(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10242                              (&MODULE_SCU.EICR[lEicrIndex]),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10243                              ((uint32)0U),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10244                              (ADC_ERU_WR_MASK<<lEicrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10245  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10246      /* [cover parentID={A79D760A-C7E3-424f-A0C9-5567988890DA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10247      InitDeInit API Mode:Reset Interrupt gating control register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10248      ADC_INIT_DEINIT_WRITE_SAFETY_ENDINIT_PROTREGMASK(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10249                               (&MODULE_SCU.IGCR[lIgcrIndex]),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10250                               ((uint32)0U),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10251                               (ADC_ERU_WR_MASK<<lIgcrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10252    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10253    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10254    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10255      /* [cover parentID={821DE7A9-2A7D-4e8b-AB81-A122F277D7F4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10256      RunTime API Mode:Reset External input channel register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10257      ADC_RUNTIME_WRITE_SAFETY_ENDINIT_PROTREGMASK(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10258                               (&MODULE_SCU.EICR[lEicrIndex]),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10259                               ((uint32)0U),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10260                               (ADC_ERU_WR_MASK<<lEicrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10261  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10262      /* [cover parentID={3B832A9D-807F-4929-95CA-292BB667EDD0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10263      RunTime API Mode: Reset Interrupt gating control register [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10264      ADC_RUNTIME_WRITE_SAFETY_ENDINIT_PROTREGMASK(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10265                               (&MODULE_SCU.IGCR[lIgcrIndex]),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10266                               ((uint32)0U),\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10267                               (ADC_ERU_WR_MASK<<lIgcrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10268    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10269  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10270  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10271  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10272  #if ((ADC_HW_TRIGGER_API == STD_ON) && (ADC_INIT_CHECK_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10273  /******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10274  ** Traceability: [cover parentID={B603D794-9973-4c88-9760-83B1AA9BE83D}]     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10275  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10276  ** Syntax           : LOCAL_INLINE uint32 Adc_lCheckEruChannelDeInit         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10277  **                    (                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10278  **                      const Adc_EruChannelCfgType * const EruChannelCfgPtr,**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10279  **                      const uint32 CompareFlag                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10280  **                    )                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10281  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10282  ** Description      : This function verifies the de-initialization state of  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10283  **                    ERS and OGU pointed by EruChannelCfgPtr                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10284  ** [/cover]                                                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10285  ** Service ID       : NA                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10286  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10287  ** Sync/Async       : Synchronous                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10288  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10289  ** Reentrancy       : Reentrant                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10290  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10291  ** Parameters(in)   : EruChannelCfgPtr  - Pointer to the ERU channel         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10292  **                    configuration structure.                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10293  **                    CompareFlag - Flag to compare with configured SFRs or  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10294  **                    Variables                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10295  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10296  ** Parameters (out) : None                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10297  **                                                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10298  ** Return value     : Compare flag value - all bits as 1 indicates a pass    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10299  **                    case                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10300  ******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10301  LOCAL_INLINE uint32 Adc_lCheckEruChannelDeInit(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10302   const Adc_EruChannelCfgType * const EruChannelCfgPtr, const uint32 CompareFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10303  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10304    uint32 lEicrIndex, lIgcrIndex, lSfrVal, lCfgVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10305    uint32 lCompareFlag = CompareFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10306    uint8 lEicrPos, lIgcrPos;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10307  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10308    /* Each EICR register consists of 2 channels, hence index is div 2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10309    lEicrIndex = (((uint32)(EruChannelCfgPtr->ErsChannel)>>(uint32)ADC_ONE_U) &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10310                                             (uint32)ADC_ERU_EICR_REG_SEL_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10311  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10312    /* Odd Channels are at bit position is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10313    and for even channels bit position is 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10314    lEicrPos = (uint8)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10315    ((uint32)(EruChannelCfgPtr->ErsChannel) & (uint32)ADC_ONE_U)<<\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10316                                           (uint32)ADC_ERU_CH_CFG_BIT_POS_SHIFT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10317  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10318    /* Each IGCR register consists of 2 channels, hence index is div 2 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10319    lIgcrIndex = (((uint32)(EruChannelCfgPtr->OguChannel)>>(uint32)ADC_ONE_U) &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10320                                            (uint32)ADC_ERU_IGCR_REG_SEL_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10321  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10322    /* Odd Channels are at bit position is 16,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10323    and for even channels bit position is 0*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10324    lIgcrPos = (uint8)(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10325    ((uint32)(EruChannelCfgPtr->OguChannel) & (uint32)ADC_ONE_U)<<\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10326                                           (uint32)ADC_ERU_CH_CFG_BIT_POS_SHIFT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10327  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10328    /* [cover parentID={97615EFD-BFA7-434a-A793-0B27EAD88183}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10329    Compare values of EICR register with configured value and update the return
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10330    value [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10331    lSfrVal = ((MODULE_SCU.EICR[lEicrIndex].U) & (ADC_ERU_WR_MASK << lEicrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10332    lCfgVal = ((uint32)0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10333    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10334  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10335    /* [cover parentID={05759C18-3D7B-4fab-9C7B-200DF8CCF675}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10336    Compare values of IGCR register with configured value and update the return
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10337    value [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10338    lSfrVal = ((MODULE_SCU.IGCR[lIgcrIndex].U) & (ADC_ERU_WR_MASK << lIgcrPos));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10339    lCfgVal = ((uint32)0U);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10340    lCompareFlag &= ~(lSfrVal ^ lCfgVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10341  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10342    return(lCompareFlag);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10343  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10344  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10345  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10346  /*CYCLOMATIC_Adc_lRSEventHandler_JUSTIFICATION: This function updates the
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10347  necessary result buffers and schedules the next group for different result
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10348  handling modes of ADC (Interrupt, DMA) for EMUX as well as normal ADC channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10349  groups based on the enable of pre-compile macros and provides notification, if
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10350  enabled. The different if conditions in different modes cause the complexity to
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10351  increase, but actually during run-time out of all the if conditions many will
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10352  be pre-compile time removed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10353  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10354  ** Traceability: [cover parentID={EC21FA6B-C11C-461d-BB9E-93D22A72DA99}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10355  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10356  ** Syntax           : static void Adc_lRSEventHandler                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10357  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10358  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10359  **                      const uint8 RequestSrc                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10360  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10361  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10362  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10363  ** Description      : This function updates the necessary result buffers and  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10364  **                    schedules the next group (if required) for conversion.  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10365  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10366  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10367  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10368  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10369  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10370  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10371  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10372  ** Parameters(in)   : KernelId - Kernel ID for which the Interrupt handler    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10373  **                    is invoked                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10374  **                    RequestSrc - Request Source for which interrupt occured **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10375  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10376  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10377  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10378  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10379  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10380  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10381  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10382  static void Adc_lRSEventHandler(const uint32 KernelId, const uint8 RequestSrc,\ 
; Function Adc_lRSEventHandler
.L123:
Adc_lRSEventHandler:	.type	func
	mov	d9,d4
.L905:
	mov	e10,d6,d5
.L737:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L906:
	addsc.a	a15,a15,d11,#2
.L907:
	ld.a	a15,[a15]
.L908:
	mul	d15,d11,#12
.L909:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1453:
	addsc.a	a2,a2,d15,#0
.L1454:
	addsc.a	a2,a2,d9,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1455:
	addsc.a	a12,a15,d0,#0
.L738:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10383                                  const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10384  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10385    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10386    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10387    #if ((ADC_EMUX_ENABLE == STD_ON) || (ADC_GRP_NOTIF_CAPABILITY == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10388    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10389    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10390  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10391    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10392    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10393    /* [cover parentID={D4BA0186-8773-4200-961B-BC4954C15EAD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10394    Is Interrupt Service Routine flag is equal to ZERO [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10395    if(lKernelDataPtr->RSData[RequestSrc].IsrNoServiceFlag == (uint8)0U)
	addsc.a	a2,a12,d10,#2
.L910:
	ld.bu	d15,[a2]23
.L1456:
	jne	d15,#0,.L72
.L1457:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10396    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10397      /* [cover parentID={8C9252D4-A726-472c-BD4A-7D250E6FCEEA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10398      Get running group ID for the Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10399      lGroupId = lKernelDataPtr->RSData[RequestSrc].ActiveGroupId;
	ld.hu	d8,[a2]20
.L911:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10400  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10401      /* [cover parentID={9ECC0121-5F55-42c3-8C09-046164D92E95}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10402      EMUX mode is ON or Group Notify Capability is ON [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10403      #if ((ADC_EMUX_ENABLE == STD_ON) || (ADC_GRP_NOTIF_CAPABILITY == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10404      /* [cover parentID={FA988CC7-8A3A-43ef-AED4-6473BA23066D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10405      Get the base address of the group configuration [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10406      lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10407                 GrpCfgPtr[lGroupId]);
	mul	d15,d8,#60
.L1458:
	movh.a	a2,#@his(Adc_ConfigPtr)
	ld.a	a2,[a2]@los(Adc_ConfigPtr)
.L912:
	addsc.a	a15,a2,d11,#2
.L913:
	ld.a	a15,[a15]4
.L1459:
	addsc.a	a15,a15,d9,#2
	ld.a	a15,[a15]
.L1460:
	ld.a	a15,[a15]8
.L1461:
	addsc.a	a15,a15,d15,#0
.L914:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10408      /* [cover parentID={8D3B12E9-720E-4977-B7C0-81BD97B9F3C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10409      EMUX mode is ON [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10410      #if (ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10411      uint8 lEmuxGrp;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10412      /* [cover parentID={DA5ED0E4-27A0-4a58-A90B-36594181B47B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10413      Get the Emux data of the Group [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10414      lEmuxGrp = (ADC_ONE_U & (lGrpCfgPtr->GrpEmuxCfg));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10415      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10416      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10417      /* [cover parentID={FFD97187-68E4-41b0-9A34-81CFE485C9B6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10418      Precompile Switch : Is DMA result handling ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10419      /* [cover parentID={09F226FF-1C23-4464-A030-2520B867FB6A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10420      Interrupt Mode Result Handling is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10421      #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10422      /* [cover parentID={877EE3C7-B6CF-4632-827A-D0318CD0646C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10423      EMUX mode is ON [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10424      #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10425      /* [cover parentID={FAFEADAC-E6A2-46b6-9973-2184C234CC99}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10426      Is Group configured with the EMUX channel [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10427      if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10428      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10429        /* [cover parentID={18C55E2A-53D2-4514-AA64-5ADCFB2DC760}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10430        Update results to application buffer for converted EMUX channel [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10431        Adc_lUpdateEmuxResBuffer(KernelId, lGroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10432        /* [cover parentID={B78ACFA9-6FC4-43b4-BDFF-C437738C3CCC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10433        Are all sets of Emux conversion results available [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10434        if(lKernelDataPtr->EmuxConversionActiveFlag == ADC_EMUX_STREAM_COMPLETED)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10435        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10436          /* [cover parentID={0B76A6A9-7B96-45eb-B57E-4FD9C83855CA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10437          Check for scheduling next group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10438          Adc_lGrpSequenceHandler(KernelId, lGroupId, RequestSrc, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10439  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10440          /* [cover parentID={ECC4367F-1DFF-4b91-93BA-E8DA9B5026ED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10441          Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10442          #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10443          /* [cover parentID={D2190EEC-483A-4c3b-874E-A6E4F7303120}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10444          Is Notification enabled for the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10445          if(Adc_lGetGroupNotifStatus(lKernelDataPtr, lGroupId) == \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10446                                                              (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10447          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10448            /* [cover parentID={BA3B285A-89B1-4a9a-9213-D0C747C73B94}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10449            Is Notification pointer not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10450            if(lGrpCfgPtr->NotifyPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10451            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10452              /* [cover parentID={77059F6D-DABB-43fd-882E-A9C80DDC4D85}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10453              Set the Emux conversion active status flag to indicate that one
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10454              set of Emux conversion results are available to be sent for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10455              Notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10456              lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10457            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10458            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10459            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10460              /* [cover parentID={B2951AA7-487D-4c1c-8B62-73BB10906133}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10461              Set the Emux conversion active status flag to indicate that EMUX
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10462              is idle, as conversion is completed and there is no notification
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10463              pointer to send [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10464              lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10465            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10466          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10467          else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10468          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10469          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10470            /* [cover parentID={779BAC84-7797-4ee4-8AE4-FD084D4B1FB5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10471            Set the Emux conversion active status flag to indicate that EMUX is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10472            idle, as conversion is completed and notification is not enabled for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10473            the group or Group notification capability is not enabled [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10474            lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10475          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10476        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10477      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10478      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10479      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10480      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10481        /* [cover parentID={3ECF3AE6-CDEB-4286-87C5-A9C4FF512140}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10482        Update results to application buffers  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10483        Adc_lUpdateResBuffer(KernelId, lGroupId, CoreId);
	mov	d5,d8
.L904:
	call	Adc_lUpdateResBuffer
.L903:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10484        /* [cover parentID={A9781AFB-60FE-476b-987F-7466D4C57EA8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10485        Check for scheduling next group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10486        Adc_lGrpSequenceHandler(KernelId, lGroupId, RequestSrc, CoreId); 
	mov	e4,d8,d9
.L916:
	mov	e6,d11,d10
.L917:
	call	Adc_lGrpSequenceHandler
.L742:
	ld.w	d15,[a12]16
	extr.u	d15,d15,d8,#1
.L743:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10487      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10488      /* [cover parentID={CDF31F5C-6E8E-41f8-9B59-2C70F4BAFF9E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10489      DMA Mode Result Handling is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10490      #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10491        /* [cover parentID={21E31E08-AEA5-4154-905F-B382050CA361}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10492        EMUX mode is ON [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10493        #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10494        /* [cover parentID={6D595AC7-F9D4-4664-94CA-8B0A299F11A2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10495        Is Group configured with the EMUX channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10496        if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10497        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10498          const volatile Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10499          lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10500          Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10501          uint8 lCurrentEmuxChannel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10502          lResReg = lGrpCfgPtr->GroupDefinition[0U].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10503          /* Read converted EMUX channel number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10504          lCurrentEmuxChannel = lEvadcGroupPtr->RES[lResReg].B.EMUX;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10505          /* [cover parentID={1B91CCF3-C05D-48a2-921F-86FD2305A34A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10506          Are all the connected EMUX channels converted[/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10507          if(lCurrentEmuxChannel == (uint8)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10508          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10509            /* [cover parentID={57658B7C-38A7-4764-B938-E392397AD92E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10510            Set flag for number of streaming samples completed  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10511            Adc_lSetResBuffEndStatusAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10512            /* [cover parentID={BAE86353-BCB5-4d95-9B04-206B01866BB6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10513            Set flag for atleast one result sample avaialble [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10514            Adc_lSetGroupResultAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10515            /* [cover parentID={E2671DE9-C6E1-4a35-8BFA-BD59BA6BEC4F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10516            Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10517            #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10518            /* [cover parentID={E66993F6-3AA2-4220-A613-8239F73AC16D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10519            Is Notification enabled for the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10520            if(Adc_lGetGroupNotifStatus(lKernelDataPtr, lGroupId) == \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10521                                                              (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10522            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10523              /* [cover parentID={696ADF90-B0A5-4382-A4E7-15AA50BAEE74}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10524              Is Notification pointer not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10525              if(lGrpCfgPtr->NotifyPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10526              {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10527                /* [cover parentID={EB018335-136A-4301-94FB-8865CC821BA8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10528                Set the Emux conversion active status flag to indicate that one
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10529                set of Emux conversion results are available to be sent for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10530                Notification [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10531                lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10532              }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10533              else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10534              {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10535                /* [cover parentID={BFF07BDC-7207-4df3-BEE4-C16A583C8DDA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10536                Set the Emux conversion active status flag to indicate that EMUX
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10537                is idle, as conversion is completed and there is no notification
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10538                pointer to send [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10539                lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10540              }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10541            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10542            else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10543            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10544            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10545              /* [cover parentID={F9CE16C0-012C-49b6-A362-EF69BFDBF0DB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10546              Set the Emux conversion active status flag to indicate that EMUX is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10547              idle, as conversion is completed and notification is not enabled for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10548              the group or Group notification capability is not enabled [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10549              lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10550            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10551          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10552        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10553        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10554        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10555        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10556          /* [cover parentID={AC378BA0-4D5E-4beb-B4B2-780972AC40C1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10557          Set flag for number of streaming samples completed  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10558          Adc_lSetResBuffEndStatusAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10559          /* [cover parentID={71D03F64-F14A-4710-B17F-E8DB5B0B1A51}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10560          Set flag for atleast one result sample avaialble [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10561          Adc_lSetGroupResultAtomic(lKernelDataPtr, lGroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10562        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10563      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10564      /* [cover parentID={28A065E7-2107-4dd6-B759-10E34ABFC781}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10565      Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10566      #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10567      /* [cover parentID={DDC0F9B5-0344-4a34-AD92-D551E148997A},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10568                         {2DEDFA3E-48DC-4f2c-AFB4-DBB2150DDD35}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10569      Is Notification enabled for the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10570      if(Adc_lGetGroupNotifStatus(lKernelDataPtr, lGroupId) == (uint32)ADC_ONE_U)
	jne	d15,#1,.L73
.L1462:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10571      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10572        /* [cover parentID={57A10656-34A5-444c-BE30-90999018F161}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10573        EMUX mode is ON [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10574        #if(ADC_EMUX_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10575        /* [cover parentID={59217C92-6E7F-404e-943C-BAC3A7DC7D43}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10576        Is Group configured with the EMUX channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10577        if(lEmuxGrp == ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10578        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10579          /* [cover parentID={92805C52-6FAD-4f9e-940D-A28ECD5C4553}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10580          Is one set of EMUX conversion results available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10581          if(lKernelDataPtr->EmuxConversionActiveFlag == ADC_EMUX_COMPLETED)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10582          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10583            /* [cover parentID={D8E5D663-5442-455b-B296-8519A5922EA1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10584            Interrupt Mode Result Handling is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10585            #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10586            /* [cover parentID={E5AF0BFB-1A64-45da-80AF-E51F89AD27FC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10587            Is Notification pointer not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10588            if(lGrpCfgPtr->NotifyPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10589            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10590            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10591              /* [cover parentID={98771DC0-0F18-45dc-B71E-9BDA74A31F14}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10592              Call Notification function  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10593              lGrpCfgPtr->NotifyPtr();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10594  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10595              /* Set the Emux conversion active status flag to indicate that
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10596              one set of EMUX conversion results are notified */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10597              lKernelDataPtr->EmuxConversionActiveFlag =
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10598                                                    ADC_EMUX_RESULT_NOTIF_STATUS;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10599            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10600          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10601        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10602        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10603        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10604        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10605          /* [cover parentID={18AC48EE-9E98-419b-B42F-6CDF6C22CC58}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10606          Is Notification pointer not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10607          if(lGrpCfgPtr->NotifyPtr != NULL_PTR)
	ld.w	d15,[a15]
.L1463:
	jeq	d15,#0,.L74
.L1464:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10608          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10609            /* [cover parentID={0BF62050-2E53-4c67-A2C3-D6A2B2059F58}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10610            Call Notification function  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10611            lGrpCfgPtr->NotifyPtr();
	ld.a	a15,[a15]
.L915:
	ji	a15
.L74:
.L73:
.L72:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10612          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10613        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10614      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10615      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10616    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10617    /* MISRA2012_RULE_8_13_JUSTIFICATION:Declaring pointer as a constant causes
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10618    warings with compiler, hence it cannot be made const and not an issue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10619  }
	ret
.L727:
	
__Adc_lRSEventHandler_function_end:
	.size	Adc_lRSEventHandler,__Adc_lRSEventHandler_function_end-Adc_lRSEventHandler
.L236:
	; End of function
	
	.sdecl	'.text.Adc_lUpdateResBuffer.Code.Cpu0',code,cluster('Adc_lUpdateResBuffer')
	.sect	'.text.Adc_lUpdateResBuffer.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10620  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10621  #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10622  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10623  ** Traceability: [cover parentID={1D9D7910-6C74-42e8-A76B-E2F8AA36BBFD}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10624  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10625  ** Syntax           : static void Adc_lLimitChkEventHandler                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10626  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10627  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10628  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10629  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10630  **                      const uint8 ReqSrc                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10631  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10632  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10633  ** Description      : This function handles the channel event for a limit     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10634  **                    check group                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10635  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10636  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10637  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10638  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10639  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10640  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10641  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10642  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10643  ** Parameters(in)   : KernelId - Kernel ID for which the Interrupt handler    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10644  **                    is invoked                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10645  **                    GroupId - ADC Group ID of the Kernel                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10646  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10647  **                    ReqSrc - Request Source                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10648  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10649  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10650  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10651  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10652  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10653  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10654  static void Adc_lLimitChkEventHandler(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10655                                        const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10656                                        const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10657                                        const uint8 ReqSrc)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10658  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10659    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10660    #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10661    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10662    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10663  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10664    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10665    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10666  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10667    /* [cover parentID={1449C466-8EEC-4b37-BFD0-EB7A9DF5D857}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10668    Is Interrupt Service Routine flag is equal to ZERO [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10669    if(lKernelDataPtr->RSData[ReqSrc].IsrNoServiceFlag == (uint8)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10670    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10671      /* [cover parentID={03536338-C488-4eba-8957-65234384D6F8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10672      Update results to application buffers  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10673      Adc_lUpdateResBuffer(KernelId, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10674      /* [cover parentID={EA27913E-9BF5-40f6-B8E2-FEE19549E8DD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10675      Check for scheduling next group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10676      Adc_lGrpSequenceHandler(KernelId, GroupId, ReqSrc, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10677  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10678      /* [cover parentID={5DABFA75-0E86-410b-B20F-8A7F08594C2F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10679      Group Notify Capability is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10680      #if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10681      /* [cover parentID={A4CA4D43-16D9-4b56-866C-1EEF592F0C0C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10682      Is Notification enabled for the Group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10683      if(Adc_lGetGroupNotifStatus(lKernelDataPtr, GroupId) == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10684      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10685        /* [cover parentID={2E8EE1E3-4044-4c69-AE1B-C35F947B3782}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10686        Read the Grp config pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10687        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10688                       HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10689  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10690        /* [cover parentID={17ACF50A-C4E9-4bcc-9C33-6A8AFD53ECC4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10691        Is Notofication pointer not equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10692        if(lGrpCfgPtr->NotifyPtr != NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10693        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10694          /* [cover parentID={7C9959B9-1927-4ecd-BF60-5FF6C25397E0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10695          Call Notification function  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10696          lGrpCfgPtr->NotifyPtr();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10697        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10698      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10699      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10700    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10701  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10702  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10703  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10704  #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10705  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10706  ** Traceability: [cover parentID={196FEE90-357A-454e-A7B4-8C56521A8A32}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10707  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10708  ** Syntax           : static void Adc_lUpdateResBuffer                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10709  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10710  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10711  **                      const Adc_GroupType  GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10712  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10713  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10714  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10715  ** Description      : This function Updates the Group Result buffer on        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10716  **                    conversion completion                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10717  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10718  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10719  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10720  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10721  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10722  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10723  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10724  ** Parameters(in)   : KernelId  - ADC Kernel to which the group belongs       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10725  **                    GroupId   - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10726  **                    CoreId    - Logical CPU core ID                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10727  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10728  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10729  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10730  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10731  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10732  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10733  static void Adc_lUpdateResBuffer(const uint32 KernelId,\ 
; Function Adc_lUpdateResBuffer
.L125:
Adc_lUpdateResBuffer:	.type	func

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10734                                   const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10735                                   const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10736  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10737  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10738    const volatile Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10739    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10740    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10741    Adc_ValueGroupType *lCurrentBufferPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10742    Adc_StreamNumSampleType lNumOfSamples, lCurrentBufLocation;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10743    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10744    uint8 lNoOfChannels, lCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10745  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10746    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
	movh.a	a15,#61442
	lea	a15,[a15]@los(0xf0020400)
.L1401:
	sh	d15,d4,#10
.L1402:
	addsc.a	a4,a15,d15,#0
.L683:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1403:
	addsc.a	a15,a15,d6,#2
	ld.a	a15,[a15]
.L1404:
	mul	d15,d6,#12
.L1405:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1406:
	addsc.a	a2,a2,d15,#0
.L1407:
	addsc.a	a2,a2,d4,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1408:
	addsc.a	a2,a15,d0,#0
.L684:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10747    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10748  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10749    /* Get group related confiuration data */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10750    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10751                   GrpCfgPtr[GroupId]);
	mul	d15,d5,#60
.L1409:
	movh.a	a15,#@his(Adc_ConfigPtr)
	ld.a	a15,[a15]@los(Adc_ConfigPtr)
.L1410:
	addsc.a	a15,a15,d6,#2
	ld.a	a15,[a15]4
.L1411:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L1412:
	ld.a	a15,[a15]8
.L1413:
	addsc.a	a15,a15,d15,#0
.L919:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10752    lNumOfSamples = lGrpCfgPtr->NumOfSamples;
	ld.bu	d7,[a15]52
.L921:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10753    lNoOfChannels = lGrpCfgPtr->NoOfChannels;
	ld.bu	d0,[a15]56
.L922:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10754    lResReg = lGrpCfgPtr->GroupDefinition[0U].ResultReg;
	ld.a	a15,[a15]4
.L920:
	ld.bu	d15,[a15]2
.L924:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10755  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10756    /* Get the buffer location where results are to be written */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10757    lCurrentBufLocation = lKernelDataPtr->NumofValidConRes[GroupId];
	addsc.a	a15,a2,d5,#0
	ld.bu	d1,[a15]28
.L926:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10758    /* [cover parentID={3AE43E27-1847-4ee4-A061-128A086D9543}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10759    Is Current Buffer position is equal to Number of Samples [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10760    if(lCurrentBufLocation == lNumOfSamples)
	jne	d1,d7,.L75
.L1414:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10761    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10762      /* [cover parentID={DDF88911-C460-4f55-BDA8-E5ADE3655020}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10763      Reset the Current Buffer position to start of Buffer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10764      lCurrentBufLocation = (Adc_StreamNumSampleType)0U;
	mov	d1,#0
.L75:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10765    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10766    /*
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10767     Application Result Buffer organisation for
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10768     a)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10769     - 5 Channels - CH9, CH1, CH2, CH3 and CH4
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10770     - 3 streaming samples for each channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10771     - No synchronous conversion kernels
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10772  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10773      Buffer Start                                       Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10774      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10775      |CH9|CH9|CH9|CH1|CH1|CH1|CH2|CH2|CH2|CH3|CH3|CH3|CH4|CH4|CH4|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10776      +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10777  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10778      b)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10779     - 3 Channels - CH9, CH1, and CH2
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10780     - 2 streaming samples for each channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10781     - Kernel K0 synchronization master, kernel K1 and K2 synchronization slaves
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10782     - Channels CH9 and CH2 enabled for synchronous conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10783  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10784      Buffer Start
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10785      +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10786      |K0CH9|K0CH9|K0CH1|K0CH1|K0CH2|K0CH2| => |K1CH9|K1CH9|K1CH2|K1CH2| =>
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10787      +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10788  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10789                        Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10790         +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10791      => |K2CH9|K2CH9|K2CH1|K2CH1|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10792         +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10793  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10794      c)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10795     - 3 Channels - CH9, CH1, and CH2
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10796     - 2 streaming samples for each channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10797     - Kernel K1 synchronization master, kernel K0 and K3 synchronization slaves
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10798     - Channels CH1 and CH2 enabled for synchronous conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10799  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10800      Buffer Start
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10801      +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10802      |K1CH9|K1CH9|K1CH1|K1CH1|K1CH2|K1CH2| => |K0CH1|K0CH1|K0CH2|K0CH2| =>
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10803      +-----+-----+-----+-----+-----+-----+    +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10804  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10805                        Buffer End
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10806         +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10807      => |K3CH1|K3CH1|K3CH2|K3CH2|
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10808         +-----+-----+-----+-----+
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10809    */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10810  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10811    /* [cover parentID={FCCA9CFB-9EAF-4c00-942C-88F2A8E6A27B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10812    Calculate the Current Buffer address to copy the results [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10813    lCurrentBufferPtr = lKernelDataPtr->GrpResBuffer[GroupId];
	addsc.a	a15,a2,d5,#2
	ld.a	a15,[a15]
.L1415:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10814    lCurrentBufferPtr = &lCurrentBufferPtr[lCurrentBufLocation];
	addsc.a	a15,a15,d1,#1
.L928:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10815  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10816    /* [cover parentID={08CC8E75-B377-4b35-9395-3380AF95098B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10817    Until the last channel in the group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10818    for(lCount = 0U; lCount < lNoOfChannels; lCount++)
	mov	d4,#0
.L918:
	j	.L76
.L77:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10819    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10820      /* [cover parentID={491E801B-9AE5-4062-B199-707D8771A974}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10821      Mask the conversion result and copy result from register to the Data Buffer
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10822      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10823      lCurrentBufferPtr[(uint32)lCount*(uint32)lNumOfSamples] = \ 
	mul	d6,d4,d7
.L1416:
	addsc.a	a5,a15,d6,#1
.L1417:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10824                (Adc_ValueGroupType)((uint32)lEvadcGroupPtr->RES[lResReg].U &\ 
	addsc.a	a6,a4,d15,#2
.L1418:
	ld.w	d6,[a6]768
.L1419:
	insert	d6,d6,#0,#12,#20
.L1420:
	st.h	[a5],d6
.L1421:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10825                                     (uint32)ADC_12BIT_RESULT_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10826      lResReg++;
	add	d6,d15,#1
	extr.u	d15,d6,#0,#8
.L1422:
	add	d4,#1
.L930:
	extr.u	d4,d4,#0,#8
.L76:
	jlt.u	d4,d0,.L77
.L1423:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10827    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10828  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10829    /* [cover parentID={D6464051-DAF4-444b-A015-5798EA3228E7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10830    Sync Conversion is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10831    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10832    /* [cover parentID={1ABA0FE7-36DA-45ab-A83D-B544A5210874}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10833    Channel configured for sync conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10834    if (lGrpCfgPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10835    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10836      lCurrentBufferPtr = &lCurrentBufferPtr[(uint32)lNoOfChannels *\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10837                                             (uint32)lNumOfSamples];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10838      /* [cover parentID={2FF2A99E-3750-4310-9F82-6C863D31081D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10839      Update slave result buffer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10840      Adc_lUpdateSlaveResult(KernelId, GroupId, lCurrentBufferPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10841    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10842    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10843  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10844    /*Increment the number of valid conversions available */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10845    lCurrentBufLocation++;
	add	d1,#1
.L927:
	extr.u	d15,d1,#0,#8
.L925:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10846  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10847    /*Set the next buffer position of the Application result buffer,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10848      also incidcates the number of result samples available */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10849    lKernelDataPtr->NumofValidConRes[GroupId] = lCurrentBufLocation;
	addsc.a	a15,a2,d5,#0
.L929:
	st.b	[a15]28,d1
.L688:
	mov	d0,#1
.L923:
	extr.u	d1,d5,#0,#8
	lea	a15,[a2]8

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  4986    Mcal_SetBitAtomic(&(KernelDataPtr->GrpResultStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d0,d1,#(1) 
 ldmst [a15]0,e2
	
.L689:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10850  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10851    /* [cover parentID={278B1A22-175B-475a-AC03-7C21852162C1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10852    Update Group result status  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10853    /* Set the flag for atleast one result sample avaialble */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10854    Adc_lSetGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10855  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10856    /* [cover parentID={11E94302-20A6-48c6-B354-920A9D50E4BC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10857    Are Configured Number of streaming samples available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10858    if(lCurrentBufLocation == lNumOfSamples)
	jne	d15,d7,.L78
.L696:
	mov	d15,#1
.L931:
	extr.u	d0,d5,#0,#8
	lea	a15,[a2]12

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5026    Mcal_SetBitAtomic(&(KernelDataPtr->GrpBufferEndResultStatus), (uint8)GroupId,\       (inlined)
	
	imask e2,d15,d0,#(1) 
 ldmst [a15]0,e2
	
.L78:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10859    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10860      /* [cover parentID={E84AFDE5-9DDA-48c3-95AF-5EFC5F4E5130}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10861      Set End Result Buffer Status  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10862      /*Set the flag for number of streaming samples completed,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10863        if the streaming sample set is completed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10864      Adc_lSetResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10865    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10866  }
	ret
.L665:
	
__Adc_lUpdateResBuffer_function_end:
	.size	Adc_lUpdateResBuffer,__Adc_lUpdateResBuffer_function_end-Adc_lUpdateResBuffer
.L226:
	; End of function
	
	.sdecl	'.text.Adc_lGrpSequenceHandler.Code.Cpu0',code,cluster('Adc_lGrpSequenceHandler')
	.sect	'.text.Adc_lGrpSequenceHandler.Code.Cpu0'
	.align	2
	

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10867  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10868  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10869  #if ((ADC_EMUX_ENABLE == STD_ON) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10870  (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10871  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10872  ** Traceability: [cover parentID={BB9BC317-A3A2-457b-8876-C8B921184248}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10873  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10874  ** Syntax           : static void Adc_lUpdateEmuxResBuffer                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10875  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10876  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10877  **                      const Adc_GroupType  GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10878  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10879  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10880  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10881  ** Description      : This function Updates the Emux Group Result buffer on   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10882  **                    conversion completion                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10883  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10884  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10885  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10886  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10887  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10888  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10889  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10890  ** Parameters(in)   : KernelId  - ADC Kernel to which the group belongs       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10891  **                    GroupId   - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10892  **                    CoreId    - Logical CPU core ID                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10893  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10894  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10895  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10896  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10897  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10898  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10899  static void Adc_lUpdateEmuxResBuffer(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10900                                   const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10901                                   const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10902  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10903  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10904    const volatile Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10905    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10906    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10907    Adc_ValueGroupType *lCurrentBufferPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10908    Adc_StreamNumSampleType lNumOfSamples, lCurrentBufLocation;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10909    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10910    uint8 lCurrentEmuxChannel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10911  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10912    lEvadcGroupPtr = &MODULE_EVADC.G[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10913    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10914  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10915    /* Get group related confiuration data */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10916    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10917                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10918  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10919    lNumOfSamples = lGrpCfgPtr->NumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10920    lResReg = lGrpCfgPtr->GroupDefinition[0U].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10921  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10922    /* Get the buffer location where results are to be written */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10923    lCurrentBufLocation = lKernelDataPtr->NumofValidConRes[GroupId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10924  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10925    /* [cover parentID={5C87F864-3D75-4220-A3F1-12171EBFEC8A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10926    Is Current Buffer position is equal to Number of Samples [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10927    if(lCurrentBufLocation == lNumOfSamples)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10928    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10929      /* [cover parentID={C5D23B49-824D-4f99-AAEB-A1A30582F872}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10930      Reset the Current Buffer position to start of Buffer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10931      lCurrentBufLocation = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10932    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10933  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10934    /* [cover parentID={9490F2E7-381D-4eaf-B955-096FEB0F11F5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10935    Calculate the Current Buffer address to copy the results [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10936    lCurrentBufferPtr = lKernelDataPtr->GrpResBuffer[GroupId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10937    lCurrentBufferPtr = &lCurrentBufferPtr[lCurrentBufLocation];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10938  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10939    /* [cover parentID={1237BA29-140B-48ac-B73C-B5E181BB248F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10940    Read results of each EMUX channels and update result buffer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10941    lCurrentEmuxChannel = lEvadcGroupPtr->RES[lResReg].B.EMUX;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10942    lCurrentBufferPtr[lCurrentEmuxChannel*(uint32)lNumOfSamples] = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10943      (Adc_ValueGroupType)((uint32)lEvadcGroupPtr->RES[lResReg].U &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10944                                     (uint32)ADC_12BIT_RESULT_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10945  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10946    /* [cover parentID={225D1CEA-4BCF-482f-A8EB-08286B1A7378}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10947    Are all the connected EMUX channels converted [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10948    if(lCurrentEmuxChannel == 0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10949    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10950      /* [cover parentID={2049BBAD-8EC2-49b9-BD11-AF56AE506768}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10951      Increment the number of valid conversions available [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10952      lCurrentBufLocation++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10953  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10954      /*Set the next buffer position of the Application result buffer,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10955      also incidcates the number of result samples available */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10956      lKernelDataPtr->NumofValidConRes[GroupId] = lCurrentBufLocation;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10957  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10958      /* [cover parentID={9E816A47-DF44-425b-8C4F-E48F0888661B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10959      Update Group result status  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10960      Adc_lSetGroupResultAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10961  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10962      /* Set the Emux conversion active status flag to indicate that one set of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10963      Emux conversion results are available */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10964      lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10965  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10966      /* [cover parentID={999514E6-0E87-45d1-B909-85F7AACDB2A4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10967      Are Configured Number of streaming samples available [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10968      if(lCurrentBufLocation == lNumOfSamples)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10969      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10970        /* [cover parentID={3B45F7AC-3D43-40e7-8F33-021244E0A6E9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10971        Set End Result Buffer Status  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10972        /*Set the flag for number of streaming samples completed,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10973        if the streaming sample set is completed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10974        Adc_lSetResBuffEndStatusAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10975        
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10976        /* Set the Emux conversion active status flag to indicate that all sets of
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10977        Emux conversion results are available */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10978        lKernelDataPtr->EmuxConversionActiveFlag = ADC_EMUX_STREAM_COMPLETED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10979      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10980    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10981  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10982  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10983  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10984  #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10985  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10986  ** Traceability: [cover parentID={1876477F-CB8B-43dc-9538-EC21842F79CA}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10987  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10988  ** Syntax           : static void Adc_lUpdateSlaveResult                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10989  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10990  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10991  **                      const Adc_GroupType  GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10992  **                      Adc_ValueGroupType* const CurrentResBufPtr            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10993  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10994  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10995  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10996  ** Description      : This function Updates the Group Result buffer of        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10997  **                    synchronous conversion slaves                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10998  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 10999  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11000  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11001  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11002  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11003  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11004  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11005  ** Parameters(in)   : KernelId  - ADC Kernel to which the group belongs       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11006  **                    GroupId   - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11007  **                    CoreId    - Logical CPU core ID                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11008  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11009  ** Parameters (out) : CurrentResBufPtr - Pointer to result buffer for first   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11010  **                                       slave channel                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11011  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11012  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11013  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11014  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11015  static void Adc_lUpdateSlaveResult(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11016                                     const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11017                                     Adc_ValueGroupType * const CurrentResBufPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11018                                     const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11019  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11020    const Ifx_EVADC_G *lEvadcGroupPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11021    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11022    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11023    const Adc_GroupDefType *lGrpDefCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11024    uint32 lCurrentBufLocation;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11025    uint8 lKernelCount, lSlaveKernel;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11026    Adc_StreamNumSampleType lNumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11027    Adc_ResultRegType lResReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11028    Adc_ChannelType lChannelId, lAnChannelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11029  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11030    /*Get the base address of the group configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11031    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11032                   GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11033    lNumOfSamples = lGrpCfgPtr->NumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11034    lCurrentBufLocation = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11035  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11036    /* Get the base address of the group definition */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11037    lGrpDefCfgPtr = lGrpCfgPtr->GroupDefinition;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11038  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11039    /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11040    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11041  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11042    /* [cover parentID={0E764F77-9236-4bbc-A3AA-132904ED7151}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11043    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11044    for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11045         lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11046    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11047      /* [cover parentID={F7ADFC49-06B3-459c-B245-EB558CA78924}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11048      Read slave kernel from hardware unit config pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11049      lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11050      /* [cover parentID={C88CAC4C-086E-4761-951D-BC0B73DA1651}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11051      Valid slave kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11052      if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11053      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11054        /*Get the SFR base address for the kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11055        lEvadcGroupPtr = &MODULE_EVADC.G[lSlaveKernel];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11056  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11057        lChannelId = (Adc_ChannelType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11058  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11059        /* [cover parentID={445AB149-299C-4ff7-AF14-03E31A801224}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11060        Till the last available channel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11061        do
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11062        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11063          /* Get the analog channel number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11064          lAnChannelId = lGrpDefCfgPtr[lChannelId].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11065          lResReg = lGrpDefCfgPtr[lChannelId].ResultReg;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11066  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11067          if ((lGrpCfgPtr->SyncChannelMask &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11068               (uint16)((uint32)ADC_ONE_U << lAnChannelId)) != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11069          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11070            /* [cover parentID={0B4042CF-9FD4-4bd7-829B-01CD5324A639}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11071            Update the result buffer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11072            CurrentResBufPtr[lCurrentBufLocation] = \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11073                  (Adc_ValueGroupType)((uint32)lEvadcGroupPtr->RES[lResReg].U &\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11074                                       (uint32)ADC_12BIT_RESULT_MASK);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11075            lCurrentBufLocation += lNumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11076          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11077  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11078          lChannelId++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11079        } while (lChannelId < lGrpCfgPtr->NoOfChannels);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11080      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11081    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11082  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11083  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11084  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11085  #if ((ADC_READ_GROUP_API == STD_ON) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11086       (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11087       (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11088  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11089  ** Traceability: [cover parentID={E6DF4EAB-6510-42e8-8CCC-F7EE74A23211}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11090  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11091  ** Syntax           : static void Adc_lReadlaveResult                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11092  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11093  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11094  **                      const Adc_GroupCfgType* const GrpCfgPtr               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11095  **                      const Adc_ValueGroupType* ResultBufPtr                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11096  **                      Adc_ValueGroupType* const DataBufPtr                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11097  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11098  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11099  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11100  ** Description      : This function reads the slave kernel conversion results **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11101  **                    of the last conversion round from the streaming buffer. **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11102  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11103  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11104  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11105  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11106  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11107  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11108  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11109  ** Parameters(in)   : KernelId     - ADC Kernel to which the group belongs    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11110  **                    GrpCfgPtr    - Pointer to group configuration           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11111  **                    ResultBufPtr - Pointer to start of slave results in     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11112  **                                   the groups result buffer                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11113  **                    CoreId       - Logical CPU core ID                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11114  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11115  ** Parameters (out) : DataBufPtr   - Pointer to data buffer for first slave   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11116  **                                   slave                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11117  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11118  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11119  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11120  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11121  static void Adc_lReadSlaveResult(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11122                                   const Adc_GroupCfgType* const GrpCfgPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11123                                   const Adc_ValueGroupType* const ResultBufPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11124                                   Adc_ValueGroupType* const DataBufPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11125                                   const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11126  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11127    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11128    const Adc_GroupDefType *lGrpDefCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11129    uint32 lCurResBufLocation;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11130    uint8 lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11131    Adc_StreamNumSampleType lNumOfSamples, lCurDataBufLocation;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11132    Adc_ChannelType lChannelId, lAnChannelId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11133  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11134    lNumOfSamples = GrpCfgPtr->NumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11135    lCurDataBufLocation = (Adc_StreamNumSampleType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11136    lCurResBufLocation = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11137  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11138    /* Get the base address of the group definition */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11139    lGrpDefCfgPtr = GrpCfgPtr->GroupDefinition;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11140  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11141    /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11142    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11143  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11144    /* [cover parentID={46983F5F-D89E-4e48-B33E-4CAAD78E3797}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11145    Till the last slave kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11146    for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11147         lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11148    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11149      /* [cover parentID={ACEFA154-95B2-4ea3-9FE8-5CC412540F2C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11150      Is valid Slave kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11151      if (lHwUnitCfgPtr->SlaveKernels[lKernelCount] != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11152      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11153        lChannelId = (Adc_ChannelType)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11154  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11155        /* [cover parentID={9A79F664-EC81-4522-A205-B9CBB2DBB5CD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11156        Till the total number of channels available and valid Sync channel
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11157        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11158        do
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11159        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11160          /* Get the analog channel number */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11161          lAnChannelId = lGrpDefCfgPtr[lChannelId].AnalogChannelNo;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11162  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11163          if ((GrpCfgPtr->SyncChannelMask &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11164               (uint16)((uint32)ADC_ONE_U << lAnChannelId)) != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11165          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11166            /* [cover parentID={5E9101F2-0590-4769-86EA-5154F238A7F0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11167            Copy the results of channel to application buffer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11168            DataBufPtr[lCurDataBufLocation] = ResultBufPtr[lCurResBufLocation];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11169            lCurDataBufLocation++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11170            lCurResBufLocation += lNumOfSamples;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11171          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11172  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11173          lChannelId++;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11174        } while (lChannelId < GrpCfgPtr->NoOfChannels);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11175      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11176    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11177  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11178  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11179  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11180  #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11181  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11182  ** Traceability: [cover parentID={F70A3470-2E4C-4901-8D69-F6E7FBB7D9A4}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11183  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11184  ** Syntax           : static void Adc_lGrpSequenceHandler                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11185  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11186  **                     const uint32 KernelId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11187  **                     const Adc_GroupType  GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11188  **                     const uint8 ReqSrc                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11189  **                     const uint32 CoreId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11190  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11191  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11192  ** Description      : This function stops the conversion of Implicit stop     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11193  **                    groups and schedules the next group in the queue.       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11194  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11195  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11196  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11197  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11198  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11199  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11200  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11201  ** Parameters(in)   : KernelId  - ADC Kernel to which the group belongs       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11202  **                    GroupId   - ADC Group ID of the Kernel                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11203  **                    ReqSrc    - Request Source                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11204  **                    CoreId    - Logical CPU core ID                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11205  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11206  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11207  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11208  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11209  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11210  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11211  static void Adc_lGrpSequenceHandler(const uint32 KernelId,\ 
; Function Adc_lGrpSequenceHandler
.L127:
Adc_lGrpSequenceHandler:	.type	func
	mov	e8,d6,d5
.L934:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11212            const Adc_GroupType GroupId, const uint8 ReqSrc, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11213  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11214    Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11215    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11216    uint32 lStrmCompletedFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11217  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11218    /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11219    lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11220                   GrpCfgPtr[GroupId]);
	mul	d15,d8,#60
.L935:
	movh.a	a15,#@his(Adc_ConfigPtr)
	ld.a	a15,[a15]@los(Adc_ConfigPtr)
.L1428:
	addsc.a	a15,a15,d7,#2
	ld.a	a15,[a15]4
.L1429:
	addsc.a	a15,a15,d4,#2
	ld.a	a15,[a15]
.L1430:
	ld.a	a15,[a15]8
.L1431:
	addsc.a	a4,a15,d15,#0
.L714:
	movh.a	a15,#@his(Adc_kKernelData)
	lea	a15,[a15]@los(Adc_kKernelData)
.L1432:
	addsc.a	a15,a15,d7,#2
	ld.a	a15,[a15]
.L1433:
	mul	d15,d7,#12
.L1434:
	movh.a	a2,#@his(Adc_kKernelDataIndex)
	lea	a2,[a2]@los(Adc_kKernelDataIndex)
.L1435:
	addsc.a	a2,a2,d15,#0
.L1436:
	addsc.a	a2,a2,d4,#0
	ld.bu	d0,[a2]
	sha	d0,#5
.L1437:
	addsc.a	a12,a15,d0,#0
.L715:
	ld.w	d15,[a12]12
.L936:
	extr.u	d0,d15,d8,#1
.L718:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11221    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11222    lKernelDataPtr =  Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11223    /* [cover parentID={56EAC32B-C3E8-4b7d-A422-3193AB2085F0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11224    Read result buffer end status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11225    lStrmCompletedFlag = Adc_lGetResBuffEndStatus(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11226  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11227    /* [cover parentID={A8456180-759D-4fd5-ACB4-6BB52C08B90F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11228    Is SW Trigger & One shot conv mode or
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11229    Linear buffer & Streaming samples completed [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11230    /* [cover parentID={A8456180-759D-4fd5-ACB4-6BB52C08B90F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11231    Group to be checked for stopping in the RS ISR (Implicit Stop Groups)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11232    SW TRIGGGER ONE SHOT - HW or SW trigger with LINEAR buffer and Streaming
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11233    Samples completed [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11234    if( ((lGrpCfgPtr->TriggerSource == ADC_TRIGG_SRC_SW) && \ 
	ld.bu	d15,[a4]48
.L1438:
	jne	d15,#0,.L79
.L1439:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11235         (lGrpCfgPtr->ConvMode == ADC_CONV_MODE_ONESHOT)) || \ 
	ld.bu	d15,[a4]49
.L1440:
	jeq	d15,#0,.L80
.L79:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11236        ((lGrpCfgPtr->StreamMode == ADC_STREAM_BUFFER_LINEAR) && \ 
	ld.bu	d15,[a4]51
.L1441:
	jne	d15,#0,.L81
.L1442:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11237         (lStrmCompletedFlag == (uint32)ADC_ONE_U))\ 
	jne	d0,#1,.L82
.L80:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11238      )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11239    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11240      lKernelDataPtr->RSData[ReqSrc].IsrNoServiceFlag = (uint8)ADC_ONE_U;
	addsc.a	a15,a12,d9,#2
.L937:
	mov	d15,#1
.L1443:
	st.b	[a15]23,d15
.L1444:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11241  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11242      /* SW TRIG ONE SHOT groups are not queued in refill mode,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11243         hence no need to stop them explicity.*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11244      /* [cover parentID={BB700151-0B60-4757-8788-9E0920F99273}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11245      Is SW Trigger & One shot conv mode [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11246      if((lGrpCfgPtr->TriggerSource == ADC_TRIGG_SRC_SW) && \ 
	ld.bu	d15,[a4]48
.L1445:
	jne	d15,#0,.L83
.L1446:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11247          (lGrpCfgPtr->ConvMode == ADC_CONV_MODE_ONESHOT))
	ld.bu	d15,[a4]49
.L1447:
	jne	d15,#0,.L84
.L938:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11248      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11249        /* [cover parentID={1D938EE7-2D67-4105-A588-CAF7521BED22}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11250        Clear Channel and Result registers [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11251        Adc_lClearGroupSfr(lGrpCfgPtr, KernelId, ReqSrc);
	mov	d5,d9
.L933:
	call	Adc_lClearGroupSfr
.L932:
	j	.L85
.L84:
.L83:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11252      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11253      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11254      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11255        /* Stop the conversion, flush the queue, reset registers for groups
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11256        queued in refill mode */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11257        /* [cover parentID={D48FF423-4B19-44c5-BFC8-4A9DC59FE843}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11258        Stop Conversion Request [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11259        Adc_lStopConvRequest(lGrpCfgPtr, KernelId, ReqSrc);
	mov	d5,d9
.L939:
	call	Adc_lStopConvRequest
.L85:
	addsc.a	a15,a12,d9,#2
.L940:
	mov	d15,#255
.L1448:
	st.h	[a15]20,d15
.L721:
	mov	d15,#0
.L941:
	extr.u	d0,d8,#0,#8
.L942:
	add.a	a12,#4

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	  5139    Mcal_SetBitAtomic(&(KernelDataPtr->GrpStatus), (uint8)GroupId, \       (inlined)
	
	imask e2,d15,d0,#(1) 
 ldmst [a12]0,e2
	
.L82:
.L81:

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11260      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11261  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11262      /* Clear Kernel Data variable */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11263      Adc_lRemoveActiveGroup(lKernelDataPtr, lGrpCfgPtr, ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11264      /* [cover parentID={1AD08973-67C9-41aa-B9C7-B4D1694AE1BF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11265      Sync Conversion is ON or Priority mode is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11266      #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11267           (ADC_SYNC_CONV_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11268      /* [cover parentID={1252DA55-FCC7-4ac6-BE57-16BBBFB3B91B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11269      Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11270      /* [cover parentID={725092E2-523D-4f37-B618-8FF65023E15A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11271      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11272      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11273      /* [cover parentID={B83EF8EF-DAE1-41df-94BC-1DA1651BC633}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11274      Clears the Slave running channels [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11275      Adc_lClrRunningChAndResReg(KernelId, lGrpCfgPtr, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11276  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11277      /* [cover parentID={75130436-373E-4d5c-8B4C-DF3371F8A894}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11278      Priority Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11279      #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11280      /* [cover parentID={2B919AB5-918D-404d-91DD-746716338498}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11281      Limit Check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11282      #if (ADC_ENABLE_LIMIT_CHECK==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11283      /* [cover parentID={593D41A9-C6AC-4e84-AF5A-961FC39076AA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11284      Is Group enabled with limit check? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11285      if ((uint8)ADC_ONE_U == lGrpCfgPtr->LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11286      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11287        /* [cover parentID={DFDC6778-D4B7-4ddb-A187-BF9EB68B9439}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11288        Reset limit check active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11289        lKernelDataPtr->LimitChkActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11290      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11291      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11292  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11293      /* [cover parentID={F03197F5-06FC-4608-8D1D-7D7FD6CC9405}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11294      Is the group configured for alias? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11295      if (ADC_ALIAS_DEFAULT_VALUE != lGrpCfgPtr->AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11296      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11297        /* [cover parentID={206525D5-4B31-4e9f-89F3-C5BAFB2B33A6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11298        Reset alias active status flag [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11299        lKernelDataPtr->AliasActiveFlag = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11300      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11301      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11302  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11303      /* [cover parentID={DB4F2119-5355-42f0-AA4A-438B21257240}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11304      End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11305      SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11306      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11307  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11308      /* Change groups status to not converting, only busy flag is reset.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11309        Result flags and count are not cleared, since results will be read later
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11310        by application using ReadGroup or GetStreamLastPointer */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11311      Adc_lClrGroupStatusBusyAtomic(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11312  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11313      /* [cover parentID={D851119B-1116-40c5-A842-192262998B99}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11314      Hw Priority is ON or Queue Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11315      #if((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11316          (ADC_ENABLE_QUEUING == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11317      /* [cover parentID={6F28C8C0-E0DD-4e8a-9AC5-A4DEEC5B00A1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11318      Remove Group from the queue [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11319      Adc_lRemoveFromQueue(KernelId, lKernelDataPtr, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11320      /* [cover parentID={D6B00E04-C6D4-4884-B104-DB89EBAD1591}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11321      Enable Start Stop Group API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11322      #if(ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11323      /* If SW queue has more groups, schedule it for conversion*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11324      /* [cover parentID={6BFF04AF-B86E-45cd-97EE-0F4EC6AE2C21}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11325      Is SW queue has more Groups [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11326      if(lKernelDataPtr->RSData[ReqSrc].PopGroupId != ADC_INVALID_GROUP_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11327      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11328        /* [cover parentID={C16EA876-3F53-4639-9C7F-EB1F834BAE92}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11329        Schedule Group for conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11330        Adc_lScheduleFromQueue(KernelId,CoreId,ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11331      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11332      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11333      /* [cover parentID={0D542A96-B625-4b79-AF40-075BD7964A92}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11334      HW-SW Priority is on and Enable start stop group API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11335      #elif((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)&&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11336            (ADC_ENABLE_START_STOP_GROUP_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11337  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11338      /* [cover parentID={806CEC92-F9FF-4f35-8FD9-89A7B3F1C3A2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11339      Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11340      /* [cover parentID={70762A9E-D123-4645-987D-559FB9D5679D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11341      Start of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11342      SchM_Enter_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11343      /* [cover parentID={B8D493E6-0AE8-441b-AF41-DC09DFFF26AD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11344      Schedule next highest priority group for conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11345      Adc_lScheduleNext(KernelId, CoreId, ReqSrc);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11346  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11347      /* [cover parentID={67BA9EE9-6933-4278-BCDB-79ACC1B138FA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11348      End of Critical Section [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11349      SchM_Exit_Adc_KernelData();
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11350      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11351    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11352  }
	ret
.L702:
	
__Adc_lGrpSequenceHandler_function_end:
	.size	Adc_lGrpSequenceHandler,__Adc_lGrpSequenceHandler_function_end-Adc_lGrpSequenceHandler
.L231:
	; End of function
	
	.sdecl	'.bss.Adc_KernelData_Core1.ClearedData.Cpu1.Unspecified',data,cluster('Adc_KernelData_Core1')
	.sect	'.bss.Adc_KernelData_Core1.ClearedData.Cpu1.Unspecified'
	.align	4
Adc_KernelData_Core1:	.type	object
	.size	Adc_KernelData_Core1,128
	.space	128
	.sdecl	'.bss.Adc_ConfigPtr.ClearedData.LmuNC.32bit',data,cluster('Adc_ConfigPtr')
	.sect	'.bss.Adc_ConfigPtr.ClearedData.LmuNC.32bit'
	.align	4
Adc_ConfigPtr:	.type	object
	.size	Adc_ConfigPtr,4
	.space	4
	.sdecl	'.bss.Adc_StartupCalStatus.ClearedData.LmuNC.32bit',data,cluster('Adc_StartupCalStatus')
	.sect	'.bss.Adc_StartupCalStatus.ClearedData.LmuNC.32bit'
	.align	4
Adc_StartupCalStatus:	.type	object
	.size	Adc_StartupCalStatus,4
	.space	4
	.sdecl	'.rodata.Adc_kKernelDataIndex.Const.Cpu0.8bit',data,rom,cluster('Adc_kKernelDataIndex')
	.sect	'.rodata.Adc_kKernelDataIndex.Const.Cpu0.8bit'
Adc_kKernelDataIndex:	.type	object
	.size	Adc_kKernelDataIndex,72
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.space	1
	.byte	1,2,3,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255,255
	.byte	255,255,255
	.sdecl	'.rodata.Adc_kKernelUsedCount.Const.Cpu0.8bit',data,rom,cluster('Adc_kKernelUsedCount')
	.sect	'.rodata.Adc_kKernelUsedCount.Const.Cpu0.8bit'
Adc_kKernelUsedCount:	.type	object
	.size	Adc_kKernelUsedCount,6
	.space	1
	.byte	4
	.space	4
	.sdecl	'.rodata.Adc_kKernelData.Const.Cpu0.Unspecified',data,rom,cluster('Adc_kKernelData')
	.sect	'.rodata.Adc_kKernelData.Const.Cpu0.Unspecified'
	.align	4
Adc_kKernelData:	.type	object
	.size	Adc_kKernelData,24
	.space	4
	.word	Adc_KernelData_Core1
	.space	16
	.calls	'Adc_Init','Mcal_GetCpuIndex'
	.calls	'Adc_Init','Mcal_WritePeripEndInitProtReg'
	.calls	'Adc_Init','Adc_lKernelDeInit'
	.calls	'Adc_Init','Adc_lResetCoreGlobalVars'
	.calls	'Adc_SetupResultBuffer','Mcal_GetCpuIndex'
	.calls	'Adc_SetupResultBuffer','SchM_Enter_Adc_KernelData'
	.calls	'Adc_SetupResultBuffer','SchM_Exit_Adc_KernelData'
	.calls	'Adc_StartGroupConversion','Mcal_GetCpuIndex'
	.calls	'Adc_StartGroupConversion','SchM_Enter_Adc_KernelData'
	.calls	'Adc_StartGroupConversion','SchM_Exit_Adc_KernelData'
	.calls	'Adc_StartGroupConversion','Adc_lPrepareGrpForStart'
	.calls	'Adc_StartGroupConversion','Adc_lStartSwConversion'
	.calls	'Adc_StopGroupConversion','Mcal_GetCpuIndex'
	.calls	'Adc_StopGroupConversion','SchM_Enter_Adc_KernelData'
	.calls	'Adc_StopGroupConversion','SchM_Exit_Adc_KernelData'
	.calls	'Adc_StopGroupConversion','Adc_lStopConvRequest'
	.calls	'Adc_ReadGroup','Mcal_GetCpuIndex'
	.calls	'Adc_ReadGroup','SchM_Enter_Adc_KernelData'
	.calls	'Adc_ReadGroup','SchM_Exit_Adc_KernelData'
	.calls	'Adc_EnableGroupNotification','Mcal_GetCpuIndex'
	.calls	'Adc_DisableGroupNotification','Mcal_GetCpuIndex'
	.calls	'Adc_GetGroupStatus','Mcal_GetCpuIndex'
	.calls	'Adc_GetGroupStatus','SchM_Enter_Adc_KernelData'
	.calls	'Adc_GetGroupStatus','SchM_Exit_Adc_KernelData'
	.calls	'Adc_GetStreamLastPointer','Mcal_GetCpuIndex'
	.calls	'Adc_GetStreamLastPointer','SchM_Enter_Adc_KernelData'
	.calls	'Adc_GetStreamLastPointer','SchM_Exit_Adc_KernelData'
	.calls	'Adc_GetStartupCalStatus','Mcal_GetCpuIndex'
	.calls	'Adc_RS0EventInterruptHandler','Mcal_GetCpuIndex'
	.calls	'Adc_RS0EventInterruptHandler','Adc_lRSEventHandler'
	.calls	'Adc_lStopConvRequest','SchM_Enter_Adc_SrcRegAccess'
	.calls	'Adc_lStopConvRequest','SchM_Exit_Adc_SrcRegAccess'
	.calls	'Adc_lStopConvRequest','Adc_lClearGroupSfr'
	.calls	'Adc_lRSEventHandler','Adc_lUpdateResBuffer'
	.calls	'Adc_lRSEventHandler','Adc_lGrpSequenceHandler'
	.calls	'Adc_lRSEventHandler','__INDIRECT__'
	.calls	'Adc_lGrpSequenceHandler','Adc_lClearGroupSfr'
	.calls	'Adc_lGrpSequenceHandler','Adc_lStopConvRequest'
	.calls	'Adc_Init','',0
	.calls	'Adc_SetupResultBuffer','',0
	.calls	'Adc_StartGroupConversion','',0
	.calls	'Adc_StopGroupConversion','',0
	.calls	'Adc_ReadGroup','',0
	.calls	'Adc_EnableGroupNotification','',0
	.calls	'Adc_DisableGroupNotification','',0
	.calls	'Adc_GetGroupStatus','',0
	.calls	'Adc_GetStreamLastPointer','',0
	.calls	'Adc_TriggerStartupCal','',0
	.calls	'Adc_GetStartupCalStatus','',0
	.calls	'Adc_RS0EventInterruptHandler','',0
	.calls	'Adc_lResetCoreGlobalVars','',0
	.calls	'Adc_lKernelDeInit','',0
	.calls	'Adc_lPrepareGrpForStart','',0
	.calls	'Adc_lStartSwConversion','',0
	.calls	'Adc_lStopConvRequest','',0
	.calls	'Adc_lClearGroupSfr','',0
	.calls	'Adc_lRSEventHandler','',0
	.calls	'Adc_lUpdateResBuffer','',0
	.extern	Mcal_WritePeripEndInitProtReg
	.extern	Mcal_GetCpuIndex
	.extern	SchM_Enter_Adc_KernelData
	.extern	SchM_Exit_Adc_KernelData
	.extern	SchM_Enter_Adc_SrcRegAccess
	.extern	SchM_Exit_Adc_SrcRegAccess
	.extern	__INDIRECT__
	.calls	'Adc_lGrpSequenceHandler','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L129:
	.word	201470
	.half	3
	.word	.L130
	.byte	4
.L128:
	.byte	1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L131
.L252:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L297:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	178
.L299:
	.byte	4
	.byte	'Adc_lGetAdcKernel',0,3,1,175,37,21
	.word	157
	.byte	1,1
.L302:
	.byte	5
	.byte	'GroupId',0,1,175,37,59
	.word	200
.L304:
	.byte	6,0,3
	.word	178
.L305:
	.byte	4
	.byte	'Adc_lGetKernelGroupId',0,3,1,208,37,28
	.word	178
	.byte	1,1
.L307:
	.byte	5
	.byte	'GroupId',0,1,208,37,70
	.word	254
.L309:
	.byte	6,0
.L676:
	.byte	7
	.word	178
	.byte	8,4
	.word	312
	.byte	9,0,0
.L286:
	.byte	2
	.byte	'unsigned char',0,1,8,10,1,153,3,9,4,11
	.byte	'ActiveGroupId',0
	.word	178
	.byte	2,2,35,0,11
	.byte	'ActiveLimitChkCh',0
	.word	326
	.byte	1,2,35,2,11
	.byte	'IsrNoServiceFlag',0
	.word	326
	.byte	1,2,35,3,0,8,4
	.word	343
	.byte	9,0,0,8,1
	.word	326
	.byte	9,0,0,10,1,167,3,9,32,11
	.byte	'GrpResBuffer',0
	.word	317
	.byte	4,2,35,0,11
	.byte	'GrpStatus',0
	.word	157
	.byte	4,2,35,4,11
	.byte	'GrpResultStatus',0
	.word	157
	.byte	4,2,35,8,11
	.byte	'GrpBufferEndResultStatus',0
	.word	157
	.byte	4,2,35,12,11
	.byte	'GrpNotifStatus',0
	.word	157
	.byte	4,2,35,16,11
	.byte	'RSData',0
	.word	425
	.byte	4,2,35,20,11
	.byte	'AllRunningChannels',0
	.word	178
	.byte	2,2,35,24,11
	.byte	'AllRunningResReg',0
	.word	178
	.byte	2,2,35,26,11
	.byte	'NumofValidConRes',0
	.word	434
	.byte	1,2,35,28,0
.L292:
	.byte	7
	.word	443
	.byte	3
	.word	157
	.byte	3
	.word	157
.L310:
	.byte	4
	.byte	'Adc_lGetKernelDataAddress',0,3,1,241,37,34
	.word	670
	.byte	1,1
.L312:
	.byte	5
	.byte	'KernelId',0,1,242,37,50
	.word	675
.L314:
	.byte	5
	.byte	'CoreId',0,1,242,37,73
	.word	680
.L316:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L334:
	.byte	12
	.byte	'Adc_lSetGroupStatusBusyAtomic',0,3,1,204,38,19,1,1
.L337:
	.byte	5
	.byte	'KernelDataPtr',0,1,205,38,32
	.word	759
.L339:
	.byte	5
	.byte	'GroupId',0,1,205,38,67
	.word	764
.L341:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L687:
	.byte	12
	.byte	'Adc_lSetGroupResultAtomic',0,3,1,245,38,19,1,1
.L690:
	.byte	5
	.byte	'KernelDataPtr',0,1,246,38,32
	.word	849
.L692:
	.byte	5
	.byte	'GroupId',0,1,246,38,67
	.word	854
.L694:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L695:
	.byte	12
	.byte	'Adc_lSetResBuffEndStatusAtomic',0,3,1,157,39,19,1,1
.L697:
	.byte	5
	.byte	'KernelDataPtr',0,1,158,39,32
	.word	935
.L699:
	.byte	5
	.byte	'GroupId',0,1,158,39,67
	.word	940
.L701:
	.byte	6,0
.L571:
	.byte	12
	.byte	'Adc_lSetStartupCalStatusAtomic',0,3,1,236,39,19,1,1
.L574:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L390:
	.byte	12
	.byte	'Adc_lClrGroupStatusBusyAtomic',0,3,1,142,40,19,1,1
.L393:
	.byte	5
	.byte	'KernelDataPtr',0,1,143,40,32
	.word	1067
.L395:
	.byte	5
	.byte	'GroupId',0,1,143,40,67
	.word	1072
.L397:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L342:
	.byte	12
	.byte	'Adc_lClrGroupResultAtomic',0,3,1,182,40,19,1,1
.L344:
	.byte	5
	.byte	'KernelDataPtr',0,1,183,40,32
	.word	1157
.L346:
	.byte	5
	.byte	'GroupId',0,1,183,40,67
	.word	1162
.L348:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L349:
	.byte	12
	.byte	'Adc_lClrResBuffEndStatusAtomic',0,3,1,223,40,19,1,1
.L351:
	.byte	5
	.byte	'KernelDataPtr',0,1,224,40,32
	.word	1243
.L353:
	.byte	5
	.byte	'GroupId',0,1,224,40,67
	.word	1248
.L355:
	.byte	6,0
.L269:
	.byte	12
	.byte	'Adc_lClrStartupCalStatusAtomic',0,3,1,178,41,19,1,1
.L271:
	.byte	6,0,3
	.word	443
.L500:
	.byte	7
	.word	1375
	.byte	3
	.word	1380
	.byte	3
	.word	178
.L372:
	.byte	4
	.byte	'Adc_lGetGroupStatus',0,3,1,213,41,21
	.word	157
	.byte	1,1
.L375:
	.byte	5
	.byte	'KernelDataPtr',0,1,214,41,36
	.word	1385
.L377:
	.byte	5
	.byte	'GroupId',0,1,214,41,72
	.word	1390
.L379:
	.byte	6,0,3
	.word	1380
	.byte	3
	.word	178
.L443:
	.byte	4
	.byte	'Adc_lGetGroupResultStatus',0,3,1,249,41,21
	.word	157
	.byte	1,1
.L445:
	.byte	5
	.byte	'KernelDataPtr',0,1,250,41,37
	.word	1469
.L447:
	.byte	5
	.byte	'GroupId',0,1,250,41,71
	.word	1474
.L449:
	.byte	6,0,3
	.word	1380
	.byte	3
	.word	178
.L517:
	.byte	4
	.byte	'Adc_lGetResBuffEndStatus',0,3,1,156,42,21
	.word	157
	.byte	1,1
.L520:
	.byte	5
	.byte	'KernelDataPtr',0,1,157,42,38
	.word	1559
.L522:
	.byte	5
	.byte	'GroupId',0,1,157,42,72
	.word	1564
.L524:
	.byte	6,0
.L579:
	.byte	4
	.byte	'Adc_lGetStartupCalStatusAtomic',0,3,1,229,42,21
	.word	157
	.byte	1,1
.L582:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L472:
	.byte	12
	.byte	'Adc_lSetGrpNotifAtomic',0,3,1,198,39,19,1,1
.L474:
	.byte	5
	.byte	'KernelDataPtr',0,1,199,39,32
	.word	1693
.L476:
	.byte	5
	.byte	'GroupId',0,1,199,39,67
	.word	1698
.L478:
	.byte	6,0,3
	.word	670
	.byte	3
	.word	178
.L404:
	.byte	12
	.byte	'Adc_lClrGrpNotifAtomic',0,3,1,137,41,19,1,1
.L407:
	.byte	5
	.byte	'KernelDataPtr',0,1,138,41,32
	.word	1776
.L409:
	.byte	5
	.byte	'GroupId',0,1,138,41,67
	.word	1781
.L411:
	.byte	6,0,3
	.word	1380
	.byte	3
	.word	178
.L741:
	.byte	4
	.byte	'Adc_lGetGroupNotifStatus',0,3,1,194,42,21
	.word	157
	.byte	1,1
.L744:
	.byte	5
	.byte	'KernelDataPtr',0,1,195,42,37
	.word	1859
.L746:
	.byte	5
	.byte	'GroupId',0,1,195,42,72
	.word	1864
.L748:
	.byte	6,0,3
	.word	157
.L256:
	.byte	12
	.byte	'Adc_lInit',0,3,1,229,44,19,1,1
.L258:
	.byte	5
	.byte	'CoreId',0,1,229,44,42
	.word	1948
.L260:
	.byte	13,6,6,6,0,0
.L263:
	.byte	12
	.byte	'Adc_lResetGlobalSfr',0,3,1,175,47,19,1,1
.L266:
	.byte	6,0,10,2,253,2,9,24,11
	.byte	'GrpAnalogFuncCfg',0
	.word	157
	.byte	4,2,35,0,11
	.byte	'GrpArbitCfg',0
	.word	157
	.byte	4,2,35,4,11
	.byte	'GrpArbitPrioCfg',0
	.word	157
	.byte	4,2,35,8,11
	.byte	'KernelInputClass0Cfg',0
	.word	157
	.byte	4,2,35,12,11
	.byte	'KernelInputClass1Cfg',0
	.word	157
	.byte	4,2,35,16,11
	.byte	'GrpSyncCtrlCfg',0
	.word	157
	.byte	4,2,35,20,0,3
	.word	2023
.L284:
	.byte	7
	.word	2186
	.byte	10,2,243,2,9,12,11
	.byte	'ChannelChctrCfg',0
	.word	157
	.byte	4,2,35,0,11
	.byte	'BoundaryValues',0
	.word	157
	.byte	4,2,35,4,11
	.byte	'AnChannelNo',0
	.word	326
	.byte	1,2,35,8,11
	.byte	'LimitCheckEnabled',0
	.word	326
	.byte	1,2,35,9,0,3
	.word	2196
.L616:
	.byte	7
	.word	2300
	.byte	14,1,1,7
	.word	2310
	.byte	15
	.byte	'Adc_NotifyFnPtrType',0,2,201,1,16
	.word	2313
	.byte	10,2,199,2,9,8,11
	.byte	'ASChannelId',0
	.word	326
	.byte	1,2,35,0,11
	.byte	'AnalogChannelNo',0
	.word	326
	.byte	1,2,35,1,11
	.byte	'ResultReg',0
	.word	326
	.byte	1,2,35,2,11
	.byte	'AnChDiagnosticsCfg',0
	.word	157
	.byte	4,2,35,4,0,3
	.word	2347
.L618:
	.byte	7
	.word	2447
	.byte	10,3,240,1,9,36,11
	.byte	'TimerType',0
	.word	157
	.byte	4,2,35,0,11
	.byte	'TimerId',0
	.word	157
	.byte	4,2,35,4,11
	.byte	'TimerChCtrlReg',0
	.word	157
	.byte	4,2,35,8,11
	.byte	'TimerChCN0Reg',0
	.word	157
	.byte	4,2,35,12,11
	.byte	'TimerChCM0Reg',0
	.word	157
	.byte	4,2,35,16,11
	.byte	'TimerChCM1Reg',0
	.word	157
	.byte	4,2,35,20,11
	.byte	'TimerChSR0Reg',0
	.word	157
	.byte	4,2,35,24,11
	.byte	'TimerChSR1Reg',0
	.word	157
	.byte	4,2,35,28,11
	.byte	'TimerChIntEnMode',0
	.word	157
	.byte	4,2,35,32,0,3
	.word	2457
	.byte	7
	.word	2665
	.byte	10,2,189,2,9,6,11
	.byte	'EruEicrCfg',0
	.word	178
	.byte	2,2,35,0,11
	.byte	'EruIgcrCfg',0
	.word	178
	.byte	2,2,35,2,11
	.byte	'ErsChannel',0
	.word	326
	.byte	1,2,35,4,11
	.byte	'OguChannel',0
	.word	326
	.byte	1,2,35,5,0,3
	.word	2675
	.byte	7
	.word	2762
	.byte	10,2,209,2,9,60,11
	.byte	'NotifyPtr',0
	.word	2318
	.byte	4,2,35,0,11
	.byte	'GroupDefinition',0
	.word	2452
	.byte	4,2,35,4,11
	.byte	'GtmTrigCfg',0
	.word	2670
	.byte	4,2,35,8,11
	.byte	'GtmGateCfg',0
	.word	2670
	.byte	4,2,35,12,11
	.byte	'EruTrigCfg',0
	.word	2767
	.byte	4,2,35,16,11
	.byte	'EruGateCfg',0
	.word	2767
	.byte	4,2,35,20,11
	.byte	'GroupQCtrlCfg',0
	.word	157
	.byte	4,2,35,24,11
	.byte	'GroupQModeCfg',0
	.word	157
	.byte	4,2,35,28,11
	.byte	'AliasChCfg',0
	.word	157
	.byte	4,2,35,32,11
	.byte	'GrpReqTmCfg',0
	.word	157
	.byte	4,2,35,36,11
	.byte	'ChannelMask',0
	.word	178
	.byte	2,2,35,40,11
	.byte	'ResultRegMask',0
	.word	178
	.byte	2,2,35,42,11
	.byte	'SyncChannelMask',0
	.word	178
	.byte	2,2,35,44,11
	.byte	'SyncResRegMask',0
	.word	178
	.byte	2,2,35,46,11
	.byte	'TriggerSource',0
	.word	326
	.byte	1,2,35,48,11
	.byte	'ConvMode',0
	.word	326
	.byte	1,2,35,49,11
	.byte	'AccessMode',0
	.word	326
	.byte	1,2,35,50,11
	.byte	'StreamMode',0
	.word	326
	.byte	1,2,35,51,11
	.byte	'NumOfSamples',0
	.word	326
	.byte	1,2,35,52,11
	.byte	'HwTrigType',0
	.word	326
	.byte	1,2,35,53,11
	.byte	'HwGateType',0
	.word	326
	.byte	1,2,35,54,11
	.byte	'GrpPriority',0
	.word	326
	.byte	1,2,35,55,11
	.byte	'NoOfChannels',0
	.word	326
	.byte	1,2,35,56,11
	.byte	'LimitCheckGroup',0
	.word	326
	.byte	1,2,35,57,11
	.byte	'GrpEmuxCfg',0
	.word	326
	.byte	1,2,35,58,11
	.byte	'DiagnosticChGrp',0
	.word	326
	.byte	1,2,35,59,0,3
	.word	2772
.L329:
	.byte	7
	.word	3339
	.byte	8,3
	.word	326
	.byte	9,2,0,10,2,137,3,9,28,11
	.byte	'HwCfgPtr',0
	.word	2191
	.byte	4,2,35,0,11
	.byte	'ChCfgPtr',0
	.word	2305
	.byte	4,2,35,4,11
	.byte	'GrpCfgPtr',0
	.word	3344
	.byte	4,2,35,8,11
	.byte	'SwTrigGrpMask',0
	.word	157
	.byte	4,2,35,12,11
	.byte	'HwTrigGrpMask',0
	.word	157
	.byte	4,2,35,16,11
	.byte	'SyncConvMode',0
	.word	326
	.byte	1,2,35,20,11
	.byte	'SlaveKernels',0
	.word	3349
	.byte	3,2,35,21,11
	.byte	'NoOfGroups',0
	.word	326
	.byte	1,2,35,24,11
	.byte	'SRNUsed',0
	.word	326
	.byte	1,2,35,25,0,3
	.word	3358
	.byte	7
	.word	3547
	.byte	3
	.word	3552
	.byte	3
	.word	157
.L272:
	.byte	12
	.byte	'Adc_lKernelInit',0,3,1,230,50,19,1,1
.L275:
	.byte	5
	.byte	'KernelCfgPtr',0,1,230,50,66
	.word	3557
.L277:
	.byte	5
	.byte	'KernelId',0,1,231,50,48
	.word	3562
.L279:
	.byte	6,0,7
	.word	2310
	.byte	3
	.word	670
	.byte	3
	.word	3344
	.byte	3
	.word	326
.L380:
	.byte	12
	.byte	'Adc_lRemoveActiveGroup',0,3,1,129,73,19,1,1
.L383:
	.byte	5
	.byte	'KernelDataPtr',0,1,130,73,64
	.word	3638
.L385:
	.byte	5
	.byte	'GrpPtr',0,1,131,73,69
	.word	3643
.L387:
	.byte	5
	.byte	'ReqSrc',0,1,132,73,50
	.word	3648
.L389:
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,16
	.byte	'__extru',0
	.word	3741
	.byte	1,1,1,1,17
	.word	3757
	.byte	17
	.word	3757
	.byte	17
	.word	3757
	.byte	0,18
	.byte	'void',0,19
	.word	3797
	.byte	7
	.word	3803
	.byte	3
	.word	3808
	.byte	3
	.word	157
	.byte	20
	.byte	'Mcal_WritePeripEndInitProtReg',0,4,165,4,13,1,1,1,1,5
	.byte	'RegAddress',0,4,166,4,24
	.word	3813
	.byte	5
	.byte	'DataValue',0,4,166,4,49
	.word	3818
	.byte	0,21
	.byte	'Mcal_GetCpuIndex',0,4,183,6,15
	.word	157
	.byte	1,1,1,1,10,2,152,3,9,16,11
	.byte	'GlobalCfg',0
	.word	157
	.byte	4,2,35,0,11
	.byte	'GlobInputClass0Cfg',0
	.word	157
	.byte	4,2,35,4,11
	.byte	'GlobInputClass1Cfg',0
	.word	157
	.byte	4,2,35,8,11
	.byte	'GlobEmuxGrpInterfaceCfg',0
	.word	157
	.byte	4,2,35,12,0,3
	.word	3932
	.byte	7
	.word	4047
	.byte	8,48
	.word	3552
	.byte	9,11,0,10,2,162,3,9,48,11
	.byte	'HwUnitCfgPtr',0
	.word	4057
	.byte	48,2,35,0,0,3
	.word	4066
	.byte	7
	.word	4095
	.byte	8,24
	.word	4100
	.byte	9,5,0,10,2,169,3,9,28,11
	.byte	'GlobalCfgPtr',0
	.word	4052
	.byte	4,2,35,0,11
	.byte	'CoreCfgPtr',0
	.word	4105
	.byte	24,2,35,4,0,3
	.word	4114
.L750:
	.byte	7
	.word	4163
.L250:
	.byte	3
	.word	4168
	.byte	22
	.byte	'_Ifx_EVADC_GLOB_ICLASS_Bits',0,5,149,2,16,4,23
	.byte	'STCS',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'AIPS',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'CMS',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SESPS',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'reserved_11',0,1
	.word	326
	.byte	5,0,2,35,1,23
	.byte	'STCE',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'AIPE',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'CME',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'SESPE',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	5,0,2,35,3,0,24,5,148,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4178
	.byte	4,2,35,0,0,8,8
	.word	4432
	.byte	9,1,0,8,16
	.word	326
	.byte	9,15,0,22
	.byte	'_Ifx_EVADC_GLOB_BOUND_Bits',0,5,250,1,16,4,23
	.byte	'BOUNDARY0',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'BOUNDARY1',0,2
	.word	178
	.byte	12,4,2,35,2,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,24,5,252,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4490
	.byte	4,2,35,0,0,8,36
	.word	326
	.byte	9,35,0,22
	.byte	'_Ifx_EVADC_GLOB_EFLAG_Bits',0,5,131,2,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'REVGLB',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'reserved_9',0,4
	.word	3741
	.byte	15,8,2,35,0,23
	.byte	'REVGLBCLR',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'reserved_25',0,1
	.word	326
	.byte	7,0,2,35,3,0,24,5,132,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4661
	.byte	4,2,35,0,0,8,92
	.word	326
	.byte	9,91,0,22
	.byte	'_Ifx_EVADC_GLOB_EVNP_Bits',0,5,141,2,16,4,23
	.byte	'reserved_0',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'REV0NP',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'reserved_20',0,2
	.word	178
	.byte	12,0,2,35,2,0,24,5,140,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4850
	.byte	4,2,35,0,0,8,28
	.word	326
	.byte	9,27,0,22
	.byte	'_Ifx_EVADC_GLOB_TF_Bits',0,5,209,2,16,4,23
	.byte	'CDCH',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'CDGR',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'CDEN',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'CDSEL',0,1
	.word	326
	.byte	2,5,2,35,1,23
	.byte	'reserved_11',0,1
	.word	326
	.byte	4,1,2,35,1,23
	.byte	'CDWC',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'PDD',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'MDPD',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'MDPU',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	4,1,2,35,2,23
	.byte	'MDWC',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	8,0,2,35,3,0,24,5,188,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	4995
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_GLOB_TE_Bits',0,5,201,2,16,4,23
	.byte	'TFEP',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'TFES',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	20,0,2,35,0,0,24,5,180,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5279
	.byte	4,2,35,0,0,8,152,2
	.word	326
	.byte	9,151,2,0,22
	.byte	'_Ifx_EVADC_GLOB_RCR_Bits',0,5,166,2,16,4,23
	.byte	'reserved_0',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'DRCTR',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'reserved_20',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'WFR',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'reserved_25',0,1
	.word	326
	.byte	6,1,2,35,3,23
	.byte	'SRGEN',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,156,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5416
	.byte	4,2,35,0,0,8,124
	.word	326
	.byte	9,123,0,22
	.byte	'_Ifx_EVADC_GLOB_RES_Bits',0,5,177,2,16,4,23
	.byte	'RESULT',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'GNR',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CHNR',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'EMUX',0,1
	.word	326
	.byte	3,4,2,35,3,23
	.byte	'CRS',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'VF',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,164,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5614
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_GLOB_RESD_Bits',0,5,189,2,16,4,23
	.byte	'RESULT',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'GNR',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CHNR',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'EMUX',0,1
	.word	326
	.byte	3,4,2,35,3,23
	.byte	'CRS',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'VF',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,172,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	5803
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_GLOB',0,5,141,11,25,228,5,11
	.byte	'ICLASS',0
	.word	4472
	.byte	8,2,35,0,11
	.byte	'reserved_8',0
	.word	4481
	.byte	16,2,35,8,11
	.byte	'BOUND',0
	.word	4612
	.byte	4,2,35,24,11
	.byte	'reserved_1C',0
	.word	4652
	.byte	36,2,35,28,11
	.byte	'EFLAG',0
	.word	4801
	.byte	4,2,35,64,11
	.byte	'reserved_44',0
	.word	4841
	.byte	92,2,35,68,11
	.byte	'EVNP',0
	.word	4946
	.byte	4,3,35,160,1,11
	.byte	'reserved_A4',0
	.word	4986
	.byte	28,3,35,164,1,11
	.byte	'TF',0
	.word	5239
	.byte	4,3,35,192,1,11
	.byte	'TE',0
	.word	5365
	.byte	4,3,35,196,1,11
	.byte	'reserved_C8',0
	.word	5405
	.byte	152,2,3,35,200,1,11
	.byte	'RCR',0
	.word	5565
	.byte	4,3,35,224,3,11
	.byte	'reserved_1E4',0
	.word	5605
	.byte	124,3,35,228,3,11
	.byte	'RES',0
	.word	5763
	.byte	4,3,35,224,4,11
	.byte	'reserved_264',0
	.word	5605
	.byte	124,3,35,228,4,11
	.byte	'RESD',0
	.word	5953
	.byte	4,3,35,224,5,0,19
	.word	5993
.L267:
	.byte	7
	.word	6300
	.byte	22
	.byte	'_Ifx_EVADC_G_TRCTR_Bits',0,5,190,6,16,4,23
	.byte	'TSC',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	8,2,2,35,0,23
	.byte	'QACT',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'OV',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'TSCSET',0,1
	.word	326
	.byte	6,2,2,35,2,23
	.byte	'reserved_22',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'ITSEL',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'SRDIS',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	2,1,2,35,3,23
	.byte	'COV',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,204,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	6310
	.byte	4,2,35,0,0,8,108
	.word	326
	.byte	9,107,0,22
	.byte	'_Ifx_EVADC_G_ARBCFG_Bits',0,5,252,2,16,4,23
	.byte	'ANONC',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,2
	.word	178
	.byte	14,0,2,35,0,23
	.byte	'ANONS',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'CSRC',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'CHNR',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'SYNRUN',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'CAL',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'BUSY',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'SAMPLE',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,212,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	6593
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_ARBPR_Bits',0,5,140,3,16,4,23
	.byte	'PRIO0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CSM0',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'PRIO1',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'CSM1',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'PRIO2',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'reserved_10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'CSM2',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	12,8,2,35,0,23
	.byte	'ASEN0',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'ASEN1',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'ASEN2',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	5,0,2,35,3,0,24,5,220,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	6866
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_ANCFG_Bits',0,5,235,2,16,4,23
	.byte	'IPE',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'BE',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'RPE',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'RPC',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'CALSTC',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'DPCAL',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'reserved_7',0,2
	.word	178
	.byte	9,0,2,35,0,23
	.byte	'ACSD',0,1
	.word	326
	.byte	3,5,2,35,2,23
	.byte	'SSE',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'DIVA',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'DCMSB',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	6,0,2,35,3,0,24,5,204,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7200
	.byte	4,2,35,0,0,8,20
	.word	326
	.byte	9,19,0,22
	.byte	'_Ifx_EVADC_G_ICLASS_Bits',0,5,154,4,16,4,23
	.byte	'STCS',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'AIPS',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'CMS',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SESPS',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'reserved_11',0,1
	.word	326
	.byte	5,0,2,35,1,23
	.byte	'STCE',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'AIPE',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'CME',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'SESPE',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	5,0,2,35,3,0,24,5,164,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7483
	.byte	4,2,35,0,0,8,8
	.word	7734
	.byte	9,1,0,8,8
	.word	326
	.byte	9,7,0,22
	.byte	'_Ifx_EVADC_G_ALIAS_Bits',0,5,226,2,16,4,23
	.byte	'ALIAS0',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'ALIAS1',0,1
	.word	326
	.byte	5,3,2,35,1,23
	.byte	'reserved_13',0,4
	.word	3741
	.byte	19,0,2,35,0,0,24,5,196,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7792
	.byte	4,2,35,0,0,8,4
	.word	326
	.byte	9,3,0,22
	.byte	'_Ifx_EVADC_G_BOUND_Bits',0,5,159,3,16,4,23
	.byte	'BOUNDARY0',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'BOUNDARY1',0,2
	.word	178
	.byte	12,4,2,35,2,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,24,5,228,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	7953
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_SYNCTR_Bits',0,5,179,6,16,4,23
	.byte	'STSEL',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'EVALR1',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'EVALR2',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'EVALR3',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'reserved_7',0,4
	.word	3741
	.byte	25,0,2,35,0,0,24,5,196,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8112
	.byte	4,2,35,0,0,8,60
	.word	326
	.byte	9,59,0,22
	.byte	'_Ifx_EVADC_G_Q_QCTRL_Bits',0,5,203,4,16,4,23
	.byte	'SRCRESREG',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'TRSEL',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'XTSEL',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'XTLVL',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'XTMODE',0,1
	.word	326
	.byte	2,1,2,35,1,23
	.byte	'XTWC',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'GTSEL',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'GTLVL',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	2,1,2,35,2,23
	.byte	'GTWC',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'TMEN',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	2,1,2,35,3,23
	.byte	'TMWC',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,188,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8308
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_QMR_Bits',0,5,239,4,16,4,23
	.byte	'ENGT',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'ENTR',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	5,0,2,35,0,23
	.byte	'CLRV',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'TREV',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'FLUSH',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'CEV',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'RPTDIS',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,2
	.word	178
	.byte	15,0,2,35,2,0,24,5,204,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8660
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_QSR_Bits',0,5,254,4,16,4,23
	.byte	'FILL',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'EMPTY',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'REQGT',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'EV',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'reserved_9',0,4
	.word	3741
	.byte	23,0,2,35,0,0,24,5,212,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	8913
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_Q0R_Bits',0,5,171,4,16,4,23
	.byte	'REQCHNR',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'RF',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'ENSI',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EXTR',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'V',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'PDD',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'MDPD',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'MDPU',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'CDEN',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'CDSEL',0,1
	.word	326
	.byte	2,1,2,35,1,23
	.byte	'reserved_15',0,4
	.word	3741
	.byte	17,0,2,35,0,0,24,5,172,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9114
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_QINR_Bits',0,5,223,4,16,4,23
	.byte	'REQCHNR',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'RF',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'ENSI',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EXTR',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'PDD',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'MDPD',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'MDPU',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'CDEN',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'CDSEL',0,1
	.word	326
	.byte	2,1,2,35,1,23
	.byte	'reserved_15',0,4
	.word	3741
	.byte	17,0,2,35,0,0,24,5,196,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9366
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_QBUR_Bits',0,5,187,4,16,4,23
	.byte	'REQCHNR',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'RF',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'ENSI',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EXTR',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'V',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'PDD',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'MDPD',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'MDPU',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'CDEN',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'CDSEL',0,1
	.word	326
	.byte	2,1,2,35,1,23
	.byte	'reserved_15',0,4
	.word	3741
	.byte	17,0,2,35,0,0,24,5,180,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9628
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_REQTM_Bits',0,5,138,5,16,4,23
	.byte	'SEQMOD',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	4,2,2,35,0,23
	.byte	'SEQTIMSET',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'REQTS',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'ENTR',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'reserved_18',0,1
	.word	326
	.byte	4,2,2,35,2,23
	.byte	'SEQTIMOFF',0,2
	.word	178
	.byte	10,0,2,35,2,0,24,5,220,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	9881
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q_REQTS_Bits',0,5,150,5,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'SEQTIMER',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,228,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10092
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_Q',0,5,174,11,25,32,11
	.byte	'QCTRL',0
	.word	8620
	.byte	4,2,35,0,11
	.byte	'QMR',0
	.word	8873
	.byte	4,2,35,4,11
	.byte	'QSR',0
	.word	9074
	.byte	4,2,35,8,11
	.byte	'Q0R',0
	.word	9326
	.byte	4,2,35,12,11
	.byte	'QINR',0
	.word	9588
	.byte	4,2,35,16,11
	.byte	'QBUR',0
	.word	9841
	.byte	4,2,35,20,11
	.byte	'REQTM',0
	.word	10052
	.byte	4,2,35,24,11
	.byte	'REQTS',0
	.word	10190
	.byte	4,2,35,28,0,8,96
	.word	10230
	.byte	9,2,0,19
	.word	10364
	.byte	8,32
	.word	326
	.byte	9,31,0,22
	.byte	'_Ifx_EVADC_G_CEFLAG_Bits',0,5,190,3,16,4,23
	.byte	'CEV0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CEV1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'CEV2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CEV3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'CEV4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'CEV5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'CEV6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'CEV7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'CEV8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'CEV9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'CEV10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'CEV11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'CEV12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'CEV13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'CEV14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'CEV15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,244,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10387
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_REFLAG_Bits',0,5,193,5,16,4,23
	.byte	'REV0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'REV1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'REV2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'REV3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'REV4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'REV5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'REV6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'REV7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'REV8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'REV9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'REV10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'REV11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'REV12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'REV13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'REV14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'REV15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,252,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	10744
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_SEFLAG_Bits',0,5,146,6,16,4,23
	.byte	'SEV0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'SEV1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'SEV2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,4
	.word	3741
	.byte	29,0,2,35,0,0,24,5,172,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11101
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_CEFCLR_Bits',0,5,168,3,16,4,23
	.byte	'CEV0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CEV1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'CEV2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CEV3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'CEV4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'CEV5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'CEV6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'CEV7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'CEV8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'CEV9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'CEV10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'CEV11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'CEV12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'CEV13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'CEV14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'CEV15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,236,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11243
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_REFCLR_Bits',0,5,171,5,16,4,23
	.byte	'REV0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'REV1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'REV2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'REV3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'REV4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'REV5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'REV6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'REV7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'REV8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'REV9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'REV10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'REV11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'REV12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'REV13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'REV14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'REV15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,244,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11600
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_SEFCLR_Bits',0,5,137,6,16,4,23
	.byte	'SEV0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'SEV1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'SEV2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,4
	.word	3741
	.byte	29,0,2,35,0,0,24,5,164,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	11957
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_CEVNP0_Bits',0,5,212,3,16,4,23
	.byte	'CEV0NP',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'CEV1NP',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'CEV2NP',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'CEV3NP',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'CEV4NP',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CEV5NP',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'CEV6NP',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'CEV7NP',0,1
	.word	326
	.byte	4,0,2,35,3,0,24,5,252,8,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12099
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_CEVNP1_Bits',0,5,225,3,16,4,23
	.byte	'CEV8NP',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'CEV9NP',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'CEV10NP',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'CEV11NP',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'CEV12NP',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CEV13NP',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'CEV14NP',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'CEV15NP',0,1
	.word	326
	.byte	4,0,2,35,3,0,24,5,132,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12315
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_REVNP0_Bits',0,5,239,5,16,4,23
	.byte	'REV0NP',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'REV1NP',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'REV2NP',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'REV3NP',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'REV4NP',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'REV5NP',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'REV6NP',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'REV7NP',0,1
	.word	326
	.byte	4,0,2,35,3,0,24,5,148,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12537
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_REVNP1_Bits',0,5,252,5,16,4,23
	.byte	'REV8NP',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'REV9NP',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'REV10NP',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'REV11NP',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'REV12NP',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'REV13NP',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'REV14NP',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'REV15NP',0,1
	.word	326
	.byte	4,0,2,35,3,0,24,5,156,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12753
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_SEVNP_Bits',0,5,155,6,16,4,23
	.byte	'SEV0NP',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEV1NP',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEV2NP',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	20,0,2,35,0,0,24,5,180,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	12975
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_SRACT_Bits',0,5,164,6,16,4,23
	.byte	'AGSR0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'AGSR1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'AGSR2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'AGSR3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'ASSR0',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'ASSR1',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'ASSR2',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'ASSR3',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	20,0,2,35,0,0,24,5,188,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13123
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_EMUXCTR_Bits',0,5,137,4,16,4,23
	.byte	'EMUXSET',0,1
	.word	326
	.byte	3,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'EMUXMODE',0,1
	.word	326
	.byte	3,1,2,35,0,23
	.byte	'reserved_7',0,2
	.word	178
	.byte	5,4,2,35,0,23
	.byte	'EMXCOD',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'EMXST',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'EMXCSS',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'EMXWC',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'EMUXACT',0,1
	.word	326
	.byte	3,5,2,35,2,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'EMUXCCB',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'reserved_25',0,1
	.word	326
	.byte	7,0,2,35,3,0,24,5,156,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13375
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_EMUXCS_Bits',0,5,130,4,16,4,23
	.byte	'EMUXCH',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,148,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13685
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_VFR_Bits',0,5,206,6,16,4,23
	.byte	'VF0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'VF1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'VF2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'VF3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'VF4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'VF5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'VF6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'VF7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'VF8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'VF9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'VF10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'VF11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'VF12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'VF13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'VF14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'VF15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,24,5,212,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	13798
	.byte	4,2,35,0,0,22
	.byte	'_Ifx_EVADC_G_CHCTR_Bits',0,5,238,3,16,4,23
	.byte	'ICLSEL',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'BNDSELL',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'BNDSELU',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'CHEVMODE',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SYNC',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'REFSEL',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'BNDSELX',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'RESREG',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'RESTGT',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'RESPOS',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'reserved_22',0,2
	.word	178
	.byte	6,4,2,35,2,23
	.byte	'BWDCH',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'BWDEN',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'reserved_31',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,140,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14136
	.byte	4,2,35,0,0,8,64
	.word	14452
	.byte	9,15,0,8,64
	.word	326
	.byte	9,63,0,22
	.byte	'_Ifx_EVADC_G_RCR_Bits',0,5,158,5,16,4,23
	.byte	'reserved_0',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'DRCTR',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'DMM',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'reserved_22',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'WFR',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'FEN',0,1
	.word	326
	.byte	2,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	4,1,2,35,3,23
	.byte	'SRGEN',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,236,9,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14510
	.byte	4,2,35,0,0,8,64
	.word	14686
	.byte	9,15,0,22
	.byte	'_Ifx_EVADC_G_RES_Bits',0,5,215,5,16,4,23
	.byte	'RESULT',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'DRC',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CHNR',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'EMUX',0,1
	.word	326
	.byte	3,4,2,35,3,23
	.byte	'CRS',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'VF',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,132,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14735
	.byte	4,2,35,0,0,8,64
	.word	14881
	.byte	9,15,0,22
	.byte	'_Ifx_EVADC_G_RESD_Bits',0,5,227,5,16,4,23
	.byte	'RESULT',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'DRC',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CHNR',0,2
	.word	178
	.byte	5,7,2,35,2,23
	.byte	'EMUX',0,1
	.word	326
	.byte	3,4,2,35,3,23
	.byte	'CRS',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'VF',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,5,140,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	14930
	.byte	4,2,35,0,0,8,64
	.word	15077
	.byte	9,15,0,22
	.byte	'_Ifx_EVADC_G',0,5,199,11,25,128,8,11
	.byte	'reserved_0',0
	.word	4481
	.byte	16,2,35,0,11
	.byte	'TRCTR',0
	.word	6544
	.byte	4,2,35,16,11
	.byte	'reserved_14',0
	.word	6584
	.byte	108,2,35,20,11
	.byte	'ARBCFG',0
	.word	6826
	.byte	4,3,35,128,1,11
	.byte	'ARBPR',0
	.word	7160
	.byte	4,3,35,132,1,11
	.byte	'ANCFG',0
	.word	7434
	.byte	4,3,35,136,1,11
	.byte	'reserved_8C',0
	.word	7474
	.byte	20,3,35,140,1,11
	.byte	'ICLASS',0
	.word	7774
	.byte	8,3,35,160,1,11
	.byte	'reserved_A8',0
	.word	7783
	.byte	8,3,35,168,1,11
	.byte	'ALIAS',0
	.word	7904
	.byte	4,3,35,176,1,11
	.byte	'reserved_B4',0
	.word	7944
	.byte	4,3,35,180,1,11
	.byte	'BOUND',0
	.word	8072
	.byte	4,3,35,184,1,11
	.byte	'reserved_BC',0
	.word	7944
	.byte	4,3,35,188,1,11
	.byte	'SYNCTR',0
	.word	8259
	.byte	4,3,35,192,1,11
	.byte	'reserved_C4',0
	.word	8299
	.byte	60,3,35,196,1,11
	.byte	'Q',0
	.word	10373
	.byte	96,3,35,128,2,11
	.byte	'reserved_160',0
	.word	10378
	.byte	32,3,35,224,2,11
	.byte	'CEFLAG',0
	.word	10704
	.byte	4,3,35,128,3,11
	.byte	'REFLAG',0
	.word	11061
	.byte	4,3,35,132,3,11
	.byte	'SEFLAG',0
	.word	11203
	.byte	4,3,35,136,3,11
	.byte	'reserved_18C',0
	.word	7944
	.byte	4,3,35,140,3,11
	.byte	'CEFCLR',0
	.word	11560
	.byte	4,3,35,144,3,11
	.byte	'REFCLR',0
	.word	11917
	.byte	4,3,35,148,3,11
	.byte	'SEFCLR',0
	.word	12059
	.byte	4,3,35,152,3,11
	.byte	'reserved_19C',0
	.word	7944
	.byte	4,3,35,156,3,11
	.byte	'CEVNP0',0
	.word	12275
	.byte	4,3,35,160,3,11
	.byte	'CEVNP1',0
	.word	12497
	.byte	4,3,35,164,3,11
	.byte	'reserved_1A8',0
	.word	7783
	.byte	8,3,35,168,3,11
	.byte	'REVNP0',0
	.word	12713
	.byte	4,3,35,176,3,11
	.byte	'REVNP1',0
	.word	12935
	.byte	4,3,35,180,3,11
	.byte	'reserved_1B8',0
	.word	7783
	.byte	8,3,35,184,3,11
	.byte	'SEVNP',0
	.word	13083
	.byte	4,3,35,192,3,11
	.byte	'reserved_1C4',0
	.word	7944
	.byte	4,3,35,196,3,11
	.byte	'SRACT',0
	.word	13335
	.byte	4,3,35,200,3,11
	.byte	'reserved_1CC',0
	.word	4652
	.byte	36,3,35,204,3,11
	.byte	'EMUXCTR',0
	.word	13645
	.byte	4,3,35,240,3,11
	.byte	'EMUXCS',0
	.word	13758
	.byte	4,3,35,244,3,11
	.byte	'VFR',0
	.word	14096
	.byte	4,3,35,248,3,11
	.byte	'reserved_1FC',0
	.word	7944
	.byte	4,3,35,252,3,11
	.byte	'CHCTR',0
	.word	14492
	.byte	64,3,35,128,4,11
	.byte	'reserved_240',0
	.word	14501
	.byte	64,3,35,192,4,11
	.byte	'RCR',0
	.word	14726
	.byte	64,3,35,128,5,11
	.byte	'reserved_2C0',0
	.word	14501
	.byte	64,3,35,192,5,11
	.byte	'RES',0
	.word	14921
	.byte	64,3,35,128,6,11
	.byte	'reserved_340',0
	.word	14501
	.byte	64,3,35,192,6,11
	.byte	'RESD',0
	.word	15117
	.byte	64,3,35,128,7,11
	.byte	'reserved_3C0',0
	.word	14501
	.byte	64,3,35,192,7,0,19
	.word	15126
.L282:
	.byte	7
	.word	16026
.L288:
	.byte	3
	.word	178
	.byte	3
	.word	178
.L419:
	.byte	7
	.word	16041
.L290:
	.byte	3
	.word	16046
.L318:
	.byte	3
	.word	178
.L357:
	.byte	3
	.word	178
.L413:
	.byte	3
	.word	178
.L415:
	.byte	3
	.word	312
.L458:
	.byte	3
	.word	178
.L480:
	.byte	3
	.word	178
.L498:
	.byte	3
	.word	178
.L532:
	.byte	3
	.word	178
	.byte	7
	.word	312
.L534:
	.byte	3
	.word	16096
.L584:
	.byte	3
	.word	157
	.byte	25
	.byte	'SchM_Enter_Adc_KernelData',0,6,42,13,1,1,1,1,25
	.byte	'SchM_Exit_Adc_KernelData',0,6,43,13,1,1,1,1,25
	.byte	'SchM_Enter_Adc_SrcRegAccess',0,6,46,13,1,1,1,1,25
	.byte	'SchM_Exit_Adc_SrcRegAccess',0,6,47,13,1,1,1,1,26
	.word	205
	.byte	27
	.word	235
	.byte	6,0,26
	.word	259
	.byte	27
	.word	293
	.byte	6,0,26
	.word	685
	.byte	27
	.word	723
	.byte	27
	.word	741
	.byte	6,0,26
	.word	769
	.byte	27
	.word	807
	.byte	27
	.word	830
	.byte	6,0,26
	.word	859
	.byte	27
	.word	893
	.byte	27
	.word	916
	.byte	6,0,26
	.word	945
	.byte	27
	.word	984
	.byte	27
	.word	1007
	.byte	6,0,26
	.word	1026
	.byte	6,0,26
	.word	1077
	.byte	27
	.word	1115
	.byte	27
	.word	1138
	.byte	6,0,26
	.word	1167
	.byte	27
	.word	1201
	.byte	27
	.word	1224
	.byte	6,0,26
	.word	1253
	.byte	27
	.word	1292
	.byte	27
	.word	1315
	.byte	6,0,26
	.word	1334
	.byte	6,0,26
	.word	1395
	.byte	27
	.word	1427
	.byte	27
	.word	1450
	.byte	6,0,26
	.word	1479
	.byte	27
	.word	1517
	.byte	27
	.word	1540
	.byte	6,0,26
	.word	1569
	.byte	27
	.word	1606
	.byte	27
	.word	1629
	.byte	6,0,26
	.word	1648
	.byte	6,0,26
	.word	1703
	.byte	27
	.word	1734
	.byte	27
	.word	1757
	.byte	6,0,26
	.word	1786
	.byte	27
	.word	1817
	.byte	27
	.word	1840
	.byte	6,0,26
	.word	1869
	.byte	27
	.word	1906
	.byte	27
	.word	1929
	.byte	6,0,26
	.word	1953
	.byte	27
	.word	1971
	.byte	13,28
	.word	1334
	.byte	29
	.word	1373
	.byte	0,6,28
	.word	1993
	.byte	29
	.word	2021
	.byte	0,6,28
	.word	3567
	.byte	27
	.word	3591
	.byte	27
	.word	3613
	.byte	29
	.word	3631
	.byte	0,6,0,0,26
	.word	1993
	.byte	6,0
.L588:
	.byte	3
	.word	157
	.byte	26
	.word	3567
	.byte	27
	.word	3591
	.byte	27
	.word	3613
	.byte	6,0
.L600:
	.byte	3
	.word	3552
.L602:
	.byte	3
	.word	157
.L608:
	.byte	3
	.word	157
.L610:
	.byte	3
	.word	178
.L612:
	.byte	3
	.word	157
.L627:
	.byte	3
	.word	3344
.L629:
	.byte	3
	.word	157
.L631:
	.byte	3
	.word	326
	.byte	19
	.word	10230
.L634:
	.byte	7
	.word	16643
.L642:
	.byte	3
	.word	3344
.L644:
	.byte	3
	.word	157
.L646:
	.byte	3
	.word	326
	.byte	22
	.byte	'_Ifx_SRC_SRCR_Bits',0,7,70,16,4,23
	.byte	'SRPN',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SRE',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'TOS',0,1
	.word	326
	.byte	3,2,2,35,1,23
	.byte	'reserved_14',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'ECC',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	3,0,2,35,2,23
	.byte	'SRR',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'CLRR',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'SETR',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'IOV',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'IOVCLR',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'SWS',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'SWSCLR',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'reserved_31',0,1
	.word	326
	.byte	1,0,2,35,3,0,24,7,95,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	16668
	.byte	4,2,35,0,0,19
	.word	16958
.L649:
	.byte	7
	.word	16997
.L652:
	.byte	3
	.word	3344
.L654:
	.byte	3
	.word	157
.L656:
	.byte	3
	.word	326
	.byte	26
	.word	3653
	.byte	27
	.word	3684
	.byte	27
	.word	3707
	.byte	27
	.word	3723
	.byte	6,0
.L666:
	.byte	3
	.word	157
.L668:
	.byte	3
	.word	178
.L670:
	.byte	3
	.word	157
	.byte	19
	.word	15126
	.byte	3
	.word	17059
.L672:
	.byte	7
	.word	17064
.L703:
	.byte	3
	.word	157
.L705:
	.byte	3
	.word	178
.L707:
	.byte	3
	.word	326
.L709:
	.byte	3
	.word	157
.L728:
	.byte	3
	.word	157
.L730:
	.byte	3
	.word	326
.L732:
	.byte	3
	.word	157
	.byte	30
	.byte	'__INDIRECT__',0,1,1,1,1,1,1,31,1,7
	.word	17129
	.byte	15
	.byte	'__codeptr',0,1,1,1
	.word	17131
	.byte	15
	.byte	'uint8',0,8,106,29
	.word	326
	.byte	15
	.byte	'uint16',0,8,110,29
	.word	178
	.byte	15
	.byte	'uint32',0,8,114,29
	.word	157
	.byte	15
	.byte	'Std_ReturnType',0,9,109,16
	.word	326
	.byte	15
	.byte	'unsigned_int',0,10,75,22
	.word	3741
	.byte	15
	.byte	'Ifx_UReg_8Bit',0,11,79,24
	.word	326
	.byte	15
	.byte	'Ifx_UReg_32Bit',0,11,81,24
	.word	3741
	.byte	15
	.byte	'Ifx_SReg_32Bit',0,11,84,24
	.word	3757
	.byte	22
	.byte	'_Ifx_GTM_ACCEN0_Bits',0,12,75,16,4,23
	.byte	'EN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'EN1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'EN2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'EN3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'EN4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'EN5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'EN6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EN7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'EN8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'EN9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'EN10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'EN11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'EN12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'EN13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'EN14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'EN15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'EN16',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'EN17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'EN18',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'EN19',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'EN20',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'EN21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'EN22',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'EN23',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'EN24',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'EN25',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'EN26',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'EN27',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'EN28',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'EN29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'EN30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'EN31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_GTM_ACCEN0_Bits',0,12,109,3
	.word	17310
	.byte	22
	.byte	'_Ifx_GTM_ACCEN1_Bits',0,12,112,16,4,23
	.byte	'reserved_0',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_GTM_ACCEN1_Bits',0,12,115,3
	.word	17867
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG_OUT0_Bits',0,12,118,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'SEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_ADCTRIG_OUT0_Bits',0,12,128,1,3
	.word	17944
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG_OUT1_Bits',0,12,131,1,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_GTM_ADCTRIG_OUT1_Bits',0,12,138,1,3
	.word	18140
	.byte	2
	.byte	'unsigned int',0,4,7,22
	.byte	'_Ifx_GTM_AEI_ADDR_XPT_Bits',0,12,141,1,16,4,23
	.byte	'TO_ADDR',0,4
	.word	18296
	.byte	20,12,2,35,0,23
	.byte	'TO_W1R0',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	11,0,2,35,0,0,15
	.byte	'Ifx_GTM_AEI_ADDR_XPT_Bits',0,12,146,1,3
	.word	18312
	.byte	22
	.byte	'_Ifx_GTM_AEI_STA_XPT_Bits',0,12,149,1,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	20,12,2,35,0,23
	.byte	'W1R0',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	11,0,2,35,0,0,15
	.byte	'Ifx_GTM_AEI_STA_XPT_Bits',0,12,154,1,3
	.word	18442
	.byte	22
	.byte	'_Ifx_GTM_ARU_ACCESS_Bits',0,12,157,1,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'RREQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'WREQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'reserved_14',0,4
	.word	18296
	.byte	18,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_ACCESS_Bits',0,12,164,1,3
	.word	18564
	.byte	22
	.byte	'_Ifx_GTM_ARU_CADDR_Bits',0,12,167,1,16,4,23
	.byte	'CADDR_0',0,4
	.word	18296
	.byte	7,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	9,16,2,35,0,23
	.byte	'CADDR_1',0,4
	.word	18296
	.byte	7,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	9,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_CADDR_Bits',0,12,173,1,3
	.word	18722
	.byte	22
	.byte	'_Ifx_GTM_ARU_CADDR_END_Bits',0,12,176,1,16,4,23
	.byte	'CADDR_END',0,4
	.word	18296
	.byte	7,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	25,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_CADDR_END_Bits',0,12,180,1,3
	.word	18868
	.byte	22
	.byte	'_Ifx_GTM_ARU_CTRL_Bits',0,12,183,1,16,4,23
	.byte	'ARU_0_DYN_EN',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'ARU_1_DYN_EN',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'ARU_DYN_RING_MODE',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_CTRL_Bits',0,12,189,1,3
	.word	18982
	.byte	22
	.byte	'_Ifx_GTM_ARU_DATA_H_Bits',0,12,192,1,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DATA_H_Bits',0,12,196,1,3
	.word	19142
	.byte	22
	.byte	'_Ifx_GTM_ARU_DATA_L_Bits',0,12,199,1,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DATA_L_Bits',0,12,203,1,3
	.word	19246
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,12,206,1,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0_Bits',0,12,210,1,3
	.word	19350
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,12,213,1,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1_Bits',0,12,217,1,3
	.word	19463
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,12,220,1,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H_Bits',0,12,224,1,3
	.word	19576
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,12,227,1,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L_Bits',0,12,231,1,3
	.word	19690
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,12,234,1,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H_Bits',0,12,238,1,3
	.word	19804
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,12,241,1,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L_Bits',0,12,245,1,3
	.word	19918
	.byte	22
	.byte	'_Ifx_GTM_ARU_DYN_CTRL_Bits',0,12,248,1,16,4,23
	.byte	'DYN_ARU_UPDATE_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'DYN_ROUTE_SWAP',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_CTRL_Bits',0,12,253,1,3
	.word	20032
	.byte	22
	.byte	'_Ifx_GTM_ARU_DYN_RDADDR_Bits',0,12,128,2,16,4,23
	.byte	'DYN_ARU_RDADDR',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_RDADDR_Bits',0,12,132,2,3
	.word	20178
	.byte	22
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_HIGH_Bits',0,12,135,2,16,4,23
	.byte	'DYN_READ_ID3',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'DYN_READ_ID4',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'DYN_READ_ID5',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'DYN_CLK_WAIT',0,4
	.word	18296
	.byte	4,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_HIGH_Bits',0,12,142,2,3
	.word	20299
	.byte	22
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_LOW_Bits',0,12,145,2,16,4,23
	.byte	'DYN_READ_ID0',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'DYN_READ_ID1',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'DYN_READ_ID2',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_LOW_Bits',0,12,151,2,3
	.word	20499
	.byte	22
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_SR_HIGH_Bits',0,12,154,2,16,4,23
	.byte	'DYN_READ_ID9',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'DYN_READ_ID10',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'DYN_READ_ID11',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'DYN_CLK_WAIT',0,4
	.word	18296
	.byte	4,4,2,35,0,23
	.byte	'DYN_UPDATE_EN',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_HIGH_Bits',0,12,162,2,3
	.word	20673
	.byte	22
	.byte	'_Ifx_GTM_ARU_DYN_ROUTE_SR_LOW_Bits',0,12,165,2,16,4,23
	.byte	'DYN_READ_ID6',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'DYN_READ_ID7',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'DYN_READ_ID8',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_LOW_Bits',0,12,171,2,3
	.word	20906
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_EN_Bits',0,12,174,2,16,4,23
	.byte	'NEW_DATA0_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'NEW_DATA1_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ACC_ACK_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_EN_Bits',0,12,180,2,3
	.word	21086
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,12,183,2,16,4,23
	.byte	'TRG_NEW_DATA0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_NEW_DATA1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_ACC_ACK',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT_Bits',0,12,189,2,3
	.word	21255
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_MODE_Bits',0,12,192,2,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_MODE_Bits',0,12,196,2,3
	.word	21425
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,12,199,2,16,4,23
	.byte	'NEW_DATA0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'NEW_DATA1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ACC_ACK',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY_Bits',0,12,205,2,3
	.word	21536
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,12,208,2,16,4,23
	.byte	'ACT_TB',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'TB_TRIG',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TBU_SEL',0,4
	.word	18296
	.byte	2,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	5,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB_Bits',0,12,214,2,3
	.word	21692
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,12,217,2,16,4,23
	.byte	'ENDIS_CTRL0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'ENDIS_CTRL1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'ENDIS_CTRL2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ENDIS_CTRL3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'ENDIS_CTRL4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'ENDIS_CTRL5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'ENDIS_CTRL6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'ENDIS_CTRL7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL_Bits',0,12,228,2,3
	.word	21846
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,12,231,2,16,4,23
	.byte	'ENDIS_STAT0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'ENDIS_STAT1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'ENDIS_STAT2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ENDIS_STAT3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'ENDIS_STAT4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'ENDIS_STAT5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'ENDIS_STAT6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'ENDIS_STAT7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT_Bits',0,12,242,2,3
	.word	22136
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,12,245,2,16,4,23
	.byte	'FUPD_CTRL0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'FUPD_CTRL1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'FUPD_CTRL2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'FUPD_CTRL3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'FUPD_CTRL4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'FUPD_CTRL5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'FUPD_CTRL6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'FUPD_CTRL7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'RSTCN0_CH0',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'RSTCN0_CH1',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'RSTCN0_CH2',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'RSTCN0_CH3',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'RSTCN0_CH4',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'RSTCN0_CH5',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'RSTCN0_CH6',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'RSTCN0_CH7',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL_Bits',0,12,135,3,3
	.word	22426
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,12,138,3,16,4,23
	.byte	'HOST_TRIG',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	7,24,2,35,0,23
	.byte	'RST_CH0',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'RST_CH1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'RST_CH2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'RST_CH3',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'RST_CH4',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'RST_CH5',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'RST_CH6',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'RST_CH7',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'UPEN_CTRL0',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'UPEN_CTRL1',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'UPEN_CTRL2',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'UPEN_CTRL3',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'UPEN_CTRL4',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'UPEN_CTRL5',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'UPEN_CTRL6',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'UPEN_CTRL7',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL_Bits',0,12,158,3,3
	.word	22859
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,12,161,3,16,4,23
	.byte	'INT_TRIG0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'INT_TRIG1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'INT_TRIG2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'INT_TRIG3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'INT_TRIG4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'INT_TRIG5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'INT_TRIG6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'INT_TRIG7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG_Bits',0,12,172,3,3
	.word	23309
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,12,175,3,16,4,23
	.byte	'OUTEN_CTRL0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'OUTEN_CTRL1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'OUTEN_CTRL2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'OUTEN_CTRL3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'OUTEN_CTRL4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'OUTEN_CTRL5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'OUTEN_CTRL6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'OUTEN_CTRL7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL_Bits',0,12,186,3,3
	.word	23579
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,12,189,3,16,4,23
	.byte	'OUTEN_STAT0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'OUTEN_STAT1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'OUTEN_STAT2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'OUTEN_STAT3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'OUTEN_STAT4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'OUTEN_STAT5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'OUTEN_STAT6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'OUTEN_STAT7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT_Bits',0,12,200,3,3
	.word	23869
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CM0_Bits',0,12,203,3,16,4,23
	.byte	'CM0',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CM0_Bits',0,12,207,3,3
	.word	24159
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CM1_Bits',0,12,210,3,16,4,23
	.byte	'CM1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CM1_Bits',0,12,214,3,3
	.word	24264
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CN0_Bits',0,12,217,3,16,4,23
	.byte	'CN0',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CN0_Bits',0,12,221,3,3
	.word	24369
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_CTRL_Bits',0,12,224,3,16,4,23
	.byte	'MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'TB12_SEL',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACB',0,4
	.word	18296
	.byte	5,23,2,35,0,23
	.byte	'CMP_CTRL',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'EUPM',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'CLK_SRC_SR',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'ECLK_SRC',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WR_REQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRIG_PULSE',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'UDMODE',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'RST_CCU0',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'OSM_TRIG',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'EXT_TRIG',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'EXTTRIGOUT',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TRIGOUT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'SLA',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'OSM',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ABM',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'EXT_FUPD',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'SOMB',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CTRL_Bits',0,12,250,3,3
	.word	24474
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,12,253,3,16,4,23
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN_Bits',0,12,130,4,3
	.word	24985
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,12,133,4,16,4,23
	.byte	'TRG_CCU0TC',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_CCU1TC',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT_Bits',0,12,138,4,3
	.word	25130
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,12,141,4,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE_Bits',0,12,145,4,3
	.word	25279
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,12,148,4,16,4,23
	.byte	'CCU0TC',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CCU1TC',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY_Bits',0,12,153,4,3
	.word	25398
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_RDADDR_Bits',0,12,156,4,16,4,23
	.byte	'RDADDR0',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	7,16,2,35,0,23
	.byte	'RDADDR1',0,4
	.word	18296
	.byte	9,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	7,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_RDADDR_Bits',0,12,162,4,3
	.word	25537
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMB_Bits',0,12,165,4,16,4,23
	.byte	'MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'TB12_SEL',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACB_1_0',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ACB_4_3_2',0,4
	.word	18296
	.byte	3,23,2,35,0,23
	.byte	'CMP_CTRL',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'EUPM',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WR_REQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	2,9,2,35,0,23
	.byte	'EXTTRIGOUT',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TRIGOUT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ABM',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'SOMB',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMB_Bits',0,12,191,4,3
	.word	25693
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMC_Bits',0,12,194,4,16,4,23
	.byte	'MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'TB12_SEL',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACB_1_0',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ACB_4_3_2',0,4
	.word	18296
	.byte	3,23,2,35,0,23
	.byte	'CMP_CTRL',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'EUPM',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WR_REQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	2,9,2,35,0,23
	.byte	'EXTTRIGOUT',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TRIGOUT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'SLA',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ABM',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMC_Bits',0,12,220,4,3
	.word	26244
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMI_Bits',0,12,223,4,16,4,23
	.byte	'MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACB0',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	4,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	3,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMI_Bits',0,12,248,4,3
	.word	26794
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMP_Bits',0,12,251,4,16,4,23
	.byte	'MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ADL',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'BITREV',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'SR0_TRIG',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'CLK_SRC_SR',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'ECLK_SRC',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRIG_PULSE',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'UDMODE',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'RST_CCU0',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'OSM_TRIG',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'EXT_TRIG',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'EXTTRIGOUT',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TRIGOUT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'OSM',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'EXT_FUPD',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMP_Bits',0,12,152,5,3
	.word	27356
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SOMS_Bits',0,12,155,5,16,4,23
	.byte	'MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACB0',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	2,25,2,35,0,23
	.byte	'DSO',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'CLK_SRC_SR',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'ECLK_SRC',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	3,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'OSM',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'EXT_FUPD',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMS_Bits',0,12,182,5,3
	.word	27966
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SR0_Bits',0,12,185,5,16,4,23
	.byte	'SR0',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SR0_Bits',0,12,189,5,3
	.word	28550
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_SR1_Bits',0,12,192,5,16,4,23
	.byte	'SR1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SR1_Bits',0,12,196,5,3
	.word	28655
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_STAT_Bits',0,12,199,5,16,4,23
	.byte	'OL',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	15,16,2,35,0,23
	.byte	'ACBI',0,4
	.word	18296
	.byte	5,11,2,35,0,23
	.byte	'DV',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'WRF',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'DR',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'ACBO',0,4
	.word	18296
	.byte	5,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_STAT_Bits',0,12,209,5,3
	.word	28760
	.byte	22
	.byte	'_Ifx_GTM_AUX_IN_SRC_TIM_Bits',0,12,212,5,16,4,23
	.byte	'SRC_CH0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SRC_CH1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SRC_CH2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SRC_CH3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SRC_CH4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SRC_CH5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'SRC_CH6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'SRC_CH7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'SEL_OUT_N_CH0',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'SEL_OUT_N_CH1',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'SEL_OUT_N_CH2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'SEL_OUT_N_CH3',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'SEL_OUT_N_CH4',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'SEL_OUT_N_CH5',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'SEL_OUT_N_CH6',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'SEL_OUT_N_CH7',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_AUX_IN_SRC_TIM_Bits',0,12,232,5,3
	.word	28963
	.byte	22
	.byte	'_Ifx_GTM_BRC_EIRQ_EN_Bits',0,12,235,5,16,4,23
	.byte	'DEST_ERR_EIRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'DID_EIRQ_EN0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'DID_EIRQ_EN1',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DID_EIRQ_EN2',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'DID_EIRQ_EN3',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'DID_EIRQ_EN4',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DID_EIRQ_EN5',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'DID_EIRQ_EN6',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'DID_EIRQ_EN7',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'DID_EIRQ_EN8',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'DID_EIRQ_EN9',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'DID_EIRQ_EN10',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'DID_EIRQ_EN11',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	19,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_EIRQ_EN_Bits',0,12,251,5,3
	.word	29433
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_EN_Bits',0,12,254,5,16,4,23
	.byte	'DEST_ERR_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'DID_IRQ_EN0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'DID_IRQ_EN1',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DID_IRQ_EN2',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'DID_IRQ_EN3',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'DID_IRQ_EN4',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DID_IRQ_EN5',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'DID_IRQ_EN6',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'DID_IRQ_EN7',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'DID_IRQ_EN8',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'DID_IRQ_EN9',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'DID_IRQ_EN10',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'DID_IRQ_EN11',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	19,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_EN_Bits',0,12,142,6,3
	.word	29841
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,12,145,6,16,4,23
	.byte	'TRG_DEST_ERR',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_DID0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_DID1',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_DID2',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG_DID3',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG_DID4',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TRG_DID5',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TRG_DID6',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TRG_DID7',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TRG_DID8',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TRG_DID9',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TRG_DID10',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TRG_DID11',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	19,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT_Bits',0,12,161,6,3
	.word	30234
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_MODE_Bits',0,12,164,6,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_MODE_Bits',0,12,168,6,3
	.word	30598
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,12,171,6,16,4,23
	.byte	'DEST_ERR',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'DID0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'DID1',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DID2',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'DID3',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'DID4',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DID5',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'DID6',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'DID7',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'DID8',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'DID9',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'DID10',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'DID11',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	19,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY_Bits',0,12,187,6,3
	.word	30709
	.byte	22
	.byte	'_Ifx_GTM_BRC_RST_Bits',0,12,190,6,16,4,23
	.byte	'RST',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_RST_Bits',0,12,194,6,3
	.word	31019
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC_ADDR_Bits',0,12,197,6,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'BRC_MODE',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	19,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_SRC_ADDR_Bits',0,12,203,6,3
	.word	31115
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC_DEST_Bits',0,12,206,6,16,4,23
	.byte	'EN_DEST0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'EN_DEST1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'EN_DEST2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'EN_DEST3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'EN_DEST4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'EN_DEST5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'EN_DEST6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'EN_DEST7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'EN_DEST8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'EN_DEST9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'EN_DEST10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'EN_DEST11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'EN_DEST12',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'EN_DEST13',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'EN_DEST14',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'EN_DEST15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'EN_DEST16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'EN_DEST17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'EN_DEST18',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'EN_DEST19',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'EN_DEST20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'EN_DEST21',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'EN_TRASHBIN',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	9,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_SRC_DEST_Bits',0,12,232,6,3
	.word	31265
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE_MODE_Bits',0,12,235,6,16,4,23
	.byte	'BRG_MODE',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MSK_WR_RSP',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'BYPASS_SYNC',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	5,24,2,35,0,23
	.byte	'MODE_UP_PGR',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'BUFF_OVL',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'SYNC_INPUT_REG',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	3,16,2,35,0,23
	.byte	'BRG_RST',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	7,8,2,35,0,23
	.byte	'BUFF_DPT',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRIDGE_MODE_Bits',0,12,249,6,3
	.word	31832
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE_PTR1_Bits',0,12,252,6,16,4,23
	.byte	'NEW_TRAN_PTR',0,4
	.word	18296
	.byte	5,27,2,35,0,23
	.byte	'FIRST_RSP_PTR',0,4
	.word	18296
	.byte	5,22,2,35,0,23
	.byte	'TRAN_IN_PGR',0,4
	.word	18296
	.byte	5,17,2,35,0,23
	.byte	'ABT_TRAN_PGR',0,4
	.word	18296
	.byte	5,12,2,35,0,23
	.byte	'FBC',0,4
	.word	18296
	.byte	6,6,2,35,0,23
	.byte	'RSP_TRAN_RDY',0,4
	.word	18296
	.byte	6,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRIDGE_PTR1_Bits',0,12,132,7,3
	.word	32163
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE_PTR2_Bits',0,12,135,7,16,4,23
	.byte	'TRAN_IN_PGR2',0,4
	.word	18296
	.byte	5,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_BRIDGE_PTR2_Bits',0,12,139,7,3
	.word	32365
	.byte	22
	.byte	'_Ifx_GTM_CANOUTSEL0_Bits',0,12,142,7,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'SEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_CANOUTSEL0_Bits',0,12,152,7,3
	.word	32478
	.byte	22
	.byte	'_Ifx_GTM_CANOUTSEL1_Bits',0,12,155,7,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_GTM_CANOUTSEL1_Bits',0,12,162,7,3
	.word	32671
	.byte	22
	.byte	'_Ifx_GTM_CCM_AEIM_STA_Bits',0,12,165,7,16,4,23
	.byte	'AEIM_XPT_ADDR',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'AEIM_XPT_STA',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	6,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_AEIM_STA_Bits',0,12,171,7,3
	.word	32823
	.byte	22
	.byte	'_Ifx_GTM_CCM_ARP_CTRL_Bits',0,12,174,7,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'SIZE',0,4
	.word	18296
	.byte	4,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'DIS_PROT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	6,1,2,35,0,23
	.byte	'WPROT_AEI',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_ARP_CTRL_Bits',0,12,182,7,3
	.word	32987
	.byte	22
	.byte	'_Ifx_GTM_CCM_ARP_PROT_Bits',0,12,185,7,16,4,23
	.byte	'WPROT0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'WPROT1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'WPROT2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'WPROT3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'WPROT4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'WPROT5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'WPROT6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'WPROT7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_ARP_PROT_Bits',0,12,196,7,3
	.word	33175
	.byte	22
	.byte	'_Ifx_GTM_CCM_ATOM_OUT_Bits',0,12,199,7,16,4,23
	.byte	'ATOM_I_OUT',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'ATOM_I_OUT_N',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'ATOM_IP1_OUT',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'ATOM_IP1_OUT_N',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_ATOM_OUT_Bits',0,12,205,7,3
	.word	33410
	.byte	22
	.byte	'_Ifx_GTM_CCM_CFG_Bits',0,12,208,7,16,4,23
	.byte	'EN_TIM',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'EN_TOM_SPE_TDTM',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'EN_ATOM_ADTM',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'EN_MCS',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'EN_DPLL_MAP',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'EN_BRC',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'EN_PSM',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'EN_CMP_MON',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'CLS_CLK_DIV',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	12,2,2,35,0,23
	.byte	'TBU_DIR1',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TBU_DIR2',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_CFG_Bits',0,12,223,7,3
	.word	33575
	.byte	22
	.byte	'_Ifx_GTM_CCM_CMU_CLK_CFG_Bits',0,12,226,7,16,4,23
	.byte	'CLK0_SRC',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'CLK1_SRC',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'CLK2_SRC',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'CLK3_SRC',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'reserved_14',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'CLK4_SRC',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'CLK5_SRC',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'reserved_22',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'CLK6_SRC',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'CLK7_SRC',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_CMU_CLK_CFG_Bits',0,12,244,7,3
	.word	33910
	.byte	22
	.byte	'_Ifx_GTM_CCM_CMU_FXCLK_CFG_Bits',0,12,247,7,16,4,23
	.byte	'FXCLK0_SRC',0,4
	.word	18296
	.byte	4,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_CMU_FXCLK_CFG_Bits',0,12,251,7,3
	.word	34327
	.byte	22
	.byte	'_Ifx_GTM_CCM_EXT_CAP_EN_Bits',0,12,254,7,16,4,23
	.byte	'TIM_I_EXT_CAP_EN',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'TIM_IP1_EXT_CAP_EN',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_EXT_CAP_EN_Bits',0,12,131,8,3
	.word	34450
	.byte	22
	.byte	'_Ifx_GTM_CCM_HW_CONF_Bits',0,12,134,8,16,4,23
	.byte	'GRSTEN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'BRIDGE_MODE_RST',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SYNC_INPUT_REG',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'CFG_CLOCK_RATE',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ATOM_OUT_RST',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ATOM_TRIG_CHAIN',0,4
	.word	18296
	.byte	3,24,2,35,0,23
	.byte	'TOM_OUT_RST',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TOM_TRIG_CHAIN',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'RAM_INIT_RST',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'ERM',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ARU_CONNECT_CONFIG',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'IRQ_MODE_LEVEL',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'IRQ_MODE_PULSE',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'IRQ_MODE_PULSE_NOTIFY',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'IRQ_MODE_SINGLE_PULSE',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ATOM_TRIG_INTCHAIN',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'TOM_TRIG_INTCHAIN',0,4
	.word	18296
	.byte	5,3,2,35,0,23
	.byte	'INT_CLK_EN_GEN',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_HW_CONF_Bits',0,12,156,8,3
	.word	34604
	.byte	22
	.byte	'_Ifx_GTM_CCM_PROT_Bits',0,12,159,8,16,4,23
	.byte	'CLS_PROT',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_PROT_Bits',0,12,163,8,3
	.word	35186
	.byte	22
	.byte	'_Ifx_GTM_CCM_TIM_AUX_IN_SRC_Bits',0,12,166,8,16,4,23
	.byte	'SRC_CH0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SRC_CH1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SRC_CH2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SRC_CH3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SRC_CH4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SRC_CH5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'SRC_CH6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'SRC_CH7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'SEL_OUT_N_CH0',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'SEL_OUT_N_CH1',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'SEL_OUT_N_CH2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'SEL_OUT_N_CH3',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'SEL_OUT_N_CH4',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'SEL_OUT_N_CH5',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'SEL_OUT_N_CH6',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'SEL_OUT_N_CH7',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_TIM_AUX_IN_SRC_Bits',0,12,186,8,3
	.word	35289
	.byte	22
	.byte	'_Ifx_GTM_CCM_TOM_OUT_Bits',0,12,189,8,16,4,23
	.byte	'TOM_OUT',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'TOM_OUT_N',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_TOM_OUT_Bits',0,12,193,8,3
	.word	35767
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL1_Bits',0,12,196,8,16,4,23
	.byte	'O1SEL_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'I1SEL_0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SWAP_0',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'O1F_0',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'XDT_EN_0_1',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'O1SEL_1',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'I1SEL_1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'SH_EN_1',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SWAP_1',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'O1F_1',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'reserved_14',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'O1SEL_2',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'I1SEL_2',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'SH_EN_2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'SWAP_2',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'O1F_2',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'XDT_EN_2_3',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'O1SEL_3',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'I1SEL_3',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SH_EN_3',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'SWAP_3',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'O1F_3',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL1_Bits',0,12,224,8,3
	.word	35874
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL2_Bits',0,12,227,8,16,4,23
	.byte	'POL0_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'OC0_0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SL0_0',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DT0_0',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'POL1_0',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'OC1_0',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'SL1_0',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'DT1_0',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'POL0_1',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'OC0_1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'SL0_1',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'DT0_1',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'POL1_1',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'OC1_1',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'SL1_1',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'DT1_1',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'POL0_2',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'OC0_2',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'SL0_2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'DT0_2',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'POL1_2',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'OC1_2',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'SL1_2',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'DT1_2',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'POL0_3',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'OC0_3',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SL0_3',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'DT0_3',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'POL1_3',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'OC1_3',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'SL1_3',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'DT1_3',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2_Bits',0,12,133,9,3
	.word	36459
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL2_SR_Bits',0,12,136,9,16,4,23
	.byte	'POL0_0_SR',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'OC0_0_SR',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SL0_0_SR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DT0_0_SR',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'POL1_0_SR',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'OC1_0_SR',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'SL1_0_SR',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'DT1_0_SR',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'POL0_1_SR',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'OC0_1_SR',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'SL0_1_SR',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'DT0_1_SR',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'POL1_1_SR',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'OC1_1_SR',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'SL1_1_SR',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'DT1_1_SR',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'POL0_2_SR',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'OC0_2_SR',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'SL0_2_SR',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'DT0_2_SR',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'POL1_2_SR',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'OC1_2_SR',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'SL1_2_SR',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'DT1_2_SR',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'POL0_3_SR',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'OC0_3_SR',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SL0_3_SR',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'DT0_3_SR',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'POL1_3_SR',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'OC1_3_SR',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'SL1_3_SR',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'DT1_3_SR',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2_SR_Bits',0,12,170,9,3
	.word	37090
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH_CTRL3_Bits',0,12,173,9,16,4,23
	.byte	'CII0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CIS0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TSEL0_0',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TSEL1_0',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	4,24,2,35,0,23
	.byte	'CII1',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'CIS1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TSEL0_1',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TSEL1_1',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	4,16,2,35,0,23
	.byte	'CII2',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'CIS2',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TSEL0_2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TSEL1_2',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'CII3',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'CIS3',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TSEL0_3',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TSEL1_3',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL3_Bits',0,12,195,9,3
	.word	37823
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH_DTV_Bits',0,12,198,9,16,4,23
	.byte	'RELRISE',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	6,16,2,35,0,23
	.byte	'RELFALL',0,4
	.word	18296
	.byte	10,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	6,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_DTV_Bits',0,12,204,9,3
	.word	38273
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH_SR_Bits',0,12,207,9,16,4,23
	.byte	'SL0_0_SR_SR',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SL1_0_SR_SR',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SL0_1_SR_SR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SL1_1_SR_SR',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SL0_2_SR_SR',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SL1_2_SR_SR',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'SL0_3_SR_SR',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'SL1_3_SR_SR',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_SR_Bits',0,12,218,9,3
	.word	38432
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CTRL_Bits',0,12,221,9,16,4,23
	.byte	'CLK_SEL',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'DTM_SEL',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'UPD_MODE',0,4
	.word	18296
	.byte	3,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SR_UPD_EN',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	7,16,2,35,0,23
	.byte	'SHUT_OFF_RST',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	15,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CTRL_Bits',0,12,231,9,3
	.word	38711
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_PS_CTRL_Bits',0,12,234,9,16,4,23
	.byte	'RELBLK',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	6,16,2,35,0,23
	.byte	'PSU_IN_SEL',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'IN_POL',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TIM_SEL',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'reserved_19',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'SHIFT_SEL',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'reserved_22',0,4
	.word	18296
	.byte	10,0,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_PS_CTRL_Bits',0,12,244,9,3
	.word	38952
	.byte	22
	.byte	'_Ifx_GTM_CFG_Bits',0,12,247,9,16,4,23
	.byte	'SRC_IN_MUX',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_CFG_Bits',0,12,251,9,3
	.word	39196
	.byte	22
	.byte	'_Ifx_GTM_CLC_Bits',0,12,254,9,16,4,23
	.byte	'DISR',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'DISS',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'EDIS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_CLC_Bits',0,12,133,10,3
	.word	39291
	.byte	22
	.byte	'_Ifx_GTM_CLS_CLK_CFG_Bits',0,12,136,10,16,4,23
	.byte	'CLS0_CLK_DIV',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'CLS1_CLK_DIV',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'CLS2_CLK_DIV',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'CLS3_CLK_DIV',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'CLS4_CLK_DIV',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'CLS5_CLK_DIV',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'CLS6_CLK_DIV',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'CLS7_CLK_DIV',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'CLS8_CLK_DIV',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'CLS9_CLK_DIV',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'CLS10_CLK_DIV',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'CLS11_CLK_DIV',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CLS_CLK_CFG_Bits',0,12,151,10,3
	.word	39434
	.byte	22
	.byte	'_Ifx_GTM_CMP_EIRQ_EN_Bits',0,12,154,10,16,4,23
	.byte	'ABWC0_EN_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ABWC1_EN_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ABWC2_EN_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ABWC3_EN_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ABWC4_EN_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ABWC5_EN_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ABWC6_EN_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ABWC7_EN_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ABWC8_EN_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ABWC9_EN_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ABWC10_EN_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ABWC11_EN_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TBWC0_EN_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TBWC1_EN_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TBWC2_EN_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TBWC3_EN_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TBWC4_EN_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TBWC5_EN_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TBWC6_EN_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TBWC7_EN_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TBWC8_EN_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TBWC9_EN_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TBWC10_EN_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TBWC11_EN_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_EIRQ_EN_Bits',0,12,181,10,3
	.word	39814
	.byte	22
	.byte	'_Ifx_GTM_CMP_EN_Bits',0,12,184,10,16,4,23
	.byte	'ABWC0_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ABWC1_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ABWC2_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ABWC3_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ABWC4_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ABWC5_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ABWC6_EN',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ABWC7_EN',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ABWC8_EN',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ABWC9_EN',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ABWC10_EN',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ABWC11_EN',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TBWC0_EN',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TBWC1_EN',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TBWC2_EN',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TBWC3_EN',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TBWC4_EN',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TBWC5_EN',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TBWC6_EN',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TBWC7_EN',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TBWC8_EN',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TBWC9_EN',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TBWC10_EN',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TBWC11_EN',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_EN_Bits',0,12,211,10,3
	.word	40508
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_EN_Bits',0,12,214,10,16,4,23
	.byte	'ABWC0_EN_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ABWC1_EN_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ABWC2_EN_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ABWC3_EN_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ABWC4_EN_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ABWC5_EN_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ABWC6_EN_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ABWC7_EN_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ABWC8_EN_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ABWC9_EN_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ABWC10_EN_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ABWC11_EN_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TBWC0_EN_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TBWC1_EN_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TBWC2_EN_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TBWC3_EN_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TBWC4_EN_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TBWC5_EN_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TBWC6_EN_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TBWC7_EN_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TBWC8_EN_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TBWC9_EN_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TBWC10_EN_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TBWC11_EN_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_EN_Bits',0,12,241,10,3
	.word	41072
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,12,244,10,16,4,23
	.byte	'TRG_ABWC0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_ABWC1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_ABWC2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_ABWC3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG_ABWC4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG_ABWC5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TRG_ABWC6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TRG_ABWC7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TRG_ABWC8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TRG_ABWC9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TRG_ABWC10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TRG_ABWC11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TRG_TBWC0',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TRG_TBWC1',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TRG_TBWC2',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TRG_TBWC3',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TRG_TBWC4',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRG_TBWC5',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TRG_TBWC6',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TRG_TBWC7',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TRG_TBWC8',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TRG_TBWC9',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TRG_TBWC10',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TRG_TBWC11',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT_Bits',0,12,143,11,3
	.word	41740
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_MODE_Bits',0,12,146,11,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_MODE_Bits',0,12,150,11,3
	.word	42346
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,12,153,11,16,4,23
	.byte	'ABWC0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ABWC1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ABWC2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ABWC3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ABWC4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ABWC5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ABWC6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ABWC7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ABWC8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ABWC9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ABWC10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ABWC11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TBWC0',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TBWC1',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TBWC2',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TBWC3',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TBWC4',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TBWC5',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TBWC6',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TBWC7',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TBWC8',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TBWC9',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TBWC10',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TBWC11',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY_Bits',0,12,180,11,3
	.word	42457
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_CTRL_Bits',0,12,183,11,16,4,23
	.byte	'CLK0_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CLK1_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'CLK2_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'CLK3_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'CLK4_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'CLK5_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'CLK6_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'CLK7_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'CLK8_EXT_DIVIDER',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_CLK_CTRL_Bits',0,12,195,11,3
	.word	42965
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK_EN_Bits',0,12,198,11,16,4,23
	.byte	'EN_CLK0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'EN_CLK1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'EN_CLK2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'EN_CLK3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'EN_CLK4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'EN_CLK5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'EN_CLK6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'EN_CLK7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'EN_ECLK0',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'EN_ECLK1',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'EN_ECLK2',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'EN_FXCLK',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_CLK_EN_Bits',0,12,213,11,3
	.word	43308
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK__CTRL_Bits',0,12,216,11,16,4,23
	.byte	'CLK_CNT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'CLK_SEL',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	6,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_CLK__CTRL_Bits',0,12,221,11,3
	.word	43628
	.byte	22
	.byte	'_Ifx_GTM_CMU_ECLK_DEN_Bits',0,12,224,11,16,4,23
	.byte	'ECLK_DEN',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_ECLK_DEN_Bits',0,12,228,11,3
	.word	43760
	.byte	22
	.byte	'_Ifx_GTM_CMU_ECLK_NUM_Bits',0,12,231,11,16,4,23
	.byte	'ECLK_NUM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_ECLK_NUM_Bits',0,12,235,11,3
	.word	43872
	.byte	22
	.byte	'_Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,12,238,11,16,4,23
	.byte	'FXCLK_SEL',0,4
	.word	18296
	.byte	4,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL_Bits',0,12,242,11,3
	.word	43984
	.byte	22
	.byte	'_Ifx_GTM_CMU_GCLK_DEN_Bits',0,12,245,11,16,4,23
	.byte	'GCLK_DEN',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_GCLK_DEN_Bits',0,12,249,11,3
	.word	44100
	.byte	22
	.byte	'_Ifx_GTM_CMU_GCLK_NUM_Bits',0,12,252,11,16,4,23
	.byte	'GCLK_NUM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_GCLK_NUM_Bits',0,12,128,12,3
	.word	44212
	.byte	22
	.byte	'_Ifx_GTM_CMU_GLB_CTRL_Bits',0,12,131,12,16,4,23
	.byte	'ARU_ADDR_RSTGLB',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_GLB_CTRL_Bits',0,12,135,12,3
	.word	44324
	.byte	22
	.byte	'_Ifx_GTM_CTRL_Bits',0,12,138,12,16,4,23
	.byte	'RF_PROT',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TO_MODE',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'TO_VAL',0,4
	.word	18296
	.byte	5,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'AEIM_CLUSTER',0,4
	.word	18296
	.byte	4,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_CTRL_Bits',0,12,147,12,3
	.word	44442
	.byte	22
	.byte	'_Ifx_GTM_DATAIN_Bits',0,12,150,12,16,4,23
	.byte	'DATA',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_GTM_DATAIN_Bits',0,12,153,12,3
	.word	44642
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ACB_Bits',0,12,156,12,16,4,23
	.byte	'ACB_0',0,4
	.word	18296
	.byte	5,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	3,24,2,35,0,23
	.byte	'ACB_1',0,4
	.word	18296
	.byte	5,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	3,16,2,35,0,23
	.byte	'ACB_2',0,4
	.word	18296
	.byte	5,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	3,8,2,35,0,23
	.byte	'ACB_3',0,4
	.word	18296
	.byte	5,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ACB_Bits',0,12,166,12,3
	.word	44715
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ACT_STA_Bits',0,12,169,12,16,4,23
	.byte	'ACT_N',0,4
	.word	18296
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ACT_STA_Bits',0,12,172,12,3
	.word	44935
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,12,175,12,16,4,23
	.byte	'ADD_IN_CAL1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1_Bits',0,12,179,12,3
	.word	45021
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,12,182,12,16,4,23
	.byte	'ADD_IN_CAL2',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2_Bits',0,12,186,12,3
	.word	45144
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,12,189,12,16,4,23
	.byte	'ADD_IN_LD1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1_Bits',0,12,193,12,3
	.word	45267
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,12,196,12,16,4,23
	.byte	'ADD_IN_LD2',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2_Bits',0,12,200,12,3
	.word	45387
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADT_S_Bits',0,12,203,12,16,4,23
	.byte	'PD_S',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'NS',0,4
	.word	18296
	.byte	6,10,2,35,0,23
	.byte	'reserved_22',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADT_S_Bits',0,12,209,12,3
	.word	45507
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ADT_TI_Bits',0,12,212,12,16,4,23
	.byte	'PD',0,4
	.word	18296
	.byte	13,19,2,35,0,23
	.byte	'TINT',0,4
	.word	18296
	.byte	3,16,2,35,0,23
	.byte	'NT',0,4
	.word	18296
	.byte	3,13,2,35,0,23
	.byte	'reserved_19',0,4
	.word	18296
	.byte	5,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADT_TI_Bits',0,12,219,12,3
	.word	45648
	.byte	22
	.byte	'_Ifx_GTM_DPLL_AOSV_2_Bits',0,12,222,12,16,4,23
	.byte	'AOSV_2A',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'AOSV_2B',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'AOSV_2C',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'AOSV_2D',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_AOSV_2_Bits',0,12,228,12,3
	.word	45805
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_Bits',0,12,231,12,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'WAPS',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'APS',0,4
	.word	18296
	.byte	6,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	5,19,2,35,0,23
	.byte	'WAPS_1C2',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'APS_1C2',0,4
	.word	18296
	.byte	6,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_Bits',0,12,240,12,3
	.word	45948
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_1C3_Bits',0,12,243,12,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'APS_1C3',0,4
	.word	18296
	.byte	6,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_1C3_Bits',0,12,248,12,3
	.word	46146
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_1C3_EXT_Bits',0,12,251,12,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'APS_1C3',0,4
	.word	18296
	.byte	7,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_1C3_EXT_Bits',0,12,128,13,3
	.word	46278
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_EXT_Bits',0,12,131,13,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'WAPS',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'APS',0,4
	.word	18296
	.byte	7,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	4,19,2,35,0,23
	.byte	'WAPS_1C2',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'APS_1C2',0,4
	.word	18296
	.byte	7,11,2,35,0,23
	.byte	'reserved_21',0,4
	.word	18296
	.byte	11,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_EXT_Bits',0,12,140,13,3
	.word	46418
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_Bits',0,12,143,13,16,4,23
	.byte	'APS_1C2_EXT',0,4
	.word	18296
	.byte	6,26,2,35,0,23
	.byte	'APS_1C2_STATUS',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	7,18,2,35,0,23
	.byte	'APS_1C2_OLD',0,4
	.word	18296
	.byte	6,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_SYNC_Bits',0,12,150,13,3
	.word	46624
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APS_SYNC_EXT_Bits',0,12,153,13,16,4,23
	.byte	'APS_1C2_EXT',0,4
	.word	18296
	.byte	7,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	8,17,2,35,0,23
	.byte	'APS_1C2_STATUS',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'APS_1C2_OLD',0,4
	.word	18296
	.byte	7,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	9,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_SYNC_EXT_Bits',0,12,160,13,3
	.word	46812
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APT_Bits',0,12,163,13,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'WAPT',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'APT',0,4
	.word	18296
	.byte	10,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'WAPT_2B',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'APT_2B',0,4
	.word	18296
	.byte	10,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APT_Bits',0,12,172,13,3
	.word	47008
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APT_2C_Bits',0,12,175,13,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'APT_2C',0,4
	.word	18296
	.byte	10,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APT_2C_Bits',0,12,180,13,3
	.word	47205
	.byte	22
	.byte	'_Ifx_GTM_DPLL_APT_SYNC_Bits',0,12,183,13,16,4,23
	.byte	'APT_2B_EXT',0,4
	.word	18296
	.byte	6,26,2,35,0,23
	.byte	'APT_2B_STATUS',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	7,18,2,35,0,23
	.byte	'APT_2B_OLD',0,4
	.word	18296
	.byte	10,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APT_SYNC_Bits',0,12,190,13,3
	.word	47335
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_SX_Bits',0,12,193,13,16,4,23
	.byte	'CDT_SX',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_SX_Bits',0,12,197,13,3
	.word	47520
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,12,200,13,16,4,23
	.byte	'CDT_SX_NOM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM_Bits',0,12,204,13,3
	.word	47628
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_TX_Bits',0,12,207,13,16,4,23
	.byte	'CDT_TX',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_TX_Bits',0,12,211,13,3
	.word	47748
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,12,214,13,16,4,23
	.byte	'CDT_TX_NOM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM_Bits',0,12,218,13,3
	.word	47856
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CNT_NUM_1_Bits',0,12,221,13,16,4,23
	.byte	'CNT_NUM_1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CNT_NUM_1_Bits',0,12,225,13,3
	.word	47976
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CNT_NUM_2_Bits',0,12,228,13,16,4,23
	.byte	'CNT_NUM_2',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CNT_NUM_2_Bits',0,12,232,13,3
	.word	48093
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CSN_MAX_Bits',0,12,235,13,16,4,23
	.byte	'CSN_MAX',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CSN_MAX_Bits',0,12,239,13,3
	.word	48210
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CSN_MIN_Bits',0,12,242,13,16,4,23
	.byte	'CSN_MIN',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CSN_MIN_Bits',0,12,246,13,3
	.word	48321
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTN_MAX_Bits',0,12,249,13,16,4,23
	.byte	'CTN_MAX',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTN_MAX_Bits',0,12,253,13,3
	.word	48432
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTN_MIN_Bits',0,12,128,14,16,4,23
	.byte	'CTN_MIN',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTN_MIN_Bits',0,12,132,14,3
	.word	48543
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_0_Bits',0,12,135,14,16,4,23
	.byte	'MLT',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'IFP',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SNU',0,4
	.word	18296
	.byte	5,16,2,35,0,23
	.byte	'TNU',0,4
	.word	18296
	.byte	9,7,2,35,0,23
	.byte	'AMS',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'AMT',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'IDS',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'IDT',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'SEN',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TEN',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'RMO',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_0_Bits',0,12,148,14,3
	.word	48654
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,12,151,14,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'IFP',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	14,7,2,35,0,23
	.byte	'AMS',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'IDS',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	3,1,2,35,0,23
	.byte	'RMO',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE_Bits',0,12,161,14,3
	.word	48886
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,12,164,14,16,4,23
	.byte	'MLT',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'IFP',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	15,6,2,35,0,23
	.byte	'AMT',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'IDT',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	2,1,2,35,0,23
	.byte	'RMO',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER_Bits',0,12,174,14,3
	.word	49130
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_1_Bits',0,12,177,14,16,4,23
	.byte	'DMO',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'DEN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'IDDS',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'COA',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'PIT',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SGE1',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DLM1',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'PCM1',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SGE2',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'DLM2',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PCM2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SYN_NS',0,4
	.word	18296
	.byte	5,16,2,35,0,23
	.byte	'SYN_NT',0,4
	.word	18296
	.byte	6,10,2,35,0,23
	.byte	'LCD',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'SWR',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'SYSF',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TS0_HRS',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TS0_HRT',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'SMC',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'SSL',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'TSL',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_1_Bits',0,12,200,14,3
	.word	49371
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_11_Bits',0,12,203,14,16,4,23
	.byte	'SIP1',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ERZ1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'PCMF1',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FSYL1',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'INCF1',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'PCMF1_INCCNT_B',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ADT',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ADS',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SIP2',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ERZ2',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PCMF2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'FSYL2',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'INCF2',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'PCMF2_INCCNT_B',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'STATE_EXT',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'ACBU',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WSIP1',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'WERZ1',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'WPCMF1',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'WFSYL1',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'WINCF1',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'WPCMF1_INCCNT_B',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'WADT',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'WADS',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'WSIP2',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'WERZ2',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'WPCMF2',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'WFSYL2',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'WINCF2',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'WPCMF2_INCCNT_B',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'WSTATE_EXT',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'WACBU',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_11_Bits',0,12,237,14,3
	.word	49775
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_STATE_Bits',0,12,240,14,16,4,23
	.byte	'DMO',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	2,29,2,35,0,23
	.byte	'COA',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SGE1',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DLM1',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'PCM1',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SGE2',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'DLM2',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PCM2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_STATE_Bits',0,12,253,14,3
	.word	50430
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,12,128,15,16,4,23
	.byte	'DMO',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	2,29,2,35,0,23
	.byte	'COA',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'PIT',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SGE1',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DLM1',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'PCM1',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER_Bits',0,12,138,15,3
	.word	50716
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_2_Bits',0,12,141,15,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'AEN0',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'AEN1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'AEN2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'AEN3',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'AEN4',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'AEN5',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'AEN6',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'AEN7',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WAD0',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'WAD1',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'WAD2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'WAD3',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'WAD4',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'WAD5',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'WAD6',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'WAD7',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_2_Bits',0,12,161,15,3
	.word	50950
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_3_Bits',0,12,164,15,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'AEN8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'AEN9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'AEN10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'AEN11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'AEN12',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'AEN13',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'AEN14',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'AEN15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WAD8',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'WAD9',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'WAD10',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'WAD11',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'WAD12',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'WAD13',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'WAD14',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'WAD15',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_3_Bits',0,12,184,15,3
	.word	51318
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_4_Bits',0,12,187,15,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'AEN16',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'AEN17',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'AEN18',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'AEN19',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'AEN20',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'AEN21',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'AEN22',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'AEN23',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WAD16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'WAD17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'WAD18',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'WAD19',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'WAD20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'WAD21',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'WAD22',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'WAD23',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_4_Bits',0,12,207,15,3
	.word	51698
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_5_Bits',0,12,210,15,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'AEN24',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'AEN25',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'AEN26',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'AEN27',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'AEN28',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'AEN29',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'AEN30',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'AEN31',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'WAD24',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'WAD25',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'WAD26',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'WAD27',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'WAD28',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'WAD29',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'WAD30',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'WAD31',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_5_Bits',0,12,230,15,3
	.word	52082
	.byte	22
	.byte	'_Ifx_GTM_DPLL_CTRL_EXT_Bits',0,12,233,15,16,4,23
	.byte	'SNU',0,4
	.word	18296
	.byte	6,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	10,16,2,35,0,23
	.byte	'SYN_NS',0,4
	.word	18296
	.byte	6,10,2,35,0,23
	.byte	'reserved_22',0,4
	.word	18296
	.byte	10,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_EXT_Bits',0,12,239,15,3
	.word	52466
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DLA_Bits',0,12,242,15,16,4,23
	.byte	'DLA',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DLA_Bits',0,12,246,15,3
	.word	52615
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DTA_Bits',0,12,249,15,16,4,23
	.byte	'DTA',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DTA_Bits',0,12,253,15,3
	.word	52714
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_S_Bits',0,12,128,16,16,4,23
	.byte	'DT_S',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_S_Bits',0,12,132,16,3
	.word	52813
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_S_ACT_Bits',0,12,135,16,16,4,23
	.byte	'DT_S_ACT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_S_ACT_Bits',0,12,139,16,3
	.word	52915
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_S_START_Bits',0,12,142,16,16,4,23
	.byte	'DPLL_DT_S_START',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_S_START_Bits',0,12,146,16,3
	.word	53029
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_TI_Bits',0,12,149,16,16,4,23
	.byte	'DT_T',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_TI_Bits',0,12,153,16,3
	.word	53154
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_T_ACT_Bits',0,12,156,16,16,4,23
	.byte	'DT_T_ACT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_T_ACT_Bits',0,12,160,16,3
	.word	53258
	.byte	22
	.byte	'_Ifx_GTM_DPLL_DT_T_START_Bits',0,12,163,16,16,4,23
	.byte	'DPLL_DT_T_START',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_T_START_Bits',0,12,167,16,3
	.word	53372
	.byte	22
	.byte	'_Ifx_GTM_DPLL_EDT_S_Bits',0,12,170,16,16,4,23
	.byte	'EDT_S',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_EDT_S_Bits',0,12,174,16,3
	.word	53497
	.byte	22
	.byte	'_Ifx_GTM_DPLL_EDT_T_Bits',0,12,177,16,16,4,23
	.byte	'EDT_T',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_EDT_T_Bits',0,12,181,16,3
	.word	53602
	.byte	22
	.byte	'_Ifx_GTM_DPLL_EIRQ_EN_Bits',0,12,184,16,16,4,23
	.byte	'PDI_EIRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'PEI_EIRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TINI_EIRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TAXI_EIRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SISI_EIRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TISI_EIRQ_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MSI_EIRQ_EN',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MTI_EIRQ_EN',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SASI_EIRQ_EN',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TASI_EIRQ_EN',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PWI_EIRQ_EN',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'W2I_EIRQ_EN',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'W1I_EIRQ_EN',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'GL1I_EIRQ_EN',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'LL1I_EIRQ_EN',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'EI_EIRQ_EN',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'GL2I_EIRQ_EN',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'LL2I_EIRQ_EN',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TE0I_EIRQ_EN',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TE1I_EIRQ_EN',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TE2I_EIRQ_EN',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TE3I_EIRQ_EN',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TE4I_EIRQ_EN',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'CDTI_EIRQ_EN',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'CDSI_EIRQ_EN',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TORI_EIRQ_EN',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SORI_EIRQ_EN',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'DCGI_EIRQ_EN',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_EIRQ_EN_Bits',0,12,215,16,3
	.word	53707
	.byte	22
	.byte	'_Ifx_GTM_DPLL_FTV_S_Bits',0,12,218,16,16,4,23
	.byte	'STATE_FT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_FTV_S_Bits',0,12,222,16,3
	.word	54462
	.byte	22
	.byte	'_Ifx_GTM_DPLL_FTV_T_Bits',0,12,225,16,16,4,23
	.byte	'TRIGGER_FT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_FTV_T_Bits',0,12,229,16,3
	.word	54570
	.byte	22
	.byte	'_Ifx_GTM_DPLL_ID_PMTR_Bits',0,12,232,16,16,4,23
	.byte	'ID_PMTR_X',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ID_PMTR_Bits',0,12,236,16,3
	.word	54680
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INCF1_OFFSET_Bits',0,12,239,16,16,4,23
	.byte	'DPLL_INCF1_OFFSET',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INCF1_OFFSET_Bits',0,12,243,16,3
	.word	54792
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INCF2_OFFSET_Bits',0,12,246,16,16,4,23
	.byte	'DPLL_INCF2_OFFSET',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INCF2_OFFSET_Bits',0,12,250,16,3
	.word	54923
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_Bits',0,12,253,16,16,4,23
	.byte	'INC_CNT1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT1_Bits',0,12,129,17,3
	.word	55054
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INC_CNT1_MASK_Bits',0,12,132,17,16,4,23
	.byte	'INC_CNT1_NOTIFY',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT1_MASK_Bits',0,12,136,17,3
	.word	55168
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_Bits',0,12,139,17,16,4,23
	.byte	'INC_CNT2',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT2_Bits',0,12,143,17,3
	.word	55299
	.byte	22
	.byte	'_Ifx_GTM_DPLL_INC_CNT2_MASK_Bits',0,12,146,17,16,4,23
	.byte	'INC_CNT2_NOTIFY',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT2_MASK_Bits',0,12,150,17,3
	.word	55413
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_EN_Bits',0,12,153,17,16,4,23
	.byte	'PDI_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'PEI_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TINI_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TAXI_IRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SISI_IRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TISI_IRQ_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MSI_IRQ_EN',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MTI_IRQ_EN',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SASI_IRQ_EN',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TASI_IRQ_EN',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PWI_IRQ_EN',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'W2I_IRQ_EN',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'W1I_IRQ_EN',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'GL1I_IRQ_EN',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'LL1I_IRQ_EN',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'EI_IRQ_EN',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'GL2I_IRQ_EN',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'LL2I_IRQ_EN',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TE0I_IRQ_EN',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TE1I_IRQ_EN',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TE2I_IRQ_EN',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TE3I_IRQ_EN',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TE4I_IRQ_EN',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'CDTI_IRQ_EN',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'CDSI_IRQ_EN',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TORI_IRQ_EN',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SORI_IRQ_EN',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'DCGI_IRQ_EN',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_EN_Bits',0,12,184,17,3
	.word	55544
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,12,187,17,16,4,23
	.byte	'TRG_PDI',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_PEI',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_TINI',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_TAXI',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG_SISI',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG_TISI',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TRG_MSI',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TRG_MTI',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TRG_SASI',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TRG_TASI',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TRG_PWI',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TRG_W2I',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TRG_W1I',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TRG_GL1I',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TRG_LL1I',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TRG_EI',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TRG_GL2I',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRG_LL2I',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TRG_TE0I',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TRG_TE1I',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TRG_TE2I',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TRG_TE3I',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TRG_TE4I',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TRG_CDTI',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TRG_CDSI',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TRG_TORI',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TRG_SORI',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TRG_DCGI',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT_Bits',0,12,218,17,3
	.word	56269
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_MODE_Bits',0,12,221,17,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_MODE_Bits',0,12,225,17,3
	.word	56920
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,12,228,17,16,4,23
	.byte	'PDI',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'PEI',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TINI',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TAXI',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SISI',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TISI',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MSI',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MTI',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SASI',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TASI',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PWI',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'W2I',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'W1I',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'GL1I',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'LL1I',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'EI',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'GL2I',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'LL2I',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TE0I',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TE1I',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TE2I',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TE3I',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TE4I',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'CDTI',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'CDSI',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TORI',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SORI',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'DCGI',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY_Bits',0,12,131,18,3
	.word	57033
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MEDT_S_Bits',0,12,134,18,16,4,23
	.byte	'MEDT_S',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MEDT_S_Bits',0,12,138,18,3
	.word	57570
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MEDT_T_Bits',0,12,141,18,16,4,23
	.byte	'MEDT_T',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MEDT_T_Bits',0,12,145,18,3
	.word	57678
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MLS1_Bits',0,12,148,18,16,4,23
	.byte	'MLS1',0,4
	.word	18296
	.byte	18,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	6,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MLS1_Bits',0,12,153,18,3
	.word	57786
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MLS2_Bits',0,12,156,18,16,4,23
	.byte	'MLS2',0,4
	.word	18296
	.byte	18,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	6,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MLS2_Bits',0,12,161,18,3
	.word	57911
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MPVAL1_Bits',0,12,164,18,16,4,23
	.byte	'MPVAL1',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'SIX1',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MPVAL1_Bits',0,12,169,18,3
	.word	58036
	.byte	22
	.byte	'_Ifx_GTM_DPLL_MPVAL2_Bits',0,12,172,18,16,4,23
	.byte	'MPVAL2',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'SIX2',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MPVAL2_Bits',0,12,177,18,3
	.word	58160
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NA_Bits',0,12,180,18,16,4,23
	.byte	'DB',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'DW',0,4
	.word	18296
	.byte	10,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NA_Bits',0,12,186,18,3
	.word	58284
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_S_Bits',0,12,189,18,16,4,23
	.byte	'NMB_S',0,4
	.word	18296
	.byte	20,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_S_Bits',0,12,194,18,3
	.word	58417
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,12,197,18,16,4,23
	.byte	'NMB_S_TAR',0,4
	.word	18296
	.byte	20,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_Bits',0,12,202,18,3
	.word	58545
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,12,205,18,16,4,23
	.byte	'NMB_S_TAR_OLD',0,4
	.word	18296
	.byte	20,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD_Bits',0,12,210,18,3
	.word	58685
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_T_Bits',0,12,213,18,16,4,23
	.byte	'NMB_T',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_T_Bits',0,12,218,18,3
	.word	58837
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,12,221,18,16,4,23
	.byte	'NMB_T_TAR',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_Bits',0,12,226,18,3
	.word	58965
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,12,229,18,16,4,23
	.byte	'NMB_T_TAR_OLD',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD_Bits',0,12,234,18,3
	.word	59105
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NTI_CNT_Bits',0,12,237,18,16,4,23
	.byte	'NTI_CNT',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NTI_CNT_Bits',0,12,241,18,3
	.word	59257
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NUSC_Bits',0,12,244,18,16,4,23
	.byte	'NUSE',0,4
	.word	18296
	.byte	6,26,2,35,0,23
	.byte	'FSS',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'SYN_S',0,4
	.word	18296
	.byte	6,19,2,35,0,23
	.byte	'SYN_S_OLD',0,4
	.word	18296
	.byte	6,13,2,35,0,23
	.byte	'VSN',0,4
	.word	18296
	.byte	6,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	4,3,2,35,0,23
	.byte	'WNUS',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'WSYN',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'WVSN',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUSC_Bits',0,12,255,18,3
	.word	59368
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NUSC_EXT1_Bits',0,12,130,19,16,4,23
	.byte	'SYN_S',0,4
	.word	18296
	.byte	7,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	9,16,2,35,0,23
	.byte	'SYN_S_OLD',0,4
	.word	18296
	.byte	7,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	7,2,2,35,0,23
	.byte	'WSYN',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'reserved_31',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUSC_EXT1_Bits',0,12,138,19,3
	.word	59586
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NUSC_EXT2_Bits',0,12,141,19,16,4,23
	.byte	'NUSE',0,4
	.word	18296
	.byte	7,25,2,35,0,23
	.byte	'reserved_7',0,4
	.word	18296
	.byte	8,17,2,35,0,23
	.byte	'FSS',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'VSN',0,4
	.word	18296
	.byte	7,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	6,3,2,35,0,23
	.byte	'WNUS',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'WVSN',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUSC_EXT2_Bits',0,12,151,19,3
	.word	59781
	.byte	22
	.byte	'_Ifx_GTM_DPLL_NUTC_Bits',0,12,154,19,16,4,23
	.byte	'NUTE',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'FST',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	2,19,2,35,0,23
	.byte	'SYN_T',0,4
	.word	18296
	.byte	3,16,2,35,0,23
	.byte	'SYN_T_OLD',0,4
	.word	18296
	.byte	3,13,2,35,0,23
	.byte	'VTN',0,4
	.word	18296
	.byte	6,7,2,35,0,23
	.byte	'reserved_25',0,4
	.word	18296
	.byte	4,3,2,35,0,23
	.byte	'WNUT',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'WSYN',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'WVTN',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUTC_Bits',0,12,166,19,3
	.word	60000
	.byte	22
	.byte	'_Ifx_GTM_DPLL_OSW_Bits',0,12,169,19,16,4,23
	.byte	'SWON_S',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SWON_T',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	6,24,2,35,0,23
	.byte	'OSS',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_OSW_Bits',0,12,176,19,3
	.word	60241
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PDT_Bits',0,12,179,19,16,4,23
	.byte	'DB',0,4
	.word	18296
	.byte	14,18,2,35,0,23
	.byte	'DW',0,4
	.word	18296
	.byte	10,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PDT_Bits',0,12,184,19,3
	.word	60398
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSA_Bits',0,12,187,19,16,4,23
	.byte	'PSA',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSA_Bits',0,12,191,19,3
	.word	60510
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSAC_Bits',0,12,194,19,16,4,23
	.byte	'PSAC',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSAC_Bits',0,12,198,19,3
	.word	60609
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSSC_Bits',0,12,201,19,16,4,23
	.byte	'PSSC',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSSC_Bits',0,12,205,19,3
	.word	60711
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSSM_Bits',0,12,208,19,16,4,23
	.byte	'PSSM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSSM_Bits',0,12,212,19,3
	.word	60813
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSSM_OLD_Bits',0,12,215,19,16,4,23
	.byte	'PSSM_OLD',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSSM_OLD_Bits',0,12,219,19,3
	.word	60915
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSTC_Bits',0,12,222,19,16,4,23
	.byte	'PSTC',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSTC_Bits',0,12,226,19,3
	.word	61029
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSTM_Bits',0,12,229,19,16,4,23
	.byte	'PSTM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSTM_Bits',0,12,233,19,3
	.word	61131
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PSTM_OLD_Bits',0,12,236,19,16,4,23
	.byte	'PSTM_OLD',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSTM_OLD_Bits',0,12,240,19,3
	.word	61233
	.byte	22
	.byte	'_Ifx_GTM_DPLL_PVT_Bits',0,12,243,19,16,4,23
	.byte	'PVT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PVT_Bits',0,12,247,19,3
	.word	61347
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RAM_INI_Bits',0,12,250,19,16,4,23
	.byte	'INIT_1A',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'INIT_1BC',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'INIT_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'INIT_RAM',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RAM_INI_Bits',0,12,130,20,3
	.word	61446
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_Bits',0,12,133,20,16,4,23
	.byte	'RCDT_SX',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_SX_Bits',0,12,137,20,3
	.word	61636
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,12,140,20,16,4,23
	.byte	'RCDT_SX_NOM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM_Bits',0,12,144,20,3
	.word	61747
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_Bits',0,12,147,20,16,4,23
	.byte	'RCDT_TX',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_TX_Bits',0,12,151,20,3
	.word	61870
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,12,154,20,16,4,23
	.byte	'RCDT_TX_NOM',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM_Bits',0,12,158,20,3
	.word	61981
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_S_Bits',0,12,161,20,16,4,23
	.byte	'RDT_S',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_S_Bits',0,12,165,20,3
	.word	62104
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,12,168,20,16,4,23
	.byte	'RDT_S_ACT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT_Bits',0,12,172,20,3
	.word	62209
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_TI_Bits',0,12,175,20,16,4,23
	.byte	'RDT_T',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_TI_Bits',0,12,179,20,3
	.word	62326
	.byte	22
	.byte	'_Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,12,182,20,16,4,23
	.byte	'RDT_T_ACT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT_Bits',0,12,186,20,3
	.word	62433
	.byte	22
	.byte	'_Ifx_GTM_DPLL_SIDEL_Bits',0,12,189,20,16,4,23
	.byte	'SIDEL',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_SIDEL_Bits',0,12,193,20,3
	.word	62550
	.byte	22
	.byte	'_Ifx_GTM_DPLL_SLR_Bits',0,12,196,20,16,4,23
	.byte	'SLR',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	16,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_SLR_Bits',0,12,201,20,3
	.word	62655
	.byte	22
	.byte	'_Ifx_GTM_DPLL_STA_Bits',0,12,204,20,16,4,23
	.byte	'STA_T',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'CNT_T',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'STA_S',0,4
	.word	18296
	.byte	8,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'CNT_S',0,4
	.word	18296
	.byte	3,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STA_Bits',0,12,213,20,3
	.word	62776
	.byte	22
	.byte	'_Ifx_GTM_DPLL_STATUS_Bits',0,12,216,20,16,4,23
	.byte	'FPCE',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CSO',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'CTO',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'CRO',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'RCS',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'RCT',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'PSE',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SOR',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MS',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TOR',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MT',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'RAM2_ERR',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	2,17,2,35,0,23
	.byte	'LOW_RES',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'CSVS',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'CSVT',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'CAIP2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'CAIP1',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ISN',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'ITN',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'BWD2',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'BWD1',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'LOCK2',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SYS',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'SYT',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'FSD',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'FTD',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'LOCK1',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'ERR',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STATUS_Bits',0,12,249,20,3
	.word	62973
	.byte	22
	.byte	'_Ifx_GTM_DPLL_STA_FLAG_Bits',0,12,252,20,16,4,23
	.byte	'STA_FLAG_T',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	7,24,2,35,0,23
	.byte	'STA_FLAG_S',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'INC_CNT1_FLAG',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'INC_CNT2_FLAG',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STA_FLAG_Bits',0,12,132,21,3
	.word	63548
	.byte	22
	.byte	'_Ifx_GTM_DPLL_STA_MASK_Bits',0,12,135,21,16,4,23
	.byte	'STA_NOTIFY_T',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'STA_NOTIFY_S',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STA_MASK_Bits',0,12,140,21,3
	.word	63758
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,12,143,21,16,4,23
	.byte	'TBU_TS0_S',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S_Bits',0,12,147,21,3
	.word	63900
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,12,150,21,16,4,23
	.byte	'TBU_TS0_T',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T_Bits',0,12,154,21,3
	.word	64017
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THMA_Bits',0,12,157,21,16,4,23
	.byte	'THMA',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THMA_Bits',0,12,162,21,3
	.word	64134
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THMI_Bits',0,12,165,21,16,4,23
	.byte	'THMI',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THMI_Bits',0,12,170,21,3
	.word	64259
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THVAL_Bits',0,12,173,21,16,4,23
	.byte	'THVAL',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THVAL_Bits',0,12,177,21,3
	.word	64384
	.byte	22
	.byte	'_Ifx_GTM_DPLL_THVAL2_Bits',0,12,180,21,16,4,23
	.byte	'THVAL',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THVAL2_Bits',0,12,184,21,3
	.word	64489
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TIDEL_Bits',0,12,187,21,16,4,23
	.byte	'TIDEL',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TIDEL_Bits',0,12,191,21,3
	.word	64596
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TLR_Bits',0,12,194,21,16,4,23
	.byte	'TLR',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	16,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TLR_Bits',0,12,199,21,3
	.word	64701
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TOV_Bits',0,12,202,21,16,4,23
	.byte	'TOV_DB',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'TOV_DW',0,4
	.word	18296
	.byte	6,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TOV_Bits',0,12,208,21,3
	.word	64822
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TOV_S_Bits',0,12,211,21,16,4,23
	.byte	'DB',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'DW',0,4
	.word	18296
	.byte	6,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TOV_S_Bits',0,12,217,21,3
	.word	64965
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TSAC_Bits',0,12,220,21,16,4,23
	.byte	'TSAC',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TSAC_Bits',0,12,224,21,3
	.word	65104
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TSF_S_Bits',0,12,227,21,16,4,23
	.byte	'TSF_S',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TSF_S_Bits',0,12,231,21,3
	.word	65206
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TSF_TI_Bits',0,12,234,21,16,4,23
	.byte	'TSF_T',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TSF_TI_Bits',0,12,238,21,3
	.word	65311
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_S_Bits',0,12,241,21,16,4,23
	.byte	'STATE_TS',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_S_Bits',0,12,245,21,3
	.word	65418
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_S_OLD_Bits',0,12,248,21,16,4,23
	.byte	'STATE_TS_OLD',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_S_OLD_Bits',0,12,252,21,3
	.word	65524
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_T_Bits',0,12,255,21,16,4,23
	.byte	'TRIGGER_TS',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_T_Bits',0,12,131,22,3
	.word	65642
	.byte	22
	.byte	'_Ifx_GTM_DPLL_TS_T_OLD_Bits',0,12,134,22,16,4,23
	.byte	'TRIGGER_TS_OLD',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_T_OLD_Bits',0,12,138,22,3
	.word	65750
	.byte	22
	.byte	'_Ifx_GTM_DSADCINSEL_Bits',0,12,141,22,16,4,23
	.byte	'INSEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'INSEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'INSEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'INSEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'INSEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'INSEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'INSEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'INSEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_DSADCINSEL_Bits',0,12,151,22,3
	.word	65870
	.byte	22
	.byte	'_Ifx_GTM_DSADC_OUTSEL0_Bits',0,12,154,22,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'SEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_DSADC_OUTSEL0_Bits',0,12,164,22,3
	.word	66079
	.byte	22
	.byte	'_Ifx_GTM_DSADC_OUTSEL1_Bits',0,12,167,22,16,4,23
	.byte	'SEL8',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL9',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL10',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL11',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL12',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL13',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	8,0,2,35,3,0,15
	.byte	'Ifx_GTM_DSADC_OUTSEL1_Bits',0,12,176,22,3
	.word	66278
	.byte	22
	.byte	'_Ifx_GTM_DTMAUXINSEL_Bits',0,12,179,22,16,4,23
	.byte	'ASEL0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'ASEL1',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'ASEL2',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'ASEL3',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'ASEL4',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'ASEL5',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'ASEL6',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'reserved_14',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'TSEL0',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'TSEL1',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'TSEL2',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'TSEL3',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'TSEL4',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_GTM_DTMAUXINSEL_Bits',0,12,195,22,3
	.word	66472
	.byte	22
	.byte	'_Ifx_GTM_DXINCON_Bits',0,12,198,22,16,4,23
	.byte	'IN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'IN1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IN2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'IN3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'IN4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IN5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'IN6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'IN7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'IN8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'IN9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'reserved_10',0,1
	.word	326
	.byte	6,0,2,35,1,23
	.byte	'DSS0',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'DSS1',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'DSS2',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'DSS3',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'DSS4',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'DSS5',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'DSS6',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'DSS7',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'DSS8',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'DSS9',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_GTM_DXINCON_Bits',0,12,222,22,3
	.word	66789
	.byte	22
	.byte	'_Ifx_GTM_DXOUTCON_Bits',0,12,225,22,16,4,23
	.byte	'OUT0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'OUT1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'OUT2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'OUT3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'OUT4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'OUT5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'OUT6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'OUT7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'OUT8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'OUT9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'reserved_10',0,4
	.word	3741
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_DXOUTCON_Bits',0,12,238,22,3
	.word	67204
	.byte	22
	.byte	'_Ifx_GTM_EIRQ_EN_Bits',0,12,241,22,16,4,23
	.byte	'AEI_TO_XPT_EIRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'AEI_USP_ADDR_EIRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'AEI_IM_ADDR_EIRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'AEI_USP_BE_EIRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'AEIM_USP_ADDR_EIRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'AEIM_IM_ADDR_EIRQ_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'AEIM_USP_BE_EIRQ_EN',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'CLK_EN_ERR_EIRQ_EN',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'CLK_PER_ERR_EIRQ_EN',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_EIRQ_EN_Bits',0,12,253,22,3
	.word	67448
	.byte	22
	.byte	'_Ifx_GTM_EXT_CAP_EN_Bits',0,12,128,23,16,4,23
	.byte	'TIM_I_EXT_CAP_EN',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'TIM_IP1_EXT_CAP_EN',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_EXT_CAP_EN_Bits',0,12,133,23,3
	.word	67809
	.byte	22
	.byte	'_Ifx_GTM_HW_CONF_Bits',0,12,136,23,16,4,23
	.byte	'GRSTEN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'BRIDGE_MODE_RST',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SYNC_INPUT_REG',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'CFG_CLOCK_RATE',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ATOM_OUT_RST',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ATOM_TRIG_CHAIN',0,4
	.word	18296
	.byte	3,24,2,35,0,23
	.byte	'TOM_OUT_RST',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TOM_TRIG_CHAIN',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'RAM_INIT_RST',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'ERM',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ARU_CONNECT_CONFIG',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'IRQ_MODE_LEVEL',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'IRQ_MODE_PULSE',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'IRQ_MODE_PULSE_NOTIFY',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'IRQ_MODE_SINGLE_PULSE',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ATOM_TRIG_INTCHAIN',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'TOM_TRIG_INTCHAIN',0,4
	.word	18296
	.byte	5,3,2,35,0,23
	.byte	'INT_CLK_EN_GEN',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_HW_CONF_Bits',0,12,158,23,3
	.word	67955
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI0_Bits',0,12,161,23,16,4,23
	.byte	'FIFO0_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'FIFO0_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'FIFO0_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FIFO0_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'FIFO0_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'FIFO0_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'FIFO0_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'FIFO0_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'FIFO1_CH0_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'FIFO1_CH1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'FIFO1_CH2_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'FIFO1_CH3_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'FIFO1_CH4_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'FIFO1_CH5_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'FIFO1_CH6_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'FIFO1_CH7_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'FIFO2_CH0_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'FIFO2_CH1_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'FIFO2_CH2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'FIFO2_CH3_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'FIFO2_CH4_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'FIFO2_CH5_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'FIFO2_CH6_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'FIFO2_CH7_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI0_Bits',0,12,188,23,3
	.word	68529
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI1_Bits',0,12,191,23,16,4,23
	.byte	'TIM0_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TIM0_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TIM0_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TIM0_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TIM0_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TIM0_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TIM0_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TIM0_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TIM1_CH0_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TIM1_CH1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TIM1_CH2_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TIM1_CH3_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TIM1_CH4_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TIM1_CH5_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TIM1_CH6_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TIM1_CH7_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TIM2_CH0_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TIM2_CH1_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TIM2_CH2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TIM2_CH3_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TIM2_CH4_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TIM2_CH5_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TIM2_CH6_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TIM2_CH7_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TIM3_CH0_EIRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TIM3_CH1_EIRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TIM3_CH2_EIRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TIM3_CH3_EIRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TIM3_CH4_EIRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TIM3_CH5_EIRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TIM3_CH6_EIRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TIM3_CH7_EIRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI1_Bits',0,12,225,23,3
	.word	69247
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI2_Bits',0,12,228,23,16,4,23
	.byte	'TIM4_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TIM4_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TIM4_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TIM4_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TIM4_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TIM4_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TIM4_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TIM4_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TIM5_CH0_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TIM5_CH1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TIM5_CH2_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TIM5_CH3_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TIM5_CH4_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TIM5_CH5_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TIM5_CH6_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TIM5_CH7_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TIM6_CH0_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TIM6_CH1_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TIM6_CH2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TIM6_CH3_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TIM6_CH4_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TIM6_CH5_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TIM6_CH6_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TIM6_CH7_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TIM7_CH0_EIRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TIM7_CH1_EIRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TIM7_CH2_EIRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TIM7_CH3_EIRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TIM7_CH4_EIRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TIM7_CH5_EIRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TIM7_CH6_EIRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TIM7_CH7_EIRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI2_Bits',0,12,134,24,3
	.word	70118
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI3_Bits',0,12,137,24,16,4,23
	.byte	'MCS0_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS0_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCS0_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCS0_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCS0_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCS0_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCS0_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCS0_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'MCS1_CH0_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCS1_CH1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'MCS1_CH2_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MCS1_CH3_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCS1_CH4_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCS1_CH5_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCS1_CH6_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCS1_CH7_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCS2_CH0_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCS2_CH1_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCS2_CH2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCS2_CH3_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'MCS2_CH4_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCS2_CH5_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCS2_CH6_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCS2_CH7_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCS3_CH0_EIRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCS3_CH1_EIRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCS3_CH2_EIRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCS3_CH3_EIRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCS3_CH4_EIRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCS3_CH5_EIRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'MCS3_CH6_EIRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'MCS3_CH7_EIRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI3_Bits',0,12,171,24,3
	.word	70989
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI4_Bits',0,12,174,24,16,4,23
	.byte	'MCS4_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS4_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCS4_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCS4_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCS4_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCS4_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCS4_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCS4_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'MCS5_CH0_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCS5_CH1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'MCS5_CH2_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MCS5_CH3_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCS5_CH4_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCS5_CH5_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCS5_CH6_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCS5_CH7_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCS6_CH0_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCS6_CH1_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCS6_CH2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCS6_CH3_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'MCS6_CH4_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCS6_CH5_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCS6_CH6_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCS6_CH7_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCS7_CH0_EIRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCS7_CH1_EIRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCS7_CH2_EIRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCS7_CH3_EIRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCS7_CH4_EIRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCS7_CH5_EIRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'MCS7_CH6_EIRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'MCS7_CH7_EIRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI4_Bits',0,12,208,24,3
	.word	71860
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI_MCS_Bits',0,12,211,24,16,4,23
	.byte	'MCS_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCS_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCS_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCS_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCS_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCS_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCS_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI_MCS_Bits',0,12,222,24,3
	.word	72731
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI_PSM_Bits',0,12,225,24,16,4,23
	.byte	'PSM_M0_CH0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'PSM_M0_CH1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'PSM_M0_CH2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'PSM_M0_CH3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'PSM_M0_CH4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'PSM_M0_CH5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'PSM_M0_CH6_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'PSM_M0_CH7_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'PSM_M1_CH0_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'PSM_M1_CH1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PSM_M1_CH2_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'PSM_M1_CH3_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'PSM_M1_CH4_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'PSM_M1_CH5_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'PSM_M1_CH6_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'PSM_M1_CH7_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'PSM_M2_CH0_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'PSM_M2_CH1_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'PSM_M2_CH2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'PSM_M2_CH3_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'PSM_M2_CH4_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'PSM_M2_CH5_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'PSM_M2_CH6_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'PSM_M2_CH7_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI_PSM_Bits',0,12,252,24,3
	.word	73022
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CEI_SPE_Bits',0,12,255,24,16,4,23
	.byte	'SPE0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SPE1_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SPE2_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SPE3_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SPE4_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SPE5_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI_SPE_Bits',0,12,136,25,3
	.word	73770
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CI_ATOM_Bits',0,12,139,25,16,4,23
	.byte	'ATOM_M0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ATOM_M0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ATOM_M0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ATOM_M0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ATOM_M0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ATOM_M0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ATOM_M0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ATOM_M0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ATOM_M1_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ATOM_M1_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ATOM_M1_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ATOM_M1_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'ATOM_M1_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'ATOM_M1_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ATOM_M1_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'ATOM_M1_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'ATOM_M2_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'ATOM_M2_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'ATOM_M2_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'ATOM_M2_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ATOM_M2_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'ATOM_M2_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'ATOM_M2_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'ATOM_M2_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'ATOM_M3_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'ATOM_M3_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'ATOM_M3_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ATOM_M3_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'ATOM_M3_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'ATOM_M3_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'ATOM_M3_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'ATOM_M3_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_ATOM_Bits',0,12,173,25,3
	.word	73995
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CI_MCS_Bits',0,12,176,25,16,4,23
	.byte	'MCS_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCS_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCS_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCS_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCS_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCS_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCS_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_MCS_Bits',0,12,187,25,3
	.word	74936
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CI_PSM_Bits',0,12,190,25,16,4,23
	.byte	'PSM_M0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'PSM_M0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'PSM_M0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'PSM_M0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'PSM_M0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'PSM_M0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'PSM_M0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'PSM_M0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'PSM_M1_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'PSM_M1_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'PSM_M1_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'PSM_M1_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'PSM_M1_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'PSM_M1_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'PSM_M1_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'PSM_M1_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'PSM_M2_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'PSM_M2_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'PSM_M2_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'PSM_M2_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'PSM_M2_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'PSM_M2_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'PSM_M2_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'PSM_M2_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_PSM_Bits',0,12,217,25,3
	.word	75217
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CI_SPE_Bits',0,12,220,25,16,4,23
	.byte	'SPE0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SPE1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SPE2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SPE3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SPE4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'SPE5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_SPE_Bits',0,12,229,25,3
	.word	75939
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_CI_TOM_Bits',0,12,232,25,16,4,23
	.byte	'TOM_M0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TOM_M0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TOM_M0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TOM_M0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TOM_M0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TOM_M0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TOM_M0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TOM_M0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TOM_M0_CH8_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TOM_M0_CH9_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TOM_M0_CH10_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TOM_M0_CH11_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TOM_M0_CH12_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TOM_M0_CH13_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TOM_M0_CH14_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TOM_M0_CH15_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TOM_M1_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TOM_M1_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TOM_M1_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TOM_M1_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TOM_M1_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TOM_M1_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TOM_M1_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TOM_M1_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TOM_M1_CH8_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TOM_M1_CH9_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TOM_M1_CH10_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TOM_M1_CH11_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TOM_M1_CH12_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TOM_M1_CH13_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TOM_M1_CH14_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TOM_M1_CH15_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_TOM_Bits',0,12,138,26,3
	.word	76156
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_Bits',0,12,141,26,16,4,23
	.byte	'GTM_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'BRC_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'FIFO0_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FIFO1_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TIM0_EIRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TIM1_EIRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TIM2_EIRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TIM3_EIRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TIM4_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TIM5_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TIM6_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TIM7_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCS0_EIRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCS1_EIRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCS2_EIRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCS3_EIRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCS4_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCS5_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCS6_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCS7_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'SPE0_EIRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'SPE1_EIRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'SPE2_EIRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'SPE3_EIRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'CMP_EIRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'DPLL_EIRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	6,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_MEI_Bits',0,12,170,26,3
	.word	77075
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_MEI_CLS_Bits',0,12,173,26,16,4,23
	.byte	'TIM_M0_EIRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS_M0_EIRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SPE_M0_EIRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FIFO_M0_EIRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	4,24,2,35,0,23
	.byte	'TIM_M1_EIRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCS_M1_EIRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'SPE_M1_EIRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'FIFO_M1_EIRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	4,16,2,35,0,23
	.byte	'TIM_M2_EIRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCS_M2_EIRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'SPE_M2_EIRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'FIFO_M2_EIRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'TIM_M3_EIRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCS_M3_EIRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'SPE_M3_EIRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_MEI_CLS_Bits',0,12,195,26,3
	.word	77712
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R0_Bits',0,12,198,26,16,4,23
	.byte	'ARU_NEW_DATA0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ARU_NEW_DATA1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ARU_ACC_ACK_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'BRC_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'AEI_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'CMP_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'SPE0_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'SPE1_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SPE2_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'SPE3_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'SPE4_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'SPE5_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	4,16,2,35,0,23
	.byte	'PSM0_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'PSM0_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'PSM0_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'PSM0_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'PSM0_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'PSM0_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'PSM0_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'PSM0_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'PSM1_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'PSM1_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'PSM1_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'PSM1_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'PSM1_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'PSM1_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'PSM1_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'PSM1_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R0_Bits',0,12,229,26,3
	.word	78251
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R1_Bits',0,12,232,26,16,4,23
	.byte	'DPLL_DCGI_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'DPLL_EDI_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'DPLL_TINI_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DPLL_TAXI_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'DPLL_SISI_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'DPLL_TISI_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'DPLL_MSI_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'DPLL_MTI_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'DPLL_SASI_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'DPLL_TASI_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'DPLL_PWI_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'DPLL_W2I_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'DPLL_W1I_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'DPLL_GL1I_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'DPLL_LL1I_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'DPLL_EI_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'DPLL_GL2I_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'DPLL_LL2I_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'DPLL_TE0I_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'DPLL_TE1I_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'DPLL_TE2I_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'DPLL_TE3I_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'DPLL_TE4I_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'DPLL_CDTI_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'DPLL_CDSI_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'DPLL_TORI_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'DPLL_SORI_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	5,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R1_Bits',0,12,134,27,3
	.word	78987
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R10_Bits',0,12,137,27,16,4,23
	.byte	'ATOM4_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ATOM4_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ATOM4_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ATOM4_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ATOM4_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ATOM4_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ATOM4_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ATOM4_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ATOM5_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ATOM5_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ATOM5_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ATOM5_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'ATOM5_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'ATOM5_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ATOM5_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'ATOM5_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'ATOM6_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'ATOM6_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'ATOM6_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'ATOM6_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ATOM6_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'ATOM6_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'ATOM6_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'ATOM6_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'ATOM7_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'ATOM7_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'ATOM7_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ATOM7_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'ATOM7_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'ATOM7_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'ATOM7_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'ATOM7_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R10_Bits',0,12,171,27,3
	.word	79744
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R11_Bits',0,12,174,27,16,4,23
	.byte	'ATOM8_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ATOM8_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ATOM8_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ATOM8_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ATOM8_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ATOM8_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ATOM8_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ATOM8_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ATOM9_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ATOM9_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ATOM9_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ATOM9_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'ATOM9_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'ATOM9_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ATOM9_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'ATOM9_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'ATOM10_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'ATOM10_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'ATOM10_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'ATOM10_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ATOM10_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'ATOM10_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'ATOM10_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'ATOM10_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'ATOM11_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'ATOM11_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'ATOM11_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ATOM11_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'ATOM11_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'ATOM11_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'ATOM11_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'ATOM11_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R11_Bits',0,12,208,27,3
	.word	80613
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R2_Bits',0,12,211,27,16,4,23
	.byte	'TIM0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TIM0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TIM0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TIM0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TIM0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TIM0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TIM0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TIM0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TIM1_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TIM1_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TIM1_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TIM1_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TIM1_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TIM1_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TIM1_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TIM1_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TIM2_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TIM2_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TIM2_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TIM2_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TIM2_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TIM2_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TIM2_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TIM2_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TIM3_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TIM3_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TIM3_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TIM3_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TIM3_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TIM3_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TIM3_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TIM3_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R2_Bits',0,12,245,27,3
	.word	81498
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R3_Bits',0,12,248,27,16,4,23
	.byte	'TIM4_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TIM4_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TIM4_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TIM4_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TIM4_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TIM4_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TIM4_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TIM4_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TIM5_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TIM5_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TIM5_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TIM5_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TIM5_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TIM5_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TIM5_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TIM5_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TIM6_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TIM6_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TIM6_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TIM6_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TIM6_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TIM6_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TIM6_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TIM6_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TIM7_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TIM7_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TIM7_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TIM7_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TIM7_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TIM7_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TIM7_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TIM7_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R3_Bits',0,12,154,28,3
	.word	82333
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R4_Bits',0,12,157,28,16,4,23
	.byte	'MCS0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCS0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCS0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCS0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCS0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCS0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCS0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'MCS1_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCS1_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'MCS1_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MCS1_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCS1_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCS1_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCS1_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCS1_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCS2_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCS2_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCS2_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCS2_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'MCS2_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCS2_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCS2_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCS2_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCS3_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCS3_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCS3_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCS3_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCS3_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCS3_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'MCS3_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'MCS3_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R4_Bits',0,12,191,28,3
	.word	83168
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R5_Bits',0,12,194,28,16,4,23
	.byte	'MCS4_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCS4_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCS4_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCS4_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCS4_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCS4_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCS4_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCS4_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'MCS5_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCS5_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'MCS5_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MCS5_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCS5_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCS5_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCS5_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCS5_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCS6_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCS6_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCS6_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCS6_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'MCS6_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCS6_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCS6_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCS6_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCS7_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCS7_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCS7_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCS7_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCS7_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCS7_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'MCS7_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'MCS7_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R5_Bits',0,12,228,28,3
	.word	84003
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R6_Bits',0,12,231,28,16,4,23
	.byte	'TOM0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TOM0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TOM0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TOM0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TOM0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TOM0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TOM0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TOM0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TOM0_CH8_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TOM0_CH9_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TOM0_CH10_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TOM0_CH11_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TOM0_CH12_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TOM0_CH13_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TOM0_CH14_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TOM0_CH15_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TOM1_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TOM1_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TOM1_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TOM1_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TOM1_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TOM1_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TOM1_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TOM1_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TOM1_CH8_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TOM1_CH9_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TOM1_CH10_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TOM1_CH11_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TOM1_CH12_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TOM1_CH13_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TOM1_CH14_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TOM1_CH15_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R6_Bits',0,12,137,29,3
	.word	84838
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R7_Bits',0,12,140,29,16,4,23
	.byte	'TOM2_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TOM2_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TOM2_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TOM2_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TOM2_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TOM2_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TOM2_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TOM2_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TOM2_CH8_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TOM2_CH9_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TOM2_CH10_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TOM2_CH11_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TOM2_CH12_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TOM2_CH13_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TOM2_CH14_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TOM2_CH15_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TOM3_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TOM3_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TOM3_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TOM3_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TOM3_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TOM3_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TOM3_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TOM3_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TOM3_CH8_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TOM3_CH9_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TOM3_CH10_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TOM3_CH11_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TOM3_CH12_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TOM3_CH13_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TOM3_CH14_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TOM3_CH15_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R7_Bits',0,12,174,29,3
	.word	85685
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R8_Bits',0,12,177,29,16,4,23
	.byte	'TOM4_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TOM4_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TOM4_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TOM4_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TOM4_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TOM4_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TOM4_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TOM4_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TOM4_CH8_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TOM4_CH9_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TOM4_CH10_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TOM4_CH11_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TOM4_CH12_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TOM4_CH13_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TOM4_CH14_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TOM4_CH15_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TOM5_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TOM5_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TOM5_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TOM5_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TOM5_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TOM5_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TOM5_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TOM5_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TOM5_CH8_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TOM5_CH9_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'TOM5_CH10_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TOM5_CH11_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TOM5_CH12_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TOM5_CH13_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TOM5_CH14_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'TOM5_CH15_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R8_Bits',0,12,211,29,3
	.word	86532
	.byte	22
	.byte	'_Ifx_GTM_ICM_IRQG_R9_Bits',0,12,214,29,16,4,23
	.byte	'ATOM0_CH0_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ATOM0_CH1_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ATOM0_CH2_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ATOM0_CH3_IRQ',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ATOM0_CH4_IRQ',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ATOM0_CH5_IRQ',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ATOM0_CH6_IRQ',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ATOM0_CH7_IRQ',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ATOM1_CH0_IRQ',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ATOM1_CH1_IRQ',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ATOM1_CH2_IRQ',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ATOM1_CH3_IRQ',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'ATOM1_CH4_IRQ',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'ATOM1_CH5_IRQ',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ATOM1_CH6_IRQ',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'ATOM1_CH7_IRQ',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'ATOM2_CH0_IRQ',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'ATOM2_CH1_IRQ',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'ATOM2_CH2_IRQ',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'ATOM2_CH3_IRQ',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'ATOM2_CH4_IRQ',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'ATOM2_CH5_IRQ',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'ATOM2_CH6_IRQ',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'ATOM2_CH7_IRQ',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'ATOM3_CH0_IRQ',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'ATOM3_CH1_IRQ',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'ATOM3_CH2_IRQ',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'ATOM3_CH3_IRQ',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'ATOM3_CH4_IRQ',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'ATOM3_CH5_IRQ',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'ATOM3_CH6_IRQ',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'ATOM3_CH7_IRQ',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R9_Bits',0,12,248,29,3
	.word	87379
	.byte	22
	.byte	'_Ifx_GTM_INTOUT_Bits',0,12,251,29,16,4,23
	.byte	'INT0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_INTOUT_Bits',0,12,255,29,3
	.word	88246
	.byte	22
	.byte	'_Ifx_GTM_IRQ_EN_Bits',0,12,130,30,16,4,23
	.byte	'AEI_TO_XPT_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'AEI_USP_ADDR_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'AEI_IM_ADDR_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'AEI_USP_BE_IRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'AEIM_USP_ADDR_IRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'AEIM_IM_ADDR_IRQ_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'AEIM_USP_BE_IRQ_EN',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'CLK_EN_ERR_IRQ_EN',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'CLK_PER_ERR_IRQ_EN',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_EN_Bits',0,12,142,30,3
	.word	88341
	.byte	22
	.byte	'_Ifx_GTM_IRQ_FORCINT_Bits',0,12,145,30,16,4,23
	.byte	'TRG_AEI_TO_XPT',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_AEI_USP_ADDR',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_AEI_IM_ADDR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_AEI_USP_BE',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG_AEIM_USP_ADDR',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG_AEIM_IM_ADDR',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TRG_AEIM_USP_BE',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TRG_CLK_EN_ERR',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TRG_CLK_PER_ERR',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_FORCINT_Bits',0,12,157,30,3
	.word	88691
	.byte	22
	.byte	'_Ifx_GTM_IRQ_MODE_Bits',0,12,160,30,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_MODE_Bits',0,12,164,30,3
	.word	89024
	.byte	22
	.byte	'_Ifx_GTM_IRQ_NOTIFY_Bits',0,12,167,30,16,4,23
	.byte	'AEI_TO_XPT',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'AEI_USP_ADDR',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'AEI_IM_ADDR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'AEI_USP_BE',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'AEIM_USP_ADDR',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'AEIM_IM_ADDR',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'AEIM_USP_BE',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'CLK_EN_ERR',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'CLK_PER_ERR',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	15,8,2,35,0,23
	.byte	'CLK_EN_ERR_STATE0',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'CLK_EN_ERR_STATE1',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'CLK_EN_EXP_STATE0',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'CLK_EN_EXP_STATE1',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_NOTIFY_Bits',0,12,185,30,3
	.word	89127
	.byte	22
	.byte	'_Ifx_GTM_LCDCDCOUTSEL_Bits',0,12,188,30,16,4,23
	.byte	'SEL',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_LCDCDCOUTSEL_Bits',0,12,192,30,3
	.word	89584
	.byte	22
	.byte	'_Ifx_GTM_MAP_CTRL_Bits',0,12,195,30,16,4,23
	.byte	'TSEL',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SSL',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'LSEL',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	11,16,2,35,0,23
	.byte	'TSPP0_EN',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TSPP0_DLD',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'TSPP0_I0V',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TSPP0_I1V',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TSPP0_I2V',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TSPP1_EN',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TSPP1_DLD',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'TSPP1_I0V',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'TSPP1_I1V',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TSPP1_I2V',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'reserved_31',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_MAP_CTRL_Bits',0,12,215,30,3
	.word	89690
	.byte	22
	.byte	'_Ifx_GTM_MCFG_CTRL_Bits',0,12,218,30,16,4,23
	.byte	'MEM0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'MEM1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'MEM2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'MEM3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'MEM4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'MEM5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'MEM6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'MEM7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'MEM8',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'MEM9',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	12,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCFG_CTRL_Bits',0,12,231,30,3
	.word	90120
	.byte	22
	.byte	'_Ifx_GTM_MCSINTCLR_Bits',0,12,234,30,16,4,23
	.byte	'MCS0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'MCS1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'MCS2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'MCS3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'MCS4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'MCS5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'MCS6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'MCS7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'MCS8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'MCS9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'reserved_10',0,4
	.word	3741
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCSINTCLR_Bits',0,12,247,30,3
	.word	90366
	.byte	22
	.byte	'_Ifx_GTM_MCSINTSTAT_Bits',0,12,250,30,16,4,23
	.byte	'MCS00',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'MCS10',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'MCS20',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'MCS30',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'MCS40',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'MCS50',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'MCS60',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'MCS70',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'MCS80',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'MCS90',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'reserved_10',0,4
	.word	3741
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCSINTSTAT_Bits',0,12,135,31,3
	.word	90612
	.byte	22
	.byte	'_Ifx_GTM_MCSTRIGOUTSEL_Bits',0,12,138,31,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'SEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_MCSTRIGOUTSEL_Bits',0,12,148,31,3
	.word	90870
	.byte	22
	.byte	'_Ifx_GTM_MCS_AEM_DIS_Bits',0,12,151,31,16,4,23
	.byte	'DIS_CLS0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'DIS_CLS1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'DIS_CLS2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'DIS_CLS3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'DIS_CLS4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'DIS_CLS5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'DIS_CLS6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'DIS_CLS7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'DIS_CLS8',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'DIS_CLS9',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'DIS_CLS10',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'DIS_CLS11',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_AEM_DIS_Bits',0,12,166,31,3
	.word	91069
	.byte	22
	.byte	'_Ifx_GTM_MCS_CAT_Bits',0,12,169,31,16,4,23
	.byte	'CAT0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CAT1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'CAT2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'CAT3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'CAT4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'CAT5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'CAT6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'CAT7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CAT_Bits',0,12,180,31,3
	.word	91401
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_ACB_Bits',0,12,183,31,16,4,23
	.byte	'ACB0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ACB1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ACB2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ACB3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACB4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_ACB_Bits',0,12,191,31,3
	.word	91610
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_CTRG_Bits',0,12,194,31,16,4,23
	.byte	'TRG0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TRG6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TRG7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TRG8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TRG9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TRG10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TRG11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TRG12',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TRG13',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TRG14',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TRG15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TRG16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRG17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TRG18',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TRG19',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TRG20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TRG21',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TRG22',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TRG23',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_CTRG_Bits',0,12,221,31,3
	.word	91777
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_CTRL_Bits',0,12,224,31,16,4,23
	.byte	'EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ERR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'CY',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'Z',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'V',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'N',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'CAT',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'CWT',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'SAT',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	5,16,2,35,0,23
	.byte	'SP_CNT',0,4
	.word	18296
	.byte	3,13,2,35,0,23
	.byte	'reserved_19',0,4
	.word	18296
	.byte	13,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_CTRL_Bits',0,12,240,31,3
	.word	92265
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,12,243,31,16,4,23
	.byte	'MCS_EIRQ_EN0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'STK_ERR_EIRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ERR_EIRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN_Bits',0,12,249,31,3
	.word	92560
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,12,252,31,16,4,23
	.byte	'MCS_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'STK_ERR_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ERR_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN_Bits',0,12,130,32,3
	.word	92729
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,12,133,32,16,4,23
	.byte	'TRG_MCS_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_STK_ERR_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_ERR_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT_Bits',0,12,139,32,3
	.word	92892
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,12,142,32,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE_Bits',0,12,146,32,3
	.word	93068
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,12,149,32,16,4,23
	.byte	'MCS_IRQ',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'STK_ERR_IRQ',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ERR_IRQ',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'reserved_3',0,4
	.word	18296
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY_Bits',0,12,155,32,3
	.word	93185
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_MHB_Bits',0,12,158,32,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_MHB_Bits',0,12,162,32,3
	.word	93347
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_PC_Bits',0,12,165,32,16,4,23
	.byte	'PC',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_PC_Bits',0,12,169,32,3
	.word	93450
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_R_Bits',0,12,172,32,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_R_Bits',0,12,176,32,3
	.word	93550
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_STRG_Bits',0,12,179,32,16,4,23
	.byte	'TRG0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TRG6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TRG7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'TRG8',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'TRG9',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'TRG10',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'TRG11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TRG12',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'TRG13',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'TRG14',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'TRG15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TRG16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRG17',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'TRG18',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'TRG19',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'TRG20',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'TRG21',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'TRG22',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'TRG23',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_STRG_Bits',0,12,206,32,3
	.word	93650
	.byte	22
	.byte	'_Ifx_GTM_MCS_CTRL_STAT_Bits',0,12,209,32,16,4,23
	.byte	'SCD_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	6,24,2,35,0,23
	.byte	'SCD_CH',0,4
	.word	18296
	.byte	4,20,2,35,0,23
	.byte	'reserved_12',0,4
	.word	18296
	.byte	4,16,2,35,0,23
	.byte	'RAM_RST',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'HLT_SP_OFL',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'reserved_18',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'ERR_SRC_ID',0,4
	.word	18296
	.byte	3,9,2,35,0,23
	.byte	'reserved_23',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'EN_TIM_FOUT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'EN_XOREG',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'HLT_AEIM_ERR',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	5,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CTRL_STAT_Bits',0,12,224,32,3
	.word	94138
	.byte	22
	.byte	'_Ifx_GTM_MCS_CWT_Bits',0,12,227,32,16,4,23
	.byte	'CWT0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CWT1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'CWT2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'CWT3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'CWT4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'CWT5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'CWT6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'CWT7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CWT_Bits',0,12,238,32,3
	.word	94491
	.byte	22
	.byte	'_Ifx_GTM_MCS_ERR_Bits',0,12,241,32,16,4,23
	.byte	'ERR0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ERR1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ERR2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ERR3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ERR4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ERR5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ERR6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ERR7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_ERR_Bits',0,12,252,32,3
	.word	94700
	.byte	22
	.byte	'_Ifx_GTM_MCS_REG_PROT_Bits',0,12,255,32,16,4,23
	.byte	'WPROT0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'WPROT1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'WPROT2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'WPROT3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'WPROT4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'WPROT5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'WPROT6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'WPROT7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_REG_PROT_Bits',0,12,138,33,3
	.word	94909
	.byte	22
	.byte	'_Ifx_GTM_MCS_RESET_Bits',0,12,141,33,16,4,23
	.byte	'RST0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'RST1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'RST2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'RST3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'RST4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'RST5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'RST6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'RST7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_RESET_Bits',0,12,152,33,3
	.word	95145
	.byte	22
	.byte	'_Ifx_GTM_MON_ACTIVITY_MCS_Bits',0,12,155,33,16,4,23
	.byte	'MCA_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCA_1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCA_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCA_3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCA_4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCA_5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCA_6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCA_7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_MON_ACTIVITY_MCS_Bits',0,12,166,33,3
	.word	95358
	.byte	22
	.byte	'_Ifx_GTM_MON_ACTIVITY_R0_Bits',0,12,169,33,16,4,23
	.byte	'MCA_0_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCA_0_1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCA_0_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCA_0_3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCA_0_4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCA_0_5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCA_0_6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCA_0_7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'MCA_1_0',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCA_1_1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'MCA_1_2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MCA_1_3',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCA_1_4',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCA_1_5',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCA_1_6',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCA_1_7',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCA_2_0',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCA_2_1',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCA_2_2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCA_2_3',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'MCA_2_4',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCA_2_5',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCA_2_6',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCA_2_7',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCA_3_0',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCA_3_1',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCA_3_2',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCA_3_3',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCA_3_4',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCA_3_5',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'MCA_3_6',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'MCA_3_7',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_MON_ACTIVITY_R0_Bits',0,12,203,33,3
	.word	95593
	.byte	22
	.byte	'_Ifx_GTM_MON_ACTIVITY_R1_Bits',0,12,206,33,16,4,23
	.byte	'MCA_4_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'MCA_4_1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'MCA_4_2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'MCA_4_3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'MCA_4_4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'MCA_4_5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'MCA_4_6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'MCA_4_7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'MCA_5_0',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'MCA_5_1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'MCA_5_2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'MCA_5_3',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'MCA_5_4',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'MCA_5_5',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'MCA_5_6',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'MCA_5_7',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'MCA_6_0',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'MCA_6_1',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'MCA_6_2',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'MCA_6_3',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'MCA_6_4',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCA_6_5',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCA_6_6',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCA_6_7',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCA_7_0',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCA_7_1',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCA_7_2',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCA_7_3',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCA_7_4',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCA_7_5',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'MCA_7_6',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'MCA_7_7',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_MON_ACTIVITY_R1_Bits',0,12,240,33,3
	.word	96276
	.byte	22
	.byte	'_Ifx_GTM_MON_STATUS_Bits',0,12,243,33,16,4,23
	.byte	'ACT_CMU0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ACT_CMU1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'ACT_CMU2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'ACT_CMU3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'ACT_CMU4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ACT_CMU5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'ACT_CMU6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'ACT_CMU7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'ACT_CMUFX0',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'ACT_CMUFX1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'ACT_CMUFX2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'ACT_CMUFX3',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'ACT_CMUFX4',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'reserved_13',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ACT_CMU8',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'CMP_ERR',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	3,12,2,35,0,23
	.byte	'MCS0_ERR',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'MCS1_ERR',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'MCS2_ERR',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'MCS3_ERR',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'MCS4_ERR',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'MCS5_ERR',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'MCS6_ERR',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'MCS7_ERR',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'MCS8_ERR',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'MCS9_ERR',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_MON_STATUS_Bits',0,12,146,34,3
	.word	96959
	.byte	22
	.byte	'_Ifx_GTM_MSC_MSCQ_INHCON_Bits',0,12,149,34,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'SEL3',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'SEL4',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SEL5',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'SEL6',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'SEL7',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'SEL8',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'SEL9',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'SEL10',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'SEL11',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'SEL12',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'SEL13',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'SEL14',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'SEL15',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_MSCQ_INHCON_Bits',0,12,167,34,3
	.word	97625
	.byte	22
	.byte	'_Ifx_GTM_MSC_MSCQ_INLCON_Bits',0,12,170,34,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'SEL3',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'SEL4',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SEL5',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'SEL6',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'SEL7',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'SEL8',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'SEL9',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'SEL10',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'SEL11',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'SEL12',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'SEL13',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'SEL14',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'SEL15',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_MSCQ_INLCON_Bits',0,12,188,34,3
	.word	97962
	.byte	22
	.byte	'_Ifx_GTM_MSC_MSCQ_INLEXTCON_Bits',0,12,191,34,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'SEL3',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'SEL4',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'SEL5',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'SEL6',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'SEL7',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'SEL8',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'SEL9',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'SEL10',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'SEL11',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'SEL12',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'SEL13',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'SEL14',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'SEL15',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_MSCQ_INLEXTCON_Bits',0,12,209,34,3
	.word	98299
	.byte	22
	.byte	'_Ifx_GTM_MSC_SET_CON0_Bits',0,12,212,34,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	5,3,2,35,1,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	3,0,2,35,1,23
	.byte	'SEL2',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	3,0,2,35,2,23
	.byte	'SEL3',0,1
	.word	326
	.byte	5,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_SET_CON0_Bits',0,12,222,34,3
	.word	98642
	.byte	22
	.byte	'_Ifx_GTM_MSC_SET_CON1_Bits',0,12,225,34,16,4,23
	.byte	'SEL4',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'SEL5',0,1
	.word	326
	.byte	5,3,2,35,1,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	3,0,2,35,1,23
	.byte	'SEL6',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	3,0,2,35,2,23
	.byte	'SEL7',0,1
	.word	326
	.byte	5,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_SET_CON1_Bits',0,12,235,34,3
	.word	98866
	.byte	22
	.byte	'_Ifx_GTM_MSC_SET_CON2_Bits',0,12,238,34,16,4,23
	.byte	'SEL8',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'SEL9',0,1
	.word	326
	.byte	5,3,2,35,1,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	3,0,2,35,1,23
	.byte	'SEL10',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	3,0,2,35,2,23
	.byte	'SEL11',0,1
	.word	326
	.byte	5,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_SET_CON2_Bits',0,12,248,34,3
	.word	99090
	.byte	22
	.byte	'_Ifx_GTM_MSC_SET_CON3_Bits',0,12,251,34,16,4,23
	.byte	'SEL12',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'SEL13',0,1
	.word	326
	.byte	5,3,2,35,1,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	3,0,2,35,1,23
	.byte	'SEL14',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	3,0,2,35,2,23
	.byte	'SEL15',0,1
	.word	326
	.byte	5,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_MSC_SET_CON3_Bits',0,12,133,35,3
	.word	99316
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OCS_Bits',0,12,136,35,16,4,23
	.byte	'reserved_0',0,4
	.word	3741
	.byte	24,8,2,35,0,23
	.byte	'SUS',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SUS_P',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'SUSSTA',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OCS_Bits',0,12,143,35,3
	.word	99544
	.byte	22
	.byte	'_Ifx_GTM_OCDS_ODA_Bits',0,12,146,35,16,4,23
	.byte	'DRAC',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_ODA_Bits',0,12,150,35,3
	.word	99700
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTBU0T_Bits',0,12,153,35,16,4,23
	.byte	'CV',0,4
	.word	3741
	.byte	27,5,2,35,0,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'CM',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OTBU0T_Bits',0,12,159,35,3
	.word	99799
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTBU1T_Bits',0,12,162,35,16,4,23
	.byte	'CV',0,4
	.word	3741
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'EN',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OTBU1T_Bits',0,12,168,35,3
	.word	99940
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTBU2T_Bits',0,12,171,35,16,4,23
	.byte	'CV',0,4
	.word	3741
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'EN',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OTBU2T_Bits',0,12,177,35,3
	.word	100081
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTBU3T_Bits',0,12,180,35,16,4,23
	.byte	'CV',0,4
	.word	3741
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'EN',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OTBU3T_Bits',0,12,186,35,3
	.word	100222
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTSC0_Bits',0,12,189,35,16,4,23
	.byte	'B0LMT',0,1
	.word	326
	.byte	3,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'B0LMI',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'B0HMT',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'B0HMI',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'B1LMT',0,1
	.word	326
	.byte	3,5,2,35,2,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'B1LMI',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'B1HMT',0,1
	.word	326
	.byte	3,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'B1HMI',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OTSC0_Bits',0,12,203,35,3
	.word	100363
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTSC1_Bits',0,12,206,35,16,4,23
	.byte	'MCS',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'MI',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'MOE',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'reserved_10',0,4
	.word	3741
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTSC1_Bits',0,12,213,35,3
	.word	100655
	.byte	22
	.byte	'_Ifx_GTM_OCDS_OTSS_Bits',0,12,216,35,16,4,23
	.byte	'OTGB0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'OTGB1',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'OTGBM0',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'reserved_20',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'OTGBM1',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_OCDS_OTSS_Bits',0,12,226,35,3
	.word	100809
	.byte	22
	.byte	'_Ifx_GTM_OUT_ATOM_Bits',0,12,229,35,16,4,23
	.byte	'ATOM_I_OUT',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'ATOM_I_OUT_N',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'ATOM_IP1_OUT',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'ATOM_IP1_OUT_N',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_OUT_ATOM_Bits',0,12,235,35,3
	.word	101033
	.byte	22
	.byte	'_Ifx_GTM_OUT_TOM_Bits',0,12,238,35,16,4,23
	.byte	'TOM_OUT',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'TOM_OUT_N',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_OUT_TOM_Bits',0,12,242,35,3
	.word	101190
	.byte	22
	.byte	'_Ifx_GTM_PSI5OUTSEL_Bits',0,12,245,35,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	8,0,2,35,3,0,15
	.byte	'Ifx_GTM_PSI5OUTSEL_Bits',0,12,254,35,3
	.word	101289
	.byte	22
	.byte	'_Ifx_GTM_PSI5SOUTSEL_Bits',0,12,129,36,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'SEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_PSI5SOUTSEL_Bits',0,12,139,36,3
	.word	101473
	.byte	22
	.byte	'_Ifx_GTM_PSM_AFD_CH_BUF_ACC_Bits',0,12,142,36,16,4,23
	.byte	'DATA',0,4
	.word	18296
	.byte	29,3,2,35,0,23
	.byte	'reserved_29',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_AFD_CH_BUF_ACC_Bits',0,12,146,36,3
	.word	101668
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A_ENABLE_Bits',0,12,149,36,16,4,23
	.byte	'STR0_EN',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'STR1_EN',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'STR2_EN',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'STR3_EN',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'STR4_EN',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'STR5_EN',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'STR6_EN',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'STR7_EN',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_ENABLE_Bits',0,12,160,36,3
	.word	101788
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A_F2A_CTRL_Bits',0,12,163,36,16,4,23
	.byte	'STR4_CONF',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'STR5_CONF',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'STR6_CONF',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'STR7_CONF',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_F2A_CTRL_Bits',0,12,170,36,3
	.word	102036
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,12,173,36,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	9,23,2,35,0,23
	.byte	'reserved_9',0,4
	.word	18296
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_RD_CH_ARU_RD_FIFO_Bits',0,12,177,36,3
	.word	102219
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A_STR_CH_STR_CFG_Bits',0,12,180,36,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'TMODE',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'DIR',0,4
	.word	18296
	.byte	1,13,2,35,0,23
	.byte	'reserved_19',0,4
	.word	18296
	.byte	13,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_STR_CH_STR_CFG_Bits',0,12,186,36,3
	.word	102352
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_CTRL_Bits',0,12,189,36,16,4,23
	.byte	'RBM',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'RAP',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'FLUSH',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'WULOCK',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_CTRL_Bits',0,12,196,36,3
	.word	102518
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_EIRQ_EN_Bits',0,12,199,36,16,4,23
	.byte	'FIFO_EMPTY_EIRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'FIFO_FULL_EIRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'FIFO_LWM_EIRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FIFO_UWM_EIRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_EIRQ_EN_Bits',0,12,206,36,3
	.word	102682
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_END_ADDR_Bits',0,12,209,36,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_END_ADDR_Bits',0,12,213,36,3
	.word	102902
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_FILL_LEVEL_Bits',0,12,216,36,16,4,23
	.byte	'LEVEL',0,4
	.word	18296
	.byte	11,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_FILL_LEVEL_Bits',0,12,220,36,3
	.word	103026
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_EN_Bits',0,12,223,36,16,4,23
	.byte	'FIFO_EMPTY_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'FIFO_FULL_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'FIFO_LWM_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FIFO_UWM_IRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_EN_Bits',0,12,230,36,3
	.word	103155
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_FORCINT_Bits',0,12,233,36,16,4,23
	.byte	'TRG_FIFO_EMPTY',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_FIFO_FULL',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_FIFO_LWM',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_FIFO_UWM',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_FORCINT_Bits',0,12,240,36,3
	.word	103369
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_MODE_Bits',0,12,243,36,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'DMA_HYSTERESIS',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'DMA_HYST_DIR',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_MODE_Bits',0,12,249,36,3
	.word	103581
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ_NOTIFY_Bits',0,12,252,36,16,4,23
	.byte	'FIFO_EMPTY',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'FIFO_FULL',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'FIFO_LWM',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'FIFO_UWM',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_NOTIFY_Bits',0,12,131,37,3
	.word	103758
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_LOWER_WM_Bits',0,12,134,37,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_LOWER_WM_Bits',0,12,138,37,3
	.word	103952
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_RD_PTR_Bits',0,12,141,37,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_RD_PTR_Bits',0,12,145,37,3
	.word	104076
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_START_ADDR_Bits',0,12,148,37,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_START_ADDR_Bits',0,12,152,37,3
	.word	104196
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_STATUS_Bits',0,12,155,37,16,4,23
	.byte	'EMPTY',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'FULL',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'LOW_WM',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'UP_WM',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_STATUS_Bits',0,12,162,37,3
	.word	104324
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_UPPER_WM_Bits',0,12,165,37,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_UPPER_WM_Bits',0,12,169,37,3
	.word	104495
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_WR_PTR_Bits',0,12,172,37,16,4,23
	.byte	'ADDR',0,4
	.word	18296
	.byte	10,22,2,35,0,23
	.byte	'reserved_10',0,4
	.word	18296
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_WR_PTR_Bits',0,12,176,37,3
	.word	104619
	.byte	22
	.byte	'_Ifx_GTM_RESET1_Bits',0,12,179,37,16,4,23
	.byte	'RST',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'RSTSTAT',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_RESET1_Bits',0,12,184,37,3
	.word	104739
	.byte	22
	.byte	'_Ifx_GTM_RESET2_Bits',0,12,187,37,16,4,23
	.byte	'RST',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,4
	.word	3741
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_RESET2_Bits',0,12,191,37,3
	.word	104852
	.byte	22
	.byte	'_Ifx_GTM_RESET_CLR_Bits',0,12,194,37,16,4,23
	.byte	'CLR',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,4
	.word	3741
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_RESET_CLR_Bits',0,12,198,37,3
	.word	104946
	.byte	22
	.byte	'_Ifx_GTM_REV_Bits',0,12,201,37,16,4,23
	.byte	'STEP',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'NO',0,4
	.word	18296
	.byte	4,20,2,35,0,23
	.byte	'MINOR',0,4
	.word	18296
	.byte	4,16,2,35,0,23
	.byte	'MAJOR',0,4
	.word	18296
	.byte	4,12,2,35,0,23
	.byte	'DEV_CODE0',0,4
	.word	18296
	.byte	4,8,2,35,0,23
	.byte	'DEV_CODE1',0,4
	.word	18296
	.byte	4,4,2,35,0,23
	.byte	'DEV_CODE2',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_REV_Bits',0,12,210,37,3
	.word	105046
	.byte	22
	.byte	'_Ifx_GTM_RST_Bits',0,12,213,37,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	26,5,2,35,0,23
	.byte	'BRIDGE_MODE_WRDIS',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'reserved_28',0,4
	.word	18296
	.byte	4,0,2,35,0,0,15
	.byte	'Ifx_GTM_RST_Bits',0,12,219,37,3
	.word	105224
	.byte	22
	.byte	'_Ifx_GTM_SPE_CMD_Bits',0,12,222,37,16,4,23
	.byte	'SPE_CTRL_CMD',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	14,16,2,35,0,23
	.byte	'SPE_UPD_TRIG',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'reserved_17',0,4
	.word	18296
	.byte	15,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_CMD_Bits',0,12,228,37,3
	.word	105371
	.byte	22
	.byte	'_Ifx_GTM_SPE_CTRL_STAT_Bits',0,12,231,37,16,4,23
	.byte	'EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SIE0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SIE1',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SIE2',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRIG_SEL',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'TIM_SEL',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'FSOM',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'SPE_PAT_PTR',0,4
	.word	18296
	.byte	3,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'AIP',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'ADIR',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'PIP',0,4
	.word	18296
	.byte	3,13,2,35,0,23
	.byte	'PDIR',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'NIP',0,4
	.word	18296
	.byte	3,9,2,35,0,23
	.byte	'ETRIG_SEL',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'FSOL',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_CTRL_STAT_Bits',0,12,249,37,3
	.word	105523
	.byte	22
	.byte	'_Ifx_GTM_SPE_CTRL_STAT2_Bits',0,12,252,37,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'SPE_PAT_PTR_BWD',0,4
	.word	18296
	.byte	3,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_CTRL_STAT2_Bits',0,12,129,38,3
	.word	105871
	.byte	22
	.byte	'_Ifx_GTM_SPE_EIRQ_EN_Bits',0,12,132,38,16,4,23
	.byte	'SPE_NIPD_EIRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SPE_DCHG_EIRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SPE_PERR_EIRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SPE_BIS_EIRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SPE_RCMP_EIRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_EIRQ_EN_Bits',0,12,140,38,3
	.word	106016
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_EN_Bits',0,12,143,38,16,4,23
	.byte	'SPE_NIPD_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SPE_DCHG_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SPE_PERR_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SPE_BIS_IRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SPE_RCMP_IRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_EN_Bits',0,12,151,38,3
	.word	106244
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,12,154,38,16,4,23
	.byte	'TRG_SPE_NIPD',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_SPE_DCHG',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_SPE_PERR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_SPE_BIS',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG_SPE_RCMP',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT_Bits',0,12,162,38,3
	.word	106465
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_MODE_Bits',0,12,165,38,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_MODE_Bits',0,12,169,38,3
	.word	106681
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,12,172,38,16,4,23
	.byte	'SPE_NIPD',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'SPE_DCHG',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'SPE_PERR',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'SPE_BIS',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'SPE_RCMP',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY_Bits',0,12,180,38,3
	.word	106792
	.byte	22
	.byte	'_Ifx_GTM_SPE_OUT_CTRL_Bits',0,12,183,38,16,4,23
	.byte	'SPE_OUT_CTRL',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_OUT_CTRL_Bits',0,12,187,38,3
	.word	106986
	.byte	22
	.byte	'_Ifx_GTM_SPE_OUT_PAT_Bits',0,12,190,38,16,4,23
	.byte	'SPE_OUT_PAT',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_OUT_PAT_Bits',0,12,194,38,3
	.word	107102
	.byte	22
	.byte	'_Ifx_GTM_SPE_PAT_Bits',0,12,197,38,16,4,23
	.byte	'IP0_VAL',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'IP0_PAT',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'IP1_VAL',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'IP1_PAT',0,4
	.word	18296
	.byte	3,24,2,35,0,23
	.byte	'IP2_VAL',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'IP2_PAT',0,4
	.word	18296
	.byte	3,20,2,35,0,23
	.byte	'IP3_VAL',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'IP3_PAT',0,4
	.word	18296
	.byte	3,16,2,35,0,23
	.byte	'IP4_VAL',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'IP4_PAT',0,4
	.word	18296
	.byte	3,12,2,35,0,23
	.byte	'IP5_VAL',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'IP5_PAT',0,4
	.word	18296
	.byte	3,8,2,35,0,23
	.byte	'IP6_VAL',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'IP6_PAT',0,4
	.word	18296
	.byte	3,4,2,35,0,23
	.byte	'IP7_VAL',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'IP7_PAT',0,4
	.word	18296
	.byte	3,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_PAT_Bits',0,12,215,38,3
	.word	107215
	.byte	22
	.byte	'_Ifx_GTM_SPE_REV_CMP_Bits',0,12,218,38,16,4,23
	.byte	'REV_CMP',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_REV_CMP_Bits',0,12,222,38,3
	.word	107578
	.byte	22
	.byte	'_Ifx_GTM_SPE_REV_CNT_Bits',0,12,225,38,16,4,23
	.byte	'REV_CNT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_REV_CNT_Bits',0,12,229,38,3
	.word	107687
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH0_BASE_Bits',0,12,232,38,16,4,23
	.byte	'BASE',0,4
	.word	18296
	.byte	27,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	5,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH0_BASE_Bits',0,12,236,38,3
	.word	107796
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH0_CTRL_Bits',0,12,239,38,16,4,23
	.byte	'LOW_RES',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CH_CLK_SRC',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH0_CTRL_Bits',0,12,244,38,3
	.word	107904
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH1_BASE_Bits',0,12,247,38,16,4,23
	.byte	'BASE',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH1_BASE_Bits',0,12,251,38,3
	.word	108036
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH1_CTRL_Bits',0,12,254,38,16,4,23
	.byte	'CH_MODE',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CH_CLK_SRC',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH1_CTRL_Bits',0,12,131,39,3
	.word	108144
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH2_BASE_Bits',0,12,134,39,16,4,23
	.byte	'BASE',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH2_BASE_Bits',0,12,138,39,3
	.word	108276
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH2_CTRL_Bits',0,12,141,39,16,4,23
	.byte	'CH_MODE',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CH_CLK_SRC',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH2_CTRL_Bits',0,12,146,39,3
	.word	108384
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH3_BASE_Bits',0,12,149,39,16,4,23
	.byte	'BASE',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_BASE_Bits',0,12,153,39,3
	.word	108516
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH3_BASE_CAPTURE_Bits',0,12,156,39,16,4,23
	.byte	'BASE_CAPTURE',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_BASE_CAPTURE_Bits',0,12,160,39,3
	.word	108624
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH3_BASE_MARK_Bits',0,12,163,39,16,4,23
	.byte	'BASE_MARK',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_BASE_MARK_Bits',0,12,167,39,3
	.word	108756
	.byte	22
	.byte	'_Ifx_GTM_TBU_CH3_CTRL_Bits',0,12,170,39,16,4,23
	.byte	'CH_MODE',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'USE_CH2',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'reserved_5',0,4
	.word	18296
	.byte	27,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_CTRL_Bits',0,12,176,39,3
	.word	108879
	.byte	22
	.byte	'_Ifx_GTM_TBU_CHEN_Bits',0,12,179,39,16,4,23
	.byte	'ENDIS_CH0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'ENDIS_CH1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'ENDIS_CH2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ENDIS_CH3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CHEN_Bits',0,12,186,39,3
	.word	109030
	.byte	22
	.byte	'_Ifx_GTM_TIMINSEL_Bits',0,12,189,39,16,4,23
	.byte	'CH0SEL',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'CH1SEL',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'CH2SEL',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'CH3SEL',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'CH4SEL',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CH5SEL',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'CH6SEL',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'CH7SEL',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_TIMINSEL_Bits',0,12,199,39,3
	.word	109197
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_CNT_Bits',0,12,202,39,16,4,23
	.byte	'CNT',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_CNT_Bits',0,12,206,39,3
	.word	109402
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_CNTS_Bits',0,12,209,39,16,4,23
	.byte	'CNTS',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'ECNT',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_CNTS_Bits',0,12,213,39,3
	.word	109505
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_CTRL_Bits',0,12,216,39,16,4,23
	.byte	'TIM_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TIM_MODE',0,4
	.word	18296
	.byte	3,28,2,35,0,23
	.byte	'OSM',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'ARU_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'CICTRL',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'TBU0_SEL',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'GPR0_SEL',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'GPR1_SEL',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'CNTS_SEL',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'DSL',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'ISL',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'ECNT_RESET',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'FLT_EN',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'FLT_CNT_FRQ',0,4
	.word	18296
	.byte	2,13,2,35,0,23
	.byte	'EXT_CAP_EN',0,4
	.word	18296
	.byte	1,12,2,35,0,23
	.byte	'FLT_MODE_RE',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'FLT_CTR_RE',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'FLT_MODE_FE',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'FLT_CTR_FE',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'CLK_SEL',0,4
	.word	18296
	.byte	3,5,2,35,0,23
	.byte	'FR_ECNT_OFL',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'EGPR0_SEL',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'EGPR1_SEL',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'TOCTRL',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_CTRL_Bits',0,12,242,39,3
	.word	109604
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_ECNT_Bits',0,12,245,39,16,4,23
	.byte	'ECNT',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_ECNT_Bits',0,12,249,39,3
	.word	110147
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_ECTRL_Bits',0,12,252,39,16,4,23
	.byte	'EXT_CAP_SRC',0,4
	.word	18296
	.byte	4,28,2,35,0,23
	.byte	'reserved_4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'USE_PREV_TDU_IN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'TODET_IRQ_SRC',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'TDU_START',0,4
	.word	18296
	.byte	3,21,2,35,0,23
	.byte	'reserved_11',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'TDU_STOP',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'reserved_15',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'TDU_RESYNC',0,4
	.word	18296
	.byte	4,12,2,35,0,23
	.byte	'reserved_20',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'USE_LUT',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'EFLT_CTR_RE',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'EFLT_CTR_FE',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'reserved_26',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'SWAP_CAPTURE',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'IMM_START',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'ECLK_SEL',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'USE_PREV_CH_IN',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_ECTRL_Bits',0,12,144,40,3
	.word	110253
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,12,147,40,16,4,23
	.byte	'NEWVAL_EIRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ECNTOFL_EIRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'CNTOFL_EIRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'GPROFL_EIRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TODET_EIRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'GLITCHDET_EIRQ_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN_Bits',0,12,156,40,3
	.word	110730
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_FLT_FE_Bits',0,12,159,40,16,4,23
	.byte	'FLT_FE',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_FLT_FE_Bits',0,12,163,40,3
	.word	110984
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_FLT_RE_Bits',0,12,166,40,16,4,23
	.byte	'FLT_RE',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_FLT_RE_Bits',0,12,170,40,3
	.word	111096
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_GPR0_Bits',0,12,173,40,16,4,23
	.byte	'GPR0',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'ECNT',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_GPR0_Bits',0,12,177,40,3
	.word	111208
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_GPR1_Bits',0,12,180,40,16,4,23
	.byte	'GPR1',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'ECNT',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_GPR1_Bits',0,12,184,40,3
	.word	111307
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,12,187,40,16,4,23
	.byte	'NEWVAL_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ECNTOFL_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'CNTOFL_IRQ_EN',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'GPROFL_IRQ_EN',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TODET_IRQ_EN',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'GLITCHDET_IRQ_EN',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN_Bits',0,12,196,40,3
	.word	111406
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,12,199,40,16,4,23
	.byte	'TRG_NEWVAL',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_ECNTOFL',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'TRG_CNTOFL',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'TRG_GPROFL',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TRG_TODET',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'TRG_GLITCHDET',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT_Bits',0,12,208,40,3
	.word	111652
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,12,211,40,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE_Bits',0,12,215,40,3
	.word	111890
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,12,218,40,16,4,23
	.byte	'NEWVAL',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ECNTOFL',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'CNTOFL',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'GPROFL',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'TODET',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'GLITCHDET',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'reserved_6',0,4
	.word	18296
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY_Bits',0,12,227,40,3
	.word	112007
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_TDUC_Bits',0,12,230,40,16,4,23
	.byte	'TO_CNT',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'TO_CNT1',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'TO_CNT2',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_TDUC_Bits',0,12,236,40,3
	.word	112219
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_TDUV_Bits',0,12,239,40,16,4,23
	.byte	'TOV',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'TOV1',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'TOV2',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'SLICING',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'TCS_USE_SAMPLE_EVT',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'TDU_SAME_CNT_CLK',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'TCS',0,4
	.word	18296
	.byte	3,1,2,35,0,23
	.byte	'reserved_31',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_TDUV_Bits',0,12,249,40,3
	.word	112365
	.byte	22
	.byte	'_Ifx_GTM_TIM_INP_VAL_Bits',0,12,252,40,16,4,23
	.byte	'F_OUT',0,4
	.word	18296
	.byte	8,24,2,35,0,23
	.byte	'F_IN',0,4
	.word	18296
	.byte	8,16,2,35,0,23
	.byte	'TIM_IN',0,4
	.word	18296
	.byte	8,8,2,35,0,23
	.byte	'reserved_24',0,4
	.word	18296
	.byte	8,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_INP_VAL_Bits',0,12,130,41,3
	.word	112594
	.byte	22
	.byte	'_Ifx_GTM_TIM_IN_SRC_Bits',0,12,133,41,16,4,23
	.byte	'VAL_0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'MODE_0',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'VAL_1',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'MODE_1',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'VAL_2',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'MODE_2',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'VAL_3',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'MODE_3',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'VAL_4',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'MODE_4',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'VAL_5',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'MODE_5',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'VAL_6',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'MODE_6',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'VAL_7',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'MODE_7',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_IN_SRC_Bits',0,12,151,41,3
	.word	112735
	.byte	22
	.byte	'_Ifx_GTM_TIM_RST_Bits',0,12,154,41,16,4,23
	.byte	'RST_CH0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'RST_CH1',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'RST_CH2',0,4
	.word	18296
	.byte	1,29,2,35,0,23
	.byte	'RST_CH3',0,4
	.word	18296
	.byte	1,28,2,35,0,23
	.byte	'RST_CH4',0,4
	.word	18296
	.byte	1,27,2,35,0,23
	.byte	'RST_CH5',0,4
	.word	18296
	.byte	1,26,2,35,0,23
	.byte	'RST_CH6',0,4
	.word	18296
	.byte	1,25,2,35,0,23
	.byte	'RST_CH7',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_RST_Bits',0,12,165,41,3
	.word	113080
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CM0_Bits',0,12,168,41,16,4,23
	.byte	'CM0',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CM0_Bits',0,12,172,41,3
	.word	113313
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CM1_Bits',0,12,175,41,16,4,23
	.byte	'CM1',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CM1_Bits',0,12,179,41,3
	.word	113416
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CN0_Bits',0,12,182,41,16,4,23
	.byte	'CN0',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CN0_Bits',0,12,186,41,3
	.word	113519
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_CTRL_Bits',0,12,189,41,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	7,25,2,35,0,23
	.byte	'SR0_TRIG',0,4
	.word	18296
	.byte	1,24,2,35,0,23
	.byte	'reserved_8',0,4
	.word	18296
	.byte	3,21,2,35,0,23
	.byte	'SL',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'CLK_SRC_SR',0,4
	.word	18296
	.byte	3,17,2,35,0,23
	.byte	'ECLK_SRC',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	1,15,2,35,0,23
	.byte	'TRIG_PULSE',0,4
	.word	18296
	.byte	1,14,2,35,0,23
	.byte	'UDMODE',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'RST_CCU0',0,4
	.word	18296
	.byte	1,11,2,35,0,23
	.byte	'OSM_TRIG',0,4
	.word	18296
	.byte	1,10,2,35,0,23
	.byte	'EXT_TRIG',0,4
	.word	18296
	.byte	1,9,2,35,0,23
	.byte	'EXTTRIGOUT',0,4
	.word	18296
	.byte	1,8,2,35,0,23
	.byte	'TRIGOUT',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'SPE_TRIG',0,4
	.word	18296
	.byte	1,6,2,35,0,23
	.byte	'OSM',0,4
	.word	18296
	.byte	1,5,2,35,0,23
	.byte	'BITREV',0,4
	.word	18296
	.byte	1,4,2,35,0,23
	.byte	'SPEM',0,4
	.word	18296
	.byte	1,3,2,35,0,23
	.byte	'GCM',0,4
	.word	18296
	.byte	1,2,2,35,0,23
	.byte	'reserved_30',0,4
	.word	18296
	.byte	1,1,2,35,0,23
	.byte	'FREEZE',0,4
	.word	18296
	.byte	1,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CTRL_Bits',0,12,212,41,3
	.word	113622
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,12,215,41,16,4,23
	.byte	'CCU0TC_IRQ_EN',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CCU1TC_IRQ_EN',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN_Bits',0,12,220,41,3
	.word	114098
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,12,223,41,16,4,23
	.byte	'TRG_CCU0TC0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'TRG_CCU1TC0',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT_Bits',0,12,228,41,3
	.word	114241
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,12,231,41,16,4,23
	.byte	'IRQ_MODE',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE_Bits',0,12,235,41,3
	.word	114390
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,12,238,41,16,4,23
	.byte	'CCU0TC',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'CCU1TC',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'reserved_2',0,4
	.word	18296
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY_Bits',0,12,243,41,3
	.word	114507
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_SR0_Bits',0,12,246,41,16,4,23
	.byte	'SR0',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_SR0_Bits',0,12,250,41,3
	.word	114644
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_SR1_Bits',0,12,253,41,16,4,23
	.byte	'SR1',0,4
	.word	18296
	.byte	16,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_SR1_Bits',0,12,129,42,3
	.word	114747
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_STAT_Bits',0,12,132,42,16,4,23
	.byte	'OL',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_STAT_Bits',0,12,136,42,3
	.word	114850
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_ACT_TB_Bits',0,12,139,42,16,4,23
	.byte	'ACT_TB',0,4
	.word	18296
	.byte	24,8,2,35,0,23
	.byte	'TB_TRIG',0,4
	.word	18296
	.byte	1,7,2,35,0,23
	.byte	'TBU_SEL',0,4
	.word	18296
	.byte	2,5,2,35,0,23
	.byte	'reserved_27',0,4
	.word	18296
	.byte	5,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_ACT_TB_Bits',0,12,145,42,3
	.word	114953
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_ENDIS_CTRL_Bits',0,12,148,42,16,4,23
	.byte	'ENDIS_CTRL0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'ENDIS_CTRL1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'ENDIS_CTRL2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ENDIS_CTRL3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'ENDIS_CTRL4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'ENDIS_CTRL5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'ENDIS_CTRL6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'ENDIS_CTRL7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_CTRL_Bits',0,12,159,42,3
	.word	115105
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_ENDIS_STAT_Bits',0,12,162,42,16,4,23
	.byte	'ENDIS_STAT0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'ENDIS_STAT1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'ENDIS_STAT2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'ENDIS_STAT3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'ENDIS_STAT4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'ENDIS_STAT5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'ENDIS_STAT6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'ENDIS_STAT7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_STAT_Bits',0,12,173,42,3
	.word	115393
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_FUPD_CTRL_Bits',0,12,176,42,16,4,23
	.byte	'FUPD_CTRL0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'FUPD_CTRL1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'FUPD_CTRL2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'FUPD_CTRL3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'FUPD_CTRL4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'FUPD_CTRL5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'FUPD_CTRL6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'FUPD_CTRL7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'RSTCN0_CH0',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'RSTCN0_CH1',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'RSTCN0_CH2',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'RSTCN0_CH3',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'RSTCN0_CH4',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'RSTCN0_CH5',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'RSTCN0_CH6',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'RSTCN0_CH7',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_FUPD_CTRL_Bits',0,12,194,42,3
	.word	115681
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_GLB_CTRL_Bits',0,12,197,42,16,4,23
	.byte	'HOST_TRIG',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'reserved_1',0,4
	.word	18296
	.byte	7,24,2,35,0,23
	.byte	'RST_CH0',0,4
	.word	18296
	.byte	1,23,2,35,0,23
	.byte	'RST_CH1',0,4
	.word	18296
	.byte	1,22,2,35,0,23
	.byte	'RST_CH2',0,4
	.word	18296
	.byte	1,21,2,35,0,23
	.byte	'RST_CH3',0,4
	.word	18296
	.byte	1,20,2,35,0,23
	.byte	'RST_CH4',0,4
	.word	18296
	.byte	1,19,2,35,0,23
	.byte	'RST_CH5',0,4
	.word	18296
	.byte	1,18,2,35,0,23
	.byte	'RST_CH6',0,4
	.word	18296
	.byte	1,17,2,35,0,23
	.byte	'RST_CH7',0,4
	.word	18296
	.byte	1,16,2,35,0,23
	.byte	'UPEN_CTRL0',0,4
	.word	18296
	.byte	2,14,2,35,0,23
	.byte	'UPEN_CTRL1',0,4
	.word	18296
	.byte	2,12,2,35,0,23
	.byte	'UPEN_CTRL2',0,4
	.word	18296
	.byte	2,10,2,35,0,23
	.byte	'UPEN_CTRL3',0,4
	.word	18296
	.byte	2,8,2,35,0,23
	.byte	'UPEN_CTRL4',0,4
	.word	18296
	.byte	2,6,2,35,0,23
	.byte	'UPEN_CTRL5',0,4
	.word	18296
	.byte	2,4,2,35,0,23
	.byte	'UPEN_CTRL6',0,4
	.word	18296
	.byte	2,2,2,35,0,23
	.byte	'UPEN_CTRL7',0,4
	.word	18296
	.byte	2,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_GLB_CTRL_Bits',0,12,217,42,3
	.word	116112
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_INT_TRIG_Bits',0,12,220,42,16,4,23
	.byte	'INT_TRIG0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'INT_TRIG1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'INT_TRIG2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'INT_TRIG3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'INT_TRIG4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'INT_TRIG5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'INT_TRIG6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'INT_TRIG7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_INT_TRIG_Bits',0,12,231,42,3
	.word	116560
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_OUTEN_CTRL_Bits',0,12,234,42,16,4,23
	.byte	'OUTEN_CTRL0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'OUTEN_CTRL1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'OUTEN_CTRL2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'OUTEN_CTRL3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'OUTEN_CTRL4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'OUTEN_CTRL5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'OUTEN_CTRL6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'OUTEN_CTRL7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_CTRL_Bits',0,12,245,42,3
	.word	116828
	.byte	22
	.byte	'_Ifx_GTM_TOM_TGC_OUTEN_STAT_Bits',0,12,248,42,16,4,23
	.byte	'OUTEN_STAT0',0,4
	.word	18296
	.byte	2,30,2,35,0,23
	.byte	'OUTEN_STAT1',0,4
	.word	18296
	.byte	2,28,2,35,0,23
	.byte	'OUTEN_STAT2',0,4
	.word	18296
	.byte	2,26,2,35,0,23
	.byte	'OUTEN_STAT3',0,4
	.word	18296
	.byte	2,24,2,35,0,23
	.byte	'OUTEN_STAT4',0,4
	.word	18296
	.byte	2,22,2,35,0,23
	.byte	'OUTEN_STAT5',0,4
	.word	18296
	.byte	2,20,2,35,0,23
	.byte	'OUTEN_STAT6',0,4
	.word	18296
	.byte	2,18,2,35,0,23
	.byte	'OUTEN_STAT7',0,4
	.word	18296
	.byte	2,16,2,35,0,23
	.byte	'reserved_16',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_STAT_Bits',0,12,131,43,3
	.word	117116
	.byte	22
	.byte	'_Ifx_GTM_TOUTSEL_Bits',0,12,134,43,16,4,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SEL2',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'SEL3',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'SEL4',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'SEL5',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'SEL6',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SEL7',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_GTM_TOUTSEL_Bits',0,12,144,43,3
	.word	117404
	.byte	22
	.byte	'_Ifx_GTM_TRIGOUT_Bits',0,12,147,43,16,4,23
	.byte	'TRIG0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'TRIG1',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'TRIG2',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'TRIG3',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'TRIG4',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'TRIG5',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'TRIG6',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'TRIG7',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'TRIG8',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'TRIG9',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'TRIG10',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'TRIG11',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'TRIG12',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'TRIG13',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'TRIG14',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'TRIG15',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_GTM_TRIGOUT_Bits',0,12,165,43,3
	.word	117591
	.byte	24,12,173,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17310
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ACCEN0',0,12,178,43,3
	.word	117928
	.byte	24,12,181,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17867
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ACCEN1',0,12,186,43,3
	.word	117992
	.byte	24,12,189,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	17944
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ADCTRIG_OUT0',0,12,194,43,3
	.word	118056
	.byte	24,12,197,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18140
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ADCTRIG_OUT1',0,12,202,43,3
	.word	118126
	.byte	24,12,205,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18312
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_AEI_ADDR_XPT',0,12,210,43,3
	.word	118196
	.byte	24,12,213,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18442
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_AEI_STA_XPT',0,12,218,43,3
	.word	118266
	.byte	24,12,221,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18564
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_ACCESS',0,12,226,43,3
	.word	118335
	.byte	24,12,229,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18722
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_CADDR',0,12,234,43,3
	.word	118403
	.byte	24,12,237,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18868
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_CADDR_END',0,12,242,43,3
	.word	118470
	.byte	24,12,245,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	18982
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_CTRL',0,12,250,43,3
	.word	118541
	.byte	24,12,253,43,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19142
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DATA_H',0,12,130,44,3
	.word	118607
	.byte	24,12,133,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19246
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DATA_L',0,12,138,44,3
	.word	118675
	.byte	24,12,141,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19350
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_ACCESS0',0,12,146,44,3
	.word	118743
	.byte	24,12,149,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19463
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_ACCESS1',0,12,154,44,3
	.word	118816
	.byte	24,12,157,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19576
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA0_H',0,12,162,44,3
	.word	118889
	.byte	24,12,165,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19690
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA0_L',0,12,170,44,3
	.word	118962
	.byte	24,12,173,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19804
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA1_H',0,12,178,44,3
	.word	119035
	.byte	24,12,181,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	19918
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DBG_DATA1_L',0,12,186,44,3
	.word	119108
	.byte	24,12,189,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20032
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_CTRL',0,12,194,44,3
	.word	119181
	.byte	24,12,197,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20178
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_RDADDR',0,12,202,44,3
	.word	119251
	.byte	24,12,205,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20299
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_HIGH',0,12,210,44,3
	.word	119323
	.byte	24,12,213,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20499
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_LOW',0,12,218,44,3
	.word	119399
	.byte	24,12,221,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20673
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_HIGH',0,12,226,44,3
	.word	119474
	.byte	24,12,229,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	20906
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_DYN_ROUTE_SR_LOW',0,12,234,44,3
	.word	119553
	.byte	24,12,237,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	21086
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_EN',0,12,242,44,3
	.word	119631
	.byte	24,12,245,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	21255
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_FORCINT',0,12,250,44,3
	.word	119699
	.byte	24,12,253,44,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	21425
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_MODE',0,12,130,45,3
	.word	119772
	.byte	24,12,133,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	21536
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ARU_IRQ_NOTIFY',0,12,138,45,3
	.word	119842
	.byte	24,12,141,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	21692
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_ACT_TB',0,12,146,45,3
	.word	119914
	.byte	24,12,149,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	21846
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_CTRL',0,12,154,45,3
	.word	119987
	.byte	24,12,157,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	22136
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_ENDIS_STAT',0,12,162,45,3
	.word	120064
	.byte	24,12,165,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	22426
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_FUPD_CTRL',0,12,170,45,3
	.word	120141
	.byte	24,12,173,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	22859
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_GLB_CTRL',0,12,178,45,3
	.word	120217
	.byte	24,12,181,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	23309
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_INT_TRIG',0,12,186,45,3
	.word	120292
	.byte	24,12,189,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	23579
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_CTRL',0,12,194,45,3
	.word	120367
	.byte	24,12,197,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	23869
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_AGC_OUTEN_STAT',0,12,202,45,3
	.word	120444
	.byte	24,12,205,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	24159
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CM0',0,12,210,45,3
	.word	120521
	.byte	24,12,213,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	24264
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CM1',0,12,218,45,3
	.word	120590
	.byte	24,12,221,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	24369
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CN0',0,12,226,45,3
	.word	120659
	.byte	24,12,229,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	24474
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_CTRL',0,12,234,45,3
	.word	120728
	.byte	24,12,237,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	24985
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_EN',0,12,242,45,3
	.word	120798
	.byte	24,12,245,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	25130
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_FORCINT',0,12,250,45,3
	.word	120870
	.byte	24,12,253,45,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	25279
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_MODE',0,12,130,46,3
	.word	120947
	.byte	24,12,133,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	25398
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_IRQ_NOTIFY',0,12,138,46,3
	.word	121021
	.byte	24,12,141,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	25537
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_RDADDR',0,12,146,46,3
	.word	121097
	.byte	24,12,149,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	25693
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMB',0,12,154,46,3
	.word	121169
	.byte	24,12,157,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	26244
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMC',0,12,162,46,3
	.word	121239
	.byte	24,12,165,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	26794
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMI',0,12,170,46,3
	.word	121309
	.byte	24,12,173,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	27356
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMP',0,12,178,46,3
	.word	121379
	.byte	24,12,181,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	27966
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SOMS',0,12,186,46,3
	.word	121449
	.byte	24,12,189,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28550
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SR0',0,12,194,46,3
	.word	121519
	.byte	24,12,197,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28655
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_SR1',0,12,202,46,3
	.word	121588
	.byte	24,12,205,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28760
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ATOM_CH_STAT',0,12,210,46,3
	.word	121657
	.byte	24,12,213,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	28963
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_AUX_IN_SRC_TIM',0,12,218,46,3
	.word	121727
	.byte	24,12,221,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29433
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_EIRQ_EN',0,12,226,46,3
	.word	121799
	.byte	24,12,229,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	29841
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_EN',0,12,234,46,3
	.word	121868
	.byte	24,12,237,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30234
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_FORCINT',0,12,242,46,3
	.word	121936
	.byte	24,12,245,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30598
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_MODE',0,12,250,46,3
	.word	122009
	.byte	24,12,253,46,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	30709
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_IRQ_NOTIFY',0,12,130,47,3
	.word	122079
	.byte	24,12,133,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	31019
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_RST',0,12,138,47,3
	.word	122151
	.byte	24,12,141,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	31115
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_SRC_ADDR',0,12,146,47,3
	.word	122216
	.byte	24,12,149,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	31265
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRC_SRC_DEST',0,12,154,47,3
	.word	122286
	.byte	24,12,157,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	31832
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRIDGE_MODE',0,12,162,47,3
	.word	122356
	.byte	24,12,165,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32163
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRIDGE_PTR1',0,12,170,47,3
	.word	122425
	.byte	24,12,173,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32365
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_BRIDGE_PTR2',0,12,178,47,3
	.word	122494
	.byte	24,12,181,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32478
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CANOUTSEL0',0,12,186,47,3
	.word	122563
	.byte	24,12,189,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32671
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CANOUTSEL1',0,12,194,47,3
	.word	122631
	.byte	24,12,197,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32823
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_AEIM_STA',0,12,202,47,3
	.word	122699
	.byte	24,12,205,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	32987
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_ARP_CTRL',0,12,210,47,3
	.word	122769
	.byte	24,12,213,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33175
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_ARP_PROT',0,12,218,47,3
	.word	122839
	.byte	24,12,221,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33410
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_ATOM_OUT',0,12,226,47,3
	.word	122909
	.byte	24,12,229,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33575
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_CFG',0,12,234,47,3
	.word	122979
	.byte	24,12,237,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	33910
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_CMU_CLK_CFG',0,12,242,47,3
	.word	123044
	.byte	24,12,245,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34327
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_CMU_FXCLK_CFG',0,12,250,47,3
	.word	123117
	.byte	24,12,253,47,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34450
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_EXT_CAP_EN',0,12,130,48,3
	.word	123192
	.byte	24,12,133,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	34604
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_HW_CONF',0,12,138,48,3
	.word	123264
	.byte	24,12,141,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	35186
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_PROT',0,12,146,48,3
	.word	123333
	.byte	24,12,149,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	35289
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_TIM_AUX_IN_SRC',0,12,154,48,3
	.word	123399
	.byte	24,12,157,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	35767
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CCM_TOM_OUT',0,12,162,48,3
	.word	123475
	.byte	24,12,165,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	35874
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL1',0,12,170,48,3
	.word	123544
	.byte	24,12,173,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	36459
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2',0,12,178,48,3
	.word	123619
	.byte	24,12,181,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37090
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL2_SR',0,12,186,48,3
	.word	123694
	.byte	24,12,189,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	37823
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_CTRL3',0,12,194,48,3
	.word	123772
	.byte	24,12,197,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38273
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_DTV',0,12,202,48,3
	.word	123847
	.byte	24,12,205,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38432
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CH_SR',0,12,210,48,3
	.word	123920
	.byte	24,12,213,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38711
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_CTRL',0,12,218,48,3
	.word	123992
	.byte	24,12,221,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	38952
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CDTM_DTM_PS_CTRL',0,12,226,48,3
	.word	124063
	.byte	24,12,229,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39196
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CFG',0,12,234,48,3
	.word	124137
	.byte	24,12,237,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39291
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CLC',0,12,242,48,3
	.word	124198
	.byte	24,12,245,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39434
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CLS_CLK_CFG',0,12,250,48,3
	.word	124259
	.byte	24,12,253,48,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	39814
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_EIRQ_EN',0,12,130,49,3
	.word	124328
	.byte	24,12,133,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	40508
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_EN',0,12,138,49,3
	.word	124397
	.byte	24,12,141,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41072
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_EN',0,12,146,49,3
	.word	124461
	.byte	24,12,149,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	41740
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_FORCINT',0,12,154,49,3
	.word	124529
	.byte	24,12,157,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42346
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_MODE',0,12,162,49,3
	.word	124602
	.byte	24,12,165,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42457
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMP_IRQ_NOTIFY',0,12,170,49,3
	.word	124672
	.byte	24,12,173,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	42965
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_CLK_CTRL',0,12,178,49,3
	.word	124744
	.byte	24,12,181,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43308
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_CLK_EN',0,12,186,49,3
	.word	124814
	.byte	24,12,189,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43628
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_CLK__CTRL',0,12,194,49,3
	.word	124882
	.byte	24,12,197,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43760
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_ECLK_DEN',0,12,202,49,3
	.word	124953
	.byte	24,12,205,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43872
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_ECLK_NUM',0,12,210,49,3
	.word	125023
	.byte	24,12,213,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	43984
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_FXCLK_CTRL',0,12,218,49,3
	.word	125093
	.byte	24,12,221,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44100
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_GCLK_DEN',0,12,226,49,3
	.word	125165
	.byte	24,12,229,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44212
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_GCLK_NUM',0,12,234,49,3
	.word	125235
	.byte	24,12,237,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44324
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CMU_GLB_CTRL',0,12,242,49,3
	.word	125305
	.byte	24,12,245,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44442
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_CTRL',0,12,250,49,3
	.word	125375
	.byte	24,12,253,49,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44642
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DATAIN',0,12,130,50,3
	.word	125437
	.byte	24,12,133,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44715
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ACB',0,12,138,50,3
	.word	125501
	.byte	24,12,141,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	44935
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ACT_STA',0,12,146,50,3
	.word	125567
	.byte	24,12,149,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45021
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL1',0,12,154,50,3
	.word	125637
	.byte	24,12,157,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45144
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_CAL2',0,12,162,50,3
	.word	125711
	.byte	24,12,165,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45267
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD1',0,12,170,50,3
	.word	125785
	.byte	24,12,173,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45387
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADD_IN_LD2',0,12,178,50,3
	.word	125858
	.byte	24,12,181,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45507
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ADT_S',0,12,186,50,3
	.word	125931
	.byte	24,12,197,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45805
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_AOSV_2',0,12,202,50,3
	.word	125999
	.byte	24,12,205,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	45948
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS',0,12,210,50,3
	.word	126068
	.byte	24,12,213,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46146
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_1C3',0,12,218,50,3
	.word	126134
	.byte	24,12,221,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46278
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_1C3_EXT',0,12,226,50,3
	.word	126204
	.byte	24,12,229,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46418
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_EXT',0,12,234,50,3
	.word	126278
	.byte	24,12,237,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46624
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_SYNC',0,12,242,50,3
	.word	126348
	.byte	24,12,245,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	46812
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APS_SYNC_EXT',0,12,250,50,3
	.word	126419
	.byte	24,12,253,50,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47008
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APT',0,12,130,51,3
	.word	126494
	.byte	24,12,133,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47205
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APT_2C',0,12,138,51,3
	.word	126560
	.byte	24,12,141,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47335
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_APT_SYNC',0,12,146,51,3
	.word	126629
	.byte	24,12,149,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47520
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_SX',0,12,154,51,3
	.word	126700
	.byte	24,12,157,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47628
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_SX_NOM',0,12,162,51,3
	.word	126769
	.byte	24,12,165,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47748
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_TX',0,12,170,51,3
	.word	126842
	.byte	24,12,173,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47856
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CDT_TX_NOM',0,12,178,51,3
	.word	126911
	.byte	24,12,181,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	47976
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CNT_NUM_1',0,12,186,51,3
	.word	126984
	.byte	24,12,189,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48093
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CNT_NUM_2',0,12,194,51,3
	.word	127056
	.byte	24,12,197,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48210
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CSN_MAX',0,12,202,51,3
	.word	127128
	.byte	24,12,205,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48321
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CSN_MIN',0,12,210,51,3
	.word	127198
	.byte	24,12,213,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48432
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTN_MAX',0,12,218,51,3
	.word	127268
	.byte	24,12,221,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48543
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTN_MIN',0,12,226,51,3
	.word	127338
	.byte	24,12,229,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48654
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_0',0,12,234,51,3
	.word	127408
	.byte	24,12,237,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	48886
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_STATE',0,12,242,51,3
	.word	127477
	.byte	24,12,245,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49130
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_0_SHADOW_TRIGGER',0,12,250,51,3
	.word	127559
	.byte	24,12,253,51,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49371
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_1',0,12,130,52,3
	.word	127643
	.byte	24,12,133,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	49775
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_11',0,12,138,52,3
	.word	127712
	.byte	24,12,141,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50430
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_STATE',0,12,146,52,3
	.word	127782
	.byte	24,12,149,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50716
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_1_SHADOW_TRIGGER',0,12,154,52,3
	.word	127864
	.byte	24,12,157,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	50950
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_2',0,12,162,52,3
	.word	127948
	.byte	24,12,165,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	51318
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_3',0,12,170,52,3
	.word	128017
	.byte	24,12,173,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	51698
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_4',0,12,178,52,3
	.word	128086
	.byte	24,12,181,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	52082
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_5',0,12,186,52,3
	.word	128155
	.byte	24,12,189,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	52466
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_CTRL_EXT',0,12,194,52,3
	.word	128224
	.byte	24,12,197,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	52615
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DLA',0,12,202,52,3
	.word	128295
	.byte	24,12,205,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	52714
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DTA',0,12,210,52,3
	.word	128361
	.byte	24,12,213,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	52813
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_S',0,12,218,52,3
	.word	128427
	.byte	24,12,221,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	52915
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_S_ACT',0,12,226,52,3
	.word	128494
	.byte	24,12,229,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	53029
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_S_START',0,12,234,52,3
	.word	128565
	.byte	24,12,245,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	53258
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_T_ACT',0,12,250,52,3
	.word	128638
	.byte	24,12,253,52,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	53372
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_DT_T_START',0,12,130,53,3
	.word	128709
	.byte	24,12,133,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	53497
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_EDT_S',0,12,138,53,3
	.word	128782
	.byte	24,12,141,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	53602
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_EDT_T',0,12,146,53,3
	.word	128850
	.byte	24,12,149,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	53707
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_EIRQ_EN',0,12,154,53,3
	.word	128918
	.byte	24,12,157,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	54462
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_FTV_S',0,12,162,53,3
	.word	128988
	.byte	24,12,165,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	54570
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_FTV_T',0,12,170,53,3
	.word	129056
	.byte	24,12,173,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	54680
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_ID_PMTR',0,12,178,53,3
	.word	129124
	.byte	24,12,181,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	54792
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INCF1_OFFSET',0,12,186,53,3
	.word	129194
	.byte	24,12,189,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	54923
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INCF2_OFFSET',0,12,194,53,3
	.word	129269
	.byte	24,12,197,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	55054
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT1',0,12,202,53,3
	.word	129344
	.byte	24,12,205,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	55168
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT1_MASK',0,12,210,53,3
	.word	129415
	.byte	24,12,213,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	55299
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT2',0,12,218,53,3
	.word	129491
	.byte	24,12,221,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	55413
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_INC_CNT2_MASK',0,12,226,53,3
	.word	129562
	.byte	24,12,229,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	55544
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_EN',0,12,234,53,3
	.word	129638
	.byte	24,12,237,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	56269
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_FORCINT',0,12,242,53,3
	.word	129707
	.byte	24,12,245,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	56920
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_MODE',0,12,250,53,3
	.word	129781
	.byte	24,12,253,53,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	57033
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_IRQ_NOTIFY',0,12,130,54,3
	.word	129852
	.byte	24,12,133,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	57570
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MEDT_S',0,12,138,54,3
	.word	129925
	.byte	24,12,141,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	57678
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MEDT_T',0,12,146,54,3
	.word	129994
	.byte	24,12,149,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	57786
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MLS1',0,12,154,54,3
	.word	130063
	.byte	24,12,157,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	57911
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MLS2',0,12,162,54,3
	.word	130130
	.byte	24,12,165,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58036
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MPVAL1',0,12,170,54,3
	.word	130197
	.byte	24,12,173,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58160
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_MPVAL2',0,12,178,54,3
	.word	130266
	.byte	24,12,181,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58284
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NA',0,12,186,54,3
	.word	130335
	.byte	24,12,189,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58417
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_S',0,12,194,54,3
	.word	130400
	.byte	24,12,197,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58545
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR',0,12,202,54,3
	.word	130468
	.byte	24,12,205,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58685
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_S_TAR_OLD',0,12,210,54,3
	.word	130540
	.byte	24,12,213,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58837
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_T',0,12,218,54,3
	.word	130616
	.byte	24,12,221,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	58965
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR',0,12,226,54,3
	.word	130684
	.byte	24,12,229,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	59105
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NMB_T_TAR_OLD',0,12,234,54,3
	.word	130756
	.byte	24,12,237,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	59257
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NTI_CNT',0,12,242,54,3
	.word	130832
	.byte	24,12,245,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	59368
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUSC',0,12,250,54,3
	.word	130902
	.byte	24,12,253,54,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	59586
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUSC_EXT1',0,12,130,55,3
	.word	130969
	.byte	24,12,133,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	59781
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUSC_EXT2',0,12,138,55,3
	.word	131041
	.byte	24,12,141,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60000
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_NUTC',0,12,146,55,3
	.word	131113
	.byte	24,12,149,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60241
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_OSW',0,12,154,55,3
	.word	131180
	.byte	24,12,157,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60398
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PDT',0,12,162,55,3
	.word	131246
	.byte	24,12,165,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60510
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSA',0,12,170,55,3
	.word	131312
	.byte	24,12,173,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60609
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSAC',0,12,178,55,3
	.word	131378
	.byte	24,12,181,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60711
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSSC',0,12,186,55,3
	.word	131445
	.byte	24,12,189,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60813
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSSM',0,12,194,55,3
	.word	131512
	.byte	24,12,197,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	60915
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSSM_OLD',0,12,202,55,3
	.word	131579
	.byte	24,12,205,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61029
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSTC',0,12,210,55,3
	.word	131650
	.byte	24,12,213,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61131
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSTM',0,12,218,55,3
	.word	131717
	.byte	24,12,221,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61233
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PSTM_OLD',0,12,226,55,3
	.word	131784
	.byte	24,12,229,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61347
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_PVT',0,12,234,55,3
	.word	131855
	.byte	24,12,237,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61446
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RAM_INI',0,12,242,55,3
	.word	131921
	.byte	24,12,245,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61636
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_SX',0,12,250,55,3
	.word	131991
	.byte	24,12,253,55,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61747
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_SX_NOM',0,12,130,56,3
	.word	132061
	.byte	24,12,133,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61870
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_TX',0,12,138,56,3
	.word	132135
	.byte	24,12,141,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	61981
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RCDT_TX_NOM',0,12,146,56,3
	.word	132205
	.byte	24,12,149,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62104
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_S',0,12,154,56,3
	.word	132279
	.byte	24,12,157,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62209
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_S_ACT',0,12,162,56,3
	.word	132347
	.byte	24,12,173,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62433
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_RDT_T_ACT',0,12,178,56,3
	.word	132419
	.byte	24,12,181,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62550
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_SIDEL',0,12,186,56,3
	.word	132491
	.byte	24,12,189,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62655
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_SLR',0,12,194,56,3
	.word	132559
	.byte	24,12,197,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62776
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STA',0,12,202,56,3
	.word	132625
	.byte	24,12,205,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	62973
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STATUS',0,12,210,56,3
	.word	132691
	.byte	24,12,213,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	63548
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STA_FLAG',0,12,218,56,3
	.word	132760
	.byte	24,12,221,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	63758
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_STA_MASK',0,12,226,56,3
	.word	132831
	.byte	24,12,229,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	63900
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TBU_TS0_S',0,12,234,56,3
	.word	132902
	.byte	24,12,237,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64017
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TBU_TS0_T',0,12,242,56,3
	.word	132974
	.byte	24,12,245,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64134
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THMA',0,12,250,56,3
	.word	133046
	.byte	24,12,253,56,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64259
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THMI',0,12,130,57,3
	.word	133113
	.byte	24,12,133,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64384
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THVAL',0,12,138,57,3
	.word	133180
	.byte	24,12,141,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64489
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_THVAL2',0,12,146,57,3
	.word	133248
	.byte	24,12,149,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64596
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TIDEL',0,12,154,57,3
	.word	133317
	.byte	24,12,157,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64701
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TLR',0,12,162,57,3
	.word	133385
	.byte	24,12,165,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64822
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TOV',0,12,170,57,3
	.word	133451
	.byte	24,12,173,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	64965
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TOV_S',0,12,178,57,3
	.word	133517
	.byte	24,12,181,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65104
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TSAC',0,12,186,57,3
	.word	133585
	.byte	24,12,189,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65206
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TSF_S',0,12,194,57,3
	.word	133652
	.byte	24,12,205,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65418
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_S',0,12,210,57,3
	.word	133720
	.byte	24,12,213,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65524
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_S_OLD',0,12,218,57,3
	.word	133787
	.byte	24,12,221,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65642
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_T',0,12,226,57,3
	.word	133858
	.byte	24,12,229,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65750
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DPLL_TS_T_OLD',0,12,234,57,3
	.word	133925
	.byte	24,12,237,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	65870
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DSADCINSEL',0,12,242,57,3
	.word	133996
	.byte	24,12,245,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	66079
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DSADC_OUTSEL0',0,12,250,57,3
	.word	134064
	.byte	24,12,253,57,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	66278
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DSADC_OUTSEL1',0,12,130,58,3
	.word	134135
	.byte	24,12,133,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	66472
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DTMAUXINSEL',0,12,138,58,3
	.word	134206
	.byte	24,12,141,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	66789
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DXINCON',0,12,146,58,3
	.word	134275
	.byte	24,12,149,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	67204
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_DXOUTCON',0,12,154,58,3
	.word	134340
	.byte	24,12,157,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	67448
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_EIRQ_EN',0,12,162,58,3
	.word	134406
	.byte	24,12,165,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	67809
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_EXT_CAP_EN',0,12,170,58,3
	.word	134471
	.byte	24,12,173,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	67955
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_HW_CONF',0,12,178,58,3
	.word	134539
	.byte	24,12,181,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	68529
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI0',0,12,186,58,3
	.word	134604
	.byte	24,12,189,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	69247
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI1',0,12,194,58,3
	.word	134675
	.byte	24,12,197,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	70118
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI2',0,12,202,58,3
	.word	134746
	.byte	24,12,205,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	70989
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI3',0,12,210,58,3
	.word	134817
	.byte	24,12,213,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	71860
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI4',0,12,218,58,3
	.word	134888
	.byte	24,12,221,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	72731
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI_MCS',0,12,226,58,3
	.word	134959
	.byte	24,12,229,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	73022
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI_PSM',0,12,234,58,3
	.word	135033
	.byte	24,12,237,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	73770
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CEI_SPE',0,12,242,58,3
	.word	135107
	.byte	24,12,245,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	73995
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_ATOM',0,12,250,58,3
	.word	135181
	.byte	24,12,253,58,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	74936
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_MCS',0,12,130,59,3
	.word	135255
	.byte	24,12,133,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	75217
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_PSM',0,12,138,59,3
	.word	135328
	.byte	24,12,141,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	75939
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_SPE',0,12,146,59,3
	.word	135401
	.byte	24,12,149,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	76156
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_CI_TOM',0,12,154,59,3
	.word	135474
	.byte	24,12,157,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	77075
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_MEI',0,12,162,59,3
	.word	135547
	.byte	24,12,165,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	77712
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_MEI_CLS',0,12,170,59,3
	.word	135617
	.byte	24,12,173,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	78251
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R0',0,12,178,59,3
	.word	135691
	.byte	24,12,181,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	78987
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R1',0,12,186,59,3
	.word	135760
	.byte	24,12,189,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	79744
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R10',0,12,194,59,3
	.word	135829
	.byte	24,12,197,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	80613
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R11',0,12,202,59,3
	.word	135899
	.byte	24,12,205,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	81498
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R2',0,12,210,59,3
	.word	135969
	.byte	24,12,213,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	82333
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R3',0,12,218,59,3
	.word	136038
	.byte	24,12,221,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	83168
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R4',0,12,226,59,3
	.word	136107
	.byte	24,12,229,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	84003
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R5',0,12,234,59,3
	.word	136176
	.byte	24,12,237,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	84838
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R6',0,12,242,59,3
	.word	136245
	.byte	24,12,245,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	85685
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R7',0,12,250,59,3
	.word	136314
	.byte	24,12,253,59,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	86532
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R8',0,12,130,60,3
	.word	136383
	.byte	24,12,133,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	87379
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_ICM_IRQG_R9',0,12,138,60,3
	.word	136452
	.byte	24,12,141,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	88246
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_INTOUT',0,12,146,60,3
	.word	136521
	.byte	24,12,149,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	88341
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_EN',0,12,154,60,3
	.word	136585
	.byte	24,12,157,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	88691
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_FORCINT',0,12,162,60,3
	.word	136649
	.byte	24,12,165,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	89024
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_MODE',0,12,170,60,3
	.word	136718
	.byte	24,12,173,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	89127
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_IRQ_NOTIFY',0,12,178,60,3
	.word	136784
	.byte	24,12,181,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	89584
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_LCDCDCOUTSEL',0,12,186,60,3
	.word	136852
	.byte	24,12,189,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	89690
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MAP_CTRL',0,12,194,60,3
	.word	136922
	.byte	24,12,197,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	90120
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCFG_CTRL',0,12,202,60,3
	.word	136988
	.byte	24,12,205,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	90366
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCSINTCLR',0,12,210,60,3
	.word	137055
	.byte	24,12,213,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	90612
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCSINTSTAT',0,12,218,60,3
	.word	137122
	.byte	24,12,221,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	90870
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCSTRIGOUTSEL',0,12,226,60,3
	.word	137190
	.byte	24,12,229,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	91069
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_AEM_DIS',0,12,234,60,3
	.word	137261
	.byte	24,12,237,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	91401
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CAT',0,12,242,60,3
	.word	137330
	.byte	24,12,245,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	91610
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_ACB',0,12,250,60,3
	.word	137395
	.byte	24,12,253,60,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	91777
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_CTRG',0,12,130,61,3
	.word	137463
	.byte	24,12,133,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	92265
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_CTRL',0,12,138,61,3
	.word	137532
	.byte	24,12,141,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	92560
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_EIRQ_EN',0,12,146,61,3
	.word	137601
	.byte	24,12,149,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	92729
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_EN',0,12,154,61,3
	.word	137673
	.byte	24,12,157,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	92892
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_FORCINT',0,12,162,61,3
	.word	137744
	.byte	24,12,165,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	93068
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_MODE',0,12,170,61,3
	.word	137820
	.byte	24,12,173,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	93185
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_IRQ_NOTIFY',0,12,178,61,3
	.word	137893
	.byte	24,12,181,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	93347
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_MHB',0,12,186,61,3
	.word	137968
	.byte	24,12,189,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	93450
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_PC',0,12,194,61,3
	.word	138036
	.byte	24,12,197,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	93550
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_R',0,12,202,61,3
	.word	138103
	.byte	24,12,205,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	93650
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CH_STRG',0,12,210,61,3
	.word	138169
	.byte	24,12,213,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	94138
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CTRL_STAT',0,12,218,61,3
	.word	138238
	.byte	24,12,221,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	94491
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_CWT',0,12,226,61,3
	.word	138309
	.byte	24,12,229,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	94700
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_ERR',0,12,234,61,3
	.word	138374
	.byte	24,12,237,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	94909
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_REG_PROT',0,12,242,61,3
	.word	138439
	.byte	24,12,245,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	95145
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MCS_RESET',0,12,250,61,3
	.word	138509
	.byte	24,12,253,61,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	95358
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MON_ACTIVITY_MCS',0,12,130,62,3
	.word	138576
	.byte	24,12,133,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	95593
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MON_ACTIVITY_R0',0,12,138,62,3
	.word	138650
	.byte	24,12,141,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	96276
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MON_ACTIVITY_R1',0,12,146,62,3
	.word	138723
	.byte	24,12,149,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	96959
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MON_STATUS',0,12,154,62,3
	.word	138796
	.byte	24,12,157,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	97625
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_MSCQ_INHCON',0,12,162,62,3
	.word	138864
	.byte	24,12,165,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	97962
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_MSCQ_INLCON',0,12,170,62,3
	.word	138937
	.byte	24,12,173,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	98299
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_MSCQ_INLEXTCON',0,12,178,62,3
	.word	139010
	.byte	24,12,181,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	98642
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_SET_CON0',0,12,186,62,3
	.word	139086
	.byte	24,12,189,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	98866
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_SET_CON1',0,12,194,62,3
	.word	139156
	.byte	24,12,197,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	99090
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_SET_CON2',0,12,202,62,3
	.word	139226
	.byte	24,12,205,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	99316
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_MSC_SET_CON3',0,12,210,62,3
	.word	139296
	.byte	24,12,213,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	99544
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OCS',0,12,218,62,3
	.word	139366
	.byte	24,12,221,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	99700
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_ODA',0,12,226,62,3
	.word	139432
	.byte	24,12,229,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	99799
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTBU0T',0,12,234,62,3
	.word	139498
	.byte	24,12,237,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	99940
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTBU1T',0,12,242,62,3
	.word	139567
	.byte	24,12,245,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	100081
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTBU2T',0,12,250,62,3
	.word	139636
	.byte	24,12,253,62,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	100222
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTBU3T',0,12,130,63,3
	.word	139705
	.byte	24,12,133,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	100363
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTSC0',0,12,138,63,3
	.word	139774
	.byte	24,12,141,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	100655
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTSC1',0,12,146,63,3
	.word	139842
	.byte	24,12,149,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	100809
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OCDS_OTSS',0,12,154,63,3
	.word	139910
	.byte	24,12,157,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	101033
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OUT_ATOM',0,12,162,63,3
	.word	139977
	.byte	24,12,165,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	101190
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_OUT_TOM',0,12,170,63,3
	.word	140043
	.byte	24,12,173,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	101289
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSI5OUTSEL',0,12,178,63,3
	.word	140108
	.byte	24,12,181,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	101473
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSI5SOUTSEL',0,12,186,63,3
	.word	140176
	.byte	24,12,189,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	101668
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_AFD_CH_BUF_ACC',0,12,194,63,3
	.word	140245
	.byte	24,12,197,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	101788
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_ENABLE',0,12,202,63,3
	.word	140321
	.byte	24,12,205,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	102036
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_F2A_CTRL',0,12,210,63,3
	.word	140393
	.byte	24,12,213,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	102219
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_RD_CH_ARU_RD_FIFO',0,12,218,63,3
	.word	140467
	.byte	24,12,221,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	102352
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_F2A_STR_CH_STR_CFG',0,12,226,63,3
	.word	140550
	.byte	24,12,229,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	102518
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_CTRL',0,12,234,63,3
	.word	140630
	.byte	24,12,237,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	102682
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_EIRQ_EN',0,12,242,63,3
	.word	140704
	.byte	24,12,245,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	102902
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_END_ADDR',0,12,250,63,3
	.word	140781
	.byte	24,12,253,63,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	103026
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_FILL_LEVEL',0,12,130,64,3
	.word	140859
	.byte	24,12,133,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	103155
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_EN',0,12,138,64,3
	.word	140939
	.byte	24,12,141,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	103369
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_FORCINT',0,12,146,64,3
	.word	141015
	.byte	24,12,149,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	103581
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_MODE',0,12,154,64,3
	.word	141096
	.byte	24,12,157,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	103758
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ_NOTIFY',0,12,162,64,3
	.word	141174
	.byte	24,12,165,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	103952
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_LOWER_WM',0,12,170,64,3
	.word	141254
	.byte	24,12,173,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104076
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_RD_PTR',0,12,178,64,3
	.word	141332
	.byte	24,12,181,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104196
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_START_ADDR',0,12,186,64,3
	.word	141408
	.byte	24,12,189,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104324
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_STATUS',0,12,194,64,3
	.word	141488
	.byte	24,12,197,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104495
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_UPPER_WM',0,12,202,64,3
	.word	141564
	.byte	24,12,205,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104619
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_PSM_FIFO_CH_WR_PTR',0,12,210,64,3
	.word	141642
	.byte	24,12,213,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104739
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_RESET1',0,12,218,64,3
	.word	141718
	.byte	24,12,221,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104852
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_RESET2',0,12,226,64,3
	.word	141782
	.byte	24,12,229,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	104946
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_RESET_CLR',0,12,234,64,3
	.word	141846
	.byte	24,12,237,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	105046
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_REV',0,12,242,64,3
	.word	141913
	.byte	24,12,245,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	105224
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_RST',0,12,250,64,3
	.word	141974
	.byte	24,12,253,64,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	105371
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_CMD',0,12,130,65,3
	.word	142035
	.byte	24,12,133,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	105523
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_CTRL_STAT',0,12,138,65,3
	.word	142100
	.byte	24,12,141,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	105871
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_CTRL_STAT2',0,12,146,65,3
	.word	142171
	.byte	24,12,149,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	106016
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_EIRQ_EN',0,12,154,65,3
	.word	142243
	.byte	24,12,157,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	106244
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_EN',0,12,162,65,3
	.word	142312
	.byte	24,12,165,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	106465
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_FORCINT',0,12,170,65,3
	.word	142380
	.byte	24,12,173,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	106681
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_MODE',0,12,178,65,3
	.word	142453
	.byte	24,12,181,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	106792
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_IRQ_NOTIFY',0,12,186,65,3
	.word	142523
	.byte	24,12,189,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	106986
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_OUT_CTRL',0,12,194,65,3
	.word	142595
	.byte	24,12,197,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	107102
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_OUT_PAT',0,12,202,65,3
	.word	142665
	.byte	24,12,205,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	107215
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_PAT',0,12,210,65,3
	.word	142734
	.byte	24,12,213,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	107578
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_REV_CMP',0,12,218,65,3
	.word	142799
	.byte	24,12,221,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	107687
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_SPE_REV_CNT',0,12,226,65,3
	.word	142868
	.byte	24,12,229,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	107796
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH0_BASE',0,12,234,65,3
	.word	142937
	.byte	24,12,237,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	107904
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH0_CTRL',0,12,242,65,3
	.word	143007
	.byte	24,12,245,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108036
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH1_BASE',0,12,250,65,3
	.word	143077
	.byte	24,12,253,65,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108144
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH1_CTRL',0,12,130,66,3
	.word	143147
	.byte	24,12,133,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108276
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH2_BASE',0,12,138,66,3
	.word	143217
	.byte	24,12,141,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108384
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH2_CTRL',0,12,146,66,3
	.word	143287
	.byte	24,12,149,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108516
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_BASE',0,12,154,66,3
	.word	143357
	.byte	24,12,157,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108624
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_BASE_CAPTURE',0,12,162,66,3
	.word	143427
	.byte	24,12,165,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108756
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_BASE_MARK',0,12,170,66,3
	.word	143505
	.byte	24,12,173,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	108879
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CH3_CTRL',0,12,178,66,3
	.word	143580
	.byte	24,12,181,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	109030
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TBU_CHEN',0,12,186,66,3
	.word	143650
	.byte	24,12,189,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	109197
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIMINSEL',0,12,194,66,3
	.word	143716
	.byte	24,12,197,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	109402
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_CNT',0,12,202,66,3
	.word	143782
	.byte	24,12,205,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	109505
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_CNTS',0,12,210,66,3
	.word	143850
	.byte	24,12,213,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	109604
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_CTRL',0,12,218,66,3
	.word	143919
	.byte	24,12,221,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	110147
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_ECNT',0,12,226,66,3
	.word	143988
	.byte	24,12,229,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	110253
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_ECTRL',0,12,234,66,3
	.word	144057
	.byte	24,12,237,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	110730
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_EIRQ_EN',0,12,242,66,3
	.word	144127
	.byte	24,12,245,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	110984
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_FLT_FE',0,12,250,66,3
	.word	144199
	.byte	24,12,253,66,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	111096
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_FLT_RE',0,12,130,67,3
	.word	144270
	.byte	24,12,133,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	111208
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_GPR0',0,12,138,67,3
	.word	144341
	.byte	24,12,141,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	111307
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_GPR1',0,12,146,67,3
	.word	144410
	.byte	24,12,149,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	111406
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_EN',0,12,154,67,3
	.word	144479
	.byte	24,12,157,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	111652
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_FORCINT',0,12,162,67,3
	.word	144550
	.byte	24,12,165,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	111890
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_MODE',0,12,170,67,3
	.word	144626
	.byte	24,12,173,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	112007
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_IRQ_NOTIFY',0,12,178,67,3
	.word	144699
	.byte	24,12,181,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	112219
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_TDUC',0,12,186,67,3
	.word	144774
	.byte	24,12,189,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	112365
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_CH_TDUV',0,12,194,67,3
	.word	144843
	.byte	24,12,197,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	112594
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_INP_VAL',0,12,202,67,3
	.word	144912
	.byte	24,12,205,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	112735
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_IN_SRC',0,12,210,67,3
	.word	144981
	.byte	24,12,213,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	113080
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TIM_RST',0,12,218,67,3
	.word	145049
	.byte	24,12,221,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	113313
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CM0',0,12,226,67,3
	.word	145114
	.byte	24,12,229,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	113416
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CM1',0,12,234,67,3
	.word	145182
	.byte	24,12,237,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	113519
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CN0',0,12,242,67,3
	.word	145250
	.byte	24,12,245,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	113622
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_CTRL',0,12,250,67,3
	.word	145318
	.byte	24,12,253,67,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114098
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_EN',0,12,130,68,3
	.word	145387
	.byte	24,12,133,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114241
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_FORCINT',0,12,138,68,3
	.word	145458
	.byte	24,12,141,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114390
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_MODE',0,12,146,68,3
	.word	145534
	.byte	24,12,149,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114507
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_IRQ_NOTIFY',0,12,154,68,3
	.word	145607
	.byte	24,12,157,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114644
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_SR0',0,12,162,68,3
	.word	145682
	.byte	24,12,165,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114747
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_SR1',0,12,170,68,3
	.word	145750
	.byte	24,12,173,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114850
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_CH_STAT',0,12,178,68,3
	.word	145818
	.byte	24,12,181,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	114953
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_ACT_TB',0,12,186,68,3
	.word	145887
	.byte	24,12,189,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	115105
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_CTRL',0,12,194,68,3
	.word	145959
	.byte	24,12,197,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	115393
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_ENDIS_STAT',0,12,202,68,3
	.word	146035
	.byte	24,12,205,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	115681
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_FUPD_CTRL',0,12,210,68,3
	.word	146111
	.byte	24,12,213,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	116112
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_GLB_CTRL',0,12,218,68,3
	.word	146186
	.byte	24,12,221,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	116560
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_INT_TRIG',0,12,226,68,3
	.word	146260
	.byte	24,12,229,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	116828
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_CTRL',0,12,234,68,3
	.word	146334
	.byte	24,12,237,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	117116
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOM_TGC_OUTEN_STAT',0,12,242,68,3
	.word	146410
	.byte	24,12,245,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	117404
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TOUTSEL',0,12,250,68,3
	.word	146486
	.byte	24,12,253,68,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	117591
	.byte	4,2,35,0,0,15
	.byte	'Ifx_GTM_TRIGOUT',0,12,130,69,3
	.word	146551
	.byte	22
	.byte	'_Ifx_GTM_IRQ',0,12,142,69,25,16,11
	.byte	'NOTIFY',0
	.word	136784
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	136585
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	136649
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	136718
	.byte	4,2,35,12,0,19
	.word	146616
	.byte	15
	.byte	'Ifx_GTM_IRQ',0,12,148,69,3
	.word	146695
	.byte	22
	.byte	'_Ifx_GTM_BRIDGE',0,12,163,69,25,12,11
	.byte	'MODE',0
	.word	122356
	.byte	4,2,35,0,11
	.byte	'PTR1',0
	.word	122425
	.byte	4,2,35,4,11
	.byte	'PTR2',0
	.word	122494
	.byte	4,2,35,8,0,19
	.word	146721
	.byte	15
	.byte	'Ifx_GTM_BRIDGE',0,12,168,69,3
	.word	146786
	.byte	8,28
	.word	121727
	.byte	9,6,0,22
	.byte	'_Ifx_GTM_AUX_IN_SRC',0,12,183,69,25,28,11
	.byte	'TIM',0
	.word	146815
	.byte	28,2,35,0,0,19
	.word	146824
	.byte	15
	.byte	'Ifx_GTM_AUX_IN_SRC',0,12,186,69,3
	.word	146864
	.byte	8,24
	.word	140043
	.byte	9,5,0,22
	.byte	'_Ifx_GTM_OUT',0,12,201,69,25,48,11
	.byte	'TOM',0
	.word	146897
	.byte	24,2,35,0,11
	.byte	'ATOM0',0
	.word	139977
	.byte	4,2,35,24,11
	.byte	'ATOM2',0
	.word	139977
	.byte	4,2,35,28,11
	.byte	'ATOM4',0
	.word	139977
	.byte	4,2,35,32,11
	.byte	'ATOM6',0
	.word	139977
	.byte	4,2,35,36,11
	.byte	'ATOM8',0
	.word	139977
	.byte	4,2,35,40,11
	.byte	'ATOM10',0
	.word	139977
	.byte	4,2,35,44,0,19
	.word	146906
	.byte	15
	.byte	'Ifx_GTM_OUT',0,12,210,69,3
	.word	147030
	.byte	22
	.byte	'_Ifx_GTM_TBU',0,12,225,69,25,44,11
	.byte	'CHEN',0
	.word	143650
	.byte	4,2,35,0,11
	.byte	'CH0_CTRL',0
	.word	143007
	.byte	4,2,35,4,11
	.byte	'CH0_BASE',0
	.word	142937
	.byte	4,2,35,8,11
	.byte	'CH1_CTRL',0
	.word	143147
	.byte	4,2,35,12,11
	.byte	'CH1_BASE',0
	.word	143077
	.byte	4,2,35,16,11
	.byte	'CH2_CTRL',0
	.word	143287
	.byte	4,2,35,20,11
	.byte	'CH2_BASE',0
	.word	143217
	.byte	4,2,35,24,11
	.byte	'CH3_CTRL',0
	.word	143580
	.byte	4,2,35,28,11
	.byte	'CH3_BASE',0
	.word	143357
	.byte	4,2,35,32,11
	.byte	'CH3_BASE_MARK',0
	.word	143505
	.byte	4,2,35,36,11
	.byte	'CH3_BASE_CAPTURE',0
	.word	143427
	.byte	4,2,35,40,0,19
	.word	147056
	.byte	15
	.byte	'Ifx_GTM_TBU',0,12,238,69,3
	.word	147283
	.byte	8,40
	.word	138576
	.byte	9,9,0,22
	.byte	'_Ifx_GTM_MON_ACTIVITY',0,12,253,69,25,48,11
	.byte	'R0',0
	.word	138650
	.byte	4,2,35,0,11
	.byte	'R1',0
	.word	138723
	.byte	4,2,35,4,11
	.byte	'MCS',0
	.word	147309
	.byte	40,2,35,8,0,19
	.word	147318
	.byte	15
	.byte	'Ifx_GTM_MON_ACTIVITY',0,12,130,70,3
	.word	147384
	.byte	19
	.word	147318
	.byte	22
	.byte	'_Ifx_GTM_MON',0,12,145,70,25,52,11
	.byte	'STATUS',0
	.word	138796
	.byte	4,2,35,0,11
	.byte	'ACTIVITY',0
	.word	147419
	.byte	48,2,35,4,0,19
	.word	147424
	.byte	15
	.byte	'Ifx_GTM_MON',0,12,149,70,3
	.word	147478
	.byte	22
	.byte	'_Ifx_GTM_CMP_IRQ',0,12,164,70,25,16,11
	.byte	'NOTIFY',0
	.word	124672
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	124461
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	124529
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	124602
	.byte	4,2,35,12,0,19
	.word	147504
	.byte	15
	.byte	'Ifx_GTM_CMP_IRQ',0,12,170,70,3
	.word	147587
	.byte	19
	.word	147504
	.byte	22
	.byte	'_Ifx_GTM_CMP',0,12,185,70,25,24,11
	.byte	'EN',0
	.word	124397
	.byte	4,2,35,0,11
	.byte	'IRQ',0
	.word	147617
	.byte	16,2,35,4,11
	.byte	'EIRQ_EN',0
	.word	124328
	.byte	4,2,35,20,0,19
	.word	147622
	.byte	15
	.byte	'Ifx_GTM_CMP',0,12,190,70,3
	.word	147684
	.byte	22
	.byte	'_Ifx_GTM_ARU_DBG',0,12,205,70,25,24,11
	.byte	'ACCESS0',0
	.word	118743
	.byte	4,2,35,0,11
	.byte	'DATA0_H',0
	.word	118889
	.byte	4,2,35,4,11
	.byte	'DATA0_L',0
	.word	118962
	.byte	4,2,35,8,11
	.byte	'ACCESS1',0
	.word	118816
	.byte	4,2,35,12,11
	.byte	'DATA1_H',0
	.word	119035
	.byte	4,2,35,16,11
	.byte	'DATA1_L',0
	.word	119108
	.byte	4,2,35,20,0,19
	.word	147710
	.byte	15
	.byte	'Ifx_GTM_ARU_DBG',0,12,213,70,3
	.word	147836
	.byte	22
	.byte	'_Ifx_GTM_ARU_IRQ',0,12,228,70,25,16,11
	.byte	'NOTIFY',0
	.word	119842
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	119631
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	119699
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	119772
	.byte	4,2,35,12,0,19
	.word	147866
	.byte	15
	.byte	'Ifx_GTM_ARU_IRQ',0,12,234,70,3
	.word	147949
	.byte	19
	.word	147710
	.byte	19
	.word	147866
	.byte	8,8
	.word	119181
	.byte	9,1,0,8,8
	.word	119399
	.byte	9,1,0,8,8
	.word	119323
	.byte	9,1,0,8,8
	.word	119553
	.byte	9,1,0,8,8
	.word	119474
	.byte	9,1,0,8,8
	.word	119251
	.byte	9,1,0,8,12
	.word	326
	.byte	9,11,0,22
	.byte	'_Ifx_GTM_ARU',0,12,249,70,25,128,1,11
	.byte	'ACCESS',0
	.word	118335
	.byte	4,2,35,0,11
	.byte	'DATA_H',0
	.word	118607
	.byte	4,2,35,4,11
	.byte	'DATA_L',0
	.word	118675
	.byte	4,2,35,8,11
	.byte	'DBG',0
	.word	147979
	.byte	24,2,35,12,11
	.byte	'IRQ',0
	.word	147984
	.byte	16,2,35,36,11
	.byte	'CADDR_END',0
	.word	118470
	.byte	4,2,35,52,11
	.byte	'reserved_38',0
	.word	7944
	.byte	4,2,35,56,11
	.byte	'CTRL',0
	.word	118541
	.byte	4,2,35,60,11
	.byte	'DYN_CTRL',0
	.word	147989
	.byte	8,2,35,64,11
	.byte	'DYN_ROUTE_LOW',0
	.word	147998
	.byte	8,2,35,72,11
	.byte	'DYN_ROUTE_HIGH',0
	.word	148007
	.byte	8,2,35,80,11
	.byte	'DYN_ROUTE_SR_LOW',0
	.word	148016
	.byte	8,2,35,88,11
	.byte	'DYN_ROUTE_SR_HIGH',0
	.word	148025
	.byte	8,2,35,96,11
	.byte	'DYN_RDADDR',0
	.word	148034
	.byte	8,2,35,104,11
	.byte	'reserved_70',0
	.word	148043
	.byte	12,2,35,112,11
	.byte	'CADDR',0
	.word	118403
	.byte	4,2,35,124,0,19
	.word	148052
	.byte	15
	.byte	'Ifx_GTM_ARU',0,12,139,71,3
	.word	148375
	.byte	22
	.byte	'_Ifx_GTM_CMU_CLK',0,12,154,71,25,4,11
	.byte	'CTRL',0
	.word	124882
	.byte	4,2,35,0,0,19
	.word	148401
	.byte	15
	.byte	'Ifx_GTM_CMU_CLK',0,12,157,71,3
	.word	148439
	.byte	22
	.byte	'_Ifx_GTM_CMU_ECLK',0,12,172,71,25,8,11
	.byte	'NUM',0
	.word	125023
	.byte	4,2,35,0,11
	.byte	'DEN',0
	.word	124953
	.byte	4,2,35,4,0,19
	.word	148469
	.byte	15
	.byte	'Ifx_GTM_CMU_ECLK',0,12,176,71,3
	.word	148520
	.byte	22
	.byte	'_Ifx_GTM_CMU_FXCLK',0,12,191,71,25,4,11
	.byte	'CTRL',0
	.word	125093
	.byte	4,2,35,0,0,19
	.word	148551
	.byte	15
	.byte	'Ifx_GTM_CMU_FXCLK',0,12,194,71,3
	.word	148591
	.byte	8,32
	.word	148401
	.byte	9,7,0,19
	.word	148623
	.byte	8,24
	.word	148469
	.byte	9,2,0,19
	.word	148637
	.byte	19
	.word	148551
	.byte	22
	.byte	'_Ifx_GTM_CMU',0,12,209,71,25,80,11
	.byte	'CLK_EN',0
	.word	124814
	.byte	4,2,35,0,11
	.byte	'GCLK_NUM',0
	.word	125235
	.byte	4,2,35,4,11
	.byte	'GCLK_DEN',0
	.word	125165
	.byte	4,2,35,8,11
	.byte	'CLK',0
	.word	148632
	.byte	32,2,35,12,11
	.byte	'ECLK',0
	.word	148646
	.byte	24,2,35,44,11
	.byte	'FXCLK',0
	.word	148651
	.byte	4,2,35,68,11
	.byte	'GLB_CTRL',0
	.word	125305
	.byte	4,2,35,72,11
	.byte	'CLK_CTRL',0
	.word	124744
	.byte	4,2,35,76,0,19
	.word	148656
	.byte	15
	.byte	'Ifx_GTM_CMU',0,12,219,71,3
	.word	148806
	.byte	22
	.byte	'_Ifx_GTM_BRC_SRC',0,12,234,71,25,8,11
	.byte	'ADDR',0
	.word	122216
	.byte	4,2,35,0,11
	.byte	'DEST',0
	.word	122286
	.byte	4,2,35,4,0,19
	.word	148832
	.byte	15
	.byte	'Ifx_GTM_BRC_SRC',0,12,238,71,3
	.word	148884
	.byte	22
	.byte	'_Ifx_GTM_BRC_IRQ',0,12,253,71,25,16,11
	.byte	'NOTIFY',0
	.word	122079
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	121868
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	121936
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	122009
	.byte	4,2,35,12,0,19
	.word	148914
	.byte	15
	.byte	'Ifx_GTM_BRC_IRQ',0,12,131,72,3
	.word	148997
	.byte	8,96
	.word	148832
	.byte	9,11,0,19
	.word	149027
	.byte	19
	.word	148914
	.byte	22
	.byte	'_Ifx_GTM_BRC',0,12,146,72,25,120,11
	.byte	'SRC',0
	.word	149036
	.byte	96,2,35,0,11
	.byte	'IRQ',0
	.word	149041
	.byte	16,2,35,96,11
	.byte	'RST',0
	.word	122151
	.byte	4,2,35,112,11
	.byte	'EIRQ_EN',0
	.word	121799
	.byte	4,2,35,116,0,19
	.word	149046
	.byte	15
	.byte	'Ifx_GTM_BRC',0,12,152,72,3
	.word	149122
	.byte	8,40
	.word	134959
	.byte	9,9,0,8,24
	.word	326
	.byte	9,23,0,8,4
	.word	135033
	.byte	9,0,0,8,88
	.word	326
	.byte	9,87,0,8,12
	.word	135617
	.byte	9,2,0,8,40
	.word	135255
	.byte	9,9,0,8,4
	.word	135328
	.byte	9,0,0,8,12
	.word	135181
	.byte	9,2,0,8,12
	.word	135474
	.byte	9,2,0,22
	.byte	'_Ifx_GTM_ICM_IRQG',0,12,167,72,25,172,3,11
	.byte	'R0',0
	.word	135691
	.byte	4,2,35,0,11
	.byte	'R1',0
	.word	135760
	.byte	4,2,35,4,11
	.byte	'R2',0
	.word	135969
	.byte	4,2,35,8,11
	.byte	'R3',0
	.word	136038
	.byte	4,2,35,12,11
	.byte	'R4',0
	.word	136107
	.byte	4,2,35,16,11
	.byte	'R5',0
	.word	136176
	.byte	4,2,35,20,11
	.byte	'R6',0
	.word	136245
	.byte	4,2,35,24,11
	.byte	'R7',0
	.word	136314
	.byte	4,2,35,28,11
	.byte	'R8',0
	.word	136383
	.byte	4,2,35,32,11
	.byte	'R9',0
	.word	136452
	.byte	4,2,35,36,11
	.byte	'R10',0
	.word	135829
	.byte	4,2,35,40,11
	.byte	'R11',0
	.word	135899
	.byte	4,2,35,44,11
	.byte	'MEI',0
	.word	135547
	.byte	4,2,35,48,11
	.byte	'CEI0',0
	.word	134604
	.byte	4,2,35,52,11
	.byte	'CEI1',0
	.word	134675
	.byte	4,2,35,56,11
	.byte	'CEI2',0
	.word	134746
	.byte	4,2,35,60,11
	.byte	'CEI3',0
	.word	134817
	.byte	4,2,35,64,11
	.byte	'CEI4',0
	.word	134888
	.byte	4,2,35,68,11
	.byte	'reserved_48',0
	.word	4986
	.byte	28,2,35,72,11
	.byte	'CEI_MCS',0
	.word	149148
	.byte	40,2,35,100,11
	.byte	'reserved_8C',0
	.word	149157
	.byte	24,3,35,140,1,11
	.byte	'CEI_PSM',0
	.word	149166
	.byte	4,3,35,164,1,11
	.byte	'reserved_A8',0
	.word	148043
	.byte	12,3,35,168,1,11
	.byte	'CEI_SPE',0
	.word	135107
	.byte	4,3,35,180,1,11
	.byte	'reserved_B8',0
	.word	149175
	.byte	88,3,35,184,1,11
	.byte	'MEI_CLS',0
	.word	149184
	.byte	12,3,35,144,2,11
	.byte	'reserved_11C',0
	.word	7944
	.byte	4,3,35,156,2,11
	.byte	'CI_MCS',0
	.word	149193
	.byte	40,3,35,160,2,11
	.byte	'reserved_148',0
	.word	149157
	.byte	24,3,35,200,2,11
	.byte	'CI_PSM',0
	.word	149202
	.byte	4,3,35,224,2,11
	.byte	'reserved_164',0
	.word	148043
	.byte	12,3,35,228,2,11
	.byte	'CI_SPE',0
	.word	135401
	.byte	4,3,35,240,2,11
	.byte	'reserved_174',0
	.word	4986
	.byte	28,3,35,244,2,11
	.byte	'CI_ATOM',0
	.word	149211
	.byte	12,3,35,144,3,11
	.byte	'reserved_19C',0
	.word	7944
	.byte	4,3,35,156,3,11
	.byte	'CI_TOM',0
	.word	149220
	.byte	12,3,35,160,3,0,19
	.word	149229
	.byte	15
	.byte	'Ifx_GTM_ICM_IRQG',0,12,205,72,3
	.word	149843
	.byte	19
	.word	149229
	.byte	22
	.byte	'_Ifx_GTM_ICM',0,12,220,72,25,172,3,11
	.byte	'IRQG',0
	.word	149874
	.byte	172,3,2,35,0,0,19
	.word	149879
	.byte	15
	.byte	'Ifx_GTM_ICM',0,12,223,72,3
	.word	149915
	.byte	22
	.byte	'_Ifx_GTM_SPE_IRQ',0,12,238,72,25,16,11
	.byte	'NOTIFY',0
	.word	142523
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	142312
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	142380
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	142453
	.byte	4,2,35,12,0,19
	.word	149941
	.byte	15
	.byte	'Ifx_GTM_SPE_IRQ',0,12,244,72,3
	.word	150024
	.byte	8,32
	.word	142665
	.byte	9,7,0,19
	.word	149941
	.byte	8,48
	.word	326
	.byte	9,47,0,22
	.byte	'_Ifx_GTM_SPE',0,12,131,73,25,128,1,11
	.byte	'CTRL_STAT',0
	.word	142100
	.byte	4,2,35,0,11
	.byte	'PAT',0
	.word	142734
	.byte	4,2,35,4,11
	.byte	'OUT_PAT',0
	.word	150054
	.byte	32,2,35,8,11
	.byte	'OUT_CTRL',0
	.word	142595
	.byte	4,2,35,40,11
	.byte	'IRQ',0
	.word	150063
	.byte	16,2,35,44,11
	.byte	'EIRQ_EN',0
	.word	142243
	.byte	4,2,35,60,11
	.byte	'REV_CNT',0
	.word	142868
	.byte	4,2,35,64,11
	.byte	'REV_CMP',0
	.word	142799
	.byte	4,2,35,68,11
	.byte	'CTRL_STAT2',0
	.word	142171
	.byte	4,2,35,72,11
	.byte	'CMD',0
	.word	142035
	.byte	4,2,35,76,11
	.byte	'reserved_50',0
	.word	150068
	.byte	48,2,35,80,0,19
	.word	150077
	.byte	15
	.byte	'Ifx_GTM_SPE',0,12,144,73,3
	.word	150283
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH_IRQ',0,12,159,73,25,16,11
	.byte	'NOTIFY',0
	.word	144699
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	144479
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	144550
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	144626
	.byte	4,2,35,12,0,19
	.word	150309
	.byte	15
	.byte	'Ifx_GTM_TIM_CH_IRQ',0,12,165,73,3
	.word	150395
	.byte	19
	.word	150309
	.byte	22
	.byte	'_Ifx_GTM_TIM_CH',0,12,180,73,25,64,11
	.byte	'GPR0',0
	.word	144341
	.byte	4,2,35,0,11
	.byte	'GPR1',0
	.word	144410
	.byte	4,2,35,4,11
	.byte	'CNT',0
	.word	143782
	.byte	4,2,35,8,11
	.byte	'ECNT',0
	.word	143988
	.byte	4,2,35,12,11
	.byte	'CNTS',0
	.word	143850
	.byte	4,2,35,16,11
	.byte	'TDUC',0
	.word	144774
	.byte	4,2,35,20,11
	.byte	'TDUV',0
	.word	144843
	.byte	4,2,35,24,11
	.byte	'FLT_RE',0
	.word	144270
	.byte	4,2,35,28,11
	.byte	'FLT_FE',0
	.word	144199
	.byte	4,2,35,32,11
	.byte	'CTRL',0
	.word	143919
	.byte	4,2,35,36,11
	.byte	'ECTRL',0
	.word	144057
	.byte	4,2,35,40,11
	.byte	'IRQ',0
	.word	150428
	.byte	16,2,35,44,11
	.byte	'EIRQ_EN',0
	.word	144127
	.byte	4,2,35,60,0,19
	.word	150433
	.byte	15
	.byte	'Ifx_GTM_TIM_CH',0,12,195,73,3
	.word	150644
	.byte	19
	.word	150433
	.byte	8,52
	.word	326
	.byte	9,51,0,19
	.word	150433
	.byte	19
	.word	150433
	.byte	19
	.word	150433
	.byte	19
	.word	150433
	.byte	19
	.word	150433
	.byte	19
	.word	150433
	.byte	19
	.word	150433
	.byte	8,192,8
	.word	326
	.byte	9,191,8,0,22
	.byte	'_Ifx_GTM_TIM',0,12,210,73,25,128,16,11
	.byte	'CH0',0
	.word	150673
	.byte	64,2,35,0,11
	.byte	'reserved_40',0
	.word	150678
	.byte	52,2,35,64,11
	.byte	'INP_VAL',0
	.word	144912
	.byte	4,2,35,116,11
	.byte	'IN_SRC',0
	.word	144981
	.byte	4,2,35,120,11
	.byte	'RST',0
	.word	145049
	.byte	4,2,35,124,11
	.byte	'CH1',0
	.word	150687
	.byte	64,3,35,128,1,11
	.byte	'reserved_C0',0
	.word	14501
	.byte	64,3,35,192,1,11
	.byte	'CH2',0
	.word	150692
	.byte	64,3,35,128,2,11
	.byte	'reserved_140',0
	.word	14501
	.byte	64,3,35,192,2,11
	.byte	'CH3',0
	.word	150697
	.byte	64,3,35,128,3,11
	.byte	'reserved_1C0',0
	.word	14501
	.byte	64,3,35,192,3,11
	.byte	'CH4',0
	.word	150702
	.byte	64,3,35,128,4,11
	.byte	'reserved_240',0
	.word	14501
	.byte	64,3,35,192,4,11
	.byte	'CH5',0
	.word	150707
	.byte	64,3,35,128,5,11
	.byte	'reserved_2C0',0
	.word	14501
	.byte	64,3,35,192,5,11
	.byte	'CH6',0
	.word	150712
	.byte	64,3,35,128,6,11
	.byte	'reserved_340',0
	.word	14501
	.byte	64,3,35,192,6,11
	.byte	'CH7',0
	.word	150717
	.byte	64,3,35,128,7,11
	.byte	'reserved_3C0',0
	.word	150722
	.byte	192,8,3,35,192,7,0,19
	.word	150733
	.byte	15
	.byte	'Ifx_GTM_TIM',0,12,231,73,3
	.word	151093
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH_IRQ',0,12,246,73,25,16,11
	.byte	'NOTIFY',0
	.word	145607
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	145387
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	145458
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	145534
	.byte	4,2,35,12,0,19
	.word	151119
	.byte	15
	.byte	'Ifx_GTM_TOM_CH_IRQ',0,12,252,73,3
	.word	151205
	.byte	19
	.word	151119
	.byte	22
	.byte	'_Ifx_GTM_TOM_CH',0,12,139,74,25,44,11
	.byte	'CTRL',0
	.word	145318
	.byte	4,2,35,0,11
	.byte	'SR0',0
	.word	145682
	.byte	4,2,35,4,11
	.byte	'SR1',0
	.word	145750
	.byte	4,2,35,8,11
	.byte	'CM0',0
	.word	145114
	.byte	4,2,35,12,11
	.byte	'CM1',0
	.word	145182
	.byte	4,2,35,16,11
	.byte	'CN0',0
	.word	145250
	.byte	4,2,35,20,11
	.byte	'STAT',0
	.word	145818
	.byte	4,2,35,24,11
	.byte	'IRQ',0
	.word	151238
	.byte	16,2,35,28,0,19
	.word	151243
	.byte	15
	.byte	'Ifx_GTM_TOM_CH',0,12,149,74,3
	.word	151372
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	19
	.word	151243
	.byte	8,148,8
	.word	326
	.byte	9,147,8,0,22
	.byte	'_Ifx_GTM_TOM',0,12,164,74,25,128,16,11
	.byte	'CH0',0
	.word	151401
	.byte	44,2,35,0,11
	.byte	'reserved_2C',0
	.word	7944
	.byte	4,2,35,44,11
	.byte	'TGC0_GLB_CTRL',0
	.word	146186
	.byte	4,2,35,48,11
	.byte	'TGC0_ACT_TB',0
	.word	145887
	.byte	4,2,35,52,11
	.byte	'TGC0_FUPD_CTRL',0
	.word	146111
	.byte	4,2,35,56,11
	.byte	'TGC0_INT_TRIG',0
	.word	146260
	.byte	4,2,35,60,11
	.byte	'CH1',0
	.word	151406
	.byte	44,2,35,64,11
	.byte	'reserved_6C',0
	.word	7944
	.byte	4,2,35,108,11
	.byte	'TGC0_ENDIS_CTRL',0
	.word	145959
	.byte	4,2,35,112,11
	.byte	'TGC0_ENDIS_STAT',0
	.word	146035
	.byte	4,2,35,116,11
	.byte	'TGC0_OUTEN_CTRL',0
	.word	146334
	.byte	4,2,35,120,11
	.byte	'TGC0_OUTEN_STAT',0
	.word	146410
	.byte	4,2,35,124,11
	.byte	'CH2',0
	.word	151411
	.byte	44,3,35,128,1,11
	.byte	'reserved_AC',0
	.word	7474
	.byte	20,3,35,172,1,11
	.byte	'CH3',0
	.word	151416
	.byte	44,3,35,192,1,11
	.byte	'reserved_EC',0
	.word	7474
	.byte	20,3,35,236,1,11
	.byte	'CH4',0
	.word	151421
	.byte	44,3,35,128,2,11
	.byte	'reserved_12C',0
	.word	7474
	.byte	20,3,35,172,2,11
	.byte	'CH5',0
	.word	151426
	.byte	44,3,35,192,2,11
	.byte	'reserved_16C',0
	.word	7474
	.byte	20,3,35,236,2,11
	.byte	'CH6',0
	.word	151431
	.byte	44,3,35,128,3,11
	.byte	'reserved_1AC',0
	.word	7474
	.byte	20,3,35,172,3,11
	.byte	'CH7',0
	.word	151436
	.byte	44,3,35,192,3,11
	.byte	'reserved_1EC',0
	.word	7474
	.byte	20,3,35,236,3,11
	.byte	'CH8',0
	.word	151441
	.byte	44,3,35,128,4,11
	.byte	'reserved_22C',0
	.word	7944
	.byte	4,3,35,172,4,11
	.byte	'TGC1_GLB_CTRL',0
	.word	146186
	.byte	4,3,35,176,4,11
	.byte	'TGC1_ACT_TB',0
	.word	145887
	.byte	4,3,35,180,4,11
	.byte	'TGC1_FUPD_CTRL',0
	.word	146111
	.byte	4,3,35,184,4,11
	.byte	'TGC1_INT_TRIG',0
	.word	146260
	.byte	4,3,35,188,4,11
	.byte	'CH9',0
	.word	151446
	.byte	44,3,35,192,4,11
	.byte	'reserved_26C',0
	.word	7944
	.byte	4,3,35,236,4,11
	.byte	'TGC1_ENDIS_CTRL',0
	.word	145959
	.byte	4,3,35,240,4,11
	.byte	'TGC1_ENDIS_STAT',0
	.word	146035
	.byte	4,3,35,244,4,11
	.byte	'TGC1_OUTEN_CTRL',0
	.word	146334
	.byte	4,3,35,248,4,11
	.byte	'TGC1_OUTEN_STAT',0
	.word	146410
	.byte	4,3,35,252,4,11
	.byte	'CH10',0
	.word	151451
	.byte	44,3,35,128,5,11
	.byte	'reserved_2AC',0
	.word	7474
	.byte	20,3,35,172,5,11
	.byte	'CH11',0
	.word	151456
	.byte	44,3,35,192,5,11
	.byte	'reserved_2EC',0
	.word	7474
	.byte	20,3,35,236,5,11
	.byte	'CH12',0
	.word	151461
	.byte	44,3,35,128,6,11
	.byte	'reserved_32C',0
	.word	7474
	.byte	20,3,35,172,6,11
	.byte	'CH13',0
	.word	151466
	.byte	44,3,35,192,6,11
	.byte	'reserved_36C',0
	.word	7474
	.byte	20,3,35,236,6,11
	.byte	'CH14',0
	.word	151471
	.byte	44,3,35,128,7,11
	.byte	'reserved_3AC',0
	.word	7474
	.byte	20,3,35,172,7,11
	.byte	'CH15',0
	.word	151476
	.byte	44,3,35,192,7,11
	.byte	'reserved_3EC',0
	.word	151481
	.byte	148,8,3,35,236,7,0,19
	.word	151492
	.byte	15
	.byte	'Ifx_GTM_TOM',0,12,214,74,3
	.word	152494
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A_RD_CH',0,12,229,74,25,4,11
	.byte	'ARU_RD_FIFO',0
	.word	140467
	.byte	4,2,35,0,0,19
	.word	152520
	.byte	15
	.byte	'Ifx_GTM_PSM_F2A_RD_CH',0,12,232,74,3
	.word	152571
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A_STR_CH',0,12,247,74,25,4,11
	.byte	'STR_CFG',0
	.word	140550
	.byte	4,2,35,0,0,19
	.word	152607
	.byte	15
	.byte	'Ifx_GTM_PSM_F2A_STR_CH',0,12,250,74,3
	.word	152655
	.byte	8,32
	.word	152520
	.byte	9,7,0,19
	.word	152692
	.byte	8,32
	.word	152607
	.byte	9,7,0,19
	.word	152706
	.byte	22
	.byte	'_Ifx_GTM_PSM_F2A',0,12,137,75,25,72,11
	.byte	'RD_CH',0
	.word	152701
	.byte	32,2,35,0,11
	.byte	'STR_CH',0
	.word	152715
	.byte	32,2,35,32,11
	.byte	'ENABLE',0
	.word	140321
	.byte	4,2,35,64,11
	.byte	'F2A_CTRL',0
	.word	140393
	.byte	4,2,35,68,0,19
	.word	152720
	.byte	15
	.byte	'Ifx_GTM_PSM_F2A',0,12,143,75,3
	.word	152809
	.byte	22
	.byte	'_Ifx_GTM_PSM_AFD_CH',0,12,158,75,25,16,11
	.byte	'BUF_ACC',0
	.word	140245
	.byte	4,2,35,0,11
	.byte	'reserved_4',0
	.word	148043
	.byte	12,2,35,4,0,19
	.word	152839
	.byte	15
	.byte	'Ifx_GTM_PSM_AFD_CH',0,12,162,75,3
	.word	152903
	.byte	8,128,1
	.word	152839
	.byte	9,7,0,19
	.word	152936
	.byte	22
	.byte	'_Ifx_GTM_PSM_AFD',0,12,177,75,25,128,1,11
	.byte	'CH',0
	.word	152946
	.byte	128,1,2,35,0,0,19
	.word	152951
	.byte	15
	.byte	'Ifx_GTM_PSM_AFD',0,12,180,75,3
	.word	152989
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH_IRQ',0,12,195,75,25,16,11
	.byte	'NOTIFY',0
	.word	141174
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	140939
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	141015
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	141096
	.byte	4,2,35,12,0,19
	.word	153019
	.byte	15
	.byte	'Ifx_GTM_PSM_FIFO_CH_IRQ',0,12,201,75,3
	.word	153110
	.byte	19
	.word	153019
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO_CH',0,12,216,75,25,64,11
	.byte	'CTRL',0
	.word	140630
	.byte	4,2,35,0,11
	.byte	'END_ADDR',0
	.word	140781
	.byte	4,2,35,4,11
	.byte	'START_ADDR',0
	.word	141408
	.byte	4,2,35,8,11
	.byte	'UPPER_WM',0
	.word	141564
	.byte	4,2,35,12,11
	.byte	'LOWER_WM',0
	.word	141254
	.byte	4,2,35,16,11
	.byte	'STATUS',0
	.word	141488
	.byte	4,2,35,20,11
	.byte	'FILL_LEVEL',0
	.word	140859
	.byte	4,2,35,24,11
	.byte	'WR_PTR',0
	.word	141642
	.byte	4,2,35,28,11
	.byte	'RD_PTR',0
	.word	141332
	.byte	4,2,35,32,11
	.byte	'IRQ',0
	.word	153148
	.byte	16,2,35,36,11
	.byte	'EIRQ_EN',0
	.word	140704
	.byte	4,2,35,52,11
	.byte	'reserved_38',0
	.word	7783
	.byte	8,2,35,56,0,19
	.word	153153
	.byte	15
	.byte	'Ifx_GTM_PSM_FIFO_CH',0,12,230,75,3
	.word	153388
	.byte	8,128,4
	.word	153153
	.byte	9,7,0,19
	.word	153422
	.byte	22
	.byte	'_Ifx_GTM_PSM_FIFO',0,12,245,75,25,128,4,11
	.byte	'CH',0
	.word	153432
	.byte	128,4,2,35,0,0,19
	.word	153437
	.byte	15
	.byte	'Ifx_GTM_PSM_FIFO',0,12,248,75,3
	.word	153476
	.byte	19
	.word	152720
	.byte	8,56
	.word	326
	.byte	9,55,0,19
	.word	152951
	.byte	8,128,6
	.word	326
	.byte	9,255,5,0,19
	.word	153437
	.byte	8,128,116
	.word	326
	.byte	9,255,115,0,22
	.byte	'_Ifx_GTM_PSM',0,12,135,76,25,128,128,1,11
	.byte	'F2A',0
	.word	153507
	.byte	72,2,35,0,11
	.byte	'reserved_48',0
	.word	153512
	.byte	56,2,35,72,11
	.byte	'AFD',0
	.word	153521
	.byte	128,1,3,35,128,1,11
	.byte	'reserved_100',0
	.word	153526
	.byte	128,6,3,35,128,2,11
	.byte	'FIFO',0
	.word	153537
	.byte	128,4,3,35,128,8,11
	.byte	'reserved_600',0
	.word	153542
	.byte	128,116,3,35,128,12,0,19
	.word	153553
	.byte	15
	.byte	'Ifx_GTM_PSM',0,12,143,76,3
	.word	153688
	.byte	22
	.byte	'_Ifx_GTM_DPLL_IRQ',0,12,159,76,25,16,11
	.byte	'NOTIFY',0
	.word	129852
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	129638
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	129707
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	129781
	.byte	4,2,35,12,0,19
	.word	153714
	.byte	15
	.byte	'Ifx_GTM_DPLL_IRQ',0,12,165,76,3
	.word	153798
	.byte	19
	.word	153714
	.byte	8,44
	.word	326
	.byte	9,43,0,8,128,1
	.word	129124
	.byte	9,31,0,8,96
	.word	326
	.byte	9,95,0,8,128,1
	.word	131312
	.byte	9,31,0,8,128,1
	.word	128295
	.byte	9,31,0,8,128,1
	.word	130335
	.byte	9,31,0,8,128,1
	.word	128361
	.byte	9,31,0,8,128,1
	.word	131246
	.byte	9,31,0,8,128,2
	.word	132279
	.byte	9,63,0,8,128,2
	.word	133652
	.byte	9,63,0,8,128,2
	.word	125931
	.byte	9,63,0,8,128,2
	.word	128427
	.byte	9,63,0,8,128,8
	.word	326
	.byte	9,255,7,0,8,128,1
	.word	133585
	.byte	9,31,0,8,128,1
	.word	131378
	.byte	9,31,0,8,32
	.word	125501
	.byte	9,7,0,8,132,97
	.word	326
	.byte	9,131,97,0,8,128,128,1
	.word	3741
	.byte	9,255,31,0,22
	.byte	'_Ifx_GTM_DPLL',0,12,180,76,25,128,128,2,11
	.byte	'CTRL_0',0
	.word	127408
	.byte	4,2,35,0,11
	.byte	'CTRL_1',0
	.word	127643
	.byte	4,2,35,4,11
	.byte	'CTRL_2',0
	.word	127948
	.byte	4,2,35,8,11
	.byte	'CTRL_3',0
	.word	128017
	.byte	4,2,35,12,11
	.byte	'CTRL_4',0
	.word	128086
	.byte	4,2,35,16,11
	.byte	'CTRL_5',0
	.word	128155
	.byte	4,2,35,20,11
	.byte	'ACT_STA',0
	.word	125567
	.byte	4,2,35,24,11
	.byte	'OSW',0
	.word	131180
	.byte	4,2,35,28,11
	.byte	'AOSV_2',0
	.word	125999
	.byte	4,2,35,32,11
	.byte	'APT',0
	.word	126494
	.byte	4,2,35,36,11
	.byte	'APS',0
	.word	126068
	.byte	4,2,35,40,11
	.byte	'APT_2C',0
	.word	126560
	.byte	4,2,35,44,11
	.byte	'APS_1C3',0
	.word	126134
	.byte	4,2,35,48,11
	.byte	'NUTC',0
	.word	131113
	.byte	4,2,35,52,11
	.byte	'NUSC',0
	.word	130902
	.byte	4,2,35,56,11
	.byte	'NTI_CNT',0
	.word	130832
	.byte	4,2,35,60,11
	.byte	'IRQ',0
	.word	153829
	.byte	16,2,35,64,11
	.byte	'EIRQ_EN',0
	.word	128918
	.byte	4,2,35,80,11
	.byte	'reserved_54',0
	.word	4841
	.byte	92,2,35,84,11
	.byte	'INC_CNT1',0
	.word	129344
	.byte	4,3,35,176,1,11
	.byte	'INC_CNT2',0
	.word	129491
	.byte	4,3,35,180,1,11
	.byte	'APT_SYNC',0
	.word	126629
	.byte	4,3,35,184,1,11
	.byte	'APS_SYNC',0
	.word	126348
	.byte	4,3,35,188,1,11
	.byte	'TBU_TS0_T',0
	.word	132974
	.byte	4,3,35,192,1,11
	.byte	'TBU_TS0_S',0
	.word	132902
	.byte	4,3,35,196,1,11
	.byte	'ADD_IN_LD1',0
	.word	125785
	.byte	4,3,35,200,1,11
	.byte	'ADD_IN_LD2',0
	.word	125858
	.byte	4,3,35,204,1,11
	.byte	'reserved_D0',0
	.word	153834
	.byte	44,3,35,208,1,11
	.byte	'STATUS',0
	.word	132691
	.byte	4,3,35,252,1,11
	.byte	'ID_PMTR',0
	.word	153843
	.byte	128,1,3,35,128,2,11
	.byte	'reserved_180',0
	.word	153853
	.byte	96,3,35,128,3,11
	.byte	'CTRL_0_SHADOW_TRIGGER',0
	.word	127559
	.byte	4,3,35,224,3,11
	.byte	'CTRL_0_SHADOW_STATE',0
	.word	127477
	.byte	4,3,35,228,3,11
	.byte	'CTRL_1_SHADOW_TRIGGER',0
	.word	127864
	.byte	4,3,35,232,3,11
	.byte	'CTRL_1_SHADOW_STATE',0
	.word	127782
	.byte	4,3,35,236,3,11
	.byte	'reserved_1F0',0
	.word	148043
	.byte	12,3,35,240,3,11
	.byte	'RAM_INI',0
	.word	131921
	.byte	4,3,35,252,3,11
	.byte	'PSA',0
	.word	153862
	.byte	128,1,3,35,128,4,11
	.byte	'DLA',0
	.word	153872
	.byte	128,1,3,35,128,5,11
	.byte	'NA',0
	.word	153882
	.byte	128,1,3,35,128,6,11
	.byte	'DTA',0
	.word	153892
	.byte	128,1,3,35,128,7,11
	.byte	'TS_T',0
	.word	133858
	.byte	4,3,35,128,8,11
	.byte	'TS_T_OLD',0
	.word	133925
	.byte	4,3,35,132,8,11
	.byte	'FTV_T',0
	.word	129056
	.byte	4,3,35,136,8,11
	.byte	'reserved_40C',0
	.word	7944
	.byte	4,3,35,140,8,11
	.byte	'TS_S',0
	.word	133720
	.byte	4,3,35,144,8,11
	.byte	'TS_S_OLD',0
	.word	133787
	.byte	4,3,35,148,8,11
	.byte	'FTV_S',0
	.word	128988
	.byte	4,3,35,152,8,11
	.byte	'reserved_41C',0
	.word	7944
	.byte	4,3,35,156,8,11
	.byte	'THMI',0
	.word	133113
	.byte	4,3,35,160,8,11
	.byte	'THMA',0
	.word	133046
	.byte	4,3,35,164,8,11
	.byte	'THVAL',0
	.word	133180
	.byte	4,3,35,168,8,11
	.byte	'reserved_42C',0
	.word	7944
	.byte	4,3,35,172,8,11
	.byte	'TOV',0
	.word	133451
	.byte	4,3,35,176,8,11
	.byte	'TOV_S',0
	.word	133517
	.byte	4,3,35,180,8,11
	.byte	'ADD_IN_CAL1',0
	.word	125637
	.byte	4,3,35,184,8,11
	.byte	'ADD_IN_CAL2',0
	.word	125711
	.byte	4,3,35,188,8,11
	.byte	'MPVAL1',0
	.word	130197
	.byte	4,3,35,192,8,11
	.byte	'MPVAL2',0
	.word	130266
	.byte	4,3,35,196,8,11
	.byte	'NMB_T_TAR',0
	.word	130684
	.byte	4,3,35,200,8,11
	.byte	'NMB_T_TAR_OLD',0
	.word	130756
	.byte	4,3,35,204,8,11
	.byte	'NMB_S_TAR',0
	.word	130468
	.byte	4,3,35,208,8,11
	.byte	'NMB_S_TAR_OLD',0
	.word	130540
	.byte	4,3,35,212,8,11
	.byte	'reserved_458',0
	.word	7783
	.byte	8,3,35,216,8,11
	.byte	'RCDT_TX',0
	.word	132135
	.byte	4,3,35,224,8,11
	.byte	'RCDT_SX',0
	.word	131991
	.byte	4,3,35,228,8,11
	.byte	'RCDT_TX_NOM',0
	.word	132205
	.byte	4,3,35,232,8,11
	.byte	'RCDT_SX_NOM',0
	.word	132061
	.byte	4,3,35,236,8,11
	.byte	'RDT_T_ACT',0
	.word	132419
	.byte	4,3,35,240,8,11
	.byte	'RDT_S_ACT',0
	.word	132347
	.byte	4,3,35,244,8,11
	.byte	'DT_T_ACT',0
	.word	128638
	.byte	4,3,35,248,8,11
	.byte	'DT_S_ACT',0
	.word	128494
	.byte	4,3,35,252,8,11
	.byte	'EDT_T',0
	.word	128850
	.byte	4,3,35,128,9,11
	.byte	'MEDT_T',0
	.word	129994
	.byte	4,3,35,132,9,11
	.byte	'EDT_S',0
	.word	128782
	.byte	4,3,35,136,9,11
	.byte	'MEDT_S',0
	.word	129925
	.byte	4,3,35,140,9,11
	.byte	'CDT_TX',0
	.word	126842
	.byte	4,3,35,144,9,11
	.byte	'CDT_SX',0
	.word	126700
	.byte	4,3,35,148,9,11
	.byte	'CDT_TX_NOM',0
	.word	126911
	.byte	4,3,35,152,9,11
	.byte	'CDT_SX_NOM',0
	.word	126769
	.byte	4,3,35,156,9,11
	.byte	'TLR',0
	.word	133385
	.byte	4,3,35,160,9,11
	.byte	'SLR',0
	.word	132559
	.byte	4,3,35,164,9,11
	.byte	'reserved_4A8',0
	.word	149175
	.byte	88,3,35,168,9,11
	.byte	'PDT',0
	.word	153902
	.byte	128,1,3,35,128,10,11
	.byte	'reserved_580',0
	.word	14501
	.byte	64,3,35,128,11,11
	.byte	'MLS1',0
	.word	130063
	.byte	4,3,35,192,11,11
	.byte	'MLS2',0
	.word	130130
	.byte	4,3,35,196,11,11
	.byte	'CNT_NUM_1',0
	.word	126984
	.byte	4,3,35,200,11,11
	.byte	'CNT_NUM_2',0
	.word	127056
	.byte	4,3,35,204,11,11
	.byte	'PVT',0
	.word	131855
	.byte	4,3,35,208,11,11
	.byte	'reserved_5D4',0
	.word	148043
	.byte	12,3,35,212,11,11
	.byte	'PSTC',0
	.word	131650
	.byte	4,3,35,224,11,11
	.byte	'PSSC',0
	.word	131445
	.byte	4,3,35,228,11,11
	.byte	'PSTM',0
	.word	131717
	.byte	4,3,35,232,11,11
	.byte	'PSTM_OLD',0
	.word	131784
	.byte	4,3,35,236,11,11
	.byte	'PSSM',0
	.word	131512
	.byte	4,3,35,240,11,11
	.byte	'PSSM_OLD',0
	.word	131579
	.byte	4,3,35,244,11,11
	.byte	'NMB_T',0
	.word	130616
	.byte	4,3,35,248,11,11
	.byte	'NMB_S',0
	.word	130400
	.byte	4,3,35,252,11,11
	.byte	'RDT_S',0
	.word	153912
	.byte	128,2,3,35,128,12,11
	.byte	'TSF_S',0
	.word	153922
	.byte	128,2,3,35,128,14,11
	.byte	'ADT_S',0
	.word	153932
	.byte	128,2,3,35,128,16,11
	.byte	'DT_S',0
	.word	153942
	.byte	128,2,3,35,128,18,11
	.byte	'reserved_A00',0
	.word	153952
	.byte	128,8,3,35,128,20,11
	.byte	'TSAC',0
	.word	153963
	.byte	128,1,3,35,128,28,11
	.byte	'PSAC',0
	.word	153973
	.byte	128,1,3,35,128,29,11
	.byte	'ACB',0
	.word	153983
	.byte	32,3,35,128,30,11
	.byte	'CTRL_11',0
	.word	127712
	.byte	4,3,35,160,30,11
	.byte	'THVAL2',0
	.word	133248
	.byte	4,3,35,164,30,11
	.byte	'TIDEL',0
	.word	133317
	.byte	4,3,35,168,30,11
	.byte	'SIDEL',0
	.word	132491
	.byte	4,3,35,172,30,11
	.byte	'APS_SYNC_EXT',0
	.word	126419
	.byte	4,3,35,176,30,11
	.byte	'CTRL_EXT',0
	.word	128224
	.byte	4,3,35,180,30,11
	.byte	'APS_EXT',0
	.word	126278
	.byte	4,3,35,184,30,11
	.byte	'APS_1C3_EXT',0
	.word	126204
	.byte	4,3,35,188,30,11
	.byte	'STA',0
	.word	132625
	.byte	4,3,35,192,30,11
	.byte	'INCF1_OFFSET',0
	.word	129194
	.byte	4,3,35,196,30,11
	.byte	'INCF2_OFFSET',0
	.word	129269
	.byte	4,3,35,200,30,11
	.byte	'DT_T_START',0
	.word	128709
	.byte	4,3,35,204,30,11
	.byte	'DT_S_START',0
	.word	128565
	.byte	4,3,35,208,30,11
	.byte	'STA_MASK',0
	.word	132831
	.byte	4,3,35,212,30,11
	.byte	'STA_FLAG',0
	.word	132760
	.byte	4,3,35,216,30,11
	.byte	'INC_CNT1_MASK',0
	.word	129415
	.byte	4,3,35,220,30,11
	.byte	'INC_CNT2_MASK',0
	.word	129562
	.byte	4,3,35,224,30,11
	.byte	'NUSC_EXT1',0
	.word	130969
	.byte	4,3,35,228,30,11
	.byte	'NUSC_EXT2',0
	.word	131041
	.byte	4,3,35,232,30,11
	.byte	'CTN_MIN',0
	.word	127338
	.byte	4,3,35,236,30,11
	.byte	'CTN_MAX',0
	.word	127268
	.byte	4,3,35,240,30,11
	.byte	'CSN_MIN',0
	.word	127198
	.byte	4,3,35,244,30,11
	.byte	'CSN_MAX',0
	.word	127128
	.byte	4,3,35,248,30,11
	.byte	'reserved_F7C',0
	.word	153992
	.byte	132,97,3,35,252,30,11
	.byte	'RR2',0
	.word	154003
	.byte	128,128,1,4,35,128,128,1,0,19
	.word	154015
	.byte	15
	.byte	'Ifx_GTM_DPLL',0,12,186,77,3
	.word	156485
	.byte	22
	.byte	'_Ifx_GTM_OCDS',0,12,220,77,25,36,11
	.byte	'OTBU0T',0
	.word	139498
	.byte	4,2,35,0,11
	.byte	'OTBU1T',0
	.word	139567
	.byte	4,2,35,4,11
	.byte	'OTBU2T',0
	.word	139636
	.byte	4,2,35,8,11
	.byte	'OTBU3T',0
	.word	139705
	.byte	4,2,35,12,11
	.byte	'OTSS',0
	.word	139910
	.byte	4,2,35,16,11
	.byte	'OTSC0',0
	.word	139774
	.byte	4,2,35,20,11
	.byte	'OTSC1',0
	.word	139842
	.byte	4,2,35,24,11
	.byte	'ODA',0
	.word	139432
	.byte	4,2,35,28,11
	.byte	'OCS',0
	.word	139366
	.byte	4,2,35,32,0,19
	.word	156512
	.byte	15
	.byte	'Ifx_GTM_OCDS',0,12,231,77,3
	.word	156667
	.byte	22
	.byte	'_Ifx_GTM_DSADC',0,12,246,77,25,8,11
	.byte	'OUTSEL0',0
	.word	134064
	.byte	4,2,35,0,11
	.byte	'OUTSEL1',0
	.word	134135
	.byte	4,2,35,4,0,19
	.word	156694
	.byte	15
	.byte	'Ifx_GTM_DSADC',0,12,250,77,3
	.word	156750
	.byte	22
	.byte	'_Ifx_GTM_ADCTRIG',0,12,137,78,25,8,11
	.byte	'OUT0',0
	.word	118056
	.byte	4,2,35,0,11
	.byte	'OUT1',0
	.word	118126
	.byte	4,2,35,4,0,19
	.word	156778
	.byte	15
	.byte	'Ifx_GTM_ADCTRIG',0,12,141,78,3
	.word	156830
	.byte	22
	.byte	'_Ifx_GTM_MSC_SET',0,12,156,78,25,16,11
	.byte	'CON0',0
	.word	139086
	.byte	4,2,35,0,11
	.byte	'CON1',0
	.word	139156
	.byte	4,2,35,4,11
	.byte	'CON2',0
	.word	139226
	.byte	4,2,35,8,11
	.byte	'CON3',0
	.word	139296
	.byte	4,2,35,12,0,19
	.word	156860
	.byte	15
	.byte	'Ifx_GTM_MSC_SET',0,12,162,78,3
	.word	156940
	.byte	22
	.byte	'_Ifx_GTM_MSC_MSCQ',0,12,177,78,25,12,11
	.byte	'INLCON',0
	.word	138937
	.byte	4,2,35,0,11
	.byte	'INHCON',0
	.word	138864
	.byte	4,2,35,4,11
	.byte	'INLEXTCON',0
	.word	139010
	.byte	4,2,35,8,0,19
	.word	156970
	.byte	15
	.byte	'Ifx_GTM_MSC_MSCQ',0,12,182,78,3
	.word	157046
	.byte	8,144,1
	.word	156860
	.byte	9,8,0,19
	.word	157077
	.byte	8,48
	.word	156970
	.byte	9,3,0,19
	.word	157092
	.byte	22
	.byte	'_Ifx_GTM_MSC',0,12,197,78,25,192,1,11
	.byte	'SET',0
	.word	157087
	.byte	144,1,2,35,0,11
	.byte	'MSCQ',0
	.word	157101
	.byte	48,3,35,144,1,0,19
	.word	157106
	.byte	15
	.byte	'Ifx_GTM_MSC',0,12,201,78,3
	.word	157156
	.byte	22
	.byte	'_Ifx_GTM_CCM_ARP',0,12,216,78,25,8,11
	.byte	'CTRL',0
	.word	122769
	.byte	4,2,35,0,11
	.byte	'PROT',0
	.word	122839
	.byte	4,2,35,4,0,19
	.word	157182
	.byte	15
	.byte	'Ifx_GTM_CCM_ARP',0,12,220,78,3
	.word	157234
	.byte	8,80
	.word	157182
	.byte	9,9,0,19
	.word	157264
	.byte	8,136,3
	.word	326
	.byte	9,135,3,0,22
	.byte	'_Ifx_GTM_CCM',0,12,235,78,25,128,4,11
	.byte	'ARP',0
	.word	157273
	.byte	80,2,35,0,11
	.byte	'reserved_50',0
	.word	157278
	.byte	136,3,2,35,80,11
	.byte	'AEIM_STA',0
	.word	122699
	.byte	4,3,35,216,3,11
	.byte	'HW_CONF',0
	.word	123264
	.byte	4,3,35,220,3,11
	.byte	'TIM_AUX_IN_SRC',0
	.word	123399
	.byte	4,3,35,224,3,11
	.byte	'EXT_CAP_EN',0
	.word	123192
	.byte	4,3,35,228,3,11
	.byte	'TOM_OUT',0
	.word	123475
	.byte	4,3,35,232,3,11
	.byte	'ATOM_OUT',0
	.word	122909
	.byte	4,3,35,236,3,11
	.byte	'CMU_CLK_CFG',0
	.word	123044
	.byte	4,3,35,240,3,11
	.byte	'CMU_FXCLK_CFG',0
	.word	123117
	.byte	4,3,35,244,3,11
	.byte	'CFG',0
	.word	122979
	.byte	4,3,35,248,3,11
	.byte	'PROT',0
	.word	123333
	.byte	4,3,35,252,3,0,19
	.word	157289
	.byte	15
	.byte	'Ifx_GTM_CCM',0,12,249,78,3
	.word	157540
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM_CH',0,12,136,79,25,4,11
	.byte	'DTV',0
	.word	123847
	.byte	4,2,35,0,0,19
	.word	157566
	.byte	15
	.byte	'Ifx_GTM_CDTM_DTM_CH',0,12,139,79,3
	.word	157607
	.byte	8,16
	.word	157566
	.byte	9,3,0,19
	.word	157641
	.byte	22
	.byte	'_Ifx_GTM_CDTM_DTM',0,12,154,79,25,64,11
	.byte	'CTRL',0
	.word	123992
	.byte	4,2,35,0,11
	.byte	'CH_CTRL1',0
	.word	123544
	.byte	4,2,35,4,11
	.byte	'CH_CTRL2',0
	.word	123619
	.byte	4,2,35,8,11
	.byte	'CH_CTRL2_SR',0
	.word	123694
	.byte	4,2,35,12,11
	.byte	'PS_CTRL',0
	.word	124063
	.byte	4,2,35,16,11
	.byte	'CH',0
	.word	157650
	.byte	16,2,35,20,11
	.byte	'CH_SR',0
	.word	123920
	.byte	4,2,35,36,11
	.byte	'CH_CTRL3',0
	.word	123772
	.byte	4,2,35,40,11
	.byte	'reserved_2C',0
	.word	7474
	.byte	20,2,35,44,0,19
	.word	157655
	.byte	15
	.byte	'Ifx_GTM_CDTM_DTM',0,12,165,79,3
	.word	157834
	.byte	8,128,3
	.word	157655
	.byte	9,5,0,19
	.word	157865
	.byte	8,128,5
	.word	326
	.byte	9,255,4,0,22
	.byte	'_Ifx_GTM_CDTM',0,12,180,79,25,128,8,11
	.byte	'DTM',0
	.word	157875
	.byte	128,3,2,35,0,11
	.byte	'reserved_180',0
	.word	157880
	.byte	128,5,3,35,128,3,0,19
	.word	157891
	.byte	15
	.byte	'Ifx_GTM_CDTM',0,12,184,79,3
	.word	157951
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH_IRQ',0,12,199,79,25,16,11
	.byte	'NOTIFY',0
	.word	121021
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	120798
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	120870
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	120947
	.byte	4,2,35,12,0,19
	.word	157978
	.byte	15
	.byte	'Ifx_GTM_ATOM_CH_IRQ',0,12,205,79,3
	.word	158065
	.byte	24,12,223,79,8,4,11
	.byte	'CTRL',0
	.word	120728
	.byte	4,2,35,0,11
	.byte	'SOMB',0
	.word	121169
	.byte	4,2,35,0,11
	.byte	'SOMC',0
	.word	121239
	.byte	4,2,35,0,11
	.byte	'SOMI',0
	.word	121309
	.byte	4,2,35,0,11
	.byte	'SOMP',0
	.word	121379
	.byte	4,2,35,0,11
	.byte	'SOMS',0
	.word	121449
	.byte	4,2,35,0,0,19
	.word	157978
	.byte	22
	.byte	'_Ifx_GTM_ATOM_CH',0,12,220,79,25,48,11
	.byte	'RDADDR',0
	.word	121097
	.byte	4,2,35,0,32
	.word	158099
	.byte	4,2,35,4,11
	.byte	'SR0',0
	.word	121519
	.byte	4,2,35,8,11
	.byte	'SR1',0
	.word	121588
	.byte	4,2,35,12,11
	.byte	'CM0',0
	.word	120521
	.byte	4,2,35,16,11
	.byte	'CM1',0
	.word	120590
	.byte	4,2,35,20,11
	.byte	'CN0',0
	.word	120659
	.byte	4,2,35,24,11
	.byte	'STAT',0
	.word	121657
	.byte	4,2,35,28,11
	.byte	'IRQ',0
	.word	158190
	.byte	16,2,35,32,0,19
	.word	158195
	.byte	15
	.byte	'Ifx_GTM_ATOM_CH',0,12,239,79,3
	.word	158336
	.byte	22
	.byte	'_Ifx_GTM_ATOM_AGC',0,12,254,79,25,64,11
	.byte	'GLB_CTRL',0
	.word	120217
	.byte	4,2,35,0,11
	.byte	'ENDIS_CTRL',0
	.word	119987
	.byte	4,2,35,4,11
	.byte	'ENDIS_STAT',0
	.word	120064
	.byte	4,2,35,8,11
	.byte	'ACT_TB',0
	.word	119914
	.byte	4,2,35,12,11
	.byte	'OUTEN_CTRL',0
	.word	120367
	.byte	4,2,35,16,11
	.byte	'OUTEN_STAT',0
	.word	120444
	.byte	4,2,35,20,11
	.byte	'FUPD_CTRL',0
	.word	120141
	.byte	4,2,35,24,11
	.byte	'INT_TRIG',0
	.word	120292
	.byte	4,2,35,28,11
	.byte	'reserved_20',0
	.word	10378
	.byte	32,2,35,32,0,19
	.word	158366
	.byte	15
	.byte	'Ifx_GTM_ATOM_AGC',0,12,137,80,3
	.word	158563
	.byte	19
	.word	158195
	.byte	19
	.word	158366
	.byte	19
	.word	158195
	.byte	8,80
	.word	326
	.byte	9,79,0,19
	.word	158195
	.byte	19
	.word	158195
	.byte	19
	.word	158195
	.byte	19
	.word	158195
	.byte	19
	.word	158195
	.byte	19
	.word	158195
	.byte	8,208,8
	.word	326
	.byte	9,207,8,0,22
	.byte	'_Ifx_GTM_ATOM',0,12,152,80,25,128,16,11
	.byte	'CH0',0
	.word	158594
	.byte	48,2,35,0,11
	.byte	'reserved_30',0
	.word	4481
	.byte	16,2,35,48,11
	.byte	'AGC',0
	.word	158599
	.byte	64,2,35,64,11
	.byte	'CH1',0
	.word	158604
	.byte	48,3,35,128,1,11
	.byte	'reserved_B0',0
	.word	158609
	.byte	80,3,35,176,1,11
	.byte	'CH2',0
	.word	158618
	.byte	48,3,35,128,2,11
	.byte	'reserved_130',0
	.word	158609
	.byte	80,3,35,176,2,11
	.byte	'CH3',0
	.word	158623
	.byte	48,3,35,128,3,11
	.byte	'reserved_1B0',0
	.word	158609
	.byte	80,3,35,176,3,11
	.byte	'CH4',0
	.word	158628
	.byte	48,3,35,128,4,11
	.byte	'reserved_230',0
	.word	158609
	.byte	80,3,35,176,4,11
	.byte	'CH5',0
	.word	158633
	.byte	48,3,35,128,5,11
	.byte	'reserved_2B0',0
	.word	158609
	.byte	80,3,35,176,5,11
	.byte	'CH6',0
	.word	158638
	.byte	48,3,35,128,6,11
	.byte	'reserved_330',0
	.word	158609
	.byte	80,3,35,176,6,11
	.byte	'CH7',0
	.word	158643
	.byte	48,3,35,128,7,11
	.byte	'reserved_3B0',0
	.word	158648
	.byte	208,8,3,35,176,7,0,19
	.word	158659
	.byte	15
	.byte	'Ifx_GTM_ATOM',0,12,171,80,3
	.word	158987
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH_IRQ',0,12,186,80,25,16,11
	.byte	'NOTIFY',0
	.word	137893
	.byte	4,2,35,0,11
	.byte	'EN',0
	.word	137673
	.byte	4,2,35,4,11
	.byte	'FORCINT',0
	.word	137744
	.byte	4,2,35,8,11
	.byte	'MODE',0
	.word	137820
	.byte	4,2,35,12,0,19
	.word	159014
	.byte	15
	.byte	'Ifx_GTM_MCS_CH_IRQ',0,12,192,80,3
	.word	159100
	.byte	8,32
	.word	138103
	.byte	9,7,0,19
	.word	159014
	.byte	22
	.byte	'_Ifx_GTM_MCS_CH',0,12,207,80,25,88,11
	.byte	'R',0
	.word	159133
	.byte	32,2,35,0,11
	.byte	'CTRL',0
	.word	137532
	.byte	4,2,35,32,11
	.byte	'ACB',0
	.word	137395
	.byte	4,2,35,36,11
	.byte	'CTRG',0
	.word	137463
	.byte	4,2,35,40,11
	.byte	'STRG',0
	.word	138169
	.byte	4,2,35,44,11
	.byte	'reserved_30',0
	.word	148043
	.byte	12,2,35,48,11
	.byte	'MHB',0
	.word	137968
	.byte	4,2,35,60,11
	.byte	'PC',0
	.word	138036
	.byte	4,2,35,64,11
	.byte	'IRQ',0
	.word	159142
	.byte	16,2,35,68,11
	.byte	'EIRQ_EN',0
	.word	137601
	.byte	4,2,35,84,0,19
	.word	159147
	.byte	15
	.byte	'Ifx_GTM_MCS_CH',0,12,219,80,3
	.word	159312
	.byte	19
	.word	159147
	.byte	19
	.word	159147
	.byte	8,40
	.word	326
	.byte	9,39,0,19
	.word	159147
	.byte	19
	.word	159147
	.byte	19
	.word	159147
	.byte	19
	.word	159147
	.byte	19
	.word	159147
	.byte	19
	.word	159147
	.byte	8,168,24
	.word	326
	.byte	9,167,24,0,22
	.byte	'_Ifx_GTM_MCS',0,12,234,80,25,128,32,11
	.byte	'CH0',0
	.word	159341
	.byte	88,2,35,0,11
	.byte	'reserved_58',0
	.word	7783
	.byte	8,2,35,88,11
	.byte	'REG_PROT',0
	.word	138439
	.byte	4,2,35,96,11
	.byte	'CTRL_STAT',0
	.word	138238
	.byte	4,2,35,100,11
	.byte	'RESET',0
	.word	138509
	.byte	4,2,35,104,11
	.byte	'CAT',0
	.word	137330
	.byte	4,2,35,108,11
	.byte	'CWT',0
	.word	138309
	.byte	4,2,35,112,11
	.byte	'reserved_74',0
	.word	7783
	.byte	8,2,35,116,11
	.byte	'ERR',0
	.word	138374
	.byte	4,2,35,124,11
	.byte	'CH1',0
	.word	159346
	.byte	88,3,35,128,1,11
	.byte	'reserved_D8',0
	.word	159351
	.byte	40,3,35,216,1,11
	.byte	'CH2',0
	.word	159360
	.byte	88,3,35,128,2,11
	.byte	'reserved_158',0
	.word	159351
	.byte	40,3,35,216,2,11
	.byte	'CH3',0
	.word	159365
	.byte	88,3,35,128,3,11
	.byte	'reserved_1D8',0
	.word	159351
	.byte	40,3,35,216,3,11
	.byte	'CH4',0
	.word	159370
	.byte	88,3,35,128,4,11
	.byte	'reserved_258',0
	.word	159351
	.byte	40,3,35,216,4,11
	.byte	'CH5',0
	.word	159375
	.byte	88,3,35,128,5,11
	.byte	'reserved_2D8',0
	.word	159351
	.byte	40,3,35,216,5,11
	.byte	'CH6',0
	.word	159380
	.byte	88,3,35,128,6,11
	.byte	'reserved_358',0
	.word	159351
	.byte	40,3,35,216,6,11
	.byte	'CH7',0
	.word	159385
	.byte	88,3,35,128,7,11
	.byte	'reserved_3D8',0
	.word	159390
	.byte	168,24,3,35,216,7,0,19
	.word	159401
	.byte	15
	.byte	'Ifx_GTM_MCS',0,12,131,81,3
	.word	159827
	.byte	15
	.byte	'Mcu_17_Gtm_TimerOutType',0,3,161,1,16
	.word	157
	.byte	15
	.byte	'Mcu_17_Gtm_TimerChIdentifierType',0,3,223,1,16
	.word	157
	.byte	15
	.byte	'Mcu_17_Gtm_TomAtomChConfigType',0,3,251,1,3
	.word	2457
	.byte	19
	.word	150433
	.byte	8,64
	.word	326
	.byte	9,63,0,10,3,128,2,18,128,1,11
	.byte	'CH',0
	.word	159968
	.byte	64,2,35,0,11
	.byte	'Reserved1',0
	.word	159973
	.byte	64,2,35,64,0,19
	.word	159982
	.byte	15
	.byte	'Mcu_17_Gtm_TimCh',0,3,132,2,3
	.word	160021
	.byte	8,48
	.word	326
	.byte	9,47,0,8,176,3
	.word	326
	.byte	9,175,3,0,10,3,144,2,18,128,4,11
	.byte	'TGC_GLB_CTRL',0
	.word	146186
	.byte	4,2,35,0,11
	.byte	'TGC_ACT_TB',0
	.word	145887
	.byte	4,2,35,4,11
	.byte	'TGC_FUPD_CTRL',0
	.word	146111
	.byte	4,2,35,8,11
	.byte	'TGC_INT_TRIG',0
	.word	146260
	.byte	4,2,35,12,11
	.byte	'Reserved2',0
	.word	160052
	.byte	48,2,35,16,11
	.byte	'TGC_ENDIS_CTRL',0
	.word	145959
	.byte	4,2,35,64,11
	.byte	'TGC_ENDIS_STAT',0
	.word	146035
	.byte	4,2,35,68,11
	.byte	'TGC_OUTEN_CTRL',0
	.word	146334
	.byte	4,2,35,72,11
	.byte	'TGC_OUTEN_STAT',0
	.word	146410
	.byte	4,2,35,76,11
	.byte	'Reserved3',0
	.word	160061
	.byte	176,3,2,35,80,0,19
	.word	160072
	.byte	15
	.byte	'Mcu_17_Gtm_TomTgc',0,3,165,2,3
	.word	160302
	.byte	19
	.word	151243
	.byte	8,20
	.word	326
	.byte	9,19,0,10,3,177,2,18,64,11
	.byte	'CH',0
	.word	160334
	.byte	44,2,35,0,11
	.byte	'Reserved1',0
	.word	160339
	.byte	20,2,35,44,0,19
	.word	160348
	.byte	15
	.byte	'Mcu_17_Gtm_TomCh',0,3,181,2,3
	.word	160386
	.byte	19
	.word	158195
	.byte	8,80
	.word	326
	.byte	9,79,0,10,3,193,2,18,128,1,11
	.byte	'CH',0
	.word	160417
	.byte	48,2,35,0,11
	.byte	'Reserved1',0
	.word	160422
	.byte	80,2,35,48,0,19
	.word	160431
	.byte	15
	.byte	'Mcu_17_Gtm_AtomCh',0,3,197,2,3
	.word	160470
	.byte	15
	.byte	'Mcu_17_Ccu6_TimerChIdentifierType',0,3,228,2,16
	.word	157
	.byte	15
	.byte	'Mcu_17_Gpt12_TimerChIdentifierType',0,3,146,3,16
	.word	157
	.byte	15
	.byte	'Adc_ChannelType',0,2,157,1,15
	.word	326
	.byte	15
	.byte	'Adc_GroupType',0,2,161,1,16
	.word	178
	.byte	15
	.byte	'Adc_ValueGroupType',0,2,165,1,16
	.word	178
	.byte	15
	.byte	'Adc_StreamNumSampleType',0,2,185,1,15
	.word	326
	.byte	15
	.byte	'Adc_ResultRegType',0,2,193,1,15
	.word	326
	.byte	15
	.byte	'Adc_StatusType',0,2,205,1,15
	.word	326
	.byte	15
	.byte	'Adc_StartupCalibStatusType',0,2,213,1,15
	.word	326
	.byte	15
	.byte	'Adc_TriggerSourceType',0,2,220,1,15
	.word	326
	.byte	15
	.byte	'Adc_GroupConvModeType',0,2,226,1,15
	.word	326
	.byte	15
	.byte	'Adc_SyncConvModeType',0,2,232,1,15
	.word	326
	.byte	15
	.byte	'Adc_StreamBufferModeType',0,2,239,1,15
	.word	326
	.byte	15
	.byte	'Adc_GroupAccessModeType',0,2,245,1,15
	.word	326
	.byte	15
	.byte	'Adc_HwTrigGateType',0,2,136,2,15
	.word	326
	.byte	15
	.byte	'Adc_EruChannelCfgType',0,2,195,2,3
	.word	2675
	.byte	15
	.byte	'Adc_GroupDefType',0,2,205,2,3
	.word	2347
	.byte	15
	.byte	'Adc_GroupCfgType',0,2,239,2,3
	.word	2772
	.byte	15
	.byte	'Adc_ChannelCfgType',0,2,249,2,3
	.word	2196
	.byte	15
	.byte	'Adc_HwCfgType',0,2,133,3,3
	.word	2023
	.byte	15
	.byte	'Adc_HwUnitCfgType',0,2,148,3,3
	.word	3358
	.byte	15
	.byte	'Adc_GlobalCfgType',0,2,158,3,3
	.word	3932
	.byte	15
	.byte	'Adc_CoreConfigType',0,2,165,3,3
	.word	4066
	.byte	15
	.byte	'Adc_ConfigType',0,2,173,3,3
	.word	4114
	.byte	22
	.byte	'_Ifx_EVADC_ACCEN0_Bits',0,5,70,16,4,23
	.byte	'EN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'EN1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'EN2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'EN3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'EN4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'EN5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'EN6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EN7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'EN8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'EN9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'EN10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'EN11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'EN12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'EN13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'EN14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'EN15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'EN16',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'EN17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'EN18',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'EN19',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'EN20',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'EN21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'EN22',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'EN23',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'EN24',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'EN25',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'EN26',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'EN27',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'EN28',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'EN29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'EN30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'EN31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_EVADC_ACCEN0_Bits',0,5,104,3
	.word	161212
	.byte	22
	.byte	'_Ifx_EVADC_ACCPROT0_Bits',0,5,107,16,4,23
	.byte	'APCP',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'APCS',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'APIP',0,1
	.word	326
	.byte	8,0,2,35,2,23
	.byte	'APIS',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_EVADC_ACCPROT0_Bits',0,5,115,3
	.word	161773
	.byte	22
	.byte	'_Ifx_EVADC_ACCPROT1_Bits',0,5,118,16,4,23
	.byte	'APSP',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'APSS',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'APRP',0,1
	.word	326
	.byte	8,0,2,35,2,23
	.byte	'APRS',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_EVADC_ACCPROT1_Bits',0,5,126,3
	.word	161946
	.byte	22
	.byte	'_Ifx_EVADC_ACCPROT2_Bits',0,5,129,1,16,4,23
	.byte	'APF',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	8,0,2,35,1,23
	.byte	'APGC',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'APEM',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'APTF',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'reserved_19',0,2
	.word	178
	.byte	13,0,2,35,2,0,15
	.byte	'Ifx_EVADC_ACCPROT2_Bits',0,5,137,1,3
	.word	162119
	.byte	22
	.byte	'_Ifx_EVADC_CLC_Bits',0,5,140,1,16,4,23
	.byte	'DISR',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'DISS',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'EDIS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_EVADC_CLC_Bits',0,5,147,1,3
	.word	162292
	.byte	22
	.byte	'_Ifx_EVADC_EMUXSEL_Bits',0,5,150,1,16,4,23
	.byte	'EMUXGRP0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'EMUXGRP1',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'reserved_8',0,4
	.word	3741
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_EVADC_EMUXSEL_Bits',0,5,155,1,3
	.word	162439
	.byte	22
	.byte	'_Ifx_EVADC_FC_FCBFL_Bits',0,5,158,1,16,4,23
	.byte	'BFL',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	3,4,2,35,0,23
	.byte	'BFA',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'BFI',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'reserved_9',0,1
	.word	326
	.byte	3,4,2,35,1,23
	.byte	'BFS',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'reserved_14',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'BFM',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'BFV',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'reserved_18',0,1
	.word	326
	.byte	6,0,2,35,2,23
	.byte	'BFLNP',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'FCR',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	2,1,2,35,3,23
	.byte	'VF',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_EVADC_FC_FCBFL_Bits',0,5,175,1,3
	.word	162564
	.byte	22
	.byte	'_Ifx_EVADC_FC_FCCTRL_Bits',0,5,178,1,16,4,23
	.byte	'STCF',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'RPE',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'AIPF',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'CHEVMODE',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'DIVA',0,1
	.word	326
	.byte	5,1,2,35,1,23
	.byte	'CPWC',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'XTSEL',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'XTLVL',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'XTMODE',0,1
	.word	326
	.byte	2,1,2,35,2,23
	.byte	'XTPOL',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'GTMODE',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'FCCHNR',0,1
	.word	326
	.byte	5,1,2,35,3,23
	.byte	'XTWC',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_EVADC_FC_FCCTRL_Bits',0,5,193,1,3
	.word	162900
	.byte	22
	.byte	'_Ifx_EVADC_FC_FCHYST_Bits',0,5,196,1,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'DELTAMINUS',0,2
	.word	178
	.byte	10,4,2,35,0,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	6,14,2,35,0,23
	.byte	'DELTAPLUS',0,2
	.word	178
	.byte	10,4,2,35,2,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_EVADC_FC_FCHYST_Bits',0,5,203,1,3
	.word	163187
	.byte	22
	.byte	'_Ifx_EVADC_FC_FCM_Bits',0,5,206,1,16,4,23
	.byte	'RUNCOMP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'RUNRAMP',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'FCRDIR',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'ANON',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'ACSD',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'FCTRIV',0,1
	.word	326
	.byte	8,0,2,35,1,23
	.byte	'SRG',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'AUE',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'SSE',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'FCMWC',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'FCREF',0,2
	.word	178
	.byte	10,0,2,35,2,0,15
	.byte	'Ifx_EVADC_FC_FCM_Bits',0,5,219,1,3
	.word	163365
	.byte	22
	.byte	'_Ifx_EVADC_FC_FCRAMP0_Bits',0,5,222,1,16,4,23
	.byte	'FCRCOMPA',0,2
	.word	178
	.byte	10,6,2,35,0,23
	.byte	'reserved_10',0,1
	.word	326
	.byte	6,0,2,35,1,23
	.byte	'FCRSTEP',0,1
	.word	326
	.byte	8,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	7,1,2,35,3,23
	.byte	'FSWC',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_EVADC_FC_FCRAMP0_Bits',0,5,229,1,3
	.word	163611
	.byte	22
	.byte	'_Ifx_EVADC_FC_FCRAMP1_Bits',0,5,232,1,16,4,23
	.byte	'FCRCOMPB',0,2
	.word	178
	.byte	10,6,2,35,0,23
	.byte	'reserved_10',0,4
	.word	3741
	.byte	22,0,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCRAMP1_Bits',0,5,236,1,3
	.word	163781
	.byte	22
	.byte	'_Ifx_EVADC_GLOBCFG_Bits',0,5,239,1,16,4,23
	.byte	'reserved_0',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'USC',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'SUPLEV',0,1
	.word	326
	.byte	2,1,2,35,1,23
	.byte	'CPWC',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	15,1,2,35,2,23
	.byte	'SUCAL',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_EVADC_GLOBCFG_Bits',0,5,247,1,3
	.word	163893
	.byte	15
	.byte	'Ifx_EVADC_GLOB_BOUND_Bits',0,5,128,2,3
	.word	4490
	.byte	15
	.byte	'Ifx_EVADC_GLOB_EFLAG_Bits',0,5,138,2,3
	.word	4661
	.byte	15
	.byte	'Ifx_EVADC_GLOB_EVNP_Bits',0,5,146,2,3
	.word	4850
	.byte	15
	.byte	'Ifx_EVADC_GLOB_ICLASS_Bits',0,5,163,2,3
	.word	4178
	.byte	15
	.byte	'Ifx_EVADC_GLOB_RCR_Bits',0,5,174,2,3
	.word	5416
	.byte	15
	.byte	'Ifx_EVADC_GLOB_RES_Bits',0,5,186,2,3
	.word	5614
	.byte	15
	.byte	'Ifx_EVADC_GLOB_RESD_Bits',0,5,198,2,3
	.word	5803
	.byte	15
	.byte	'Ifx_EVADC_GLOB_TE_Bits',0,5,206,2,3
	.word	5279
	.byte	15
	.byte	'Ifx_EVADC_GLOB_TF_Bits',0,5,223,2,3
	.word	4995
	.byte	15
	.byte	'Ifx_EVADC_G_ALIAS_Bits',0,5,232,2,3
	.word	7792
	.byte	15
	.byte	'Ifx_EVADC_G_ANCFG_Bits',0,5,249,2,3
	.word	7200
	.byte	15
	.byte	'Ifx_EVADC_G_ARBCFG_Bits',0,5,137,3,3
	.word	6593
	.byte	15
	.byte	'Ifx_EVADC_G_ARBPR_Bits',0,5,156,3,3
	.word	6866
	.byte	15
	.byte	'Ifx_EVADC_G_BOUND_Bits',0,5,165,3,3
	.word	7953
	.byte	15
	.byte	'Ifx_EVADC_G_CEFCLR_Bits',0,5,187,3,3
	.word	11243
	.byte	15
	.byte	'Ifx_EVADC_G_CEFLAG_Bits',0,5,209,3,3
	.word	10387
	.byte	15
	.byte	'Ifx_EVADC_G_CEVNP0_Bits',0,5,222,3,3
	.word	12099
	.byte	15
	.byte	'Ifx_EVADC_G_CEVNP1_Bits',0,5,235,3,3
	.word	12315
	.byte	15
	.byte	'Ifx_EVADC_G_CHCTR_Bits',0,5,255,3,3
	.word	14136
	.byte	15
	.byte	'Ifx_EVADC_G_EMUXCS_Bits',0,5,134,4,3
	.word	13685
	.byte	15
	.byte	'Ifx_EVADC_G_EMUXCTR_Bits',0,5,151,4,3
	.word	13375
	.byte	15
	.byte	'Ifx_EVADC_G_ICLASS_Bits',0,5,168,4,3
	.word	7483
	.byte	15
	.byte	'Ifx_EVADC_G_Q_Q0R_Bits',0,5,184,4,3
	.word	9114
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QBUR_Bits',0,5,200,4,3
	.word	9628
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QCTRL_Bits',0,5,220,4,3
	.word	8308
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QINR_Bits',0,5,236,4,3
	.word	9366
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QMR_Bits',0,5,251,4,3
	.word	8660
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QSR_Bits',0,5,135,5,3
	.word	8913
	.byte	15
	.byte	'Ifx_EVADC_G_Q_REQTM_Bits',0,5,147,5,3
	.word	9881
	.byte	15
	.byte	'Ifx_EVADC_G_Q_REQTS_Bits',0,5,155,5,3
	.word	10092
	.byte	15
	.byte	'Ifx_EVADC_G_RCR_Bits',0,5,168,5,3
	.word	14510
	.byte	15
	.byte	'Ifx_EVADC_G_REFCLR_Bits',0,5,190,5,3
	.word	11600
	.byte	15
	.byte	'Ifx_EVADC_G_REFLAG_Bits',0,5,212,5,3
	.word	10744
	.byte	15
	.byte	'Ifx_EVADC_G_RES_Bits',0,5,224,5,3
	.word	14735
	.byte	15
	.byte	'Ifx_EVADC_G_RESD_Bits',0,5,236,5,3
	.word	14930
	.byte	15
	.byte	'Ifx_EVADC_G_REVNP0_Bits',0,5,249,5,3
	.word	12537
	.byte	15
	.byte	'Ifx_EVADC_G_REVNP1_Bits',0,5,134,6,3
	.word	12753
	.byte	15
	.byte	'Ifx_EVADC_G_SEFCLR_Bits',0,5,143,6,3
	.word	11957
	.byte	15
	.byte	'Ifx_EVADC_G_SEFLAG_Bits',0,5,152,6,3
	.word	11101
	.byte	15
	.byte	'Ifx_EVADC_G_SEVNP_Bits',0,5,161,6,3
	.word	12975
	.byte	15
	.byte	'Ifx_EVADC_G_SRACT_Bits',0,5,176,6,3
	.word	13123
	.byte	15
	.byte	'Ifx_EVADC_G_SYNCTR_Bits',0,5,187,6,3
	.word	8112
	.byte	15
	.byte	'Ifx_EVADC_G_TRCTR_Bits',0,5,203,6,3
	.word	6310
	.byte	15
	.byte	'Ifx_EVADC_G_VFR_Bits',0,5,225,6,3
	.word	13798
	.byte	22
	.byte	'_Ifx_EVADC_ID_Bits',0,5,228,6,16,4,23
	.byte	'MOD_REV',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'MOD_TYPE',0,1
	.word	326
	.byte	8,0,2,35,1,23
	.byte	'MOD_NUMBER',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_EVADC_ID_Bits',0,5,233,6,3
	.word	165508
	.byte	22
	.byte	'_Ifx_EVADC_KRST0_Bits',0,5,236,6,16,4,23
	.byte	'RST',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'RSTSTAT',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_EVADC_KRST0_Bits',0,5,241,6,3
	.word	165622
	.byte	22
	.byte	'_Ifx_EVADC_KRST1_Bits',0,5,244,6,16,4,23
	.byte	'RST',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,4
	.word	3741
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_EVADC_KRST1_Bits',0,5,248,6,3
	.word	165737
	.byte	22
	.byte	'_Ifx_EVADC_KRSTCLR_Bits',0,5,251,6,16,4,23
	.byte	'CLR',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,4
	.word	3741
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_EVADC_KRSTCLR_Bits',0,5,255,6,3
	.word	165833
	.byte	22
	.byte	'_Ifx_EVADC_OCS_Bits',0,5,130,7,16,4,23
	.byte	'TGS',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'TGB',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'TG_P',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	20,8,2,35,0,23
	.byte	'SUS',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'SUS_P',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'SUSSTA',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_EVADC_OCS_Bits',0,5,140,7,3
	.word	165933
	.byte	24,5,148,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	161212
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_ACCEN0',0,5,153,7,3
	.word	166129
	.byte	24,5,156,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	161773
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_ACCPROT0',0,5,161,7,3
	.word	166195
	.byte	24,5,164,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	161946
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_ACCPROT1',0,5,169,7,3
	.word	166263
	.byte	24,5,172,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	162119
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_ACCPROT2',0,5,177,7,3
	.word	166331
	.byte	24,5,180,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	162292
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_CLC',0,5,185,7,3
	.word	166399
	.byte	24,5,188,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	162439
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_EMUXSEL',0,5,193,7,3
	.word	166462
	.byte	24,5,196,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	162564
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCBFL',0,5,201,7,3
	.word	166529
	.byte	24,5,204,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	162900
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCCTRL',0,5,209,7,3
	.word	166597
	.byte	24,5,212,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	163187
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCHYST',0,5,217,7,3
	.word	166666
	.byte	24,5,220,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	163365
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCM',0,5,225,7,3
	.word	166735
	.byte	24,5,228,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	163611
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCRAMP0',0,5,233,7,3
	.word	166801
	.byte	24,5,236,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	163781
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_FC_FCRAMP1',0,5,241,7,3
	.word	166871
	.byte	24,5,244,7,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	163893
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_GLOBCFG',0,5,249,7,3
	.word	166941
	.byte	15
	.byte	'Ifx_EVADC_GLOB_BOUND',0,5,129,8,3
	.word	4612
	.byte	15
	.byte	'Ifx_EVADC_GLOB_EFLAG',0,5,137,8,3
	.word	4801
	.byte	15
	.byte	'Ifx_EVADC_GLOB_EVNP',0,5,145,8,3
	.word	4946
	.byte	15
	.byte	'Ifx_EVADC_GLOB_ICLASS',0,5,153,8,3
	.word	4432
	.byte	15
	.byte	'Ifx_EVADC_GLOB_RCR',0,5,161,8,3
	.word	5565
	.byte	15
	.byte	'Ifx_EVADC_GLOB_RES',0,5,169,8,3
	.word	5763
	.byte	15
	.byte	'Ifx_EVADC_GLOB_RESD',0,5,177,8,3
	.word	5953
	.byte	15
	.byte	'Ifx_EVADC_GLOB_TE',0,5,185,8,3
	.word	5365
	.byte	15
	.byte	'Ifx_EVADC_GLOB_TF',0,5,193,8,3
	.word	5239
	.byte	15
	.byte	'Ifx_EVADC_G_ALIAS',0,5,201,8,3
	.word	7904
	.byte	15
	.byte	'Ifx_EVADC_G_ANCFG',0,5,209,8,3
	.word	7434
	.byte	15
	.byte	'Ifx_EVADC_G_ARBCFG',0,5,217,8,3
	.word	6826
	.byte	15
	.byte	'Ifx_EVADC_G_ARBPR',0,5,225,8,3
	.word	7160
	.byte	15
	.byte	'Ifx_EVADC_G_BOUND',0,5,233,8,3
	.word	8072
	.byte	15
	.byte	'Ifx_EVADC_G_CEFCLR',0,5,241,8,3
	.word	11560
	.byte	15
	.byte	'Ifx_EVADC_G_CEFLAG',0,5,249,8,3
	.word	10704
	.byte	15
	.byte	'Ifx_EVADC_G_CEVNP0',0,5,129,9,3
	.word	12275
	.byte	15
	.byte	'Ifx_EVADC_G_CEVNP1',0,5,137,9,3
	.word	12497
	.byte	15
	.byte	'Ifx_EVADC_G_CHCTR',0,5,145,9,3
	.word	14452
	.byte	15
	.byte	'Ifx_EVADC_G_EMUXCS',0,5,153,9,3
	.word	13758
	.byte	15
	.byte	'Ifx_EVADC_G_EMUXCTR',0,5,161,9,3
	.word	13645
	.byte	15
	.byte	'Ifx_EVADC_G_ICLASS',0,5,169,9,3
	.word	7734
	.byte	15
	.byte	'Ifx_EVADC_G_Q_Q0R',0,5,177,9,3
	.word	9326
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QBUR',0,5,185,9,3
	.word	9841
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QCTRL',0,5,193,9,3
	.word	8620
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QINR',0,5,201,9,3
	.word	9588
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QMR',0,5,209,9,3
	.word	8873
	.byte	15
	.byte	'Ifx_EVADC_G_Q_QSR',0,5,217,9,3
	.word	9074
	.byte	15
	.byte	'Ifx_EVADC_G_Q_REQTM',0,5,225,9,3
	.word	10052
	.byte	15
	.byte	'Ifx_EVADC_G_Q_REQTS',0,5,233,9,3
	.word	10190
	.byte	15
	.byte	'Ifx_EVADC_G_RCR',0,5,241,9,3
	.word	14686
	.byte	15
	.byte	'Ifx_EVADC_G_REFCLR',0,5,249,9,3
	.word	11917
	.byte	15
	.byte	'Ifx_EVADC_G_REFLAG',0,5,129,10,3
	.word	11061
	.byte	15
	.byte	'Ifx_EVADC_G_RES',0,5,137,10,3
	.word	14881
	.byte	15
	.byte	'Ifx_EVADC_G_RESD',0,5,145,10,3
	.word	15077
	.byte	15
	.byte	'Ifx_EVADC_G_REVNP0',0,5,153,10,3
	.word	12713
	.byte	15
	.byte	'Ifx_EVADC_G_REVNP1',0,5,161,10,3
	.word	12935
	.byte	15
	.byte	'Ifx_EVADC_G_SEFCLR',0,5,169,10,3
	.word	12059
	.byte	15
	.byte	'Ifx_EVADC_G_SEFLAG',0,5,177,10,3
	.word	11203
	.byte	15
	.byte	'Ifx_EVADC_G_SEVNP',0,5,185,10,3
	.word	13083
	.byte	15
	.byte	'Ifx_EVADC_G_SRACT',0,5,193,10,3
	.word	13335
	.byte	15
	.byte	'Ifx_EVADC_G_SYNCTR',0,5,201,10,3
	.word	8259
	.byte	15
	.byte	'Ifx_EVADC_G_TRCTR',0,5,209,10,3
	.word	6544
	.byte	15
	.byte	'Ifx_EVADC_G_VFR',0,5,217,10,3
	.word	14096
	.byte	24,5,220,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	165508
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_ID',0,5,225,10,3
	.word	168229
	.byte	24,5,228,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	165622
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_KRST0',0,5,233,10,3
	.word	168291
	.byte	24,5,236,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	165737
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_KRST1',0,5,241,10,3
	.word	168356
	.byte	24,5,244,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	165833
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_KRSTCLR',0,5,249,10,3
	.word	168421
	.byte	24,5,252,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	165933
	.byte	4,2,35,0,0,15
	.byte	'Ifx_EVADC_OCS',0,5,129,11,3
	.word	168488
	.byte	19
	.word	5993
	.byte	15
	.byte	'Ifx_EVADC_GLOB',0,5,159,11,3
	.word	168551
	.byte	19
	.word	10230
	.byte	15
	.byte	'Ifx_EVADC_G_Q',0,5,184,11,3
	.word	168580
	.byte	19
	.word	15126
	.byte	15
	.byte	'Ifx_EVADC_G',0,5,248,11,3
	.word	168608
	.byte	8,216,1
	.word	326
	.byte	9,215,1,0,22
	.byte	'_Ifx_EVADC_FC',0,5,135,12,25,128,2,11
	.byte	'FCCTRL',0
	.word	166597
	.byte	4,2,35,0,11
	.byte	'FCM',0
	.word	166735
	.byte	4,2,35,4,11
	.byte	'FCRAMP0',0
	.word	166801
	.byte	4,2,35,8,11
	.byte	'FCRAMP1',0
	.word	166871
	.byte	4,2,35,12,11
	.byte	'reserved_10',0
	.word	4481
	.byte	16,2,35,16,11
	.byte	'FCBFL',0
	.word	166529
	.byte	4,2,35,32,11
	.byte	'FCHYST',0
	.word	166666
	.byte	4,2,35,36,11
	.byte	'reserved_28',0
	.word	168634
	.byte	216,1,2,35,40,0,19
	.word	168645
	.byte	15
	.byte	'Ifx_EVADC_FC',0,5,145,12,3
	.word	168804
	.byte	22
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,13,70,16,4,23
	.byte	'EN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'EN1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'EN2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'EN3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'EN4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'EN5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'EN6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EN7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'EN8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'EN9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'EN10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'EN11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'EN12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'EN13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'EN14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'EN15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'EN16',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'EN17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'EN18',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'EN19',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'EN20',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'EN21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'EN22',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'EN23',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'EN24',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'EN25',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'EN26',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'EN27',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'EN28',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'EN29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'EN30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'EN31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_ACCEN00_Bits',0,13,104,3
	.word	168831
	.byte	22
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,13,107,16,4,23
	.byte	'reserved_0',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN01_Bits',0,13,110,3
	.word	169390
	.byte	22
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,13,113,16,4,23
	.byte	'EN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'EN1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'EN2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'EN3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'EN4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'EN5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'EN6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'EN7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'EN8',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'EN9',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'EN10',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'EN11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'EN12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'EN13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'EN14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'EN15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'EN16',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'EN17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'EN18',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'EN19',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'EN20',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'EN21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'EN22',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'EN23',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'EN24',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'EN25',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'EN26',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'EN27',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'EN28',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'EN29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'EN30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'EN31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_ACCEN10_Bits',0,13,147,1,3
	.word	169469
	.byte	22
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,13,150,1,16,4,23
	.byte	'reserved_0',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN11_Bits',0,13,153,1,3
	.word	170029
	.byte	22
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,13,156,1,16,4,23
	.byte	'STM0DIS',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'STM1DIS',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'STM2DIS',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'STM3DIS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'STM4DIS',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'STM5DIS',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'reserved_8',0,4
	.word	3741
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,13,166,1,3
	.word	170110
	.byte	22
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,13,169,1,16,4,23
	.byte	'STMDIV',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'GTMDIV',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'SRIDIV',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'LPDIV',0,1
	.word	326
	.byte	3,1,2,35,1,23
	.byte	'reserved_15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'SPBDIV',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'BBBDIV',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'FSIDIV',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'FSI2DIV',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'CLKSEL',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'UP',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'LCK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON0_Bits',0,13,183,1,3
	.word	170327
	.byte	22
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,13,186,1,16,4,23
	.byte	'MCANDIV',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'CLKSELMCAN',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'PLL1DIVDIS',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'I2CDIV',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'MSCDIV',0,1
	.word	326
	.byte	4,4,2,35,2,23
	.byte	'CLKSELMSC',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'reserved_22',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'QSPIDIV',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'CLKSELQSPI',0,1
	.word	326
	.byte	2,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'LCK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON1_Bits',0,13,201,1,3
	.word	170600
	.byte	22
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,13,204,1,16,4,23
	.byte	'CPU4DIV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON10_Bits',0,13,208,1,3
	.word	170926
	.byte	22
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,13,211,1,16,4,23
	.byte	'CPU5DIV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON11_Bits',0,13,215,1,3
	.word	171028
	.byte	22
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,13,218,1,16,4,23
	.byte	'ASCLINFDIV',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'ASCLINSDIV',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'CLKSELASCLINS',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'reserved_14',0,4
	.word	3741
	.byte	10,8,2,35,0,23
	.byte	'EBUPERON',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'ERAYPERON',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'HSPDMPERON',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	4,1,2,35,3,23
	.byte	'LCK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON2_Bits',0,13,230,1,3
	.word	171130
	.byte	22
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,13,233,1,16,4,23
	.byte	'PLL0MONEN',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PLL1MONEN',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'PLL2MONEN',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'SPBMONEN',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'BACKMONEN',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	3,0,2,35,0,23
	.byte	'PLL0MONTST',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'PLL1MONTST',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'PLL2MONTST',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'SPBMONTST',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'BACKMONTST',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'reserved_13',0,4
	.word	3741
	.byte	11,8,2,35,0,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	6,2,2,35,3,23
	.byte	'UP',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'LCK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON3_Bits',0,13,250,1,3
	.word	171404
	.byte	22
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,13,253,1,16,4,23
	.byte	'LOTHR',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'UPTHR',0,4
	.word	3741
	.byte	12,8,2,35,0,23
	.byte	'MONEN',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'MONTST',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	4,2,2,35,3,23
	.byte	'UP',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'LCK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON4_Bits',0,13,134,2,3
	.word	171773
	.byte	22
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,13,137,2,16,4,23
	.byte	'GETHDIV',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'MCANHDIV',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'ADASDIV',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	18,2,2,35,0,23
	.byte	'UP',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'LCK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CCUCON5_Bits',0,13,145,2,3
	.word	171953
	.byte	22
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,13,148,2,16,4,23
	.byte	'CPU0DIV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON6_Bits',0,13,152,2,3
	.word	172122
	.byte	22
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,13,155,2,16,4,23
	.byte	'CPU1DIV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON7_Bits',0,13,159,2,3
	.word	172222
	.byte	22
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,13,162,2,16,4,23
	.byte	'CPU2DIV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON8_Bits',0,13,166,2,3
	.word	172322
	.byte	22
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,13,169,2,16,4,23
	.byte	'CPU3DIV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON9_Bits',0,13,173,2,3
	.word	172422
	.byte	22
	.byte	'_Ifx_SCU_CHIPID_Bits',0,13,176,2,16,4,23
	.byte	'CHREV',0,1
	.word	326
	.byte	6,2,2,35,0,23
	.byte	'CHTEC',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'CHPK',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'CHID',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'EEA',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'UCODE',0,1
	.word	326
	.byte	7,0,2,35,2,23
	.byte	'FSIZE',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'VART',0,1
	.word	326
	.byte	3,1,2,35,3,23
	.byte	'SEC',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_CHIPID_Bits',0,13,187,2,3
	.word	172522
	.byte	22
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,13,190,2,16,4,23
	.byte	'LOWER',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'BGPOK',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'EN',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'LLU',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'UPPER',0,2
	.word	178
	.byte	12,4,2,35,2,23
	.byte	'INTEN',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'INT',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'UOF',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,13,202,2,3
	.word	172725
	.byte	22
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,13,205,2,16,4,23
	.byte	'RESULT',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,13,209,2,3
	.word	172957
	.byte	22
	.byte	'_Ifx_SCU_EICON0_Bits',0,13,212,2,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ENDINIT',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'EPW',0,4
	.word	18296
	.byte	14,16,2,35,0,23
	.byte	'REL',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_EICON0_Bits',0,13,218,2,3
	.word	173059
	.byte	22
	.byte	'_Ifx_SCU_EICON1_Bits',0,13,221,2,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IR0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DR',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IR1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_EICON1_Bits',0,13,230,2,3
	.word	173187
	.byte	22
	.byte	'_Ifx_SCU_EICR_Bits',0,13,233,2,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'EXIS0',0,1
	.word	326
	.byte	3,1,2,35,0,23
	.byte	'reserved_7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'FEN0',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'REN0',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'LDEN0',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'EIEN0',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'INP0',0,1
	.word	326
	.byte	3,1,2,35,1,23
	.byte	'reserved_15',0,4
	.word	3741
	.byte	5,12,2,35,0,23
	.byte	'EXIS1',0,1
	.word	326
	.byte	3,1,2,35,2,23
	.byte	'reserved_23',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'FEN1',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'REN1',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'LDEN1',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'EIEN1',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'INP1',0,1
	.word	326
	.byte	3,1,2,35,3,23
	.byte	'reserved_31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_EICR_Bits',0,13,252,2,3
	.word	173376
	.byte	22
	.byte	'_Ifx_SCU_EIFILT_Bits',0,13,255,2,16,4,23
	.byte	'FILRQ0A',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'FILRQ5A',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'FILRQ2A',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'FILRQ3A',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'FILRQ0C',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'FILRQ1C',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'FILRQ3C',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'FILRQ2C',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'FILRQ4A',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'FILRQ6A',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'FILRQ1A',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'FILRQ7A',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'FILRQ6D',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'FILRQ4D',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'FILRQ2B',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'FILRQ3B',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'FILRQ7C',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,1
	.word	326
	.byte	7,0,2,35,2,23
	.byte	'FILTDIV',0,1
	.word	326
	.byte	4,4,2,35,3,23
	.byte	'DEPTH',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_EIFILT_Bits',0,13,149,3,3
	.word	173740
	.byte	22
	.byte	'_Ifx_SCU_EIFR_Bits',0,13,152,3,16,4,23
	.byte	'INTF0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'INTF1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'INTF2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'INTF3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'INTF4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'INTF5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'INTF6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'INTF7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'reserved_8',0,4
	.word	3741
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_EIFR_Bits',0,13,163,3,3
	.word	174179
	.byte	22
	.byte	'_Ifx_SCU_EISR_Bits',0,13,166,3,16,4,23
	.byte	'AE',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'OE',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IS0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'TO',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IS1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'TIM',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_EISR_Bits',0,13,176,3,3
	.word	174390
	.byte	22
	.byte	'_Ifx_SCU_EMSR_Bits',0,13,179,3,16,4,23
	.byte	'POL',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'MODE',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'ENON',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'PSEL',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,2
	.word	178
	.byte	12,0,2,35,0,23
	.byte	'EMSF',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'SEMSF',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'reserved_18',0,2
	.word	178
	.byte	14,0,2,35,2,0,15
	.byte	'Ifx_SCU_EMSR_Bits',0,13,189,3,3
	.word	174566
	.byte	22
	.byte	'_Ifx_SCU_EMSSW_Bits',0,13,192,3,16,4,23
	.byte	'reserved_0',0,4
	.word	3741
	.byte	24,8,2,35,0,23
	.byte	'EMSFM',0,1
	.word	326
	.byte	2,6,2,35,3,23
	.byte	'SEMSFM',0,1
	.word	326
	.byte	2,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_EMSSW_Bits',0,13,198,3,3
	.word	174760
	.byte	22
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,13,201,3,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	7,1,2,35,0,23
	.byte	'EDCON',0,2
	.word	178
	.byte	2,7,2,35,0,23
	.byte	'reserved_9',0,4
	.word	3741
	.byte	23,0,2,35,0,0,15
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,13,206,3,3
	.word	174895
	.byte	22
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,13,209,3,16,4,23
	.byte	'ARI',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'ARC',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_ESROCFG_Bits',0,13,214,3,3
	.word	175031
	.byte	22
	.byte	'_Ifx_SCU_EXTCON_Bits',0,13,217,3,16,4,23
	.byte	'EN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'SEL0',0,1
	.word	326
	.byte	4,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'EN1',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'NSEL',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'SEL1',0,1
	.word	326
	.byte	4,2,2,35,2,23
	.byte	'reserved_22',0,1
	.word	326
	.byte	2,0,2,35,2,23
	.byte	'DIV1',0,1
	.word	326
	.byte	8,0,2,35,3,0,15
	.byte	'Ifx_SCU_EXTCON_Bits',0,13,228,3,3
	.word	175142
	.byte	22
	.byte	'_Ifx_SCU_FDR_Bits',0,13,231,3,16,4,23
	.byte	'STEP',0,2
	.word	178
	.byte	10,6,2,35,0,23
	.byte	'reserved_10',0,1
	.word	326
	.byte	4,2,2,35,1,23
	.byte	'DM',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'RESULT',0,2
	.word	178
	.byte	10,6,2,35,2,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	5,1,2,35,3,23
	.byte	'DISCLK',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_FDR_Bits',0,13,239,3,3
	.word	175360
	.byte	22
	.byte	'_Ifx_SCU_FMR_Bits',0,13,242,3,16,4,23
	.byte	'FS0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'FS1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'FS2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'FS3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'FS4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'FS5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'FS6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'FS7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	8,0,2,35,1,23
	.byte	'FC0',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'FC1',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'FC2',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'FC3',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'FC4',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'FC5',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'FC6',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'FC7',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	8,0,2,35,3,0,15
	.byte	'Ifx_SCU_FMR_Bits',0,13,134,4,3
	.word	175523
	.byte	22
	.byte	'_Ifx_SCU_ID_Bits',0,13,137,4,16,4,23
	.byte	'MODREV',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'MODTYPE',0,1
	.word	326
	.byte	8,0,2,35,1,23
	.byte	'MODNUMBER',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_ID_Bits',0,13,142,4,3
	.word	175859
	.byte	22
	.byte	'_Ifx_SCU_IGCR_Bits',0,13,145,4,16,4,23
	.byte	'IPEN00',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'IPEN01',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IPEN02',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'IPEN03',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'IPEN04',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IPEN05',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'IPEN06',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'IPEN07',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	5,3,2,35,1,23
	.byte	'GEEN0',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'IGP0',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'IPEN10',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'IPEN11',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'IPEN12',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'IPEN13',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'IPEN14',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'IPEN15',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'IPEN16',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'IPEN17',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'reserved_24',0,1
	.word	326
	.byte	5,3,2,35,3,23
	.byte	'GEEN1',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'IGP1',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_SCU_IGCR_Bits',0,13,169,4,3
	.word	175966
	.byte	22
	.byte	'_Ifx_SCU_IN_Bits',0,13,172,4,16,4,23
	.byte	'P0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'P1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_IN_Bits',0,13,177,4,3
	.word	176418
	.byte	22
	.byte	'_Ifx_SCU_IOCR_Bits',0,13,180,4,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	4,4,2,35,0,23
	.byte	'PC0',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	4,4,2,35,1,23
	.byte	'PC1',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_IOCR_Bits',0,13,187,4,3
	.word	176517
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,13,190,4,16,4,23
	.byte	'LBISTREQ',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'LBISTRES',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'PATTERNS',0,4
	.word	3741
	.byte	18,12,2,35,0,23
	.byte	'reserved_20',0,2
	.word	178
	.byte	8,4,2,35,2,23
	.byte	'LBISTDONE',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'reserved_29',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'LBISTERRINJ',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'LBISTREQRED',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,13,200,4,3
	.word	176667
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,13,203,4,16,4,23
	.byte	'SEED',0,4
	.word	3741
	.byte	19,13,2,35,0,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	5,0,2,35,2,23
	.byte	'SPLITSH',0,1
	.word	326
	.byte	3,5,2,35,3,23
	.byte	'BODY',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'LBISTFREQU',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,13,210,4,3
	.word	176905
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,13,213,4,16,4,23
	.byte	'LENGTH',0,2
	.word	178
	.byte	12,4,2,35,0,23
	.byte	'reserved_12',0,4
	.word	3741
	.byte	20,0,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,13,217,4,3
	.word	177066
	.byte	22
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,13,220,4,16,4,23
	.byte	'SIGNATURE',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,13,223,4,3
	.word	177172
	.byte	22
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,13,226,4,16,4,23
	.byte	'LS2',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,2
	.word	178
	.byte	14,1,2,35,0,23
	.byte	'LSEN2',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'LS0',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,2
	.word	178
	.byte	14,1,2,35,2,23
	.byte	'LSEN0',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_LCLCON0_Bits',0,13,234,4,3
	.word	177258
	.byte	22
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,13,237,4,16,4,23
	.byte	'LS3',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,2
	.word	178
	.byte	14,1,2,35,0,23
	.byte	'LSEN3',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'LS1',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,2
	.word	178
	.byte	14,1,2,35,2,23
	.byte	'LSEN1',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_LCLCON1_Bits',0,13,245,4,3
	.word	177426
	.byte	22
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,13,248,4,16,4,23
	.byte	'LCLT0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'LCLT1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'LCLT2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'LCLT3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'LCLT4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'LCLT5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'PLCLT0',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'PLCLT1',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'PLCLT2',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'PLCLT3',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'PLCLT4',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'PLCLT5',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'reserved_22',0,2
	.word	178
	.byte	10,0,2,35,2,0,15
	.byte	'Ifx_SCU_LCLTEST_Bits',0,13,136,5,3
	.word	177594
	.byte	22
	.byte	'_Ifx_SCU_MANID_Bits',0,13,139,5,16,4,23
	.byte	'DEPT',0,1
	.word	326
	.byte	5,3,2,35,0,23
	.byte	'MANUF',0,2
	.word	178
	.byte	11,0,2,35,0,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_MANID_Bits',0,13,144,5,3
	.word	177908
	.byte	22
	.byte	'_Ifx_SCU_OMR_Bits',0,13,147,5,16,4,23
	.byte	'PS0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PS1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,2
	.word	178
	.byte	14,0,2,35,0,23
	.byte	'PCL0',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'PCL1',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'reserved_18',0,2
	.word	178
	.byte	14,0,2,35,2,0,15
	.byte	'Ifx_SCU_OMR_Bits',0,13,155,5,3
	.word	178019
	.byte	22
	.byte	'_Ifx_SCU_OSCCON_Bits',0,13,158,5,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PLLLV',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'OSCRES',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'GAINSEL',0,1
	.word	326
	.byte	2,3,2,35,0,23
	.byte	'MODE',0,1
	.word	326
	.byte	2,1,2,35,0,23
	.byte	'SHBY',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'PLLHV',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'HYSEN',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'HYSCTL',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'AMPCTL',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'reserved_14',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'OSCVAL',0,1
	.word	326
	.byte	5,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	2,1,2,35,2,23
	.byte	'APREN',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'CAP0EN',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'CAP1EN',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'CAP2EN',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'CAP3EN',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_OSCCON_Bits',0,13,179,5,3
	.word	178177
	.byte	22
	.byte	'_Ifx_SCU_OUT_Bits',0,13,182,5,16,4,23
	.byte	'P0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'P1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_OUT_Bits',0,13,187,5,3
	.word	178588
	.byte	22
	.byte	'_Ifx_SCU_OVCCON_Bits',0,13,190,5,16,4,23
	.byte	'CSEL0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CSEL1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'CSEL2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CSEL3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'CSEL4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'CSEL5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'OVSTRT',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'OVSTP',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'DCINVAL',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	5,0,2,35,2,23
	.byte	'OVCONF',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'POVCONF',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_SCU_OVCCON_Bits',0,13,206,5,3
	.word	178689
	.byte	22
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,13,209,5,16,4,23
	.byte	'OVEN0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'OVEN1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'OVEN2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'OVEN3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'OVEN4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'OVEN5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,13,218,5,3
	.word	179007
	.byte	22
	.byte	'_Ifx_SCU_PDISC_Bits',0,13,221,5,16,4,23
	.byte	'PDIS0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PDIS1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,4
	.word	3741
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_SCU_PDISC_Bits',0,13,226,5,3
	.word	179194
	.byte	22
	.byte	'_Ifx_SCU_PDR_Bits',0,13,229,5,16,4,23
	.byte	'PD0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'PL0',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'PD1',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'PL1',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'reserved_8',0,4
	.word	3741
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_PDR_Bits',0,13,236,5,3
	.word	179305
	.byte	22
	.byte	'_Ifx_SCU_PDRR_Bits',0,13,239,5,16,4,23
	.byte	'PDR0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PDR1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'PDR2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'PDR3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'PDR4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'PDR5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'PDR6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'PDR7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'reserved_8',0,4
	.word	3741
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_PDRR_Bits',0,13,250,5,3
	.word	179438
	.byte	22
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,13,253,5,16,4,23
	.byte	'DIVBY',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,2
	.word	178
	.byte	8,7,2,35,0,23
	.byte	'NDIV',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'PLLPWD',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'RESLD',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	5,0,2,35,2,23
	.byte	'PDIV',0,1
	.word	326
	.byte	3,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	5,0,2,35,3,0,15
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,13,136,6,3
	.word	179641
	.byte	22
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,13,139,6,16,4,23
	.byte	'K2DIV',0,1
	.word	326
	.byte	3,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	5,0,2,35,0,23
	.byte	'K3DIV',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,13,145,6,3
	.word	179881
	.byte	22
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,13,148,6,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PWDSTAT',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'LOCK',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'K3RDY',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'K2RDY',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'reserved_7',0,4
	.word	3741
	.byte	25,0,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,13,158,6,3
	.word	180025
	.byte	22
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,13,161,6,16,4,23
	.byte	'REQSLP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'PMST',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR0_Bits',0,13,167,6,3
	.word	180247
	.byte	22
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,13,170,6,16,4,23
	.byte	'REQSLP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'PMST',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR1_Bits',0,13,176,6,3
	.word	180383
	.byte	22
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,13,179,6,16,4,23
	.byte	'REQSLP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'PMST',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR2_Bits',0,13,185,6,3
	.word	180519
	.byte	22
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,13,188,6,16,4,23
	.byte	'REQSLP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'PMST',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR3_Bits',0,13,194,6,3
	.word	180655
	.byte	22
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,13,197,6,16,4,23
	.byte	'REQSLP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'PMST',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR4_Bits',0,13,203,6,3
	.word	180791
	.byte	22
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,13,206,6,16,4,23
	.byte	'REQSLP',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'PMST',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,4
	.word	3741
	.byte	21,0,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR5_Bits',0,13,212,6,3
	.word	180927
	.byte	22
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,13,215,6,16,4,23
	.byte	'CPU0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CPU1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'CPU2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CPU3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'CPU4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'CPU5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'CPU0LS',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'CPU1LS',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'CPU2LS',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'CPU3LS',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'reserved_20',0,2
	.word	178
	.byte	12,0,2,35,2,0,15
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,13,229,6,3
	.word	181063
	.byte	22
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,13,232,6,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'CPUIDLSEL',0,1
	.word	326
	.byte	3,5,2,35,1,23
	.byte	'reserved_11',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'IRADIS',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'reserved_13',0,4
	.word	3741
	.byte	11,8,2,35,0,23
	.byte	'CPUSEL',0,1
	.word	326
	.byte	3,5,2,35,3,23
	.byte	'STBYEVEN',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'STBYEV',0,1
	.word	326
	.byte	3,1,2,35,3,23
	.byte	'reserved_31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,13,243,6,3
	.word	181335
	.byte	22
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,13,246,6,16,4,23
	.byte	'LJTEN',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'LJTOVEN',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'LJTOVIEN',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'LJTSTRT',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'LJTSTP',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'LJTCLR',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	6,4,2,35,0,23
	.byte	'SDSTEP',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'VDTEN',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'VDTOVEN',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'VDTOVIEN',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'VDTSTRT',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'VDTSTP',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'VDTCLR',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'reserved_22',0,2
	.word	178
	.byte	7,3,2,35,2,23
	.byte	'LPSLPEN',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'reserved_30',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,13,137,7,3
	.word	181580
	.byte	22
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,13,140,7,16,4,23
	.byte	'LJTCV',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'VDTCV',0,2
	.word	178
	.byte	10,6,2,35,2,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,13,145,7,3
	.word	181968
	.byte	22
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,13,148,7,16,4,23
	.byte	'LDJMPREQ',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'LJTRUN',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'LJTOV',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'reserved_9',0,1
	.word	326
	.byte	3,4,2,35,1,23
	.byte	'LJTOVCLR',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	3,0,2,35,1,23
	.byte	'LJTCNT',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,13,159,7,3
	.word	182086
	.byte	22
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,13,162,7,16,4,23
	.byte	'VDROOPREQ',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'VDTRUN',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'VDTOV',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'reserved_9',0,1
	.word	326
	.byte	3,4,2,35,1,23
	.byte	'VDTOVCLR',0,1
	.word	326
	.byte	1,3,2,35,1,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	3,0,2,35,1,23
	.byte	'VDTCNT',0,2
	.word	178
	.byte	10,6,2,35,2,23
	.byte	'reserved_26',0,1
	.word	326
	.byte	6,0,2,35,3,0,15
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,13,174,7,3
	.word	182329
	.byte	22
	.byte	'_Ifx_SCU_RSTCON_Bits',0,13,177,7,16,4,23
	.byte	'ESR0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'ESR1',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	2,2,2,35,0,23
	.byte	'SMU',0,1
	.word	326
	.byte	2,0,2,35,0,23
	.byte	'SW',0,1
	.word	326
	.byte	2,6,2,35,1,23
	.byte	'STM0',0,1
	.word	326
	.byte	2,4,2,35,1,23
	.byte	'STM1',0,1
	.word	326
	.byte	2,2,2,35,1,23
	.byte	'STM2',0,1
	.word	326
	.byte	2,0,2,35,1,23
	.byte	'STM3',0,1
	.word	326
	.byte	2,6,2,35,2,23
	.byte	'STM4',0,1
	.word	326
	.byte	2,4,2,35,2,23
	.byte	'STM5',0,1
	.word	326
	.byte	2,2,2,35,2,23
	.byte	'reserved_22',0,2
	.word	178
	.byte	10,0,2,35,2,0,15
	.byte	'Ifx_SCU_RSTCON_Bits',0,13,191,7,3
	.word	182596
	.byte	22
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,13,194,7,16,4,23
	.byte	'FRTO',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CLRC',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'CSSX',0,2
	.word	178
	.byte	6,3,2,35,0,23
	.byte	'reserved_13',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'reserved_14',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'reserved_15',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'USRINFO',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_RSTCON2_Bits',0,13,208,7,3
	.word	182855
	.byte	22
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,13,211,7,16,4,23
	.byte	'reserved_0',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON3_Bits',0,13,214,7,3
	.word	183160
	.byte	22
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,13,217,7,16,4,23
	.byte	'ESR0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'ESR1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'SMU',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'SW',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'STM0',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'STM1',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'STM2',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'STM3',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'STM4',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'STM5',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'reserved_11',0,1
	.word	326
	.byte	5,0,2,35,1,23
	.byte	'PORST',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'CB0',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'CB1',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'CB3',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'reserved_22',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'EVRC',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'EVR33',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'SWD',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'HSMS',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'HSMA',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'STBYR',0,1
	.word	326
	.byte	1,3,2,35,3,23
	.byte	'LBPORST',0,1
	.word	326
	.byte	1,2,2,35,3,23
	.byte	'LBTERM',0,1
	.word	326
	.byte	1,1,2,35,3,23
	.byte	'reserved_31',0,1
	.word	326
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,13,247,7,3
	.word	183241
	.byte	22
	.byte	'_Ifx_SCU_SEICON0_Bits',0,13,250,7,16,4,23
	.byte	'reserved_0',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'ENDINIT',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'EPW',0,4
	.word	18296
	.byte	14,16,2,35,0,23
	.byte	'REL',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON0_Bits',0,13,128,8,3
	.word	183790
	.byte	22
	.byte	'_Ifx_SCU_SEICON1_Bits',0,13,131,8,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IR0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DR',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IR1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,4
	.word	3741
	.byte	26,0,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON1_Bits',0,13,140,8,3
	.word	183920
	.byte	22
	.byte	'_Ifx_SCU_SEISR_Bits',0,13,143,8,16,4,23
	.byte	'AE',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'OE',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IS0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'TO',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IS1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,2
	.word	178
	.byte	10,0,2,35,0,23
	.byte	'TIM',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SEISR_Bits',0,13,153,8,3
	.word	184111
	.byte	22
	.byte	'_Ifx_SCU_STCON_Bits',0,13,156,8,16,4,23
	.byte	'reserved_0',0,2
	.word	178
	.byte	13,3,2,35,0,23
	.byte	'SFCBAE',0,1
	.word	326
	.byte	1,2,2,35,1,23
	.byte	'CFCBAE',0,1
	.word	326
	.byte	1,1,2,35,1,23
	.byte	'STP',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_STCON_Bits',0,13,163,8,3
	.word	184289
	.byte	22
	.byte	'_Ifx_SCU_STMEM1_Bits',0,13,166,8,16,4,23
	.byte	'MEM',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM1_Bits',0,13,169,8,3
	.word	184440
	.byte	22
	.byte	'_Ifx_SCU_STMEM2_Bits',0,13,172,8,16,4,23
	.byte	'MEM',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM2_Bits',0,13,175,8,3
	.word	184512
	.byte	22
	.byte	'_Ifx_SCU_STMEM3_Bits',0,13,178,8,16,4,23
	.byte	'MEM',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM3_Bits',0,13,181,8,3
	.word	184584
	.byte	22
	.byte	'_Ifx_SCU_STMEM4_Bits',0,13,184,8,16,4,23
	.byte	'MEM',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM4_Bits',0,13,187,8,3
	.word	184656
	.byte	22
	.byte	'_Ifx_SCU_STMEM5_Bits',0,13,190,8,16,4,23
	.byte	'MEM',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM5_Bits',0,13,193,8,3
	.word	184728
	.byte	22
	.byte	'_Ifx_SCU_STMEM6_Bits',0,13,196,8,16,4,23
	.byte	'MEM',0,4
	.word	3741
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM6_Bits',0,13,199,8,3
	.word	184800
	.byte	22
	.byte	'_Ifx_SCU_STSTAT_Bits',0,13,202,8,16,4,23
	.byte	'HWCFG',0,1
	.word	326
	.byte	8,0,2,35,0,23
	.byte	'FTM',0,1
	.word	326
	.byte	7,1,2,35,1,23
	.byte	'MODE',0,1
	.word	326
	.byte	1,0,2,35,1,23
	.byte	'FCBAE',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'LUDIS',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'reserved_18',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'TRSTL',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'SPDEN',0,1
	.word	326
	.byte	1,3,2,35,2,23
	.byte	'reserved_21',0,1
	.word	326
	.byte	1,2,2,35,2,23
	.byte	'reserved_22',0,1
	.word	326
	.byte	1,1,2,35,2,23
	.byte	'reserved_23',0,1
	.word	326
	.byte	1,0,2,35,2,23
	.byte	'RAMINT',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'reserved_25',0,1
	.word	326
	.byte	3,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_STSTAT_Bits',0,13,218,8,3
	.word	184872
	.byte	22
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,13,221,8,16,4,23
	.byte	'ADDRCFG',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'SPARE',0,2
	.word	178
	.byte	14,0,2,35,0,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,13,226,8,3
	.word	185201
	.byte	22
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,13,229,8,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'SWRSTREQ',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'reserved_2',0,1
	.word	326
	.byte	6,0,2,35,0,23
	.byte	'reserved_8',0,1
	.word	326
	.byte	8,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,13,236,8,3
	.word	185321
	.byte	22
	.byte	'_Ifx_SCU_SYSCON_Bits',0,13,239,8,16,4,23
	.byte	'CCTRIG0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'RAMINTM',0,1
	.word	326
	.byte	2,4,2,35,0,23
	.byte	'SETLUDIS',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'reserved_5',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'reserved_7',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'DDC',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'reserved_9',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SYSCON_Bits',0,13,251,8,3
	.word	185491
	.byte	22
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,13,254,8,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	2,6,2,35,0,23
	.byte	'MODEN',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,2
	.word	178
	.byte	6,7,2,35,0,23
	.byte	'NDIV',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'PLLPWD',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'reserved_17',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'RESLD',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'reserved_19',0,1
	.word	326
	.byte	5,0,2,35,2,23
	.byte	'PDIV',0,1
	.word	326
	.byte	3,5,2,35,3,23
	.byte	'reserved_27',0,1
	.word	326
	.byte	3,2,2,35,3,23
	.byte	'INSEL',0,1
	.word	326
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,13,139,9,3
	.word	185754
	.byte	22
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,13,142,9,16,4,23
	.byte	'K2DIV',0,1
	.word	326
	.byte	3,5,2,35,0,23
	.byte	'reserved_3',0,4
	.word	3741
	.byte	29,0,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,13,146,9,3
	.word	186033
	.byte	22
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,13,149,9,16,4,23
	.byte	'MODCFG',0,2
	.word	178
	.byte	16,0,2,35,0,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,13,153,9,3
	.word	186137
	.byte	22
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,13,156,9,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'PWDSTAT',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'LOCK',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'reserved_3',0,1
	.word	326
	.byte	2,3,2,35,0,23
	.byte	'K2RDY',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'reserved_6',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'MODRUN',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'reserved_8',0,4
	.word	3741
	.byte	24,0,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,13,166,9,3
	.word	186243
	.byte	22
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,13,169,9,16,4,23
	.byte	'ESR0T',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'ESR1T',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'TRAP2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'SMUT',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,13,176,9,3
	.word	186466
	.byte	22
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,13,179,9,16,4,23
	.byte	'CPU0ESR0T',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CPU0ESR1T',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'CPU0TRAP2T',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CPU0SMUT',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'CPU1ESR0T',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'CPU1ESR1T',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'CPU1TRAP2T',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'CPU1SMUT',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'CPU2ESR0T',0,1
	.word	326
	.byte	1,7,2,35,2,23
	.byte	'CPU2ESR1T',0,1
	.word	326
	.byte	1,6,2,35,2,23
	.byte	'CPU2TRAP2T',0,1
	.word	326
	.byte	1,5,2,35,2,23
	.byte	'CPU2SMUT',0,1
	.word	326
	.byte	1,4,2,35,2,23
	.byte	'reserved_20',0,1
	.word	326
	.byte	4,0,2,35,2,23
	.byte	'CPU3ESR0T',0,1
	.word	326
	.byte	1,7,2,35,3,23
	.byte	'CPU3ESR1T',0,1
	.word	326
	.byte	1,6,2,35,3,23
	.byte	'CPU3TRAP2T',0,1
	.word	326
	.byte	1,5,2,35,3,23
	.byte	'CPU3SMUT',0,1
	.word	326
	.byte	1,4,2,35,3,23
	.byte	'reserved_28',0,1
	.word	326
	.byte	4,0,2,35,3,0,15
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,13,201,9,3
	.word	186614
	.byte	22
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,13,204,9,16,4,23
	.byte	'CPU4ESR0T',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'CPU4ESR1T',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'CPU4TRAP2T',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'CPU4SMUT',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	4,0,2,35,0,23
	.byte	'CPU5ESR0T',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'CPU5ESR1T',0,1
	.word	326
	.byte	1,6,2,35,1,23
	.byte	'CPU5TRAP2T',0,1
	.word	326
	.byte	1,5,2,35,1,23
	.byte	'CPU5SMUT',0,1
	.word	326
	.byte	1,4,2,35,1,23
	.byte	'reserved_12',0,1
	.word	326
	.byte	4,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,13,217,9,3
	.word	187102
	.byte	22
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,13,220,9,16,4,23
	.byte	'ESR0T',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'ESR1T',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'TRAP2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'SMUT',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSET_Bits',0,13,227,9,3
	.word	187399
	.byte	22
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,13,230,9,16,4,23
	.byte	'ESR0T',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'ESR1T',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'TRAP2',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'SMUT',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,4
	.word	3741
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,13,237,9,3
	.word	187547
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,13,240,9,16,4,23
	.byte	'ENDINIT',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'LCK',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'PW',0,4
	.word	18296
	.byte	14,16,2,35,0,23
	.byte	'REL',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,13,246,9,3
	.word	187697
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,13,249,9,16,4,23
	.byte	'reserved_0',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IR0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DR',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IR1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'UR',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'PAR',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'TCR',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'TCTR',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,13,134,10,3
	.word	187827
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,13,137,10,16,4,23
	.byte	'AE',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'OE',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IS0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'TO',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IS1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'US',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'PAS',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'TCS',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'TCT',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'TIM',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,13,150,10,3
	.word	188087
	.byte	22
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,13,153,10,16,4,23
	.byte	'ENDINIT',0,4
	.word	18296
	.byte	1,31,2,35,0,23
	.byte	'LCK',0,4
	.word	18296
	.byte	1,30,2,35,0,23
	.byte	'PW',0,4
	.word	18296
	.byte	14,16,2,35,0,23
	.byte	'REL',0,4
	.word	18296
	.byte	16,0,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,13,159,10,3
	.word	188310
	.byte	22
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,13,162,10,16,4,23
	.byte	'CLRIRF',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'reserved_1',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IR0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DR',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'reserved_4',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IR1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'UR',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'PAR',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'TCR',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'TCTR',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'reserved_16',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,13,175,10,3
	.word	188436
	.byte	22
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,13,178,10,16,4,23
	.byte	'AE',0,1
	.word	326
	.byte	1,7,2,35,0,23
	.byte	'OE',0,1
	.word	326
	.byte	1,6,2,35,0,23
	.byte	'IS0',0,1
	.word	326
	.byte	1,5,2,35,0,23
	.byte	'DS',0,1
	.word	326
	.byte	1,4,2,35,0,23
	.byte	'TO',0,1
	.word	326
	.byte	1,3,2,35,0,23
	.byte	'IS1',0,1
	.word	326
	.byte	1,2,2,35,0,23
	.byte	'US',0,1
	.word	326
	.byte	1,1,2,35,0,23
	.byte	'PAS',0,1
	.word	326
	.byte	1,0,2,35,0,23
	.byte	'TCS',0,1
	.word	326
	.byte	1,7,2,35,1,23
	.byte	'TCT',0,1
	.word	326
	.byte	7,0,2,35,1,23
	.byte	'TIM',0,2
	.word	178
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,13,191,10,3
	.word	188688
	.byte	24,13,199,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	168831
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN00',0,13,204,10,3
	.word	188907
	.byte	24,13,207,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	169390
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN01',0,13,212,10,3
	.word	188972
	.byte	24,13,215,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	169469
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN10',0,13,220,10,3
	.word	189037
	.byte	24,13,223,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	170029
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ACCEN11',0,13,228,10,3
	.word	189102
	.byte	24,13,231,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	170110
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ARSTDIS',0,13,236,10,3
	.word	189167
	.byte	24,13,239,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	170327
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON0',0,13,244,10,3
	.word	189232
	.byte	24,13,247,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	170600
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON1',0,13,252,10,3
	.word	189297
	.byte	24,13,255,10,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	170926
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON10',0,13,132,11,3
	.word	189362
	.byte	24,13,135,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	171028
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON11',0,13,140,11,3
	.word	189428
	.byte	24,13,143,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	171130
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON2',0,13,148,11,3
	.word	189494
	.byte	24,13,151,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	171404
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON3',0,13,156,11,3
	.word	189559
	.byte	24,13,159,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	171773
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON4',0,13,164,11,3
	.word	189624
	.byte	24,13,167,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	171953
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON5',0,13,172,11,3
	.word	189689
	.byte	24,13,175,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172122
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON6',0,13,180,11,3
	.word	189754
	.byte	24,13,183,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172222
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON7',0,13,188,11,3
	.word	189819
	.byte	24,13,191,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172322
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON8',0,13,196,11,3
	.word	189884
	.byte	24,13,199,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172422
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CCUCON9',0,13,204,11,3
	.word	189949
	.byte	24,13,207,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172522
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_CHIPID',0,13,212,11,3
	.word	190014
	.byte	24,13,215,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172725
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_DTSCLIM',0,13,220,11,3
	.word	190078
	.byte	24,13,223,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	172957
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_DTSCSTAT',0,13,228,11,3
	.word	190143
	.byte	24,13,231,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	173059
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EICON0',0,13,236,11,3
	.word	190209
	.byte	24,13,239,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	173187
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EICON1',0,13,244,11,3
	.word	190273
	.byte	24,13,247,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	173376
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EICR',0,13,252,11,3
	.word	190337
	.byte	24,13,255,11,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	173740
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EIFILT',0,13,132,12,3
	.word	190399
	.byte	24,13,135,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	174179
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EIFR',0,13,140,12,3
	.word	190463
	.byte	24,13,143,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	174390
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EISR',0,13,148,12,3
	.word	190525
	.byte	24,13,151,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	174566
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EMSR',0,13,156,12,3
	.word	190587
	.byte	24,13,159,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	174760
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EMSSW',0,13,164,12,3
	.word	190649
	.byte	24,13,167,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	174895
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,13,172,12,3
	.word	190712
	.byte	24,13,175,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	175031
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ESROCFG',0,13,180,12,3
	.word	190785
	.byte	24,13,183,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	175142
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_EXTCON',0,13,188,12,3
	.word	190850
	.byte	24,13,191,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	175360
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_FDR',0,13,196,12,3
	.word	190914
	.byte	24,13,199,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	175523
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_FMR',0,13,204,12,3
	.word	190975
	.byte	24,13,207,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	175859
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_ID',0,13,212,12,3
	.word	191036
	.byte	24,13,215,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	175966
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_IGCR',0,13,220,12,3
	.word	191096
	.byte	24,13,223,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	176418
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_IN',0,13,228,12,3
	.word	191158
	.byte	24,13,231,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	176517
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_IOCR',0,13,236,12,3
	.word	191218
	.byte	24,13,239,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	176667
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL0',0,13,244,12,3
	.word	191280
	.byte	24,13,247,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	176905
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL1',0,13,252,12,3
	.word	191348
	.byte	24,13,255,12,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	177066
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL2',0,13,132,13,3
	.word	191416
	.byte	24,13,135,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	177172
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LBISTCTRL3',0,13,140,13,3
	.word	191484
	.byte	24,13,143,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	177258
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LCLCON0',0,13,148,13,3
	.word	191552
	.byte	24,13,151,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	177426
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LCLCON1',0,13,156,13,3
	.word	191617
	.byte	24,13,159,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	177594
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_LCLTEST',0,13,164,13,3
	.word	191682
	.byte	24,13,167,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	177908
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_MANID',0,13,172,13,3
	.word	191747
	.byte	24,13,175,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	178019
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OMR',0,13,180,13,3
	.word	191810
	.byte	24,13,183,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	178177
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OSCCON',0,13,188,13,3
	.word	191871
	.byte	24,13,191,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	178588
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OUT',0,13,196,13,3
	.word	191935
	.byte	24,13,199,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	178689
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OVCCON',0,13,204,13,3
	.word	191996
	.byte	24,13,207,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	179007
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_OVCENABLE',0,13,212,13,3
	.word	192060
	.byte	24,13,215,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	179194
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PDISC',0,13,220,13,3
	.word	192127
	.byte	24,13,223,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	179305
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PDR',0,13,228,13,3
	.word	192190
	.byte	24,13,231,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	179438
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PDRR',0,13,236,13,3
	.word	192251
	.byte	24,13,239,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	179641
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLCON0',0,13,244,13,3
	.word	192313
	.byte	24,13,247,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	179881
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLCON1',0,13,252,13,3
	.word	192381
	.byte	24,13,255,13,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180025
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PERPLLSTAT',0,13,132,14,3
	.word	192449
	.byte	24,13,135,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180247
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR0',0,13,140,14,3
	.word	192517
	.byte	24,13,143,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180383
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR1',0,13,148,14,3
	.word	192581
	.byte	24,13,151,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180519
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR2',0,13,156,14,3
	.word	192645
	.byte	24,13,159,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180655
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR3',0,13,164,14,3
	.word	192709
	.byte	24,13,167,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180791
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR4',0,13,172,14,3
	.word	192773
	.byte	24,13,175,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	180927
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMCSR5',0,13,180,14,3
	.word	192837
	.byte	24,13,183,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	181063
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMSTAT0',0,13,188,14,3
	.word	192901
	.byte	24,13,191,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	181335
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMSWCR1',0,13,196,14,3
	.word	192966
	.byte	24,13,199,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	181580
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR0',0,13,204,14,3
	.word	193031
	.byte	24,13,207,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	181968
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR1',0,13,212,14,3
	.word	193097
	.byte	24,13,215,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	182086
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR2',0,13,220,14,3
	.word	193163
	.byte	24,13,223,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	182329
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_PMTRCSR3',0,13,228,14,3
	.word	193229
	.byte	24,13,231,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	182596
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON',0,13,236,14,3
	.word	193295
	.byte	24,13,239,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	182855
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON2',0,13,244,14,3
	.word	193359
	.byte	24,13,247,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	183160
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTCON3',0,13,252,14,3
	.word	193424
	.byte	24,13,255,14,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	183241
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_RSTSTAT',0,13,132,15,3
	.word	193489
	.byte	24,13,135,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	183790
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON0',0,13,140,15,3
	.word	193554
	.byte	24,13,143,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	183920
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SEICON1',0,13,148,15,3
	.word	193619
	.byte	24,13,151,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184111
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SEISR',0,13,156,15,3
	.word	193684
	.byte	24,13,159,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184289
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STCON',0,13,164,15,3
	.word	193747
	.byte	24,13,167,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184440
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM1',0,13,172,15,3
	.word	193810
	.byte	24,13,175,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184512
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM2',0,13,180,15,3
	.word	193874
	.byte	24,13,183,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184584
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM3',0,13,188,15,3
	.word	193938
	.byte	24,13,191,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184656
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM4',0,13,196,15,3
	.word	194002
	.byte	24,13,199,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184728
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM5',0,13,204,15,3
	.word	194066
	.byte	24,13,207,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184800
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STMEM6',0,13,212,15,3
	.word	194130
	.byte	24,13,215,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	184872
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_STSTAT',0,13,220,15,3
	.word	194194
	.byte	24,13,223,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	185201
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SWAPCTRL',0,13,228,15,3
	.word	194258
	.byte	24,13,231,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	185321
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SWRSTCON',0,13,236,15,3
	.word	194324
	.byte	24,13,239,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	185491
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSCON',0,13,244,15,3
	.word	194390
	.byte	24,13,247,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	185754
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON0',0,13,252,15,3
	.word	194454
	.byte	24,13,255,15,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	186033
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON1',0,13,132,16,3
	.word	194522
	.byte	24,13,135,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	186137
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLCON2',0,13,140,16,3
	.word	194590
	.byte	24,13,143,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	186243
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_SYSPLLSTAT',0,13,148,16,3
	.word	194658
	.byte	24,13,151,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	186466
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPCLR',0,13,156,16,3
	.word	194726
	.byte	24,13,159,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	186614
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPDIS0',0,13,164,16,3
	.word	194791
	.byte	24,13,167,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	187102
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPDIS1',0,13,172,16,3
	.word	194857
	.byte	24,13,175,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	187399
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSET',0,13,180,16,3
	.word	194923
	.byte	24,13,183,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	187547
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_TRAPSTAT',0,13,188,16,3
	.word	194988
	.byte	24,13,191,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	187697
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_CON0',0,13,196,16,3
	.word	195054
	.byte	24,13,199,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	187827
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_CON1',0,13,204,16,3
	.word	195123
	.byte	24,13,207,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	188087
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTCPU_SR',0,13,212,16,3
	.word	195192
	.byte	24,13,215,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	188310
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_CON0',0,13,220,16,3
	.word	195259
	.byte	24,13,223,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	188436
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_CON1',0,13,228,16,3
	.word	195326
	.byte	24,13,231,16,9,4,11
	.byte	'U',0
	.word	3741
	.byte	4,2,35,0,11
	.byte	'I',0
	.word	3757
	.byte	4,2,35,0,11
	.byte	'B',0
	.word	188688
	.byte	4,2,35,0,0,15
	.byte	'Ifx_SCU_WDTS_SR',0,13,236,16,3
	.word	195393
	.byte	22
	.byte	'_Ifx_SCU_ESRCFGX',0,13,248,16,25,4,11
	.byte	'ESRCFGX',0
	.word	190712
	.byte	4,2,35,0,0,19
	.word	195458
	.byte	15
	.byte	'Ifx_SCU_ESRCFGX',0,13,251,16,3
	.word	195499
	.byte	22
	.byte	'_Ifx_SCU_WDTCPU',0,13,138,17,25,12,11
	.byte	'CON0',0
	.word	195054
	.byte	4,2,35,0,11
	.byte	'CON1',0
	.word	195123
	.byte	4,2,35,4,11
	.byte	'SR',0
	.word	195192
	.byte	4,2,35,8,0,19
	.word	195529
	.byte	15
	.byte	'Ifx_SCU_WDTCPU',0,13,143,17,3
	.word	195592
	.byte	22
	.byte	'_Ifx_SCU_WDTS',0,13,158,17,25,12,11
	.byte	'CON0',0
	.word	195259
	.byte	4,2,35,0,11
	.byte	'CON1',0
	.word	195326
	.byte	4,2,35,4,11
	.byte	'SR',0
	.word	195393
	.byte	4,2,35,8,0,19
	.word	195621
	.byte	15
	.byte	'Ifx_SCU_WDTS',0,13,163,17,3
	.word	195682
	.byte	15
	.byte	'Ifx_SRC_SRCR_Bits',0,7,87,3
	.word	16668
	.byte	15
	.byte	'Ifx_SRC_SRCR',0,7,100,3
	.word	16958
	.byte	22
	.byte	'_Ifx_SRC_CPU_CPU',0,7,112,25,4,11
	.byte	'SB',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	195756
	.byte	15
	.byte	'Ifx_SRC_CPU_CPU',0,7,115,3
	.word	195791
	.byte	8,24
	.word	195756
	.byte	9,5,0,19
	.word	195820
	.byte	22
	.byte	'_Ifx_SRC_CPU',0,7,130,1,25,24,11
	.byte	'CPU',0
	.word	195829
	.byte	24,2,35,0,0,19
	.word	195834
	.byte	15
	.byte	'Ifx_SRC_CPU',0,7,133,1,3
	.word	195867
	.byte	22
	.byte	'_Ifx_SRC_AGBT_AGBT',0,7,148,1,25,4,11
	.byte	'SR',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	195893
	.byte	15
	.byte	'Ifx_SRC_AGBT_AGBT',0,7,151,1,3
	.word	195931
	.byte	8,4
	.word	195893
	.byte	9,0,0,19
	.word	195963
	.byte	22
	.byte	'_Ifx_SRC_AGBT',0,7,166,1,25,4,11
	.byte	'AGBT',0
	.word	195972
	.byte	4,2,35,0,0,19
	.word	195977
	.byte	15
	.byte	'Ifx_SRC_AGBT',0,7,169,1,3
	.word	196012
	.byte	22
	.byte	'_Ifx_SRC_XBAR_XBAR',0,7,184,1,25,4,11
	.byte	'SR',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	196039
	.byte	15
	.byte	'Ifx_SRC_XBAR_XBAR',0,7,187,1,3
	.word	196077
	.byte	8,12
	.word	196039
	.byte	9,2,0,19
	.word	196109
	.byte	22
	.byte	'_Ifx_SRC_XBAR',0,7,202,1,25,12,11
	.byte	'XBAR',0
	.word	196118
	.byte	12,2,35,0,0,19
	.word	196123
	.byte	15
	.byte	'Ifx_SRC_XBAR',0,7,205,1,3
	.word	196158
	.byte	8,8
	.word	16958
	.byte	9,1,0,22
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,7,220,1,25,8,11
	.byte	'SR',0
	.word	196185
	.byte	8,2,35,0,0,19
	.word	196194
	.byte	15
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,7,223,1,3
	.word	196240
	.byte	19
	.word	196194
	.byte	22
	.byte	'_Ifx_SRC_CERBERUS',0,7,238,1,25,8,11
	.byte	'CERBERUS',0
	.word	196280
	.byte	8,2,35,0,0,19
	.word	196285
	.byte	15
	.byte	'Ifx_SRC_CERBERUS',0,7,241,1,3
	.word	196328
	.byte	22
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,7,128,2,25,12,11
	.byte	'TX',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'RX',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,8,0,19
	.word	196359
	.byte	15
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,7,133,2,3
	.word	196426
	.byte	8,144,1
	.word	196359
	.byte	9,11,0,19
	.word	196462
	.byte	22
	.byte	'_Ifx_SRC_ASCLIN',0,7,148,2,25,144,1,11
	.byte	'ASCLIN',0
	.word	196472
	.byte	144,1,2,35,0,0,19
	.word	196477
	.byte	15
	.byte	'Ifx_SRC_ASCLIN',0,7,151,2,3
	.word	196518
	.byte	22
	.byte	'_Ifx_SRC_QSPI_QSPI',0,7,166,2,25,20,11
	.byte	'TX',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'RX',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'PT',0
	.word	16958
	.byte	4,2,35,12,11
	.byte	'U',0
	.word	16958
	.byte	4,2,35,16,0,19
	.word	196547
	.byte	15
	.byte	'Ifx_SRC_QSPI_QSPI',0,7,173,2,3
	.word	196633
	.byte	8,120
	.word	196547
	.byte	9,5,0,19
	.word	196665
	.byte	22
	.byte	'_Ifx_SRC_QSPI',0,7,188,2,25,120,11
	.byte	'QSPI',0
	.word	196674
	.byte	120,2,35,0,0,19
	.word	196679
	.byte	15
	.byte	'Ifx_SRC_QSPI',0,7,191,2,3
	.word	196714
	.byte	22
	.byte	'_Ifx_SRC_HSCT_HSCT',0,7,206,2,25,4,11
	.byte	'SR',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	196741
	.byte	15
	.byte	'Ifx_SRC_HSCT_HSCT',0,7,209,2,3
	.word	196779
	.byte	8,8
	.word	196741
	.byte	9,1,0,19
	.word	196811
	.byte	22
	.byte	'_Ifx_SRC_HSCT',0,7,224,2,25,8,11
	.byte	'HSCT',0
	.word	196820
	.byte	8,2,35,0,0,19
	.word	196825
	.byte	15
	.byte	'Ifx_SRC_HSCT',0,7,227,2,3
	.word	196860
	.byte	22
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,7,242,2,25,16,11
	.byte	'COK',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'RDI',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'TRG',0
	.word	16958
	.byte	4,2,35,12,0,19
	.word	196887
	.byte	15
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,7,248,2,3
	.word	196968
	.byte	8,64
	.word	196887
	.byte	9,3,0,19
	.word	197003
	.byte	22
	.byte	'_Ifx_SRC_HSSL_HSSL',0,7,135,3,25,68,11
	.byte	'CH',0
	.word	197012
	.byte	64,2,35,0,11
	.byte	'EXI',0
	.word	16958
	.byte	4,2,35,64,0,19
	.word	197017
	.byte	15
	.byte	'Ifx_SRC_HSSL_HSSL',0,7,139,3,3
	.word	197068
	.byte	8,136,1
	.word	197017
	.byte	9,1,0,19
	.word	197100
	.byte	22
	.byte	'_Ifx_SRC_HSSL',0,7,154,3,25,136,1,11
	.byte	'HSSL',0
	.word	197110
	.byte	136,1,2,35,0,0,19
	.word	197115
	.byte	15
	.byte	'Ifx_SRC_HSSL',0,7,157,3,3
	.word	197152
	.byte	22
	.byte	'_Ifx_SRC_I2C_I2C',0,7,172,3,25,16,11
	.byte	'DTR',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'P',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'reserved_C',0
	.word	7944
	.byte	4,2,35,12,0,19
	.word	197179
	.byte	15
	.byte	'Ifx_SRC_I2C_I2C',0,7,178,3,3
	.word	197260
	.byte	8,32
	.word	197179
	.byte	9,1,0,19
	.word	197290
	.byte	22
	.byte	'_Ifx_SRC_I2C',0,7,193,3,25,32,11
	.byte	'I2C',0
	.word	197299
	.byte	32,2,35,0,0,19
	.word	197304
	.byte	15
	.byte	'Ifx_SRC_I2C',0,7,196,3,3
	.word	197337
	.byte	22
	.byte	'_Ifx_SRC_SENT_SENT',0,7,211,3,25,4,11
	.byte	'SR',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	197363
	.byte	15
	.byte	'Ifx_SRC_SENT_SENT',0,7,214,3,3
	.word	197401
	.byte	8,40
	.word	197363
	.byte	9,9,0,19
	.word	197433
	.byte	22
	.byte	'_Ifx_SRC_SENT',0,7,229,3,25,40,11
	.byte	'SENT',0
	.word	197442
	.byte	40,2,35,0,0,19
	.word	197447
	.byte	15
	.byte	'Ifx_SRC_SENT',0,7,232,3,3
	.word	197482
	.byte	8,20
	.word	16958
	.byte	9,4,0,22
	.byte	'_Ifx_SRC_MSC_MSC',0,7,247,3,25,20,11
	.byte	'SR',0
	.word	197509
	.byte	20,2,35,0,0,19
	.word	197518
	.byte	15
	.byte	'Ifx_SRC_MSC_MSC',0,7,250,3,3
	.word	197554
	.byte	8,80
	.word	197518
	.byte	9,3,0,19
	.word	197584
	.byte	22
	.byte	'_Ifx_SRC_MSC',0,7,137,4,25,80,11
	.byte	'MSC',0
	.word	197593
	.byte	80,2,35,0,0,19
	.word	197598
	.byte	15
	.byte	'Ifx_SRC_MSC',0,7,140,4,3
	.word	197631
	.byte	8,16
	.word	16958
	.byte	9,3,0,22
	.byte	'_Ifx_SRC_CCU6_CCU',0,7,155,4,25,16,11
	.byte	'SR',0
	.word	197657
	.byte	16,2,35,0,0,19
	.word	197666
	.byte	15
	.byte	'Ifx_SRC_CCU6_CCU',0,7,158,4,3
	.word	197703
	.byte	8,32
	.word	197666
	.byte	9,1,0,19
	.word	197734
	.byte	22
	.byte	'_Ifx_SRC_CCU6',0,7,173,4,25,32,11
	.byte	'CCU',0
	.word	197743
	.byte	32,2,35,0,0,19
	.word	197748
	.byte	15
	.byte	'Ifx_SRC_CCU6',0,7,176,4,3
	.word	197782
	.byte	22
	.byte	'_Ifx_SRC_GPT12_GPT12',0,7,191,4,25,24,11
	.byte	'CIRQ',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'T2',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'T3',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'T4',0
	.word	16958
	.byte	4,2,35,12,11
	.byte	'T5',0
	.word	16958
	.byte	4,2,35,16,11
	.byte	'T6',0
	.word	16958
	.byte	4,2,35,20,0,19
	.word	197809
	.byte	15
	.byte	'Ifx_SRC_GPT12_GPT12',0,7,199,4,3
	.word	197911
	.byte	8,24
	.word	197809
	.byte	9,0,0,19
	.word	197945
	.byte	22
	.byte	'_Ifx_SRC_GPT12',0,7,214,4,25,24,11
	.byte	'GPT12',0
	.word	197954
	.byte	24,2,35,0,0,19
	.word	197959
	.byte	15
	.byte	'Ifx_SRC_GPT12',0,7,217,4,3
	.word	197996
	.byte	22
	.byte	'_Ifx_SRC_STM_STM',0,7,232,4,25,8,11
	.byte	'SR',0
	.word	196185
	.byte	8,2,35,0,0,19
	.word	198024
	.byte	15
	.byte	'Ifx_SRC_STM_STM',0,7,235,4,3
	.word	198060
	.byte	8,48
	.word	198024
	.byte	9,5,0,19
	.word	198090
	.byte	22
	.byte	'_Ifx_SRC_STM',0,7,250,4,25,48,11
	.byte	'STM',0
	.word	198099
	.byte	48,2,35,0,0,19
	.word	198104
	.byte	15
	.byte	'Ifx_SRC_STM',0,7,253,4,3
	.word	198137
	.byte	22
	.byte	'_Ifx_SRC_FCE_FCE0',0,7,140,5,25,4,11
	.byte	'SR',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	198163
	.byte	15
	.byte	'Ifx_SRC_FCE_FCE0',0,7,143,5,3
	.word	198200
	.byte	19
	.word	198163
	.byte	22
	.byte	'_Ifx_SRC_FCE',0,7,158,5,25,4,11
	.byte	'FCE0',0
	.word	198231
	.byte	4,2,35,0,0,19
	.word	198236
	.byte	15
	.byte	'Ifx_SRC_FCE',0,7,161,5,3
	.word	198270
	.byte	8,128,4
	.word	16958
	.byte	9,127,0,22
	.byte	'_Ifx_SRC_DMA_DMA',0,7,176,5,25,176,4,11
	.byte	'ERR',0
	.word	197657
	.byte	16,2,35,0,11
	.byte	'reserved_10',0
	.word	10378
	.byte	32,2,35,16,11
	.byte	'CH',0
	.word	198296
	.byte	128,4,2,35,48,0,19
	.word	198306
	.byte	15
	.byte	'Ifx_SRC_DMA_DMA',0,7,181,5,3
	.word	198378
	.byte	8,176,4
	.word	198306
	.byte	9,0,0,19
	.word	198408
	.byte	22
	.byte	'_Ifx_SRC_DMA',0,7,196,5,25,176,4,11
	.byte	'DMA',0
	.word	198418
	.byte	176,4,2,35,0,0,19
	.word	198423
	.byte	15
	.byte	'Ifx_SRC_DMA',0,7,199,5,3
	.word	198458
	.byte	22
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,7,214,5,25,8,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'DMA',0
	.word	16958
	.byte	4,2,35,4,0,19
	.word	198484
	.byte	15
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,7,218,5,3
	.word	198538
	.byte	8,8
	.word	198484
	.byte	9,0,0,19
	.word	198572
	.byte	22
	.byte	'_Ifx_SRC_SDMMC',0,7,233,5,25,8,11
	.byte	'SDMMC',0
	.word	198581
	.byte	8,2,35,0,0,19
	.word	198586
	.byte	15
	.byte	'Ifx_SRC_SDMMC',0,7,236,5,3
	.word	198623
	.byte	8,40
	.word	16958
	.byte	9,9,0,22
	.byte	'_Ifx_SRC_GETH_GETH',0,7,251,5,25,40,11
	.byte	'SR',0
	.word	198651
	.byte	40,2,35,0,0,19
	.word	198660
	.byte	15
	.byte	'Ifx_SRC_GETH_GETH',0,7,254,5,3
	.word	198698
	.byte	8,40
	.word	198660
	.byte	9,0,0,19
	.word	198730
	.byte	22
	.byte	'_Ifx_SRC_GETH',0,7,141,6,25,40,11
	.byte	'GETH',0
	.word	198739
	.byte	40,2,35,0,0,19
	.word	198744
	.byte	15
	.byte	'Ifx_SRC_GETH',0,7,144,6,3
	.word	198779
	.byte	8,64
	.word	16958
	.byte	9,15,0,22
	.byte	'_Ifx_SRC_CAN_CAN',0,7,159,6,25,64,11
	.byte	'INT',0
	.word	198806
	.byte	64,2,35,0,0,19
	.word	198815
	.byte	15
	.byte	'Ifx_SRC_CAN_CAN',0,7,162,6,3
	.word	198852
	.byte	8,192,1
	.word	198815
	.byte	9,2,0,19
	.word	198882
	.byte	22
	.byte	'_Ifx_SRC_CAN',0,7,177,6,25,192,1,11
	.byte	'CAN',0
	.word	198892
	.byte	192,1,2,35,0,0,19
	.word	198897
	.byte	15
	.byte	'Ifx_SRC_CAN',0,7,180,6,3
	.word	198932
	.byte	22
	.byte	'_Ifx_SRC_VADC_G',0,7,195,6,25,16,11
	.byte	'SR0',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'SR1',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'SR2',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'SR3',0
	.word	16958
	.byte	4,2,35,12,0,19
	.word	198958
	.byte	15
	.byte	'Ifx_SRC_VADC_G',0,7,201,6,3
	.word	199033
	.byte	22
	.byte	'_Ifx_SRC_VADC_FC',0,7,216,6,25,4,11
	.byte	'SR0',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	199062
	.byte	15
	.byte	'Ifx_SRC_VADC_FC',0,7,219,6,3
	.word	199099
	.byte	8,192,1
	.word	198958
	.byte	9,11,0,19
	.word	199129
	.byte	8,32
	.word	199062
	.byte	9,7,0,19
	.word	199144
	.byte	8,32
	.word	198958
	.byte	9,1,0,19
	.word	199158
	.byte	22
	.byte	'_Ifx_SRC_VADC',0,7,235,6,25,128,2,11
	.byte	'G',0
	.word	199139
	.byte	192,1,2,35,0,11
	.byte	'FC',0
	.word	199153
	.byte	32,3,35,192,1,11
	.byte	'CG',0
	.word	199167
	.byte	32,3,35,224,1,0,19
	.word	199172
	.byte	15
	.byte	'Ifx_SRC_VADC',0,7,240,6,3
	.word	199232
	.byte	22
	.byte	'_Ifx_SRC_DSADC_DSADC',0,7,255,6,25,8,11
	.byte	'SRM',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'SRA',0
	.word	16958
	.byte	4,2,35,4,0,19
	.word	199259
	.byte	15
	.byte	'Ifx_SRC_DSADC_DSADC',0,7,131,7,3
	.word	199313
	.byte	8,112
	.word	199259
	.byte	9,13,0,19
	.word	199347
	.byte	22
	.byte	'_Ifx_SRC_DSADC',0,7,146,7,25,112,11
	.byte	'DSADC',0
	.word	199356
	.byte	112,2,35,0,0,19
	.word	199361
	.byte	15
	.byte	'Ifx_SRC_DSADC',0,7,149,7,3
	.word	199398
	.byte	22
	.byte	'_Ifx_SRC_ERAY_ERAY',0,7,164,7,25,48,11
	.byte	'INT0',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'INT1',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'TINT0',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'TINT1',0
	.word	16958
	.byte	4,2,35,12,11
	.byte	'NDAT0',0
	.word	16958
	.byte	4,2,35,16,11
	.byte	'NDAT1',0
	.word	16958
	.byte	4,2,35,20,11
	.byte	'MBSC0',0
	.word	16958
	.byte	4,2,35,24,11
	.byte	'MBSC1',0
	.word	16958
	.byte	4,2,35,28,11
	.byte	'OBUSY',0
	.word	16958
	.byte	4,2,35,32,11
	.byte	'IBUSY',0
	.word	16958
	.byte	4,2,35,36,11
	.byte	'reserved_28',0
	.word	7783
	.byte	8,2,35,40,0,19
	.word	199426
	.byte	15
	.byte	'Ifx_SRC_ERAY_ERAY',0,7,177,7,3
	.word	199621
	.byte	8,96
	.word	199426
	.byte	9,1,0,19
	.word	199653
	.byte	22
	.byte	'_Ifx_SRC_ERAY',0,7,192,7,25,96,11
	.byte	'ERAY',0
	.word	199662
	.byte	96,2,35,0,0,19
	.word	199667
	.byte	15
	.byte	'Ifx_SRC_ERAY',0,7,195,7,3
	.word	199702
	.byte	22
	.byte	'_Ifx_SRC_HSM_HSM',0,7,210,7,25,8,11
	.byte	'HSM',0
	.word	196185
	.byte	8,2,35,0,0,19
	.word	199729
	.byte	15
	.byte	'Ifx_SRC_HSM_HSM',0,7,213,7,3
	.word	199766
	.byte	8,8
	.word	199729
	.byte	9,0,0,19
	.word	199796
	.byte	22
	.byte	'_Ifx_SRC_HSM',0,7,228,7,25,8,11
	.byte	'HSM',0
	.word	199805
	.byte	8,2,35,0,0,19
	.word	199810
	.byte	15
	.byte	'Ifx_SRC_HSM',0,7,231,7,3
	.word	199843
	.byte	22
	.byte	'_Ifx_SRC_SCU',0,7,246,7,25,16,11
	.byte	'SCUERU',0
	.word	197657
	.byte	16,2,35,0,0,19
	.word	199869
	.byte	15
	.byte	'Ifx_SRC_SCU',0,7,249,7,3
	.word	199905
	.byte	22
	.byte	'_Ifx_SRC_PMS_PMS',0,7,136,8,25,4,11
	.byte	'SR',0
	.word	16958
	.byte	4,2,35,0,0,19
	.word	199931
	.byte	15
	.byte	'Ifx_SRC_PMS_PMS',0,7,139,8,3
	.word	199967
	.byte	8,16
	.word	199931
	.byte	9,3,0,19
	.word	199997
	.byte	22
	.byte	'_Ifx_SRC_PMS',0,7,154,8,25,16,11
	.byte	'PMS',0
	.word	200006
	.byte	16,2,35,0,0,19
	.word	200011
	.byte	15
	.byte	'Ifx_SRC_PMS',0,7,157,8,3
	.word	200044
	.byte	8,12
	.word	16958
	.byte	9,2,0,22
	.byte	'_Ifx_SRC_SMU_SMU',0,7,172,8,25,12,11
	.byte	'SR',0
	.word	200070
	.byte	12,2,35,0,0,19
	.word	200079
	.byte	15
	.byte	'Ifx_SRC_SMU_SMU',0,7,175,8,3
	.word	200115
	.byte	8,12
	.word	200079
	.byte	9,0,0,19
	.word	200145
	.byte	22
	.byte	'_Ifx_SRC_SMU',0,7,190,8,25,12,11
	.byte	'SMU',0
	.word	200154
	.byte	12,2,35,0,0,19
	.word	200159
	.byte	15
	.byte	'Ifx_SRC_SMU',0,7,193,8,3
	.word	200192
	.byte	8,32
	.word	16958
	.byte	9,7,0,22
	.byte	'_Ifx_SRC_PSI5_PSI5',0,7,208,8,25,32,11
	.byte	'SR',0
	.word	200218
	.byte	32,2,35,0,0,19
	.word	200227
	.byte	15
	.byte	'Ifx_SRC_PSI5_PSI5',0,7,211,8,3
	.word	200265
	.byte	8,32
	.word	200227
	.byte	9,0,0,19
	.word	200297
	.byte	22
	.byte	'_Ifx_SRC_PSI5',0,7,226,8,25,32,11
	.byte	'PSI5',0
	.word	200306
	.byte	32,2,35,0,0,19
	.word	200311
	.byte	15
	.byte	'Ifx_SRC_PSI5',0,7,229,8,3
	.word	200346
	.byte	22
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,7,244,8,25,12,11
	.byte	'BFR',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'RAMP',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,8,0,19
	.word	200373
	.byte	15
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,7,249,8,3
	.word	200442
	.byte	19
	.word	200373
	.byte	22
	.byte	'_Ifx_SRC_HSPDM',0,7,136,9,25,12,11
	.byte	'HSPDM0',0
	.word	200477
	.byte	12,2,35,0,0,19
	.word	200482
	.byte	15
	.byte	'Ifx_SRC_HSPDM',0,7,139,9,3
	.word	200520
	.byte	22
	.byte	'_Ifx_SRC_DAM_DAM',0,7,154,9,25,24,11
	.byte	'LI0',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'RI0',0
	.word	16958
	.byte	4,2,35,4,11
	.byte	'LI1',0
	.word	16958
	.byte	4,2,35,8,11
	.byte	'RI1',0
	.word	16958
	.byte	4,2,35,12,11
	.byte	'DR',0
	.word	16958
	.byte	4,2,35,16,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,20,0,19
	.word	200548
	.byte	15
	.byte	'Ifx_SRC_DAM_DAM',0,7,162,9,3
	.word	200649
	.byte	8,48
	.word	200548
	.byte	9,1,0,19
	.word	200679
	.byte	22
	.byte	'_Ifx_SRC_DAM',0,7,177,9,25,48,11
	.byte	'DAM',0
	.word	200688
	.byte	48,2,35,0,0,19
	.word	200693
	.byte	15
	.byte	'Ifx_SRC_DAM',0,7,180,9,3
	.word	200726
	.byte	22
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,7,195,9,25,32,11
	.byte	'SR',0
	.word	200218
	.byte	32,2,35,0,0,19
	.word	200752
	.byte	15
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,7,198,9,3
	.word	200792
	.byte	8,32
	.word	200752
	.byte	9,0,0,19
	.word	200826
	.byte	22
	.byte	'_Ifx_SRC_PSI5S',0,7,213,9,25,32,11
	.byte	'PSI5S',0
	.word	200835
	.byte	32,2,35,0,0,19
	.word	200840
	.byte	15
	.byte	'Ifx_SRC_PSI5S',0,7,216,9,3
	.word	200877
	.byte	22
	.byte	'_Ifx_SRC_RIF_RIF',0,7,231,9,25,8,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'INT',0
	.word	16958
	.byte	4,2,35,4,0,19
	.word	200905
	.byte	15
	.byte	'Ifx_SRC_RIF_RIF',0,7,235,9,3
	.word	200955
	.byte	8,16
	.word	200905
	.byte	9,1,0,19
	.word	200985
	.byte	22
	.byte	'_Ifx_SRC_RIF',0,7,250,9,25,16,11
	.byte	'RIF',0
	.word	200994
	.byte	16,2,35,0,0,19
	.word	200999
	.byte	15
	.byte	'Ifx_SRC_RIF',0,7,253,9,3
	.word	201032
	.byte	22
	.byte	'_Ifx_SRC_SPU_SPU',0,7,140,10,25,8,11
	.byte	'INT',0
	.word	16958
	.byte	4,2,35,0,11
	.byte	'ERR',0
	.word	16958
	.byte	4,2,35,4,0,19
	.word	201058
	.byte	15
	.byte	'Ifx_SRC_SPU_SPU',0,7,144,10,3
	.word	201108
	.byte	8,16
	.word	201058
	.byte	9,1,0,19
	.word	201138
	.byte	22
	.byte	'_Ifx_SRC_SPU',0,7,159,10,25,16,11
	.byte	'SPU',0
	.word	201147
	.byte	16,2,35,0,0,19
	.word	201152
	.byte	15
	.byte	'Ifx_SRC_SPU',0,7,162,10,3
	.word	201185
	.byte	22
	.byte	'_Ifx_SRC_GPSR_GPSR',0,7,177,10,25,32,11
	.byte	'SR',0
	.word	200218
	.byte	32,2,35,0,0,19
	.word	201211
	.byte	15
	.byte	'Ifx_SRC_GPSR_GPSR',0,7,180,10,3
	.word	201249
	.byte	8,192,1
	.word	201211
	.byte	9,5,0,19
	.word	201281
	.byte	22
	.byte	'_Ifx_SRC_GPSR',0,7,195,10,25,192,1,11
	.byte	'GPSR',0
	.word	201291
	.byte	192,1,2,35,0,0,19
	.word	201296
	.byte	15
	.byte	'Ifx_SRC_GPSR',0,7,198,10,3
	.word	201333
	.byte	15
	.byte	'Adc_RSDataType',0,1,164,3,3
	.word	343
	.byte	15
	.byte	'Adc_GlobalDataType',0,1,196,3,3
	.word	443
.L749:
	.byte	8,128,1
	.word	443
	.byte	9,3,0,8,12
	.word	326
	.byte	9,11,0,8,72
	.word	201422
	.byte	9,5,0
.L751:
	.byte	3
	.word	201431
	.byte	8,6
	.word	326
	.byte	9,5,0
.L752:
	.byte	3
	.word	201445
	.byte	8,24
	.word	670
	.byte	9,5,0
.L753:
	.byte	3
	.word	201459
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,15,0,73
	.byte	19,0,0,8,1,1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11
	.byte	15,56,9,0,0,12,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,13,11,1,0,0,14,21,0,54,15,39,12,0,0,15
	.byte	22,0,3,8,58,15,59,15,57,15,73,19,0,0,16,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,17,5,0,73,19,0,0,18
	.byte	59,0,3,8,0,0,19,53,0,73,19,0,0,20,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,21,46,0,3,8,58
	.byte	15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,22,19,1,3,8,58,15,59,15,57,15,11,15,0,0,23,13,0,3,8,11
	.byte	15,73,19,13,15,12,15,56,9,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,29,1,49,19,0,0,29,11,0,49,19,0,0,30,46,0,3
	.byte	8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,31,21,0,54,15,0,0,32,13,0,73,19,11,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L131:
	.word	.L944-.L943
.L943:
	.half	3
	.word	.L946-.L945
.L945:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0
	.byte	'Adc.h',0,1,0,0
	.byte	'Mcu_17_TimerIp.h',0,2,0,0
	.byte	'McalLib.h',0,3,0,0
	.byte	'IfxEvadc_regdef.h',0,4,0,0
	.byte	'SchM_Adc.h',0,5,0,0
	.byte	'IfxSrc_regdef.h',0,4,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Std_Types.h',0,6,0,0
	.byte	'Mcal_Compiler.h',0,3,0,0
	.byte	'Ifx_TypesReg.h',0,4,0,0
	.byte	'IfxGtm_regdef.h',0,4,0,0
	.byte	'IfxScu_regdef.h',0,4,0,0,0
.L946:
.L944:
	.sdecl	'.debug_info',debug,cluster('Adc_Init')
	.sect	'.debug_info'
.L132:
	.word	588
	.half	3
	.word	.L133
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L135,.L134
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_Init',0,1,224,10,6,1,1,1
	.word	.L87,.L249,.L86
	.byte	4
	.byte	'ConfigPtr',0,1,224,10,44
	.word	.L250,.L251
	.byte	5
	.word	.L87,.L249
	.byte	6
	.byte	'lClcReadBack',0,1,226,10,10
	.word	.L252,.L253
	.byte	6
	.byte	'lCoreId',0,1,227,10,10
	.word	.L252,.L254
	.byte	6
	.byte	'lClcDemErr',0,1,228,10,10
	.word	.L252,.L255
	.byte	7
	.word	.L256,.L257,.L5
	.byte	8
	.word	.L258,.L259
	.byte	9
	.word	.L260,.L261
	.byte	6
	.byte	'lKernelCount',0,1,231,44,10
	.word	.L252,.L262
	.byte	7
	.word	.L263,.L264,.L265
	.byte	10
	.word	.L266,.L264,.L265
	.byte	6
	.byte	'lEvadcGlobalSfr',0,1,177,47,19
	.word	.L267,.L268
	.byte	0,0,7
	.word	.L269,.L270,.L9
	.byte	11
	.word	.L271,.L270,.L9
	.byte	0,7
	.word	.L272,.L273,.L274
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	9
	.word	.L279,.L280
	.byte	6
	.byte	'lEvadcGroupPtr',0,1,233,50,16
	.word	.L282,.L283
	.byte	6
	.byte	'lHwCfgPtr',0,1,234,50,24
	.word	.L284,.L285
	.byte	0,0,7
	.word	.L272,.L281,.L12
	.byte	8
	.word	.L275,.L276
	.byte	8
	.word	.L277,.L278
	.byte	0,0,0,7
	.word	.L256,.L7,.L249
	.byte	8
	.word	.L258,.L259
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_Init')
	.sect	'.debug_abbrev'
.L133:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,11,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_Init')
	.sect	'.debug_line'
.L134:
	.word	.L948-.L947
.L947:
	.half	3
	.word	.L950-.L949
.L949:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L950:
	.byte	5,6,7,0,5,2
	.word	.L87
	.byte	3,223,10,1,5,21,9
	.half	.L755-.L87
	.byte	3,4,1,5,29,9
	.half	.L756-.L755
	.byte	3,9,1,5,11,9
	.half	.L754-.L756
	.byte	1,5,5,9
	.half	.L758-.L754
	.byte	3,14,1,5,7,7,9
	.half	.L951-.L758
	.byte	3,4,1,5,46,9
	.half	.L757-.L951
	.byte	3,5,1,5,7,9
	.half	.L759-.L757
	.byte	3,4,1,5,9,7,9
	.half	.L952-.L759
	.byte	3,12,1,5,23,9
	.half	.L953-.L952
	.byte	1,5,34,9
	.half	.L954-.L953
	.byte	1,5,20,9
	.half	.L3-.L954
	.byte	3,9,1,5,5,9
	.half	.L2-.L3
	.byte	3,5,1,5,8,7,9
	.half	.L257-.L2
	.byte	3,205,33,1,5,62,9
	.half	.L955-.L257
	.byte	3,124,1,5,1,9
	.half	.L5-.L955
	.byte	3,200,94,1,5,8,7,9
	.half	.L7-.L5
	.byte	3,188,33,1,5,33,9
	.half	.L956-.L7
	.byte	1,5,55,9
	.half	.L760-.L956
	.byte	1,5,5,9
	.half	.L957-.L760
	.byte	1,5,37,7,9
	.half	.L958-.L957
	.byte	3,6,1,5,53,9
	.half	.L762-.L958
	.byte	1,5,76,9
	.half	.L8-.L762
	.byte	3,118,1,5,62,9
	.half	.L6-.L8
	.byte	1,5,3,7,9
	.half	.L764-.L6
	.byte	3,16,1,5,35,7,9
	.half	.L264-.L764
	.byte	3,183,2,1,5,43,9
	.half	.L959-.L264
	.byte	3,2,1,5,33,9
	.half	.L960-.L959
	.byte	1,9
	.half	.L961-.L960
	.byte	3,1,1,9
	.half	.L962-.L961
	.byte	3,1,1,9
	.half	.L963-.L962
	.byte	3,1,1,5,54,9
	.half	.L964-.L963
	.byte	3,1,1,5,33,9
	.half	.L965-.L964
	.byte	1,5,54,9
	.half	.L966-.L965
	.byte	3,2,1,5,33,9
	.half	.L967-.L966
	.byte	1,9
	.half	.L968-.L967
	.byte	3,2,1,9
	.half	.L969-.L968
	.byte	3,1,1,5,35,9
	.half	.L970-.L969
	.byte	3,1,1,5,33,9
	.half	.L971-.L970
	.byte	1,9
	.half	.L972-.L971
	.byte	3,1,1,5,43,9
	.half	.L973-.L972
	.byte	3,1,1,5,33,9
	.half	.L974-.L973
	.byte	1,9
	.half	.L265-.L974
	.byte	3,194,125,1,5,46,9
	.half	.L766-.L265
	.byte	1,5,60,9
	.half	.L975-.L766
	.byte	1,5,72,9
	.half	.L976-.L975
	.byte	1,5,28,9
	.half	.L977-.L976
	.byte	1,5,30,9
	.half	.L978-.L977
	.byte	3,3,1,5,43,9
	.half	.L979-.L978
	.byte	1,5,57,9
	.half	.L980-.L979
	.byte	1,5,36,9
	.half	.L981-.L980
	.byte	3,127,1,5,30,9
	.half	.L982-.L981
	.byte	3,3,1,5,43,9
	.half	.L983-.L982
	.byte	1,5,57,9
	.half	.L984-.L983
	.byte	1,5,36,9
	.half	.L985-.L984
	.byte	3,127,1,5,22,9
	.half	.L986-.L985
	.byte	3,5,1,5,35,9
	.half	.L987-.L986
	.byte	1,5,49,9
	.half	.L988-.L987
	.byte	1,5,28,9
	.half	.L989-.L988
	.byte	3,127,1,5,3,9
	.half	.L270-.L989
	.byte	3,172,124,1,5,19,9
	.half	.L9-.L270
	.byte	3,229,3,1,5,8,9
	.half	.L767-.L9
	.byte	3,4,1,5,34,9
	.half	.L273-.L767
	.byte	3,219,5,1,5,30,9
	.half	.L990-.L273
	.byte	3,6,1,5,62,9
	.half	.L274-.L990
	.byte	3,155,122,1,5,8,9
	.half	.L11-.L274
	.byte	3,4,1,5,33,9
	.half	.L991-.L11
	.byte	1,5,55,9
	.half	.L992-.L991
	.byte	1,5,5,9
	.half	.L993-.L992
	.byte	1,5,35,7,9
	.half	.L994-.L993
	.byte	3,6,1,5,27,9
	.half	.L281-.L994
	.byte	3,200,5,1,5,33,9
	.half	.L768-.L281
	.byte	3,2,1,5,36,9
	.half	.L995-.L768
	.byte	1,5,35,9
	.half	.L996-.L995
	.byte	1,5,43,9
	.half	.L769-.L996
	.byte	3,3,1,5,32,9
	.half	.L997-.L769
	.byte	1,5,43,9
	.half	.L998-.L997
	.byte	3,1,1,5,32,9
	.half	.L999-.L998
	.byte	1,5,43,9
	.half	.L1000-.L999
	.byte	3,1,1,5,32,9
	.half	.L1001-.L1000
	.byte	1,5,43,9
	.half	.L1002-.L1001
	.byte	3,1,1,5,32,9
	.half	.L1003-.L1002
	.byte	1,5,43,9
	.half	.L1004-.L1003
	.byte	3,1,1,5,32,9
	.half	.L1005-.L1004
	.byte	1,9
	.half	.L1006-.L1005
	.byte	3,4,1,5,28,9
	.half	.L1007-.L1006
	.byte	3,6,1,5,3,9
	.half	.L1008-.L1007
	.byte	3,3,1,5,30,7,9
	.half	.L1009-.L1008
	.byte	3,2,1,5,33,9
	.half	.L13-.L1009
	.byte	3,4,1,9
	.half	.L1010-.L13
	.byte	3,1,1,5,43,9
	.half	.L1011-.L1010
	.byte	3,3,1,5,32,9
	.half	.L1012-.L1011
	.byte	1,5,76,9
	.half	.L12-.L1012
	.byte	3,142,122,1,5,62,9
	.half	.L10-.L12
	.byte	1,5,19,7,9
	.half	.L1013-.L10
	.byte	3,17,1,5,8,9
	.half	.L1014-.L1013
	.byte	3,4,1,5,62,9
	.half	.L1015-.L1014
	.byte	3,124,1,5,8,9
	.half	.L15-.L1015
	.byte	3,4,1,5,33,9
	.half	.L1016-.L15
	.byte	1,5,55,9
	.half	.L1017-.L1016
	.byte	1,5,5,9
	.half	.L1018-.L1017
	.byte	1,5,19,7,9
	.half	.L1019-.L1018
	.byte	3,14,1,5,22,9
	.half	.L1020-.L1019
	.byte	1,5,21,9
	.half	.L1021-.L1020
	.byte	1,5,19,9
	.half	.L1022-.L1021
	.byte	1,5,21,9
	.half	.L1023-.L1022
	.byte	1,5,44,9
	.half	.L1024-.L1023
	.byte	1,5,52,9
	.half	.L1025-.L1024
	.byte	3,1,1,5,66,9
	.half	.L1026-.L1025
	.byte	1,5,28,9
	.half	.L1027-.L1026
	.byte	3,1,1,5,51,9
	.half	.L1028-.L1027
	.byte	3,126,1,5,7,9
	.half	.L1029-.L1028
	.byte	3,4,1,5,76,9
	.half	.L16-.L1029
	.byte	3,106,1,5,62,9
	.half	.L14-.L16
	.byte	1,5,28,7,9
	.half	.L1030-.L14
	.byte	3,25,1,5,1,9
	.half	.L136-.L1030
	.byte	3,238,93,0,1,1
.L948:
	.sdecl	'.debug_ranges',debug,cluster('Adc_Init')
	.sect	'.debug_ranges'
.L135:
	.word	-1,.L87,0,.L136-.L87,0,0
.L261:
	.word	-1,.L87,.L257-.L87,.L5-.L87,.L7-.L87,.L249-.L87,0,0
.L280:
	.word	-1,.L87,.L273-.L87,.L274-.L87,.L281-.L87,.L12-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_SetupResultBuffer')
	.sect	'.debug_info'
.L137:
	.word	498
	.half	3
	.word	.L138
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L140,.L139
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_SetupResultBuffer',0,1,164,12,16
	.word	.L286
	.byte	1,1,1
	.word	.L89,.L287,.L88
	.byte	4
	.byte	'Group',0,1,164,12,58
	.word	.L288,.L289
	.byte	4
	.byte	'DataBufferPtr',0,1,165,12,66
	.word	.L290,.L291
	.byte	5
	.word	.L89,.L287
	.byte	6
	.byte	'lKernelDataPtr',0,1,167,12,23
	.word	.L292,.L293
	.byte	6
	.byte	'lRetVal',0,1,168,12,18
	.word	.L286,.L294
	.byte	6
	.byte	'lKernelId',0,1,169,12,10
	.word	.L252,.L295
	.byte	6
	.byte	'lCoreId',0,1,169,12,21
	.word	.L252,.L296
	.byte	6
	.byte	'lGroupId',0,1,170,12,17
	.word	.L297,.L298
	.byte	7
	.word	.L299,.L300,.L301
	.byte	8
	.word	.L302,.L303
	.byte	9
	.word	.L304,.L300,.L301
	.byte	0,7
	.word	.L305,.L301,.L306
	.byte	8
	.word	.L307,.L308
	.byte	9
	.word	.L309,.L301,.L306
	.byte	0,7
	.word	.L310,.L306,.L311
	.byte	8
	.word	.L312,.L313
	.byte	8
	.word	.L314,.L315
	.byte	9
	.word	.L316,.L306,.L311
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_SetupResultBuffer')
	.sect	'.debug_abbrev'
.L138:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_SetupResultBuffer')
	.sect	'.debug_line'
.L139:
	.word	.L1032-.L1031
.L1031:
	.half	3
	.word	.L1034-.L1033
.L1033:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1034:
	.byte	5,16,7,0,5,2
	.word	.L89
	.byte	3,163,12,1,5,29,9
	.half	.L772-.L89
	.byte	3,13,1,5,19,9
	.half	.L300-.L772
	.byte	3,130,25,1,5,34,9
	.half	.L301-.L300
	.byte	3,33,1,5,11,9
	.half	.L306-.L301
	.byte	3,32,1,5,26,9
	.half	.L1035-.L306
	.byte	1,5,55,9
	.half	.L1036-.L1035
	.byte	1,5,35,9
	.half	.L1037-.L1036
	.byte	1,5,55,9
	.half	.L1038-.L1037
	.byte	1,5,63,9
	.half	.L1039-.L1038
	.byte	1,5,34,9
	.half	.L1040-.L1039
	.byte	1,5,36,9
	.half	.L311-.L1040
	.byte	3,136,103,1,5,35,9
	.half	.L773-.L311
	.byte	3,13,1,5,8,9
	.half	.L1041-.L773
	.byte	3,1,1,5,39,9
	.half	.L1042-.L1041
	.byte	3,2,1,5,52,9
	.half	.L1043-.L1042
	.byte	1,5,50,9
	.half	.L1044-.L1043
	.byte	1,5,31,9
	.half	.L1045-.L1044
	.byte	3,4,1,5,15,9
	.half	.L1046-.L1045
	.byte	3,4,1,5,1,9
	.half	.L775-.L1046
	.byte	3,4,1,7,9
	.half	.L141-.L775
	.byte	0,1,1
.L1032:
	.sdecl	'.debug_ranges',debug,cluster('Adc_SetupResultBuffer')
	.sect	'.debug_ranges'
.L140:
	.word	-1,.L89,0,.L141-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_StartGroupConversion')
	.sect	'.debug_info'
.L142:
	.word	618
	.half	3
	.word	.L143
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L145,.L144
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_StartGroupConversion',0,1,192,14,6,1,1,1
	.word	.L91,.L317,.L90
	.byte	4
	.byte	'Group',0,1,192,14,51
	.word	.L318,.L319
	.byte	5
	.word	.L91,.L317
	.byte	6
	.byte	'lKernelId',0,1,194,14,10
	.word	.L252,.L320
	.byte	6
	.byte	'lCoreId',0,1,195,14,10
	.word	.L252,.L321
	.byte	6
	.byte	'lGroupId',0,1,196,14,17
	.word	.L297,.L322
	.byte	7
	.word	.L299,.L323,.L324
	.byte	8
	.word	.L302,.L325
	.byte	9
	.word	.L304,.L323,.L324
	.byte	0,7
	.word	.L305,.L324,.L326
	.byte	8
	.word	.L307,.L327
	.byte	9
	.word	.L309,.L324,.L326
	.byte	0,5
	.word	.L326,.L317
	.byte	6
	.byte	'lKernelDataPtr',0,1,169,15,29
	.word	.L292,.L328
	.byte	6
	.byte	'lGrpCfgPtr',0,1,170,15,33
	.word	.L329,.L330
	.byte	7
	.word	.L310,.L326,.L331
	.byte	8
	.word	.L312,.L332
	.byte	8
	.word	.L314,.L333
	.byte	9
	.word	.L316,.L326,.L331
	.byte	0,7
	.word	.L334,.L335,.L336
	.byte	8
	.word	.L337,.L338
	.byte	8
	.word	.L339,.L340
	.byte	9
	.word	.L341,.L335,.L336
	.byte	0,7
	.word	.L342,.L336,.L343
	.byte	8
	.word	.L344,.L345
	.byte	8
	.word	.L346,.L347
	.byte	9
	.word	.L348,.L336,.L343
	.byte	0,7
	.word	.L349,.L343,.L350
	.byte	8
	.word	.L351,.L352
	.byte	8
	.word	.L353,.L354
	.byte	9
	.word	.L355,.L343,.L350
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_StartGroupConversion')
	.sect	'.debug_abbrev'
.L143:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_StartGroupConversion')
	.sect	'.debug_line'
.L144:
	.word	.L1048-.L1047
.L1047:
	.half	3
	.word	.L1050-.L1049
.L1049:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1050:
	.byte	5,6,7,0,5,2
	.word	.L91
	.byte	3,191,14,1,5,29,9
	.half	.L777-.L91
	.byte	3,11,1,5,11,9
	.half	.L776-.L777
	.byte	1,5,19,9
	.half	.L323-.L776
	.byte	3,232,22,1,5,34,9
	.half	.L324-.L323
	.byte	3,33,1,5,11,9
	.half	.L326-.L324
	.byte	3,32,1,5,26,9
	.half	.L1051-.L326
	.byte	1,5,55,9
	.half	.L1052-.L1051
	.byte	1,5,35,9
	.half	.L778-.L1052
	.byte	1,5,55,9
	.half	.L1053-.L778
	.byte	1,5,63,9
	.half	.L1054-.L1053
	.byte	1,5,34,9
	.half	.L1055-.L1054
	.byte	1,5,57,9
	.half	.L331-.L1055
	.byte	3,188,105,1,5,25,9
	.half	.L1056-.L331
	.byte	3,127,1,5,50,9
	.half	.L1057-.L1056
	.byte	1,5,35,9
	.half	.L1058-.L1057
	.byte	3,1,1,5,46,9
	.half	.L1059-.L1058
	.byte	1,5,57,9
	.half	.L1060-.L1059
	.byte	1,5,38,9
	.half	.L779-.L1060
	.byte	3,18,1,5,3,9
	.half	.L335-.L779
	.byte	3,143,23,1,9
	.half	.L336-.L335
	.byte	3,234,1,1,9
	.half	.L343-.L336
	.byte	3,41,1,5,41,9
	.half	.L350-.L343
	.byte	3,240,102,1,5,51,9
	.half	.L1061-.L350
	.byte	1,5,42,9
	.half	.L1062-.L1061
	.byte	3,3,1,5,31,9
	.half	.L1063-.L1062
	.byte	1,5,70,9
	.half	.L1064-.L1063
	.byte	1,5,33,9
	.half	.L1065-.L1064
	.byte	3,24,1,5,52,9
	.half	.L1066-.L1065
	.byte	3,4,1,5,42,9
	.half	.L781-.L1066
	.byte	3,3,1,5,31,9
	.half	.L1067-.L781
	.byte	1,5,70,9
	.half	.L1068-.L1067
	.byte	3,1,1,5,74,9
	.half	.L1069-.L1068
	.byte	3,127,1,5,63,9
	.half	.L1070-.L1069
	.byte	3,5,1,5,1,9
	.half	.L146-.L1070
	.byte	3,4,0,1,1
.L1048:
	.sdecl	'.debug_ranges',debug,cluster('Adc_StartGroupConversion')
	.sect	'.debug_ranges'
.L145:
	.word	-1,.L91,0,.L146-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_StopGroupConversion')
	.sect	'.debug_info'
.L147:
	.word	761
	.half	3
	.word	.L148
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L150,.L149
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_StopGroupConversion',0,1,160,16,6,1,1,1
	.word	.L93,.L356,.L92
	.byte	4
	.byte	'Group',0,1,160,16,50
	.word	.L357,.L358
	.byte	5
	.word	.L93,.L356
	.byte	6
	.byte	'lKernelId',0,1,162,16,10
	.word	.L252,.L359
	.byte	6
	.byte	'lCoreId',0,1,163,16,10
	.word	.L252,.L360
	.byte	6
	.byte	'lGroupId',0,1,164,16,17
	.word	.L297,.L361
	.byte	7
	.word	.L299,.L362,.L363
	.byte	8
	.word	.L302,.L364
	.byte	9
	.word	.L304,.L362,.L363
	.byte	0,7
	.word	.L305,.L363,.L365
	.byte	8
	.word	.L307,.L366
	.byte	9
	.word	.L309,.L363,.L365
	.byte	0,5
	.word	.L365,.L356
	.byte	6
	.byte	'lKernelDataPtr',0,1,137,17,29
	.word	.L292,.L367
	.byte	6
	.byte	'lGrpCfgPtr',0,1,138,17,33
	.word	.L329,.L368
	.byte	7
	.word	.L310,.L365,.L369
	.byte	8
	.word	.L312,.L370
	.byte	8
	.word	.L314,.L371
	.byte	9
	.word	.L316,.L365,.L369
	.byte	0,7
	.word	.L372,.L373,.L374
	.byte	8
	.word	.L375,.L376
	.byte	8
	.word	.L377,.L378
	.byte	9
	.word	.L379,.L373,.L374
	.byte	0,7
	.word	.L380,.L381,.L382
	.byte	8
	.word	.L383,.L384
	.byte	8
	.word	.L385,.L386
	.byte	8
	.word	.L387,.L388
	.byte	9
	.word	.L389,.L381,.L382
	.byte	0,7
	.word	.L390,.L391,.L392
	.byte	8
	.word	.L393,.L394
	.byte	8
	.word	.L395,.L396
	.byte	9
	.word	.L397,.L391,.L392
	.byte	0,7
	.word	.L342,.L392,.L398
	.byte	8
	.word	.L344,.L399
	.byte	8
	.word	.L346,.L400
	.byte	9
	.word	.L348,.L392,.L398
	.byte	0,7
	.word	.L349,.L398,.L401
	.byte	8
	.word	.L351,.L402
	.byte	8
	.word	.L353,.L403
	.byte	9
	.word	.L355,.L398,.L401
	.byte	0,7
	.word	.L404,.L405,.L406
	.byte	8
	.word	.L407,.L408
	.byte	8
	.word	.L409,.L410
	.byte	9
	.word	.L411,.L405,.L406
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_StopGroupConversion')
	.sect	'.debug_abbrev'
.L148:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_StopGroupConversion')
	.sect	'.debug_line'
.L149:
	.word	.L1072-.L1071
.L1071:
	.half	3
	.word	.L1074-.L1073
.L1073:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1074:
	.byte	5,6,7,0,5,2
	.word	.L93
	.byte	3,159,16,1,5,29,9
	.half	.L783-.L93
	.byte	3,11,1,5,19,9
	.half	.L362-.L783
	.byte	3,136,21,1,5,34,9
	.half	.L363-.L362
	.byte	3,33,1,5,11,9
	.half	.L365-.L363
	.byte	3,32,1,5,26,9
	.half	.L1075-.L365
	.byte	1,5,55,9
	.half	.L1076-.L1075
	.byte	1,5,35,9
	.half	.L784-.L1076
	.byte	1,5,55,9
	.half	.L1077-.L784
	.byte	1,5,63,9
	.half	.L1078-.L1077
	.byte	1,5,34,9
	.half	.L1079-.L1078
	.byte	1,5,55,9
	.half	.L369-.L1079
	.byte	3,156,107,1,5,25,9
	.half	.L1080-.L369
	.byte	3,127,1,5,50,9
	.half	.L1081-.L1080
	.byte	1,5,33,9
	.half	.L1082-.L1081
	.byte	3,1,1,5,44,9
	.half	.L1083-.L1082
	.byte	1,5,55,9
	.half	.L1084-.L1083
	.byte	1,5,38,9
	.half	.L785-.L1084
	.byte	3,20,1,5,19,9
	.half	.L373-.L785
	.byte	3,182,24,1,5,9,9
	.half	.L374-.L373
	.byte	3,208,103,1,5,44,7,9
	.half	.L1085-.L374
	.byte	3,3,1,5,33,9
	.half	.L1086-.L1085
	.byte	1,5,15,9
	.half	.L1087-.L1086
	.byte	3,1,1,5,76,9
	.half	.L1088-.L1087
	.byte	3,127,1,5,35,9
	.half	.L1089-.L1088
	.byte	3,4,1,5,65,9
	.half	.L1090-.L1089
	.byte	3,3,1,5,44,9
	.half	.L788-.L1090
	.byte	3,3,1,5,24,9
	.half	.L381-.L788
	.byte	3,208,55,1,5,49,9
	.half	.L786-.L381
	.byte	1,5,47,9
	.half	.L1091-.L786
	.byte	1,5,31,9
	.half	.L382-.L1091
	.byte	3,167,72,1,5,35,9
	.half	.L18-.L382
	.byte	3,30,1,5,34,9
	.half	.L19-.L18
	.byte	3,6,1,5,3,9
	.half	.L391-.L19
	.byte	3,193,22,1,9
	.half	.L392-.L391
	.byte	3,40,1,9
	.half	.L398-.L392
	.byte	3,41,1,5,41,9
	.half	.L401-.L398
	.byte	3,254,104,1,5,11,9
	.half	.L1092-.L401
	.byte	3,1,1,5,3,9
	.half	.L405-.L1092
	.byte	3,171,23,1,5,33,9
	.half	.L406-.L405
	.byte	3,225,104,1,5,1,7,9
	.half	.L151-.L406
	.byte	3,4,0,1,1
.L1072:
	.sdecl	'.debug_ranges',debug,cluster('Adc_StopGroupConversion')
	.sect	'.debug_ranges'
.L150:
	.word	-1,.L93,0,.L151-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_ReadGroup')
	.sect	'.debug_info'
.L152:
	.word	875
	.half	3
	.word	.L153
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L155,.L154
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_ReadGroup',0,1,166,18,16
	.word	.L286
	.byte	1,1,1
	.word	.L95,.L412,.L94
	.byte	4
	.byte	'Group',0,1,166,18,50
	.word	.L413,.L414
	.byte	4
	.byte	'DataBufferPtr',0,1,167,18,57
	.word	.L415,.L416
	.byte	5
	.word	.L95,.L412
	.byte	6
	.byte	'lGrpCfgPtr',0,1,169,18,27
	.word	.L329,.L417
	.byte	6
	.byte	'lKernelDataPtr',0,1,170,18,23
	.word	.L292,.L418
	.byte	6
	.byte	'lCurrentResultPtr',0,1,171,18,29
	.word	.L419,.L420
	.byte	6
	.byte	'lKernelId',0,1,172,18,10
	.word	.L252,.L421
	.byte	6
	.byte	'lBusyFlag',0,1,172,18,21
	.word	.L252,.L422
	.byte	6
	.byte	'lResultFlag',0,1,172,18,32
	.word	.L252,.L423
	.byte	6
	.byte	'lCoreId',0,1,172,18,45
	.word	.L252,.L424
	.byte	6
	.byte	'lRetVal',0,1,173,18,18
	.word	.L286,.L425
	.byte	6
	.byte	'lGroupId',0,1,174,18,17
	.word	.L297,.L426
	.byte	6
	.byte	'lNoofValidConv',0,1,175,18,27
	.word	.L286,.L427
	.byte	6
	.byte	'lNumOfSamples',0,1,175,18,43
	.word	.L286,.L428
	.byte	6
	.byte	'lNoOfChannels',0,1,176,18,9
	.word	.L286,.L429
	.byte	6
	.byte	'lCount',0,1,176,18,24
	.word	.L286,.L430
	.byte	7
	.word	.L299,.L431,.L432
	.byte	8
	.word	.L302,.L433
	.byte	9
	.word	.L304,.L431,.L432
	.byte	0,7
	.word	.L305,.L432,.L434
	.byte	8
	.word	.L307,.L435
	.byte	9
	.word	.L309,.L432,.L434
	.byte	0,7
	.word	.L310,.L434,.L436
	.byte	8
	.word	.L312,.L437
	.byte	8
	.word	.L314,.L438
	.byte	9
	.word	.L316,.L434,.L436
	.byte	0,7
	.word	.L372,.L439,.L440
	.byte	8
	.word	.L375,.L441
	.byte	8
	.word	.L377,.L442
	.byte	9
	.word	.L379,.L439,.L440
	.byte	0,7
	.word	.L443,.L440,.L444
	.byte	8
	.word	.L445,.L446
	.byte	8
	.word	.L447,.L448
	.byte	9
	.word	.L449,.L440,.L444
	.byte	0,7
	.word	.L342,.L450,.L451
	.byte	8
	.word	.L344,.L452
	.byte	8
	.word	.L346,.L453
	.byte	9
	.word	.L348,.L450,.L451
	.byte	0,7
	.word	.L349,.L451,.L454
	.byte	8
	.word	.L351,.L455
	.byte	8
	.word	.L353,.L456
	.byte	9
	.word	.L355,.L451,.L454
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_ReadGroup')
	.sect	'.debug_abbrev'
.L153:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_ReadGroup')
	.sect	'.debug_line'
.L154:
	.word	.L1094-.L1093
.L1093:
	.half	3
	.word	.L1096-.L1095
.L1095:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1096:
	.byte	5,16,7,0,5,2
	.word	.L95
	.byte	3,165,18,1,5,29,9
	.half	.L790-.L95
	.byte	3,17,1,5,19,9
	.half	.L431-.L790
	.byte	3,252,18,1,5,34,9
	.half	.L432-.L431
	.byte	3,33,1,5,11,9
	.half	.L434-.L432
	.byte	3,32,1,5,26,9
	.half	.L1097-.L434
	.byte	1,5,55,9
	.half	.L1098-.L1097
	.byte	1,5,35,9
	.half	.L1099-.L1098
	.byte	1,5,55,9
	.half	.L1100-.L1099
	.byte	1,5,63,9
	.half	.L1101-.L1100
	.byte	1,5,34,9
	.half	.L1102-.L1101
	.byte	1,5,56,9
	.half	.L436-.L1102
	.byte	3,252,108,1,5,22,9
	.half	.L1103-.L436
	.byte	3,127,1,5,47,9
	.half	.L1104-.L1103
	.byte	1,5,34,9
	.half	.L1105-.L1104
	.byte	3,1,1,5,45,9
	.half	.L1106-.L1105
	.byte	1,5,56,9
	.half	.L1107-.L1106
	.byte	1,5,33,9
	.half	.L792-.L1107
	.byte	3,3,1,5,35,9
	.half	.L794-.L792
	.byte	3,25,1,5,38,9
	.half	.L795-.L794
	.byte	3,27,1,5,19,9
	.half	.L439-.L795
	.byte	3,179,22,1,9
	.half	.L440-.L439
	.byte	3,36,1,5,56,9
	.half	.L444-.L440
	.byte	3,178,105,1,5,10,9
	.half	.L797-.L444
	.byte	3,4,1,5,52,7,9
	.half	.L1108-.L797
	.byte	1,5,17,7,9
	.half	.L1109-.L1108
	.byte	3,4,1,5,27,9
	.half	.L798-.L1109
	.byte	1,5,57,9
	.half	.L20-.L798
	.byte	3,202,0,1,5,47,9
	.half	.L1110-.L20
	.byte	3,1,1,5,20,9
	.half	.L799-.L1110
	.byte	3,4,1,5,48,9
	.half	.L801-.L799
	.byte	1,5,24,9
	.half	.L24-.L801
	.byte	3,4,1,5,52,9
	.half	.L1111-.L24
	.byte	3,1,1,5,37,9
	.half	.L1112-.L1111
	.byte	1,5,33,9
	.half	.L1113-.L1112
	.byte	3,127,1,5,56,9
	.half	.L1114-.L1113
	.byte	3,124,1,5,48,9
	.half	.L23-.L1114
	.byte	1,5,3,7,9
	.half	.L450-.L23
	.byte	3,180,20,1,9
	.half	.L451-.L450
	.byte	3,41,1,5,9,9
	.half	.L454-.L451
	.byte	3,194,107,1,5,43,7,9
	.half	.L1115-.L454
	.byte	3,5,1,5,54,9
	.half	.L1116-.L1115
	.byte	1,5,31,9
	.half	.L22-.L1116
	.byte	3,9,1,5,3,9
	.half	.L796-.L22
	.byte	3,3,1,5,1,9
	.half	.L803-.L796
	.byte	3,1,1,7,9
	.half	.L156-.L803
	.byte	0,1,1
.L1094:
	.sdecl	'.debug_ranges',debug,cluster('Adc_ReadGroup')
	.sect	'.debug_ranges'
.L155:
	.word	-1,.L95,0,.L156-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_EnableGroupNotification')
	.sect	'.debug_info'
.L157:
	.word	497
	.half	3
	.word	.L158
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L160,.L159
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_EnableGroupNotification',0,1,184,24,6,1,1,1
	.word	.L97,.L457,.L96
	.byte	4
	.byte	'Group',0,1,184,24,54
	.word	.L458,.L459
	.byte	5
	.word	.L97,.L457
	.byte	6
	.byte	'lKernelDataPtr',0,1,186,24,23
	.word	.L292,.L460
	.byte	6
	.byte	'lKernelId',0,1,187,24,10
	.word	.L252,.L461
	.byte	6
	.byte	'lCoreId',0,1,188,24,10
	.word	.L252,.L462
	.byte	6
	.byte	'lGroupId',0,1,189,24,17
	.word	.L297,.L463
	.byte	7
	.word	.L299,.L464,.L465
	.byte	8
	.word	.L302,.L466
	.byte	9
	.word	.L304,.L464,.L465
	.byte	0,7
	.word	.L305,.L465,.L467
	.byte	8
	.word	.L307,.L468
	.byte	9
	.word	.L309,.L465,.L467
	.byte	0,7
	.word	.L310,.L467,.L469
	.byte	8
	.word	.L312,.L470
	.byte	8
	.word	.L314,.L471
	.byte	9
	.word	.L316,.L467,.L469
	.byte	0,7
	.word	.L472,.L469,.L473
	.byte	8
	.word	.L474,.L475
	.byte	8
	.word	.L476,.L477
	.byte	9
	.word	.L478,.L469,.L473
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_EnableGroupNotification')
	.sect	'.debug_abbrev'
.L158:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_EnableGroupNotification')
	.sect	'.debug_line'
.L159:
	.word	.L1118-.L1117
.L1117:
	.half	3
	.word	.L1120-.L1119
.L1119:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1120:
	.byte	5,6,7,0,5,2
	.word	.L97
	.byte	3,183,24,1,5,29,9
	.half	.L804-.L97
	.byte	3,8,1,5,19,9
	.half	.L464-.L804
	.byte	3,243,12,1,5,34,9
	.half	.L465-.L464
	.byte	3,33,1,5,11,9
	.half	.L467-.L465
	.byte	3,32,1,5,26,9
	.half	.L1121-.L467
	.byte	1,5,55,9
	.half	.L1122-.L1121
	.byte	1,5,35,9
	.half	.L1123-.L1122
	.byte	1,5,55,9
	.half	.L1124-.L1123
	.byte	1,5,63,9
	.half	.L1125-.L1124
	.byte	1,5,34,9
	.half	.L1126-.L1125
	.byte	1,5,3,9
	.half	.L469-.L1126
	.byte	3,215,1,1,5,1,9
	.half	.L473-.L469
	.byte	3,142,113,1,7,9
	.half	.L161-.L473
	.byte	0,1,1
.L1118:
	.sdecl	'.debug_ranges',debug,cluster('Adc_EnableGroupNotification')
	.sect	'.debug_ranges'
.L160:
	.word	-1,.L97,0,.L161-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_DisableGroupNotification')
	.sect	'.debug_info'
.L162:
	.word	498
	.half	3
	.word	.L163
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L165,.L164
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_DisableGroupNotification',0,1,249,24,6,1,1,1
	.word	.L99,.L479,.L98
	.byte	4
	.byte	'Group',0,1,249,24,55
	.word	.L480,.L481
	.byte	5
	.word	.L99,.L479
	.byte	6
	.byte	'lKernelDataPtr',0,1,251,24,23
	.word	.L292,.L482
	.byte	6
	.byte	'lKernelId',0,1,252,24,10
	.word	.L252,.L483
	.byte	6
	.byte	'lCoreId',0,1,252,24,21
	.word	.L252,.L484
	.byte	6
	.byte	'lGroupId',0,1,253,24,17
	.word	.L297,.L485
	.byte	7
	.word	.L299,.L486,.L487
	.byte	8
	.word	.L302,.L488
	.byte	9
	.word	.L304,.L486,.L487
	.byte	0,7
	.word	.L305,.L487,.L489
	.byte	8
	.word	.L307,.L490
	.byte	9
	.word	.L309,.L487,.L489
	.byte	0,7
	.word	.L310,.L489,.L491
	.byte	8
	.word	.L312,.L492
	.byte	8
	.word	.L314,.L493
	.byte	9
	.word	.L316,.L489,.L491
	.byte	0,7
	.word	.L404,.L491,.L494
	.byte	8
	.word	.L407,.L495
	.byte	8
	.word	.L409,.L496
	.byte	9
	.word	.L411,.L491,.L494
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_DisableGroupNotification')
	.sect	'.debug_abbrev'
.L163:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_DisableGroupNotification')
	.sect	'.debug_line'
.L164:
	.word	.L1128-.L1127
.L1127:
	.half	3
	.word	.L1130-.L1129
.L1129:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1130:
	.byte	5,6,7,0,5,2
	.word	.L99
	.byte	3,248,24,1,5,29,9
	.half	.L808-.L99
	.byte	3,7,1,5,19,9
	.half	.L486-.L808
	.byte	3,179,12,1,5,34,9
	.half	.L487-.L486
	.byte	3,33,1,5,11,9
	.half	.L489-.L487
	.byte	3,32,1,5,26,9
	.half	.L1131-.L489
	.byte	1,5,55,9
	.half	.L1132-.L1131
	.byte	1,5,35,9
	.half	.L1133-.L1132
	.byte	1,5,55,9
	.half	.L1134-.L1133
	.byte	1,5,63,9
	.half	.L1135-.L1134
	.byte	1,5,34,9
	.half	.L1136-.L1135
	.byte	1,5,3,9
	.half	.L491-.L1136
	.byte	3,154,3,1,5,1,9
	.half	.L494-.L491
	.byte	3,139,112,1,7,9
	.half	.L166-.L494
	.byte	0,1,1
.L1128:
	.sdecl	'.debug_ranges',debug,cluster('Adc_DisableGroupNotification')
	.sect	'.debug_ranges'
.L165:
	.word	-1,.L99,0,.L166-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_GetGroupStatus')
	.sect	'.debug_info'
.L167:
	.word	683
	.half	3
	.word	.L168
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L170,.L169
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_GetGroupStatus',0,1,183,25,16
	.word	.L286
	.byte	1,1,1
	.word	.L101,.L497,.L100
	.byte	4
	.byte	'Group',0,1,183,25,55
	.word	.L498,.L499
	.byte	5
	.word	.L101,.L497
	.byte	6
	.byte	'lKernelDataPtr',0,1,185,25,29
	.word	.L500,.L501
	.byte	6
	.byte	'lKernelId',0,1,186,25,10
	.word	.L252,.L502
	.byte	6
	.byte	'lStrmCompletedFlag',0,1,186,25,21
	.word	.L252,.L503
	.byte	6
	.byte	'lResultFlag',0,1,186,25,41
	.word	.L252,.L504
	.byte	6
	.byte	'lBusyFlag',0,1,186,25,54
	.word	.L252,.L505
	.byte	6
	.byte	'lCoreId',0,1,186,25,65
	.word	.L252,.L506
	.byte	6
	.byte	'lGroupId',0,1,187,25,17
	.word	.L297,.L507
	.byte	6
	.byte	'lRetVal',0,1,188,25,18
	.word	.L286,.L508
	.byte	7
	.word	.L299,.L509,.L510
	.byte	8
	.word	.L302,.L511
	.byte	9
	.word	.L304,.L509,.L510
	.byte	0,7
	.word	.L305,.L510,.L512
	.byte	8
	.word	.L307,.L513
	.byte	9
	.word	.L309,.L510,.L512
	.byte	0,7
	.word	.L310,.L512,.L514
	.byte	8
	.word	.L312,.L515
	.byte	8
	.word	.L314,.L516
	.byte	9
	.word	.L316,.L512,.L514
	.byte	0,7
	.word	.L517,.L518,.L519
	.byte	8
	.word	.L520,.L521
	.byte	8
	.word	.L522,.L523
	.byte	9
	.word	.L524,.L518,.L519
	.byte	0,7
	.word	.L443,.L519,.L525
	.byte	8
	.word	.L445,.L526
	.byte	8
	.word	.L447,.L527
	.byte	9
	.word	.L449,.L519,.L525
	.byte	0,7
	.word	.L372,.L525,.L528
	.byte	8
	.word	.L375,.L529
	.byte	8
	.word	.L377,.L530
	.byte	9
	.word	.L379,.L525,.L528
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_GetGroupStatus')
	.sect	'.debug_abbrev'
.L168:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_GetGroupStatus')
	.sect	'.debug_line'
.L169:
	.word	.L1138-.L1137
.L1137:
	.half	3
	.word	.L1140-.L1139
.L1139:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1140:
	.byte	5,16,7,0,5,2
	.word	.L101
	.byte	3,182,25,1,5,29,9
	.half	.L812-.L101
	.byte	3,8,1,5,19,9
	.half	.L509-.L812
	.byte	3,244,11,1,5,34,9
	.half	.L510-.L509
	.byte	3,33,1,5,11,9
	.half	.L512-.L510
	.byte	3,32,1,5,26,9
	.half	.L1141-.L512
	.byte	1,5,55,9
	.half	.L1142-.L1141
	.byte	1,5,35,9
	.half	.L813-.L1142
	.byte	1,5,55,9
	.half	.L1143-.L813
	.byte	1,5,63,9
	.half	.L1144-.L1143
	.byte	1,5,34,9
	.half	.L1145-.L1144
	.byte	1,5,30,9
	.half	.L514-.L1145
	.byte	3,234,115,1,5,19,9
	.half	.L518-.L514
	.byte	3,195,16,1,9
	.half	.L519-.L518
	.byte	3,93,1,9
	.half	.L525-.L519
	.byte	3,92,1,5,29,9
	.half	.L528-.L525
	.byte	3,146,112,1,5,5,9
	.half	.L1146-.L528
	.byte	3,4,1,5,15,7,9
	.half	.L1147-.L1146
	.byte	3,4,1,5,1,9
	.half	.L815-.L1147
	.byte	3,26,1,5,10,7,9
	.half	.L27-.L815
	.byte	3,106,1,5,15,7,9
	.half	.L1148-.L27
	.byte	3,4,1,5,1,9
	.half	.L816-.L1148
	.byte	3,18,1,5,34,7,9
	.half	.L29-.L816
	.byte	3,114,1,5,1,9
	.half	.L817-.L29
	.byte	3,14,1,7,9
	.half	.L171-.L817
	.byte	0,1,1
.L1138:
	.sdecl	'.debug_ranges',debug,cluster('Adc_GetGroupStatus')
	.sect	'.debug_ranges'
.L170:
	.word	-1,.L101,0,.L171-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_GetStreamLastPointer')
	.sect	'.debug_info'
.L172:
	.word	838
	.half	3
	.word	.L173
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L175,.L174
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_GetStreamLastPointer',0,1,183,26,25
	.word	.L286
	.byte	1,1,1
	.word	.L103,.L531,.L102
	.byte	4
	.byte	'Group',0,1,184,26,28
	.word	.L532,.L533
	.byte	4
	.byte	'PtrToSamplePtr',0,1,184,26,64
	.word	.L534,.L535
	.byte	5
	.word	.L103,.L531
	.byte	6
	.byte	'lGrpCfgPtr',0,1,186,26,27
	.word	.L329,.L536
	.byte	6
	.byte	'lKernelDataPtr',0,1,187,26,23
	.word	.L292,.L537
	.byte	6
	.byte	'lNoOfValidConv',0,1,188,26,27
	.word	.L286,.L538
	.byte	6
	.byte	'lKernelId',0,1,189,26,10
	.word	.L252,.L539
	.byte	6
	.byte	'lBusyFlag',0,1,189,26,21
	.word	.L252,.L540
	.byte	6
	.byte	'lStrmCompletedFlag',0,1,189,26,32
	.word	.L252,.L541
	.byte	6
	.byte	'lResultFlag',0,1,189,26,52
	.word	.L252,.L542
	.byte	6
	.byte	'lCoreId',0,1,189,26,65
	.word	.L252,.L543
	.byte	6
	.byte	'lGroupId',0,1,190,26,17
	.word	.L297,.L544
	.byte	7
	.word	.L299,.L545,.L546
	.byte	8
	.word	.L302,.L547
	.byte	9
	.word	.L304,.L545,.L546
	.byte	0,7
	.word	.L305,.L546,.L548
	.byte	8
	.word	.L307,.L549
	.byte	9
	.word	.L309,.L546,.L548
	.byte	0,7
	.word	.L310,.L548,.L550
	.byte	8
	.word	.L312,.L551
	.byte	8
	.word	.L314,.L552
	.byte	9
	.word	.L316,.L548,.L550
	.byte	0,7
	.word	.L517,.L553,.L554
	.byte	8
	.word	.L520,.L555
	.byte	8
	.word	.L522,.L556
	.byte	9
	.word	.L524,.L553,.L554
	.byte	0,7
	.word	.L443,.L554,.L557
	.byte	8
	.word	.L445,.L558
	.byte	8
	.word	.L447,.L559
	.byte	9
	.word	.L449,.L554,.L557
	.byte	0,7
	.word	.L372,.L557,.L560
	.byte	8
	.word	.L375,.L561
	.byte	8
	.word	.L377,.L562
	.byte	9
	.word	.L379,.L557,.L560
	.byte	0,7
	.word	.L342,.L32,.L563
	.byte	8
	.word	.L344,.L564
	.byte	8
	.word	.L346,.L565
	.byte	9
	.word	.L348,.L32,.L563
	.byte	0,7
	.word	.L349,.L563,.L566
	.byte	8
	.word	.L351,.L567
	.byte	8
	.word	.L353,.L568
	.byte	9
	.word	.L355,.L563,.L566
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_GetStreamLastPointer')
	.sect	'.debug_abbrev'
.L173:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_GetStreamLastPointer')
	.sect	'.debug_line'
.L174:
	.word	.L1150-.L1149
.L1149:
	.half	3
	.word	.L1152-.L1151
.L1151:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1152:
	.byte	5,25,7,0,5,2
	.word	.L103
	.byte	3,182,26,1,5,29,9
	.half	.L819-.L103
	.byte	3,14,1,5,19,9
	.half	.L545-.L819
	.byte	3,238,10,1,5,34,9
	.half	.L546-.L545
	.byte	3,33,1,5,11,9
	.half	.L548-.L546
	.byte	3,32,1,5,26,9
	.half	.L1153-.L548
	.byte	1,5,55,9
	.half	.L1154-.L1153
	.byte	1,5,35,9
	.half	.L1155-.L1154
	.byte	1,5,55,9
	.half	.L1156-.L1155
	.byte	1,5,63,9
	.half	.L1157-.L1156
	.byte	1,5,34,9
	.half	.L1158-.L1157
	.byte	1,5,56,9
	.half	.L550-.L1158
	.byte	3,151,117,1,5,22,9
	.half	.L1159-.L550
	.byte	3,127,1,5,47,9
	.half	.L1160-.L1159
	.byte	1,5,34,9
	.half	.L1161-.L1160
	.byte	3,1,1,5,45,9
	.half	.L1162-.L1161
	.byte	1,5,56,9
	.half	.L1163-.L1162
	.byte	1,5,36,9
	.half	.L822-.L1163
	.byte	3,22,1,5,19,9
	.half	.L553-.L822
	.byte	3,128,15,1,9
	.half	.L554-.L553
	.byte	3,93,1,9
	.half	.L557-.L554
	.byte	3,92,1,5,56,9
	.half	.L560-.L557
	.byte	3,208,113,1,5,10,9
	.half	.L823-.L560
	.byte	3,4,1,5,52,7,9
	.half	.L1164-.L823
	.byte	1,5,33,7,9
	.half	.L1165-.L1164
	.byte	3,6,1,5,24,9
	.half	.L1166-.L1165
	.byte	3,4,1,5,27,9
	.half	.L1167-.L1166
	.byte	3,1,1,5,25,9
	.half	.L821-.L1167
	.byte	1,5,35,9
	.half	.L1168-.L821
	.byte	3,123,1,5,3,9
	.half	.L32-.L1168
	.byte	3,135,13,1,9
	.half	.L563-.L32
	.byte	3,41,1,5,9,9
	.half	.L566-.L563
	.byte	3,227,114,1,5,43,7,9
	.half	.L1169-.L566
	.byte	3,4,1,5,54,9
	.half	.L1170-.L1169
	.byte	1,5,33,9
	.half	.L35-.L1170
	.byte	3,5,1,5,58,9
	.half	.L1171-.L35
	.byte	3,5,1,5,9,9
	.half	.L1172-.L1171
	.byte	3,1,1,5,25,9
	.half	.L1173-.L1172
	.byte	3,127,1,5,9,9
	.half	.L1174-.L1173
	.byte	3,5,1,5,38,7,9
	.half	.L1175-.L1174
	.byte	3,5,1,5,3,9
	.half	.L34-.L1175
	.byte	3,5,1,5,1,9
	.half	.L825-.L34
	.byte	3,1,1,7,9
	.half	.L176-.L825
	.byte	0,1,1
.L1150:
	.sdecl	'.debug_ranges',debug,cluster('Adc_GetStreamLastPointer')
	.sect	'.debug_ranges'
.L175:
	.word	-1,.L103,0,.L176-.L103,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_TriggerStartupCal')
	.sect	'.debug_info'
.L177:
	.word	268
	.half	3
	.word	.L178
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L180,.L179
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_TriggerStartupCal',0,1,171,32,16
	.word	.L286
	.byte	1,1,1
	.word	.L105,.L569,.L104
	.byte	4
	.word	.L105,.L569
	.byte	5
	.byte	'lRetVal',0,1,173,32,18
	.word	.L286,.L570
	.byte	6
	.word	.L571,.L572,.L573
	.byte	7
	.word	.L574,.L572,.L573
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_TriggerStartupCal')
	.sect	'.debug_abbrev'
.L178:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_TriggerStartupCal')
	.sect	'.debug_line'
.L179:
	.word	.L1177-.L1176
.L1176:
	.half	3
	.word	.L1179-.L1178
.L1178:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1179:
	.byte	5,7,7,0,5,2
	.word	.L105
	.byte	3,203,32,1,5,3,9
	.half	.L572-.L105
	.byte	3,164,7,1,5,15,9
	.half	.L573-.L572
	.byte	3,227,120,1,5,1,9
	.half	.L826-.L573
	.byte	3,4,1,7,9
	.half	.L181-.L826
	.byte	0,1,1
.L1177:
	.sdecl	'.debug_ranges',debug,cluster('Adc_TriggerStartupCal')
	.sect	'.debug_ranges'
.L180:
	.word	-1,.L105,0,.L181-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_GetStartupCalStatus')
	.sect	'.debug_info'
.L182:
	.word	317
	.half	3
	.word	.L183
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L185,.L184
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_GetStartupCalStatus',0,1,252,32,28
	.word	.L286
	.byte	1,1,1
	.word	.L107,.L575,.L106
	.byte	4
	.word	.L107,.L575
	.byte	5
	.byte	'lKernelCount',0,1,254,32,10
	.word	.L252,.L576
	.byte	5
	.byte	'lCoreId',0,1,255,32,10
	.word	.L252,.L577
	.byte	5
	.byte	'lRetVal',0,1,130,33,30
	.word	.L286,.L578
	.byte	6
	.word	.L579,.L580,.L581
	.byte	7
	.word	.L582,.L580,.L581
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_GetStartupCalStatus')
	.sect	'.debug_abbrev'
.L183:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_GetStartupCalStatus')
	.sect	'.debug_line'
.L184:
	.word	.L1181-.L1180
.L1180:
	.half	3
	.word	.L1183-.L1182
.L1182:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1183:
	.byte	5,38,7,0,5,2
	.word	.L107
	.byte	3,129,33,1,5,29,9
	.half	.L827-.L107
	.byte	3,6,1,5,19,9
	.half	.L580-.L827
	.byte	3,225,9,1,5,5,9
	.half	.L581-.L580
	.byte	3,179,118,1,5,15,7,9
	.half	.L1184-.L581
	.byte	3,5,1,5,48,9
	.half	.L1185-.L1184
	.byte	1,5,24,9
	.half	.L39-.L1185
	.byte	3,6,1,5,12,9
	.half	.L829-.L39
	.byte	3,5,1,5,70,9
	.half	.L1186-.L829
	.byte	3,123,1,5,12,9
	.half	.L42-.L1186
	.byte	3,5,1,5,37,9
	.half	.L1187-.L42
	.byte	1,5,60,9
	.half	.L1188-.L1187
	.byte	1,5,9,9
	.half	.L1189-.L1188
	.byte	1,5,26,7,9
	.half	.L1190-.L1189
	.byte	3,6,1,5,29,9
	.half	.L1191-.L1190
	.byte	1,5,28,9
	.half	.L1192-.L1191
	.byte	1,5,51,9
	.half	.L1193-.L1192
	.byte	1,5,11,9
	.half	.L1194-.L1193
	.byte	1,5,21,7,9
	.half	.L1195-.L1194
	.byte	3,5,1,5,13,9
	.half	.L1196-.L1195
	.byte	3,1,1,5,23,9
	.half	.L43-.L1196
	.byte	3,112,1,5,70,9
	.half	.L41-.L43
	.byte	3,127,1,5,3,7,9
	.half	.L40-.L41
	.byte	3,23,1,5,1,9
	.half	.L828-.L40
	.byte	3,1,1,7,9
	.half	.L186-.L828
	.byte	0,1,1
.L1181:
	.sdecl	'.debug_ranges',debug,cluster('Adc_GetStartupCalStatus')
	.sect	'.debug_ranges'
.L185:
	.word	-1,.L107,0,.L186-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.debug_info'
.L187:
	.word	266
	.half	3
	.word	.L188
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L190,.L189
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_RS0EventInterruptHandler',0,1,221,33,6,1,1,1
	.word	.L109,.L583,.L108
	.byte	4
	.byte	'KernelId',0,1,221,33,48
	.word	.L584,.L585
	.byte	5
	.word	.L109,.L583
	.byte	6
	.byte	'lCoreId',0,1,223,33,10
	.word	.L252,.L586
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.debug_abbrev'
.L188:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.debug_line'
.L189:
	.word	.L1198-.L1197
.L1197:
	.half	3
	.word	.L1200-.L1199
.L1199:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1200:
	.byte	5,6,7,0,5,2
	.word	.L109
	.byte	3,220,33,1,5,29,9
	.half	.L831-.L109
	.byte	3,5,1,5,6,9
	.half	.L830-.L831
	.byte	3,6,1,5,3,9
	.half	.L1201-.L830
	.byte	1,5,8,7,9
	.half	.L1202-.L1201
	.byte	3,4,1,5,33,9
	.half	.L1203-.L1202
	.byte	1,5,5,9
	.half	.L1204-.L1203
	.byte	1,5,7,7,9
	.half	.L1205-.L1204
	.byte	3,4,1,5,37,7,9
	.half	.L1206-.L1205
	.byte	3,5,1,5,60,9
	.half	.L1207-.L1206
	.byte	1,5,9,9
	.half	.L1208-.L1207
	.byte	1,5,26,7,9
	.half	.L1209-.L1208
	.byte	3,5,1,5,29,9
	.half	.L1210-.L1209
	.byte	1,5,28,9
	.half	.L1211-.L1210
	.byte	1,5,47,9
	.half	.L1212-.L1211
	.byte	1,5,11,9
	.half	.L1213-.L1212
	.byte	1,5,25,7,9
	.half	.L1214-.L1213
	.byte	3,4,1,5,27,9
	.half	.L1215-.L1214
	.byte	1,5,50,9
	.half	.L1216-.L1215
	.byte	3,1,1,5,47,9
	.half	.L1217-.L1216
	.byte	3,127,1,5,43,9
	.half	.L1218-.L1217
	.byte	3,4,1,5,55,9
	.half	.L1219-.L1218
	.byte	1,5,1,9
	.half	.L47-.L1219
	.byte	3,41,1,7,9
	.half	.L191-.L47
	.byte	0,1,1
.L1198:
	.sdecl	'.debug_ranges',debug,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.debug_ranges'
.L190:
	.word	-1,.L109,0,.L191-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.debug_info'
.L192:
	.word	343
	.half	3
	.word	.L193
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L195,.L194
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lResetCoreGlobalVars',0,1,219,47,13,1,1
	.word	.L111,.L587,.L110
	.byte	4
	.byte	'CoreId',0,1,219,47,51
	.word	.L588,.L589
	.byte	5
	.word	.L111,.L587
	.byte	6
	.byte	'lKernelDataPtr',0,1,221,47,23
	.word	.L292,.L590
	.byte	6
	.byte	'lLoopCount',0,1,222,47,9
	.word	.L286,.L591
	.byte	6
	.byte	'lRsCount',0,1,222,47,21
	.word	.L286,.L592
	.byte	7
	.word	.L593
	.byte	6
	.byte	'lGroupCount',0,1,239,47,11
	.word	.L286,.L598
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.debug_abbrev'
.L193:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.debug_line'
.L194:
	.word	.L1221-.L1220
.L1220:
	.half	3
	.word	.L1223-.L1222
.L1222:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1223:
	.byte	5,18,7,0,5,2
	.word	.L111
	.byte	3,226,47,1,5,51,9
	.half	.L594-.L111
	.byte	3,17,1,5,11,9
	.half	.L1224-.L594
	.byte	3,2,1,5,56,9
	.half	.L835-.L1224
	.byte	3,33,1,5,59,9
	.half	.L1225-.L835
	.byte	3,3,1,5,33,9
	.half	.L1226-.L1225
	.byte	3,12,1,5,72,9
	.half	.L595-.L1226
	.byte	3,189,127,1,5,23,9
	.half	.L53-.L595
	.byte	3,3,1,5,38,9
	.half	.L1227-.L53
	.byte	1,5,47,9
	.half	.L1228-.L1227
	.byte	1,5,46,9
	.half	.L1229-.L1228
	.byte	1,5,21,9
	.half	.L596-.L1229
	.byte	3,10,1,5,62,9
	.half	.L836-.L596
	.byte	1,5,35,9
	.half	.L55-.L836
	.byte	3,4,1,5,49,9
	.half	.L1230-.L55
	.byte	1,5,39,9
	.half	.L1231-.L1230
	.byte	3,1,1,5,53,9
	.half	.L838-.L1231
	.byte	1,5,75,9
	.half	.L839-.L838
	.byte	3,123,1,5,62,9
	.half	.L54-.L839
	.byte	1,5,18,7,9
	.half	.L1232-.L54
	.byte	3,37,1,5,63,9
	.half	.L837-.L1232
	.byte	1,5,29,9
	.half	.L57-.L837
	.byte	3,2,1,5,54,9
	.half	.L1233-.L57
	.byte	1,5,57,9
	.half	.L1234-.L1233
	.byte	3,1,1,9
	.half	.L1235-.L1234
	.byte	3,2,1,5,73,9
	.half	.L1236-.L1235
	.byte	3,123,1,5,63,9
	.half	.L56-.L1236
	.byte	1,5,31,7,9
	.half	.L1237-.L56
	.byte	3,17,1,5,37,9
	.half	.L1238-.L1237
	.byte	3,1,1,5,46,9
	.half	.L1239-.L1238
	.byte	3,1,1,5,36,9
	.half	.L1240-.L1239
	.byte	3,1,1,5,40,9
	.half	.L1241-.L1240
	.byte	3,1,1,5,38,9
	.half	.L1242-.L1241
	.byte	3,1,1,5,17,9
	.half	.L597-.L1242
	.byte	3,185,127,1,5,44,9
	.half	.L52-.L597
	.byte	3,127,1,5,64,9
	.half	.L1243-.L52
	.byte	1,5,72,9
	.half	.L1244-.L1243
	.byte	1,5,1,7,9
	.half	.L1245-.L1244
	.byte	3,236,0,1,7,9
	.half	.L196-.L1245
	.byte	0,1,1
.L1221:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.debug_ranges'
.L195:
	.word	-1,.L111,0,.L196-.L111,0,0
.L593:
	.word	-1,.L111,.L594-.L111,.L595-.L111,.L596-.L111,.L597-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lKernelDeInit')
	.sect	'.debug_info'
.L197:
	.word	338
	.half	3
	.word	.L198
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L200,.L199
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lKernelDeInit',0,1,163,53,13,1,1
	.word	.L113,.L599,.L112
	.byte	4
	.byte	'KernelCfgPtr',0,1,163,53,62
	.word	.L600,.L601
	.byte	4
	.byte	'KernelId',0,1,164,53,44
	.word	.L602,.L603
	.byte	5
	.word	.L113,.L599
	.byte	6
	.byte	'lEvadcGroupPtr',0,1,166,53,16
	.word	.L282,.L604
	.byte	6
	.byte	'lLoopCount',0,1,167,53,9
	.word	.L286,.L605
	.byte	6
	.byte	'lChannelCount',0,1,167,53,21
	.word	.L286,.L606
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lKernelDeInit')
	.sect	'.debug_abbrev'
.L198:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_lKernelDeInit')
	.sect	'.debug_line'
.L199:
	.word	.L1247-.L1246
.L1246:
	.half	3
	.word	.L1249-.L1248
.L1248:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1249:
	.byte	5,33,7,0,5,2
	.word	.L113
	.byte	3,168,53,1,5,36,9
	.half	.L1250-.L113
	.byte	1,5,35,9
	.half	.L1251-.L1250
	.byte	1,5,18,9
	.half	.L841-.L1251
	.byte	3,30,1,5,77,9
	.half	.L842-.L841
	.byte	3,5,1,5,45,9
	.half	.L1252-.L842
	.byte	3,2,1,9
	.half	.L1253-.L1252
	.byte	3,1,1,5,60,9
	.half	.L1254-.L1253
	.byte	3,120,1,5,23,9
	.half	.L59-.L1254
	.byte	3,3,1,5,22,9
	.half	.L1255-.L59
	.byte	1,5,41,9
	.half	.L1256-.L1255
	.byte	1,5,43,9
	.half	.L1257-.L1256
	.byte	3,4,1,9
	.half	.L1258-.L1257
	.byte	3,1,1,5,72,9
	.half	.L1259-.L1258
	.byte	3,120,1,5,60,9
	.half	.L58-.L1259
	.byte	1,5,38,7,9
	.half	.L1260-.L58
	.byte	3,12,1,5,28,9
	.half	.L1261-.L1260
	.byte	1,5,3,9
	.half	.L1262-.L1261
	.byte	3,2,1,5,48,9
	.half	.L1263-.L1262
	.byte	3,2,1,5,27,9
	.half	.L1264-.L1263
	.byte	1,5,44,9
	.half	.L1265-.L1264
	.byte	3,3,1,5,34,9
	.half	.L843-.L1265
	.byte	1,5,36,9
	.half	.L1266-.L843
	.byte	3,1,1,5,34,9
	.half	.L1267-.L1266
	.byte	1,9
	.half	.L1268-.L1267
	.byte	3,1,1,9
	.half	.L1269-.L1268
	.byte	3,1,1,5,36,9
	.half	.L1270-.L1269
	.byte	3,1,1,5,34,9
	.half	.L1271-.L1270
	.byte	1,9
	.half	.L1272-.L1271
	.byte	3,1,1,9
	.half	.L1273-.L1272
	.byte	3,1,1,5,54,9
	.half	.L1274-.L1273
	.byte	3,1,1,5,34,9
	.half	.L1275-.L1274
	.byte	1,9
	.half	.L1276-.L1275
	.byte	3,2,1,5,17,9
	.half	.L1277-.L1276
	.byte	3,2,1,5,15,9
	.half	.L1278-.L1277
	.byte	1,5,51,9
	.half	.L845-.L1278
	.byte	3,13,1,5,57,9
	.half	.L847-.L845
	.byte	3,123,1,5,26,9
	.half	.L61-.L847
	.byte	3,5,1,5,41,9
	.half	.L848-.L61
	.byte	1,5,69,9
	.half	.L849-.L848
	.byte	3,123,1,5,57,9
	.half	.L60-.L849
	.byte	1,5,18,7,9
	.half	.L1279-.L60
	.byte	3,7,1,5,49,9
	.half	.L1280-.L1279
	.byte	3,4,1,5,20,9
	.half	.L846-.L1280
	.byte	3,125,1,5,51,9
	.half	.L1281-.L846
	.byte	1,5,24,9
	.half	.L63-.L1281
	.byte	3,3,1,5,39,9
	.half	.L851-.L63
	.byte	1,5,63,9
	.half	.L852-.L851
	.byte	3,125,1,5,51,9
	.half	.L62-.L852
	.byte	1,5,32,7,9
	.half	.L1282-.L62
	.byte	3,8,1,5,30,9
	.half	.L850-.L1282
	.byte	1,5,32,9
	.half	.L1283-.L850
	.byte	3,1,1,5,30,9
	.half	.L1284-.L1283
	.byte	1,9
	.half	.L1285-.L1284
	.byte	3,1,1,5,40,9
	.half	.L1286-.L1285
	.byte	3,1,1,5,30,9
	.half	.L1287-.L1286
	.byte	1,9
	.half	.L1288-.L1287
	.byte	3,1,1,9
	.half	.L1289-.L1288
	.byte	3,1,1,9
	.half	.L1290-.L1289
	.byte	3,1,1,5,3,9
	.half	.L1291-.L1290
	.byte	3,3,1,5,30,7,9
	.half	.L1292-.L1291
	.byte	3,4,1,9
	.half	.L1293-.L1292
	.byte	3,1,1,5,1,9
	.half	.L1294-.L1293
	.byte	3,8,1,5,32,7,9
	.half	.L64-.L1294
	.byte	3,126,1,5,30,9
	.half	.L1295-.L64
	.byte	1,5,1,9
	.half	.L1296-.L1295
	.byte	3,2,1,7,9
	.half	.L201-.L1296
	.byte	0,1,1
.L1247:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lKernelDeInit')
	.sect	'.debug_ranges'
.L200:
	.word	-1,.L113,0,.L201-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lPrepareGrpForStart')
	.sect	'.debug_info'
.L202:
	.word	534
	.half	3
	.word	.L203
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L205,.L204
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lPrepareGrpForStart',0,1,160,55,13,1,1
	.word	.L115,.L607,.L114
	.byte	4
	.byte	'KernelId',0,1,160,55,50
	.word	.L608,.L609
	.byte	4
	.byte	'GroupId',0,1,161,55,53
	.word	.L610,.L611
	.byte	4
	.byte	'CoreId',0,1,161,55,74
	.word	.L612,.L613
	.byte	5
	.word	.L115,.L607
	.byte	6
	.byte	'lEvadcGroupPtr',0,1,163,55,16
	.word	.L282,.L614
	.byte	6
	.byte	'lGrpCfgPtr',0,1,164,55,27
	.word	.L329,.L615
	.byte	6
	.byte	'lChCfgPtr',0,1,165,55,29
	.word	.L616,.L617
	.byte	6
	.byte	'lGrpDefCfgPtr',0,1,166,55,27
	.word	.L618,.L619
	.byte	6
	.byte	'lChctrCfgVal',0,1,167,55,10
	.word	.L252,.L620
	.byte	6
	.byte	'lAsChannelId',0,1,168,55,19
	.word	.L286,.L621
	.byte	6
	.byte	'lAnChannelId',0,1,168,55,33
	.word	.L286,.L622
	.byte	6
	.byte	'lResReg',0,1,169,55,21
	.word	.L286,.L623
	.byte	6
	.byte	'lNoOfChannels',0,1,170,55,9
	.word	.L286,.L624
	.byte	6
	.byte	'lChloopCount',0,1,170,55,24
	.word	.L286,.L625
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lPrepareGrpForStart')
	.sect	'.debug_abbrev'
.L203:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_lPrepareGrpForStart')
	.sect	'.debug_line'
.L204:
	.word	.L1298-.L1297
.L1297:
	.half	3
	.word	.L1300-.L1299
.L1299:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1300:
	.byte	5,33,7,0,5,2
	.word	.L115
	.byte	3,175,55,1,5,36,9
	.half	.L1301-.L115
	.byte	1,5,35,9
	.half	.L1302-.L1301
	.byte	1,5,27,9
	.half	.L853-.L1302
	.byte	3,3,1,5,18,9
	.half	.L1303-.L853
	.byte	3,127,1,5,43,9
	.half	.L1304-.L1303
	.byte	1,5,65,9
	.half	.L1305-.L1304
	.byte	1,5,75,9
	.half	.L1306-.L1305
	.byte	1,5,27,9
	.half	.L1307-.L1306
	.byte	3,1,1,5,72,9
	.half	.L854-.L1307
	.byte	3,2,1,5,29,9
	.half	.L855-.L854
	.byte	3,3,1,9
	.half	.L856-.L855
	.byte	3,2,1,5,44,9
	.half	.L857-.L856
	.byte	3,4,1,5,7,9
	.half	.L1308-.L857
	.byte	1,5,3,9
	.half	.L1309-.L1308
	.byte	1,5,29,7,9
	.half	.L1310-.L1309
	.byte	3,4,1,5,16,9
	.half	.L66-.L1310
	.byte	3,22,1,5,46,9
	.half	.L858-.L66
	.byte	3,32,1,5,33,9
	.half	.L67-.L858
	.byte	3,102,1,5,47,9
	.half	.L1311-.L67
	.byte	1,9
	.half	.L860-.L1311
	.byte	3,2,1,5,42,9
	.half	.L862-.L860
	.byte	3,14,1,5,30,9
	.half	.L863-.L862
	.byte	3,3,1,5,44,9
	.half	.L1312-.L863
	.byte	1,5,21,9
	.half	.L1313-.L1312
	.byte	3,1,1,5,61,9
	.half	.L861-.L1313
	.byte	3,127,1,5,26,9
	.half	.L1314-.L861
	.byte	3,6,1,5,43,9
	.half	.L1315-.L1314
	.byte	1,5,24,9
	.half	.L1316-.L1315
	.byte	3,1,1,5,36,9
	.half	.L864-.L1316
	.byte	1,5,17,9
	.half	.L865-.L864
	.byte	3,16,1,5,40,9
	.half	.L866-.L865
	.byte	3,1,1,5,1,7,9
	.half	.L1317-.L866
	.byte	3,23,1,7,9
	.half	.L206-.L1317
	.byte	0,1,1
.L1298:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lPrepareGrpForStart')
	.sect	'.debug_ranges'
.L205:
	.word	-1,.L115,0,.L206-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lStartSwConversion')
	.sect	'.debug_info'
.L207:
	.word	455
	.half	3
	.word	.L208
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L210,.L209
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lStartSwConversion',0,1,198,57,13,1,1
	.word	.L117,.L626,.L116
	.byte	4
	.byte	'GrpPtr',0,1,198,57,67
	.word	.L627,.L628
	.byte	4
	.byte	'KernelId',0,1,199,57,49
	.word	.L629,.L630
	.byte	4
	.byte	'ReqSrc',0,1,200,57,48
	.word	.L631,.L632
	.byte	5
	.word	.L117,.L626
	.byte	6
	.byte	'lEvadcGroupPtr',0,1,202,57,16
	.word	.L282,.L633
	.byte	6
	.byte	'lEvadcQPtr',0,1,203,57,18
	.word	.L634,.L635
	.byte	6
	.byte	'lGrpDefCfgPtr',0,1,204,57,27
	.word	.L618,.L636
	.byte	6
	.byte	'lConvMode',0,1,205,57,10
	.word	.L252,.L637
	.byte	6
	.byte	'lRsIntpt',0,1,205,57,21
	.word	.L252,.L638
	.byte	6
	.byte	'lNoOfChannels',0,1,206,57,9
	.word	.L286,.L639
	.byte	6
	.byte	'lChloopCount',0,1,206,57,24
	.word	.L286,.L640
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lStartSwConversion')
	.sect	'.debug_abbrev'
.L208:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_lStartSwConversion')
	.sect	'.debug_line'
.L209:
	.word	.L1319-.L1318
.L1318:
	.half	3
	.word	.L1321-.L1320
.L1320:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1321:
	.byte	5,33,7,0,5,2
	.word	.L117
	.byte	3,208,57,1,5,36,9
	.half	.L1322-.L117
	.byte	1,5,35,9
	.half	.L1323-.L1322
	.byte	1,5,29,9
	.half	.L868-.L1323
	.byte	3,3,1,5,31,9
	.half	.L1324-.L868
	.byte	1,5,44,9
	.half	.L1325-.L1324
	.byte	1,5,43,9
	.half	.L1326-.L1325
	.byte	1,5,25,9
	.half	.L869-.L1326
	.byte	3,3,1,5,73,9
	.half	.L870-.L869
	.byte	3,5,1,5,21,9
	.half	.L1327-.L870
	.byte	3,127,1,5,31,9
	.half	.L1328-.L1327
	.byte	3,5,1,5,49,9
	.half	.L1329-.L1328
	.byte	1,5,28,9
	.half	.L1330-.L1329
	.byte	1,5,44,9
	.half	.L1331-.L1330
	.byte	3,1,1,5,28,9
	.half	.L1332-.L1331
	.byte	1,5,44,9
	.half	.L1333-.L1332
	.byte	3,1,1,5,28,9
	.half	.L1334-.L1333
	.byte	1,5,41,9
	.half	.L1335-.L1334
	.byte	3,2,1,5,25,9
	.half	.L1336-.L1335
	.byte	1,5,12,9
	.half	.L1337-.L1336
	.byte	3,48,1,5,23,9
	.half	.L1338-.L1337
	.byte	1,5,14,9
	.half	.L871-.L1338
	.byte	3,30,1,5,25,9
	.half	.L873-.L871
	.byte	3,3,1,5,16,9
	.half	.L874-.L873
	.byte	3,1,1,5,22,9
	.half	.L876-.L874
	.byte	3,4,1,5,40,9
	.half	.L1339-.L876
	.byte	1,5,38,9
	.half	.L1340-.L1339
	.byte	1,5,23,9
	.half	.L1341-.L1340
	.byte	3,127,1,5,39,9
	.half	.L1342-.L1341
	.byte	3,5,1,5,51,9
	.half	.L875-.L1342
	.byte	1,5,45,9
	.half	.L69-.L875
	.byte	3,6,1,5,59,9
	.half	.L1343-.L69
	.byte	1,5,37,9
	.half	.L1344-.L1343
	.byte	3,127,1,5,59,9
	.half	.L1345-.L1344
	.byte	3,2,1,5,77,9
	.half	.L1346-.L1345
	.byte	3,127,1,5,24,9
	.half	.L1347-.L1346
	.byte	3,127,1,5,17,9
	.half	.L1348-.L1347
	.byte	3,3,1,5,51,9
	.half	.L68-.L1348
	.byte	3,120,1,5,34,7,9
	.half	.L1349-.L68
	.byte	3,14,1,5,36,9
	.half	.L872-.L1349
	.byte	3,1,1,5,50,9
	.half	.L1350-.L872
	.byte	1,5,45,9
	.half	.L1351-.L1350
	.byte	3,127,1,5,50,9
	.half	.L1352-.L1351
	.byte	3,2,1,5,68,9
	.half	.L1353-.L1352
	.byte	3,127,1,5,22,9
	.half	.L1354-.L1353
	.byte	3,127,1,5,23,9
	.half	.L1355-.L1354
	.byte	3,15,1,5,21,9
	.half	.L1356-.L1355
	.byte	1,5,1,9
	.half	.L1357-.L1356
	.byte	3,1,1,7,9
	.half	.L211-.L1357
	.byte	0,1,1
.L1319:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lStartSwConversion')
	.sect	'.debug_ranges'
.L210:
	.word	-1,.L117,0,.L211-.L117,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lStopConvRequest')
	.sect	'.debug_info'
.L212:
	.word	328
	.half	3
	.word	.L213
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L215,.L214
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lStopConvRequest',0,1,153,70,13,1,1
	.word	.L119,.L641,.L118
	.byte	4
	.byte	'GrpPtr',0,1,153,70,64
	.word	.L642,.L643
	.byte	4
	.byte	'KernelId',0,1,154,70,47
	.word	.L644,.L645
	.byte	4
	.byte	'ReqSrc',0,1,155,70,46
	.word	.L646,.L647
	.byte	5
	.word	.L119,.L641
	.byte	6
	.byte	'lEvadcQPtr',0,1,157,70,18
	.word	.L634,.L648
	.byte	6
	.byte	'lVadcGrpSrcPtr',0,1,162,70,26
	.word	.L649,.L650
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lStopConvRequest')
	.sect	'.debug_abbrev'
.L213:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_lStopConvRequest')
	.sect	'.debug_line'
.L214:
	.word	.L1359-.L1358
.L1358:
	.half	3
	.word	.L1361-.L1360
.L1360:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1361:
	.byte	5,13,7,0,5,2
	.word	.L119
	.byte	3,152,198,0,1,5,29,9
	.half	.L1362-.L119
	.byte	3,12,1,5,32,9
	.half	.L880-.L1362
	.byte	1,5,31,9
	.half	.L881-.L880
	.byte	1,5,44,9
	.half	.L882-.L881
	.byte	1,5,43,9
	.half	.L883-.L882
	.byte	1,5,20,9
	.half	.L1363-.L883
	.byte	3,3,1,5,26,9
	.half	.L1364-.L1363
	.byte	1,5,73,9
	.half	.L1365-.L1364
	.byte	3,4,1,5,21,9
	.half	.L1366-.L1365
	.byte	3,127,1,5,37,9
	.half	.L1367-.L1366
	.byte	3,212,0,1,5,40,9
	.half	.L884-.L1367
	.byte	1,5,39,9
	.half	.L885-.L884
	.byte	1,5,38,9
	.half	.L886-.L885
	.byte	3,43,1,5,30,9
	.half	.L887-.L886
	.byte	3,9,1,5,3,9
	.half	.L878-.L887
	.byte	3,10,1,5,29,9
	.half	.L1368-.L878
	.byte	3,8,1,5,40,9
	.half	.L1369-.L1368
	.byte	3,4,1,5,1,9
	.half	.L216-.L1369
	.byte	3,1,0,1,1
.L1359:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lStopConvRequest')
	.sect	'.debug_ranges'
.L215:
	.word	-1,.L119,0,.L216-.L119,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lClearGroupSfr')
	.sect	'.debug_info'
.L217:
	.word	453
	.half	3
	.word	.L218
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L220,.L219
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lClearGroupSfr',0,1,233,71,13,1,1
	.word	.L121,.L651,.L120
	.byte	4
	.byte	'GrpPtr',0,1,233,71,63
	.word	.L652,.L653
	.byte	4
	.byte	'KernelId',0,1,234,71,45
	.word	.L654,.L655
	.byte	4
	.byte	'ReqSrc',0,1,235,71,44
	.word	.L656,.L657
	.byte	5
	.word	.L121,.L651
	.byte	6
	.byte	'lEvadcGroupPtr',0,1,237,71,16
	.word	.L282,.L658
	.byte	6
	.byte	'lEvadcQPtr',0,1,238,71,18
	.word	.L634,.L659
	.byte	6
	.byte	'lGrpDefCfgPtr',0,1,239,71,27
	.word	.L618,.L660
	.byte	6
	.byte	'lAnChannelId',0,1,240,71,19
	.word	.L286,.L661
	.byte	6
	.byte	'lResReg',0,1,241,71,21
	.word	.L286,.L662
	.byte	6
	.byte	'lNoOfChannels',0,1,242,71,9
	.word	.L286,.L663
	.byte	6
	.byte	'lChloopCount',0,1,242,71,24
	.word	.L286,.L664
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lClearGroupSfr')
	.sect	'.debug_abbrev'
.L218:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Adc_lClearGroupSfr')
	.sect	'.debug_line'
.L219:
	.word	.L1371-.L1370
.L1370:
	.half	3
	.word	.L1373-.L1372
.L1372:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1373:
	.byte	5,33,7,0,5,2
	.word	.L121
	.byte	3,244,199,0,1,5,36,9
	.half	.L1374-.L121
	.byte	1,5,35,9
	.half	.L1375-.L1374
	.byte	1,5,29,9
	.half	.L890-.L1375
	.byte	3,3,1,5,31,9
	.half	.L1376-.L890
	.byte	1,5,44,9
	.half	.L1377-.L1376
	.byte	1,5,43,9
	.half	.L1378-.L1377
	.byte	1,5,25,9
	.half	.L1379-.L1378
	.byte	3,3,1,5,73,9
	.half	.L891-.L1379
	.byte	3,17,1,5,21,9
	.half	.L1380-.L891
	.byte	3,127,1,5,25,9
	.half	.L1381-.L1380
	.byte	3,5,1,5,23,9
	.half	.L1382-.L1381
	.byte	1,5,40,9
	.half	.L1383-.L1382
	.byte	3,4,1,5,7,9
	.half	.L1384-.L1383
	.byte	1,5,3,9
	.half	.L1385-.L1384
	.byte	1,5,29,7,9
	.half	.L1386-.L1385
	.byte	3,2,1,5,16,9
	.half	.L70-.L1386
	.byte	3,16,1,5,25,9
	.half	.L892-.L70
	.byte	3,1,1,5,53,9
	.half	.L894-.L892
	.byte	3,8,1,5,33,9
	.half	.L71-.L894
	.byte	3,126,1,5,47,9
	.half	.L1387-.L71
	.byte	1,5,42,9
	.half	.L895-.L1387
	.byte	3,1,1,5,26,9
	.half	.L897-.L895
	.byte	3,1,1,5,43,9
	.half	.L898-.L897
	.byte	1,5,24,9
	.half	.L899-.L898
	.byte	3,1,1,5,36,9
	.half	.L900-.L899
	.byte	1,5,17,9
	.half	.L901-.L900
	.byte	3,12,1,5,40,9
	.half	.L902-.L901
	.byte	3,1,1,5,31,7,9
	.half	.L1388-.L902
	.byte	3,33,1,5,49,9
	.half	.L896-.L1388
	.byte	1,5,28,9
	.half	.L1389-.L896
	.byte	1,5,44,9
	.half	.L1390-.L1389
	.byte	3,1,1,5,28,9
	.half	.L1391-.L1390
	.byte	1,5,44,9
	.half	.L1392-.L1391
	.byte	3,1,1,5,28,9
	.half	.L1393-.L1392
	.byte	1,5,41,9
	.half	.L1394-.L1393
	.byte	3,2,1,5,25,9
	.half	.L1395-.L1394
	.byte	1,5,1,9
	.half	.L1396-.L1395
	.byte	3,1,1,7,9
	.half	.L221-.L1396
	.byte	0,1,1
.L1371:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lClearGroupSfr')
	.sect	'.debug_ranges'
.L220:
	.word	-1,.L121,0,.L221-.L121,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lUpdateResBuffer')
	.sect	'.debug_info'
.L222:
	.word	651
	.half	3
	.word	.L223
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L225,.L224
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lUpdateResBuffer',0,1,237,83,13,1,1
	.word	.L125,.L665,.L124
	.byte	4
	.byte	'KernelId',0,1,237,83,47
	.word	.L666,.L667
	.byte	4
	.byte	'GroupId',0,1,238,83,54
	.word	.L668,.L669
	.byte	4
	.byte	'CoreId',0,1,239,83,47
	.word	.L670,.L671
	.byte	5
	.word	.L125,.L665
	.byte	6
	.byte	'lEvadcGroupPtr',0,1,242,83,31
	.word	.L672,.L673
	.byte	6
	.byte	'lKernelDataPtr',0,1,243,83,23
	.word	.L292,.L674
	.byte	6
	.byte	'lGrpCfgPtr',0,1,244,83,27
	.word	.L329,.L675
	.byte	6
	.byte	'lCurrentBufferPtr',0,1,245,83,23
	.word	.L676,.L677
	.byte	6
	.byte	'lNumOfSamples',0,1,246,83,27
	.word	.L286,.L678
	.byte	6
	.byte	'lCurrentBufLocation',0,1,246,83,42
	.word	.L286,.L679
	.byte	6
	.byte	'lResReg',0,1,247,83,21
	.word	.L286,.L680
	.byte	6
	.byte	'lNoOfChannels',0,1,248,83,9
	.word	.L286,.L681
	.byte	6
	.byte	'lCount',0,1,248,83,24
	.word	.L286,.L682
	.byte	7
	.word	.L310,.L683,.L684
	.byte	8
	.word	.L312,.L685
	.byte	8
	.word	.L314,.L686
	.byte	9
	.word	.L316,.L683,.L684
	.byte	0,7
	.word	.L687,.L688,.L689
	.byte	8
	.word	.L690,.L691
	.byte	8
	.word	.L692,.L693
	.byte	9
	.word	.L694,.L688,.L689
	.byte	0,7
	.word	.L695,.L696,.L78
	.byte	8
	.word	.L697,.L698
	.byte	8
	.word	.L699,.L700
	.byte	9
	.word	.L701,.L696,.L78
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lUpdateResBuffer')
	.sect	'.debug_abbrev'
.L223:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Adc_lUpdateResBuffer')
	.sect	'.debug_line'
.L224:
	.word	.L1398-.L1397
.L1397:
	.half	3
	.word	.L1400-.L1399
.L1399:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1400:
	.byte	5,33,7,0,5,2
	.word	.L125
	.byte	3,249,211,0,1,5,36,9
	.half	.L1401-.L125
	.byte	1,5,35,9
	.half	.L1402-.L1401
	.byte	1,5,11,9
	.half	.L683-.L1402
	.byte	3,250,81,1,5,26,9
	.half	.L1403-.L683
	.byte	1,5,55,9
	.half	.L1404-.L1403
	.byte	1,5,35,9
	.half	.L1405-.L1404
	.byte	1,5,55,9
	.half	.L1406-.L1405
	.byte	1,5,63,9
	.half	.L1407-.L1406
	.byte	1,5,34,9
	.half	.L1408-.L1407
	.byte	1,5,27,9
	.half	.L684-.L1408
	.byte	3,139,46,1,5,18,9
	.half	.L1409-.L684
	.byte	3,127,1,5,43,9
	.half	.L1410-.L1409
	.byte	1,5,65,9
	.half	.L1411-.L1410
	.byte	1,5,75,9
	.half	.L1412-.L1411
	.byte	1,5,27,9
	.half	.L1413-.L1412
	.byte	3,1,1,5,29,9
	.half	.L919-.L1413
	.byte	3,1,1,9
	.half	.L921-.L919
	.byte	3,1,1,5,23,9
	.half	.L922-.L921
	.byte	3,1,1,5,44,9
	.half	.L920-.L922
	.byte	1,5,57,9
	.half	.L924-.L920
	.byte	3,3,1,5,3,9
	.half	.L926-.L924
	.byte	3,3,1,5,25,7,9
	.half	.L1414-.L926
	.byte	3,4,1,5,51,9
	.half	.L75-.L1414
	.byte	3,49,1,5,41,9
	.half	.L1415-.L75
	.byte	3,1,1,5,14,9
	.half	.L928-.L1415
	.byte	3,4,1,5,42,9
	.half	.L918-.L928
	.byte	1,5,37,9
	.half	.L77-.L918
	.byte	3,5,1,5,22,9
	.half	.L1416-.L77
	.byte	1,5,63,9
	.half	.L1417-.L1416
	.byte	3,1,1,5,72,9
	.half	.L1418-.L1417
	.byte	1,5,75,9
	.half	.L1419-.L1418
	.byte	1,5,61,9
	.half	.L1420-.L1419
	.byte	3,127,1,5,12,9
	.half	.L1421-.L1420
	.byte	3,3,1,5,50,9
	.half	.L1422-.L1421
	.byte	3,120,1,5,42,9
	.half	.L76-.L1422
	.byte	1,5,22,7,9
	.half	.L1423-.L76
	.byte	3,27,1,5,35,9
	.half	.L925-.L1423
	.byte	3,4,1,5,45,9
	.half	.L929-.L925
	.byte	1,5,3,9
	.half	.L688-.L929
	.byte	3,153,82,1,9
	.half	.L689-.L688
	.byte	3,240,45,1,7,9
	.half	.L696-.L689
	.byte	3,184,82,1,5,1,9
	.half	.L78-.L696
	.byte	3,208,45,1,7,9
	.half	.L226-.L78
	.byte	0,1,1
.L1398:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lUpdateResBuffer')
	.sect	'.debug_ranges'
.L225:
	.word	-1,.L125,0,.L226-.L125,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lGrpSequenceHandler')
	.sect	'.debug_info'
.L227:
	.word	573
	.half	3
	.word	.L228
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L230,.L229
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lGrpSequenceHandler',0,1,203,87,13,1,1
	.word	.L127,.L702,.L126
	.byte	4
	.byte	'KernelId',0,1,203,87,50
	.word	.L703,.L704
	.byte	4
	.byte	'GroupId',0,1,204,87,31
	.word	.L705,.L706
	.byte	4
	.byte	'ReqSrc',0,1,204,87,52
	.word	.L707,.L708
	.byte	4
	.byte	'CoreId',0,1,204,87,73
	.word	.L709,.L710
	.byte	5
	.word	.L127,.L702
	.byte	6
	.byte	'lKernelDataPtr',0,1,206,87,23
	.word	.L292,.L711
	.byte	6
	.byte	'lGrpCfgPtr',0,1,207,87,27
	.word	.L329,.L712
	.byte	6
	.byte	'lStrmCompletedFlag',0,1,208,87,10
	.word	.L252,.L713
	.byte	7
	.word	.L310,.L714,.L715
	.byte	8
	.word	.L312,.L716
	.byte	8
	.word	.L314,.L717
	.byte	9
	.word	.L316,.L714,.L715
	.byte	0,7
	.word	.L517,.L715,.L718
	.byte	8
	.word	.L520,.L719
	.byte	8
	.word	.L522,.L720
	.byte	9
	.word	.L524,.L715,.L718
	.byte	0,7
	.word	.L380,.L85,.L721
	.byte	8
	.word	.L383,.L722
	.byte	8
	.word	.L385,.L723
	.byte	8
	.word	.L387,.L724
	.byte	9
	.word	.L389,.L85,.L721
	.byte	0,7
	.word	.L390,.L721,.L81
	.byte	8
	.word	.L393,.L725
	.byte	8
	.word	.L395,.L726
	.byte	9
	.word	.L397,.L721,.L81
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lGrpSequenceHandler')
	.sect	'.debug_abbrev'
.L228:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Adc_lGrpSequenceHandler')
	.sect	'.debug_line'
.L229:
	.word	.L1425-.L1424
.L1424:
	.half	3
	.word	.L1427-.L1426
.L1426:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1427:
	.byte	5,13,7,0,5,2
	.word	.L127
	.byte	3,202,215,0,1,5,27,9
	.half	.L934-.L127
	.byte	3,9,1,5,18,9
	.half	.L935-.L934
	.byte	3,127,1,5,43,9
	.half	.L1428-.L935
	.byte	1,5,65,9
	.half	.L1429-.L1428
	.byte	1,5,75,9
	.half	.L1430-.L1429
	.byte	1,5,27,9
	.half	.L1431-.L1430
	.byte	3,1,1,5,11,9
	.half	.L714-.L1431
	.byte	3,160,78,1,5,26,9
	.half	.L1432-.L714
	.byte	1,5,55,9
	.half	.L1433-.L1432
	.byte	1,5,35,9
	.half	.L1434-.L1433
	.byte	1,5,55,9
	.half	.L1435-.L1434
	.byte	1,5,63,9
	.half	.L1436-.L1435
	.byte	1,5,34,9
	.half	.L1437-.L1436
	.byte	1,5,19,9
	.half	.L715-.L1437
	.byte	3,173,4,1,9
	.half	.L718-.L715
	.byte	3,193,45,1,5,8,9
	.half	.L1438-.L718
	.byte	1,5,19,7,9
	.half	.L1439-.L1438
	.byte	3,1,1,5,30,9
	.half	.L1440-.L1439
	.byte	1,5,19,7,9
	.half	.L79-.L1440
	.byte	3,1,1,5,8,9
	.half	.L1441-.L79
	.byte	1,5,28,7,9
	.half	.L1442-.L1441
	.byte	3,1,1,5,27,7,9
	.half	.L80-.L1442
	.byte	3,3,1,5,55,9
	.half	.L937-.L80
	.byte	1,5,53,9
	.half	.L1443-.L937
	.byte	1,5,19,9
	.half	.L1444-.L1443
	.byte	3,6,1,5,8,9
	.half	.L1445-.L1444
	.byte	1,5,20,7,9
	.half	.L1446-.L1445
	.byte	3,1,1,5,31,9
	.half	.L1447-.L1446
	.byte	1,5,48,7,9
	.half	.L938-.L1447
	.byte	3,4,1,5,55,9
	.half	.L932-.L938
	.byte	1,5,50,9
	.half	.L83-.L932
	.byte	3,8,1,5,24,9
	.half	.L85-.L83
	.byte	3,140,113,1,5,49,9
	.half	.L940-.L85
	.byte	1,5,47,9
	.half	.L1448-.L940
	.byte	1,5,3,9
	.half	.L721-.L1448
	.byte	3,140,95,1,5,1,9
	.half	.L81-.L721
	.byte	3,197,48,1,7,9
	.half	.L231-.L81
	.byte	0,1,1
.L1425:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lGrpSequenceHandler')
	.sect	'.debug_ranges'
.L230:
	.word	-1,.L127,0,.L231-.L127,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_lRSEventHandler')
	.sect	'.debug_info'
.L232:
	.word	443
	.half	3
	.word	.L233
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L235,.L234
	.byte	2
	.word	.L128
	.byte	3
	.byte	'Adc_lRSEventHandler',0,1,142,81,13,1,1
	.word	.L123,.L727,.L122
	.byte	4
	.byte	'KernelId',0,1,142,81,46
	.word	.L728,.L729
	.byte	4
	.byte	'RequestSrc',0,1,142,81,68
	.word	.L730,.L731
	.byte	4
	.byte	'CoreId',0,1,143,81,46
	.word	.L732,.L733
	.byte	5
	.word	.L123,.L727
	.byte	6
	.byte	'lKernelDataPtr',0,1,145,81,23
	.word	.L292,.L734
	.byte	6
	.byte	'lGroupId',0,1,146,81,17
	.word	.L297,.L735
	.byte	6
	.byte	'lGrpCfgPtr',0,1,148,81,27
	.word	.L329,.L736
	.byte	7
	.word	.L310,.L737,.L738
	.byte	8
	.word	.L312,.L739
	.byte	8
	.word	.L314,.L740
	.byte	9
	.word	.L316,.L737,.L738
	.byte	0,7
	.word	.L741,.L742,.L743
	.byte	8
	.word	.L744,.L745
	.byte	8
	.word	.L746,.L747
	.byte	9
	.word	.L748,.L742,.L743
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_lRSEventHandler')
	.sect	'.debug_abbrev'
.L233:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('Adc_lRSEventHandler')
	.sect	'.debug_line'
.L234:
	.word	.L1450-.L1449
.L1449:
	.half	3
	.word	.L1452-.L1451
.L1451:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0,0,0,0,0
.L1452:
	.byte	5,13,7,0,5,2
	.word	.L123
	.byte	3,141,209,0,1,5,11,9
	.half	.L737-.L123
	.byte	3,230,84,1,5,26,9
	.half	.L906-.L737
	.byte	1,5,55,9
	.half	.L908-.L906
	.byte	1,5,35,9
	.half	.L909-.L908
	.byte	1,5,55,9
	.half	.L1453-.L909
	.byte	1,5,63,9
	.half	.L1454-.L1453
	.byte	1,5,34,9
	.half	.L1455-.L1454
	.byte	1,5,28,9
	.half	.L738-.L1455
	.byte	3,167,43,1,5,40,9
	.half	.L910-.L738
	.byte	1,5,3,9
	.half	.L1456-.L910
	.byte	1,5,50,7,9
	.half	.L1457-.L1456
	.byte	3,4,1,5,25,9
	.half	.L911-.L1457
	.byte	3,8,1,5,20,9
	.half	.L1458-.L911
	.byte	3,127,1,5,45,9
	.half	.L912-.L1458
	.byte	1,5,67,9
	.half	.L1459-.L912
	.byte	1,5,77,9
	.half	.L1460-.L1459
	.byte	1,5,25,9
	.half	.L1461-.L1460
	.byte	3,1,1,5,48,9
	.half	.L914-.L1461
	.byte	3,204,0,1,5,63,9
	.half	.L903-.L914
	.byte	3,3,1,5,19,9
	.half	.L742-.L903
	.byte	3,209,88,1,5,5,9
	.half	.L743-.L742
	.byte	3,131,40,1,5,22,7,9
	.half	.L1462-.L743
	.byte	3,37,1,5,9,9
	.half	.L1463-.L1462
	.byte	1,5,21,7,9
	.half	.L1464-.L1463
	.byte	3,4,1,5,32,9
	.half	.L915-.L1464
	.byte	1,5,1,7,9
	.half	.L72-.L915
	.byte	3,8,1,7,9
	.half	.L236-.L72
	.byte	0,1,1
.L1450:
	.sdecl	'.debug_ranges',debug,cluster('Adc_lRSEventHandler')
	.sect	'.debug_ranges'
.L235:
	.word	-1,.L123,0,.L236-.L123,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_KernelData_Core1')
	.sect	'.debug_info'
.L237:
	.word	191
	.half	3
	.word	.L238
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L128
	.byte	3
	.byte	'Adc_KernelData_Core1',0,1,210,7,27
	.word	.L749
	.byte	5,3
	.word	Adc_KernelData_Core1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_KernelData_Core1')
	.sect	'.debug_abbrev'
.L238:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_ConfigPtr')
	.sect	'.debug_info'
.L239:
	.word	184
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L128
	.byte	3
	.byte	'Adc_ConfigPtr',0,1,128,9,30
	.word	.L750
	.byte	5,3
	.word	Adc_ConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_ConfigPtr')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_StartupCalStatus')
	.sect	'.debug_info'
.L241:
	.word	191
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L128
	.byte	3
	.byte	'Adc_StartupCalStatus',0,1,137,9,15
	.word	.L252
	.byte	5,3
	.word	Adc_StartupCalStatus
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_StartupCalStatus')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_kKernelDataIndex')
	.sect	'.debug_info'
.L243:
	.word	191
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L128
	.byte	3
	.byte	'Adc_kKernelDataIndex',0,1,178,9,20
	.word	.L751
	.byte	5,3
	.word	Adc_kKernelDataIndex
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_kKernelDataIndex')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_kKernelUsedCount')
	.sect	'.debug_info'
.L245:
	.word	191
	.half	3
	.word	.L246
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L128
	.byte	3
	.byte	'Adc_kKernelUsedCount',0,1,201,9,20
	.word	.L752
	.byte	5,3
	.word	Adc_kKernelUsedCount
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_kKernelUsedCount')
	.sect	'.debug_abbrev'
.L246:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Adc_kKernelData')
	.sect	'.debug_info'
.L247:
	.word	186
	.half	3
	.word	.L248
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Adc\\ssc\\src\\Adc.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L128
	.byte	3
	.byte	'Adc_kKernelData',0,1,247,9,35
	.word	.L753
	.byte	5,3
	.word	Adc_kKernelData
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Adc_kKernelData')
	.sect	'.debug_abbrev'
.L248:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_DisableGroupNotification')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L479-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L493:
	.word	0,0
.L481:
	.word	-1,.L99,0,.L486-.L99
	.half	1
	.byte	84
	.word	.L808-.L99,.L489-.L99
	.half	1
	.byte	95
	.word	0,0
.L488:
	.word	0,0
.L490:
	.word	0,0
.L496:
	.word	0,0
.L495:
	.word	0,0
.L492:
	.word	0,0
.L484:
	.word	-1,.L99,.L486-.L99,.L809-.L99
	.half	1
	.byte	82
	.word	0,0
.L485:
	.word	-1,.L99,.L487-.L99,.L479-.L99
	.half	1
	.byte	95
	.word	0,0
.L482:
	.word	-1,.L99,.L491-.L99,.L811-.L99
	.half	1
	.byte	111
	.word	0,0
.L483:
	.word	-1,.L99,.L487-.L99,.L810-.L99
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_EnableGroupNotification')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L457-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L471:
	.word	0,0
.L459:
	.word	-1,.L97,0,.L464-.L97
	.half	1
	.byte	84
	.word	.L804-.L97,.L467-.L97
	.half	1
	.byte	95
	.word	0,0
.L466:
	.word	0,0
.L468:
	.word	0,0
.L477:
	.word	0,0
.L475:
	.word	0,0
.L470:
	.word	0,0
.L462:
	.word	-1,.L97,.L464-.L97,.L805-.L97
	.half	1
	.byte	82
	.word	0,0
.L463:
	.word	-1,.L97,.L465-.L97,.L457-.L97
	.half	1
	.byte	95
	.word	0,0
.L460:
	.word	-1,.L97,.L469-.L97,.L807-.L97
	.half	1
	.byte	111
	.word	0,0
.L461:
	.word	-1,.L97,.L465-.L97,.L806-.L97
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_GetGroupStatus')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L497-.L101
	.half	2
	.byte	138,0
	.word	0,0
.L516:
	.word	0,0
.L499:
	.word	-1,.L101,0,.L509-.L101
	.half	1
	.byte	84
	.word	.L812-.L101,.L813-.L101
	.half	1
	.byte	95
	.word	0,0
.L511:
	.word	0,0
.L513:
	.word	0,0
.L530:
	.word	0,0
.L527:
	.word	0,0
.L523:
	.word	0,0
.L529:
	.word	0,0
.L526:
	.word	0,0
.L521:
	.word	0,0
.L515:
	.word	0,0
.L505:
	.word	0,0
.L506:
	.word	-1,.L101,.L509-.L101,.L518-.L101
	.half	1
	.byte	82
	.word	0,0
.L507:
	.word	-1,.L101,.L512-.L101,.L497-.L101
	.half	1
	.byte	89
	.word	0,0
.L501:
	.word	-1,.L101,.L514-.L101,.L497-.L101
	.half	1
	.byte	111
	.word	0,0
.L502:
	.word	-1,.L101,.L510-.L101,.L814-.L101
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L504:
	.word	0,0
.L508:
	.word	-1,.L101,.L815-.L101,.L27-.L101
	.half	1
	.byte	82
	.word	.L816-.L101,.L29-.L101
	.half	1
	.byte	82
	.word	.L817-.L101,.L497-.L101
	.half	1
	.byte	82
	.word	0,0
.L503:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_GetStartupCalStatus')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L575-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L577:
	.word	-1,.L107,.L580-.L107,.L828-.L107
	.half	1
	.byte	82
	.word	0,0
.L576:
	.word	-1,.L107,.L829-.L107,.L40-.L107
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L578:
	.word	-1,.L107,.L827-.L107,.L575-.L107
	.half	1
	.byte	88
	.word	.L828-.L107,.L575-.L107
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_GetStreamLastPointer')
	.sect	'.debug_loc'
.L102:
	.word	-1,.L103,0,.L531-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L552:
	.word	0,0
.L533:
	.word	-1,.L103,0,.L545-.L103
	.half	1
	.byte	84
	.word	.L818-.L103,.L548-.L103
	.half	1
	.byte	88
	.word	0,0
.L547:
	.word	0,0
.L549:
	.word	0,0
.L565:
	.word	0,0
.L568:
	.word	0,0
.L562:
	.word	0,0
.L559:
	.word	0,0
.L556:
	.word	0,0
.L564:
	.word	0,0
.L567:
	.word	0,0
.L561:
	.word	0,0
.L558:
	.word	0,0
.L555:
	.word	0,0
.L551:
	.word	0,0
.L535:
	.word	-1,.L103,0,.L545-.L103
	.half	1
	.byte	100
	.word	.L819-.L103,.L531-.L103
	.half	1
	.byte	108
	.word	0,0
.L540:
	.word	-1,.L103,.L560-.L103,.L531-.L103
	.half	1
	.byte	95
	.word	0,0
.L543:
	.word	-1,.L103,.L545-.L103,.L553-.L103
	.half	1
	.byte	82
	.word	0,0
.L544:
	.word	-1,.L103,.L548-.L103,.L531-.L103
	.half	1
	.byte	88
	.word	0,0
.L536:
	.word	-1,.L103,.L822-.L103,.L531-.L103
	.half	1
	.byte	109
	.word	0,0
.L537:
	.word	-1,.L103,.L550-.L103,.L821-.L103
	.half	1
	.byte	111
	.word	.L32-.L103,.L824-.L103
	.half	1
	.byte	111
	.word	0,0
.L539:
	.word	-1,.L103,.L546-.L103,.L820-.L103
	.half	1
	.byte	95
	.word	0,0
.L538:
	.word	-1,.L103,.L823-.L103,.L531-.L103
	.half	1
	.byte	90
	.word	.L825-.L103,.L531-.L103
	.half	1
	.byte	82
	.word	0,0
.L542:
	.word	0,0
.L541:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_Init')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L249-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L251:
	.word	-1,.L87,0,.L754-.L87
	.half	1
	.byte	100
	.word	.L755-.L87,.L7-.L87
	.half	1
	.byte	111
	.word	0,0
.L259:
	.word	0,0
.L276:
	.word	0,0
.L278:
	.word	0,0
.L255:
	.word	-1,.L87,.L756-.L87,.L7-.L87
	.half	1
	.byte	88
	.word	0,0
.L253:
	.word	-1,.L87,.L759-.L87,.L2-.L87
	.half	1
	.byte	95
	.word	0,0
.L254:
	.word	-1,.L87,.L754-.L87,.L757-.L87
	.half	1
	.byte	82
	.word	.L758-.L87,.L249-.L87
	.half	1
	.byte	89
	.word	.L770-.L87,.L249-.L87
	.half	1
	.byte	84
	.word	0,0
.L268:
	.word	-1,.L87,.L765-.L87,.L766-.L87
	.half	1
	.byte	111
	.word	0,0
.L283:
	.word	-1,.L87,.L769-.L87,.L12-.L87
	.half	1
	.byte	100
	.word	0,0
.L285:
	.word	-1,.L87,.L768-.L87,.L12-.L87
	.half	1
	.byte	111
	.word	0,0
.L262:
	.word	-1,.L87,.L760-.L87,.L761-.L87
	.half	1
	.byte	88
	.word	.L762-.L87,.L763-.L87
	.half	1
	.byte	88
	.word	.L763-.L87,.L8-.L87
	.half	1
	.byte	84
	.word	.L8-.L87,.L764-.L87
	.half	1
	.byte	88
	.word	.L767-.L87,.L249-.L87
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L583-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L585:
	.word	-1,.L109,0,.L830-.L109
	.half	1
	.byte	84
	.word	.L831-.L109,.L583-.L109
	.half	1
	.byte	88
	.word	.L832-.L109,.L47-.L109
	.half	1
	.byte	84
	.word	0,0
.L586:
	.word	-1,.L109,.L830-.L109,.L583-.L109
	.half	1
	.byte	82
	.word	.L833-.L109,.L47-.L109
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_ReadGroup')
	.sect	'.debug_loc'
.L94:
	.word	-1,.L95,0,.L412-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L438:
	.word	0,0
.L416:
	.word	-1,.L95,0,.L431-.L95
	.half	1
	.byte	100
	.word	.L790-.L95,.L412-.L95
	.half	1
	.byte	108
	.word	0,0
.L414:
	.word	-1,.L95,0,.L431-.L95
	.half	1
	.byte	84
	.word	.L789-.L95,.L434-.L95
	.half	1
	.byte	88
	.word	0,0
.L433:
	.word	0,0
.L435:
	.word	0,0
.L453:
	.word	0,0
.L456:
	.word	0,0
.L442:
	.word	0,0
.L448:
	.word	0,0
.L452:
	.word	0,0
.L455:
	.word	0,0
.L441:
	.word	0,0
.L446:
	.word	0,0
.L437:
	.word	0,0
.L422:
	.word	-1,.L95,.L440-.L95,.L796-.L95
	.half	1
	.byte	81
	.word	0,0
.L424:
	.word	-1,.L95,.L431-.L95,.L439-.L95
	.half	1
	.byte	82
	.word	0,0
.L430:
	.word	-1,.L95,.L801-.L95,.L802-.L95
	.half	1
	.byte	95
	.word	0,0
.L420:
	.word	-1,.L95,.L799-.L95,.L800-.L95
	.half	1
	.byte	111
	.word	0,0
.L426:
	.word	-1,.L95,.L434-.L95,.L412-.L95
	.half	1
	.byte	88
	.word	0,0
.L417:
	.word	-1,.L95,.L792-.L95,.L793-.L95
	.half	1
	.byte	111
	.word	0,0
.L418:
	.word	-1,.L95,.L436-.L95,.L412-.L95
	.half	1
	.byte	109
	.word	0,0
.L421:
	.word	-1,.L95,.L432-.L95,.L791-.L95
	.half	1
	.byte	95
	.word	0,0
.L429:
	.word	-1,.L95,.L795-.L95,.L412-.L95
	.half	1
	.byte	90
	.word	0,0
.L427:
	.word	-1,.L95,.L797-.L95,.L24-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L428:
	.word	-1,.L95,.L794-.L95,.L412-.L95
	.half	1
	.byte	89
	.word	0,0
.L423:
	.word	0,0
.L425:
	.word	-1,.L95,.L798-.L95,.L20-.L95
	.half	1
	.byte	95
	.word	.L796-.L95,.L803-.L95
	.half	1
	.byte	95
	.word	.L803-.L95,.L412-.L95
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_SetupResultBuffer')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L287-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L315:
	.word	0,0
.L291:
	.word	-1,.L89,0,.L300-.L89
	.half	1
	.byte	100
	.word	.L772-.L89,.L287-.L89
	.half	1
	.byte	108
	.word	0,0
.L289:
	.word	-1,.L89,0,.L300-.L89
	.half	1
	.byte	84
	.word	.L771-.L89,.L306-.L89
	.half	1
	.byte	95
	.word	0,0
.L303:
	.word	0,0
.L308:
	.word	0,0
.L313:
	.word	0,0
.L296:
	.word	-1,.L89,.L300-.L89,.L773-.L89
	.half	1
	.byte	82
	.word	0,0
.L298:
	.word	0,0
.L293:
	.word	0,0
.L295:
	.word	-1,.L89,.L301-.L89,.L774-.L89
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L294:
	.word	-1,.L89,.L775-.L89,.L287-.L89
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_StartGroupConversion')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L317-.L91
	.half	2
	.byte	138,0
	.word	0,0
.L333:
	.word	0,0
.L319:
	.word	-1,.L91,0,.L776-.L91
	.half	1
	.byte	84
	.word	.L777-.L91,.L778-.L91
	.half	1
	.byte	95
	.word	0,0
.L325:
	.word	0,0
.L327:
	.word	0,0
.L340:
	.word	0,0
.L347:
	.word	0,0
.L354:
	.word	0,0
.L338:
	.word	0,0
.L345:
	.word	0,0
.L352:
	.word	0,0
.L332:
	.word	0,0
.L321:
	.word	-1,.L91,.L776-.L91,.L335-.L91
	.half	1
	.byte	82
	.word	.L323-.L91,.L317-.L91
	.half	1
	.byte	88
	.word	.L780-.L91,.L781-.L91
	.half	1
	.byte	86
	.word	0,0
.L322:
	.word	-1,.L91,.L326-.L91,.L317-.L91
	.half	1
	.byte	90
	.word	0,0
.L330:
	.word	-1,.L91,.L779-.L91,.L317-.L91
	.half	1
	.byte	109
	.word	.L782-.L91,.L317-.L91
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	-1,.L91,.L331-.L91,.L317-.L91
	.half	1
	.byte	108
	.word	0,0
.L320:
	.word	-1,.L91,.L324-.L91,.L317-.L91
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_StopGroupConversion')
	.sect	'.debug_loc'
.L92:
	.word	-1,.L93,0,.L356-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L371:
	.word	0,0
.L358:
	.word	-1,.L93,0,.L362-.L93
	.half	1
	.byte	84
	.word	.L783-.L93,.L784-.L93
	.half	1
	.byte	95
	.word	0,0
.L364:
	.word	0,0
.L366:
	.word	0,0
.L396:
	.word	0,0
.L400:
	.word	0,0
.L403:
	.word	0,0
.L410:
	.word	0,0
.L378:
	.word	0,0
.L386:
	.word	0,0
.L394:
	.word	0,0
.L399:
	.word	0,0
.L402:
	.word	0,0
.L408:
	.word	0,0
.L376:
	.word	0,0
.L384:
	.word	0,0
.L370:
	.word	0,0
.L388:
	.word	0,0
.L360:
	.word	-1,.L93,.L362-.L93,.L373-.L93
	.half	1
	.byte	82
	.word	0,0
.L361:
	.word	-1,.L93,.L365-.L93,.L356-.L93
	.half	1
	.byte	88
	.word	0,0
.L368:
	.word	-1,.L93,.L785-.L93,.L786-.L93
	.half	1
	.byte	111
	.word	.L787-.L93,.L788-.L93
	.half	1
	.byte	100
	.word	.L18-.L93,.L19-.L93
	.half	1
	.byte	111
	.word	0,0
.L367:
	.word	-1,.L93,.L369-.L93,.L356-.L93
	.half	1
	.byte	108
	.word	0,0
.L359:
	.word	-1,.L93,.L363-.L93,.L356-.L93
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_TriggerStartupCal')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L569-.L105
	.half	2
	.byte	138,0
	.word	0,0
.L570:
	.word	-1,.L105,.L826-.L105,.L569-.L105
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lClearGroupSfr')
	.sect	'.debug_loc'
.L120:
	.word	-1,.L121,0,.L651-.L121
	.half	2
	.byte	138,0
	.word	0,0
.L653:
	.word	-1,.L121,0,.L651-.L121
	.half	1
	.byte	100
	.word	0,0
.L655:
	.word	-1,.L121,0,.L651-.L121
	.half	1
	.byte	84
	.word	0,0
.L657:
	.word	-1,.L121,0,.L651-.L121
	.half	1
	.byte	85
	.word	0,0
.L661:
	.word	-1,.L121,.L895-.L121,.L896-.L121
	.half	1
	.byte	95
	.word	0,0
.L664:
	.word	-1,.L121,.L892-.L121,.L893-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	.L898-.L121,.L899-.L121
	.half	1
	.byte	82
	.word	.L900-.L121,.L901-.L121
	.half	1
	.byte	82
	.word	.L902-.L121,.L651-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L658:
	.word	-1,.L121,.L890-.L121,.L651-.L121
	.half	1
	.byte	98
	.word	0,0
.L659:
	.word	0,0
.L660:
	.word	-1,.L121,.L891-.L121,.L651-.L121
	.half	1
	.byte	101
	.word	0,0
.L663:
	.word	-1,.L121,.L894-.L121,.L651-.L121
	.half	1
	.byte	81
	.word	0,0
.L662:
	.word	-1,.L121,.L897-.L121,.L651-.L121
	.half	1
	.byte	83
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lGrpSequenceHandler')
	.sect	'.debug_loc'
.L126:
	.word	-1,.L127,0,.L702-.L127
	.half	2
	.byte	138,0
	.word	0,0
.L717:
	.word	0,0
.L710:
	.word	-1,.L127,0,.L932-.L127
	.half	1
	.byte	87
	.word	.L83-.L127,.L85-.L127
	.half	1
	.byte	87
	.word	0,0
.L726:
	.word	0,0
.L720:
	.word	0,0
.L706:
	.word	-1,.L127,0,.L933-.L127
	.half	1
	.byte	85
	.word	.L934-.L127,.L935-.L127
	.half	1
	.byte	88
	.word	.L936-.L127,.L718-.L127
	.half	1
	.byte	88
	.word	.L83-.L127,.L939-.L127
	.half	1
	.byte	85
	.word	.L941-.L127,.L942-.L127
	.half	1
	.byte	88
	.word	0,0
.L723:
	.word	0,0
.L725:
	.word	0,0
.L719:
	.word	0,0
.L722:
	.word	0,0
.L716:
	.word	0,0
.L704:
	.word	-1,.L127,0,.L932-.L127
	.half	1
	.byte	84
	.word	.L83-.L127,.L85-.L127
	.half	1
	.byte	84
	.word	0,0
.L724:
	.word	0,0
.L708:
	.word	-1,.L127,0,.L933-.L127
	.half	1
	.byte	86
	.word	.L80-.L127,.L937-.L127
	.half	1
	.byte	89
	.word	.L938-.L127,.L933-.L127
	.half	1
	.byte	89
	.word	.L933-.L127,.L932-.L127
	.half	1
	.byte	85
	.word	.L83-.L127,.L939-.L127
	.half	1
	.byte	89
	.word	.L83-.L127,.L939-.L127
	.half	1
	.byte	86
	.word	.L939-.L127,.L85-.L127
	.half	1
	.byte	85
	.word	.L85-.L127,.L940-.L127
	.half	1
	.byte	89
	.word	0,0
.L712:
	.word	-1,.L127,.L714-.L127,.L932-.L127
	.half	1
	.byte	100
	.word	.L83-.L127,.L85-.L127
	.half	1
	.byte	100
	.word	0,0
.L711:
	.word	-1,.L127,.L715-.L127,.L702-.L127
	.half	1
	.byte	108
	.word	0,0
.L713:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lKernelDeInit')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L599-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L601:
	.word	-1,.L113,0,.L599-.L113
	.half	1
	.byte	100
	.word	0,0
.L603:
	.word	-1,.L113,0,.L599-.L113
	.half	1
	.byte	84
	.word	0,0
.L606:
	.word	-1,.L113,.L845-.L113,.L846-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L604:
	.word	-1,.L113,.L841-.L113,.L599-.L113
	.half	1
	.byte	111
	.word	0,0
.L605:
	.word	-1,.L113,.L842-.L113,.L843-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	.L843-.L113,.L844-.L113
	.half	1
	.byte	95
	.word	.L847-.L113,.L61-.L113
	.half	1
	.byte	81
	.word	.L848-.L113,.L849-.L113
	.half	1
	.byte	81
	.word	.L60-.L113,.L850-.L113
	.half	1
	.byte	95
	.word	.L846-.L113,.L63-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	.L851-.L113,.L852-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lPrepareGrpForStart')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L607-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L613:
	.word	-1,.L115,0,.L607-.L115
	.half	1
	.byte	86
	.word	0,0
.L611:
	.word	-1,.L115,0,.L67-.L115
	.half	1
	.byte	85
	.word	0,0
.L609:
	.word	-1,.L115,0,.L67-.L115
	.half	1
	.byte	84
	.word	0,0
.L622:
	.word	-1,.L115,.L862-.L115,.L607-.L115
	.half	1
	.byte	84
	.word	0,0
.L621:
	.word	-1,.L115,.L860-.L115,.L861-.L115
	.half	1
	.byte	83
	.word	0,0
.L617:
	.word	-1,.L115,.L855-.L115,.L607-.L115
	.half	1
	.byte	100
	.word	0,0
.L620:
	.word	-1,.L115,.L861-.L115,.L607-.L115
	.half	1
	.byte	95
	.word	0,0
.L625:
	.word	-1,.L115,.L858-.L115,.L859-.L115
	.half	1
	.byte	81
	.word	.L864-.L115,.L865-.L115
	.half	1
	.byte	82
	.word	.L866-.L115,.L607-.L115
	.half	1
	.byte	81
	.word	0,0
.L614:
	.word	-1,.L115,.L853-.L115,.L607-.L115
	.half	1
	.byte	101
	.word	0,0
.L615:
	.word	-1,.L115,.L854-.L115,.L607-.L115
	.half	1
	.byte	98
	.word	0,0
.L619:
	.word	-1,.L115,.L856-.L115,.L607-.L115
	.half	1
	.byte	102
	.word	0,0
.L624:
	.word	-1,.L115,.L857-.L115,.L607-.L115
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L623:
	.word	-1,.L115,.L863-.L115,.L607-.L115
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lRSEventHandler')
	.sect	'.debug_loc'
.L122:
	.word	-1,.L123,0,.L727-.L123
	.half	2
	.byte	138,0
	.word	0,0
.L740:
	.word	0,0
.L733:
	.word	-1,.L123,0,.L903-.L123
	.half	1
	.byte	86
	.word	.L906-.L123,.L907-.L123
	.half	1
	.byte	91
	.word	.L908-.L123,.L909-.L123
	.half	1
	.byte	91
	.word	.L912-.L123,.L913-.L123
	.half	1
	.byte	91
	.word	.L916-.L123,.L917-.L123
	.half	1
	.byte	91
	.word	0,0
.L747:
	.word	0,0
.L745:
	.word	0,0
.L739:
	.word	0,0
.L729:
	.word	-1,.L123,0,.L903-.L123
	.half	1
	.byte	84
	.word	.L905-.L123,.L727-.L123
	.half	1
	.byte	89
	.word	0,0
.L731:
	.word	-1,.L123,0,.L904-.L123
	.half	1
	.byte	85
	.word	.L738-.L123,.L910-.L123
	.half	1
	.byte	90
	.word	.L916-.L123,.L917-.L123
	.half	1
	.byte	90
	.word	0,0
.L735:
	.word	-1,.L123,.L911-.L123,.L72-.L123
	.half	1
	.byte	88
	.word	.L904-.L123,.L903-.L123
	.half	1
	.byte	85
	.word	0,0
.L736:
	.word	-1,.L123,.L914-.L123,.L915-.L123
	.half	1
	.byte	111
	.word	0,0
.L734:
	.word	-1,.L123,.L738-.L123,.L727-.L123
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L587-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L589:
	.word	-1,.L111,0,.L587-.L111
	.half	1
	.byte	84
	.word	0,0
.L598:
	.word	-1,.L111,.L836-.L111,.L837-.L111
	.half	1
	.byte	95
	.word	0,0
.L590:
	.word	-1,.L111,.L596-.L111,.L52-.L111
	.half	1
	.byte	111
	.word	0,0
.L591:
	.word	-1,.L111,.L594-.L111,.L834-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	.L835-.L111,.L595-.L111
	.half	1
	.byte	81
	.word	.L595-.L111,.L53-.L111
	.half	1
	.byte	85
	.word	.L838-.L111,.L839-.L111
	.half	1
	.byte	81
	.word	.L840-.L111,.L597-.L111
	.half	1
	.byte	85
	.word	.L52-.L111,.L587-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L592:
	.word	-1,.L111,.L837-.L111,.L52-.L111
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lStartSwConversion')
	.sect	'.debug_loc'
.L116:
	.word	-1,.L117,0,.L626-.L117
	.half	2
	.byte	138,0
	.word	0,0
.L628:
	.word	-1,.L117,0,.L626-.L117
	.half	1
	.byte	100
	.word	0,0
.L630:
	.word	-1,.L117,0,.L867-.L117
	.half	1
	.byte	84
	.word	0,0
.L632:
	.word	-1,.L117,0,.L626-.L117
	.half	1
	.byte	85
	.word	0,0
.L640:
	.word	-1,.L117,.L876-.L117,.L877-.L117
	.half	1
	.byte	83
	.word	.L68-.L117,.L626-.L117
	.half	1
	.byte	83
	.word	0,0
.L637:
	.word	-1,.L117,.L871-.L117,.L872-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L633:
	.word	-1,.L117,.L868-.L117,.L69-.L117
	.half	1
	.byte	98
	.word	0,0
.L635:
	.word	-1,.L117,.L869-.L117,.L626-.L117
	.half	1
	.byte	111
	.word	0,0
.L636:
	.word	-1,.L117,.L870-.L117,.L626-.L117
	.half	1
	.byte	101
	.word	0,0
.L639:
	.word	-1,.L117,.L874-.L117,.L875-.L117
	.half	1
	.byte	82
	.word	0,0
.L638:
	.word	-1,.L117,.L873-.L117,.L626-.L117
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lStopConvRequest')
	.sect	'.debug_loc'
.L118:
	.word	-1,.L119,0,.L641-.L119
	.half	2
	.byte	138,0
	.word	0,0
.L643:
	.word	-1,.L119,0,.L878-.L119
	.half	1
	.byte	100
	.word	.L879-.L119,.L641-.L119
	.half	1
	.byte	108
	.word	.L888-.L119,.L641-.L119
	.half	1
	.byte	100
	.word	0,0
.L645:
	.word	-1,.L119,0,.L878-.L119
	.half	1
	.byte	84
	.word	.L880-.L119,.L881-.L119
	.half	1
	.byte	88
	.word	.L884-.L119,.L885-.L119
	.half	1
	.byte	88
	.word	.L888-.L119,.L889-.L119
	.half	1
	.byte	88
	.word	0,0
.L647:
	.word	-1,.L119,0,.L878-.L119
	.half	1
	.byte	85
	.word	.L882-.L119,.L883-.L119
	.half	1
	.byte	89
	.word	.L886-.L119,.L887-.L119
	.half	1
	.byte	89
	.word	.L888-.L119,.L889-.L119
	.half	1
	.byte	89
	.word	0,0
.L648:
	.word	0,0
.L650:
	.word	-1,.L119,.L887-.L119,.L641-.L119
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Adc_lUpdateResBuffer')
	.sect	'.debug_loc'
.L124:
	.word	-1,.L125,0,.L665-.L125
	.half	2
	.byte	138,0
	.word	0,0
.L686:
	.word	0,0
.L671:
	.word	-1,.L125,0,.L77-.L125
	.half	1
	.byte	86
	.word	0,0
.L693:
	.word	0,0
.L700:
	.word	0,0
.L669:
	.word	-1,.L125,0,.L665-.L125
	.half	1
	.byte	85
	.word	0,0
.L691:
	.word	0,0
.L698:
	.word	0,0
.L685:
	.word	0,0
.L667:
	.word	-1,.L125,0,.L918-.L125
	.half	1
	.byte	84
	.word	0,0
.L682:
	.word	-1,.L125,.L918-.L125,.L930-.L125
	.half	1
	.byte	84
	.word	.L76-.L125,.L665-.L125
	.half	1
	.byte	84
	.word	0,0
.L679:
	.word	-1,.L125,.L926-.L125,.L927-.L125
	.half	1
	.byte	81
	.word	.L925-.L125,.L931-.L125
	.half	1
	.byte	95
	.word	0,0
.L677:
	.word	-1,.L125,.L928-.L125,.L929-.L125
	.half	1
	.byte	111
	.word	0,0
.L673:
	.word	-1,.L125,.L683-.L125,.L665-.L125
	.half	1
	.byte	100
	.word	0,0
.L675:
	.word	-1,.L125,.L919-.L125,.L920-.L125
	.half	1
	.byte	111
	.word	0,0
.L674:
	.word	-1,.L125,.L684-.L125,.L665-.L125
	.half	1
	.byte	98
	.word	0,0
.L681:
	.word	-1,.L125,.L922-.L125,.L923-.L125
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L678:
	.word	-1,.L125,.L921-.L125,.L665-.L125
	.half	1
	.byte	87
	.word	0,0
.L680:
	.word	-1,.L125,.L924-.L125,.L925-.L125
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1465:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Adc_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L87,.L249-.L87
	.sdecl	'.debug_frame',debug,cluster('Adc_SetupResultBuffer')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L89,.L287-.L89
	.sdecl	'.debug_frame',debug,cluster('Adc_StartGroupConversion')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L91,.L317-.L91
	.sdecl	'.debug_frame',debug,cluster('Adc_StopGroupConversion')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L93,.L356-.L93
	.sdecl	'.debug_frame',debug,cluster('Adc_ReadGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L95,.L412-.L95
	.sdecl	'.debug_frame',debug,cluster('Adc_EnableGroupNotification')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L97,.L457-.L97
	.sdecl	'.debug_frame',debug,cluster('Adc_DisableGroupNotification')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L99,.L479-.L99
	.sdecl	'.debug_frame',debug,cluster('Adc_GetGroupStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L101,.L497-.L101
	.sdecl	'.debug_frame',debug,cluster('Adc_GetStreamLastPointer')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L103,.L531-.L103
	.sdecl	'.debug_frame',debug,cluster('Adc_TriggerStartupCal')
	.sect	'.debug_frame'
	.word	24
	.word	.L1465,.L105,.L569-.L105
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Adc_GetStartupCalStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L107,.L575-.L107
	.sdecl	'.debug_frame',debug,cluster('Adc_RS0EventInterruptHandler')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L109,.L583-.L109
	.sdecl	'.debug_frame',debug,cluster('Adc_lResetCoreGlobalVars')
	.sect	'.debug_frame'
	.word	20
	.word	.L1465,.L111,.L587-.L111
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Adc_lKernelDeInit')
	.sect	'.debug_frame'
	.word	24
	.word	.L1465,.L113,.L599-.L113
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Adc_lPrepareGrpForStart')
	.sect	'.debug_frame'
	.word	16
	.word	.L1465,.L115,.L607-.L115
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('Adc_lStartSwConversion')
	.sect	'.debug_frame'
	.word	20
	.word	.L1465,.L117,.L626-.L117
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Adc_lStopConvRequest')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L119,.L641-.L119
	.sdecl	'.debug_frame',debug,cluster('Adc_lClearGroupSfr')
	.sect	'.debug_frame'
	.word	20
	.word	.L1465,.L121,.L651-.L121
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Adc_lRSEventHandler')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L123,.L727-.L123
	.sdecl	'.debug_frame',debug,cluster('Adc_lUpdateResBuffer')
	.sect	'.debug_frame'
	.word	16
	.word	.L1465,.L125,.L665-.L125
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('Adc_lGrpSequenceHandler')
	.sect	'.debug_frame'
	.word	12
	.word	.L1465,.L127,.L702-.L127

; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11353  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11354  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11355  #if(ADC_LOW_POWER_STATE_SUPPORT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11356  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11357  ** Traceability: [cover parentID={B43307B4-18AF-40be-AF61-4A96D5C4DEA5}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11358  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11359  ** Syntax           : static uint8 Adc_lGetCurrentPwrState                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11360  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11361  **                      const uint8 ServiceId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11362  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11363  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11364  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11365  ** Description      : This function returns the current power state of the ADC**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11366  **                    hardware groups used by the calling core and reports    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11367  **                    safety error if current power state is not available in **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11368  **                    the configured power modes.                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11369  **                    Note: This API is available only when                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11370  **                          AdcLowPowerStatesSupport is configured as true.   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11371  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11372  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11373  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11374  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11375  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11376  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11377  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11378  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11379  ** Parameters(in)   : ServiceId - Service ID of the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11380  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11381  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11382  ** Parameters(out)   :None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11383  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11384  ** Return value     : 0 to 3 - Current Power States of ADC hardware units     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11385  **                    ADC_INVALID_POWER_STATE - Power state not available in  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11386  **                                              the configured power modes    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11387  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11388  static uint8 Adc_lGetCurrentPwrState(const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11389  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11390    uint32 lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11391    uint32 lCurrentPwrState = (uint32)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11392  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11393    /* [cover parentID={74587DEC-86DC-4ce8-BED7-2FD80E863C39}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11394    Till the first Master or Stand-alone kernel configured to current core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11395    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11396    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11397    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11398      /* [cover parentID={74587DEC-86DC-4ce8-BED7-2FD80E863C39}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11399      Till the first Master or Stand-alone kernel configured to current core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11400      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11401      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11402          NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11403      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11404        /* [cover parentID={74587DEC-86DC-4ce8-BED7-2FD80E863C39}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11405        Till the first Master or Stand-alone kernel configured to current core
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11406        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11407        if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11408                                         SyncConvMode != ADC_SYNC_CONV_MODE_SLAVE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11409        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11410          /* [cover parentID={1AB5CD7F-77F8-4554-86CC-CAD7BBF94CF6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11411          Read the current power state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11412          lCurrentPwrState = MODULE_EVADC.G[lKernelCount].ARBCFG.B.ANONS;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11413          lCurrentPwrState = (ADC_TARGET_POWER_STATE_MASK & (~lCurrentPwrState));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11414          break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11415        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11416      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11417    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11418  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11419    /* [cover parentID={023A8D73-147A-4553-B521-635D48E1A2B1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11420    Is power state not available in the configured core ? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11421    if((((uint32)ADC_ONE_U<<lCurrentPwrState)&(uint32)ADC_POWER_MODES_AVAILABLE)\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11422                                                                    == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11423    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11424      /* [cover parentID={AA9ECD8F-2E9E-4eea-A6DA-0A67808E05ED}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11425      Safety is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11426      #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11427      /* [cover parentID={5F4AEDD9-5459-46a1-A930-E7B70D2F6E89}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11428      Report Safety error if power state read corresponds to invalid range
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11429      [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11430      Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ServiceId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11431                             ADC_SE_POWER_STATE_INVALID);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11432      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11433      UNUSED_PARAMETER(ServiceId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11434  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11435      /* Updatecurrent power state with invalid power state */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11436      lCurrentPwrState = ADC_INVALID_POWER_STATE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11437    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11438    return((uint8)lCurrentPwrState);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11439  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11440  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11441  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11442  #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11443  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11444  ** Traceability: [cover parentID={620D4BCB-150C-4fe5-8EDC-267826AA61FD}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11445  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11446  ** Syntax           : LOCAL_INLINE uint8 Adc_lInitDetCheck                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11447  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11448  **                       const Adc_ConfigType * const ConfigPtr,              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11449  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11450  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11451  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11452  ** Description      :This function is to check all the DETs for Adc_Init API  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11453  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11454  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11455  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11456  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11457  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11458  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11459  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11460  ** Parameters(in)   : ConfigPtr - Pointer to the config root                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11461  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11462  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11463  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11464  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11465  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11466  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11467  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11468  LOCAL_INLINE uint8 Adc_lInitDetCheck(const Adc_ConfigType *const ConfigPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11469                                       const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11470  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11471    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11472    /* [cover parentID={D1CB56D8-C20D-493e-92C7-29B6C03E7EFE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11473    Number of Cores available are greater than one and Current CoreId is not equal
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11474    to the Master CoreId [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11475    #if (MCAL_NO_OF_CORES > ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11476    if (MCAL_MASTER_COREID != CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11477    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11478      /* [cover parentID={7E1F2432-4BCD-49d9-BD54-B03D992A4BD0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11479      MultiCore Error Detection is on or Safety is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11480      #if ((ADC_MULTICORE_ERROR_DETECT == STD_ON)||(ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11481      /* [cover parentID={4666CFFE-D35D-4599-85CE-F7BD11280347}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11482      Is Master Core Initialized [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11483      if (Adc_InitStatus[MCAL_MASTER_COREID] != ADC_INITIALIZED)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11484      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11485        lErrVal = ADC_E_MASTER_CORE_UNINIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11486        /* [cover parentID={95E73AF5-75B1-4f98-AAF6-D3D901CB5211}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11487        Report ADC_E_MASTER_CORE_UNINIT DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11488        Adc_lReportMulticoreError(ADC_SID_INIT, ADC_E_MASTER_CORE_UNINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11489      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11490      /* [cover parentID={6DBCF186-3D8B-4d9b-A09B-BC4EB5600320}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11491      Error in Master Core initialization [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11492      if(ADC_E_NO_ERR == lErrVal)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11493      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11494      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11495        /* [cover parentID={192357ED-39F1-4c84-B5CD-2DEBB0A75149}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11496        Is Config pointer NULL or Kernel Config pointer not equal to Config
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11497        pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11498        if ((ConfigPtr == NULL_PTR) || (Adc_ConfigPtr != ConfigPtr))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11499        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11500          #if(MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11501          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11502            lErrVal = ADC_E_PARAM_CONFIG;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11503          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11504          #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11505          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11506            lErrVal = ADC_E_PARAM_POINTER;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11507          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11508          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11509          /* [cover parentID={2F7121B9-E1ED-4147-B4AD-EA8A7CD93125}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11510          Report DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11511          Adc_lReportError(ADC_SID_INIT, lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11512        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11513        /* [cover parentID={04765A52-452C-497f-8865-F471094001A7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11514        MultiCore Error Detection is on or Safety is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11515        #if((ADC_MULTICORE_ERROR_DETECT == STD_ON)||(ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11516        /* [cover parentID={8BB218D1-E180-40b7-A89A-966A2AE8F001}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11517        Is Core Config pointer NULL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11518        else if (ConfigPtr->CoreCfgPtr[CoreId] == NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11519        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11520          /* Update return value as ADC_E_CORE_NOT_CONFIGURED */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11521          lErrVal = ADC_E_CORE_NOT_CONFIGURED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11522          /* [cover parentID={420F8B56-E912-4e72-905B-89670459E37D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11523          Report ADC_E_CORE_NOT_CONFIGURED DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11524          Adc_lReportMulticoreError(ADC_SID_INIT, ADC_E_CORE_NOT_CONFIGURED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11525        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11526        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11527        /* [cover parentID={1302F4C4-938F-40cc-BEFF-E67670516A17}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11528        Is Core Already Initialized [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11529        else if (Adc_InitStatus[CoreId] == ADC_INITIALIZED)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11530        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11531          /* Update return value as ADC_E_ALREADY_INITIALIZED */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11532          lErrVal = ADC_E_ALREADY_INITIALIZED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11533          /* [cover parentID={F11C9BED-2FB4-4543-A2E9-C3988111DD4F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11534          Report ADC_E_ALREADY_INITIALIZED DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11535          Adc_lReportError(ADC_SID_INIT, ADC_E_ALREADY_INITIALIZED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11536        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11537        else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11538        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11539          /*Do Nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11540        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11541      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11542    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11543    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11544    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11545    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11546      /* [cover parentID={9CC8561B-3A69-4bd6-B6C9-F143D3BC7C35}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11547      Is Config pointer NULL  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11548      /*Master core*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11549      if(ConfigPtr == NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11550      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11551        #if(MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11552        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11553          lErrVal = ADC_E_PARAM_CONFIG;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11554        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11555        #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11556        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11557          lErrVal = ADC_E_PARAM_POINTER;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11558        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11559        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11560        /* [cover parentID={EE3F86E9-0D5E-4132-BD47-50A7345CF1D5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11561        Report DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11562        Adc_lReportError(ADC_SID_INIT, lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11563      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11564      /* [cover parentID={DE882BF7-AF32-46a6-9554-670277524684}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11565      Is Driver in Initialized state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11566      else if(Adc_InitStatus[CoreId] == ADC_INITIALIZED)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11567      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11568        lErrVal = ADC_E_ALREADY_INITIALIZED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11569        /* [cover parentID={02E14E41-E9F4-461d-B449-B371BF9DF69A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11570        Report ADC_E_ALREADY_INITIALIZED DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11571        Adc_lReportError(ADC_SID_INIT, ADC_E_ALREADY_INITIALIZED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11572      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11573      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11574      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11575        /*Do Nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11576      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11577    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11578  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11579    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11580  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11581  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11582  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11583  #if (((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11584       (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11585  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11586  ** Traceability: [cover parentID={78F0E0C9-3247-4035-B081-DA3486CD238C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11587  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11588  ** Syntax           : LOCAL_INLINE uint8 Adc_lSetupResBufDetCheck             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11589  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11590  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11591  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11592  **                       const Adc_ValueGroupType * const DataBufferPtr       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11593  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11594  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11595  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11596  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11597  **                   Adc_SetupResultBuffer  API                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11598  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11599  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11600  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11601  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11602  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11603  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11604  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11605  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11606  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11607  **                    DataBufferPtr - Pointer to the Result Buffer            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11608  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11609  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11610  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11611  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11612  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11613  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11614  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11615  LOCAL_INLINE uint8 Adc_lSetupResBufDetCheck(const uint32 KernelId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11616      const Adc_GroupType GroupId,const Adc_ValueGroupType * const DataBufferPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11617      const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11618  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11619  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11620    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11621    /* [cover parentID={AF0955FC-DFCA-48ed-AEFA-D19748726B9A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11622    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11623    lErrVal = Adc_lCheckUnInitDet(ADC_SID_SETUP_RESULT_BUFFER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11624    /* [cover parentID={B0954766-2A5F-4de6-BE74-95C9A188B61E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11625    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11626    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11627    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11628      /* [cover parentID={A58C79BD-5188-4514-85E3-30746D3BD0AC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11629      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11630      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11631                                      ADC_SID_SETUP_RESULT_BUFFER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11632      /* [cover parentID={38E0D305-473F-4e2e-948B-19ECA5522261}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11633      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11634      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11635      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11636        /* [cover parentID={9547CE6E-0D2E-407e-80F8-42A758E70C78}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11637        Check Param Pointer DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11638        lErrVal = Adc_lCheckParamPointerDet(DataBufferPtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11639                                            ADC_SID_SETUP_RESULT_BUFFER);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11640      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11641    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11642    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11643  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11644  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11645  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11646  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11647                                                      &&(ADC_DEINIT_API ==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11648  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11649  ** Traceability: [cover parentID={74F1C5B8-C34B-424a-ACAD-37345031C1CE}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11650  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11651  ** Syntax           : LOCAL_INLINE uint8 Adc_lDeInitDetCheck                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11652  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11653  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11654  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11655  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11656  ** Description      :This function is to check all the DETs for Adc_DeInit API**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11657  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11658  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11659  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11660  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11661  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11662  ** Reentrancy       : Reentrant for different CPU core                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11663  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11664  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11665  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11666  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11667  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11668  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11669  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11670  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11671  LOCAL_INLINE uint8 Adc_lDeInitDetCheck(const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11672  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11673    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11674  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11675    /* [cover parentID={FCA9CA17-5A5C-4587-82FD-AB0834FC6A13}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11676    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11677    lErrVal = Adc_lCheckUnInitDet(ADC_SID_DEINIT, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11678    /* [cover parentID={B4BEDD08-684A-44f5-97A1-3C3D640A514E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11679    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11680    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11681    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11682      /* [cover parentID={44DAFED3-DB35-4852-A763-1A300BECDDDD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11683      Safety is ON and Number of Cores available are greater than one or 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11684      MultiCore Error Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11685      #if( (ADC_MULTICORE_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11686           ((ADC_SAFETY_ENABLE == STD_ON) && (MCAL_NO_OF_CORES > ADC_ONE_U)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11687      uint32 lCore;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11688      /* [cover parentID={0FD8C9BB-59F9-4453-8715-7CCB1A8C6F21}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11689      Is CoreId is equal to Master CoreId [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11690      if (MCAL_MASTER_COREID == CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11691      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11692        /* [cover parentID={00805B64-FC29-40a3-91FD-931E913732D3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11693        Till the last available Core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11694        for (lCore = 0U; lCore < MCAL_NO_OF_CORES; lCore++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11695        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11696          /* [cover parentID={BBE7C10F-3CE5-46f0-8EBB-7ECE0D409501}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11697          Is Core not equal to Master Core & Core is not in Uninit completed
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11698          state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11699          if ((MCAL_MASTER_COREID != lCore) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11700              (Adc_InitStatus[lCore] != ADC_UNINIT_COMPLETED))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11701          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11702            lErrVal = ADC_E_SLAVE_CORE_INIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11703            /* [cover parentID={358C55F8-42CB-4795-8919-86940BCCA14D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11704            Report ADC_E_SLAVE_CORE_INIT DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11705            Adc_lReportMulticoreError(ADC_SID_DEINIT, ADC_E_SLAVE_CORE_INIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11706            break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11707          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11708        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11709      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11710      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11711    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11712    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11713  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11714  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11715  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11716  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11717                                              &&(ADC_STARTUP_CALIB_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11718  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11719  ** Traceability: [cover parentID={D747A5D9-FE39-466f-8A87-6B38A7897089}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11720  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11721  ** Syntax           : LOCAL_INLINE uint8 Adc_lTrigStartupCalDetCheck          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11722  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11723  **                       void                                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11724  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11725  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11726  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11727  **                   Adc_TriggerStartupCal API                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11728  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11729  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11730  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11731  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11732  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11733  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11734  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11735  ** Parameters(in)   : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11736  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11737  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11738  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11739  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11740  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11741  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11742  LOCAL_INLINE uint8 Adc_lTrigStartupCalDetCheck(void)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11743  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11744    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11745    uint32 lCoreId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11746  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11747    /* [cover parentID={11BE4CF3-4982-4b99-BDC6-0C34E82E9670}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11748    Is Adc config pointer is equal to NULL? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11749    if(Adc_ConfigPtr == NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11750    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11751      /* [cover parentID={D6278CFF-7ECA-4922-9AD9-6642B0D5A6B3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11752      Report ADC_E_UNINIT DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11753      Adc_lReportError(ADC_SID_TRIGGER_STARTUP_CAL, ADC_E_UNINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11754      lErrVal = ADC_E_UNINIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11755    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11756    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11757    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11758      /* [cover parentID={DC59B913-A06C-4041-8444-61E27DA30F78}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11759      Till the last available CoreId [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11760      for (lCoreId = 0U; lCoreId < MCAL_NO_OF_CORES; lCoreId++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11761      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11762        /* [cover parentID={BA874CCB-AF13-4cdc-89E0-4B8DB87CC86D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11763        Config pointer not equal to NULL pointer & Module is not Initialized
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11764        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11765        if((Adc_ConfigPtr->CoreCfgPtr[lCoreId] != NULL_PTR) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11766            (Adc_InitStatus[lCoreId] != ADC_INITIALIZED))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11767        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11768          /* [cover parentID={9EB7AA4B-8EC5-4775-A4B4-80092EFF1409}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11769          Report ADC_E_UNINIT DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11770          Adc_lReportError(ADC_SID_TRIGGER_STARTUP_CAL, ADC_E_UNINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11771          lErrVal = ADC_E_UNINIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11772          break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11773        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11774      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11775    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11776    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11777  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11778  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11779  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11780  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11781                                      &&(ADC_ENABLE_START_STOP_GROUP_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11782  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11783  ** Traceability: [cover parentID={CF280F7A-88BC-4c54-8ECD-E792AE9D665A}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11784  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11785  ** Syntax           : LOCAL_INLINE uint8 Adc_lStartGrpConvDetCheck            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11786  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11787  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11788  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11789  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11790  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11791  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11792  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11793  **                   Adc_StartGroupConversion API                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11794  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11795  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11796  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11797  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11798  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11799  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11800  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11801  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11802  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11803  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11804  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11805  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11806  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11807  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11808  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11809  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11810  LOCAL_INLINE uint8 Adc_lStartGrpConvDetCheck(const uint32 KernelId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11811      const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11812  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11813    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11814    /* [cover parentID={784CE157-0138-4921-9854-F8C93B14D212}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11815    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11816    lErrVal = Adc_lCheckUnInitDet(ADC_SID_START_GROUP_CONVERSION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11817    /* [cover parentID={A83859C1-0797-478f-B0ED-6756051780D8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11818    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11819    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11820    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11821      /* [cover parentID={684357BF-8182-49ff-A079-3D9AFCA050BB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11822      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11823      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11824                                      ADC_SID_START_GROUP_CONVERSION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11825      /* [cover parentID={2D343A2D-4FF9-40bb-8491-BF18C9C52721}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11826      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11827      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11828      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11829        /* [cover parentID={EC09CCEA-5925-4f41-BCB5-A1156FD2D93C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11830        Check wrong trigger source DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11831        lErrVal = Adc_lCheckWrongTrigSrcDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11832                                 ADC_SID_START_GROUP_CONVERSION,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11833        /* [cover parentID={F7446A71-9225-4e0f-82CA-0AE941A7FDD6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11834        Result Handling is not a DMA Mode [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11835        #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11836        /* [cover parentID={0165AC74-A99A-41d2-8384-30BBBD67E16E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11837        Wrong trigger source DET error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11838        if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11839        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11840          /* [cover parentID={2D3F4CDD-F441-4c09-82A9-270815DFB497}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11841          Check Buffer Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11842          lErrVal = Adc_lCheckBufferUnInitDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11843                                 ADC_SID_START_GROUP_CONVERSION,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11844        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11845        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11846  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11847        /* [cover parentID={FF6299BD-B444-4220-8345-8FAA3C5D6FE2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11848        Low power state support is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11849        #if(ADC_LOW_POWER_STATE_SUPPORT==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11850        /* [cover parentID={C5A38D19-2F38-4f03-AF04-66F14E0F716C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11851        Buffer UnInit DET error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11852        if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11853        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11854          /* [cover parentID={9D73C6BA-5331-4afa-AD82-CA524E4D95F8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11855          Check converter Off DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11856          lErrVal = Adc_lCheckConverterOffDet(KernelId,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11857                                              ADC_SID_START_GROUP_CONVERSION);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11858        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11859        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11860        /* [cover parentID={52C072E2-9A29-4cfb-9AC2-68F2A80190E5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11861        Safety is on and Start-up calib api is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11862        #if((ADC_SAFETY_ENABLE == STD_ON) && (ADC_STARTUP_CALIB_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11863        /* [cover parentID={7A356915-8B11-4fa0-B00A-0B0F039E1AAB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11864        Converted off DET error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11865        if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11866        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11867          /* [cover parentID={8215924D-5C3A-4526-A88E-E5E051C4050B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11868          Check calibration on-going DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11869          lErrVal = Adc_lCheckStartupCalibOngoingDet(KernelId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11870                    ADC_SID_START_GROUP_CONVERSION);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11871        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11872        #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11873      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11874    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11875    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11876  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11877  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11878  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11879  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11880                                      &&(ADC_ENABLE_START_STOP_GROUP_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11881  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11882  ** Traceability: [cover parentID={EDDB2352-032D-4a16-8551-F9EC316322C5}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11883  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11884  ** Syntax           : LOCAL_INLINE uint8 Adc_lStopGrpConvDetCheck             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11885  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11886  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11887  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11888  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11889  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11890  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11891  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11892  **                   Adc_StopGroupConversion API                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11893  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11894  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11895  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11896  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11897  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11898  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11899  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11900  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11901  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11902  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11903  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11904  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11905  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11906  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11907  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11908  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11909  LOCAL_INLINE uint8 Adc_lStopGrpConvDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11910                                 const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11911  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11912    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11913    /* [cover parentID={77B5CFE7-352F-43f3-A6C4-147D12D25780}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11914    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11915    lErrVal = Adc_lCheckUnInitDet(ADC_SID_STOP_GROUP_CONVERSION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11916    /* [cover parentID={06560AC1-A5CD-4973-BBB5-1B2C380B0C94}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11917    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11918    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11919    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11920      /* [cover parentID={C315ED29-079C-4457-9D38-94D39B66E04C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11921      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11922      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11923                                      ADC_SID_STOP_GROUP_CONVERSION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11924      /* [cover parentID={03396869-2F4D-4ab8-8EB1-8C529AB7DD9F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11925      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11926      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11927      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11928        /* [cover parentID={BE480CCB-FF5B-4629-A1B4-324CCD3407F7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11929        Check wrong trigger source DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11930        lErrVal = Adc_lCheckWrongTrigSrcDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11931                                 ADC_SID_STOP_GROUP_CONVERSION,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11932      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11933    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11934  return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11935  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11936  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11937  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11938  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11939                                                   &&(ADC_READ_GROUP_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11940  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11941  ** Traceability: [cover parentID={60236046-E151-4358-A11A-08414069CC6C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11942  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11943  ** Syntax           : LOCAL_INLINE uint8 Adc_lReadGrpDetCheck                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11944  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11945  **                     const Adc_ValueGroupType * const DataBufferPtr         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11946  **                     const uint32 KernelId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11947  **                     const Adc_GroupType GroupId                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11948  **                     const uint32 CoreId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11949  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11950  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11951  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11952  **                   Adc_ReadGroup API                                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11953  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11954  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11955  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11956  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11957  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11958  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11959  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11960  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11961  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11962  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11963  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11964  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11965  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11966  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11967  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11968  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11969  LOCAL_INLINE uint8 Adc_lReadGrpDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11970      const Adc_ValueGroupType * const DataBufferPtr, const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11971      const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11972  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11973    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11974    /* [cover parentID={B4D7F764-7E5E-4d06-9FBD-05806DF8D290}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11975    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11976    lErrVal = Adc_lCheckUnInitDet(ADC_SID_READ_GROUP, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11977    /* [cover parentID={81DDB2DE-E101-428a-8786-4A23350F0428}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11978    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11979    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11980    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11981      /* [cover parentID={1E22851E-3DFF-4f20-88B8-982BDEE03001}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11982      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11983      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, ADC_SID_READ_GROUP, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11984                                      CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11985      /* [cover parentID={A9432FE2-ABAB-40a0-9093-B43CB86B245E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11986      Param Group DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11987      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11988      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11989        /* [cover parentID={2BB2081E-DE7E-486b-98E6-68750BDF20FD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11990        Check Param Pointer DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11991        lErrVal = Adc_lCheckParamPointerDet(DataBufferPtr, ADC_SID_READ_GROUP);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11992      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11993    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11994    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11995  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11996  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11997  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11998  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 11999  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12000  ** Traceability: [cover parentID={72F3452B-FAD3-45d4-9B42-52368A6EE554}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12001  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12002  ** Syntax           : LOCAL_INLINE uint8 Adc_lGetGrpStatusDetCheck            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12003  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12004  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12005  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12006  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12007  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12008  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12009  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12010  **                   Adc_GetGroupStatus API                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12011  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12012  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12013  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12014  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12015  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12016  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12017  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12018  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12019  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12020  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12021  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12022  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12023  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12024  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12025  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12026  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12027  LOCAL_INLINE uint8 Adc_lGetGrpStatusDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12028                                const Adc_GroupType GroupId,const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12029  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12030    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12031    /* [cover parentID={9BFF9A09-6363-4d75-B36A-BD0320B35D21}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12032    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12033    lErrVal = Adc_lCheckUnInitDet(ADC_SID_GET_GROUP_STATUS, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12034    /* [cover parentID={C86B64F3-7E0B-4cce-9E05-4BE0A073CD96}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12035    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12036    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12037    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12038      /* [cover parentID={EA652870-7A77-47ab-B158-6A808930889A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12039      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12040      lErrVal = Adc_lCheckParamGrpDet(KernelId,GroupId,ADC_SID_GET_GROUP_STATUS,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12041                                      CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12042    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12043    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12044  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12045  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12046  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12047  #if (((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12048             (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12049  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12050  ** Traceability: [cover parentID={A3384188-5730-42df-9628-5F2B9AC2328D}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12051  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12052  ** Syntax           : LOCAL_INLINE uint8 Adc_lGetStrmPtrDetCheck              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12053  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12054  **                     const uint32 KernelId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12055  **                     const Adc_GroupType GroupId                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12056  **                     Adc_ValueGroupType ** const PtrToSamplePtr,            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12057  **                     const uint32 CoreId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12058  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12059  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12060  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12061  **                   Adc_GetStreamLastPointer API                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12062  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12063  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12064  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12065  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12066  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12067  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12068  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12069  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12070  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12071  **                    PtrToSamplePtr - Pointer to the Sample pointer          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12072  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12073  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12074  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12075  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12076  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12077  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12078  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12079  LOCAL_INLINE uint8 Adc_lGetStrmPtrDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12080    const Adc_GroupType GroupId, Adc_ValueGroupType ** const PtrToSamplePtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12081    const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12082  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12083    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12084    /* [cover parentID={6B0DCB89-8C55-4ad9-90F0-CD4D988627F1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12085    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12086    lErrVal = Adc_lCheckUnInitDet(ADC_SID_GET_STREAM_LAST_POINTER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12087    /* [cover parentID={40A35996-4516-413d-B75C-CEC4528AFE35}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12088    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12089    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12090    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12091      /* [cover parentID={03A6CEFE-C83E-424f-A71F-EC19654E5EAE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12092      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12093      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12094                                      ADC_SID_GET_STREAM_LAST_POINTER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12095      /* [cover parentID={7D1CA2FB-101B-4fd8-B788-E3DD2C2B2A5A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12096      Param Group DET error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12097      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12098      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12099        /* [cover parentID={5DE04AD1-34E3-4cc0-8373-626B212AFCF9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12100        Check Param Pointer Det [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12101        lErrVal = Adc_lCheckParamPointerDet(PtrToSamplePtr, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12102                                            ADC_SID_GET_STREAM_LAST_POINTER);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12103      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12104    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12105    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12106    /* MISRA2012_RULE_8_13_JUSTIFICATION:Declaring pointer as a constant causes
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12107    warings with compiler, hence it cannot be made const and not an issue*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12108  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12109  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12110  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12111  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12112      (ADC_GRP_NOTIF_CAPABILITY ==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12113  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12114  ** Traceability: [cover parentID={CC3012F7-5709-4e73-B375-0469857C33FC}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12115  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12116  ** Syntax           : LOCAL_INLINE uint8 Adc_lEnGrpNotifDetCheck              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12117  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12118  **                     const uint32 KernelId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12119  **                     const Adc_GroupType GroupId                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12120  **                     const uint32 CoreId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12121  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12122  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12123  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12124  **                   Adc_EnableGroupNotification API                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12125  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12126  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12127  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12128  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12129  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12130  ** Reentrancy       : Reentrant for different channel groups                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12131  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12132  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12133  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12134  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12135  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12136  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12137  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12138  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12139  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12140  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12141  LOCAL_INLINE uint8 Adc_lEnGrpNotifDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12142                                 const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12143  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12144    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12145    /* [cover parentID={6FFCC006-2EB8-4de5-8615-1E7003A57572}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12146    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12147    lErrVal = Adc_lCheckUnInitDet(ADC_SID_ENABLE_GROUP_NOTIFICATION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12148    /* [cover parentID={BC464C5B-800F-4614-967D-531A0AF41943}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12149    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12150    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12151    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12152      /* [cover parentID={D003790C-143E-4c2b-95E9-E318BC9B1853}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12153      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12154      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12155                                      ADC_SID_ENABLE_GROUP_NOTIFICATION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12156      /* [cover parentID={8FB5E499-5F21-423b-B911-40C54752FC1A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12157      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12158      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12159      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12160        /* [cover parentID={B3F6E23A-DE29-43fc-ADC0-35E93C9CD75E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12161        Check Notify Capability DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12162        lErrVal = Adc_lCheckNotifCapableDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12163                                        ADC_SID_ENABLE_GROUP_NOTIFICATION,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12164      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12165    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12166    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12167  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12168  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12169  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12170  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12171      (ADC_GRP_NOTIF_CAPABILITY ==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12172  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12173  ** Traceability: [cover parentID={30394DD8-5D17-476c-AE79-478B8AAA39D2}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12174  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12175  ** Syntax           : LOCAL_INLINE uint8 Adc_lDisGrpNotifDetCheck             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12176  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12177  **                     const uint32 KernelId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12178  **                     const Adc_GroupType GroupId                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12179  **                     const uint32 CoreId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12180  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12181  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12182  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12183  **                   Adc_DisableGroupNotification API                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12184  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12185  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12186  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12187  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12188  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12189  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12190  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12191  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12192  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12193  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12194  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12195  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12196  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12197  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12198  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12199  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12200  LOCAL_INLINE uint8 Adc_lDisGrpNotifDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12201                                  const Adc_GroupType GroupId,const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12202  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12203    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12204    /* [cover parentID={A0D90506-8D9C-4cf2-8DC1-2E091905B3D3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12205    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12206    lErrVal = Adc_lCheckUnInitDet(ADC_SID_DISABLE_GROUP_NOTIFICATION, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12207    /* [cover parentID={BC9D785A-0242-44da-B535-0084176621C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12208    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12209    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12210    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12211      /* [cover parentID={7507F255-283A-491d-AD79-A965C66DEC04}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12212      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12213      lErrVal = Adc_lCheckParamGrpDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12214                                      ADC_SID_DISABLE_GROUP_NOTIFICATION,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12215      /* [cover parentID={8CC33768-C4E6-43c4-8C4E-137C0276E2C2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12216      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12217      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12218      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12219        /* [cover parentID={CBA622FA-C5A0-420e-A008-A8D9B2668DE5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12220        Check Notify Capability DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12221        lErrVal = Adc_lCheckNotifCapableDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12222                                       ADC_SID_DISABLE_GROUP_NOTIFICATION,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12223      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12224    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12225    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12226  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12227  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12228  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12229  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12230      (ADC_HW_TRIGGER_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12231  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12232  ** Traceability: [cover parentID={2DE4C648-08A7-4349-B942-4512943EA4B1}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12233  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12234  ** Syntax           : LOCAL_INLINE uint8 Adc_lEnHwTriggerDetCheck             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12235  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12236  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12237  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12238  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12239  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12240  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12241  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12242  **                   Adc_EnableHardwareTrigger  API                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12243  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12244  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12245  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12246  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12247  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12248  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12249  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12250  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12251  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12252  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12253  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12254  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12255  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12256  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12257  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12258  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12259  LOCAL_INLINE uint8 Adc_lEnHwTriggerDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12260                                  const Adc_GroupType GroupId,const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12261  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12262    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12263    /* [cover parentID={6235998E-EC2B-467c-BBAB-BFF2B5478859}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12264    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12265    lErrVal = Adc_lCheckUnInitDet(ADC_SID_ENABLE_HARDWARE_TRIGGER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12266    /* [cover parentID={2F4D21E9-42C9-49d4-BF84-88912060F6DF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12267    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12268    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12269    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12270      /* [cover parentID={C9330C0B-A291-4d7e-A88B-E5A620B907C2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12271      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12272      lErrVal = Adc_lCheckParamGrpDet(KernelId, GroupId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12273                                      ADC_SID_ENABLE_HARDWARE_TRIGGER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12274      /* [cover parentID={14BC91C4-4C5B-4f32-8A1D-B33CF8E93130}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12275      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12276      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12277      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12278        /* [cover parentID={CB8D4E1A-9827-4a26-BE08-B8C97D0A2019}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12279        Check wrong trigger source DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12280        lErrVal = Adc_lCheckWrongTrigSrcDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12281                                 ADC_SID_ENABLE_HARDWARE_TRIGGER,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12282        /* [cover parentID={9FEB8F07-75A4-43f9-B286-61CA3C270EBB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12283        Wrong trigger source DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12284        if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12285        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12286  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12287          /* [cover parentID={6AEF6A92-715D-4e45-972C-A066408B6077}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12288          DMA Mode Result Handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12289          #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12290          /* [cover parentID={861D8C65-CE69-4b19-BDC8-E03203A9D0C7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12291          Check Buffer Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12292          lErrVal = Adc_lCheckBufferUnInitDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12293                                 ADC_SID_ENABLE_HARDWARE_TRIGGER,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12294          /* [cover parentID={75E62C6E-D5DE-48bd-8B6D-2FE123960B0B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12295          Buffer Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12296          if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12297          #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12298          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12299            /* [cover parentID={4F40D2A1-9559-4467-8A5A-0BD09E7B2159}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12300            Check wrong conv mode DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12301            lErrVal = Adc_lCheckWrongConvModeDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12302                                   ADC_SID_ENABLE_HARDWARE_TRIGGER,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12303            /* [cover parentID={7F05797D-26E1-47e2-94EB-4878B0074EB5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12304            Low power state support is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12305            #if(ADC_LOW_POWER_STATE_SUPPORT==STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12306            /* [cover parentID={E7DFF75B-636D-43c2-BF96-B50BA0BF4FD6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12307            Wrong conv mode DET error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12308            if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12309            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12310              /* [cover parentID={239EF96B-7210-481e-92B8-1078ED41DB41}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12311              Check Converter Off Det [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12312              lErrVal = Adc_lCheckConverterOffDet(KernelId,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12313                                                 ADC_SID_ENABLE_HARDWARE_TRIGGER);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12314            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12315            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12316            /* [cover parentID={A9FC6D16-089E-4d62-AC48-3C002DB8E272}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12317            Safety is on and Startup Calib API is on [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12318            #if((ADC_SAFETY_ENABLE == STD_ON) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12319                (ADC_STARTUP_CALIB_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12320            /* [cover parentID={EFC1F7AF-3FBF-4fe7-BFBF-4651B3FDD39E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12321            Converter off DET error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12322            if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12323            {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12324              /* [cover parentID={58E9128E-8837-447b-87E9-FE92FBCBF731}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12325              Check calibration on-going DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12326              lErrVal = Adc_lCheckStartupCalibOngoingDet(KernelId,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12327                                                ADC_SID_ENABLE_HARDWARE_TRIGGER);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12328            }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12329            #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12330          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12331        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12332      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12333    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12334    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12335  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12336  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12337  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12338  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12339      (ADC_HW_TRIGGER_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12340  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12341  ** Traceability: [cover parentID={FCE72B8C-FD0B-4e61-B3C7-45D2D41171CA}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12342  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12343  ** Syntax           : LOCAL_INLINE uint8 Adc_lDisHwTriggerDetCheck            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12344  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12345  **                     const uint32 KernelId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12346  **                     const Adc_GroupType GroupId                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12347  **                     const uint32 CoreId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12348  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12349  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12350  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12351  **                   Adc_DisableHardwareTrigger  API                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12352  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12353  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12354  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12355  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12356  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12357  ** Reentrancy       : Reentrant for channel groups executing on different ADC **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12358  **                    hardware groups                                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12359  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12360  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12361  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12362  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12363  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12364  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12365  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12366  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12367  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12368  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12369  LOCAL_INLINE uint8 Adc_lDisHwTriggerDetCheck(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12370                                 const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12371  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12372    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12373    /* [cover parentID={ED591D00-008C-4d84-BBB9-8EB1BAD11891}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12374    Check Adc Un-Init DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12375    lErrVal = Adc_lCheckUnInitDet(ADC_SID_DISABLE_HARDWARE_TRIGGER, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12376    /* [cover parentID={12A22699-0066-49e5-979D-386E0F1056A4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12377    Un-Init DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12378    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12379    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12380      /* [cover parentID={41F66738-ABB7-44ff-8F5C-F9ADE17D7B6D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12381      Check Param Group DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12382      lErrVal = Adc_lCheckParamGrpDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12383                                  ADC_SID_DISABLE_HARDWARE_TRIGGER,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12384      /* [cover parentID={45A82A2B-9B98-4590-B070-8DC80E4DB2D0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12385      Input Param DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12386      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12387      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12388        /* [cover parentID={E4EC76EC-28E3-4f7b-A410-FE70055B03BF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12389        Check wrong trigger source DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12390        lErrVal = Adc_lCheckWrongTrigSrcDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12391                                 ADC_SID_DISABLE_HARDWARE_TRIGGER,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12392        /* [cover parentID={580AE70C-61B2-40ed-889B-F0600D593300}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12393        Wrong trigger source DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12394        if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12395        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12396          /* [cover parentID={F110D19D-FEA5-4139-A4D8-D37269808136}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12397          Check wrong conv mode DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12398          lErrVal = Adc_lCheckWrongConvModeDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12399                                ADC_SID_DISABLE_HARDWARE_TRIGGER,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12400        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12401      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12402    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12403    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12404  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12405  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12406  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12407  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12408      (ADC_LOW_POWER_STATE_SUPPORT==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12409  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12410  ** Traceability: [cover parentID={99E8C5C8-DD8D-4b84-B8AD-EBF21844C34D}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12411  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12412  ** Syntax           : LOCAL_INLINE uint8 Adc_lPreparePowerStateDetCheck       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12413  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12414  **                      const Adc_PowerStateType PowerState,                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12415  **                      Adc_PowerStateRequestResultType * const Result,       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12416  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12417  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12418  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12419  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12420  **                   Adc_PreparePowerState API                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12421  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12422  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12423  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12424  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12425  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12426  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12427  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12428  ** Parameters(in)   : PowerState - Target power state intended to be          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12429  **                                        attained                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12430  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12431  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12432  ** Parameters (out) : Result - Result of Power state change preparation       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12433  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12434  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12435  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12436  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12437  LOCAL_INLINE uint8 Adc_lPreparePowerStateDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12438       const Adc_PowerStateType PowerState,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12439       Adc_PowerStateRequestResultType * const Result,const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12440  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12441    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12442    /* [cover parentID={5486F14E-07DA-4d41-90E3-940541786BBE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12443    Check param pointer DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12444    lErrVal = Adc_lCheckParamPointerDet(Result, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12445                                        ADC_SID_PREPARE_POWER_STATE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12446    /* [cover parentID={9B4B56AC-2A6F-40ad-B1D3-623DC57F7E4C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12447    Param pointer DET error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12448    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12449    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12450      /* [cover parentID={661D9B03-FFF4-491d-8C80-0A41E47551CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12451      Check UnInit DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12452      lErrVal = Adc_lCheckUnInitDet(ADC_SID_PREPARE_POWER_STATE, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12453      /* [cover parentID={FF13F535-A289-46eb-B4A6-76C08E408C54}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12454      UnInit DET error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12455      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12456      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12457        /* [cover parentID={6C45E90F-2CEA-4291-A5EB-1EA08F7E4CFE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12458        Check power state support DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12459        lErrVal = Adc_lCheckPowerStateNotSuppDet( PowerState,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12460                                                  ADC_SID_PREPARE_POWER_STATE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12461        /* [cover parentID={91D14F45-8BD1-4b60-A8EA-F00C931082C6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12462        Power State Support Det error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12463        if(lErrVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12464        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12465          /* [cover parentID={8D034187-6AF3-4dbc-AC02-3139CAF0FAB0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12466          Update result with ADC_POWER_STATE_NOT_SUPP [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12467          *Result = ADC_POWER_STATE_NOT_SUPP;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12468        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12469      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12470      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12471      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12472        /* [cover parentID={25DC4D38-588F-436e-8052-06C70B47B4FE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12473        Update result with ADC_NOT_INIT [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12474        *Result = ADC_NOT_INIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12475      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12476    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12477    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12478  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12479  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12480  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12481  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12482      (ADC_LOW_POWER_STATE_SUPPORT==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12483  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12484  ** Traceability: [cover parentID={9A2D9882-443F-47b8-8906-4B0A8B5B8101}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12485  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12486  ** Syntax           : LOCAL_INLINE uint8 Adc_lSetPowerStateDetCheck           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12487  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12488  **                      Adc_PowerStateRequestResultType * const Result,       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12489  **                      const uint32 CoreId,                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12490  **                      const uint32 TargetPwrState                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12491  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12492  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12493  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12494  **                   Adc_SetPowerState API                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12495  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12496  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12497  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12498  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12499  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12500  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12501  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12502  ** Parameters(in)   : CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12503  **                    TargetPwrState-Target pwr state intended to be attained **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12504  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12505  ** Parameters (out) : Result - Result of Power state change preparation       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12506  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12507  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12508  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12509  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12510  LOCAL_INLINE uint8 Adc_lSetPowerStateDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12511              Adc_PowerStateRequestResultType * const Result,const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12512              const uint32 TargetPwrState)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12513  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12514    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12515  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12516    /* [cover parentID={3386D9A5-CC36-4569-A4D2-7FD82A87D108}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12517    Check param pointer DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12518    lErrVal = Adc_lCheckParamPointerDet(Result, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12519                                        ADC_SID_SET_POWER_STATE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12520    /* [cover parentID={B7F49DF3-4C1F-4a74-8383-5EBB9E3232AD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12521    Param pointer DET error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12522    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12523    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12524      /* [cover parentID={444D5E7D-8508-4499-B99F-B6F2D3C8B4E3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12525      Check UnInit DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12526      lErrVal = Adc_lCheckUnInitDet(ADC_SID_SET_POWER_STATE, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12527  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12528      /* [cover parentID={CCCCFA51-609A-4302-B4E9-91B95FFC2581}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12529      UnInit Det error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12530      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12531      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12532        /* [cover parentID={1C406E76-22F4-4efb-8494-FD00CB962E72}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12533        Check peripheral prepared DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12534        lErrVal = Adc_lCheckPeripheralPreparedDet(TargetPwrState, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12535                  ADC_SID_SET_POWER_STATE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12536        /* [cover parentID={18DFD06E-ECC7-4dc5-8025-6938E4B5CBC3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12537        Is Peripheral prepared DET error occured ? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12538        if(lErrVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12539        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12540          /* [cover parentID={A678A211-A745-4bb9-BED5-5764EE088640}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12541          Update result pointer with ADC_SEQUENCE_ERROR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12542          *Result = ADC_SEQUENCE_ERROR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12543        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12544      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12545      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12546      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12547        /* [cover parentID={2B577AB3-4563-4f9d-B6CE-C7ABE8DFAAAA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12548        Update result with ADC_NOT_INIT [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12549        *Result = ADC_NOT_INIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12550      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12551    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12552    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12553  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12554  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12555  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12556  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12557      (ADC_LOW_POWER_STATE_SUPPORT==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12558  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12559  ** Traceability: [cover parentID={235D6261-5954-47ab-B188-F763822C7551}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12560  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12561  ** Syntax           : LOCAL_INLINE uint8 Adc_lGetPowerStateDetCheck           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12562  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12563  **                      const Adc_PowerStateType * const PowerState,          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12564  **                      Adc_PowerStateRequestResultType * const Result,       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12565  **                      const uint8 ServiceId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12566  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12567  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12568  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12569  ** Description      :This function is to check all the DETs for               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12570  **                   Adc_GetCurrentPowerState & Adc_GetTargetPowerState APIs  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12571  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12572  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12573  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12574  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12575  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12576  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12577  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12578  ** Parameters(in)   : ServiceId - Service ID of the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12579  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12580  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12581  ** Parameters (out) : PowerState -Power state of ADC hardware Units           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12582  **                    Result - Result of Target Power state read              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12583  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12584  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12585  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12586  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12587  LOCAL_INLINE uint8 Adc_lGetPowerStateDetCheck(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12588      const Adc_PowerStateType * const PowerState, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12589      Adc_PowerStateRequestResultType * const Result,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12590      const uint8 ServiceId,  const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12591  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12592    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12593    /* [cover parentID={F6180600-C339-49a4-9F81-3246262C8165}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12594    Check power state param pointer DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12595    lErrVal = Adc_lCheckParamPointerDet(PowerState, ServiceId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12596    /* [cover parentID={C3BB727C-3344-46f3-B25A-64B3BF177F90}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12597    Param Pointer Det error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12598    if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12599    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12600      /* [cover parentID={2461E0E2-15C1-40dd-955F-EB8C819FFC69}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12601      Check result param pointer DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12602      lErrVal = Adc_lCheckParamPointerDet(Result, ServiceId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12603      /* [cover parentID={9B8D8D8D-D182-40cc-B00D-5478FDD68F16}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12604      Param pointer DET error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12605      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12606      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12607        /* [cover parentID={F00D9D50-21CF-4bc1-8374-C34947531AA2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12608        Check UnInit Det [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12609        lErrVal = Adc_lCheckUnInitDet(ServiceId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12610        /* [cover parentID={F7CA1566-EB6F-4338-B1F5-04B27CE59DFD}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12611        UnInit DET error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12612        if(lErrVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12613        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12614          /* [cover parentID={F0575DF4-4C7B-46fc-A010-F0D022706DDF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12615          Update result with ADC_NOT_INIT [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12616          *Result = ADC_NOT_INIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12617        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12618      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12619    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12620    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12621  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12622  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12623  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12624  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12625  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12626  ** Traceability: [cover parentID={AEDE1654-91E5-4062-8E06-5624C46967EB}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12627  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12628  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckUnInitDet                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12629  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12630  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12631  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12632  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12633  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12634  ** Description      :This function is to check ADC_E_UNINIT DET for the       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12635  **                   ServiceId(API).                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12636  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12637  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12638  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12639  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12640  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12641  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12642  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12643  ** Parameters(in)   : ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12644  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12645  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12646  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12647  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12648  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12649  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12650  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12651  LOCAL_INLINE uint8 Adc_lCheckUnInitDet(const uint8 ServiceId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12652                                         const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12653  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12654    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12655  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12656    /* [cover parentID={7CC5C3C3-7080-453a-B0C4-A9070E509D35}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12657    Is Deinit API [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12658    if(ADC_SID_DEINIT == ServiceId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12659    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12660      /* [cover parentID={D5BF4C4C-B58B-46b3-91EE-6DFF9FEB2500}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12661      Is driver in Uninit completed state for called core  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12662      if(Adc_InitStatus[CoreId] == ADC_UNINIT_COMPLETED)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12663      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12664        /* [cover parentID={E4D9F99F-8E1A-4c6f-93FE-CB0209FAD0AB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12665        Report ADC_E_UNINIT Det [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12666        Adc_lReportError(ServiceId, ADC_E_UNINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12667        lErrVal = ADC_E_UNINIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12668      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12669    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12670    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12671    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12672      /* [cover parentID={B177D123-ACAF-4bb8-AD62-5B7D6549EAD5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12673      Adc is not in Initialized state or
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12674      Adc config pointer is equal to NULL pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12675      if((Adc_InitStatus[CoreId] != ADC_INITIALIZED) ||
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12676          (Adc_ConfigPtr == NULL_PTR))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12677      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12678        /* [cover parentID={4F5339EB-F621-434d-8543-467335385075}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12679        Report ADC_E_UNINIT Det [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12680        Adc_lReportError(ServiceId, ADC_E_UNINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12681        lErrVal = ADC_E_UNINIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12682      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12683    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12684    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12685  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12686  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12687  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12688  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12689  /*CYCLOMATIC_Adc_lCheckParamGrpDet_JUSTIFICATION: This function checks
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12690  ADC_E_PARAM_GROUP Development or Safety Error and also the MultiCore
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12691  related DET based on the enable of pre-compile macros. The different if
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12692  conditions for DET, Safety and MultiCore error check causes the complexity
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12693  to increase, but actually during run-time out of all if conditions many
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12694  will be pre-compile time removed */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12695  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12696  ** Traceability: [cover parentID={5F637317-7993-40b7-9EB3-0BDFD7BC052F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12697  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12698  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckParamGrpDet                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12699  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12700  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12701  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12702  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12703  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12704  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12705  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12706  ** Description      :This function is to check ADC_E_PARAM_GROUP DET for the  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12707  **                   ServiceId(API).                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12708  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12709  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12710  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12711  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12712  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12713  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12714  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12715  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12716  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12717  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12718  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12719  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12720  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12721  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12722  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12723  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12724  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12725  LOCAL_INLINE uint8 Adc_lCheckParamGrpDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12726          const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12727  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12728    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12729    #if( (ADC_MULTICORE_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12730         ((ADC_SAFETY_ENABLE == STD_ON) && (MCAL_NO_OF_CORES > ADC_ONE_U)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12731    uint32 lCore, lMultiCoreErr = 0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12732    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12733  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12734    /* [cover parentID={6B5CBDDE-D249-45a4-99ED-03327E00D195}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12735    Is KernelId greater than Maximum KernelId [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12736    if(KernelId >= ADC_MAX_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12737    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12738      /* Update return value as ADC_E_PARAM_GROUP */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12739      lErrVal = ADC_E_PARAM_GROUP;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12740    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12741    /* [cover parentID={6745F7DA-2A71-498b-89B8-6090E893BD86}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12742    Kernel not configured during Initialization [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12743    else if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId] == \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12744            NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12745    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12746      /*If kernel is not configured at all, error value is ADC_E_PARAM_GROUP;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12747      If kernel is configured for a different CPU core, error value is
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12748      ADC_E_CORE_GROUP_MISMATCH, instead */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12749      lErrVal = ADC_E_PARAM_GROUP;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12750      /* [cover parentID={EE166B67-0CD8-49de-9AF6-C9994AEE725D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12751      Safety is ON and Number of Cores available are greater than one or 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12752      MultiCore Error Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12753      #if( (ADC_MULTICORE_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12754           ((ADC_SAFETY_ENABLE == STD_ON) && (MCAL_NO_OF_CORES > ADC_ONE_U)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12755      /* [cover parentID={03C55DE4-EF76-422e-AD07-8390F206BC69}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12756      Till the last available Core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12757      for (lCore = (uint32)0U; lCore < MCAL_NO_OF_CORES; lCore++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12758      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12759        /* [cover parentID={11B650B0-7A04-4f77-AB33-1A138A167E78}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12760        Is Core configured and Core Index is not equal to calling CoreId[/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12761        if ((lCore != CoreId) && (Adc_ConfigPtr->CoreCfgPtr[lCore] != NULL_PTR))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12762        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12763          /* [cover parentID={266053D1-BB3C-4dc3-A0F1-FD5A8EB92CD2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12764          Is kernel configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12765          if (Adc_ConfigPtr->CoreCfgPtr[lCore]->HwUnitCfgPtr[KernelId] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12766              NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12767          {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12768            lErrVal = ADC_E_CORE_GROUP_MISMATCH;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12769            lMultiCoreErr = ADC_ONE_U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12770            /* [cover parentID={2BAC99F8-C9A7-4221-A595-426F9B05F7BE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12771            Report the Mutli-Core DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12772            Adc_lReportMulticoreError(ServiceId, ADC_E_CORE_GROUP_MISMATCH);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12773            break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12774          }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12775        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12776      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12777      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12778    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12779    /* [cover parentID={C3336738-258B-4c65-9C83-52B663926BBC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12780    Is GroupID greater than Max groups configured for this kernel  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12781    else if(GroupId >= (Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12782                        ->NoOfGroups))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12783    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12784      /* [cover parentID={1C27753E-CADE-425c-9816-840298C81F3B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12785      Update return value as ADC_E_PARAM_GROUP  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12786      lErrVal = ADC_E_PARAM_GROUP;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12787    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12788    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12789    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12790      lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12791    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12792    /* [cover parentID={3EE9F965-F3C5-4821-BC6F-30C2EAC3B8C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12793    Safety is ON and Number of Cores available are greater than one or 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12794    MultiCore Error Detection is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12795    #if( (ADC_MULTICORE_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12796         ((ADC_SAFETY_ENABLE == STD_ON) && (MCAL_NO_OF_CORES > ADC_ONE_U)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12797    /* [cover parentID={213330E2-5803-486b-844A-4FB97E19F159}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12798    Multicore Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12799    if(0U == lMultiCoreErr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12800    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12801    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12802      /* [cover parentID={81C6DA90-1154-416c-BEBC-4FB0038578E2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12803      Return value not equal to ADC_E_NO_ERR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12804      if(lErrVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12805      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12806        /* [cover parentID={3A8C262C-4D19-461d-AD28-A84F2E2227C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12807        Report DET based on type of Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12808        Adc_lReportError(ServiceId, lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12809      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12810    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12811    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12812  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12813  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12814  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12815  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12816  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12817  ** Traceability: [cover parentID={A595109F-558B-4513-98EB-4BF44C5CCC39}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12818  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12819  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckWrongTrigSrcDet            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12820  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12821  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12822  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12823  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12824  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12825  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12826  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12827  ** Description      :This function is to check ADC_E_WRONG_TRIGG_SRC DET for  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12828  **                   the ServiceId(API).                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12829  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12830  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12831  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12832  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12833  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12834  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12835  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12836  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12837  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12838  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12839  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12840  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12841  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12842  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12843  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12844  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12845  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12846  LOCAL_INLINE uint8 Adc_lCheckWrongTrigSrcDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12847          const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12848  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12849    Adc_TriggerSourceType lTrigSrc;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12850    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12851    lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12852    lTrigSrc = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12853                                        GrpCfgPtr[GroupId].TriggerSource;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12854  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12855    /* [cover parentID={079E160B-4AD8-4467-948C-F0A291892604}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12856    Check if Service ID is equal to START or STOP Group Software conversion
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12857    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12858    if((ServiceId == ADC_SID_START_GROUP_CONVERSION) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12859        (ServiceId == ADC_SID_STOP_GROUP_CONVERSION))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12860    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12861      /* [cover parentID={97B93495-0094-4c3f-9861-F1B732DA6B5F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12862      Is trigger source not equal to software trigger  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12863      if(lTrigSrc != ADC_TRIGG_SRC_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12864      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12865        /* [cover parentID={5369283B-2D78-4daf-9125-63F4D9DB95E1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12866        Report ADC_E_WRONG_TRIGG_SRC DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12867        Adc_lReportError(ServiceId, ADC_E_WRONG_TRIGG_SRC);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12868        lErrVal = ADC_E_WRONG_TRIGG_SRC;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12869      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12870    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12871    /* [cover parentID={6480428D-DF39-4ad9-BB88-695B46DDD86E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12872    Check if Service ID is equal to Enable or Disable Hardware Trigger Source
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12873    for conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12874    else if((ServiceId == ADC_SID_ENABLE_HARDWARE_TRIGGER) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12875            (ServiceId == ADC_SID_DISABLE_HARDWARE_TRIGGER))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12876    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12877      /* [cover parentID={9035EFC9-EE3B-4490-AC71-75E8E17392A4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12878      Is trigger source not equal to hardware trigger [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12879      if(lTrigSrc != ADC_TRIGG_SRC_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12880      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12881        /* [cover parentID={649FA476-6A6A-4e8f-9BFD-FC04B0F0730A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12882        Report ADC_E_WRONG_TRIGG_SRC DET  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12883        Adc_lReportError(ServiceId, ADC_E_WRONG_TRIGG_SRC);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12884        lErrVal = ADC_E_WRONG_TRIGG_SRC;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12885      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12886    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12887    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12888    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12889      lErrVal = ADC_E_WRONG_TRIGG_SRC;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12890    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12891    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12892  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12893  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12894  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12895  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12896      (ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12897  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12898  ** Traceability: [cover parentID={F4CF83FE-B853-4eec-B7B6-C9E173A57F89}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12899  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12900  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckBufferUnInitDet            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12901  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12902  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12903  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12904  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12905  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12906  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12907  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12908  ** Description      :This function is to check ADC_E_BUFFER_UNINIT DET for the**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12909  **                   ServiceId(API).                                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12910  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12911  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12912  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12913  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12914  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12915  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12916  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12917  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12918  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12919  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12920  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12921  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12922  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12923  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12924  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12925  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12926  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12927  LOCAL_INLINE uint8 Adc_lCheckBufferUnInitDet(const uint32 KernelId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12928      const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12929  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12930    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12931    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12932  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12933    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12934    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12935  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12936    /* [cover parentID={815AB7A7-5582-4af4-AC2C-8D8C69FBB386}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12937    Is buffer location for storing the conversion results is NULL  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12938    if(lKernelDataPtr->GrpResBuffer[GroupId] == NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12939    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12940      /* [cover parentID={453C4AB8-2D44-4828-ACC2-F75463201C34}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12941      Report ADC_E_BUFFER_UNINIT Det Error  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12942      Adc_lReportError(ServiceId, ADC_E_BUFFER_UNINIT);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12943      lErrVal = ADC_E_BUFFER_UNINIT;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12944    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12945    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12946  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12947  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12948  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12949  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12950       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12951  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12952  ** Traceability: [cover parentID={45ACC233-B15E-470c-84BD-25DB8070CC86}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12953  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12954  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckGrpIdleDet                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12955  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12956  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12957  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12958  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12959  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12960  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12961  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12962  ** Description      :This function is to check ADC_E_IDLE Development or      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12963  **                   Runtime Error for the ServiceId(API).                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12964  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12965  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12966  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12967  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12968  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12969  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12970  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12971  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12972  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12973  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12974  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12975  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12976  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12977  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12978  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12979  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12980  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12981  LOCAL_INLINE uint8 Adc_lCheckGrpIdleDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12982          const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12983  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12984    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12985    uint32 lBusyFlag, lResultFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12986    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12987  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12988    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12989    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12990  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12991    lBusyFlag = Adc_lGetGroupStatus(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12992    lResultFlag = Adc_lGetGroupResultStatus(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12993  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12994    /* [cover parentID={DEA5840C-CA62-4a4e-88E3-AEA6A5329121}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12995    Is Group never started conversion OR Group has implicity stopped and
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12996    results are read [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12997    if( (lBusyFlag == (uint32)0U) && (lResultFlag == (uint32)0U) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12998    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 12999      /* [cover parentID={93CAC01F-C2F3-429b-941B-CBE21537D620}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13000      Report ADC_E_IDLE Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13001      Adc_lReportRuntimeDetError(ServiceId, ADC_E_IDLE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13002      /* Update return value as ADC_E_IDLE */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13003      lErrVal = ADC_E_IDLE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13004    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13005  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13006    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13007  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13008  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13009  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13010  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13011       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13012  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13013  ** Traceability: [cover parentID={20C41841-782D-4e59-8AC2-A416BCB6F8E1}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13014  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13015  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckGrpBusyDet                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13016  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13017  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13018  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13019  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13020  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13021  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13022  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13023  ** Description      :This function is to check ADC_E_BUSY Development or      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13024  **                   Runtime Error for the ServiceId(API).                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13025  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13026  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13027  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13028  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13029  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13030  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13031  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13032  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13033  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13034  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13035  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13036  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13037  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13038  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13039  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13040  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13041  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13042  LOCAL_INLINE uint8 Adc_lCheckGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13043          const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13044  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13045    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13046    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13047  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13048    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13049    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13050  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13051    switch (ServiceId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13052    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13053      /* [cover parentID={F3B8BB46-B898-4a16-9121-888BF9C3A930}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13054      Service Id is ADC_SID_DEINIT [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13055      case ADC_SID_DEINIT:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13056      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13057        /* [cover parentID={F91F2513-EF19-4290-8E40-036E4ACB2342}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13058        Check if any group is busy in conversion [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13059        if(Adc_lGetAllGroupStatus(CoreId) != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13060        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13061          /* [cover parentID={3FFA44ED-380A-4808-951E-F3620023B03F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13062          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13063          Adc_lReportRuntimeDetError(ADC_SID_DEINIT, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13064          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13065          lErrVal = ADC_E_BUSY; 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13066        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13067      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13068      break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13069      /* [cover parentID={3D4D8F05-E025-40f3-B1E6-3B043EAB5BD8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13070      DMA Mode Result Handling is OFF [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13071      #if(ADC_RESULT_HANDLING_IMPLEMENTATION != ADC_DMA_MODE_RESULT_HANDLING)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13072      /* [cover parentID={A4EDB7D3-1C09-4e9b-8205-E8AC78A5A69A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13073      Service Id is ADC_SID_SETUP_RESULT_BUFFER [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13074      case ADC_SID_SETUP_RESULT_BUFFER:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13075      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13076        uint32 lResultFlag, lBusyFlag;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13077        lResultFlag = Adc_lGetGroupResultStatus(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13078        lBusyFlag = Adc_lGetGroupStatus(lKernelDataPtr, GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13079        /*Check if group is BUSY, currently converting
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13080        OR group has implictly stopped with valid results available in buffer.
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13081        Since results are available in buffer, the new buffer address should not
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13082        be updated, because a ReadGroup call after this would read results from
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13083        unknown location*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13084        /* [cover parentID={04844BC0-4C0F-4514-ACAC-B08C879803F4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13085        Check if any group is busy or has valid results [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13086        if((lBusyFlag == (uint32)ADC_ONE_U ) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13087            (lResultFlag == (uint32)ADC_ONE_U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13088        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13089          /* [cover parentID={416EB563-EFCA-4412-B1B0-F2B26AD397CF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13090          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13091          Adc_lReportRuntimeDetError(ADC_SID_SETUP_RESULT_BUFFER, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13092          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13093          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13094        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13095      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13096      break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13097      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13098      /* [cover parentID={C9969EF8-D24F-4633-AD3A-EC4A0AF4A6B9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13099      Service Id is ADC_SID_START_GROUP_CONVERSION [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13100      case ADC_SID_START_GROUP_CONVERSION:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13101      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13102        /* [cover parentID={3CDE6E14-F0E8-48c9-8C0E-9F1A6B9B423C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13103        Check Start Group Conversion Busy Development or Runtime Error [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13104        lErrVal = Adc_lChkStartGrpConvGrpBusyDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13105                                                 lKernelDataPtr,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13106      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13107      break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13108      /* [cover parentID={2097C6CD-C18E-4929-9DEB-E6C04885D387}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13109      Service Id is ADC_SID_ENABLE_HARDWARE_TRIGGER [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13110      case ADC_SID_ENABLE_HARDWARE_TRIGGER:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13111      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13112        /* [cover parentID={35FADFDF-7B94-4ca8-B4F9-3C72326E2833}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13113        Check hardware trigger group busy Development or Runtime Error [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13114        lErrVal = Adc_lChkEnHwTrigGrpBusyDet(KernelId,GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13115                                             lKernelDataPtr,CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13116      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13117      break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13118      default:
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13119      /*Do nothing*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13120      break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13121    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13122    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13123  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13124  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13125  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13126  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13127       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13128  /*CYCLOMATIC_Adc_lChkStartGrpConvGrpBusyDet_JUSTIFICATION: This function checks 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13129  ADC_E_BUSY Development or Runtime Error for different mode of ADC operation(No 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13130  priority,Queuing,HW priority & HW-SW priority) & Also ADC_E_BUSY DET for groups 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13131  enabled with Limit checking & Alias configurations.The different if conditions  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13132  in different operating mode causes the complexity to increase, but actually 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13133  during run-time out of all if conditions many will be pre-compile time removed*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13134  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13135  ** Traceability: [cover parentID={AA8B5DEA-97C9-4766-AA2A-3EC907504AE2}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13136  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13137  ** Syntax           : LOCAL_INLINE uint8 Adc_lChkStartGrpConvGrpBusyDet       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13138  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13139  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13140  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13141  **                      const Adc_GlobalDataType * const KernelDataPtr        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13142  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13143  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13144  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13145  ** Description      :This function is to check the ADC_E_BUSY Development or  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13146  **                   Runtime Error for the ADC_SID_START_GROUP_CONVERSION     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13147  **                   service ID                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13148  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13149  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13150  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13151  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13152  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13153  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13154  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13155  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13156  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13157  **                    KernelDataPtr - Pointer to kernel data                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13158  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13159  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13160  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13161  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13162  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13163  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13164  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13165  LOCAL_INLINE uint8 Adc_lChkStartGrpConvGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13166    const Adc_GroupType GroupId, const Adc_GlobalDataType * const KernelDataPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13167    const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13168  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13169    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13170    /* [cover parentID={D817BC36-E441-44d3-A0DA-6F8C0D5DFED4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13171    Mode of Operation - Precompile Switch [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13172    #if ((ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13173         (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13174    /* FOR HW_PRIORITY MODE */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13175    uint16 lChannelMask, lResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13176  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13177    lChannelMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13178                   HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13179    lResRegMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13180                  HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13181    /*Raise Busy Error, if group is already in the queue or any channel/result
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13182      register of the group is already running on another request source */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13183    /* [cover parentID={F6BE3BE6-F832-46ce-B0AF-EA03E5FE0364}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13184    Any channel or result register of the group is already running on another
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13185    request source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13186    if(((KernelDataPtr->AllRunningChannels & lChannelMask) != (uint16)0U)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13187       ((KernelDataPtr->AllRunningResReg & lResRegMask)    != (uint16)0U) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13188    #elif(ADC_ENABLE_QUEUING == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13189    /* FOR QUEUING MODE */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13190    /* [cover parentID={B0F89D8C-B146-47f0-977F-0C6D2FF393F6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13191    Group for the kernel is currently not in  idle state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13192    if(Adc_lGetGroupStatus(KernelDataPtr,GroupId) == (uint32)ADC_ONE_U )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13193    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13194    /* FOR NO PRIORITY MODE */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13195    /* [cover parentID={87672A78-2076-4c33-80CD-C10E166EEFF8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13196    Group for the kernel is currently not in  idle state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13197    if((KernelDataPtr->GrpStatus) != (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13198    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13199    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13200      /* [cover parentID={B75D1D9E-1456-45cf-93B8-6D9462B73D74}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13201      Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13202      Adc_lReportRuntimeDetError(ADC_SID_START_GROUP_CONVERSION,ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13203      /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13204      lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13205    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13206    /* [cover parentID={F4B90FB3-4A14-46d4-B023-604210E34EAE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13207      Check ADC_E_BUSY Development or Runtime error if Priority is set to 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13208      ADC_PRIORITY_HW_SW[/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13209    #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13210    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13211    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13212      /* [cover parentID={FE47DAFD-F0B6-423a-B001-C4EA36DF0464}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13213      Report ADC_E_BUSY Development or Runtime error if no free RS and no lower 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13214      priority SW group is executing [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13215      lErrVal = Adc_lCheckGrpPrioSwDet(KernelId, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13216    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13217    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13218    /* Raise Busy DET if group is limit check group and another limit check
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13219    group is already started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13220    /* [cover parentID={9FA073A1-1E7E-41c4-943F-03D63FD6FE93}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13221    Priority mode is ON & Limit check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13222    #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13223         (ADC_ENABLE_LIMIT_CHECK==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13224    /* [cover parentID={817574CA-DF87-4017-A52D-437797CADAF9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13225    Are there any error occured? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13226    if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13227    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13228      /* [cover parentID={FEDE0DF3-1B6E-43fa-B3F9-CB90E3E88D8A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13229      Is Group is limit check configured group? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13230      if ((uint8)ADC_ONE_U == Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13231          HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13232      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13233        /* [cover parentID={EFB92AF7-257D-43bb-BCB6-3773793EAC91}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13234        Is another limit check group is already started? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13235        if ((uint8)ADC_ONE_U == KernelDataPtr->LimitChkActiveFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13236        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13237          /* [cover parentID={FF702711-D3AA-4d53-A701-35E965E49E38}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13238          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13239          Adc_lReportRuntimeDetError(ADC_SID_START_GROUP_CONVERSION, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13240          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13241          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13242        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13243      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13244    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13245    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13246    /* Raise busy DET if group has non-default ALIAS configuration and another
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13247    group with non-default ALIAS configuration is already started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13248    /* [cover parentID={B6177EDA-3219-40ec-A43D-7588CDE26F76}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13249    Priority mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13250    #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13251    /* [cover parentID={01A39559-0908-43a1-B9BA-A6D07200CE1E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13252    Are there any error occured? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13253    if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13254    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13255      /* [cover parentID={65A04510-4FA0-49c0-AE40-3C4D122AADB0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13256      Is channel of the group is configured with alias configuration? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13257      if (ADC_ALIAS_DEFAULT_VALUE != Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13258          HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13259      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13260        /* [cover parentID={997C0B5C-B035-49de-A042-5FA9C722FCF8}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13261        Is another alias configuration group is already started? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13262        if ((uint8)ADC_ONE_U == KernelDataPtr->AliasActiveFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13263        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13264          /* [cover parentID={8BA365ED-B70D-4013-B896-0CBF21539FDB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13265          Report ADC_E_BUSY DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13266          Adc_lReportRuntimeDetError(ADC_SID_START_GROUP_CONVERSION, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13267          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13268          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13269        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13270      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13271    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13272    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13273    /* [cover parentID={2023D57D-83D0-4c11-9905-887CEAE5D0C1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13274    SYNC mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13275    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13276    /* [cover parentID={26004456-4305-4964-A886-075182FC8D7C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13277    Any error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13278    if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13279    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13280      const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13281      /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13282      lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13283                     HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13284  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13285      /* [cover parentID={552C4F19-05B0-4d37-8147-212F9C06E2C9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13286      Any Sync channels configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13287      if (lGrpCfgPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13288      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13289        /* [cover parentID={CF5048E0-8D83-485b-B50B-513E993B93EA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13290        Check if synchronous slave channels or result registers are currently
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13291        in use [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13292        lErrVal = Adc_lCheckSlaveGrpBusyDet(KernelId, GroupId, CoreId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13293                                            ADC_SID_START_GROUP_CONVERSION);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13294  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13295      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13296      /* [cover parentID={7B7DED26-82FE-4c16-90CB-4631138D48C4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13297      No Priority Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13298      #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13299      else if (Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13300               SyncConvMode == ADC_SYNC_CONV_MODE_SLAVE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13301      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13302        /* [cover parentID={9C97120B-CB54-4c7f-8767-5402A8085E12}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13303        Kernel is synchronization slave, check if any channels or result registers
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13304        of group to be started are currently converting as slaves [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13305        if(((KernelDataPtr->AllRunningChannels & lGrpCfgPtr->ChannelMask) != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13306            (uint16)0U) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13307            ((KernelDataPtr->AllRunningResReg & lGrpCfgPtr->ResultRegMask) != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13308             (uint16)0U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13309        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13310          /* [cover parentID={E73BBA8A-4327-436c-89AD-A5DF4C920318}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13311          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13312          Adc_lReportRuntimeDetError(ADC_SID_START_GROUP_CONVERSION, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13313          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13314          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13315        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13316      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13317      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13318      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13319        /* Standalone group, nothing to do */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13320      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13321      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13322    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13323    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13324    UNUSED_PARAMETER(CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13325    UNUSED_PARAMETER(KernelId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13326    UNUSED_PARAMETER(GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13327  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13328    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13329  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13330  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13331  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13332  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13333       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13334  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13335  ** Traceability: [cover parentID={FC3928E9-9C45-470d-8496-EBA963055228}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13336  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13337  ** Syntax           : LOCAL_INLINE uint8 Adc_lChkEnHwTrigGrpBusyDet           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13338  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13339  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13340  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13341  **                      const Adc_GlobalDataType * const KernelDataPtr        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13342  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13343  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13344  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13345  ** Description      :This function is to check ADC_E_BUSY Development or      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13346  **                   Runtime Error for the ADC_SID_ENABLE_HARDWARE_TRIGGER    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13347  **                   service ID.                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13348  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13349  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13350  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13351  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13352  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13353  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13354  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13355  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13356  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13357  **                    KernelDataPtr - Pointer to kernel data                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13358  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13359  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13360  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13361  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13362  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13363  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13364  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13365  LOCAL_INLINE uint8 Adc_lChkEnHwTrigGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13366    const Adc_GroupType GroupId, const Adc_GlobalDataType * const KernelDataPtr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13367    const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13368  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13369    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13370  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13371    /* [cover parentID={7E259757-8853-434e-B37F-182D312E7976}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13372    Mode of Operation - Precompile Switch [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13373    /* [cover parentID={CA83AA10-0FDA-47ef-BC31-29413166FB31}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13374    FOR HW_PRIORITY MODE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13375    #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13376    uint8 lReqSrc;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13377    uint16 lChannelMask, lResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13378    lReqSrc = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13379              GrpCfgPtr[GroupId].GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13380    lChannelMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13381                   HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13382    lResRegMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13383                  HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13384    /* [cover parentID={9A4FF6C3-3BAF-4ad8-8B3E-7548C9E3D4B2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13385    Queue is not empty or RS is already running or Any channel or result register
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13386    of the group is already running on another request source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13387    if((KernelDataPtr->RSData[lReqSrc].PopGroupId != ADC_INVALID_GROUP_ID)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13388       ((KernelDataPtr->AllRunningChannels & lChannelMask) !=(uint16)0U)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13389       ((KernelDataPtr->AllRunningResReg & lResRegMask) != (uint16)0U) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13390    /* [cover parentID={AF947154-F987-48ee-9AC1-DE774DB706B2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13391    FOR HW_SW_PRIORITY MODE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13392    #elif (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13393    uint16 lChannelMask, lResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13394    lChannelMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13395                   HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13396    lResRegMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13397                  HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ResultRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13398    /* [cover parentID={0F65BA11-8637-4b67-8CC7-6B7AF6393A69}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13399    Any channel or result register of the group is already running on another
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13400    request source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13401    if(((KernelDataPtr->AllRunningChannels & lChannelMask) !=(uint16)0U)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13402       ((KernelDataPtr->AllRunningResReg & lResRegMask) != (uint16)0U) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13403    /* [cover parentID={94D1E98F-68DF-4540-A864-4F2464F1B99A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13404    FOR NO_PRIORITY AND QUEUING MODE [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13405    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13406    /*- Check if all groups for the kernel are currently not converting
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13407      - All SW triggered groups are in ADC_IDLE state
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13408      */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13409    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13410    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13411                    HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13412    /* [cover parentID={D888D46F-98D3-46d8-B47B-ED1D9482A284}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13413    Group for the kernel is currently not in  idle state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13414    if( ((KernelDataPtr->GrpStatus) != (uint32)0U) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13415        ( (KernelDataPtr->GrpBufferEndResultStatus & \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13416           lHwUnitCfgPtr->SwTrigGrpMask) != 0U) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13417    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13418    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13419      /* [cover parentID={0B5B2EDB-C4E1-4290-9BC2-FB4846D99911}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13420      Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13421      Adc_lReportRuntimeDetError(ADC_SID_ENABLE_HARDWARE_TRIGGER, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13422      /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13423      lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13424    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13425    #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13426    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13427    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13428      /* [cover parentID={03EC011E-25E2-4ace-BFDE-B296B576DE85}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13429      Report ADC_E_BUSY Development or Runtime error if no free RS and no lower  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13430      priority SW group is executing [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13431      lErrVal = Adc_lCheckGrpPrioHwDet(KernelId, GroupId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13432    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13433    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13434    /* Raise Busy DET if group is limit check group and another limit check
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13435    group is already started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13436    /* [cover parentID={F0BB7CC4-597C-4c91-A10D-964BB520CCC0}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13437    Priority mode is ON & Limit check is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13438    #if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) &&\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13439         (ADC_ENABLE_LIMIT_CHECK==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13440    /* [cover parentID={EC1682F5-E6AE-4287-B840-0C91D554ADB7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13441    Are there any error occured? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13442    if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13443    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13444      /* [cover parentID={5DA92F67-F9AB-468b-A212-CA89E6E073D9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13445      Is Group is limit check configured group? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13446      if ((uint8)ADC_ONE_U == Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13447          HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].LimitCheckGroup)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13448      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13449        /* [cover parentID={08D12123-60F5-4e23-B995-4C8752FA0B64}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13450        Is another limit check group is already started? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13451        if ((uint8)ADC_ONE_U == KernelDataPtr->LimitChkActiveFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13452        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13453          /* [cover parentID={C0E4ACF7-5EDB-4883-B3CF-89B885FA77E4}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13454          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13455          Adc_lReportRuntimeDetError(ADC_SID_ENABLE_HARDWARE_TRIGGER, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13456          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13457          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13458        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13459      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13460    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13461    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13462    /* Raise busy DET if group has non-default ALIAS configuration and another
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13463    group with non-default ALIAS configuration is already started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13464    /* [cover parentID={66D04460-8157-4a94-BC58-9712AF869455}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13465    Priority mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13466    #if (ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13467    /* [cover parentID={6BEC3B7A-213E-450b-8A9B-2DEA13B6EC52}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13468    Are there any error occured? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13469    if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13470    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13471      /* [cover parentID={1E7EF579-B31C-479e-938C-BA2DC812BC89}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13472      Is channel of the group is configured with alias configuration? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13473      if (ADC_ALIAS_DEFAULT_VALUE != Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13474          HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].AliasChCfg)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13475      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13476        /* [cover parentID={077C8DFC-DCBA-49f2-991C-E749D294766B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13477        Is another alias configuration group is already started? [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13478        if ((uint8)ADC_ONE_U == KernelDataPtr->AliasActiveFlag)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13479        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13480          /* [cover parentID={5ECAD507-2F12-4617-BACF-1CE5F8545837}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13481          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13482          Adc_lReportRuntimeDetError(ADC_SID_ENABLE_HARDWARE_TRIGGER, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13483          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13484          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13485        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13486      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13487    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13488    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13489    /* [cover parentID={63505BE4-5A3A-4e94-A270-6A4161F1CF97}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13490    SYNC mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13491    #if (ADC_SYNC_CONV_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13492    /* [cover parentID={667142B5-6AA8-403a-94CF-77CC4CCB28EB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13493    Any error occured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13494    if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13495    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13496      const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13497      /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13498      lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13499                     HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13500  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13501      /* [cover parentID={FB6D6ECF-EE23-45ab-8D14-962828B3B8CE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13502      Any Sync channels configured [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13503      if (lGrpCfgPtr->SyncChannelMask != (uint16)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13504      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13505        /* [cover parentID={C6EF425F-9D73-44f5-98B0-B685D795D5DA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13506        Check if synchronous slave channels or result registers are currently
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13507        in use [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13508        lErrVal = Adc_lCheckSlaveGrpBusyDet(KernelId, GroupId, CoreId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13509                                            ADC_SID_ENABLE_HARDWARE_TRIGGER);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13510  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13511      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13512      /* For HW or HW-SW priority mode, the below check has already been done
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13513         before, no need to repeat it */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13514      /* [cover parentID={4BD4736E-D572-4e31-BEB0-0893FCA6B9EC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13515      No Priority Mode is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13516      #if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13517      else if (Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13518               SyncConvMode == ADC_SYNC_CONV_MODE_SLAVE)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13519      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13520        /* [cover parentID={9C878537-6709-4a6f-8FE2-47A6E1A40892}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13521        Kernel is synchronization slave, check if any channels or result registers
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13522        of group to be started are currently converting as slaves [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13523        if(((KernelDataPtr->AllRunningChannels & lGrpCfgPtr->ChannelMask) !=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13524            (uint16)0U) ||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13525           ((KernelDataPtr->AllRunningResReg & lGrpCfgPtr->ResultRegMask) !=\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13526            (uint16)0U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13527        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13528          /* [cover parentID={C1C45D1E-DEF4-4547-B5B4-758CE51048B2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13529          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13530          Adc_lReportRuntimeDetError(ADC_SID_ENABLE_HARDWARE_TRIGGER, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13531          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13532          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13533        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13534      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13535      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13536      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13537        /* Standalone group, nothing to do */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13538      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13539      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13540    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13541    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13542    UNUSED_PARAMETER(GroupId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13543    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13544  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13545  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13546  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13547  #if ( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13548        ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13549        && (ADC_SYNC_CONV_ENABLE == STD_ON) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13550  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13551  ** Traceability: [cover parentID={2D0495BA-9443-4bda-9411-C44216134490}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13552  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13553  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckSlaveGrpBusyDet            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13554  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13555  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13556  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13557  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13558  **                       const uint8 ApiId                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13559  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13560  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13561  ** Description      :This function is to check the ADC_E_BUSY Development or  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13562  **                   Runtime Error for the slave kernels of the               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13563  **                   synchronization master                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13564  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13565  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13566  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13567  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13568  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13569  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13570  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13571  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13572  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13573  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13574  **                    ApiId - API for which the check is done                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13575  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13576  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13577  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13578  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13579  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13580  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13581  LOCAL_INLINE uint8 Adc_lCheckSlaveGrpBusyDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13582                                               const Adc_GroupType GroupId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13583                                               const uint32 CoreId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13584                                               const uint8 ApiId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13585  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13586    const Adc_HwUnitCfgType * lHwUnitCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13587    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13588    uint16 lSyncChannelMask, lSyncResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13589    uint8 lKernelCount, lSlaveKernel, lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13590  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13591    /* Get channels and result registers used by synchronization slaves */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13592    lSyncChannelMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13593              HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].SyncChannelMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13594    lSyncResRegMask = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13595              HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].SyncResRegMask;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13596  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13597    /* Check if required channel or result register of any slave is currently
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13598       busy */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13599    /* Get the base address of the kernel configuration */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13600    lHwUnitCfgPtr = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13601  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13602    /* [cover parentID={38B70DE1-FB7F-4160-A99D-736E39C6519D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13603    Till the last available Kernel [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13604    for (lKernelCount = (uint8)0U;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13605         lKernelCount < (uint8)(ADC_KERNELS_PER_SYNGRP - 1U); lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13606    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13607      lSlaveKernel = lHwUnitCfgPtr->SlaveKernels[lKernelCount];
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13608      /* [cover parentID={7C025ACA-5875-46d2-8BA3-B5214B79369D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13609      Slave kernel is valid for Sync Master [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13610      if (lSlaveKernel != ADC_INVALID_KERNEL_ID)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13611      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13612        lKernelDataPtr = Adc_lGetKernelDataAddress(lSlaveKernel, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13613  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13614        /* [cover parentID={DBBA7EC7-8A64-4ee8-97E0-EA21A5719C13}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13615        Sync channels or Sync result registers are busy [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13616        if (((lKernelDataPtr->AllRunningChannels & lSyncChannelMask) != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13617             (uint16)0U) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13618            ((lKernelDataPtr->AllRunningResReg & lSyncResRegMask) != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13619             (uint16)0U))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13620        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13621          /* [cover parentID={0E32021C-6B49-4ede-9C81-65A15EE0CB0F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13622          Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13623          Adc_lReportRuntimeDetError(ApiId, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13624          /* Update the return value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13625          lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13626          break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13627        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13628      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13629    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13630    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13631  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13632  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13633  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13634  #if ( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13635        ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13636        && (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13637  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13638  ** Traceability: [cover parentID={2FDB5EFA-DDAA-4d55-B459-702E2FD4ECEC}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13639  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13640  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckGrpPrioSwDet               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13641  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13642  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13643  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13644  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13645  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13646  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13647  ** Description      :This function is to check the ADC_E_BUSY Development or  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13648  **                   Runtime error for Adc_StartGroupConversion API when      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13649  **                   priority mode is HW-SW priority                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13650  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13651  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13652  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13653  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13654  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13655  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13656  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13657  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13658  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13659  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13660  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13661  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13662  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13663  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13664  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13665  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13666  LOCAL_INLINE uint8 Adc_lCheckGrpPrioSwDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13667                                 const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13668  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13669    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13670    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13671    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13672    Adc_GroupPriorityType lGroupPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13673    Adc_GroupPriorityType lMinGroupPriority = ADC_MAX_PRIORITY_LVL;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13674    uint32 lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13675    uint8 lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13676  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13677    /* Get priority of group to be started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13678    lGroupPriority = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13679                     GrpCfgPtr[GroupId].GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13680  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13681    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13682    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13683  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13684    /* [cover parentID={C25D2BC8-F696-4cbf-9D6B-3317B6E0AE08}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13685    Till the available Request Source [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13686    for (lRsCount = (uint32)0U; lRsCount < ADC_REQSRC_USED_COUNT; lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13687    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13688      /* Get current group ID for each RS: */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13689      lGroupId = lKernelDataPtr->RSData[lRsCount].ActiveGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13690      /* [cover parentID={6B0EBC52-BA72-4d29-874E-AB1973FCBBAE}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13691      RS is Free [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13692      if (ADC_INVALID_GROUP_ID == lGroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13693      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13694        /* [cover parentID={7DB0E8AA-CA5D-4559-8E97-3C8A062D7C41}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13695        Group can be started & Update error value as ADC_NO_ERR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13696        lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13697      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13698      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13699      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13700        /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13701        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13702                       HwUnitCfgPtr[KernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13703  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13704        /* [cover parentID={C7C4CCD8-3B81-4838-8FA4-BCF4CD8FC565}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13705        Lower priority SW group is currently executing [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13706        if ((lGrpCfgPtr->TriggerSource == ADC_TRIGG_SRC_SW) &&
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13707            (lGrpCfgPtr->GrpPriority < lGroupPriority))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13708        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13709          /* [cover parentID={33E9A2E5-5B05-4874-91CA-094FAAE54650}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13710          SW group with lower priority could be stopped to start the new group
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13711          & Update error value as ADC_NO_ERR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13712          lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13713        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13714  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13715        /* [cover parentID={7B4D5E0B-80F8-431a-A877-68A15E91A614}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13716        Grp priority is less than min Grp priority [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13717        if (lGrpCfgPtr->GrpPriority < lMinGroupPriority)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13718        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13719          /* [cover parentID={2345FD43-F5AA-4e16-B893-50203462A5D9}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13720          Store lowest priority of all currently executing group [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13721          lMinGroupPriority = lGrpCfgPtr->GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13722        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13723      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13724  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13725      if (lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13726      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13727        break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13728      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13729    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13730  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13731    if (lErrVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13732    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13733      /* [cover parentID={27C79EB5-ACB7-4fe1-A9BE-DE9A24B01C5E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13734      No RS  Free & No lower priority SW Grp executing [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13735      if (lGroupPriority <= lMinGroupPriority)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13736      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13737        lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13738      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13739      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13740      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13741        /* [cover parentID={8F768C0E-54D5-48f3-BC4B-A99919967E38}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13742        Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13743        Adc_lReportRuntimeDetError(ADC_SID_START_GROUP_CONVERSION, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13744      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13745    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13746    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13747  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13748  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13749  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13750  #if( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13751       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13752       && (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_HW_SW) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13753  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13754  ** Traceability: [cover parentID={4E8156EE-C74E-4de7-8194-FE073B92563F}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13755  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13756  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckGrpPrioHwDet               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13757  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13758  **                       const uint32 KernelId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13759  **                       const Adc_GroupType GroupId                          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13760  **                       const uint32 CoreId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13761  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13762  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13763  ** Description      :This function is to check the ADC_E_BUSY Development or  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13764  **                   Runtime Error for Adc_EnableHwTrigger API when priority  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13765  **                   mode is HW-SW priority                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13766  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13767  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13768  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13769  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13770  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13771  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13772  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13773  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13774  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13775  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13776  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13777  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13778  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13779  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13780  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13781  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13782  LOCAL_INLINE uint8 Adc_lCheckGrpPrioHwDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13783                                 const Adc_GroupType GroupId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13784  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13785    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13786    const Adc_GroupCfgType *lGrpCfgPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13787    Adc_GroupType lGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13788    Adc_GroupPriorityType lGroupPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13789    uint32 lRsCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13790    uint8 lErrVal = ADC_E_BUSY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13791  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13792    /* Get priority of group to be started */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13793    lGroupPriority = Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[KernelId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13794                     GrpCfgPtr[GroupId].GrpPriority;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13795  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13796    /* Get global state data location for the Kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13797    lKernelDataPtr = Adc_lGetKernelDataAddress(KernelId, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13798  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13799    /* [cover parentID={A24E106D-D32A-4264-BC28-17FD97E3001F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13800    Till the available RS or free RS found [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13801    for (lRsCount = (uint32)0U; lRsCount < ADC_REQSRC_USED_COUNT; lRsCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13802    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13803      /* Get current group ID for each RS: */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13804      lGroupId = lKernelDataPtr->RSData[lRsCount].ActiveGroupId;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13805      /* [cover parentID={A9333A04-F3C3-47cd-AA9C-1EEBC91083A2}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13806      RS is Free [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13807      if (ADC_INVALID_GROUP_ID == lGroupId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13808      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13809        /* [cover parentID={7C56FAFF-81FD-435a-BBCD-4D6F26BDF3E7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13810        Group can be started & Update error value as ADC_E_NO_ERR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13811        lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13812      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13813      else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13814      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13815        /* Get group configuration address */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13816        lGrpCfgPtr = &(Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13817                       HwUnitCfgPtr[KernelId]->GrpCfgPtr[lGroupId]);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13818  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13819        /* [cover parentID={DF457F7E-BE69-46a8-9D68-AC8CBC1E9BAA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13820        Lower priority SW group is currently executing [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13821        if ((lGrpCfgPtr->TriggerSource == ADC_TRIGG_SRC_SW) &&
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13822            (lGrpCfgPtr->GrpPriority < lGroupPriority))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13823        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13824          /* [cover parentID={9BB9D1ED-203C-44a4-B385-53CD0BD17D95}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13825          SW group with lower priority could be stopped to start the new group &
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13826          Update error value as ADC_E_NO_ERR [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13827          lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13828        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13829      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13830      if(lErrVal == ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13831      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13832        break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13833      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13834    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13835    /* [cover parentID={2F2460EB-9336-4e37-9658-312ECED200C3}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13836    Is a RS found on which requested group can be started [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13837    if (lErrVal != ADC_E_NO_ERR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13838    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13839      /* [cover parentID={47948E71-2A49-49bd-B15B-279F0B98D147}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13840      Report ADC_E_BUSY Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13841      Adc_lReportRuntimeDetError(ADC_SID_ENABLE_HARDWARE_TRIGGER, ADC_E_BUSY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13842    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13843    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13844  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13845  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13846  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13847  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13848                                              (ADC_GRP_NOTIF_CAPABILITY ==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13849  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13850  ** Traceability: [cover parentID={F44A611A-124E-4078-BB86-1757C5C2253C}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13851  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13852  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckNotifCapableDet            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13853  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13854  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13855  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13856  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13857  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13858  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13859  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13860  ** Description      :This function is to check ADC_E_NOTIF_CAPABILITY DET for **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13861  **                   the ServiceId(API).                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13862  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13863  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13864  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13865  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13866  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13867  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13868  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13869  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13870  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13871  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13872  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13873  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13874  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13875  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13876  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13877  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13878  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13879  LOCAL_INLINE uint8 Adc_lCheckNotifCapableDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13880          const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13881  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13882    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13883    Adc_NotifyFnPtrType lNotificationFn;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13884  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13885    lNotificationFn = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13886                      HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].NotifyPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13887    /* [cover parentID={C10525C5-9C9D-48ec-AB5F-CE7DCC1F842E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13888    Is Notification function pointer is NULL [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13889    if((Adc_NotifyFnPtrType)0U == lNotificationFn)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13890    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13891      /* [cover parentID={B8656CD5-B54E-48ec-B009-CFFA3CF95212}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13892      Report ADC_E_NOTIF_CAPABILITY Det  [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13893      Adc_lReportError(ServiceId, ADC_E_NOTIF_CAPABILITY);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13894      lErrVal = ADC_E_NOTIF_CAPABILITY;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13895    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13896    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13897  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13898  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13899  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13900  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13901      (ADC_HW_TRIGGER_API==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13902  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13903  ** Traceability: [cover parentID={0377C5DD-7E9E-4549-8470-3D3BF8A9A898}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13904  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13905  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckWrongConvModeDet           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13906  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13907  **                      const uint32 KernelId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13908  **                      const Adc_GroupType GroupId                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13909  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13910  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13911  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13912  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13913  ** Description      :This function is to check ADC_E_WRONG_CONV_MODE DET for  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13914  **                   the ServiceId(API).                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13915  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13916  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13917  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13918  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13919  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13920  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13921  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13922  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13923  **                    GroupId - Group ID for the Kernel                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13924  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13925  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13926  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13927  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13928  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13929  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13930  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13931  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13932  LOCAL_INLINE uint8 Adc_lCheckWrongConvModeDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13933          const Adc_GroupType GroupId, const uint8 ServiceId, const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13934  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13935    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13936    Adc_GroupConvModeType lConversionMode;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13937  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13938    lConversionMode = Adc_ConfigPtr->CoreCfgPtr[CoreId]->\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13939                      HwUnitCfgPtr[KernelId]->GrpCfgPtr[GroupId].ConvMode;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13940    /* [cover parentID={B415A15B-05CB-4070-9ECC-2560FDEE1D6D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13941    Is conversion mode is equal to continuous conversion mode [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13942    if(lConversionMode == ADC_CONV_MODE_CONTINUOUS)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13943    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13944      /* [cover parentID={D1C01A50-1442-4a1b-87B4-F5176C8784A5}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13945      Report ADC_E_WRONG_CONV_MODE Det [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13946      Adc_lReportError(ServiceId, ADC_E_WRONG_CONV_MODE);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13947      lErrVal = ADC_E_WRONG_CONV_MODE;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13948    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13949    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13950  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13951  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13952  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13953  #if((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13954  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13955  ** Traceability: [cover parentID={DD445580-5FE9-42fb-8E60-86901ABCF684}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13956  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13957  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckParamPointerDet            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13958  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13959  **                      const void *const Ptr                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13960  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13961  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13962  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13963  ** Description      :This function is to check ADC_E_PARAM_POINTER DET for    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13964  **                   the ServiceId(API).                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13965  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13966  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13967  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13968  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13969  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13970  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13971  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13972  ** Parameters(in)   : Ptr - Pointer                                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13973  **                    ServiceId - Serive ID of the API                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13974  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13975  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13976  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13977  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13978  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13979  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13980  LOCAL_INLINE uint8 Adc_lCheckParamPointerDet( const void * const Ptr,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13981                                                const uint8 ServiceId )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13982  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13983    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13984  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13985    /* [cover parentID={8614AB62-FB84-46d5-8A90-BD1A88C9FCF6}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13986    Received pointer is equal to NULL Pointer [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13987    if(NULL_PTR == Ptr)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13988    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13989      /* [cover parentID={DB7CD1D4-FE0F-46da-B053-A949DCABCF27}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13990      Update return value as ADC_E_PARAM_POINTER  & Report DET. [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13991      Adc_lReportError(ServiceId, ADC_E_PARAM_POINTER);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13992      lErrVal = ADC_E_PARAM_POINTER;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13993    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13994    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13995  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13996  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13997  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13998  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 13999      (ADC_LOW_POWER_STATE_SUPPORT==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14000  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14001  ** Traceability: [cover parentID={22A4A913-449F-42e8-9966-1BB8830C4C68}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14002  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14003  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckPowerStateNotSuppDet       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14004  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14005  **                      const uint8 ServiceId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14006  **                      const Adc_PowerStateType PowerState                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14007  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14008  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14009  ** Description      :This function is to check the Power State Support DETs   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14010  **                   for Adc_PreparePowerState API                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14011  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14012  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14013  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14014  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14015  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14016  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14017  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14018  ** Parameters(in)   : PowerState - Target power state intended to be attained **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14019  **                    ServiceId - Service ID of the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14020  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14021  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14022  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14023  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14024  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14025  LOCAL_INLINE uint8 Adc_lCheckPowerStateNotSuppDet(\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14026                   const Adc_PowerStateType PowerState,const uint8 ServiceId )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14027  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14028    uint8 lErrVal;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14029  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14030    /* [cover parentID={E4592451-4948-4b9a-9E5C-618DD48FC5AC}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14031    Is power state beyond the available power modes in the hardware [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14032    if(PowerState > ADC_OFF)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14033    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14034      /* Update the error status */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14035      lErrVal = ADC_E_POWER_STATE_NOT_SUPPORTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14036      /* [cover parentID={9029EE16-FD14-4690-B2E8-F52939AF337E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14037      Report ADC_E_POWER_STATE_NOT_SUPPORTED DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14038      Adc_lReportError(ServiceId, ADC_E_POWER_STATE_NOT_SUPPORTED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14039    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14040    /* [cover parentID={F1C9F94F-102D-416d-A2B3-C8E614852863}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14041    Is power state beyond the supported power modes from the configuration
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14042    [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14043    else if((((uint32)ADC_ONE_U << PowerState) & \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14044            (uint32)ADC_POWER_MODES_AVAILABLE) == (uint32)0U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14045    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14046      /* Update the error status */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14047      lErrVal = ADC_E_POWER_STATE_NOT_SUPPORTED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14048      /* [cover parentID={9029EE16-FD14-4690-B2E8-F52939AF337E}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14049      Report ADC_E_POWER_STATE_NOT_SUPPORTED DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14050      Adc_lReportError(ServiceId, ADC_E_POWER_STATE_NOT_SUPPORTED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14051    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14052    else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14053    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14054      /* return no error*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14055      lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14056    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14057    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14058  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14059  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14060  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14061  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14062     (ADC_LOW_POWER_STATE_SUPPORT==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14063  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14064  ** Traceability: [cover parentID={AB81997D-19F1-46d1-9A90-D85F43DE246D}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14065  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14066  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckPeripheralPreparedDet      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14067  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14068  **                      const uint32 TargetPwrState                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14069  **                      const uint8 ServiceId                                 **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14070  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14071  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14072  ** Description      :This function is to check the Peripheral Prepared DETs   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14073  **                   for Adc_SetPowerState API                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14074  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14075  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14076  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14077  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14078  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14079  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14080  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14081  ** Parameters(in)   : PowerState - Target power state intended to be attained **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14082  **                    ServiceId - Service ID of the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14083  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14084  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14085  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14086  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14087  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14088  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14089  LOCAL_INLINE uint8 Adc_lCheckPeripheralPreparedDet(const uint32 TargetPwrState,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14090                                                     const uint8 ServiceId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14091  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14092    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14093  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14094    /* [cover parentID={FA1EDC17-3A24-4437-933C-6A98B6D370BF}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14095    Requested power state is not prepared [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14096    if( (TargetPwrState & (uint32)ADC_ONE_U) != (uint32)ADC_ONE_U )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14097    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14098      /* Update error status */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14099      lErrVal = ADC_E_PERIPHERAL_NOT_PREPARED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14100      /* [cover parentID={8183F4C5-8CE7-48d8-BD40-CD997FCA9803}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14101      Report ADC_E_PERIPHERAL_NOT_PREPARED DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14102      Adc_lReportError(ServiceId, ADC_E_PERIPHERAL_NOT_PREPARED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14103    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14104    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14105  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14106  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14107  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14108  #if( ((ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14109       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON))) \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14110       && (ADC_LOW_POWER_STATE_SUPPORT==STD_ON) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14111  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14112  ** Traceability: [cover parentID={E53D87FA-E5C8-4d6d-A3DE-18C08518ADE0}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14113  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14114  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckHwUnitDisEngagedDet        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14115  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14116  **                      const uint8 ServiceId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14117  **                      const uint32 CoreId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14118  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14119  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14120  ** Description      :This function checks if any hardware group is not in     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14121  **                   state IDLE and reports hardware unit disengaged          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14122  **                   Development or Runtime Error for Adc_SetPowerState API   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14123  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14124  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14125  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14126  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14127  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14128  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14129  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14130  ** Parameters(in)   : ServiceId - Service ID if the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14131  **                    CoreId - Logical CPU core ID                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14132  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14133  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14134  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14135  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14136  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14137  LOCAL_INLINE uint8 Adc_lCheckHwUnitDisEngagedDet(const uint8 ServiceId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14138                                                   const uint32 CoreId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14139  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14140    const Adc_GlobalDataType *lKernelDataPtr;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14141    uint32 lKernelCount;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14142    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14143  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14144    /* [cover parentID={569D5622-BB57-444c-BB07-6318D260388F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14145    Loop till the last kernel ID,missing or un-configured kernels will be
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14146    NULL PTR in the config set [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14147    for(lKernelCount=(uint32)0U; lKernelCount<ADC_MAX_KERNEL_ID; lKernelCount++)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14148    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14149      /* [cover parentID={F6650E81-DC4B-430e-A59C-1853861C2686}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14150      Is Kernel Configured to current Core [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14151      if(Adc_ConfigPtr->CoreCfgPtr[CoreId]->HwUnitCfgPtr[lKernelCount] != \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14152          NULL_PTR)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14153      {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14154        /* Read base address of Kernal data pointer for core 8 */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14155        lKernelDataPtr = Adc_lGetKernelDataAddress(lKernelCount, CoreId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14156        /* [cover parentID={862E386F-BC29-4415-851D-AD52AD05D16B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14157        Any group not in IDLE state or Notiifcaiton is enabled for any group
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14158        [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14159        if( (lKernelDataPtr->GrpStatus != (uint32)0U) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14160            (lKernelDataPtr->GrpNotifStatus != (uint32)0U) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14161        {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14162          /* Update the error value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14163          lErrVal = ADC_E_NOT_DISENGAGED;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14164          /* [cover parentID={9A99E6A3-9F2B-4879-90DA-F8D597DF9290}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14165          Report ADC_E_NOT_DISENGAGED Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14166          Adc_lReportRuntimeDetError(ServiceId, ADC_E_NOT_DISENGAGED);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14167          break;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14168        }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14169      }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14170    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14171  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14172    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14173  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14174  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14175  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14176  #if(((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON)) && \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14177      (ADC_LOW_POWER_STATE_SUPPORT==STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14178  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14179  ** Traceability: [cover parentID={C47DFD71-A20A-4bdd-BE9F-065F5B596282}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14180  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14181  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckConverterOffDet            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14182  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14183  **                      const uint32 KernelId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14184  **                      const uint8 ServiceId,                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14185  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14186  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14187  ** Description      :This function is to check ADC_E_CONVERTER_OFF DET for    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14188  **                   the ServiceId(API).                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14189  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14190  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14191  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14192  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14193  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14194  ** Reentrancy       : Reentrant for different ADC hardware groups             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14195  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14196  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14197  **                    ServiceId - Service ID if the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14198  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14199  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14200  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14201  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14202  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14203  LOCAL_INLINE uint8 Adc_lCheckConverterOffDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14204                                               const uint8 ServiceId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14205  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14206    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14207    uint32 lPowerState;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14208  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14209    /* Read power state of the kernel */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14210    lPowerState = (uint32)(MODULE_EVADC.G[KernelId].ARBCFG.B.ANONS);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14211    lPowerState = (uint32)(ADC_TARGET_POWER_STATE_MASK & (~lPowerState));
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14212  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14213    /* [cover parentID={89076792-A56A-4afe-BF8F-6B31A1891772}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14214    Converter is in OFF state [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14215    if(lPowerState == ADC_OFF)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14216    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14217      /* [cover parentID={920C5BFE-F6F7-444f-9129-CD9CB15F1E65}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14218      Report ADC_E_CONVERTER_OFF DET [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14219      Adc_lReportError(ServiceId, ADC_E_CONVERTER_OFF);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14220      /* Update return value as ADC_E_CONVERTER_OFF */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14221      lErrVal = ADC_E_CONVERTER_OFF;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14222    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14223    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14224  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14225  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14226  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14227  #if((ADC_SAFETY_ENABLE == STD_ON) && (ADC_STARTUP_CALIB_API == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14228  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14229  ** Traceability: [cover parentID={65F085DB-9358-43b1-8E29-6F65E6AC1F83}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14230  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14231  ** Syntax           : LOCAL_INLINE uint8 Adc_lCheckStartupCalibOngoingDet     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14232  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14233  **                       const uint32 KernelId,                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14234  **                       const uint8 ServiceId                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14235  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14236  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14237  ** Description      : This API returns the status of the start-up calibration **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14238  **                    for Adc_StartGroupConversion & Adc_EnableHardwareTrigger**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14239  **                    Note: This API is available only when AdcCalibStatusApi **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14240  **                    is true & Safety Enable is ON                           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14241  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14242  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14243  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14244  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14245  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14246  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14247  ** Reentrancy       : Reentrant for different CPU cores                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14248  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14249  ** Parameters(in)   : KernelId - Kernel ID                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14250  **                    ServiceId - Service ID if the API                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14251  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14252  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14253  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14254  ** Return value     : Error ID                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14255  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14256  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14257  LOCAL_INLINE uint8 Adc_lCheckStartupCalibOngoingDet(const uint32 KernelId,\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14258                                                      const uint8 ServiceId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14259  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14260    /* Initialize the error value */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14261    uint8 lErrVal = ADC_E_NO_ERR;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14262  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14263    /* [cover parentID={8F216966-F913-43ae-B240-67A6F3DF56A1}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14264    Calibration is active [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14265    if(MODULE_EVADC.G[KernelId].ARBCFG.B.CAL == (uint32)ADC_ONE_U)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14266    {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14267      /* Update error value with Calibration On-going */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14268      lErrVal = ADC_SE_CALIB_ONGOING;
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14269  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14270      /* [cover parentID={98468243-DCED-475e-B902-061E3AEF31FB}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14271      Report ADC_SE_CALIB_ONGOING Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14272      Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ServiceId, \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14273                             ADC_SE_CALIB_ONGOING);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14274    }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14275    return(lErrVal);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14276  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14277  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14278  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14279  #if ((ADC_DEV_ERROR_DETECT == STD_ON) || (ADC_SAFETY_ENABLE == STD_ON))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14280  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14281  ** Traceability: [cover parentID={ABB0AC30-2202-479c-83F2-B05A2D892AD1}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14282  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14283  ** Syntax           : static void Adc_lReportError                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14284  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14285  **                       const uint8 ApiId,                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14286  **                       const uint8 ErrorId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14287  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14288  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14289  ** Description      : This function reports the DET or Safety Error           **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14290  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14291  ** Service ID       : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14292  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14293  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14294  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14295  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14296  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14297  ** Parameters (in)  : ApiId - Service ID of the API reporting an error        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14298  **                    ErrorId - ID of the error reported                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14299  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14300  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14301  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14302  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14303  *                                                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14304  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14305  static void Adc_lReportError(const uint8 ApiId, const uint8 ErrorId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14306  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14307    /* [cover parentID={355F0589-F6EA-4f2b-915B-88B31C4E687B}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14308    DET is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14309    #if (ADC_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14310    /* [cover parentID={AA871F77-EEAA-4a2d-96D9-419862CBC97C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14311    Report DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14312    (void)Det_ReportError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14313    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14314  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14315    /* [cover parentID={58EA4641-23B7-4d93-A3DE-371F59927735}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14316    SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14317    #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14318    /* [cover parentID={CB3ACF8A-7DB5-4283-AC87-E968BA995230},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14319    {481FE4E7-02D4-4767-BB4E-74A4C880E110}] Report Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14320    Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14321    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14322  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14323  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14324  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14325  #if( (ADC_SAFETY_ENABLE == STD_ON) || (ADC_RUNTIME_ERROR_DETECT == STD_ON)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14326       ((MCAL_AR_VERSION == MCAL_AR_422) && (ADC_DEV_ERROR_DETECT == STD_ON)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14327  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14328  ** Traceability     :[cover parentID={BD05F7CF-95FD-4a35-8B7B-78747D9746E6}]  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14329  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14330  ** Syntax           : static void Adc_lReportRuntimeDetError                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14331  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14332  **                       const uint8 ApiId,                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14333  **                       const uint8 ErrorId                                  **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14334  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14335  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14336  ** Description      : This function reports the Runtime Error or DET Error and**
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14337  **                    Safety Error depending on the Autosar version.          **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14338  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14339  ** Service ID       : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14340  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14341  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14342  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14343  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14344  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14345  ** Parameters (in)  : ApiId - Service ID of the API reporting an error        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14346  **                    ErrorId - ID of the error reported                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14347  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14348  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14349  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14350  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14351  *                                                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14352  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14353  static void Adc_lReportRuntimeDetError(const uint8 ApiId, const uint8 ErrorId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14354  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14355    /* [cover parentID={B5164CDF-747F-45b6-910B-E8E48B7DF660}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14356    Runtime Error Detection is only available in Autosar version AR440 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14357    #if(ADC_RUNTIME_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14358    /* [cover parentID={D267A3D8-236C-4bd6-B899-56EE54F5A08A}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14359    Report the Runtime Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14360    (void)Mcal_Wrapper_Det_ReportRuntimeError(ADC_MODULE_ID, ADC_MODULE_INSTANCE,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14361                                 ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14362    #elif(MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14363      /* [cover parentID={3B6A4BB9-ED56-4222-9960-E4BB5DC18AD7}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14364      DET is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14365      #if (ADC_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14366      /* [cover parentID={01F3BE59-CA0B-46e1-B9A0-7D3F8101B560}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14367      Report the DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14368      (void)Det_ReportError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14369      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14370  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14371      /* [cover parentID={1867C543-A64C-49c0-BF52-21C4A4839412}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14372      SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14373      #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14374      /* [cover parentID={D41E5F04-6D6A-4ee0-87AD-CB844EB17B2D}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14375      Report the Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14376      Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14377      #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14378    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14379  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14380  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14381  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14382  #if( (ADC_MULTICORE_ERROR_DETECT == STD_ON) || \ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14383       ((ADC_SAFETY_ENABLE == STD_ON) && (MCAL_NO_OF_CORES > ADC_ONE_U)) )
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14384  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14385  ** Traceability: [cover parentID={5A4190DE-6F5C-4ccc-8251-683D94DF6B46}]      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14386  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14387  ** Syntax          : static void Adc_lReportMulticoreError                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14388  **                   (                                                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14389  **                      const uint8 ApiId,                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14390  **                      const uint8 ErrorId                                   **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14391  **                   )                                                        **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14392  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14393  ** Description     : Function to report Safety Error and Multi-Core DET       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14394  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14395  ** Service ID      : None                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14396  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14397  ** Sync/Async      : Synchronous                                              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14398  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14399  ** Reentrancy      : Reentrant                                                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14400  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14401  ** Parameters (in) : ApiId - Service ID of the API reporting an error         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14402  **                   ErrorId - ID of the error reported                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14403  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14404  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14405  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14406  ** Return value    : None                                                     **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14407  *                                                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14408  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14409  static void Adc_lReportMulticoreError(const uint8 ApiId, const uint8 ErrorId)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14410  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14411    /* [cover parentID={A8608F1F-FFA0-4e35-9137-796F4D678EDA}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14412    Multi-Core DET is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14413    #if (ADC_MULTICORE_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14414    /* [cover parentID={475931FE-D646-48b1-8299-BC61D25DD080}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14415    Report Multi-Core DET Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14416    (void)Det_ReportError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14417    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14418  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14419    /* [cover parentID={CC6F5F83-81D0-42f2-84D9-5A7FD8956462}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14420    SAFETY is ON [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14421    #if (ADC_SAFETY_ENABLE == STD_ON)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14422    /* [cover parentID={32BBFF20-665D-4142-B7EC-80C3BC24C87A},
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14423    {481FE4E7-02D4-4767-BB4E-74A4C880E110}] Report Safety Error [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14424    Mcal_ReportSafetyError(ADC_MODULE_ID, ADC_MODULE_INSTANCE, ApiId, ErrorId);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14425    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14426  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14427  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14428  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14429  #if ((ADC_CLC_FAILURE_DEM_NOTIF == ADC_ENABLE_DEM_REPORT)||\ 
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14430       (ADC_CONV_STOP_TIME_DEM_NOTIF == ADC_ENABLE_DEM_REPORT))
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14431  /*******************************************************************************
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14432  ** Traceability     : [cover parentID={EFD5B7DD-3CF9-40dc-A98E-92F2CD641A75}] **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14433  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14434  ** Syntax           : static void Adc_lReportDemError                         **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14435  **                    (                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14436  **                       const Dem_EventIdType EventId,                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14437  **                       const Dem_EventStatusType EventStatus                **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14438  **                    )                                                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14439  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14440  ** Description      : This function reports the Production error status       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14441  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14442  ** Service ID       : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14443  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14444  ** Sync/Async       : Asynchronous                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14445  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14446  ** Reentrancy       : Reentrant for different Event IDs                       **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14447  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14448  ** Parameters (in)  : EventId - ID of the event reported                      **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14449  **                    EventStatus - Status of the event reported              **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14450  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14451  ** Parameters (out) : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14452  **                                                                            **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14453  ** Return value     : None                                                    **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14454  *                                                                             **
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14455  *******************************************************************************/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14456  static void Adc_lReportDemError(const Dem_EventIdType EventId,
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14457  const Dem_EventStatusType EventStatus)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14458  {
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14459    /* [cover parentID={359CD9B0-BD82-45ea-802D-E668B175FC51}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14460    Autosar version is AR422 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14461    #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14462    /* [cover parentID={378278C7-FAE6-4885-81B0-9C4BD6A9F44C}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14463    Report the Production error status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14464    Mcal_Wrapper_Dem_ReportErrorStatus(EventId, EventStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14465  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14466    /* [cover parentID={8663E032-3451-4ca4-A5F0-2A1BA1656C83}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14467    Autosar version is AR440 [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14468    #else
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14469    /* [cover parentID={FF90BA54-7482-481b-AE56-04C3B4D88762}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14470    Report the Production error status [/cover] */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14471    (void)Mcal_Wrapper_Dem_SetEventStatus(EventId, EventStatus);
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14472  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14473    #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14474  }
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14475  #endif
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14476  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14477  /*[cover parentID={BA6EFE0D-B9E6-4630-BF56-93FFA7D4CB7F}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14478  Code Memory section executable by all cores
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14479  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14480  /*[cover parentID={4579FE20-92DA-4848-93DB-7AD4FD35DD50}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14481  Code Memory section naming as per AS
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14482  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14483  
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14484  /*[cover parentID={566ED99C-0D96-46ac-97BF-E97B04E2C700}]
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14485  Callout Memory section not used in ADC driver
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14486  [/cover]*/
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14487  #define ADC_STOP_SEC_CODE_ASIL_B_GLOBAL
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14488  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14489     guideline. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14490  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14491     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14492  #include "Adc_MemMap.h"
; ..\Mcal\Tricore\Adc\ssc\src\Adc.c	 14493  

	; Module end
