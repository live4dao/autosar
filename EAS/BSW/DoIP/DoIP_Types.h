/*  BEGIN_FILE_HDR
********************************************************************************
*   NOTICE
*   This software is the property of HiRain Technologies. Any information
*   contained in this doc should not be reproduced, or used, or disclosed
*   without the written authorization from HiRain Technologies.
********************************************************************************
*   File Name       : DoIP_Type.h
********************************************************************************
*   Project/Product : DoIP Module
*   Title           : DoIP_Type.h
*   Author          : qing.wang
********************************************************************************
*   Description     : DoIP header file for macro and structure defination
*
********************************************************************************
*   Limitations     : None
*
********************************************************************************
*
********************************************************************************
*   Revision History:
*
*   Version     Date          Initials      CR#          Descriptions
*   ---------   ----------    ------------  ----------   ---------------
*   01.00.00    01/09/2014    qing.wang     N/A          Original
********************************************************************************
* END_FILE_HDR*/

#ifndef DOIP_TYPE_H
#define DOIP_TYPE_H

/*******************************************************************************
*   Includes
*******************************************************************************/
#include "ComStack_Types.h"
#include "SoAd_GeneratedTypes.h"
#include "Rte_DoIP_Type.h"
#include "Compiler.h"


/******************************************************************************
*   Macros and Tyedef
*******************************************************************************/
/*Oem platform types*/
#define DOIP_NO_PLATFORM                                    (0)
#define DOIP_GREATWALL_PLATFORM                             (1)
#define DOIP_HOZON_PLATFORM                                 (2)

/*SWS_DoIP_00148*/
#define DOIP_E_UNINIT                   (uint8)0x01
#define DOIP_E_PARAM_POINTER            (uint8)0x02
#define DOIP_E_INVALID_PDU_SDU_ID       (uint8)0x03
#define DOIP_E_INVALID_PARAMETER        (uint8)0x04
#define DOIP_E_INIT_FAILED              (uint8)0x05

/* SWS_DoIP_00272
 * The value of DOIP_E_PENDING shall be 0x10.
 * SWS_DoIP_00273
 * DOIP_E_PENDING shall be defined within DoIP_Types.h to ensure compatibility.
 */
#define DOIP_E_PENDING                  (uint8)0x10

/*SWS_DoIP_00097*/
#define DOIP_NODE                       0x01
#define DOIP_GATEWAY                    0x00

/*need be generated by rte, may be delated in future  SWS_DoIP_00266*/

#define     DOIP_POWER_STATE_NOT_READY     (uint8)0x00
#define     DOIP_POWER_STATE_READY         (uint8)0x01
#define     DOIP_POWER_STATE_NOT_SUPPORT   (uint8)0x02
typedef uint8 DoIP_PowerStateType;

/*need be generated by rte, may be delated in future  SWS_DoIP_00271*/
#define DOIP_ACTIVATION_LINE_ACTIVE        (uint8)0x00
#define DOIP_ACTIVATION_LINE_INACTIVE      (uint8)0x01
typedef uint8 DoIP_ActivationLineStatusType;

typedef enum
{
    DOIP_IFPDU = 0x00,
    DOIP_TPPDU = 0x01,
    DOIP_INVALID_PDU_TYPE = 0xff
} DoIP_PduType;
enum
{
    DOIP_ONE = 1,
    DOIP_TWO = 2,
    DOIP_THREE = 3,
    DOIP_FOUR = 4,
    DOIP_FIVE = 5,
    DOIP_SIX = 6,
    DOIP_SEVEN = 7,
    DOIP_EIGHT = 8,
    DOIP_NINE = 9,
    DOIP_TEN = 10,
    DOIP_ELEVN = 11,
    DOIP_TWELVE = 12,
    DOIP_THIRTEEN = 13,
    DOIP_SEVENTEEN = 17
};


typedef enum
{
    DOIP_SOCON_CLOSE_REQ_NONE = 0x00,
    DOIP_SOCON_CLOSE_REQ_PENDING = 0x01,
    DOIP_SOCON_CLOSE_REQ_PROCESSING = 0x02
} DoIP_SoConCloseStateType;

typedef enum
{
    DOIP_ROUTING_ACTIVATION_REQ_NONE = 0x00,
    DOIP_ROUTING_ACTIVATION_ALIVE_CHECK,
    DOIP_ROUTING_ACTIVATION_AUTH_PENDING,
#if(DOIP_HOZON_PLATFORM == DOIP_OEM_PLATFORM)
    DOIP_ROUTING_ACTIVATION_WAIT_KEY,
    DOIP_ROUTING_ACTIVATION_KEY_RECEIVED,
#endif
    DOIP_ROUTING_ACTIVATION_CONFIRM_PENDING,
    DOIP_ROUTING_ACTIVATION_REGISTED,
    DOIP_ROUTING_ACTIVATION_ACTIVED
} DoIP_RoutActivStatusType;

typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_AuthCallbackReqResType)
(
    boolean *Authentified,
    uint8 *ReqData,
    uint8 *ResData
);
typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_AuthCallbackReqType)
(
    boolean *Authentified,
    uint8 *ReqData
);
typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_AuthCallbackResType)
(
    boolean *Authentified,
    uint8 *ResData
);
typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_AuthCallbackType)
(
    boolean *Authentified
);

typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_ConfirmCallbackReqResType)
(
    boolean *Confirmed,
    uint8 *ReqData,
    uint8 *ResData
);
typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_ConfirmCallbackReqType)
(
    boolean *Confirmed,
    uint8 *ReqData
);
typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_ConfirmCallbackResType)
(
    boolean *Confirmed,
    uint8 *ResData
);
typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_ConfirmCallbackType)
(
    boolean *Confirmed
);

typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_GetGidCallbackType)
(
    uint8 *Data
);

typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_TriggerGidSyncCbkType)
(
    void
);

typedef P2FUNC (Std_ReturnType, AUTOMATIC, DoIP_PowerModeCallbackType)
(
    DoIP_PowerStateType *PowerStateReady
);

typedef uint16 DoIP_LogicAddrType;

typedef struct
{
    /*
     * DoIPSoAdRxPduId used by
     * - DoIP_SoAdxxRxIndication
     * - DoIP_SoAdTpStartOfReceiption
     * - DoIP_SoAdTpCopyRxData
     *
     * DoIPSoAdTxPduId used by
     * - DoIP_SoAdxxTxConfirmtaion
     * - DoIP_SoAdCopyTxData
     *
     * Implement as connection array index and DoIPSoAdRxPduId = DoIP_SoAdTxPduId.
     *
     */

    /* Which Socket connection is used by this DoIP connection */
    SoAd_SoConIdType SoConId;

    /*
     * It's used When SoAd transmit interfaces are called like:
     * - SoAd_xxTransmit
     * - SoAd_xxCancelTransmit
     */
    PduIdType SoAdTxPduId;

    /*
     * It's used When SoAd receive interfaces are called like:
     * - SoAd_xxCancelReceive
     */
    PduIdType SoAdRxPduId;
} DoIP_ConType;

typedef struct
{
    /* Source Address for Tester */
    DoIP_LogicAddrType SA;

    /* Target Address */
    DoIP_LogicAddrType TA;

    /*
     * Allocate by PduR
     * - PduR_DoIPTpStartOfReception
     * - PduR_DoIPTpCopyRxData
     * - PduR_DoIPTpRxIndication
     *
     * Not used when pdu type is IF-PDU
     */
    PduIdType PduRRxPduId;

    /*
     * Allocate by PduR
     * - PduR_DoIPTpCopyTxData
     * - PduR_DoIPTpTxConfirmation
     *
     */
    PduIdType PduRTxPduId;

    /*
     * TP-PDU : Non-UUDT Diagnostic Message and DoIP defined message type
     * IF-PDU : UUDT
     */
    DoIP_PduType PduType;

    /* Only been used when pdu type is IF-PDU */
    uint8 IfPduBufId;
} DoIP_ChannelType;

typedef struct
{
    /*
     * 0x00 : default
     * 0x01 : WWW-OBD
     * 0xE0 : Central security(OEM-specific), optional
     */
    uint8 ActionType;

    /* Number of target address will be actived on this routing activation */
    uint8 NumTargetAddr;

    /* Target address index list */
    const uint8 *TargetAddrIdList;

    uint8 AuthReqLen;
    uint8 AuthResLen;
    P2VAR (void, AUTOMATIC, AUTOMATIC) AuthCallback;

    uint8 ConfirmReqLen;
    uint8 ConfirmResLen;
    P2VAR (void, AUTOMATIC, AUTOMATIC) ConfirmCallback;
} DoIP_RoutingActivationType;

typedef struct
{
    uint32 NumByteDiagAckNack;

    /* Source address of the tester */
    DoIP_LogicAddrType SA;

    /* How many routing activation is supportted */
    uint8 NumRoutActiv;

    /* Routing activation index list */
    const uint8 *RoutActivIdList;
} DoIP_TesterType;

/*SWS_DoIP_00025*/
typedef struct
{
    const uint8 *Eid;
    const uint8 *Gid;
    uint8 NumTester;
    uint8 NumRoutActiv;
    DoIP_LogicAddrType LA;/* Logical Address */
    const DoIP_LogicAddrType *TargetAddrs;
    const DoIP_ConType *UdpCons;
    const DoIP_ConType *TcpCons;
    const DoIP_ChannelType *Channels;
    const DoIP_TesterType *Testers;
    const DoIP_RoutingActivationType *RoutActivs;
    DoIP_GetGidCallbackType GetGidCallback;
    DoIP_PowerModeCallbackType PowerModeCallback;
    DoIP_TriggerGidSyncCbkType TriggerGidSyncCallback;
} DoIP_ConfigType;

#endif/*DOIP_TYPE_H*/
