	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc32712a --dep-file=EAS\\BSW\\Com\\.Com.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\Com\\Com.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\Com\\Com.src ..\\EAS\\BSW\\Com\\Com.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\Com\\Com.c'

	
$TC162
	
	.sdecl	'.text.Com.Com_IsPduStart',code,cluster('Com_IsPduStart')
	.sect	'.text.Com.Com_IsPduStart'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	     1  /*  BEGIN_FILE_HDR
; ..\EAS\BSW\Com\Com.c	     2  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	     3  *   NOTICE
; ..\EAS\BSW\Com\Com.c	     4  *   This software is the property of HiRain Technologies. Any information
; ..\EAS\BSW\Com\Com.c	     5  *   contained in this doc should not be reproduced, or used, or disclosed
; ..\EAS\BSW\Com\Com.c	     6  *   without the written authorization from HiRain Technologies.
; ..\EAS\BSW\Com\Com.c	     7  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	     8  *   File Name:       Com.c
; ..\EAS\BSW\Com\Com.c	     9  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	    10  *   Project/Product : AUTOSAR 4.2
; ..\EAS\BSW\Com\Com.c	    11  *   Title:          : Com module Source File
; ..\EAS\BSW\Com\Com.c	    12  *   Author:         : Hirain
; ..\EAS\BSW\Com\Com.c	    13  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	    14  *   Description:      Implementation of Com provided functionality
; ..\EAS\BSW\Com\Com.c	    15  *
; ..\EAS\BSW\Com\Com.c	    16  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	    17  *   Limitations:      None
; ..\EAS\BSW\Com\Com.c	    18  *
; ..\EAS\BSW\Com\Com.c	    19  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	    20  *
; ..\EAS\BSW\Com\Com.c	    21  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	    22  *   Revision History:
; ..\EAS\BSW\Com\Com.c	    23  *
; ..\EAS\BSW\Com\Com.c	    24  *   Version    Date        Initials         CR#        Descriptions
; ..\EAS\BSW\Com\Com.c	    25  *   --------   ----------  -------------    -------    -------------------
; ..\EAS\BSW\Com\Com.c	    26  *   01.00.00   12/05/2017  ning.chen        N/A        Original
; ..\EAS\BSW\Com\Com.c	    27  *   01.01.00   12/04/2018  ning.chen        N/A        EAS422_COM_20180412_01
; ..\EAS\BSW\Com\Com.c	    28  *   01.02.00   12/07/2018  ning.chen        N/A        EAS422_COM_20180712_01
; ..\EAS\BSW\Com\Com.c	    29  *   01.02.01   12/07/2018  ning.chen        N/A        EAS422_COM_20181010_01
; ..\EAS\BSW\Com\Com.c	    30  *   01.02.02   22/11/2018  ning.chen        N/A        EAS422_COM_20181122_01
; ..\EAS\BSW\Com\Com.c	    31  *   01.02.03   14/02/2019  ning.chen        N/A        EAS422_COM_20190214_01
; ..\EAS\BSW\Com\Com.c	    32  *   01.02.04   25/04/2019  beibei.xing      N/A        EAS422_COM_20190425_01
; ..\EAS\BSW\Com\Com.c	    33  *   01.02.05   04/06/2019  ning.chen        N/A        EAS422_COM_20190604_01
; ..\EAS\BSW\Com\Com.c	    34  *   01.02.06   06/09/2019  ning.chen        N/A        EAS422_COM_20190906_01
; ..\EAS\BSW\Com\Com.c	    35  *   01.02.07   15/07/2020  feixiang.dong    N/A        EAS422_COM_20200715_01
; ..\EAS\BSW\Com\Com.c	    36  *   01.02.08   11/06/2021  boxue.li         N/A        EAS422_COM_20210611_01
; ..\EAS\BSW\Com\Com.c	    37  *   01.02.09   03/08/2021  feixiang.dong    N/A        EAS422_COM_20210803_01
; ..\EAS\BSW\Com\Com.c	    38  *   01.02.10   22/09/2021  feixiang.dong    N/A        EAS422_COM_20210922_01
; ..\EAS\BSW\Com\Com.c	    39  *   01.02.11   29/12/2021  feixiang.dong    N/A        EAS422_COM_20211229_01
; ..\EAS\BSW\Com\Com.c	    40  *   01.02.12   17/07/2022  ziyi.zhao        N/A        EAS422_COM_20220717_01
; ..\EAS\BSW\Com\Com.c	    41  *   01.02.13   02/03/2023  keyu.wu          N/A        EAS422_COM_20230203_01
; ..\EAS\BSW\Com\Com.c	    42  *   01.03.00   28/03/2023  ning.chen        N/A        EAS422_COM_20230328_01
; ..\EAS\BSW\Com\Com.c	    43  *   01.04.00   27/06/2023  keyu.wu          N/A        EAS422_COM_20230627_01
; ..\EAS\BSW\Com\Com.c	    44  *   01.04.01   04/01/2024  keyu.wu          N/A        EAS422_COM_20240104_01
; ..\EAS\BSW\Com\Com.c	    45  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	    46  *END_FILE_HDR*/
; ..\EAS\BSW\Com\Com.c	    47  
; ..\EAS\BSW\Com\Com.c	    48  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	    49  *    Includes
; ..\EAS\BSW\Com\Com.c	    50  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	    51  #include "SchM_Com.h"
; ..\EAS\BSW\Com\Com.c	    52  #include "Com.h"
; ..\EAS\BSW\Com\Com.c	    53  #include "Com_Cbk.h"
; ..\EAS\BSW\Com\Com.c	    54  #if(STD_ON == COM_DEV_ERROR_DETECT)
; ..\EAS\BSW\Com\Com.c	    55  #include "Det.h"
; ..\EAS\BSW\Com\Com.c	    56  #endif
; ..\EAS\BSW\Com\Com.c	    57  
; ..\EAS\BSW\Com\Com.c	    58  
; ..\EAS\BSW\Com\Com.c	    59  
; ..\EAS\BSW\Com\Com.c	    60  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	    61  *   Version Check
; ..\EAS\BSW\Com\Com.c	    62  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	    63  #if(STD_ON == COM_VERSION_CHECK)
; ..\EAS\BSW\Com\Com.c	    64  /* check Version with cfg file */
; ..\EAS\BSW\Com\Com.c	    65  #if ((COM_AR_RELEASE_MAJOR_VERSION != COM_AR_RELEASE_MAJOR_VERSION_CFG) || \ 
; ..\EAS\BSW\Com\Com.c	    66     (COM_AR_RELEASE_MINOR_VERSION != COM_AR_RELEASE_MINOR_VERSION_CFG))
; ..\EAS\BSW\Com\Com.c	    67  #error "AutoSar Version Numbers of CanIf and its cfg file are different"
; ..\EAS\BSW\Com\Com.c	    68  #endif
; ..\EAS\BSW\Com\Com.c	    69  
; ..\EAS\BSW\Com\Com.c	    70  #if ((COM_SW_MAJOR_VERSION != COM_SW_MAJOR_VERSION_CFG) || \ 
; ..\EAS\BSW\Com\Com.c	    71     (COM_SW_MINOR_VERSION != COM_SW_MINOR_VERSION_CFG))
; ..\EAS\BSW\Com\Com.c	    72  #error "SW Version Numbers of Com and its cfg file are different"
; ..\EAS\BSW\Com\Com.c	    73  #endif
; ..\EAS\BSW\Com\Com.c	    74  #endif
; ..\EAS\BSW\Com\Com.c	    75  
; ..\EAS\BSW\Com\Com.c	    76  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	    77  *   Private Data
; ..\EAS\BSW\Com\Com.c	    78  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	    79  #define COM_START_SEC_VAR_INIT_8
; ..\EAS\BSW\Com\Com.c	    80  #include "MemMap.h"
; ..\EAS\BSW\Com\Com.c	    81  STATIC VAR(Com_StatusType, COM_VAR) Com_InitStateFlag = COM_UNINIT;
; ..\EAS\BSW\Com\Com.c	    82  #define COM_STOP_SEC_VAR_INIT_8
; ..\EAS\BSW\Com\Com.c	    83  #include "MemMap.h"
; ..\EAS\BSW\Com\Com.c	    84  
; ..\EAS\BSW\Com\Com.c	    85  #if(COM_CONFIG_VARIANTS == STD_CONFIG_VARIANTS_POSTBUILD)
; ..\EAS\BSW\Com\Com.c	    86  #define COM_START_SEC_VAR_NOINIT_UNSPECIFIED
; ..\EAS\BSW\Com\Com.c	    87  #include "MemMap.h"
; ..\EAS\BSW\Com\Com.c	    88  STATIC P2CONST(Com_ConfigType, COM_VAR, COM_CONST) Com_PBConfig;
; ..\EAS\BSW\Com\Com.c	    89  #define COM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
; ..\EAS\BSW\Com\Com.c	    90  #include "MemMap.h"
; ..\EAS\BSW\Com\Com.c	    91  #endif
; ..\EAS\BSW\Com\Com.c	    92  
; ..\EAS\BSW\Com\Com.c	    93  
; ..\EAS\BSW\Com\Com.c	    94  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	    95  *   Macro Tx
; ..\EAS\BSW\Com\Com.c	    96  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	    97  /* tx Pdu reg access  */
; ..\EAS\BSW\Com\Com.c	    98  #define COM_TXPDU_TMS_FLAG(TxIpduId)             (Com_TxPduTable[TxIpduId].IpduTMSFlag)
; ..\EAS\BSW\Com\Com.c	    99  #define COM_TXPDU_PERIOD(TxIpduId)               (Com_TxPduTable[TxIpduId].TxModeTimePeriod)
; ..\EAS\BSW\Com\Com.c	   100  #define COM_TXPDU_TXTIME_OFFSET(TxIpduId)        (Com_TxPduTable[TxIpduId].TxModeTimeOffset)
; ..\EAS\BSW\Com\Com.c	   101  #define COM_TXPDU_MIN_DELAY_TIMER(TxIpduId)      (Com_TxPduTable[TxIpduId].MininumDelayTimer)
; ..\EAS\BSW\Com\Com.c	   102  #define COM_TXPDU_REP_NUM(TxIpduId)              (Com_TxPduTable[TxIpduId].TxModeNumOfRep)
; ..\EAS\BSW\Com\Com.c	   103  #define COM_TXPDU_PERIOD_BACKUP(TxIpduId)        (Com_TxPduTable[TxIpduId].TimePeriodBackUp)
; ..\EAS\BSW\Com\Com.c	   104  #define COM_TXPDU_TIMEOUT(TxIpduId)              (Com_TxPduTable[TxIpduId].TxIpduTimeOut)
; ..\EAS\BSW\Com\Com.c	   105  #define COM_TXPDU_TXMODE_PTR(TxIpduId)           (Com_TxPduTable[TxIpduId].TxModeSelectPtr)
; ..\EAS\BSW\Com\Com.c	   106  #define COM_TXPDU_DYN_LENGTH(TxIpduId)           (Com_TxPduTable[TxIpduId].TxDynLength)
; ..\EAS\BSW\Com\Com.c	   107  #define COM_TXPDU_REQ_CONF_NUM(TxIpduId)         (Com_TxPduTable[TxIpduId].TxConfNumOfRep)
; ..\EAS\BSW\Com\Com.c	   108  #define COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId)  (Com_TxPduTable[TxIpduId].txMinDelayReqBackUp)
; ..\EAS\BSW\Com\Com.c	   109  #define COM_TXPDU_TP_INDEX(TxIpduId)                (Com_TxPduTable[TxIpduId].tpPduIndex)
; ..\EAS\BSW\Com\Com.c	   110  #define COM_TXPDU_IFACTIVE_FLAG(TxIpduId)                (Com_TxPduTable[TxIpduId].txActiveFlag)
; ..\EAS\BSW\Com\Com.c	   111  
; ..\EAS\BSW\Com\Com.c	   112  
; ..\EAS\BSW\Com\Com.c	   113  
; ..\EAS\BSW\Com\Com.c	   114  #define COM_TXPDU_TXMODE(TxIpduId)               (Com_TxPduTable[TxIpduId].TxModeSelectPtr->TxModeMode)
; ..\EAS\BSW\Com\Com.c	   115  #define COM_TXPDU_TXMODE_PERIOD(TxIpduId)        (Com_TxPduTable[TxIpduId].TxModeSelectPtr->TxModeTimePeriod)
; ..\EAS\BSW\Com\Com.c	   116  #define COM_TXPDU_TXMODE_REP_NUM(TxIpduId)       (Com_TxPduTable[TxIpduId].TxModeSelectPtr->TxModeNumberOfRepetitions)
; ..\EAS\BSW\Com\Com.c	   117  #define COM_TXPDU_TXMOD_REP_PERIOD(TxIpduId)     (Com_TxPduTable[TxIpduId].TxModeSelectPtr->TxModeRepetitionPeriod)
; ..\EAS\BSW\Com\Com.c	   118  /*#define COM_TXPDU_TXMOD_TXTIME_OFFSET(TxIpduId)  (Com_TxPduTable[TxIpduId].TxModeSelectPtr->TxModeTimeOffset)not used in this version*/
; ..\EAS\BSW\Com\Com.c	   119  
; ..\EAS\BSW\Com\Com.c	   120  
; ..\EAS\BSW\Com\Com.c	   121  /* tx Pdu cfg access  */
; ..\EAS\BSW\Com\Com.c	   122  #define COM_CFG_TXPDU_IS_IMM_PROCESSING(TxIpduId)    (COM_CFG_TXPDU_INFO[TxIpduId].isImmProcess)
; ..\EAS\BSW\Com\Com.c	   123  #define COM_CFG_TXPDU_SIG_START_NUM(TxIpduId)        (COM_CFG_TXPDU_INFO[TxIpduId].SignalStartNum)
; ..\EAS\BSW\Com\Com.c	   124  #define COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId)         (COM_CFG_TXPDU_INFO[TxIpduId].SignalStopNum)
; ..\EAS\BSW\Com\Com.c	   125  #define COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId)      (COM_CFG_TXPDU_INFO[TxIpduId].MinimumDelayTime)
; ..\EAS\BSW\Com\Com.c	   126  #define COM_CFG_TXPDU_PERIOD_TIMEOUT(TxIpduId)       (COM_CFG_TXPDU_INFO[TxIpduId].PeriodTimeOut)
; ..\EAS\BSW\Com\Com.c	   127  #define COM_CFG_TXPDU_TIMEOUT_MONITOR_FLAG(TxIpduId) (COM_CFG_TXPDU_INFO[TxIpduId].TimeOutMonitorFlag)
; ..\EAS\BSW\Com\Com.c	   128  #define COM_CFG_TXPDUGROUP_FLAG(TxIpduId)            (COM_CFG_TXPDU_INFO[TxIpduId].TxIPDUGroupFlag)
; ..\EAS\BSW\Com\Com.c	   129  #define COM_CFG_TXPDU_MAP_PDUR(TxIpduId)             (COM_CFG_TXPDU_INFO[TxIpduId].IpduMapPdur)
; ..\EAS\BSW\Com\Com.c	   130  #define COM_CFG_TXPDU_FILTER_SIZE(TxIpduId)          (COM_CFG_TXPDU_INFO[TxIpduId].FilterByteNum)
; ..\EAS\BSW\Com\Com.c	   131  #define COM_CFG_TXPDU_FILTER_PTR(TxIpduId)           (COM_CFG_TXPDU_INFO[TxIpduId].TMCFilterFlagPtr)
; ..\EAS\BSW\Com\Com.c	   132  #define COM_CFG_TXPDU_DATA_PTR(TxIpduId)             (COM_CFG_TXPDU_INFO[TxIpduId].SduDataPtr)
; ..\EAS\BSW\Com\Com.c	   133  #define COM_CFG_TXPDU_LENGTH(TxIpduId)               (COM_CFG_TXPDU_INFO[TxIpduId].SduLength)
; ..\EAS\BSW\Com\Com.c	   134  #define COM_CFG_TXPDU_TXMODE_TRUE_PTR(TxIpduId)      (COM_CFG_TXPDU_INFO[TxIpduId].TxModeTrueCfgTablePtr)
; ..\EAS\BSW\Com\Com.c	   135  #define COM_CFG_TXPDU_TXMODE_FALSE_PTR(TxIpduId)     (COM_CFG_TXPDU_INFO[TxIpduId].TxModeFalseCfgTablePtr)
; ..\EAS\BSW\Com\Com.c	   136  #define COM_CFG_TXPDU_IS_DYN(TxIpduId)               (COM_CFG_TXPDU_INFO[TxIpduId].isTxDynPdu)
; ..\EAS\BSW\Com\Com.c	   137  #define COM_CFG_TXPDU_IS_TP_PDU(TxIpduId)            (COM_CFG_TXPDU_INFO[TxIpduId].isTpPdu)
; ..\EAS\BSW\Com\Com.c	   138  #define COM_CFG_TXPDU_CALLOUT(TxIpduId)              (COM_CFG_TXPDU_INFO[TxIpduId].Callout)
; ..\EAS\BSW\Com\Com.c	   139  #define COM_CFG_TXPDU_CANCEL_TRANSMIT_FLAG(TxIpduId) (COM_CFG_TXPDU_INFO[TxIpduId].TxCancelTransmitSupportFlag)
; ..\EAS\BSW\Com\Com.c	   140  #define COM_CFG_TXPDU_TRIGGER_CALLOUT(TxIpduId)      (COM_CFG_TXPDU_INFO[TxIpduId].TxTriggerCallout)
; ..\EAS\BSW\Com\Com.c	   141  #define COM_CFG_TXPDU_UPDATEBIT_INFO(TxIpduId)       (COM_CFG_TXPDU_INFO[TxIpduId].updateBitInfo)
; ..\EAS\BSW\Com\Com.c	   142  #define COM_CFG_TXPDU_UPDATEBIT_NUM(TxIpduId)        (COM_CFG_TXPDU_INFO[TxIpduId].updateBitNum)
; ..\EAS\BSW\Com\Com.c	   143  #define COM_CFG_TXPDU_UPDATEBIT_CLEARTYPE(TxIpduId)  (COM_CFG_TXPDU_INFO[TxIpduId].cubType)
; ..\EAS\BSW\Com\Com.c	   144  #define COM_CFG_TXPDU_UNUSED_BYTE(TxIpduId)          (COM_CFG_TXPDU_INFO[TxIpduId].unusedAreaByte)
; ..\EAS\BSW\Com\Com.c	   145  /*#define COM_CFG_TX_TRUE_MODE(TxIpduId)               (COM_CFG_TXPDU_TXMODE_TRUE_PTR(TxIpduId)->TxModeMode) not used in this version*/
; ..\EAS\BSW\Com\Com.c	   146  /*#define COM_CFG_TX_FALSE_MODE(TxIpduId)              (COM_CFG_TXPDU_TXMODE_FALSE_PTR(TxIpduId)->TxModeMode) not used in this version*/
; ..\EAS\BSW\Com\Com.c	   147  #define COM_CFG_TXPDU_IN_PDUGRP_NUM(TxIpduId)        (COM_CFG_TXPDU_INFO[TxIpduId].numOfPduGrp)
; ..\EAS\BSW\Com\Com.c	   148  #define COM_CFG_TXPDU_IN_PDUGRP_PTR(TxIpduId)        (COM_CFG_TXPDU_INFO[TxIpduId].PduGrpPtr)
; ..\EAS\BSW\Com\Com.c	   149  
; ..\EAS\BSW\Com\Com.c	   150  
; ..\EAS\BSW\Com\Com.c	   151  
; ..\EAS\BSW\Com\Com.c	   152  
; ..\EAS\BSW\Com\Com.c	   153  
; ..\EAS\BSW\Com\Com.c	   154  /* tx signal cfg access  */
; ..\EAS\BSW\Com\Com.c	   155  #define COM_CFG_TXSIG_TXPDU_ID(TxSigId)             (COM_CFG_TXSIG_INFO[TxSigId].TxPduId)
; ..\EAS\BSW\Com\Com.c	   156  #define COM_CFG_TXSIG_TRANSPROPERTY(TxSigId)        (COM_CFG_TXSIG_INFO[TxSigId].SigTransferProperty)
; ..\EAS\BSW\Com\Com.c	   157  #define COM_CFG_TXSIG_TYPE(TxSigId)                 (COM_CFG_TXSIG_INFO[TxSigId].SigType)
; ..\EAS\BSW\Com\Com.c	   158  #define COM_CFG_TXSIG_LENGTH(TxSigId)               (COM_CFG_TXSIG_INFO[TxSigId].SigLen)
; ..\EAS\BSW\Com\Com.c	   159  #define COM_CFG_TXSIG_START_BYTE_INDEX(TxSigId)     (COM_CFG_TXSIG_INFO[TxSigId].SigStartByteIndex)
; ..\EAS\BSW\Com\Com.c	   160  #define COM_CFG_TXSIG_INIT_VALUE_PTR(TxSigId)       (COM_CFG_TXSIG_INFO[TxSigId].InitValPtr)
; ..\EAS\BSW\Com\Com.c	   161  #define COM_CFG_TXSIG_INIT_VALUE_LEN(TxSigId)       (COM_CFG_TXSIG_INFO[TxSigId].InitLen)
; ..\EAS\BSW\Com\Com.c	   162  #define COM_CFG_TXSIG_INVALID_VALUE_PTR(TxSigId)    (COM_CFG_TXSIG_INFO[TxSigId].InvalidValPtr)
; ..\EAS\BSW\Com\Com.c	   163  #define COM_CFG_TXSIG_INVALID_VALUE_LEN(TxSigId)    (COM_CFG_TXSIG_INFO[TxSigId].InvalidLen)
; ..\EAS\BSW\Com\Com.c	   164  #define COM_CFG_TXSIG_IS_GROUP_SIGNAL(TxSigId)      (COM_CFG_TXSIG_INFO[TxSigId].isGroupSignal)
; ..\EAS\BSW\Com\Com.c	   165  #define COM_CFG_TXSIG_GET_SIGGROUPID(TxSigId)       (COM_CFG_TXSIG_INFO[TxSigId].groupId)
; ..\EAS\BSW\Com\Com.c	   166  #define COM_CFG_TXSIG_GROUP_TEMP_BUF(TxSigId)       (COM_CFG_TXSIG_INFO[TxSigId].GroupSigTempBuf)
; ..\EAS\BSW\Com\Com.c	   167  #define COM_CFG_TXSIG_GROUP_TEMPLENGTH_PTR(TxSigId) (COM_CFG_TXSIG_INFO[TxSigId].GroupDynSigLengthBuf)
; ..\EAS\BSW\Com\Com.c	   168  #define COM_CFG_TXSIG_UPDATEBIT_INDEX(TxSigId)      (COM_CFG_TXSIG_INFO[TxSigId].updateBitIndex)
; ..\EAS\BSW\Com\Com.c	   169  #if(COM_TX_FILTER_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	   170  #define COM_CFG_TXSIG_FILTER_PTR(TxSigId)           (COM_CFG_TXSIG_INFO[TxSigId].TxSigFilter)
; ..\EAS\BSW\Com\Com.c	   171  #define COM_CFG_TXSIG_CHECK_FILTER(TxSigId)         (COM_CFG_TXSIG_INFO[TxSigId].checkFilter)
; ..\EAS\BSW\Com\Com.c	   172  #endif
; ..\EAS\BSW\Com\Com.c	   173  #define COM_CFG_TXSIG_INACTIVE_VALUE_PTR(TxSigId)    (COM_CFG_TXSIG_INFO[TxSigId].InvalidValPtr)
; ..\EAS\BSW\Com\Com.c	   174  
; ..\EAS\BSW\Com\Com.c	   175  #define COM_CFG_TXSIG_INACTIVE_OFFSET(TxSigId)    (COM_CFG_TXSIG_INFO[TxSigId].txActiveFlagOffset)
; ..\EAS\BSW\Com\Com.c	   176  
; ..\EAS\BSW\Com\Com.c	   177  
; ..\EAS\BSW\Com\Com.c	   178  
; ..\EAS\BSW\Com\Com.c	   179  #define COM_CFG_TXSIG_WRITE_SIG_FUN(TxSigId)        (COM_CFG_TXSIG_INFO[TxSigId].WriteSignalFun)
; ..\EAS\BSW\Com\Com.c	   180  /*#define COM_CFG_TXSIG_READ_SIG_FUN(TxSigId)         (COM_CFG_TXSIG_INFO[TxSigId].ReadSignalFun) not used in this version*/
; ..\EAS\BSW\Com\Com.c	   181  #define COM_CFG_TXSIG_COPY_SIG_FUN(TxSigId)         (COM_CFG_TXSIG_INFO[TxSigId].CopySignalFun)
; ..\EAS\BSW\Com\Com.c	   182  #define COM_CFG_TXSIG_CHECKCHANGE_SIG_FUN(TxSigId)  (COM_CFG_TXSIG_INFO[TxSigId].CheckChangeSignalFun)
; ..\EAS\BSW\Com\Com.c	   183  #define COM_CFG_TXSIG_TXTOINDICATION_FUN(TxSigId)   (COM_CFG_TXSIG_INFO[TxSigId].SigTxTOIndicationFun)
; ..\EAS\BSW\Com\Com.c	   184  #define COM_CFG_TXSIG_CBKTXACK_FUN(TxSigId)         (COM_CFG_TXSIG_INFO[TxSigId].SigCbkTxAckFun)
; ..\EAS\BSW\Com\Com.c	   185  #define COM_CFG_TXSIG_TXERR_FUN(TxSigId)            (COM_CFG_TXSIG_INFO[TxSigId].CbkTxErrFun)
; ..\EAS\BSW\Com\Com.c	   186  
; ..\EAS\BSW\Com\Com.c	   187  
; ..\EAS\BSW\Com\Com.c	   188  
; ..\EAS\BSW\Com\Com.c	   189  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	   190  *   Macro Rx
; ..\EAS\BSW\Com\Com.c	   191  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	   192  /* rx Pdu reg access  */
; ..\EAS\BSW\Com\Com.c	   193  #define COM_RXPDU_TP_INDEX(RxIpduId)          (Com_RxPduTable[RxIpduId].tpPduIndex)
; ..\EAS\BSW\Com\Com.c	   194  #define COM_RXPDU_TIMEOUT(RxIpduId)           (Com_RxPduTable[RxIpduId].RxPeriodTimeOut)
; ..\EAS\BSW\Com\Com.c	   195  #define COM_RXPDU_MONITOR_FLAG(RxIpduId)      (Com_RxPduTable[RxIpduId].RxIpduTimeoutMonitorFlag)
; ..\EAS\BSW\Com\Com.c	   196  #define COM_RXPDU_DYN_LENGTH(RxIpduId)        (Com_RxPduTable[RxIpduId].dynLength)
; ..\EAS\BSW\Com\Com.c	   197  #define COM_RXPDU_TEMP_LENGTH(RxIpduId)       (Com_RxPduTable[RxIpduId].tempLength)
; ..\EAS\BSW\Com\Com.c	   198  
; ..\EAS\BSW\Com\Com.c	   199  
; ..\EAS\BSW\Com\Com.c	   200  /* rx Pdu cfg access  */
; ..\EAS\BSW\Com\Com.c	   201  #define COM_CFG_RXPDU_IS_IMM_PROCESSING(RxIpduId)   (COM_CFG_RXPDU_INFO[RxIpduId].isImmProcess)
; ..\EAS\BSW\Com\Com.c	   202  #define COM_CFG_RXPDU_SIG_STOP_NUM(RxIpduId)        (COM_CFG_RXPDU_INFO[RxIpduId].SignalStopNum)
; ..\EAS\BSW\Com\Com.c	   203  #define COM_CFG_RXPDU_SIG_START_NUM(RxIpduId)       (COM_CFG_RXPDU_INFO[RxIpduId].SignalStartNum)
; ..\EAS\BSW\Com\Com.c	   204  #define COM_CFG_RXPDU_PERIOD_TIMEOUT(RxIpduId)      (COM_CFG_RXPDU_INFO[RxIpduId].RxPeriodTimeOut)
; ..\EAS\BSW\Com\Com.c	   205  #define COM_CFG_RXPDU_FIRST_TIMEOUT(RxIpduId)       (COM_CFG_RXPDU_INFO[RxIpduId].RxFirstTimeOut)
; ..\EAS\BSW\Com\Com.c	   206  #define COM_CFG_RXPDU_MONITOR_FLAG(RxIpduId)        (COM_CFG_RXPDU_INFO[RxIpduId].RxIpduTimeoutMonitorFlag)
; ..\EAS\BSW\Com\Com.c	   207  #define COM_CFG_RXPDU_DATA_PTR(RxIpduId)            (COM_CFG_RXPDU_INFO[RxIpduId].SduDataPtr)
; ..\EAS\BSW\Com\Com.c	   208  #define COM_CFG_RXPDU_LENGTH(RxIpduId)              (COM_CFG_RXPDU_INFO[RxIpduId].SduLength)
; ..\EAS\BSW\Com\Com.c	   209  #define COM_CFG_RXPDUGROUP_FLAG(RxIpduId)           (COM_CFG_RXPDU_INFO[RxIpduId].RxIPDUGroupFlag)
; ..\EAS\BSW\Com\Com.c	   210  #define COM_CFG_RXPDU_IS_TP_PDU(RxIpduId)           (COM_CFG_RXPDU_INFO[RxIpduId].isTpPdu)
; ..\EAS\BSW\Com\Com.c	   211  #define COM_CFG_RXPDU_CALLOUT(RxIpduId)             (COM_CFG_RXPDU_INFO[RxIpduId].Callout)
; ..\EAS\BSW\Com\Com.c	   212  #define COM_CFG_RXPDU_IS_DYN(RxIpduId)              (COM_CFG_RXPDU_INFO[RxIpduId].isRxDynPdu)
; ..\EAS\BSW\Com\Com.c	   213  #define COM_CFG_RXPDU_FIX_LENGTH(RxIpduId)          (COM_CFG_RXPDU_INFO[RxIpduId].RxPduFixLength)
; ..\EAS\BSW\Com\Com.c	   214  #define COM_CFG_RXPDU_DATA_PTR_TEMP(RxIpduId)       (COM_CFG_RXPDU_INFO[RxIpduId].RxBufTemp)
; ..\EAS\BSW\Com\Com.c	   215  #define COM_CFG_RXPDU_UPDATEBIT_INFO(RxIpduId)      (COM_CFG_RXPDU_INFO[RxIpduId].updateBitInfo)
; ..\EAS\BSW\Com\Com.c	   216  #define COM_CFG_RXPDU_UPDATEBIT_NUM(RxIpduId)       (COM_CFG_RXPDU_INFO[RxIpduId].updateBitNum)
; ..\EAS\BSW\Com\Com.c	   217  #define COM_CFG_RXPDU_IN_PDUGRP_NUM(RxIpduId)       (COM_CFG_RXPDU_INFO[RxIpduId].numOfPduGrp)
; ..\EAS\BSW\Com\Com.c	   218  #define COM_CFG_RXPDU_IN_PDUGRP_PTR(RxIpduId)       (COM_CFG_RXPDU_INFO[RxIpduId].PduGrpPtr)
; ..\EAS\BSW\Com\Com.c	   219  
; ..\EAS\BSW\Com\Com.c	   220  
; ..\EAS\BSW\Com\Com.c	   221  /* rx sig cfg access  */
; ..\EAS\BSW\Com\Com.c	   222  #define COM_CFG_RXSIG_RXPDU_ID(RxSigId)            (COM_CFG_RXSIG_INFO[RxSigId].RxPduId)
; ..\EAS\BSW\Com\Com.c	   223  #define COM_CFG_RXSIG_TYPE(RxSigId)                (COM_CFG_RXSIG_INFO[RxSigId].SigType)
; ..\EAS\BSW\Com\Com.c	   224  #define COM_CFG_RXSIG_LENGTH(RxSigId)              (COM_CFG_RXSIG_INFO[RxSigId].SigLen)
; ..\EAS\BSW\Com\Com.c	   225  #define COM_CFG_RXSIG_START_BYTE_INDEX(RxSigId)    (COM_CFG_RXSIG_INFO[RxSigId].SigStartByteIndex)
; ..\EAS\BSW\Com\Com.c	   226  #define COM_CFG_RXSIG_INIT_VALUE_PTR(RxSigId)      (COM_CFG_RXSIG_INFO[RxSigId].InitValPtr)
; ..\EAS\BSW\Com\Com.c	   227  #define COM_CFG_RXSIG_INIT_VALUE_LEN(RxSigId)      (COM_CFG_RXSIG_INFO[RxSigId].InitLen)
; ..\EAS\BSW\Com\Com.c	   228  #define COM_CFG_RXSIG_INVALID_ACTION(RxSigId)      (COM_CFG_RXSIG_INFO[RxSigId].DataInvalidAction)
; ..\EAS\BSW\Com\Com.c	   229  /*#define COM_CFG_RXSIG_INVALID_VALUE_PTR(RxSigId)   (COM_CFG_RXSIG_INFO[RxSigId].InvalidValPtr) not used in this version*/
; ..\EAS\BSW\Com\Com.c	   230  /*#define COM_CFG_RXSIG_INVALID_VALUE_LEN(RxSigId)   (COM_CFG_RXSIG_INFO[RxSigId].InvalidLen) not used in this version*/
; ..\EAS\BSW\Com\Com.c	   231  #define COM_CFG_RXSIG_GW_INDEX(RxSigId)            (COM_CFG_RXSIG_INFO[RxSigId].GwSigIndex)
; ..\EAS\BSW\Com\Com.c	   232  #if((COM_RX_FILTER_SUPPORT == STD_ON) || (STD_ON == COM_RX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	   233  #define COM_CFG_RXSIG_FILTER_PTR(RxSigId)          (COM_CFG_RXSIG_INFO[RxSigId].RxSigFilter)
; ..\EAS\BSW\Com\Com.c	   234  #define COM_CFG_RXSIG_CHECK_SIG_FUN(RxSigId)       (COM_CFG_RXSIG_INFO[RxSigId].CheckRxSigFun)
; ..\EAS\BSW\Com\Com.c	   235  #endif
; ..\EAS\BSW\Com\Com.c	   236  #define COM_CFG_RXSIG_UPDATEBIT_INDEX(RxSigId)     (COM_CFG_RXSIG_INFO[RxSigId].updateBitIndex)
; ..\EAS\BSW\Com\Com.c	   237  #define COM_CFG_RXSIG_UPTO_INDEX(RxSigId)          (COM_CFG_RXSIG_INFO[RxSigId].upTimeoutIndex)
; ..\EAS\BSW\Com\Com.c	   238  #define COM_CFG_RXSIG_UPTO_PERIOD(RxSigId)         (COM_CFG_RXSIG_INFO[RxSigId].RxPeriodTimeOut)
; ..\EAS\BSW\Com\Com.c	   239  #define COM_CFG_RXSIG_UPTO_FIRSTPERIOD(RxSigId)    (COM_CFG_RXSIG_INFO[RxSigId].RxFirstTimeOut)
; ..\EAS\BSW\Com\Com.c	   240  #define COM_CFG_RXSIG_TO_REPLACE(RxSigId)          (COM_CFG_RXSIG_INFO[RxSigId].isTimeoutReplace)
; ..\EAS\BSW\Com\Com.c	   241  
; ..\EAS\BSW\Com\Com.c	   242  #define COM_CFG_RXSIG_IS_GROUP_SIGNAL(RxSigId)       (COM_CFG_RXSIG_INFO[RxSigId].isGroupSignal)
; ..\EAS\BSW\Com\Com.c	   243  #define COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId)        (COM_CFG_RXSIG_INFO[RxSigId].groupId)
; ..\EAS\BSW\Com\Com.c	   244  #define COM_CFG_RXSIG_GROUP_TEMP_BUF(RxSigId)        (COM_CFG_RXSIG_INFO[RxSigId].GroupSigTempBuf)
; ..\EAS\BSW\Com\Com.c	   245  #define COM_CFG_RXSIG_GROUP_TEMPLENGTH_PTR(RxSigId)  (COM_CFG_RXSIG_INFO[RxSigId].GroupDynSigLengthBuf)
; ..\EAS\BSW\Com\Com.c	   246  
; ..\EAS\BSW\Com\Com.c	   247  #define COM_CFG_RXSIG_MIN_BYTE(RxSigId)              (COM_CFG_RXSIG_INFO[RxSigId].MinSigByte)
; ..\EAS\BSW\Com\Com.c	   248  
; ..\EAS\BSW\Com\Com.c	   249  
; ..\EAS\BSW\Com\Com.c	   250  #define COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId)        (COM_CFG_RXSIG_INFO[RxSigId].RxSigCbkRxAckFun)
; ..\EAS\BSW\Com\Com.c	   251  #define COM_CFG_RXSIG_CBKINV_FUN(RxSigId)          (COM_CFG_RXSIG_INFO[RxSigId].RxSigCbkInvFun)
; ..\EAS\BSW\Com\Com.c	   252  #define COM_CFG_RXSIG_CBKRXTOUT_FUN(RxSigId)       (COM_CFG_RXSIG_INFO[RxSigId].RxSigCbkRxTOutFun)
; ..\EAS\BSW\Com\Com.c	   253  
; ..\EAS\BSW\Com\Com.c	   254  #define COM_CFG_RXSIG_MOVE_FUN(RxSigId)            (COM_CFG_RXSIG_INFO[RxSigId].MoveSignalFun)
; ..\EAS\BSW\Com\Com.c	   255  #define COM_CFG_RXSIG_WRITE_SIG_FUN(RxSigId)       (COM_CFG_RXSIG_INFO[RxSigId].WriteSignalFun)
; ..\EAS\BSW\Com\Com.c	   256  #define COM_CFG_RXSIG_READ_SIG_FUN(RxSigId)        (COM_CFG_RXSIG_INFO[RxSigId].ReadSignalFun)
; ..\EAS\BSW\Com\Com.c	   257  #define COM_CFG_RXSIG_COPY_SIG_FUN(RxSigId)        (COM_CFG_RXSIG_INFO[RxSigId].CopySignalFun)
; ..\EAS\BSW\Com\Com.c	   258  
; ..\EAS\BSW\Com\Com.c	   259  
; ..\EAS\BSW\Com\Com.c	   260  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	   261  *   Macro ipdu group
; ..\EAS\BSW\Com\Com.c	   262  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	   263  #if (STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	   264  #define COM_CFG_TX_PDUGROUP_PTR(IpduGroupId)                (COM_CFG_PDU_GROUP_INFO[IpduGroupId].TxIpduGroupPtr)
; ..\EAS\BSW\Com\Com.c	   265  #define COM_CFG_TX_PDUGROUP_NUM(IpduGroupId)                (COM_CFG_PDU_GROUP_INFO[IpduGroupId].TxIpduGroupNum)
; ..\EAS\BSW\Com\Com.c	   266  
; ..\EAS\BSW\Com\Com.c	   267  
; ..\EAS\BSW\Com\Com.c	   268  #define COM_CFG_RX_PDUGROUP_PTR(IpduGroupId)                (COM_CFG_PDU_GROUP_INFO[IpduGroupId].RxIpduGroupPtr)
; ..\EAS\BSW\Com\Com.c	   269  #define COM_CFG_RX_PDUGROUP_NUM(IpduGroupId)                (COM_CFG_PDU_GROUP_INFO[IpduGroupId].RxIpduGroupNum)
; ..\EAS\BSW\Com\Com.c	   270  
; ..\EAS\BSW\Com\Com.c	   271  #endif
; ..\EAS\BSW\Com\Com.c	   272  
; ..\EAS\BSW\Com\Com.c	   273  
; ..\EAS\BSW\Com\Com.c	   274  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	   275  *   Macro signal group
; ..\EAS\BSW\Com\Com.c	   276  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	   277  /* Signal Group Access*/
; ..\EAS\BSW\Com\Com.c	   278  #define COM_CFG_TXSIGGRP_SUPPORT_ARRAY(SigGrpId)         (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].isArrayAccessSupport)
; ..\EAS\BSW\Com\Com.c	   279  #define COM_CFG_TXSIGGRP_SIGSTOP(SigGrpId)               (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].SignalStopNum)
; ..\EAS\BSW\Com\Com.c	   280  #define COM_CFG_TXSIGGRP_SIGSTART(SigGrpId)              (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].SignalStartNum)
; ..\EAS\BSW\Com\Com.c	   281  #define COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SigGrpId)       (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].updateBitIndex)
; ..\EAS\BSW\Com\Com.c	   282  #define COM_CFG_TXSIGGRP_TRPROP(SigGrpId)                (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].SigGrpTransferProperty)
; ..\EAS\BSW\Com\Com.c	   283  #define COM_CFG_TXSIGGRP_PDUID(SigGrpId)                 (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].PduId)
; ..\EAS\BSW\Com\Com.c	   284  #define COM_CFG_TXSIGGRP_STARTBYTE(SigGrpId)             (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].StartByte)
; ..\EAS\BSW\Com\Com.c	   285  #define COM_CFG_TXSIGGRP_SIZE(SigGrpId)                  (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].ByteNum)
; ..\EAS\BSW\Com\Com.c	   286  #define COM_CFG_TXSIGGRP_HAS_INVALID_VAL(SigGrpId)       (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].hasInValidVal)
; ..\EAS\BSW\Com\Com.c	   287  /*#define COM_CFG_TXSIGGRP_HAS_FILTER(SigGrpId)            (COM_CFG_TXSIG_GROUP_INFO[SigGrpId].hasFilter) not used in this version*/
; ..\EAS\BSW\Com\Com.c	   288  
; ..\EAS\BSW\Com\Com.c	   289  
; ..\EAS\BSW\Com\Com.c	   290  #define COM_CFG_RXSIGGRP_SUPPORT_ARRAY(SigGrpId)         (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].isArrayAccessSupport)
; ..\EAS\BSW\Com\Com.c	   291  #define COM_CFG_RXSIGGRP_SIGSTOP(SigGrpId)               (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].SignalStopNum)
; ..\EAS\BSW\Com\Com.c	   292  #define COM_CFG_RXSIGGRP_SIGSTART(SigGrpId)              (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].SignalStartNum)
; ..\EAS\BSW\Com\Com.c	   293  /*#define COM_CFG_RXSIGGRP_UPDATEBIT_INDEX(SigGrpId)       (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].updateBitIndex)not used in this version*/
; ..\EAS\BSW\Com\Com.c	   294  /*#define COM_CFG_RXSIGGRP_TRPROP(SigGrpId)                (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].SigGrpTransferProperty)not used in this version*/
; ..\EAS\BSW\Com\Com.c	   295  #define COM_CFG_RXSIGGRP_PDUID(SigGrpId)                 (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].PduId)
; ..\EAS\BSW\Com\Com.c	   296  #define COM_CFG_RXSIGGRP_STARTBYTE(SigGrpId)             (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].StartByte)
; ..\EAS\BSW\Com\Com.c	   297  #define COM_CFG_RXSIGGRP_SIZE(SigGrpId)                  (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].ByteNum)
; ..\EAS\BSW\Com\Com.c	   298  #define COM_CFG_RXSIGGRP_HAS_INVALID_VAL(SigGrpId)       (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].hasInValidVal)
; ..\EAS\BSW\Com\Com.c	   299  #define COM_CFG_RXSIGGRP_HAS_FILTER(SigGrpId)            (COM_CFG_RXSIG_GROUP_INFO[SigGrpId].hasFilter)
; ..\EAS\BSW\Com\Com.c	   300  
; ..\EAS\BSW\Com\Com.c	   301  
; ..\EAS\BSW\Com\Com.c	   302  
; ..\EAS\BSW\Com\Com.c	   303  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	   304  *   Macro
; ..\EAS\BSW\Com\Com.c	   305  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	   306  #if(STD_ON == COM_DEV_ERROR_DETECT)
; ..\EAS\BSW\Com\Com.c	   307  
; ..\EAS\BSW\Com\Com.c	   308  #define  COM_DET_ERROR_DETECT(cond, ApiId, errcode)  \ 
; ..\EAS\BSW\Com\Com.c	   309      DET_ERROR_DETECT((cond), COM_MODULE_ID, COM_INSTANCE_ID,(ApiId),(errcode))
; ..\EAS\BSW\Com\Com.c	   310  
; ..\EAS\BSW\Com\Com.c	   311  #define  COM_DET_ERROR_DETECT_RET(cond, ApiId, errcode, ret) \ 
; ..\EAS\BSW\Com\Com.c	   312      DET_ERROR_DETECT_RET((cond), COM_MODULE_ID,COM_INSTANCE_ID,(ApiId),(errcode), (ret))
; ..\EAS\BSW\Com\Com.c	   313  
; ..\EAS\BSW\Com\Com.c	   314  #define  COM_DET_REPORT_ERROR(ApiId, errcode)  \ 
; ..\EAS\BSW\Com\Com.c	   315      DET_REPORT_ERROR(COM_MODULE_ID, COM_INSTANCE_ID, (ApiId), (errcode))
; ..\EAS\BSW\Com\Com.c	   316  
; ..\EAS\BSW\Com\Com.c	   317  #define  COM_DET_REPORT_RUNTIME_ERROR(ApiId, errcode)  \ 
; ..\EAS\BSW\Com\Com.c	   318      DET_REPORT_RUNTIME_ERROR(COM_MODULE_ID, COM_INSTANCE_ID, (ApiId), (errcode))
; ..\EAS\BSW\Com\Com.c	   319  
; ..\EAS\BSW\Com\Com.c	   320  #else
; ..\EAS\BSW\Com\Com.c	   321  
; ..\EAS\BSW\Com\Com.c	   322  #define  COM_DET_ERROR_DETECT(cond, ApiId, errcode)
; ..\EAS\BSW\Com\Com.c	   323  #define  COM_DET_ERROR_DETECT_RET(cond, ApiId, errcode, ret)
; ..\EAS\BSW\Com\Com.c	   324  #define  COM_DET_REPORT_ERROR(ApiId, errcode)
; ..\EAS\BSW\Com\Com.c	   325  #define  COM_DET_REPORT_RUNTIME_ERROR(ApiId, errcode)
; ..\EAS\BSW\Com\Com.c	   326  
; ..\EAS\BSW\Com\Com.c	   327  #endif
; ..\EAS\BSW\Com\Com.c	   328  
; ..\EAS\BSW\Com\Com.c	   329  
; ..\EAS\BSW\Com\Com.c	   330  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	   331  *   Static Api of Com
; ..\EAS\BSW\Com\Com.c	   332  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	   333  #define COM_START_SEC_CODE
; ..\EAS\BSW\Com\Com.c	   334  #include "MemMap.h"
; ..\EAS\BSW\Com\Com.c	   335  
; ..\EAS\BSW\Com\Com.c	   336  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   337  
; ..\EAS\BSW\Com\Com.c	   338  STATIC FUNC(void, COM_CODE) Com_InitTxPdu
; ..\EAS\BSW\Com\Com.c	   339  (
; ..\EAS\BSW\Com\Com.c	   340      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   341      boolean   isStartFlag
; ..\EAS\BSW\Com\Com.c	   342  );
; ..\EAS\BSW\Com\Com.c	   343  
; ..\EAS\BSW\Com\Com.c	   344  STATIC FUNC(void, COM_CODE) Com_InitTxPduValue
; ..\EAS\BSW\Com\Com.c	   345  (
; ..\EAS\BSW\Com\Com.c	   346      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   347  );
; ..\EAS\BSW\Com\Com.c	   348  
; ..\EAS\BSW\Com\Com.c	   349  #if((STD_ON == COM_TX_FILTER_SUPPORT) && (COM_MAX_FILTER_OCCURRENCE_NUM > 0))
; ..\EAS\BSW\Com\Com.c	   350  STATIC FUNC(void, COM_CODE) Com_InitTxOccOfPdu
; ..\EAS\BSW\Com\Com.c	   351  (
; ..\EAS\BSW\Com\Com.c	   352      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   353  );
; ..\EAS\BSW\Com\Com.c	   354  #endif
; ..\EAS\BSW\Com\Com.c	   355  
; ..\EAS\BSW\Com\Com.c	   356  
; ..\EAS\BSW\Com\Com.c	   357  #if(STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	   358  STATIC FUNC(void, COM_CODE) Com_SwitchTxPduMode
; ..\EAS\BSW\Com\Com.c	   359  (
; ..\EAS\BSW\Com\Com.c	   360      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   361      boolean   isStartFlag,
; ..\EAS\BSW\Com\Com.c	   362      boolean   InitFlag
; ..\EAS\BSW\Com\Com.c	   363  );
; ..\EAS\BSW\Com\Com.c	   364  
; ..\EAS\BSW\Com\Com.c	   365  STATIC FUNC(void, COM_CODE) Com_CbkTxErrAck_PDU
; ..\EAS\BSW\Com\Com.c	   366  (
; ..\EAS\BSW\Com\Com.c	   367      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   368  );
; ..\EAS\BSW\Com\Com.c	   369  
; ..\EAS\BSW\Com\Com.c	   370  #endif
; ..\EAS\BSW\Com\Com.c	   371  
; ..\EAS\BSW\Com\Com.c	   372  STATIC FUNC(void, COM_CODE) Com_TxInit(void);
; ..\EAS\BSW\Com\Com.c	   373  
; ..\EAS\BSW\Com\Com.c	   374  #if (STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   375  STATIC FUNC(boolean, COM_CODE) Com_GetTMSResult
; ..\EAS\BSW\Com\Com.c	   376  (
; ..\EAS\BSW\Com\Com.c	   377      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   378  );
; ..\EAS\BSW\Com\Com.c	   379  
; ..\EAS\BSW\Com\Com.c	   380  STATIC FUNC(void, COM_CODE) Com_SelectPduTxMode
; ..\EAS\BSW\Com\Com.c	   381  (
; ..\EAS\BSW\Com\Com.c	   382      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   383      uint8 TxSendSwitchTxModeFlag
; ..\EAS\BSW\Com\Com.c	   384  );
; ..\EAS\BSW\Com\Com.c	   385  
; ..\EAS\BSW\Com\Com.c	   386  #endif
; ..\EAS\BSW\Com\Com.c	   387  
; ..\EAS\BSW\Com\Com.c	   388  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	   389  STATIC FUNC(void, COM_CODE) Com_StartTxDeadlineMotitor
; ..\EAS\BSW\Com\Com.c	   390  (
; ..\EAS\BSW\Com\Com.c	   391      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   392      boolean needRestartTimer
; ..\EAS\BSW\Com\Com.c	   393  );
; ..\EAS\BSW\Com\Com.c	   394  #endif
; ..\EAS\BSW\Com\Com.c	   395  
; ..\EAS\BSW\Com\Com.c	   396  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	   397  STATIC FUNC(uint8, COM_CODE) Com_HandleDirect
; ..\EAS\BSW\Com\Com.c	   398  (
; ..\EAS\BSW\Com\Com.c	   399      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   400  );
; ..\EAS\BSW\Com\Com.c	   401  #endif
; ..\EAS\BSW\Com\Com.c	   402  
; ..\EAS\BSW\Com\Com.c	   403  #if((STD_ON == COM_TXMODE_PERIODIC) || (STD_ON == COM_TXMODE_MIXED))
; ..\EAS\BSW\Com\Com.c	   404  STATIC FUNC(boolean, COM_CODE) Com_HandlePeriod
; ..\EAS\BSW\Com\Com.c	   405  (
; ..\EAS\BSW\Com\Com.c	   406      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   407  );
; ..\EAS\BSW\Com\Com.c	   408  #endif
; ..\EAS\BSW\Com\Com.c	   409  
; ..\EAS\BSW\Com\Com.c	   410  #if(STD_ON == COM_TXMODE_MIXED)
; ..\EAS\BSW\Com\Com.c	   411  STATIC FUNC(boolean, COM_CODE) Com_HandleMixed
; ..\EAS\BSW\Com\Com.c	   412  (
; ..\EAS\BSW\Com\Com.c	   413      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   414  );
; ..\EAS\BSW\Com\Com.c	   415  #endif
; ..\EAS\BSW\Com\Com.c	   416  
; ..\EAS\BSW\Com\Com.c	   417  #if(STD_ON == COM_TXMODE_NONE)
; ..\EAS\BSW\Com\Com.c	   418  STATIC FUNC(void, COM_CODE) Com_HandleNone
; ..\EAS\BSW\Com\Com.c	   419  (
; ..\EAS\BSW\Com\Com.c	   420      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   421  );
; ..\EAS\BSW\Com\Com.c	   422  #endif
; ..\EAS\BSW\Com\Com.c	   423  
; ..\EAS\BSW\Com\Com.c	   424  #if (STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   425  STATIC FUNC(void, COM_CODE) Com_CheckTxSigIfActive
; ..\EAS\BSW\Com\Com.c	   426  (
; ..\EAS\BSW\Com\Com.c	   427      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   428      Com_SignalIdType TxSigId,
; ..\EAS\BSW\Com\Com.c	   429      P2CONST(void, AUTOMATIC, COM_APPL_DATA) newDataPtr,
; ..\EAS\BSW\Com\Com.c	   430      P2CONST(void, AUTOMATIC, COM_CONST)     cfgInActiveValPtr
; ..\EAS\BSW\Com\Com.c	   431  );
; ..\EAS\BSW\Com\Com.c	   432  
; ..\EAS\BSW\Com\Com.c	   433  STATIC FUNC(boolean, COM_CODE) Com_HandleIfActive
; ..\EAS\BSW\Com\Com.c	   434  (
; ..\EAS\BSW\Com\Com.c	   435      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   436  );
; ..\EAS\BSW\Com\Com.c	   437  
; ..\EAS\BSW\Com\Com.c	   438  #endif
; ..\EAS\BSW\Com\Com.c	   439  
; ..\EAS\BSW\Com\Com.c	   440  
; ..\EAS\BSW\Com\Com.c	   441  STATIC FUNC(boolean, COM_CODE) Com_TxModeProcess
; ..\EAS\BSW\Com\Com.c	   442  (
; ..\EAS\BSW\Com\Com.c	   443      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   444  );
; ..\EAS\BSW\Com\Com.c	   445  
; ..\EAS\BSW\Com\Com.c	   446  STATIC FUNC(void, COM_CODE) Com_TransmitPdu
; ..\EAS\BSW\Com\Com.c	   447  (
; ..\EAS\BSW\Com\Com.c	   448      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   449  );
; ..\EAS\BSW\Com\Com.c	   450  
; ..\EAS\BSW\Com\Com.c	   451  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	   452  STATIC FUNC(void, COM_CODE) Com_CbkTxTOut_PDU
; ..\EAS\BSW\Com\Com.c	   453  (
; ..\EAS\BSW\Com\Com.c	   454      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   455  );
; ..\EAS\BSW\Com\Com.c	   456  STATIC FUNC(void, COM_CODE) Com_TxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	   457  (
; ..\EAS\BSW\Com\Com.c	   458      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   459  );
; ..\EAS\BSW\Com\Com.c	   460  #endif
; ..\EAS\BSW\Com\Com.c	   461  
; ..\EAS\BSW\Com\Com.c	   462  STATIC FUNC(void, COM_CODE) Com_CbkTxAck_PDU
; ..\EAS\BSW\Com\Com.c	   463  (
; ..\EAS\BSW\Com\Com.c	   464      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   465  );
; ..\EAS\BSW\Com\Com.c	   466  
; ..\EAS\BSW\Com\Com.c	   467  
; ..\EAS\BSW\Com\Com.c	   468  
; ..\EAS\BSW\Com\Com.c	   469  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	   470  STATIC FUNC(void, COM_CODE) Com_SetIpduTrigRepFlag
; ..\EAS\BSW\Com\Com.c	   471  (
; ..\EAS\BSW\Com\Com.c	   472      Com_SignalTxPropertyType txProperty,
; ..\EAS\BSW\Com\Com.c	   473      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   474      boolean changeFlag
; ..\EAS\BSW\Com\Com.c	   475  );
; ..\EAS\BSW\Com\Com.c	   476  
; ..\EAS\BSW\Com\Com.c	   477  #endif
; ..\EAS\BSW\Com\Com.c	   478  
; ..\EAS\BSW\Com\Com.c	   479  
; ..\EAS\BSW\Com\Com.c	   480  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   481  STATIC FUNC(void, COM_CODE) Com_TxSignalFilter
; ..\EAS\BSW\Com\Com.c	   482  (
; ..\EAS\BSW\Com\Com.c	   483      Com_SignalIdType  ComTxSigId,
; ..\EAS\BSW\Com\Com.c	   484      P2CONST(void, AUTOMATIC, AUTOMATIC) value
; ..\EAS\BSW\Com\Com.c	   485  );
; ..\EAS\BSW\Com\Com.c	   486  
; ..\EAS\BSW\Com\Com.c	   487  #endif
; ..\EAS\BSW\Com\Com.c	   488  
; ..\EAS\BSW\Com\Com.c	   489  #if(STD_ON == COM_TX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   490  STATIC FUNC(void, COM_CODE) Com_SetSigUpdateBit
; ..\EAS\BSW\Com\Com.c	   491  (
; ..\EAS\BSW\Com\Com.c	   492      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   493      uint16  index
; ..\EAS\BSW\Com\Com.c	   494  );
; ..\EAS\BSW\Com\Com.c	   495  STATIC FUNC(void, COM_CODE) Com_ClearUpdateBit
; ..\EAS\BSW\Com\Com.c	   496  (
; ..\EAS\BSW\Com\Com.c	   497      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	   498  );
; ..\EAS\BSW\Com\Com.c	   499  
; ..\EAS\BSW\Com\Com.c	   500  #endif
; ..\EAS\BSW\Com\Com.c	   501  
; ..\EAS\BSW\Com\Com.c	   502  
; ..\EAS\BSW\Com\Com.c	   503  STATIC FUNC(void, COM_CODE) Com_ProcessTxConf
; ..\EAS\BSW\Com\Com.c	   504  (
; ..\EAS\BSW\Com\Com.c	   505      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	   506      Com_TxPduStateType pduState
; ..\EAS\BSW\Com\Com.c	   507  );
; ..\EAS\BSW\Com\Com.c	   508  
; ..\EAS\BSW\Com\Com.c	   509  
; ..\EAS\BSW\Com\Com.c	   510  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	   511  
; ..\EAS\BSW\Com\Com.c	   512  
; ..\EAS\BSW\Com\Com.c	   513  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   514  
; ..\EAS\BSW\Com\Com.c	   515  
; ..\EAS\BSW\Com\Com.c	   516  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   517  STATIC FUNC(void, COM_CODE) Com_RxPduInvalid
; ..\EAS\BSW\Com\Com.c	   518  (
; ..\EAS\BSW\Com\Com.c	   519      PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	   520  );
; ..\EAS\BSW\Com\Com.c	   521  #endif
; ..\EAS\BSW\Com\Com.c	   522  
; ..\EAS\BSW\Com\Com.c	   523  STATIC FUNC(boolean, COM_CODE) Com_CheckRxLength
; ..\EAS\BSW\Com\Com.c	   524  (
; ..\EAS\BSW\Com\Com.c	   525      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	   526      PduLengthType length
; ..\EAS\BSW\Com\Com.c	   527  );
; ..\EAS\BSW\Com\Com.c	   528  
; ..\EAS\BSW\Com\Com.c	   529  
; ..\EAS\BSW\Com\Com.c	   530  STATIC FUNC(void, COM_CODE) Com_ReplaceRxSignalWithInit
; ..\EAS\BSW\Com\Com.c	   531  (
; ..\EAS\BSW\Com\Com.c	   532      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	   533      uint16 sigId,
; ..\EAS\BSW\Com\Com.c	   534      boolean needRoutOut
; ..\EAS\BSW\Com\Com.c	   535  );
; ..\EAS\BSW\Com\Com.c	   536  
; ..\EAS\BSW\Com\Com.c	   537  
; ..\EAS\BSW\Com\Com.c	   538  STATIC FUNC(void, COM_CODE) Com_InitRxPdu
; ..\EAS\BSW\Com\Com.c	   539  (
; ..\EAS\BSW\Com\Com.c	   540      PduIdType RxIpduId,
; ..\EAS\BSW\Com\Com.c	   541      boolean   isStartFlag
; ..\EAS\BSW\Com\Com.c	   542  );
; ..\EAS\BSW\Com\Com.c	   543  
; ..\EAS\BSW\Com\Com.c	   544  
; ..\EAS\BSW\Com\Com.c	   545  #if(STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	   546  STATIC FUNC(void, COM_CODE) Com_SwitchRxPduMode
; ..\EAS\BSW\Com\Com.c	   547  (
; ..\EAS\BSW\Com\Com.c	   548      PduIdType RxIpduId,
; ..\EAS\BSW\Com\Com.c	   549      boolean   isStartFlag,
; ..\EAS\BSW\Com\Com.c	   550      boolean   InitFlag
; ..\EAS\BSW\Com\Com.c	   551  );
; ..\EAS\BSW\Com\Com.c	   552  #endif
; ..\EAS\BSW\Com\Com.c	   553  
; ..\EAS\BSW\Com\Com.c	   554  STATIC FUNC(void, COM_CODE) Com_RxInit
; ..\EAS\BSW\Com\Com.c	   555  (
; ..\EAS\BSW\Com\Com.c	   556      void
; ..\EAS\BSW\Com\Com.c	   557  );
; ..\EAS\BSW\Com\Com.c	   558  
; ..\EAS\BSW\Com\Com.c	   559  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	   560  STATIC FUNC(void, COM_CODE) Com_RxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	   561  (
; ..\EAS\BSW\Com\Com.c	   562      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	   563  );
; ..\EAS\BSW\Com\Com.c	   564  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   565  STATIC FUNC(void, COM_CODE) Com_ResetUpdateRxToTimer
; ..\EAS\BSW\Com\Com.c	   566  (
; ..\EAS\BSW\Com\Com.c	   567      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	   568  );
; ..\EAS\BSW\Com\Com.c	   569  
; ..\EAS\BSW\Com\Com.c	   570  STATIC FUNC(void, COM_CODE) Com_UpdateRxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	   571  (
; ..\EAS\BSW\Com\Com.c	   572      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	   573  );
; ..\EAS\BSW\Com\Com.c	   574  #endif
; ..\EAS\BSW\Com\Com.c	   575  #endif
; ..\EAS\BSW\Com\Com.c	   576  
; ..\EAS\BSW\Com\Com.c	   577  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   578  STATIC FUNC(boolean, COM_CODE) Com_CheckSigUpdateBit
; ..\EAS\BSW\Com\Com.c	   579  (
; ..\EAS\BSW\Com\Com.c	   580      PduIdType RxIpduId,
; ..\EAS\BSW\Com\Com.c	   581      Com_SignalIdType index
; ..\EAS\BSW\Com\Com.c	   582  );
; ..\EAS\BSW\Com\Com.c	   583  #endif
; ..\EAS\BSW\Com\Com.c	   584  
; ..\EAS\BSW\Com\Com.c	   585  #if((COM_RX_FILTER_SUPPORT == STD_ON) && (COM_MAX_FILTER_OCCURRENCE_NUM > 0))
; ..\EAS\BSW\Com\Com.c	   586  STATIC FUNC(void, COM_CODE) Com_InitRxOccOfPdu
; ..\EAS\BSW\Com\Com.c	   587  (
; ..\EAS\BSW\Com\Com.c	   588      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	   589  );
; ..\EAS\BSW\Com\Com.c	   590  #endif
; ..\EAS\BSW\Com\Com.c	   591  
; ..\EAS\BSW\Com\Com.c	   592  
; ..\EAS\BSW\Com\Com.c	   593  
; ..\EAS\BSW\Com\Com.c	   594  STATIC FUNC(void, COM_CODE) Com_InitRxPduValue
; ..\EAS\BSW\Com\Com.c	   595  (
; ..\EAS\BSW\Com\Com.c	   596      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	   597  );
; ..\EAS\BSW\Com\Com.c	   598  
; ..\EAS\BSW\Com\Com.c	   599  STATIC FUNC(void, COM_CODE) Com_HandleRxPdu_DirectCopy
; ..\EAS\BSW\Com\Com.c	   600  (
; ..\EAS\BSW\Com\Com.c	   601      PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	   602  );
; ..\EAS\BSW\Com\Com.c	   603  
; ..\EAS\BSW\Com\Com.c	   604  #if(STD_OFF == COM_RX_DIRECT_COPY)
; ..\EAS\BSW\Com\Com.c	   605  #if (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   606  #if ((COM_RX_FILTER_SUPPORT == STD_ON) || (STD_ON == COM_RX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	   607  STATIC FUNC(uint8, COM_CODE) Com_CheckRxSignalGroup_Invalid_Filter
; ..\EAS\BSW\Com\Com.c	   608  (
; ..\EAS\BSW\Com\Com.c	   609      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	   610      Com_SignalGroupIdType SigGrpId
; ..\EAS\BSW\Com\Com.c	   611  );
; ..\EAS\BSW\Com\Com.c	   612  #endif
; ..\EAS\BSW\Com\Com.c	   613  
; ..\EAS\BSW\Com\Com.c	   614  STATIC FUNC(void, COM_CODE) Com_RxSignalGroup_ProcessAfterCheck
; ..\EAS\BSW\Com\Com.c	   615  (
; ..\EAS\BSW\Com\Com.c	   616      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	   617      uint8 filterResult,
; ..\EAS\BSW\Com\Com.c	   618      Com_SignalIdType RxSigId,
; ..\EAS\BSW\Com\Com.c	   619      Com_SignalGroupIdType SigGrpId
; ..\EAS\BSW\Com\Com.c	   620  );
; ..\EAS\BSW\Com\Com.c	   621  #endif
; ..\EAS\BSW\Com\Com.c	   622  
; ..\EAS\BSW\Com\Com.c	   623  STATIC FUNC(void, COM_CODE) Com_RxSignal_ProcessAfterCheck
; ..\EAS\BSW\Com\Com.c	   624  (
; ..\EAS\BSW\Com\Com.c	   625      uint8 filterResult,
; ..\EAS\BSW\Com\Com.c	   626      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	   627      Com_SignalIdType RxSigId
; ..\EAS\BSW\Com\Com.c	   628  );
; ..\EAS\BSW\Com\Com.c	   629  
; ..\EAS\BSW\Com\Com.c	   630  STATIC FUNC(void, COM_CODE) Com_HandleRxPdu
; ..\EAS\BSW\Com\Com.c	   631  (
; ..\EAS\BSW\Com\Com.c	   632      PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	   633  );
; ..\EAS\BSW\Com\Com.c	   634  
; ..\EAS\BSW\Com\Com.c	   635  #endif
; ..\EAS\BSW\Com\Com.c	   636  
; ..\EAS\BSW\Com\Com.c	   637  
; ..\EAS\BSW\Com\Com.c	   638  
; ..\EAS\BSW\Com\Com.c	   639  #endif/*#if(STD_ON == COM_RXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	   640  
; ..\EAS\BSW\Com\Com.c	   641  
; ..\EAS\BSW\Com\Com.c	   642  #if(STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	   643  STATIC FUNC(void, COM_CODE) Com_IpduGroupStart_Internal
; ..\EAS\BSW\Com\Com.c	   644  (
; ..\EAS\BSW\Com\Com.c	   645      Com_IpduGroupIdType IpduGroupId,
; ..\EAS\BSW\Com\Com.c	   646      boolean Initialize
; ..\EAS\BSW\Com\Com.c	   647  );
; ..\EAS\BSW\Com\Com.c	   648  STATIC FUNC(void, COM_CODE) Com_IpduGroupStop_Internal
; ..\EAS\BSW\Com\Com.c	   649  (
; ..\EAS\BSW\Com\Com.c	   650      Com_IpduGroupIdType IpduGroupId
; ..\EAS\BSW\Com\Com.c	   651  );
; ..\EAS\BSW\Com\Com.c	   652  STATIC FUNC(boolean, COM_CODE) Com_IsPduStart
; ..\EAS\BSW\Com\Com.c	   653  (
; ..\EAS\BSW\Com\Com.c	   654      PduIdType pduId,
; ..\EAS\BSW\Com\Com.c	   655      boolean isTx
; ..\EAS\BSW\Com\Com.c	   656  );
; ..\EAS\BSW\Com\Com.c	   657  #endif
; ..\EAS\BSW\Com\Com.c	   658  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	   659  STATIC FUNC(boolean, COM_CODE) Com_IsPduDMEnable_Internal
; ..\EAS\BSW\Com\Com.c	   660  (
; ..\EAS\BSW\Com\Com.c	   661      PduIdType pduId
; ..\EAS\BSW\Com\Com.c	   662  );
; ..\EAS\BSW\Com\Com.c	   663  #endif
; ..\EAS\BSW\Com\Com.c	   664  
; ..\EAS\BSW\Com\Com.c	   665  
; ..\EAS\BSW\Com\Com.c	   666  #if(STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	   667  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	   668  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   669  * Function Name: Com_IsPduStart
; ..\EAS\BSW\Com\Com.c	   670  *
; ..\EAS\BSW\Com\Com.c	   671  * Description:   This service check if pdu need to be started based on pdu group state
; ..\EAS\BSW\Com\Com.c	   672  *
; ..\EAS\BSW\Com\Com.c	   673  * Inputs:        pduId, isTx
; ..\EAS\BSW\Com\Com.c	   674  *
; ..\EAS\BSW\Com\Com.c	   675  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	   676  *
; ..\EAS\BSW\Com\Com.c	   677  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	   678  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   679  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	   680  STATIC FUNC(boolean, COM_CODE) Com_IsPduStart
; Function Com_IsPduStart
.L328:
Com_IsPduStart:	.type	func

; ..\EAS\BSW\Com\Com.c	   681  (
; ..\EAS\BSW\Com\Com.c	   682      PduIdType pduId,
; ..\EAS\BSW\Com\Com.c	   683      boolean isTx
; ..\EAS\BSW\Com\Com.c	   684  )
; ..\EAS\BSW\Com\Com.c	   685  {
; ..\EAS\BSW\Com\Com.c	   686      boolean flag = FALSE;
	mov	d2,#0
.L1016:

; ..\EAS\BSW\Com\Com.c	   687      Com_IpduGroupIdType grpIdx = (Com_IpduGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	   688      PduIdType tmpNum = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	   689      P2CONST(PduIdType, AUTOMATIC, COM_CONST) tmpPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	   690  
; ..\EAS\BSW\Com\Com.c	   691      if(TRUE == isTx)
	jeq	d5,#0,.L2
.L2238:

; ..\EAS\BSW\Com\Com.c	   692      {
; ..\EAS\BSW\Com\Com.c	   693  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   694          tmpNum = COM_CFG_TXPDU_IN_PDUGRP_NUM(pduId);
	mul	d15,d4,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]9
.L1017:

; ..\EAS\BSW\Com\Com.c	   695          tmpPtr = COM_CFG_TXPDU_IN_PDUGRP_PTR(pduId);
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]12
.L1018:
	j	.L3
.L2:

; ..\EAS\BSW\Com\Com.c	   696  #endif
; ..\EAS\BSW\Com\Com.c	   697      }
; ..\EAS\BSW\Com\Com.c	   698      else
; ..\EAS\BSW\Com\Com.c	   699      {
; ..\EAS\BSW\Com\Com.c	   700  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   701          tmpNum = COM_CFG_RXPDU_IN_PDUGRP_NUM(pduId);
	sha	d15,d4,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]7
.L1019:

; ..\EAS\BSW\Com\Com.c	   702          tmpPtr = COM_CFG_RXPDU_IN_PDUGRP_PTR(pduId);
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L3:

; ..\EAS\BSW\Com\Com.c	   703  #endif
; ..\EAS\BSW\Com\Com.c	   704      }
; ..\EAS\BSW\Com\Com.c	   705  
; ..\EAS\BSW\Com\Com.c	   706      /* search all pdugroup which contains thia pdu, if any one is start, retuan True = Start*/
; ..\EAS\BSW\Com\Com.c	   707      for(grpIdx =  (Com_IpduGroupIdType)0; grpIdx < tmpNum; grpIdx++)
	mov	d15,d2
.L1020:
	j	.L4
.L5:

; ..\EAS\BSW\Com\Com.c	   708      {
; ..\EAS\BSW\Com\Com.c	   709          if(TRUE == Com_IpduGroupStartFlag[tmpPtr[grpIdx]])
	addsc.a	a2,a15,d15,#0
	ld.bu	d1,[a2]
.L2239:
	movh.a	a2,#@his(Com_IpduGroupStartFlag)
	lea	a2,[a2]@los(Com_IpduGroupStartFlag)
.L2240:
	addsc.a	a2,a2,d1,#0
	ld.bu	d1,[a2]
.L2241:
	jne	d1,#1,.L6
.L2242:

; ..\EAS\BSW\Com\Com.c	   710          {
; ..\EAS\BSW\Com\Com.c	   711              flag = TRUE;
	mov	d2,#1
.L2243:

; ..\EAS\BSW\Com\Com.c	   712              break;
; ..\EAS\BSW\Com\Com.c	   713          }
; ..\EAS\BSW\Com\Com.c	   714      }
; ..\EAS\BSW\Com\Com.c	   715  
; ..\EAS\BSW\Com\Com.c	   716  
; ..\EAS\BSW\Com\Com.c	   717      return flag;
; ..\EAS\BSW\Com\Com.c	   718  }
	ret
.L6:
	add	d15,#1
.L1021:
	extr.u	d15,d15,#0,#16
.L4:
	jlt.u	d15,d0,.L5
.L2244:
	ret
.L1002:
	
__Com_IsPduStart_function_end:
	.size	Com_IsPduStart,__Com_IsPduStart_function_end-Com_IsPduStart
.L752:
	; End of function
	
	.sdecl	'.text.Com.Com_IpduGroupStart_Internal',code,cluster('Com_IpduGroupStart_Internal')
	.sect	'.text.Com.Com_IpduGroupStart_Internal'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	   719  
; ..\EAS\BSW\Com\Com.c	   720  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	   721  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   722  * Function Name: Com_IpduGroupStart_Internal SWS_Com_00751 792
; ..\EAS\BSW\Com\Com.c	   723  *
; ..\EAS\BSW\Com\Com.c	   724  * Description:   start target group and keep other group unchange
; ..\EAS\BSW\Com\Com.c	   725  *
; ..\EAS\BSW\Com\Com.c	   726  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	   727  *                Initialize
; ..\EAS\BSW\Com\Com.c	   728  *
; ..\EAS\BSW\Com\Com.c	   729  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	   730  *
; ..\EAS\BSW\Com\Com.c	   731  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	   732  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   733  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	   734  STATIC FUNC(void, COM_CODE) Com_IpduGroupStart_Internal
; Function Com_IpduGroupStart_Internal
.L330:
Com_IpduGroupStart_Internal:	.type	func
	mov	d9,d4
.L1022:
	mov	d10,d5
.L1023:

; ..\EAS\BSW\Com\Com.c	   735  (
; ..\EAS\BSW\Com\Com.c	   736      Com_IpduGroupIdType IpduGroupId,
; ..\EAS\BSW\Com\Com.c	   737      boolean Initialize
; ..\EAS\BSW\Com\Com.c	   738  )
; ..\EAS\BSW\Com\Com.c	   739  {
; ..\EAS\BSW\Com\Com.c	   740      PduIdType pduIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	   741      PduIdType pduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	   742      
; ..\EAS\BSW\Com\Com.c	   743      /* SWS_COM 7.3.5.2, starts group if it was previously stopped*/
; ..\EAS\BSW\Com\Com.c	   744      if(FALSE == Com_IpduGroupStartFlag[IpduGroupId])
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L2177:
	addsc.a	a15,a15,d9,#0
	ld.bu	d15,[a15]
.L2178:
	jne	d15,#0,.L9
.L2179:

; ..\EAS\BSW\Com\Com.c	   745      {
; ..\EAS\BSW\Com\Com.c	   746  
; ..\EAS\BSW\Com\Com.c	   747          Com_IpduGroupStartFlag[IpduGroupId] = TRUE;
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L2180:
	addsc.a	a15,a15,d9,#0
.L2181:
	mov	d0,#1
.L2182:
	st.b	[a15],d0
.L2183:

; ..\EAS\BSW\Com\Com.c	   748  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	   749          Com_IpduGroupDMEnableFlag[IpduGroupId] = TRUE;
	movh.a	a15,#@his(Com_IpduGroupDMEnableFlag)
	lea	a15,[a15]@los(Com_IpduGroupDMEnableFlag)
.L2184:
	addsc.a	a15,a15,d9,#0
.L2185:
	st.b	[a15],d0
.L2186:

; ..\EAS\BSW\Com\Com.c	   750  #endif
; ..\EAS\BSW\Com\Com.c	   751      /* start group  */
; ..\EAS\BSW\Com\Com.c	   752  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   753          for(pduIndex = (PduIdType)0; pduIndex < COM_CFG_TX_PDUGROUP_NUM(IpduGroupId); pduIndex++)
	mov	d8,#0
.L1024:
	j	.L10
.L11:

; ..\EAS\BSW\Com\Com.c	   754          {
; ..\EAS\BSW\Com\Com.c	   755              pduId = COM_CFG_TX_PDUGROUP_PTR(IpduGroupId)[pduIndex];
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]
.L2187:
	addsc.a	a15,a15,d8,#0
	ld.bu	d4,[a15]
.L1026:

; ..\EAS\BSW\Com\Com.c	   756              if(Com_TxPduState[pduId] == COM_TXPDU_STOP)
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L2188:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L2189:
	jne	d15,#0,.L12
.L2190:

; ..\EAS\BSW\Com\Com.c	   757              {
; ..\EAS\BSW\Com\Com.c	   758                  Com_SwitchTxPduMode(pduId, TRUE, Initialize);
	mov	d5,#1
.L2191:
	mov	d6,d10
.L1027:
	call	Com_SwitchTxPduMode
.L12:
	add	d8,#1
.L1025:
	extr.u	d8,d8,#0,#8
.L10:
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]4
.L2192:
	jlt.u	d8,d15,.L11
.L2193:

; ..\EAS\BSW\Com\Com.c	   759              }
; ..\EAS\BSW\Com\Com.c	   760              /* when pdu is already in start state, do nothing even Initialize = true, donot reset signal value or tx period*/
; ..\EAS\BSW\Com\Com.c	   761  
; ..\EAS\BSW\Com\Com.c	   762  
; ..\EAS\BSW\Com\Com.c	   763          }
; ..\EAS\BSW\Com\Com.c	   764  #endif
; ..\EAS\BSW\Com\Com.c	   765  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   766          for(pduIndex = (PduIdType)0; pduIndex < COM_CFG_RX_PDUGROUP_NUM(IpduGroupId); pduIndex++)
	mov	d8,#0
.L2194:
	j	.L13
.L14:

; ..\EAS\BSW\Com\Com.c	   767          {
; ..\EAS\BSW\Com\Com.c	   768              pduId = COM_CFG_RX_PDUGROUP_PTR(IpduGroupId)[pduIndex];
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L2195:
	addsc.a	a15,a15,d8,#0
	ld.bu	d4,[a15]
.L1029:

; ..\EAS\BSW\Com\Com.c	   769              if(Com_RxPduState[pduId] == COM_RXPDU_STOP)
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L2196:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L2197:
	jne	d15,#0,.L15
.L2198:

; ..\EAS\BSW\Com\Com.c	   770              {
; ..\EAS\BSW\Com\Com.c	   771                  Com_SwitchRxPduMode(pduId, TRUE, Initialize);
	mov	d5,#1
.L2199:
	mov	d6,d10
.L1030:
	call	Com_SwitchRxPduMode
.L15:
	add	d8,#1
.L1028:
	extr.u	d8,d8,#0,#8
.L13:
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L2200:
	jlt.u	d8,d15,.L14
.L9:

; ..\EAS\BSW\Com\Com.c	   772              }
; ..\EAS\BSW\Com\Com.c	   773              /* when pdu is already in start state, do nothing even Initialize = true, donot reset signal value */
; ..\EAS\BSW\Com\Com.c	   774          
; ..\EAS\BSW\Com\Com.c	   775          }
; ..\EAS\BSW\Com\Com.c	   776  #endif
; ..\EAS\BSW\Com\Com.c	   777      }
; ..\EAS\BSW\Com\Com.c	   778  }
	ret
.L992:
	
__Com_IpduGroupStart_Internal_function_end:
	.size	Com_IpduGroupStart_Internal,__Com_IpduGroupStart_Internal_function_end-Com_IpduGroupStart_Internal
.L742:
	; End of function
	
	.sdecl	'.text.Com.Com_IpduGroupStop_Internal',code,cluster('Com_IpduGroupStop_Internal')
	.sect	'.text.Com.Com_IpduGroupStop_Internal'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	   779  
; ..\EAS\BSW\Com\Com.c	   780  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	   781  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   782  * Function Name: Com_IpduGroupStop_Internal SWS_Com_00751 792
; ..\EAS\BSW\Com\Com.c	   783  *
; ..\EAS\BSW\Com\Com.c	   784  * Description:   stop target group and keep other group unchange
; ..\EAS\BSW\Com\Com.c	   785  *
; ..\EAS\BSW\Com\Com.c	   786  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	   787  *
; ..\EAS\BSW\Com\Com.c	   788  *
; ..\EAS\BSW\Com\Com.c	   789  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	   790  *
; ..\EAS\BSW\Com\Com.c	   791  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	   792  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   793  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	   794  STATIC FUNC(void, COM_CODE) Com_IpduGroupStop_Internal
; Function Com_IpduGroupStop_Internal
.L332:
Com_IpduGroupStop_Internal:	.type	func
	mov	d9,d4
.L1031:

; ..\EAS\BSW\Com\Com.c	   795  (
; ..\EAS\BSW\Com\Com.c	   796      Com_IpduGroupIdType IpduGroupId
; ..\EAS\BSW\Com\Com.c	   797  )
; ..\EAS\BSW\Com\Com.c	   798  {
; ..\EAS\BSW\Com\Com.c	   799      PduIdType pduIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	   800      PduIdType pduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	   801      boolean tmpPduStartFlag = FALSE;
; ..\EAS\BSW\Com\Com.c	   802    
; ..\EAS\BSW\Com\Com.c	   803      /* SWS_COM 7.3.5.3, stop group if it was previously started*/
; ..\EAS\BSW\Com\Com.c	   804      if(TRUE == Com_IpduGroupStartFlag[IpduGroupId])
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L2205:
	addsc.a	a15,a15,d9,#0
	ld.bu	d0,[a15]
.L2206:
	jne	d0,#1,.L16
.L2207:

; ..\EAS\BSW\Com\Com.c	   805      {
; ..\EAS\BSW\Com\Com.c	   806          /* must set group = false first , as following code will use this flag to decide the pdu state*/
; ..\EAS\BSW\Com\Com.c	   807          Com_IpduGroupStartFlag[IpduGroupId] = FALSE;
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L2208:
	addsc.a	a15,a15,d9,#0
.L2209:
	mov	d10,#0
.L1032:
	st.b	[a15],d10
.L2210:

; ..\EAS\BSW\Com\Com.c	   808  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	   809          Com_IpduGroupDMEnableFlag[IpduGroupId] = FALSE;
	movh.a	a15,#@his(Com_IpduGroupDMEnableFlag)
	lea	a15,[a15]@los(Com_IpduGroupDMEnableFlag)
.L2211:
	addsc.a	a15,a15,d9,#0
.L2212:
	st.b	[a15],d10
.L2213:

; ..\EAS\BSW\Com\Com.c	   810  #endif
; ..\EAS\BSW\Com\Com.c	   811  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   812          /* Stop group  */
; ..\EAS\BSW\Com\Com.c	   813          for(pduIndex = (PduIdType)0; pduIndex < COM_CFG_TX_PDUGROUP_NUM(IpduGroupId); pduIndex++)
	j	.L17
.L18:

; ..\EAS\BSW\Com\Com.c	   814          {
; ..\EAS\BSW\Com\Com.c	   815              pduId = COM_CFG_TX_PDUGROUP_PTR(IpduGroupId)[pduIndex];
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]
.L2214:
	addsc.a	a15,a15,d10,#0
	ld.bu	d8,[a15]
.L1034:

; ..\EAS\BSW\Com\Com.c	   816  
; ..\EAS\BSW\Com\Com.c	   817              /* search all pdugroup which contains thia pdu, if any one is start, retuan True*/
; ..\EAS\BSW\Com\Com.c	   818              tmpPduStartFlag = Com_IsPduStart(pduId, TRUE);
	mov	d5,#1
	mov	d4,d8
.L1035:
	call	Com_IsPduStart
.L1036:

; ..\EAS\BSW\Com\Com.c	   819  
; ..\EAS\BSW\Com\Com.c	   820              if((tmpPduStartFlag == FALSE) && (Com_TxPduState[pduId] != COM_TXPDU_STOP))
	jne	d2,#0,.L19
.L2215:
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L2216:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L2217:
	jeq	d15,#0,.L20
.L2218:

; ..\EAS\BSW\Com\Com.c	   821              {
; ..\EAS\BSW\Com\Com.c	   822                  Com_SwitchTxPduMode(pduId, FALSE, FALSE);
	mov	d5,#0
.L2219:
	mov	d6,d5
	mov	d4,d8
.L1038:
	call	Com_SwitchTxPduMode
.L1037:

; ..\EAS\BSW\Com\Com.c	   823          
; ..\EAS\BSW\Com\Com.c	   824                  /* Err Ack when pdu is sending out*/
; ..\EAS\BSW\Com\Com.c	   825                  if((COM_TXPDU_START_BUSY == Com_TxPduState[pduId])
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L2220:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L2221:
	jeq	d15,#2,.L21
.L2222:

; ..\EAS\BSW\Com\Com.c	   826                          || (COM_TXPDU_START_RETX == Com_TxPduState[pduId]))
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L2223:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L2224:
	jne	d15,#3,.L22
.L21:

; ..\EAS\BSW\Com\Com.c	   827                  {
; ..\EAS\BSW\Com\Com.c	   828                      Com_CbkTxErrAck_PDU(pduId);
	mov	d4,d8
.L1039:
	call	Com_CbkTxErrAck_PDU
.L22:
.L20:
.L19:
	add	d0,d10,#1
	extr.u	d10,d0,#0,#8
.L17:
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]4
.L2225:
	jlt.u	d10,d15,.L18
.L2226:

; ..\EAS\BSW\Com\Com.c	   829                  }
; ..\EAS\BSW\Com\Com.c	   830  
; ..\EAS\BSW\Com\Com.c	   831              }
; ..\EAS\BSW\Com\Com.c	   832  
; ..\EAS\BSW\Com\Com.c	   833              /* if pdu already in stop state  do nothing*/
; ..\EAS\BSW\Com\Com.c	   834              /* if pdu need to keep start ,  do nothing*/
; ..\EAS\BSW\Com\Com.c	   835  
; ..\EAS\BSW\Com\Com.c	   836          }
; ..\EAS\BSW\Com\Com.c	   837  #endif
; ..\EAS\BSW\Com\Com.c	   838  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   839          for(pduIndex = (PduIdType)0; pduIndex < COM_CFG_RX_PDUGROUP_NUM(IpduGroupId); pduIndex++)
	mov	d8,#0
.L1033:
	j	.L23
.L24:

; ..\EAS\BSW\Com\Com.c	   840          {
; ..\EAS\BSW\Com\Com.c	   841              pduId = COM_CFG_RX_PDUGROUP_PTR(IpduGroupId)[pduIndex];
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L2227:
	addsc.a	a15,a15,d8,#0
	ld.bu	d10,[a15]
.L1041:

; ..\EAS\BSW\Com\Com.c	   842              /* search all pdugroup which contains thia pdu, if any one is start, retuan True*/
; ..\EAS\BSW\Com\Com.c	   843              tmpPduStartFlag = Com_IsPduStart(pduId, FALSE);
	mov	d5,#0
	mov	d4,d10
.L1042:
	call	Com_IsPduStart
.L1043:

; ..\EAS\BSW\Com\Com.c	   844  
; ..\EAS\BSW\Com\Com.c	   845              if((tmpPduStartFlag == FALSE) && (Com_RxPduState[pduId] != COM_RXPDU_STOP))
	jne	d2,#0,.L25
.L2228:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L2229:
	addsc.a	a15,a15,d10,#0
	ld.bu	d15,[a15]
.L2230:
	jeq	d15,#0,.L26
.L2231:

; ..\EAS\BSW\Com\Com.c	   846              {
; ..\EAS\BSW\Com\Com.c	   847                  Com_SwitchRxPduMode(pduId, FALSE, FALSE);
	mov	d5,#0
.L2232:
	mov	d6,d5
	mov	d4,d10
.L1044:
	call	Com_SwitchRxPduMode
.L26:
.L25:
	add	d8,#1
.L1040:
	extr.u	d8,d8,#0,#8
.L23:
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L2233:
	jlt.u	d8,d15,.L24
.L16:

; ..\EAS\BSW\Com\Com.c	   848              }
; ..\EAS\BSW\Com\Com.c	   849  
; ..\EAS\BSW\Com\Com.c	   850              /* if pdu already in stop state  do nothing*/
; ..\EAS\BSW\Com\Com.c	   851              /* if pdu need to keep start ,  do nothing*/
; ..\EAS\BSW\Com\Com.c	   852          }
; ..\EAS\BSW\Com\Com.c	   853  #endif
; ..\EAS\BSW\Com\Com.c	   854      }
; ..\EAS\BSW\Com\Com.c	   855  }
	ret
.L997:
	
__Com_IpduGroupStop_Internal_function_end:
	.size	Com_IpduGroupStop_Internal,__Com_IpduGroupStop_Internal_function_end-Com_IpduGroupStop_Internal
.L747:
	; End of function
	
	.sdecl	'.text.Com.Com_WriteSignal_Internal',code,cluster('Com_WriteSignal_Internal')
	.sect	'.text.Com.Com_WriteSignal_Internal'
	.align	2
	
	.global	Com_WriteSignal_Internal

; ..\EAS\BSW\Com\Com.c	   856  
; ..\EAS\BSW\Com\Com.c	   857  #endif/* #if(STD_ON == COM_IPDU_GROUP_FUN) */
; ..\EAS\BSW\Com\Com.c	   858  
; ..\EAS\BSW\Com\Com.c	   859  
; ..\EAS\BSW\Com\Com.c	   860  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	   861  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	   862  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   863  * Function Name: Com_WriteSignal_Internal
; ..\EAS\BSW\Com\Com.c	   864  *
; ..\EAS\BSW\Com\Com.c	   865  * Description:   This service write signal into txbuf or shadow buffer
; ..\EAS\BSW\Com\Com.c	   866  *
; ..\EAS\BSW\Com\Com.c	   867  * Inputs:        SignalId, SignalDataPtr, length
; ..\EAS\BSW\Com\Com.c	   868  *
; ..\EAS\BSW\Com\Com.c	   869  * Outputs:       uint8
; ..\EAS\BSW\Com\Com.c	   870  *
; ..\EAS\BSW\Com\Com.c	   871  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	   872  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   873  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	   874  FUNC(uint8, COM_CODE) Com_WriteSignal_Internal
; Function Com_WriteSignal_Internal
.L334:
Com_WriteSignal_Internal:	.type	func
	mov	d9,d4
.L1047:

; ..\EAS\BSW\Com\Com.c	   875  (
; ..\EAS\BSW\Com\Com.c	   876      Com_SignalIdType SignalId,
; ..\EAS\BSW\Com\Com.c	   877      P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; ..\EAS\BSW\Com\Com.c	   878      PduLengthType length
; ..\EAS\BSW\Com\Com.c	   879  )
; ..\EAS\BSW\Com\Com.c	   880  {
; ..\EAS\BSW\Com\Com.c	   881  
; ..\EAS\BSW\Com\Com.c	   882  
; ..\EAS\BSW\Com\Com.c	   883      PduIdType TxIpduId = COM_CFG_TXSIG_TXPDU_ID(SignalId);
	mul	d15,d9,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d8,[a15]
.L1048:

; ..\EAS\BSW\Com\Com.c	   884  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	   885      boolean ChangeFlag = FALSE;
; ..\EAS\BSW\Com\Com.c	   886  #endif
; ..\EAS\BSW\Com\Com.c	   887      uint8 result = COM_SERVICE_NOT_AVAILABLE;
	mov	d10,#128
.L1049:

; ..\EAS\BSW\Com\Com.c	   888  
; ..\EAS\BSW\Com\Com.c	   889  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   890      if(FALSE == COM_CFG_TXSIG_IS_GROUP_SIGNAL(SignalId))
; ..\EAS\BSW\Com\Com.c	   891  #endif
; ..\EAS\BSW\Com\Com.c	   892      {
; ..\EAS\BSW\Com\Com.c	   893          /* SWS_Com_00334, signal can be updated when pdu is stop
; ..\EAS\BSW\Com\Com.c	   894             in stop mode, tms result, txmode and data will be saved
; ..\EAS\BSW\Com\Com.c	   895             but trigger will not be saved,
; ..\EAS\BSW\Com\Com.c	   896             so that the msg will not be send at once when pdu is started
; ..\EAS\BSW\Com\Com.c	   897          */
; ..\EAS\BSW\Com\Com.c	   898          if((COM_TXPDU_START_BUSY == Com_TxPduState[TxIpduId]) && (TRUE == COM_CFG_TXPDU_IS_TP_PDU(TxIpduId)))
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1721:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1722:
	jne	d15,#2,.L27
.L1723:
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]41
.L1724:
	jne	d15,#1,.L28
.L1725:

; ..\EAS\BSW\Com\Com.c	   899          {
; ..\EAS\BSW\Com\Com.c	   900              result = COM_BUSY;
	mov	d10,#129
.L1726:
	j	.L29
.L28:
.L27:

; ..\EAS\BSW\Com\Com.c	   901          }
; ..\EAS\BSW\Com\Com.c	   902          else
; ..\EAS\BSW\Com\Com.c	   903          {
; ..\EAS\BSW\Com\Com.c	   904  #if(STD_ON == COM_TXSIG_ON_CHANGE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   905              if( ( COM_CFG_TXSIG_TRANSPROPERTY(SignalId) >= COM_TRIGGERED_ON_CHANGE ) && ( COM_CFG_TXSIG_TRANSPROPERTY(SignalId) < COM_IFACTIVE_SIG ) )
; ..\EAS\BSW\Com\Com.c	   906              {
; ..\EAS\BSW\Com\Com.c	   907                  ChangeFlag = COM_CFG_TXSIG_CHECKCHANGE_SIG_FUN(SignalId)(TxIpduId, SignalId, SignalDataPtr, length);
; ..\EAS\BSW\Com\Com.c	   908              }
; ..\EAS\BSW\Com\Com.c	   909  #endif
; ..\EAS\BSW\Com\Com.c	   910  
; ..\EAS\BSW\Com\Com.c	   911              /* do Tx Filter if configured , must filter before write data , as maybe mask oldNew*/
; ..\EAS\BSW\Com\Com.c	   912  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   913              Com_TxSignalFilter(SignalId, SignalDataPtr);
; ..\EAS\BSW\Com\Com.c	   914  #endif
; ..\EAS\BSW\Com\Com.c	   915  
; ..\EAS\BSW\Com\Com.c	   916              COM_CFG_TXSIG_WRITE_SIG_FUN(SignalId)(SignalDataPtr, COM_CFG_TXPDU_DATA_PTR(TxIpduId), length);
	mul	d15,d9,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]32
.L1727:
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a5,[a15]20
.L1728:
	mov	d4,d5
.L1046:
	calli	a2
.L1045:

; ..\EAS\BSW\Com\Com.c	   917  
; ..\EAS\BSW\Com\Com.c	   918  #if(STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   919              Com_CheckTxSigIfActive(TxIpduId, SignalId,SignalDataPtr, COM_CFG_TXSIG_INACTIVE_VALUE_PTR(SignalId));
; ..\EAS\BSW\Com\Com.c	   920  #endif
; ..\EAS\BSW\Com\Com.c	   921  
; ..\EAS\BSW\Com\Com.c	   922  
; ..\EAS\BSW\Com\Com.c	   923  
; ..\EAS\BSW\Com\Com.c	   924  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   925              if(COM_SIG_DYN == COM_CFG_TXSIG_TYPE(SignalId))
; ..\EAS\BSW\Com\Com.c	   926              {
; ..\EAS\BSW\Com\Com.c	   927                  COM_TXPDU_DYN_LENGTH(TxIpduId) = COM_CFG_TXSIG_START_BYTE_INDEX(SignalId) + length;
; ..\EAS\BSW\Com\Com.c	   928              }
; ..\EAS\BSW\Com\Com.c	   929  #endif
; ..\EAS\BSW\Com\Com.c	   930  
; ..\EAS\BSW\Com\Com.c	   931  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	   932              /* set update bit if configured*/
; ..\EAS\BSW\Com\Com.c	   933              if(COM_INVALID_SIG_INDEX != COM_CFG_TXSIG_UPDATEBIT_INDEX(SignalId))
; ..\EAS\BSW\Com\Com.c	   934              {
; ..\EAS\BSW\Com\Com.c	   935                  Com_SetSigUpdateBit(TxIpduId, COM_CFG_TXSIG_UPDATEBIT_INDEX(SignalId));
; ..\EAS\BSW\Com\Com.c	   936              }
; ..\EAS\BSW\Com\Com.c	   937  #endif
; ..\EAS\BSW\Com\Com.c	   938  
; ..\EAS\BSW\Com\Com.c	   939              /* this Asr req Page54 Table3, when pdu is stop, data canbe updated, but return COM_SERVICE_NOT_AVAILABLE*/
; ..\EAS\BSW\Com\Com.c	   940              /*SWS_Com_334 dont save trigger when stop*/
; ..\EAS\BSW\Com\Com.c	   941              if(COM_TXPDU_STOP != Com_TxPduState[TxIpduId])
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1729:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1730:
	jeq	d15,#0,.L30
.L1731:

; ..\EAS\BSW\Com\Com.c	   942              {
; ..\EAS\BSW\Com\Com.c	   943  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	   944                  Com_SetIpduTrigRepFlag(COM_CFG_TXSIG_TRANSPROPERTY(SignalId), TxIpduId, ChangeFlag);
	mul	d15,d9,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d4,[a15]1
.L1732:
	mov	d5,d8
.L1050:
	mov	d6,#0
.L1052:
	call	Com_SetIpduTrigRepFlag
.L1051:

; ..\EAS\BSW\Com\Com.c	   945  #endif
; ..\EAS\BSW\Com\Com.c	   946                  result = E_OK;
	mov	d10,#0
.L30:
.L29:

; ..\EAS\BSW\Com\Com.c	   947              }
; ..\EAS\BSW\Com\Com.c	   948  
; ..\EAS\BSW\Com\Com.c	   949  
; ..\EAS\BSW\Com\Com.c	   950  
; ..\EAS\BSW\Com\Com.c	   951          }
; ..\EAS\BSW\Com\Com.c	   952      }
; ..\EAS\BSW\Com\Com.c	   953  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   954      else
; ..\EAS\BSW\Com\Com.c	   955      {
; ..\EAS\BSW\Com\Com.c	   956          /* if group signal, only update shadow buffer */
; ..\EAS\BSW\Com\Com.c	   957          /*shadow buffer can be updated even txstate is busy*/
; ..\EAS\BSW\Com\Com.c	   958          /* if group enable array access, dont do anything here*/
; ..\EAS\BSW\Com\Com.c	   959          if(FALSE == COM_CFG_TXSIGGRP_SUPPORT_ARRAY(COM_CFG_TXSIG_GET_SIGGROUPID(SignalId)))
; ..\EAS\BSW\Com\Com.c	   960          {
; ..\EAS\BSW\Com\Com.c	   961              COM_CFG_TXSIG_COPY_SIG_FUN(SignalId)(SignalDataPtr, COM_CFG_TXSIG_GROUP_TEMP_BUF(SignalId), length);
; ..\EAS\BSW\Com\Com.c	   962  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   963              if(COM_SIG_DYN == COM_CFG_TXSIG_TYPE(SignalId))
; ..\EAS\BSW\Com\Com.c	   964              {
; ..\EAS\BSW\Com\Com.c	   965                  *COM_CFG_TXSIG_GROUP_TEMPLENGTH_PTR(SignalId) = length;
; ..\EAS\BSW\Com\Com.c	   966              }
; ..\EAS\BSW\Com\Com.c	   967  #endif
; ..\EAS\BSW\Com\Com.c	   968              /* this Asr req Page54 Table3, when pdu is stop, data canbe updated, but return COM_SERVICE_NOT_AVAILABLE*/
; ..\EAS\BSW\Com\Com.c	   969              if(COM_TXPDU_STOP != Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	   970              {
; ..\EAS\BSW\Com\Com.c	   971                  result = E_OK;
; ..\EAS\BSW\Com\Com.c	   972              }
; ..\EAS\BSW\Com\Com.c	   973          }
; ..\EAS\BSW\Com\Com.c	   974      }
; ..\EAS\BSW\Com\Com.c	   975  #endif
; ..\EAS\BSW\Com\Com.c	   976  
; ..\EAS\BSW\Com\Com.c	   977      return result;
	mov	d2,d10
.L1053:

; ..\EAS\BSW\Com\Com.c	   978  
; ..\EAS\BSW\Com\Com.c	   979  }
	ret
.L864:
	
__Com_WriteSignal_Internal_function_end:
	.size	Com_WriteSignal_Internal,__Com_WriteSignal_Internal_function_end-Com_WriteSignal_Internal
.L582:
	; End of function
	
	.sdecl	'.text.Com.Com_InitTxPduValue',code,cluster('Com_InitTxPduValue')
	.sect	'.text.Com.Com_InitTxPduValue'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	   980  
; ..\EAS\BSW\Com\Com.c	   981  
; ..\EAS\BSW\Com\Com.c	   982  
; ..\EAS\BSW\Com\Com.c	   983  #if(STD_ON == COM_TX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	   984  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	   985  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   986  * Function Name: Com_ClearUpdateBit
; ..\EAS\BSW\Com\Com.c	   987  *
; ..\EAS\BSW\Com\Com.c	   988  * Description:   This service set target update bits of signal
; ..\EAS\BSW\Com\Com.c	   989  *
; ..\EAS\BSW\Com\Com.c	   990  * Inputs:        TxIpduId, index
; ..\EAS\BSW\Com\Com.c	   991  *
; ..\EAS\BSW\Com\Com.c	   992  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	   993  *
; ..\EAS\BSW\Com\Com.c	   994  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	   995  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	   996  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	   997  STATIC FUNC(void, COM_CODE) Com_SetSigUpdateBit
; ..\EAS\BSW\Com\Com.c	   998  (
; ..\EAS\BSW\Com\Com.c	   999      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  1000      uint16  index
; ..\EAS\BSW\Com\Com.c	  1001  )
; ..\EAS\BSW\Com\Com.c	  1002  {
; ..\EAS\BSW\Com\Com.c	  1003      PduLengthType tempByteIndex = COM_CFG_TXPDU_UPDATEBIT_INFO(TxIpduId)[index].UpdateByteIndex;
; ..\EAS\BSW\Com\Com.c	  1004      uint8 tempMaskValue = COM_CFG_TXPDU_UPDATEBIT_INFO(TxIpduId)[index].UpdateMaskValue;
; ..\EAS\BSW\Com\Com.c	  1005  
; ..\EAS\BSW\Com\Com.c	  1006      tempMaskValue = (uint8)(~tempMaskValue);
; ..\EAS\BSW\Com\Com.c	  1007  
; ..\EAS\BSW\Com\Com.c	  1008      ((uint8 *)COM_CFG_TXPDU_DATA_PTR(TxIpduId))[tempByteIndex] |= tempMaskValue;
; ..\EAS\BSW\Com\Com.c	  1009  }
; ..\EAS\BSW\Com\Com.c	  1010  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1011  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1012  * Function Name: Com_ClearUpdateBit
; ..\EAS\BSW\Com\Com.c	  1013  *
; ..\EAS\BSW\Com\Com.c	  1014  * Description:   This service clear all update bits of pdu
; ..\EAS\BSW\Com\Com.c	  1015  *
; ..\EAS\BSW\Com\Com.c	  1016  * Inputs:        TxIpduId:
; ..\EAS\BSW\Com\Com.c	  1017  *
; ..\EAS\BSW\Com\Com.c	  1018  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1019  *
; ..\EAS\BSW\Com\Com.c	  1020  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1021  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1022  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1023  STATIC FUNC(void, COM_CODE) Com_ClearUpdateBit
; ..\EAS\BSW\Com\Com.c	  1024  (
; ..\EAS\BSW\Com\Com.c	  1025      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1026  )
; ..\EAS\BSW\Com\Com.c	  1027  {
; ..\EAS\BSW\Com\Com.c	  1028      uint16 index = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  1029      PduLengthType tempByteIndex;
; ..\EAS\BSW\Com\Com.c	  1030      uint8 tempMaskValue;
; ..\EAS\BSW\Com\Com.c	  1031  
; ..\EAS\BSW\Com\Com.c	  1032      for(index = (uint16)0; index < COM_CFG_TXPDU_UPDATEBIT_NUM(TxIpduId); index++)
; ..\EAS\BSW\Com\Com.c	  1033      {
; ..\EAS\BSW\Com\Com.c	  1034          tempByteIndex = COM_CFG_TXPDU_UPDATEBIT_INFO(TxIpduId)[index].UpdateByteIndex;
; ..\EAS\BSW\Com\Com.c	  1035          tempMaskValue = COM_CFG_TXPDU_UPDATEBIT_INFO(TxIpduId)[index].UpdateMaskValue;
; ..\EAS\BSW\Com\Com.c	  1036  
; ..\EAS\BSW\Com\Com.c	  1037          ((uint8 *)COM_CFG_TXPDU_DATA_PTR(TxIpduId))[tempByteIndex] &= tempMaskValue;
; ..\EAS\BSW\Com\Com.c	  1038      }
; ..\EAS\BSW\Com\Com.c	  1039  
; ..\EAS\BSW\Com\Com.c	  1040  }
; ..\EAS\BSW\Com\Com.c	  1041  #endif/*COM_TX_UPDATEBIT_SUPPORT*/
; ..\EAS\BSW\Com\Com.c	  1042  
; ..\EAS\BSW\Com\Com.c	  1043  
; ..\EAS\BSW\Com\Com.c	  1044  
; ..\EAS\BSW\Com\Com.c	  1045  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1046  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1047  * Function Name: Com_InitTxOccOfPdu
; ..\EAS\BSW\Com\Com.c	  1048  *
; ..\EAS\BSW\Com\Com.c	  1049  * Description:   Init Tx signal's occ counter to 0, if configured
; ..\EAS\BSW\Com\Com.c	  1050  *
; ..\EAS\BSW\Com\Com.c	  1051  * Inputs:        TxIpduId
; ..\EAS\BSW\Com\Com.c	  1052  *
; ..\EAS\BSW\Com\Com.c	  1053  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1054  *
; ..\EAS\BSW\Com\Com.c	  1055  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1056  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1057  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1058  #if((STD_ON == COM_TX_FILTER_SUPPORT) && (COM_MAX_FILTER_OCCURRENCE_NUM > 0))
; ..\EAS\BSW\Com\Com.c	  1059  STATIC FUNC(void, COM_CODE) Com_InitTxOccOfPdu
; ..\EAS\BSW\Com\Com.c	  1060  (
; ..\EAS\BSW\Com\Com.c	  1061      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1062  )
; ..\EAS\BSW\Com\Com.c	  1063  {
; ..\EAS\BSW\Com\Com.c	  1064      Com_SignalIdType SigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  1065  
; ..\EAS\BSW\Com\Com.c	  1066      for(SigIndex = COM_CFG_TXPDU_SIG_START_NUM(TxIpduId); SigIndex <= COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId); SigIndex++)
; ..\EAS\BSW\Com\Com.c	  1067      {
; ..\EAS\BSW\Com\Com.c	  1068          if(NULL_PTR != COM_CFG_TXSIG_FILTER_PTR(SigIndex))
; ..\EAS\BSW\Com\Com.c	  1069          {
; ..\EAS\BSW\Com\Com.c	  1070              if(COM_INVALID_SIG_INDEX != COM_CFG_TXSIG_FILTER_PTR(SigIndex)->occIndex)
; ..\EAS\BSW\Com\Com.c	  1071              {
; ..\EAS\BSW\Com\Com.c	  1072                  Com_Sig_Occurrence[COM_CFG_TXSIG_FILTER_PTR(SigIndex)->occIndex] = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  1073              }
; ..\EAS\BSW\Com\Com.c	  1074          }
; ..\EAS\BSW\Com\Com.c	  1075      }
; ..\EAS\BSW\Com\Com.c	  1076  }
; ..\EAS\BSW\Com\Com.c	  1077  #endif
; ..\EAS\BSW\Com\Com.c	  1078  
; ..\EAS\BSW\Com\Com.c	  1079  
; ..\EAS\BSW\Com\Com.c	  1080  
; ..\EAS\BSW\Com\Com.c	  1081  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1082  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1083  * Function Name: Com_InitTxPduValue
; ..\EAS\BSW\Com\Com.c	  1084  *
; ..\EAS\BSW\Com\Com.c	  1085  * Description:   Init Rx Pdu values
; ..\EAS\BSW\Com\Com.c	  1086  *
; ..\EAS\BSW\Com\Com.c	  1087  * Inputs:        RxIpduId
; ..\EAS\BSW\Com\Com.c	  1088  *
; ..\EAS\BSW\Com\Com.c	  1089  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1090  *
; ..\EAS\BSW\Com\Com.c	  1091  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1092  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1093  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1094  STATIC FUNC(void, COM_CODE) Com_InitTxPduValue
; Function Com_InitTxPduValue
.L336:
Com_InitTxPduValue:	.type	func
	mov	d9,d4
.L1054:

; ..\EAS\BSW\Com\Com.c	  1095  (
; ..\EAS\BSW\Com\Com.c	  1096      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1097  )
; ..\EAS\BSW\Com\Com.c	  1098  {
; ..\EAS\BSW\Com\Com.c	  1099      PduLengthType IndexData = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  1100      Com_SignalIdType SigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  1101      PduLengthType sigLen = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  1102  
; ..\EAS\BSW\Com\Com.c	  1103      /* Step 1 set all byte to unused byte*/
; ..\EAS\BSW\Com\Com.c	  1104      for(IndexData = (PduLengthType)0; IndexData < COM_CFG_TXPDU_LENGTH(TxIpduId); IndexData++)
	mov	d0,#0
.L1055:
	j	.L32
.L33:

; ..\EAS\BSW\Com\Com.c	  1105      {
; ..\EAS\BSW\Com\Com.c	  1106          ((uint8 *)COM_CFG_TXPDU_DATA_PTR(TxIpduId))[IndexData] = COM_CFG_TXPDU_UNUSED_BYTE(TxIpduId);
	mul	d15,d9,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L1906:
	addsc.a	a15,a15,d0,#0
.L1907:
	movh.a	a2,#@his(ComTxPduCfgTable)
	lea	a2,[a2]@los(ComTxPduCfgTable)
	addsc.a	a2,a2,d15,#0
	ld.bu	d15,[a2]42
.L1908:
	st.b	[a15],d15
.L1909:
	add	d0,#1
.L1056:
	extr.u	d0,d0,#0,#16
.L32:
	mul	d15,d9,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d1,[a15]24
.L1910:
	jlt.u	d0,d1,.L33
.L1911:

; ..\EAS\BSW\Com\Com.c	  1107      }
; ..\EAS\BSW\Com\Com.c	  1108      /* Step 2 init all signals of this pdu*/
; ..\EAS\BSW\Com\Com.c	  1109      for(SigIndex = COM_CFG_TXPDU_SIG_START_NUM(TxIpduId); SigIndex <= COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId); SigIndex++)
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d8,[a15]4
.L1057:
	j	.L34
.L35:

; ..\EAS\BSW\Com\Com.c	  1110      {
; ..\EAS\BSW\Com\Com.c	  1111  #if ((STD_ON == COM_TX_DYN_PDU_SUPPORT) || (STD_ON == COM_TX_U8N_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  1112          sigLen = COM_CFG_TXSIG_LENGTH(SigIndex);
	mul	d15,d8,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d4,[a15]10
.L1059:

; ..\EAS\BSW\Com\Com.c	  1113  #if (STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1114          if(COM_SIG_DYN == COM_CFG_TXSIG_TYPE(SigIndex))
; ..\EAS\BSW\Com\Com.c	  1115          {
; ..\EAS\BSW\Com\Com.c	  1116              sigLen = COM_CFG_TXSIG_INIT_VALUE_LEN(SigIndex);
; ..\EAS\BSW\Com\Com.c	  1117              COM_TXPDU_DYN_LENGTH(TxIpduId) = COM_CFG_TXSIG_START_BYTE_INDEX(SigIndex) + sigLen ;
; ..\EAS\BSW\Com\Com.c	  1118          }
; ..\EAS\BSW\Com\Com.c	  1119  #endif
; ..\EAS\BSW\Com\Com.c	  1120  #endif
; ..\EAS\BSW\Com\Com.c	  1121  
; ..\EAS\BSW\Com\Com.c	  1122          /* copy init value to real buffer*/
; ..\EAS\BSW\Com\Com.c	  1123          COM_CFG_TXSIG_WRITE_SIG_FUN(SigIndex)(COM_CFG_TXSIG_INIT_VALUE_PTR(SigIndex), COM_CFG_TXPDU_DATA_PTR(TxIpduId),  sigLen);
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]32
.L1912:
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a4,[a15]4
.L1913:
	mul	d15,d9,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a5,[a15]20
.L1914:
	calli	a2
.L1060:
	add	d8,#1
.L1058:
	extr.u	d8,d8,#0,#16
.L34:
	mul	d15,d9,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]6
.L1915:
	jge.u	d15,d8,.L35
.L1916:

; ..\EAS\BSW\Com\Com.c	  1124  #if (STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1125          /* Also copy to shadow buffer*/
; ..\EAS\BSW\Com\Com.c	  1126          if(NULL_PTR != COM_CFG_TXSIG_GROUP_TEMP_BUF(SigIndex))
; ..\EAS\BSW\Com\Com.c	  1127          {
; ..\EAS\BSW\Com\Com.c	  1128              COM_CFG_TXSIG_COPY_SIG_FUN(SigIndex)(COM_CFG_TXSIG_INIT_VALUE_PTR(SigIndex), COM_CFG_TXSIG_GROUP_TEMP_BUF(SigIndex),  sigLen);
; ..\EAS\BSW\Com\Com.c	  1129          }
; ..\EAS\BSW\Com\Com.c	  1130  #if (STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1131          if(NULL_PTR != COM_CFG_TXSIG_GROUP_TEMPLENGTH_PTR(SigIndex))
; ..\EAS\BSW\Com\Com.c	  1132          {
; ..\EAS\BSW\Com\Com.c	  1133              *COM_CFG_TXSIG_GROUP_TEMPLENGTH_PTR(SigIndex) = sigLen;
; ..\EAS\BSW\Com\Com.c	  1134          }
; ..\EAS\BSW\Com\Com.c	  1135  #endif
; ..\EAS\BSW\Com\Com.c	  1136  #endif
; ..\EAS\BSW\Com\Com.c	  1137  
; ..\EAS\BSW\Com\Com.c	  1138      }
; ..\EAS\BSW\Com\Com.c	  1139      /* Step 3 clear all update bit*/
; ..\EAS\BSW\Com\Com.c	  1140  #if (STD_ON == COM_TX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1141      Com_ClearUpdateBit(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1142  #endif
; ..\EAS\BSW\Com\Com.c	  1143  
; ..\EAS\BSW\Com\Com.c	  1144  }
	ret
.L920:
	
__Com_InitTxPduValue_function_end:
	.size	Com_InitTxPduValue,__Com_InitTxPduValue_function_end-Com_InitTxPduValue
.L642:
	; End of function
	
	.sdecl	'.text.Com.Com_InitTxPdu',code,cluster('Com_InitTxPdu')
	.sect	'.text.Com.Com_InitTxPdu'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1145  
; ..\EAS\BSW\Com\Com.c	  1146  
; ..\EAS\BSW\Com\Com.c	  1147  
; ..\EAS\BSW\Com\Com.c	  1148  
; ..\EAS\BSW\Com\Com.c	  1149  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1150  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1151  * Function Name: Com_InitTxPdu
; ..\EAS\BSW\Com\Com.c	  1152  *
; ..\EAS\BSW\Com\Com.c	  1153  * Description:   used to Init TxPduRegs, only called when Init
; ..\EAS\BSW\Com\Com.c	  1154  *
; ..\EAS\BSW\Com\Com.c	  1155  * Inputs:         TxIpduId,isStartFlag
; ..\EAS\BSW\Com\Com.c	  1156  *
; ..\EAS\BSW\Com\Com.c	  1157  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1158  *
; ..\EAS\BSW\Com\Com.c	  1159  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1160  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1161  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1162  STATIC FUNC(void, COM_CODE) Com_InitTxPdu
; Function Com_InitTxPdu
.L338:
Com_InitTxPdu:	.type	func
	mov	e8,d5,d4
.L1062:

; ..\EAS\BSW\Com\Com.c	  1163  (
; ..\EAS\BSW\Com\Com.c	  1164      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  1165      boolean   isStartFlag
; ..\EAS\BSW\Com\Com.c	  1166  )
; ..\EAS\BSW\Com\Com.c	  1167  {
; ..\EAS\BSW\Com\Com.c	  1168  
; ..\EAS\BSW\Com\Com.c	  1169      /*TxMode Init*/
; ..\EAS\BSW\Com\Com.c	  1170  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1171      COM_TXPDU_TMS_FLAG(TxIpduId) = TRUE;
; ..\EAS\BSW\Com\Com.c	  1172      Com_SendSwitchTxModeFlag[TxIpduId] = COM_NO_TXMODE_SWITCH;
; ..\EAS\BSW\Com\Com.c	  1173  #endif
; ..\EAS\BSW\Com\Com.c	  1174      COM_TXPDU_TXMODE_PTR(TxIpduId) = COM_CFG_TXPDU_TXMODE_TRUE_PTR(TxIpduId);
	mul	d15,d8,#12
.L1063:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a2,a15,d15,#0
.L1064:
	mul	d0,d8,#44
.L1065:
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.a	a15,[a15]28
.L1885:
	st.a	[a2]8,a15
.L1886:

; ..\EAS\BSW\Com\Com.c	  1175  
; ..\EAS\BSW\Com\Com.c	  1176  
; ..\EAS\BSW\Com\Com.c	  1177      /*Timer Init*/
; ..\EAS\BSW\Com\Com.c	  1178      COM_TXPDU_PERIOD(TxIpduId) = COM_TIMER_STOP_VAL;/* tx period will be Init in Tx Main */
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1887:
	mov.u	d0,#65535
.L1888:
	st.h	[a15],d0
.L1889:

; ..\EAS\BSW\Com\Com.c	  1179      COM_TXPDU_TXTIME_OFFSET(TxIpduId) = COM_TXPDU_TXMODE_PTR(TxIpduId)->TxModeTimeOffset;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a2,a15,d15,#0
.L1890:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L1891:
	ld.hu	d1,[a15]4
.L1892:
	st.h	[a2]2,d1
.L1893:

; ..\EAS\BSW\Com\Com.c	  1180  
; ..\EAS\BSW\Com\Com.c	  1181  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  1182      COM_TXPDU_MIN_DELAY_TIMER(TxIpduId) = COM_TIMER_STOP_VAL;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1894:
	st.h	[a15]4,d0
.L1895:

; ..\EAS\BSW\Com\Com.c	  1183      COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId) = FALSE;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1896:
	mov	d15,#0
.L1897:
	st.b	[a15]6,d15
.L1898:

; ..\EAS\BSW\Com\Com.c	  1184  #endif
; ..\EAS\BSW\Com\Com.c	  1185  
; ..\EAS\BSW\Com\Com.c	  1186  #if (STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  1187      COM_TXPDU_REP_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1188      COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1189      COM_TXPDU_REQ_CONF_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1190  #endif
; ..\EAS\BSW\Com\Com.c	  1191  
; ..\EAS\BSW\Com\Com.c	  1192  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  1193      Com_PDUTrigRepFlag[TxIpduId] = (uint8)0;
	movh.a	a15,#@his(Com_PDUTrigRepFlag)
	lea	a15,[a15]@los(Com_PDUTrigRepFlag)
.L1066:
	addsc.a	a15,a15,d8,#0
.L1067:
	st.b	[a15],d15
.L1899:

; ..\EAS\BSW\Com\Com.c	  1194  #endif
; ..\EAS\BSW\Com\Com.c	  1195  
; ..\EAS\BSW\Com\Com.c	  1196  #if(STD_ON ==     COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1197      /* dont need to check if txto is enable for this pdu*/
; ..\EAS\BSW\Com\Com.c	  1198      COM_TXPDU_TIMEOUT(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1199  #endif
; ..\EAS\BSW\Com\Com.c	  1200  
; ..\EAS\BSW\Com\Com.c	  1201  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  1202      COM_TXPDU_TP_INDEX(TxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  1203  #endif
; ..\EAS\BSW\Com\Com.c	  1204  
; ..\EAS\BSW\Com\Com.c	  1205  #if(STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1206      COM_TXPDU_IFACTIVE_FLAG(TxIpduId) = (uint32)0;
; ..\EAS\BSW\Com\Com.c	  1207  #endif
; ..\EAS\BSW\Com\Com.c	  1208  
; ..\EAS\BSW\Com\Com.c	  1209  
; ..\EAS\BSW\Com\Com.c	  1210      /*Pdu Data Length Init*/
; ..\EAS\BSW\Com\Com.c	  1211      Com_InitTxPduValue(TxIpduId);
	call	Com_InitTxPduValue
.L1061:

; ..\EAS\BSW\Com\Com.c	  1212  
; ..\EAS\BSW\Com\Com.c	  1213  
; ..\EAS\BSW\Com\Com.c	  1214  #if(STD_ON == COM_TriggerIPDUSend_API)
; ..\EAS\BSW\Com\Com.c	  1215      Com_TriggerPDUSendFlag[TxIpduId] = FALSE;
	movh.a	a15,#@his(Com_TriggerPDUSendFlag)
	lea	a15,[a15]@los(Com_TriggerPDUSendFlag)
.L1068:
	addsc.a	a15,a15,d8,#0
.L1069:
	st.b	[a15],d15
.L1900:

; ..\EAS\BSW\Com\Com.c	  1216  #endif
; ..\EAS\BSW\Com\Com.c	  1217  
; ..\EAS\BSW\Com\Com.c	  1218      if(FALSE == isStartFlag)
; ..\EAS\BSW\Com\Com.c	  1219      {
; ..\EAS\BSW\Com\Com.c	  1220          Com_TxPduState[TxIpduId] = COM_TXPDU_STOP;/*SWS_Com_444 all group stop at Init*/
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1070:
	addsc.a	a15,a15,d8,#0
.L1071:
	ne	d15,d9,#0
.L1072:
	st.b	[a15],d15
.L1901:

; ..\EAS\BSW\Com\Com.c	  1221      }
; ..\EAS\BSW\Com\Com.c	  1222      else
; ..\EAS\BSW\Com\Com.c	  1223      {
; ..\EAS\BSW\Com\Com.c	  1224          Com_TxPduState[TxIpduId] = COM_TXPDU_START_IDLE;/*SWS_Com_840*/
; ..\EAS\BSW\Com\Com.c	  1225      }
; ..\EAS\BSW\Com\Com.c	  1226  
; ..\EAS\BSW\Com\Com.c	  1227  
; ..\EAS\BSW\Com\Com.c	  1228  
; ..\EAS\BSW\Com\Com.c	  1229  }
	ret
.L917:
	
__Com_InitTxPdu_function_end:
	.size	Com_InitTxPdu,__Com_InitTxPdu_function_end-Com_InitTxPdu
.L637:
	; End of function
	
	.sdecl	'.text.Com.Com_SwitchTxPduMode',code,cluster('Com_SwitchTxPduMode')
	.sect	'.text.Com.Com_SwitchTxPduMode'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1230  
; ..\EAS\BSW\Com\Com.c	  1231  
; ..\EAS\BSW\Com\Com.c	  1232  
; ..\EAS\BSW\Com\Com.c	  1233  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1234  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1235  * Function Name: Com_SwitchTxPduMode
; ..\EAS\BSW\Com\Com.c	  1236  *
; ..\EAS\BSW\Com\Com.c	  1237  * Description:   used to Init TxPduRegs when pdu mode switch,
; ..\EAS\BSW\Com\Com.c	  1238  *
; ..\EAS\BSW\Com\Com.c	  1239  * Inputs:          TxIpduId,isStartFlag,InitFlag
; ..\EAS\BSW\Com\Com.c	  1240  *
; ..\EAS\BSW\Com\Com.c	  1241  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1242  *
; ..\EAS\BSW\Com\Com.c	  1243  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1244  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1245  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1246  #if(STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	  1247  STATIC FUNC(void, COM_CODE) Com_SwitchTxPduMode
; Function Com_SwitchTxPduMode
.L340:
Com_SwitchTxPduMode:	.type	func
	mov	e8,d5,d4
.L1921:

; ..\EAS\BSW\Com\Com.c	  1248  (
; ..\EAS\BSW\Com\Com.c	  1249      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  1250      boolean   isStartFlag,
; ..\EAS\BSW\Com\Com.c	  1251      boolean   InitFlag
; ..\EAS\BSW\Com\Com.c	  1252  )
; ..\EAS\BSW\Com\Com.c	  1253  {
; ..\EAS\BSW\Com\Com.c	  1254  
; ..\EAS\BSW\Com\Com.c	  1255  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  1256      COM_TXPDU_TP_INDEX(TxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  1257  #endif
; ..\EAS\BSW\Com\Com.c	  1258  
; ..\EAS\BSW\Com\Com.c	  1259  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  1260      Com_PDUTrigRepFlag[TxIpduId] = (uint8)0;
	movh.a	a15,#@his(Com_PDUTrigRepFlag)
	lea	a15,[a15]@los(Com_PDUTrigRepFlag)
.L1073:
	addsc.a	a15,a15,d8,#0
.L1074:
	mov	d0,#0
.L1922:
	st.b	[a15],d0
.L1075:

; ..\EAS\BSW\Com\Com.c	  1261  #endif
; ..\EAS\BSW\Com\Com.c	  1262  
; ..\EAS\BSW\Com\Com.c	  1263      /*Timer Init
; ..\EAS\BSW\Com\Com.c	  1264        Start->Stop, Stop-Start,timers will all stop.
; ..\EAS\BSW\Com\Com.c	  1265        except txOffset timer, will keep unchange, until restart
; ..\EAS\BSW\Com\Com.c	  1266  
; ..\EAS\BSW\Com\Com.c	  1267        data and length
; ..\EAS\BSW\Com\Com.c	  1268        keep unchange until restart with init
; ..\EAS\BSW\Com\Com.c	  1269  
; ..\EAS\BSW\Com\Com.c	  1270        trigger flag and rep num must reset
; ..\EAS\BSW\Com\Com.c	  1271  
; ..\EAS\BSW\Com\Com.c	  1272      */
; ..\EAS\BSW\Com\Com.c	  1273      COM_TXPDU_PERIOD(TxIpduId) = COM_TIMER_STOP_VAL;/* tx period will be Init in Tx Main */
	mul	d15,d8,#12
.L1076:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1923:
	mov.u	d1,#65535
.L1924:
	st.h	[a15],d1
.L1925:

; ..\EAS\BSW\Com\Com.c	  1274      /* offset will reset when pdu restart, so that, the pdu will send like init SWS_Com_00222 -4*/
; ..\EAS\BSW\Com\Com.c	  1275      COM_TXPDU_TXTIME_OFFSET(TxIpduId) = COM_TXPDU_TXMODE_PTR(TxIpduId)->TxModeTimeOffset;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a2,a15,d15,#0
.L1926:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L1927:
	ld.hu	d2,[a15]4
.L1928:
	st.h	[a2]2,d2
.L1929:

; ..\EAS\BSW\Com\Com.c	  1276  
; ..\EAS\BSW\Com\Com.c	  1277  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)/*SWS_Com_00787-1*/
; ..\EAS\BSW\Com\Com.c	  1278      COM_TXPDU_MIN_DELAY_TIMER(TxIpduId) = COM_TIMER_STOP_VAL;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1930:
	st.h	[a15]4,d1
.L1931:

; ..\EAS\BSW\Com\Com.c	  1279      COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId) = FALSE;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1932:
	st.b	[a15]6,d0
.L1933:

; ..\EAS\BSW\Com\Com.c	  1280  #endif
; ..\EAS\BSW\Com\Com.c	  1281  
; ..\EAS\BSW\Com\Com.c	  1282  #if (STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  1283      COM_TXPDU_REP_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1284      COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1285      COM_TXPDU_REQ_CONF_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1286  #endif
; ..\EAS\BSW\Com\Com.c	  1287  
; ..\EAS\BSW\Com\Com.c	  1288  
; ..\EAS\BSW\Com\Com.c	  1289  #if(STD_ON ==     COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1290      /* dont need to check if txto is enable for this pdu*/
; ..\EAS\BSW\Com\Com.c	  1291      COM_TXPDU_TIMEOUT(TxIpduId) = COM_TIMER_STOP_VAL;/*SWS_Com_00787-2*/
; ..\EAS\BSW\Com\Com.c	  1292  #endif
; ..\EAS\BSW\Com\Com.c	  1293  
; ..\EAS\BSW\Com\Com.c	  1294  
; ..\EAS\BSW\Com\Com.c	  1295  #if(STD_ON == COM_TriggerIPDUSend_API)
; ..\EAS\BSW\Com\Com.c	  1296      Com_TriggerPDUSendFlag[TxIpduId] = FALSE;
	movh.a	a15,#@his(Com_TriggerPDUSendFlag)
	lea	a15,[a15]@los(Com_TriggerPDUSendFlag)
.L1077:
	addsc.a	a15,a15,d8,#0
.L1078:
	st.b	[a15],d0
.L1079:

; ..\EAS\BSW\Com\Com.c	  1297  #endif
; ..\EAS\BSW\Com\Com.c	  1298  
; ..\EAS\BSW\Com\Com.c	  1299  
; ..\EAS\BSW\Com\Com.c	  1300  #if((STD_ON == COM_TX_FILTER_SUPPORT) && (COM_MAX_FILTER_OCCURRENCE_NUM > 0))
; ..\EAS\BSW\Com\Com.c	  1301      Com_InitTxOccOfPdu(TxIpduId);/*SWS_Com_00787-4*/
; ..\EAS\BSW\Com\Com.c	  1302  #endif
; ..\EAS\BSW\Com\Com.c	  1303  
; ..\EAS\BSW\Com\Com.c	  1304      /* if InitFlag = false, the value write when pdu stop will keep ,alsp the updatebit and Com_SendSwitchTxModeFlag will keep
; ..\EAS\BSW\Com\Com.c	  1305         so that the TMS will be caculated in next mainfunctiontx
; ..\EAS\BSW\Com\Com.c	  1306      */
; ..\EAS\BSW\Com\Com.c	  1307  
; ..\EAS\BSW\Com\Com.c	  1308      if((TRUE == isStartFlag) && (TRUE == InitFlag))
	jeq	d9,#0,.L36
.L1080:
	jne	d6,#1,.L37
.L1934:

; ..\EAS\BSW\Com\Com.c	  1309      {
; ..\EAS\BSW\Com\Com.c	  1310          /*TxMode Init*/
; ..\EAS\BSW\Com\Com.c	  1311  
; ..\EAS\BSW\Com\Com.c	  1312  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1313          COM_TXPDU_TMS_FLAG(TxIpduId) = TRUE;
; ..\EAS\BSW\Com\Com.c	  1314          Com_SendSwitchTxModeFlag[TxIpduId] = COM_NO_TXMODE_SWITCH;
; ..\EAS\BSW\Com\Com.c	  1315  #endif
; ..\EAS\BSW\Com\Com.c	  1316          COM_TXPDU_TXMODE_PTR(TxIpduId) = COM_CFG_TXPDU_TXMODE_TRUE_PTR(TxIpduId);
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a2,a15,d15,#0
.L1081:
	mul	d15,d8,#44
.L1082:
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]28
.L1935:
	st.a	[a2]8,a15
.L1936:

; ..\EAS\BSW\Com\Com.c	  1317  
; ..\EAS\BSW\Com\Com.c	  1318          /*Pdu Data Length Init SWS_Com_00222 -1-2-3*/
; ..\EAS\BSW\Com\Com.c	  1319          Com_InitTxPduValue(TxIpduId);
	call	Com_InitTxPduValue
.L37:
.L36:

; ..\EAS\BSW\Com\Com.c	  1320  
; ..\EAS\BSW\Com\Com.c	  1321      }
; ..\EAS\BSW\Com\Com.c	  1322  
; ..\EAS\BSW\Com\Com.c	  1323      if(FALSE == isStartFlag)
; ..\EAS\BSW\Com\Com.c	  1324      {
; ..\EAS\BSW\Com\Com.c	  1325          Com_TxPduState[TxIpduId] = COM_TXPDU_STOP;/*SWS_Com_444 all group stop at Init*/
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1083:
	addsc.a	a15,a15,d8,#0
.L1084:
	ne	d15,d9,#0
.L1085:
	st.b	[a15],d15
.L1937:

; ..\EAS\BSW\Com\Com.c	  1326      }
; ..\EAS\BSW\Com\Com.c	  1327      else
; ..\EAS\BSW\Com\Com.c	  1328      {
; ..\EAS\BSW\Com\Com.c	  1329          Com_TxPduState[TxIpduId] = COM_TXPDU_START_IDLE;/*SWS_Com_114*/
; ..\EAS\BSW\Com\Com.c	  1330      }
; ..\EAS\BSW\Com\Com.c	  1331  
; ..\EAS\BSW\Com\Com.c	  1332  }
	ret
.L925:
	
__Com_SwitchTxPduMode_function_end:
	.size	Com_SwitchTxPduMode,__Com_SwitchTxPduMode_function_end-Com_SwitchTxPduMode
.L647:
	; End of function
	
	.sdecl	'.text.Com.Com_CbkTxErrAck_PDU',code,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.text.Com.Com_CbkTxErrAck_PDU'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1333  
; ..\EAS\BSW\Com\Com.c	  1334  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1335  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1336  * Function Name: Com_CbkTxErrAck_PDU
; ..\EAS\BSW\Com\Com.c	  1337  *
; ..\EAS\BSW\Com\Com.c	  1338  * Description:   Called when Pdu is Stoped, but msg is onGoing
; ..\EAS\BSW\Com\Com.c	  1339  *
; ..\EAS\BSW\Com\Com.c	  1340  * Inputs:        TxIpduId
; ..\EAS\BSW\Com\Com.c	  1341  *
; ..\EAS\BSW\Com\Com.c	  1342  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1343  *
; ..\EAS\BSW\Com\Com.c	  1344  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1345  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1346  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1347  STATIC FUNC(void, COM_CODE) Com_CbkTxErrAck_PDU
; Function Com_CbkTxErrAck_PDU
.L342:
Com_CbkTxErrAck_PDU:	.type	func

; ..\EAS\BSW\Com\Com.c	  1348  (
; ..\EAS\BSW\Com\Com.c	  1349      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1350  )
; ..\EAS\BSW\Com\Com.c	  1351  {
; ..\EAS\BSW\Com\Com.c	  1352  
; ..\EAS\BSW\Com\Com.c	  1353      Com_SignalIdType TxSigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  1354  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1355      Com_SignalGroupIdType SignalGroupId = (Com_SignalGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  1356  #endif
; ..\EAS\BSW\Com\Com.c	  1357  
; ..\EAS\BSW\Com\Com.c	  1358  
; ..\EAS\BSW\Com\Com.c	  1359      for(TxSigId = COM_CFG_TXPDU_SIG_START_NUM(TxIpduId);
	mul	d15,d4,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d8,[a15]4
.L1086:

; ..\EAS\BSW\Com\Com.c	  1360              TxSigId <= COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1361              TxSigId++)
; ..\EAS\BSW\Com\Com.c	  1362      {
; ..\EAS\BSW\Com\Com.c	  1363          if(NULL_PTR != COM_CFG_TXSIG_TXERR_FUN(TxSigId))
	mov.a	a12,#0
.L1942:
	mov	d9,d15
.L1943:
	j	.L38
.L39:
	mul	d15,d8,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L1944:
	jeq.a	a12,a15,.L40
.L1945:

; ..\EAS\BSW\Com\Com.c	  1364          {
; ..\EAS\BSW\Com\Com.c	  1365              COM_CFG_TXSIG_TXERR_FUN(TxSigId)();
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L1946:
	calli	a15
.L40:
	add	d8,#1
.L1087:
	extr.u	d8,d8,#0,#16
.L38:
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d9,#0
	ld.hu	d15,[a15]6
.L1947:
	jge.u	d15,d8,.L39
.L1948:

; ..\EAS\BSW\Com\Com.c	  1366          }
; ..\EAS\BSW\Com\Com.c	  1367  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1368          if(TRUE == COM_CFG_TXSIG_IS_GROUP_SIGNAL(TxSigId))
; ..\EAS\BSW\Com\Com.c	  1369          {
; ..\EAS\BSW\Com\Com.c	  1370              SignalGroupId = COM_CFG_TXSIG_GET_SIGGROUPID(TxSigId);
; ..\EAS\BSW\Com\Com.c	  1371              /* set sigId to the end of this group, 1 group only ack once */
; ..\EAS\BSW\Com\Com.c	  1372              TxSigId = COM_CFG_TXSIGGRP_SIGSTOP(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  1373          }
; ..\EAS\BSW\Com\Com.c	  1374  #endif
; ..\EAS\BSW\Com\Com.c	  1375  
; ..\EAS\BSW\Com\Com.c	  1376  
; ..\EAS\BSW\Com\Com.c	  1377      }
; ..\EAS\BSW\Com\Com.c	  1378  }
	ret
.L929:
	
__Com_CbkTxErrAck_PDU_function_end:
	.size	Com_CbkTxErrAck_PDU,__Com_CbkTxErrAck_PDU_function_end-Com_CbkTxErrAck_PDU
.L652:
	; End of function
	
	.sdecl	'.text.Com.Com_TxInit',code,cluster('Com_TxInit')
	.sect	'.text.Com.Com_TxInit'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1379  
; ..\EAS\BSW\Com\Com.c	  1380  
; ..\EAS\BSW\Com\Com.c	  1381  
; ..\EAS\BSW\Com\Com.c	  1382  
; ..\EAS\BSW\Com\Com.c	  1383  
; ..\EAS\BSW\Com\Com.c	  1384  #endif/* #if(STD_ON == COM_IPDU_GROUP_FUN)*/
; ..\EAS\BSW\Com\Com.c	  1385  
; ..\EAS\BSW\Com\Com.c	  1386  
; ..\EAS\BSW\Com\Com.c	  1387  
; ..\EAS\BSW\Com\Com.c	  1388  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1389  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1390  * Function Name: Com_TxInit
; ..\EAS\BSW\Com\Com.c	  1391  *
; ..\EAS\BSW\Com\Com.c	  1392  * Description:   Tx initialize.
; ..\EAS\BSW\Com\Com.c	  1393  *
; ..\EAS\BSW\Com\Com.c	  1394  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1395  *
; ..\EAS\BSW\Com\Com.c	  1396  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1397  *
; ..\EAS\BSW\Com\Com.c	  1398  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1399  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  1400  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1401  STATIC FUNC(void, COM_CODE) Com_TxInit
; Function Com_TxInit
.L344:
Com_TxInit:	.type	func

; ..\EAS\BSW\Com\Com.c	  1402  (
; ..\EAS\BSW\Com\Com.c	  1403      void
; ..\EAS\BSW\Com\Com.c	  1404  )
; ..\EAS\BSW\Com\Com.c	  1405  {
; ..\EAS\BSW\Com\Com.c	  1406  
; ..\EAS\BSW\Com\Com.c	  1407      PduIdType IpduIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  1408  
; ..\EAS\BSW\Com\Com.c	  1409      for(IpduIndex = (PduIdType)0; IpduIndex < COM_TXPDU_NUM; IpduIndex++)
	mov	d8,#0
.L1088:
	mov	d9,#46
.L1953:
	j	.L41
.L42:

; ..\EAS\BSW\Com\Com.c	  1410      {
; ..\EAS\BSW\Com\Com.c	  1411  #if (STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	  1412          if(TRUE == COM_CFG_TXPDUGROUP_FLAG(IpduIndex))
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]8
.L1954:
	jne	d15,#1,.L43
.L1955:

; ..\EAS\BSW\Com\Com.c	  1413          {
; ..\EAS\BSW\Com\Com.c	  1414              Com_InitTxPdu(IpduIndex, FALSE);
	mov	d5,#0
.L1956:
	j	.L44
.L43:

; ..\EAS\BSW\Com\Com.c	  1415          }
; ..\EAS\BSW\Com\Com.c	  1416          else
; ..\EAS\BSW\Com\Com.c	  1417  #endif
; ..\EAS\BSW\Com\Com.c	  1418          {
; ..\EAS\BSW\Com\Com.c	  1419              Com_InitTxPdu(IpduIndex, TRUE);
	mov	d5,#1
.L44:
	mov	d4,d8
.L1089:
	call	Com_InitTxPdu
.L1090:
	add	d8,#1
.L41:
	jlt.u	d8,d9,.L42
.L1957:

; ..\EAS\BSW\Com\Com.c	  1420          }
; ..\EAS\BSW\Com\Com.c	  1421      }
; ..\EAS\BSW\Com\Com.c	  1422  }
	ret
.L932:
	
__Com_TxInit_function_end:
	.size	Com_TxInit,__Com_TxInit_function_end-Com_TxInit
.L657:
	; End of function
	
	.sdecl	'.text.Com.Com_HandleDirect',code,cluster('Com_HandleDirect')
	.sect	'.text.Com.Com_HandleDirect'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1423  
; ..\EAS\BSW\Com\Com.c	  1424  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1425  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1426  * Function Name: Com_GetTMSResult
; ..\EAS\BSW\Com\Com.c	  1427  *
; ..\EAS\BSW\Com\Com.c	  1428  * Description:   get tms result when tx sig updated
; ..\EAS\BSW\Com\Com.c	  1429  *
; ..\EAS\BSW\Com\Com.c	  1430  * Inputs:        TxIpduId: Ipdu Id
; ..\EAS\BSW\Com\Com.c	  1431  *
; ..\EAS\BSW\Com\Com.c	  1432  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	  1433  *
; ..\EAS\BSW\Com\Com.c	  1434  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1435  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1436  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1437  #if (STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1438  STATIC FUNC(boolean, COM_CODE) Com_GetTMSResult
; ..\EAS\BSW\Com\Com.c	  1439  (
; ..\EAS\BSW\Com\Com.c	  1440      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1441  )
; ..\EAS\BSW\Com\Com.c	  1442  {
; ..\EAS\BSW\Com\Com.c	  1443  
; ..\EAS\BSW\Com\Com.c	  1444      Com_SignalIdType Index;
; ..\EAS\BSW\Com\Com.c	  1445      boolean Result = FALSE;
; ..\EAS\BSW\Com\Com.c	  1446  
; ..\EAS\BSW\Com\Com.c	  1447      for(Index = (Com_SignalIdType)0; Index < COM_CFG_TXPDU_FILTER_SIZE(TxIpduId); Index++)
; ..\EAS\BSW\Com\Com.c	  1448      {
; ..\EAS\BSW\Com\Com.c	  1449          if((uint8)0 != COM_CFG_TXPDU_FILTER_PTR(TxIpduId)[Index])
; ..\EAS\BSW\Com\Com.c	  1450          {
; ..\EAS\BSW\Com\Com.c	  1451              Result = TRUE;
; ..\EAS\BSW\Com\Com.c	  1452              break;
; ..\EAS\BSW\Com\Com.c	  1453          }
; ..\EAS\BSW\Com\Com.c	  1454      }
; ..\EAS\BSW\Com\Com.c	  1455  
; ..\EAS\BSW\Com\Com.c	  1456      return Result;
; ..\EAS\BSW\Com\Com.c	  1457  }
; ..\EAS\BSW\Com\Com.c	  1458  
; ..\EAS\BSW\Com\Com.c	  1459  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1460  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1461  * Function Name: Com_SelectPduTxMode
; ..\EAS\BSW\Com\Com.c	  1462  *
; ..\EAS\BSW\Com\Com.c	  1463  * Description:
; ..\EAS\BSW\Com\Com.c	  1464  *
; ..\EAS\BSW\Com\Com.c	  1465  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1466  *
; ..\EAS\BSW\Com\Com.c	  1467  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1468  *
; ..\EAS\BSW\Com\Com.c	  1469  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1470  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1471  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1472  STATIC FUNC(void, COM_CODE) Com_SelectPduTxMode
; ..\EAS\BSW\Com\Com.c	  1473  (
; ..\EAS\BSW\Com\Com.c	  1474      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  1475      uint8 TxSendSwitchTxModeFlag
; ..\EAS\BSW\Com\Com.c	  1476  )
; ..\EAS\BSW\Com\Com.c	  1477  {
; ..\EAS\BSW\Com\Com.c	  1478  
; ..\EAS\BSW\Com\Com.c	  1479      boolean CurrentTMSResult = FALSE;
; ..\EAS\BSW\Com\Com.c	  1480      boolean result = FALSE;
; ..\EAS\BSW\Com\Com.c	  1481  
; ..\EAS\BSW\Com\Com.c	  1482      if(COM_NO_TXMODE_SWITCH != TxSendSwitchTxModeFlag)
; ..\EAS\BSW\Com\Com.c	  1483      {
; ..\EAS\BSW\Com\Com.c	  1484          if(COM_TXMODE_SWITCH_SEND_SIGNAL == TxSendSwitchTxModeFlag)
; ..\EAS\BSW\Com\Com.c	  1485          {
; ..\EAS\BSW\Com\Com.c	  1486              CurrentTMSResult = Com_GetTMSResult(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1487          }
; ..\EAS\BSW\Com\Com.c	  1488  
; ..\EAS\BSW\Com\Com.c	  1489  
; ..\EAS\BSW\Com\Com.c	  1490          if(((COM_TXMODE_SWITCH_SEND_SIGNAL == TxSendSwitchTxModeFlag)
; ..\EAS\BSW\Com\Com.c	  1491                  && (FALSE == CurrentTMSResult))
; ..\EAS\BSW\Com\Com.c	  1492                  || (COM_TXMODE_SWITCH_API_FALSE == TxSendSwitchTxModeFlag))
; ..\EAS\BSW\Com\Com.c	  1493          {
; ..\EAS\BSW\Com\Com.c	  1494              /* SWS_Com_799 TMS true->false*/
; ..\EAS\BSW\Com\Com.c	  1495              if(TRUE == COM_TXPDU_TMS_FLAG(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1496              {
; ..\EAS\BSW\Com\Com.c	  1497                  COM_TXPDU_TXMODE_PTR(TxIpduId) = COM_CFG_TXPDU_TXMODE_FALSE_PTR(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1498                  COM_TXPDU_TMS_FLAG(TxIpduId) = FALSE;
; ..\EAS\BSW\Com\Com.c	  1499                  result = TRUE;
; ..\EAS\BSW\Com\Com.c	  1500              }
; ..\EAS\BSW\Com\Com.c	  1501          }
; ..\EAS\BSW\Com\Com.c	  1502          else
; ..\EAS\BSW\Com\Com.c	  1503          {
; ..\EAS\BSW\Com\Com.c	  1504              /* SWS_Com_032 TMS false->true*/
; ..\EAS\BSW\Com\Com.c	  1505              if(FALSE == COM_TXPDU_TMS_FLAG(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1506              {
; ..\EAS\BSW\Com\Com.c	  1507                  COM_TXPDU_TXMODE_PTR(TxIpduId) = COM_CFG_TXPDU_TXMODE_TRUE_PTR(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1508                  COM_TXPDU_TMS_FLAG(TxIpduId) = TRUE;
; ..\EAS\BSW\Com\Com.c	  1509                  result = TRUE;
; ..\EAS\BSW\Com\Com.c	  1510              }
; ..\EAS\BSW\Com\Com.c	  1511          }
; ..\EAS\BSW\Com\Com.c	  1512      }
; ..\EAS\BSW\Com\Com.c	  1513  
; ..\EAS\BSW\Com\Com.c	  1514      /* Mode Switch, reset all mode AttriButes*/
; ..\EAS\BSW\Com\Com.c	  1515      /* should not clear occ counter here, as it may cause mode swith back*/
; ..\EAS\BSW\Com\Com.c	  1516      /* dont clear Com_PDUTrigRepFlag as the request need be process at  once after mode switch */
; ..\EAS\BSW\Com\Com.c	  1517  
; ..\EAS\BSW\Com\Com.c	  1518      if(TRUE == result)
; ..\EAS\BSW\Com\Com.c	  1519      {
; ..\EAS\BSW\Com\Com.c	  1520          COM_TXPDU_PERIOD(TxIpduId) = COM_TIMER_STOP_VAL;/* STOP Val will cause period Msg tx at once in this cycle */
; ..\EAS\BSW\Com\Com.c	  1521          COM_TXPDU_TXTIME_OFFSET(TxIpduId) = COM_TXPDU_TXMODE_PTR(TxIpduId)->TxModeTimeOffset; /*SWS_Com_00495 set new offset as mode may be changed in offset time segment*/
; ..\EAS\BSW\Com\Com.c	  1522  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  1523          /*COM_TXPDU_MIN_DELAY_TIMER(TxIpduId) = COM_TIMER_STOP_VAL;  do not reset mindelay when mode switch SWS_Com_00495*/
; ..\EAS\BSW\Com\Com.c	  1524          COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId) = FALSE;
; ..\EAS\BSW\Com\Com.c	  1525  
; ..\EAS\BSW\Com\Com.c	  1526  #endif
; ..\EAS\BSW\Com\Com.c	  1527  
; ..\EAS\BSW\Com\Com.c	  1528  #if (STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  1529          COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1530          COM_TXPDU_REP_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1531          COM_TXPDU_REQ_CONF_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1532  #endif
; ..\EAS\BSW\Com\Com.c	  1533  
; ..\EAS\BSW\Com\Com.c	  1534  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1535          COM_TXPDU_TIMEOUT(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1536  #endif
; ..\EAS\BSW\Com\Com.c	  1537  
; ..\EAS\BSW\Com\Com.c	  1538  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  1539          COM_TXPDU_TP_INDEX(TxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  1540  #endif
; ..\EAS\BSW\Com\Com.c	  1541          Com_TxPduState[TxIpduId] = COM_TXPDU_START_IDLE;/* return idle if state is busy or RETX, SWS_Com_00773 is not affected by transmission mode changes.*/
; ..\EAS\BSW\Com\Com.c	  1542  
; ..\EAS\BSW\Com\Com.c	  1543  
; ..\EAS\BSW\Com\Com.c	  1544      }
; ..\EAS\BSW\Com\Com.c	  1545  }
; ..\EAS\BSW\Com\Com.c	  1546  #endif/*#if (STD_ON == COM_TX_FILTER_SUPPORT)*/
; ..\EAS\BSW\Com\Com.c	  1547  
; ..\EAS\BSW\Com\Com.c	  1548  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1549  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1550  * Function Name: Com_StartTxDeadlineMotitor
; ..\EAS\BSW\Com\Com.c	  1551  *
; ..\EAS\BSW\Com\Com.c	  1552  * Description:   start deadlne monitor when sendreq is set
; ..\EAS\BSW\Com\Com.c	  1553  *
; ..\EAS\BSW\Com\Com.c	  1554  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1555  *
; ..\EAS\BSW\Com\Com.c	  1556  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1557  *
; ..\EAS\BSW\Com\Com.c	  1558  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1559  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1560  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1561  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1562  STATIC FUNC(void, COM_CODE) Com_StartTxDeadlineMotitor
; ..\EAS\BSW\Com\Com.c	  1563  (
; ..\EAS\BSW\Com\Com.c	  1564      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  1565      boolean needRestartTimer
; ..\EAS\BSW\Com\Com.c	  1566  )
; ..\EAS\BSW\Com\Com.c	  1567  {
; ..\EAS\BSW\Com\Com.c	  1568      if(TRUE == COM_CFG_TXPDU_TIMEOUT_MONITOR_FLAG(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1569      {
; ..\EAS\BSW\Com\Com.c	  1570          if((COM_TIMER_STOP_VAL == COM_TXPDU_TIMEOUT(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1571                  || (TRUE == needRestartTimer))
; ..\EAS\BSW\Com\Com.c	  1572          {
; ..\EAS\BSW\Com\Com.c	  1573              COM_TXPDU_TIMEOUT(TxIpduId) = COM_CFG_TXPDU_PERIOD_TIMEOUT(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1574          }
; ..\EAS\BSW\Com\Com.c	  1575      }
; ..\EAS\BSW\Com\Com.c	  1576  
; ..\EAS\BSW\Com\Com.c	  1577  }
; ..\EAS\BSW\Com\Com.c	  1578  #endif
; ..\EAS\BSW\Com\Com.c	  1579  
; ..\EAS\BSW\Com\Com.c	  1580  
; ..\EAS\BSW\Com\Com.c	  1581  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1582  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1583  * Function Name: Com_HandleDirect
; ..\EAS\BSW\Com\Com.c	  1584  *
; ..\EAS\BSW\Com\Com.c	  1585  * Description:   process the tx Msg in Direct Mode
; ..\EAS\BSW\Com\Com.c	  1586  *
; ..\EAS\BSW\Com\Com.c	  1587  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1588  *
; ..\EAS\BSW\Com\Com.c	  1589  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1590  *
; ..\EAS\BSW\Com\Com.c	  1591  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1592  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1593  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1594  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  1595  STATIC FUNC(uint8, COM_CODE) Com_HandleDirect
; Function Com_HandleDirect
.L346:
Com_HandleDirect:	.type	func

; ..\EAS\BSW\Com\Com.c	  1596  (
; ..\EAS\BSW\Com\Com.c	  1597      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1598  )
; ..\EAS\BSW\Com\Com.c	  1599  {
; ..\EAS\BSW\Com\Com.c	  1600      uint8 result = COM_EVENT_TX_NONE;
	mov	d2,#0
.L1091:

; ..\EAS\BSW\Com\Com.c	  1601  
; ..\EAS\BSW\Com\Com.c	  1602      if(COM_TRIGGER == Com_PDUTrigRepFlag[TxIpduId])
	movh.a	a15,#@his(Com_PDUTrigRepFlag)
	lea	a15,[a15]@los(Com_PDUTrigRepFlag)
.L1962:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1963:
	jne	d15,#1,.L45
.L1964:

; ..\EAS\BSW\Com\Com.c	  1603      {
; ..\EAS\BSW\Com\Com.c	  1604          result = COM_EVENT_TX_ONCE;
	mov	d2,#2
.L45:

; ..\EAS\BSW\Com\Com.c	  1605  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1606          Com_StartTxDeadlineMotitor(TxIpduId, FALSE);
; ..\EAS\BSW\Com\Com.c	  1607  #endif
; ..\EAS\BSW\Com\Com.c	  1608  
; ..\EAS\BSW\Com\Com.c	  1609      }
; ..\EAS\BSW\Com\Com.c	  1610  #if(STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  1611      else if(COM_TRIGGER_REP == Com_PDUTrigRepFlag[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  1612      {
; ..\EAS\BSW\Com\Com.c	  1613          /* SWS_Com_00279 anytime get rep triger, reset all rep counter */
; ..\EAS\BSW\Com\Com.c	  1614          result = COM_EVENT_TX_REP;
; ..\EAS\BSW\Com\Com.c	  1615          if(COM_TXPDU_TXMODE_REP_NUM(TxIpduId) > (uint8)0)
; ..\EAS\BSW\Com\Com.c	  1616          {
; ..\EAS\BSW\Com\Com.c	  1617              COM_TXPDU_REP_NUM(TxIpduId) = COM_TXPDU_TXMODE_REP_NUM(TxIpduId);/*SWS_Com_00305  ComTxModeNumberOfRepetitions + 1*/
; ..\EAS\BSW\Com\Com.c	  1618          }
; ..\EAS\BSW\Com\Com.c	  1619          else
; ..\EAS\BSW\Com\Com.c	  1620          {
; ..\EAS\BSW\Com\Com.c	  1621              COM_TXPDU_REP_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  1622          }
; ..\EAS\BSW\Com\Com.c	  1623  
; ..\EAS\BSW\Com\Com.c	  1624          COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_TXPDU_TXMOD_REP_PERIOD(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1625  
; ..\EAS\BSW\Com\Com.c	  1626  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  1627          if((COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId) != (uint16)0) &&
; ..\EAS\BSW\Com\Com.c	  1628              (COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId) > COM_TXPDU_TXMOD_REP_PERIOD(TxIpduId)))
; ..\EAS\BSW\Com\Com.c	  1629          {
; ..\EAS\BSW\Com\Com.c	  1630              COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1631          }
; ..\EAS\BSW\Com\Com.c	  1632  #endif
; ..\EAS\BSW\Com\Com.c	  1633  
; ..\EAS\BSW\Com\Com.c	  1634          /*SWS_Com_00305  ComTxModeNumberOfRepetitions + 1*/
; ..\EAS\BSW\Com\Com.c	  1635          COM_TXPDU_REQ_CONF_NUM(TxIpduId) = COM_TXPDU_TXMODE_REP_NUM(TxIpduId) + (uint8)1;
; ..\EAS\BSW\Com\Com.c	  1636  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1637          Com_StartTxDeadlineMotitor(TxIpduId, TRUE);/*SWS_Com_00739, restart deadline monitor, when new trigger is get */
; ..\EAS\BSW\Com\Com.c	  1638  #endif
; ..\EAS\BSW\Com\Com.c	  1639  
; ..\EAS\BSW\Com\Com.c	  1640      }
; ..\EAS\BSW\Com\Com.c	  1641      else
; ..\EAS\BSW\Com\Com.c	  1642      {
; ..\EAS\BSW\Com\Com.c	  1643          /* no new trigger*/
; ..\EAS\BSW\Com\Com.c	  1644          if((uint8)0 != COM_TXPDU_REP_NUM(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1645          {
; ..\EAS\BSW\Com\Com.c	  1646              result = COM_EVENT_NOTX_REP;
; ..\EAS\BSW\Com\Com.c	  1647              if( COM_TXPDU_PERIOD_BACKUP(TxIpduId) > (uint16)0)
; ..\EAS\BSW\Com\Com.c	  1648              {
; ..\EAS\BSW\Com\Com.c	  1649                  COM_TXPDU_PERIOD_BACKUP(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  1650              }
; ..\EAS\BSW\Com\Com.c	  1651  
; ..\EAS\BSW\Com\Com.c	  1652              if((uint16)0 == COM_TXPDU_PERIOD_BACKUP(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1653              {
; ..\EAS\BSW\Com\Com.c	  1654                  COM_TXPDU_REP_NUM(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  1655                  if((uint8)0 != COM_TXPDU_REP_NUM(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1656                  {
; ..\EAS\BSW\Com\Com.c	  1657                      COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_TXPDU_TXMOD_REP_PERIOD(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1658  
; ..\EAS\BSW\Com\Com.c	  1659  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  1660                      if((COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId) != (uint16)0) &&
; ..\EAS\BSW\Com\Com.c	  1661                          (COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId) > COM_TXPDU_TXMOD_REP_PERIOD(TxIpduId)))
; ..\EAS\BSW\Com\Com.c	  1662                      {
; ..\EAS\BSW\Com\Com.c	  1663                          COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1664                      }
; ..\EAS\BSW\Com\Com.c	  1665  #endif
; ..\EAS\BSW\Com\Com.c	  1666  
; ..\EAS\BSW\Com\Com.c	  1667                  }
; ..\EAS\BSW\Com\Com.c	  1668                  else
; ..\EAS\BSW\Com\Com.c	  1669                  {
; ..\EAS\BSW\Com\Com.c	  1670                      COM_TXPDU_PERIOD_BACKUP(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1671                  }
; ..\EAS\BSW\Com\Com.c	  1672  
; ..\EAS\BSW\Com\Com.c	  1673                  result = COM_EVENT_TX_REP;
; ..\EAS\BSW\Com\Com.c	  1674              }
; ..\EAS\BSW\Com\Com.c	  1675          }
; ..\EAS\BSW\Com\Com.c	  1676      }
; ..\EAS\BSW\Com\Com.c	  1677  #endif
; ..\EAS\BSW\Com\Com.c	  1678      Com_PDUTrigRepFlag[TxIpduId] = (uint8)0;
	movh.a	a15,#@his(Com_PDUTrigRepFlag)
	lea	a15,[a15]@los(Com_PDUTrigRepFlag)
.L1965:
	addsc.a	a15,a15,d4,#0
.L1966:
	mov	d15,#0
.L1967:
	st.b	[a15],d15
.L1968:

; ..\EAS\BSW\Com\Com.c	  1679  
; ..\EAS\BSW\Com\Com.c	  1680      return result;
; ..\EAS\BSW\Com\Com.c	  1681  
; ..\EAS\BSW\Com\Com.c	  1682  }
	ret
.L934:
	
__Com_HandleDirect_function_end:
	.size	Com_HandleDirect,__Com_HandleDirect_function_end-Com_HandleDirect
.L662:
	; End of function
	
	.sdecl	'.text.Com.Com_HandlePeriod',code,cluster('Com_HandlePeriod')
	.sect	'.text.Com.Com_HandlePeriod'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1683  #endif
; ..\EAS\BSW\Com\Com.c	  1684  
; ..\EAS\BSW\Com\Com.c	  1685  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1686  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1687  * Function Name: Com_HandlePeriod
; ..\EAS\BSW\Com\Com.c	  1688  *
; ..\EAS\BSW\Com\Com.c	  1689  * Description:   process the tx Msg in Period Mode
; ..\EAS\BSW\Com\Com.c	  1690  *
; ..\EAS\BSW\Com\Com.c	  1691  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1692  *
; ..\EAS\BSW\Com\Com.c	  1693  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1694  *
; ..\EAS\BSW\Com\Com.c	  1695  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1696  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1697  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1698  #if((STD_ON == COM_TXMODE_PERIODIC) || (STD_ON == COM_TXMODE_MIXED))
; ..\EAS\BSW\Com\Com.c	  1699  STATIC FUNC(boolean, COM_CODE) Com_HandlePeriod
; Function Com_HandlePeriod
.L348:
Com_HandlePeriod:	.type	func

; ..\EAS\BSW\Com\Com.c	  1700  (
; ..\EAS\BSW\Com\Com.c	  1701      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1702  )
; ..\EAS\BSW\Com\Com.c	  1703  {
; ..\EAS\BSW\Com\Com.c	  1704      boolean sendFlag = FALSE;
	mov	d2,#0
.L1092:

; ..\EAS\BSW\Com\Com.c	  1705  	
; ..\EAS\BSW\Com\Com.c	  1706      if((uint16)0 == COM_TXPDU_TXTIME_OFFSET(TxIpduId))
	mul	d15,d4,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]2
.L1973:
	jne	d0,#0,.L47
.L1974:

; ..\EAS\BSW\Com\Com.c	  1707      {
; ..\EAS\BSW\Com\Com.c	  1708          if(COM_TIMER_STOP_VAL == COM_TXPDU_PERIOD(TxIpduId))
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]0
.L1975:
	mov.u	d1,#65535
.L1976:
	jne	d0,d1,.L48
.L1977:

; ..\EAS\BSW\Com\Com.c	  1709          {
; ..\EAS\BSW\Com\Com.c	  1710              /* first start, Init period = 0, Send 1 frame at once */
; ..\EAS\BSW\Com\Com.c	  1711              COM_TXPDU_PERIOD(TxIpduId) = (uint16)0;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1978:
	st.h	[a15],d2
.L48:

; ..\EAS\BSW\Com\Com.c	  1712          }
; ..\EAS\BSW\Com\Com.c	  1713  
; ..\EAS\BSW\Com\Com.c	  1714          if(COM_TXPDU_PERIOD(TxIpduId) > (uint16)0)
	mul	d15,d4,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]0
.L1979:
	jeq	d0,#0,.L49
.L1980:

; ..\EAS\BSW\Com\Com.c	  1715          {
; ..\EAS\BSW\Com\Com.c	  1716              COM_TXPDU_PERIOD(TxIpduId)--;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	movh.a	a2,#@his(Com_TxPduTable)
	lea	a2,[a2]@los(Com_TxPduTable)
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]0
.L1981:
	add	d15,#-1
	st.h	[a15],d15
.L49:

; ..\EAS\BSW\Com\Com.c	  1717          }
; ..\EAS\BSW\Com\Com.c	  1718  
; ..\EAS\BSW\Com\Com.c	  1719          if((uint16)0 == COM_TXPDU_PERIOD(TxIpduId))
	mul	d15,d4,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]0
.L1982:
	jne	d0,#0,.L50
.L1983:

; ..\EAS\BSW\Com\Com.c	  1720          {
; ..\EAS\BSW\Com\Com.c	  1721              COM_TXPDU_PERIOD(TxIpduId) = COM_TXPDU_TXMODE_PERIOD(TxIpduId);
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a2,a15,d15,#0
.L1984:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
	ld.hu	d15,[a15]6
.L1985:
	st.h	[a2],d15
.L1986:

; ..\EAS\BSW\Com\Com.c	  1722              sendFlag = TRUE;
	mov	d2,#1
.L50:
.L47:

; ..\EAS\BSW\Com\Com.c	  1723  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1724              Com_StartTxDeadlineMotitor(TxIpduId, FALSE);
; ..\EAS\BSW\Com\Com.c	  1725  #endif
; ..\EAS\BSW\Com\Com.c	  1726          }
; ..\EAS\BSW\Com\Com.c	  1727  
; ..\EAS\BSW\Com\Com.c	  1728      }
; ..\EAS\BSW\Com\Com.c	  1729      if(COM_TXPDU_TXTIME_OFFSET(TxIpduId) > (uint16)0)
	mul	d15,d4,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]2
.L1987:
	jeq	d0,#0,.L51
.L1988:

; ..\EAS\BSW\Com\Com.c	  1730      {
; ..\EAS\BSW\Com\Com.c	  1731          COM_TXPDU_TXTIME_OFFSET(TxIpduId)--;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	movh.a	a2,#@his(Com_TxPduTable)
	lea	a2,[a2]@los(Com_TxPduTable)
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]2
.L1989:
	add	d15,#-1
	st.h	[a15]2,d15
.L51:

; ..\EAS\BSW\Com\Com.c	  1732      }
; ..\EAS\BSW\Com\Com.c	  1733      return sendFlag;
; ..\EAS\BSW\Com\Com.c	  1734  
; ..\EAS\BSW\Com\Com.c	  1735  }
	ret
.L937:
	
__Com_HandlePeriod_function_end:
	.size	Com_HandlePeriod,__Com_HandlePeriod_function_end-Com_HandlePeriod
.L667:
	; End of function
	
	.sdecl	'.text.Com.Com_HandleNone',code,cluster('Com_HandleNone')
	.sect	'.text.Com.Com_HandleNone'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1736  #endif
; ..\EAS\BSW\Com\Com.c	  1737  
; ..\EAS\BSW\Com\Com.c	  1738  
; ..\EAS\BSW\Com\Com.c	  1739  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1740  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1741  * Function Name: Com_HandleMixed
; ..\EAS\BSW\Com\Com.c	  1742  *
; ..\EAS\BSW\Com\Com.c	  1743  * Description:   process the tx Msg in mix Mode
; ..\EAS\BSW\Com\Com.c	  1744  *
; ..\EAS\BSW\Com\Com.c	  1745  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1746  *
; ..\EAS\BSW\Com\Com.c	  1747  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1748  *
; ..\EAS\BSW\Com\Com.c	  1749  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1750  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1751  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1752  #if(STD_ON == COM_TXMODE_MIXED)
; ..\EAS\BSW\Com\Com.c	  1753  STATIC FUNC(boolean, COM_CODE) Com_HandleMixed
; ..\EAS\BSW\Com\Com.c	  1754  (
; ..\EAS\BSW\Com\Com.c	  1755      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1756  )
; ..\EAS\BSW\Com\Com.c	  1757  {
; ..\EAS\BSW\Com\Com.c	  1758      /*
; ..\EAS\BSW\Com\Com.c	  1759          mix mode 1: when overlap , stop period counter, only process tigger event. period will not restart until rep tx end
; ..\EAS\BSW\Com\Com.c	  1760          mix mode 2: when overlap , keep running period counter, period request will consider as  triger
; ..\EAS\BSW\Com\Com.c	  1761          mix mode 3 not support yet : when overlap , keep running period counter,  process triger and period only with limit of MDT
; ..\EAS\BSW\Com\Com.c	  1762      */
; ..\EAS\BSW\Com\Com.c	  1763  
; ..\EAS\BSW\Com\Com.c	  1764      uint8 triggerSendFlag = COM_EVENT_TX_NONE;
; ..\EAS\BSW\Com\Com.c	  1765      boolean result = FALSE;
; ..\EAS\BSW\Com\Com.c	  1766  
; ..\EAS\BSW\Com\Com.c	  1767      if((uint16)0 == COM_TXPDU_TXTIME_OFFSET(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1768      {
; ..\EAS\BSW\Com\Com.c	  1769          triggerSendFlag = Com_HandleDirect(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1770  
; ..\EAS\BSW\Com\Com.c	  1771  #if (STD_ON == COM_FIRST_HANDLE_MIXED)
; ..\EAS\BSW\Com\Com.c	  1772          /* rep or trigger is active, normal cycle is stop */
; ..\EAS\BSW\Com\Com.c	  1773          if(triggerSendFlag != COM_EVENT_TX_NONE)
; ..\EAS\BSW\Com\Com.c	  1774          {
; ..\EAS\BSW\Com\Com.c	  1775              COM_TXPDU_PERIOD(TxIpduId) = COM_TXPDU_TXMODE_PERIOD(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1776              if(triggerSendFlag > COM_EVENT_NOTX_REP)
; ..\EAS\BSW\Com\Com.c	  1777              {
; ..\EAS\BSW\Com\Com.c	  1778                  result = TRUE;
; ..\EAS\BSW\Com\Com.c	  1779              }
; ..\EAS\BSW\Com\Com.c	  1780          }
; ..\EAS\BSW\Com\Com.c	  1781          else
; ..\EAS\BSW\Com\Com.c	  1782          {
; ..\EAS\BSW\Com\Com.c	  1783              result = Com_HandlePeriod(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1784  
; ..\EAS\BSW\Com\Com.c	  1785          }
; ..\EAS\BSW\Com\Com.c	  1786  #endif
; ..\EAS\BSW\Com\Com.c	  1787  
; ..\EAS\BSW\Com\Com.c	  1788  #if (STD_ON == COM_SECOND_HANDLE_MIXED)/* 2nd options  SWS_Com_00494*/
; ..\EAS\BSW\Com\Com.c	  1789          /* rep or trigger is active, normal cycle is running but ignor send request */
; ..\EAS\BSW\Com\Com.c	  1790          if(triggerSendFlag != COM_EVENT_TX_NONE)
; ..\EAS\BSW\Com\Com.c	  1791          {
; ..\EAS\BSW\Com\Com.c	  1792              (void)Com_HandlePeriod(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1793              if(triggerSendFlag > COM_EVENT_NOTX_REP)
; ..\EAS\BSW\Com\Com.c	  1794              {
; ..\EAS\BSW\Com\Com.c	  1795                  result = TRUE;
; ..\EAS\BSW\Com\Com.c	  1796              }
; ..\EAS\BSW\Com\Com.c	  1797          }
; ..\EAS\BSW\Com\Com.c	  1798          else
; ..\EAS\BSW\Com\Com.c	  1799          {
; ..\EAS\BSW\Com\Com.c	  1800              result = Com_HandlePeriod(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  1801          }
; ..\EAS\BSW\Com\Com.c	  1802  #endif
; ..\EAS\BSW\Com\Com.c	  1803      }
; ..\EAS\BSW\Com\Com.c	  1804      else
; ..\EAS\BSW\Com\Com.c	  1805      {
; ..\EAS\BSW\Com\Com.c	  1806          COM_TXPDU_TXTIME_OFFSET(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  1807      }
; ..\EAS\BSW\Com\Com.c	  1808      /*save trigger info before offset arrived, it may cause multipul transmission */
; ..\EAS\BSW\Com\Com.c	  1809      /*Com_PDUTrigRepFlag[TxIpduId] = (uint8)0;*/
; ..\EAS\BSW\Com\Com.c	  1810      return result;
; ..\EAS\BSW\Com\Com.c	  1811  
; ..\EAS\BSW\Com\Com.c	  1812  
; ..\EAS\BSW\Com\Com.c	  1813  }
; ..\EAS\BSW\Com\Com.c	  1814  #endif
; ..\EAS\BSW\Com\Com.c	  1815  
; ..\EAS\BSW\Com\Com.c	  1816  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1817  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1818  * Function Name: Com_HandleNone
; ..\EAS\BSW\Com\Com.c	  1819  *
; ..\EAS\BSW\Com\Com.c	  1820  * Description:
; ..\EAS\BSW\Com\Com.c	  1821  *
; ..\EAS\BSW\Com\Com.c	  1822  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1823  *
; ..\EAS\BSW\Com\Com.c	  1824  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1825  *
; ..\EAS\BSW\Com\Com.c	  1826  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1827  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1828  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1829  #if(STD_ON == COM_TXMODE_NONE)
; ..\EAS\BSW\Com\Com.c	  1830  STATIC FUNC(void, COM_CODE) Com_HandleNone
; Function Com_HandleNone
.L350:
Com_HandleNone:	.type	func

; ..\EAS\BSW\Com\Com.c	  1831  (
; ..\EAS\BSW\Com\Com.c	  1832      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1833  )
; ..\EAS\BSW\Com\Com.c	  1834  {
; ..\EAS\BSW\Com\Com.c	  1835  #if(STD_OFF == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1836      (void)TxIpduId;
; ..\EAS\BSW\Com\Com.c	  1837  #endif
; ..\EAS\BSW\Com\Com.c	  1838      /* None only, Start tx deadline motitor  SWS_Com_00696
; ..\EAS\BSW\Com\Com.c	  1839         not none only, stop tx deadline motitor  SWS_Com_00835
; ..\EAS\BSW\Com\Com.c	  1840  
; ..\EAS\BSW\Com\Com.c	  1841         so that, lin  signals can be monitored by com
; ..\EAS\BSW\Com\Com.c	  1842  
; ..\EAS\BSW\Com\Com.c	  1843         this use false_ptr = null , to define the pdu has none mode only
; ..\EAS\BSW\Com\Com.c	  1844  
; ..\EAS\BSW\Com\Com.c	  1845      */
; ..\EAS\BSW\Com\Com.c	  1846  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  1847      if(NULL_PTR == COM_CFG_TXPDU_TXMODE_FALSE_PTR(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  1848      {
; ..\EAS\BSW\Com\Com.c	  1849          Com_StartTxDeadlineMotitor(TxIpduId, FALSE);
; ..\EAS\BSW\Com\Com.c	  1850      }
; ..\EAS\BSW\Com\Com.c	  1851      else
; ..\EAS\BSW\Com\Com.c	  1852      {
; ..\EAS\BSW\Com\Com.c	  1853          COM_TXPDU_TIMEOUT(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  1854  
; ..\EAS\BSW\Com\Com.c	  1855      }
; ..\EAS\BSW\Com\Com.c	  1856  #endif
; ..\EAS\BSW\Com\Com.c	  1857  
; ..\EAS\BSW\Com\Com.c	  1858  
; ..\EAS\BSW\Com\Com.c	  1859  }
	ret
.L940:
	
__Com_HandleNone_function_end:
	.size	Com_HandleNone,__Com_HandleNone_function_end-Com_HandleNone
.L672:
	; End of function
	
	.sdecl	'.text.Com.Com_TxModeProcess',code,cluster('Com_TxModeProcess')
	.sect	'.text.Com.Com_TxModeProcess'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  1860  #endif
; ..\EAS\BSW\Com\Com.c	  1861  
; ..\EAS\BSW\Com\Com.c	  1862  
; ..\EAS\BSW\Com\Com.c	  1863  
; ..\EAS\BSW\Com\Com.c	  1864  #if    (STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  1865  
; ..\EAS\BSW\Com\Com.c	  1866  #if 0
; ..\EAS\BSW\Com\Com.c	  1867  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1868  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1869  * Function Name: Com_CheckTxPduIfAcive
; ..\EAS\BSW\Com\Com.c	  1870  *
; ..\EAS\BSW\Com\Com.c	  1871  * Description:
; ..\EAS\BSW\Com\Com.c	  1872  *
; ..\EAS\BSW\Com\Com.c	  1873  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1874  *
; ..\EAS\BSW\Com\Com.c	  1875  * Outputs:       boolean pdu active, false pdu not active
; ..\EAS\BSW\Com\Com.c	  1876  *
; ..\EAS\BSW\Com\Com.c	  1877  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1878  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1879  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1880  STATIC FUNC(boolean, COM_CODE) Com_CheckTxPduIfAcive
; ..\EAS\BSW\Com\Com.c	  1881  (
; ..\EAS\BSW\Com\Com.c	  1882      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  1883  )
; ..\EAS\BSW\Com\Com.c	  1884  {
; ..\EAS\BSW\Com\Com.c	  1885      Com_SignalIdType SigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  1886      boolean activeFlag = FALSE;
; ..\EAS\BSW\Com\Com.c	  1887  
; ..\EAS\BSW\Com\Com.c	  1888      for(SigIndex = COM_CFG_TXPDU_SIG_START_NUM(TxIpduId); SigIndex <= COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId); SigIndex++)
; ..\EAS\BSW\Com\Com.c	  1889      {
; ..\EAS\BSW\Com\Com.c	  1890          if((COM_CFG_TXSIG_TRANSPROPERTY(SigIndex) == COM_IFACTIVE_SIG)  && (COM_CFG_TXSIG_CHECKCHANGE_SIG_FUN(SigIndex) != NULL_PTR))
; ..\EAS\BSW\Com\Com.c	  1891          {
; ..\EAS\BSW\Com\Com.c	  1892              activeFlag = COM_CFG_TXSIG_CHECKCHANGE_SIG_FUN(SigIndex)(TxIpduId, SigIndex, COM_CFG_TXSIG_INACTIVE_VALUE_PTR(SigIndex), COM_CFG_TXSIG_LENGTH(SigIndex))
; ..\EAS\BSW\Com\Com.c	  1893              /*if not = inactive value, meas active, break
; ..\EAS\BSW\Com\Com.c	  1894              any signal active means pdu active
; ..\EAS\BSW\Com\Com.c	  1895              */
; ..\EAS\BSW\Com\Com.c	  1896              if(activeFlag == TRUE)
; ..\EAS\BSW\Com\Com.c	  1897              {
; ..\EAS\BSW\Com\Com.c	  1898                  break;
; ..\EAS\BSW\Com\Com.c	  1899              }
; ..\EAS\BSW\Com\Com.c	  1900          }
; ..\EAS\BSW\Com\Com.c	  1901      }
; ..\EAS\BSW\Com\Com.c	  1902  
; ..\EAS\BSW\Com\Com.c	  1903  
; ..\EAS\BSW\Com\Com.c	  1904      return activeFlag;
; ..\EAS\BSW\Com\Com.c	  1905  
; ..\EAS\BSW\Com\Com.c	  1906  }
; ..\EAS\BSW\Com\Com.c	  1907  
; ..\EAS\BSW\Com\Com.c	  1908  #endif
; ..\EAS\BSW\Com\Com.c	  1909  
; ..\EAS\BSW\Com\Com.c	  1910  
; ..\EAS\BSW\Com\Com.c	  1911  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  1912  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1913  * Function Name: Com_CheckTxSigIfAcive
; ..\EAS\BSW\Com\Com.c	  1914  *
; ..\EAS\BSW\Com\Com.c	  1915  * Description:   if active, set target pdu flag bit active, other wise clear target pdu flag bit
; ..\EAS\BSW\Com\Com.c	  1916  *
; ..\EAS\BSW\Com\Com.c	  1917  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  1918  *
; ..\EAS\BSW\Com\Com.c	  1919  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  1920  *
; ..\EAS\BSW\Com\Com.c	  1921  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  1922  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  1923  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  1924  STATIC FUNC(void, COM_CODE) Com_CheckTxSigIfActive
; ..\EAS\BSW\Com\Com.c	  1925  (
; ..\EAS\BSW\Com\Com.c	  1926      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  1927      Com_SignalIdType TxSigId,
; ..\EAS\BSW\Com\Com.c	  1928      P2CONST(void, AUTOMATIC, COM_APPL_DATA) newDataPtr,
; ..\EAS\BSW\Com\Com.c	  1929      P2CONST(void, AUTOMATIC, COM_CONST)     cfgInActiveValPtr
; ..\EAS\BSW\Com\Com.c	  1930  )
; ..\EAS\BSW\Com\Com.c	  1931  {
; ..\EAS\BSW\Com\Com.c	  1932      Com_SigType type  = COM_CFG_TXSIG_TYPE(TxSigId);
; ..\EAS\BSW\Com\Com.c	  1933      boolean flag = FALSE;
; ..\EAS\BSW\Com\Com.c	  1934      PduLengthType sigIdx = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  1935  
; ..\EAS\BSW\Com\Com.c	  1936      if((COM_CFG_TXSIG_TRANSPROPERTY(TxSigId) == COM_IFACTIVE_SIG) 
; ..\EAS\BSW\Com\Com.c	  1937          && (COM_TXPDU_TXMODE(TxIpduId) == COM_IFACTIVE_PDU)
; ..\EAS\BSW\Com\Com.c	  1938          &&(COM_CFG_TXSIG_INACTIVE_OFFSET(TxSigId)!= COM_INVALID_IFACTIVE_OFFSET_VALUE)
; ..\EAS\BSW\Com\Com.c	  1939          &&(cfgInActiveValPtr != NULL_PTR)
; ..\EAS\BSW\Com\Com.c	  1940          &&(newDataPtr != NULL_PTR))
; ..\EAS\BSW\Com\Com.c	  1941      {
; ..\EAS\BSW\Com\Com.c	  1942          switch(type)
; ..\EAS\BSW\Com\Com.c	  1943          {
; ..\EAS\BSW\Com\Com.c	  1944          case COM_SIG_U8:
; ..\EAS\BSW\Com\Com.c	  1945              if(*(uint8 *)newDataPtr != * (uint8 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1946              {
; ..\EAS\BSW\Com\Com.c	  1947                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1948              }
; ..\EAS\BSW\Com\Com.c	  1949              break;
; ..\EAS\BSW\Com\Com.c	  1950          case COM_SIG_U16:
; ..\EAS\BSW\Com\Com.c	  1951              if(*(uint16 *)newDataPtr != * (uint16 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1952              {
; ..\EAS\BSW\Com\Com.c	  1953                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1954              }
; ..\EAS\BSW\Com\Com.c	  1955              break;
; ..\EAS\BSW\Com\Com.c	  1956          case COM_SIG_U32:
; ..\EAS\BSW\Com\Com.c	  1957              if(*(uint32 *)newDataPtr != * (uint32 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1958              {
; ..\EAS\BSW\Com\Com.c	  1959                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1960              }
; ..\EAS\BSW\Com\Com.c	  1961              break;
; ..\EAS\BSW\Com\Com.c	  1962          case COM_SIG_BOOLEAN:
; ..\EAS\BSW\Com\Com.c	  1963              if(*(boolean *)newDataPtr != * (boolean *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1964              {
; ..\EAS\BSW\Com\Com.c	  1965                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1966              }
; ..\EAS\BSW\Com\Com.c	  1967              break;
; ..\EAS\BSW\Com\Com.c	  1968          case COM_SIG_S8:
; ..\EAS\BSW\Com\Com.c	  1969              if(*(sint8 *)newDataPtr != * (sint8 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1970              {
; ..\EAS\BSW\Com\Com.c	  1971                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1972              }
; ..\EAS\BSW\Com\Com.c	  1973              break;
; ..\EAS\BSW\Com\Com.c	  1974          case COM_SIG_S16:
; ..\EAS\BSW\Com\Com.c	  1975              if(*(sint16 *)newDataPtr != * (sint16 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1976              {
; ..\EAS\BSW\Com\Com.c	  1977                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1978              }
; ..\EAS\BSW\Com\Com.c	  1979              break;
; ..\EAS\BSW\Com\Com.c	  1980          case COM_SIG_S32:
; ..\EAS\BSW\Com\Com.c	  1981              if(*(sint32 *)newDataPtr != * (sint32 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1982              {
; ..\EAS\BSW\Com\Com.c	  1983                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1984              }
; ..\EAS\BSW\Com\Com.c	  1985              break;
; ..\EAS\BSW\Com\Com.c	  1986          case COM_SIG_F32:
; ..\EAS\BSW\Com\Com.c	  1987              if(*(float32 *)newDataPtr != * (float32 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1988              {
; ..\EAS\BSW\Com\Com.c	  1989                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1990              }
; ..\EAS\BSW\Com\Com.c	  1991              break;
; ..\EAS\BSW\Com\Com.c	  1992          case COM_SIG_U64:
; ..\EAS\BSW\Com\Com.c	  1993              if(*(uint64 *)newDataPtr != * (uint64 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  1994              {
; ..\EAS\BSW\Com\Com.c	  1995                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  1996              }
; ..\EAS\BSW\Com\Com.c	  1997              break;
; ..\EAS\BSW\Com\Com.c	  1998          case COM_SIG_S64:
; ..\EAS\BSW\Com\Com.c	  1999              if(*(sint64 *)newDataPtr != * (sint64 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  2000              {
; ..\EAS\BSW\Com\Com.c	  2001                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  2002              }
; ..\EAS\BSW\Com\Com.c	  2003              break;
; ..\EAS\BSW\Com\Com.c	  2004  
; ..\EAS\BSW\Com\Com.c	  2005          case COM_SIG_F64:
; ..\EAS\BSW\Com\Com.c	  2006              if(*(float64 *)newDataPtr != * (float64 *)cfgInActiveValPtr)
; ..\EAS\BSW\Com\Com.c	  2007              {
; ..\EAS\BSW\Com\Com.c	  2008                  flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  2009              }
; ..\EAS\BSW\Com\Com.c	  2010              break;
; ..\EAS\BSW\Com\Com.c	  2011  
; ..\EAS\BSW\Com\Com.c	  2012          case COM_SIG_U8N:
; ..\EAS\BSW\Com\Com.c	  2013              for(sigIdx = (PduLengthType)0; sigIdx < COM_CFG_TXSIG_LENGTH(TxSigId); sigIdx)
; ..\EAS\BSW\Com\Com.c	  2014              {
; ..\EAS\BSW\Com\Com.c	  2015                  if( ((uint8*)newDataPtr)[sigIdx] != ((uint8*)cfgInActiveValPtr)[sigIdx])
; ..\EAS\BSW\Com\Com.c	  2016                  {
; ..\EAS\BSW\Com\Com.c	  2017                      flag = TRUE;
; ..\EAS\BSW\Com\Com.c	  2018                      break;
; ..\EAS\BSW\Com\Com.c	  2019                  }
; ..\EAS\BSW\Com\Com.c	  2020              }
; ..\EAS\BSW\Com\Com.c	  2021              break;
; ..\EAS\BSW\Com\Com.c	  2022          /*DYN not support */
; ..\EAS\BSW\Com\Com.c	  2023  
; ..\EAS\BSW\Com\Com.c	  2024          default:
; ..\EAS\BSW\Com\Com.c	  2025              break;
; ..\EAS\BSW\Com\Com.c	  2026          }
; ..\EAS\BSW\Com\Com.c	  2027  
; ..\EAS\BSW\Com\Com.c	  2028          if(flag == TRUE)
; ..\EAS\BSW\Com\Com.c	  2029          {
; ..\EAS\BSW\Com\Com.c	  2030              COM_TXPDU_IFACTIVE_FLAG(TxIpduId) |= (uint32)((uint8)1 << COM_CFG_TXSIG_INACTIVE_OFFSET(TxSigId));
; ..\EAS\BSW\Com\Com.c	  2031          }
; ..\EAS\BSW\Com\Com.c	  2032          else
; ..\EAS\BSW\Com\Com.c	  2033          {
; ..\EAS\BSW\Com\Com.c	  2034              COM_TXPDU_IFACTIVE_FLAG(TxIpduId) &= (uint32)(~((uint8)1 << COM_CFG_TXSIG_INACTIVE_OFFSET(TxSigId)));
; ..\EAS\BSW\Com\Com.c	  2035          }
; ..\EAS\BSW\Com\Com.c	  2036      }
; ..\EAS\BSW\Com\Com.c	  2037  }
; ..\EAS\BSW\Com\Com.c	  2038  
; ..\EAS\BSW\Com\Com.c	  2039  
; ..\EAS\BSW\Com\Com.c	  2040  
; ..\EAS\BSW\Com\Com.c	  2041  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2042  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2043  * Function Name: Com_HandleIfActive
; ..\EAS\BSW\Com\Com.c	  2044  *
; ..\EAS\BSW\Com\Com.c	  2045  * Description:
; ..\EAS\BSW\Com\Com.c	  2046  *
; ..\EAS\BSW\Com\Com.c	  2047  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  2048  *
; ..\EAS\BSW\Com\Com.c	  2049  * Outputs:       boolean pdu send, false pdu not send
; ..\EAS\BSW\Com\Com.c	  2050  *
; ..\EAS\BSW\Com\Com.c	  2051  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2052  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2053  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2054  
; ..\EAS\BSW\Com\Com.c	  2055  STATIC FUNC(boolean, COM_CODE) Com_HandleIfActive
; ..\EAS\BSW\Com\Com.c	  2056  (
; ..\EAS\BSW\Com\Com.c	  2057      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  2058  )
; ..\EAS\BSW\Com\Com.c	  2059  {
; ..\EAS\BSW\Com\Com.c	  2060      boolean result = FALSE;
; ..\EAS\BSW\Com\Com.c	  2061  
; ..\EAS\BSW\Com\Com.c	  2062  
; ..\EAS\BSW\Com\Com.c	  2063      if(((uint32)0 == COM_TXPDU_IFACTIVE_FLAG(TxIpduId)) && (COM_TXPDU_REP_NUM(TxIpduId) == (uint8)0))
; ..\EAS\BSW\Com\Com.c	  2064      {
; ..\EAS\BSW\Com\Com.c	  2065          /* inactive mode and no rep number, do nothing, just set period to stop value*/
; ..\EAS\BSW\Com\Com.c	  2066          COM_TXPDU_PERIOD(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  2067      }
; ..\EAS\BSW\Com\Com.c	  2068      else
; ..\EAS\BSW\Com\Com.c	  2069      {
; ..\EAS\BSW\Com\Com.c	  2070          /* if-active mode do not send out when init, so dont check time offset here */
; ..\EAS\BSW\Com\Com.c	  2071          /* actvive or rep>0. need to count the period */
; ..\EAS\BSW\Com\Com.c	  2072          if(COM_TIMER_STOP_VAL == COM_TXPDU_PERIOD(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2073          {
; ..\EAS\BSW\Com\Com.c	  2074              /* first start, Init period = 0, Send 1 frame at once */
; ..\EAS\BSW\Com\Com.c	  2075              COM_TXPDU_PERIOD(TxIpduId) = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  2076          }
; ..\EAS\BSW\Com\Com.c	  2077  
; ..\EAS\BSW\Com\Com.c	  2078          if(COM_TXPDU_PERIOD(TxIpduId) > (uint16)0)
; ..\EAS\BSW\Com\Com.c	  2079          {
; ..\EAS\BSW\Com\Com.c	  2080              COM_TXPDU_PERIOD(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  2081          }
; ..\EAS\BSW\Com\Com.c	  2082  
; ..\EAS\BSW\Com\Com.c	  2083          if((uint16)0 == COM_TXPDU_PERIOD(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2084          {
; ..\EAS\BSW\Com\Com.c	  2085              COM_TXPDU_PERIOD(TxIpduId) = COM_TXPDU_TXMOD_REP_PERIOD(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2086              result = TRUE;
; ..\EAS\BSW\Com\Com.c	  2087      #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  2088              Com_StartTxDeadlineMotitor(TxIpduId, FALSE);
; ..\EAS\BSW\Com\Com.c	  2089      #endif
; ..\EAS\BSW\Com\Com.c	  2090              if((uint32)0 != COM_TXPDU_IFACTIVE_FLAG(TxIpduId)) /* active mode */
; ..\EAS\BSW\Com\Com.c	  2091              {
; ..\EAS\BSW\Com\Com.c	  2092                  /*when active, keep rep num as init value */
; ..\EAS\BSW\Com\Com.c	  2093                  COM_TXPDU_REP_NUM(TxIpduId) = COM_TXPDU_TXMODE_REP_NUM(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2094              }
; ..\EAS\BSW\Com\Com.c	  2095              else /* inacive mode*/
; ..\EAS\BSW\Com\Com.c	  2096              {
; ..\EAS\BSW\Com\Com.c	  2097                  if(COM_TXPDU_REP_NUM(TxIpduId) > (uint8)0)
; ..\EAS\BSW\Com\Com.c	  2098                  {
; ..\EAS\BSW\Com\Com.c	  2099                      COM_TXPDU_REP_NUM(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  2100                      if(COM_TXPDU_REP_NUM(TxIpduId) == (uint8)0)
; ..\EAS\BSW\Com\Com.c	  2101                      {
; ..\EAS\BSW\Com\Com.c	  2102                          COM_TXPDU_PERIOD(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  2103                      }
; ..\EAS\BSW\Com\Com.c	  2104                  }
; ..\EAS\BSW\Com\Com.c	  2105                  
; ..\EAS\BSW\Com\Com.c	  2106              }
; ..\EAS\BSW\Com\Com.c	  2107  
; ..\EAS\BSW\Com\Com.c	  2108          }
; ..\EAS\BSW\Com\Com.c	  2109      }
; ..\EAS\BSW\Com\Com.c	  2110      return result;
; ..\EAS\BSW\Com\Com.c	  2111  
; ..\EAS\BSW\Com\Com.c	  2112  
; ..\EAS\BSW\Com\Com.c	  2113  }
; ..\EAS\BSW\Com\Com.c	  2114  #endif
; ..\EAS\BSW\Com\Com.c	  2115  
; ..\EAS\BSW\Com\Com.c	  2116  
; ..\EAS\BSW\Com\Com.c	  2117  
; ..\EAS\BSW\Com\Com.c	  2118  
; ..\EAS\BSW\Com\Com.c	  2119  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2120  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2121  * Function Name: Com_TxModeProcess
; ..\EAS\BSW\Com\Com.c	  2122  *
; ..\EAS\BSW\Com\Com.c	  2123  * Description:   Called in MainTx, decide if the Pdu can be send out this cycle
; ..\EAS\BSW\Com\Com.c	  2124  *
; ..\EAS\BSW\Com\Com.c	  2125  * Inputs:        TxIpduId,TxIPDUTrigRepFlag
; ..\EAS\BSW\Com\Com.c	  2126  *
; ..\EAS\BSW\Com\Com.c	  2127  * Outputs:       TRUE: PDU need to be sendout
; ..\EAS\BSW\Com\Com.c	  2128  *                  FALSE: PDU need not to be sendout
; ..\EAS\BSW\Com\Com.c	  2129  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2130  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2131  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2132  STATIC FUNC(boolean, COM_CODE) Com_TxModeProcess
; Function Com_TxModeProcess
.L352:
Com_TxModeProcess:	.type	func
	mov	d8,d4
.L1094:

; ..\EAS\BSW\Com\Com.c	  2133  (
; ..\EAS\BSW\Com\Com.c	  2134      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  2135  )
; ..\EAS\BSW\Com\Com.c	  2136  {
; ..\EAS\BSW\Com\Com.c	  2137  
; ..\EAS\BSW\Com\Com.c	  2138      boolean sendFlag = FALSE;
	mov	d9,#0
.L1095:

; ..\EAS\BSW\Com\Com.c	  2139  
; ..\EAS\BSW\Com\Com.c	  2140      /* SWS_Com_239   new tx Mode will be used at once*/
; ..\EAS\BSW\Com\Com.c	  2141      switch(COM_TXPDU_TXMODE(TxIpduId))
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
	ld.bu	d15,[a15]
.L1998:

; ..\EAS\BSW\Com\Com.c	  2142      {
; ..\EAS\BSW\Com\Com.c	  2143  #if    (STD_ON == COM_TXMODE_DIRECT)
; ..\EAS\BSW\Com\Com.c	  2144      case COM_DIRECT:
	jeq	d15,d9,.L53
.L1999:

; ..\EAS\BSW\Com\Com.c	  2145          if(Com_HandleDirect(TxIpduId) > COM_EVENT_NOTX_REP)/* COM_EVENT_TX_ONCE or COM_EVENT_TX_REP*/
; ..\EAS\BSW\Com\Com.c	  2146          {
; ..\EAS\BSW\Com\Com.c	  2147              sendFlag = TRUE;
; ..\EAS\BSW\Com\Com.c	  2148          }
; ..\EAS\BSW\Com\Com.c	  2149          break;
; ..\EAS\BSW\Com\Com.c	  2150  #endif
; ..\EAS\BSW\Com\Com.c	  2151  
; ..\EAS\BSW\Com\Com.c	  2152  #if    (STD_ON == COM_TXMODE_PERIODIC)
; ..\EAS\BSW\Com\Com.c	  2153      case COM_PERIODIC:
; ..\EAS\BSW\Com\Com.c	  2154          sendFlag = Com_HandlePeriod(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2155          break;
; ..\EAS\BSW\Com\Com.c	  2156  #endif
; ..\EAS\BSW\Com\Com.c	  2157  
; ..\EAS\BSW\Com\Com.c	  2158  #if    (STD_ON == COM_TXMODE_MIXED)
; ..\EAS\BSW\Com\Com.c	  2159      case COM_MIXED:
; ..\EAS\BSW\Com\Com.c	  2160          sendFlag = Com_HandleMixed(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2161          break;
; ..\EAS\BSW\Com\Com.c	  2162  #endif
; ..\EAS\BSW\Com\Com.c	  2163  
; ..\EAS\BSW\Com\Com.c	  2164  #if    (STD_ON == COM_TXMODE_NONE)
; ..\EAS\BSW\Com\Com.c	  2165      case COM_PDU_NONE:
	jeq	d15,#2,.L54
.L2000:
	jeq	d15,#3,.L55
.L2001:
	j	.L56
.L53:
	call	Com_HandleDirect
.L1093:
	jlt.u	d2,#2,.L57
.L2002:
	mov	d9,#1
.L2003:
	j	.L58
.L55:
	call	Com_HandlePeriod
.L1096:
	mov	d9,d2
.L1097:
	j	.L59
.L54:

; ..\EAS\BSW\Com\Com.c	  2166          Com_HandleNone(TxIpduId);
	call	Com_HandleNone

; ..\EAS\BSW\Com\Com.c	  2167          break;
; ..\EAS\BSW\Com\Com.c	  2168  #endif
; ..\EAS\BSW\Com\Com.c	  2169  
; ..\EAS\BSW\Com\Com.c	  2170  #if    (STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2171      case COM_IFACTIVE_PDU:
; ..\EAS\BSW\Com\Com.c	  2172      	sendFlag = Com_HandleIfActive(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2173          break;
; ..\EAS\BSW\Com\Com.c	  2174  #endif
; ..\EAS\BSW\Com\Com.c	  2175  
; ..\EAS\BSW\Com\Com.c	  2176  
; ..\EAS\BSW\Com\Com.c	  2177      default:
; ..\EAS\BSW\Com\Com.c	  2178          /* NONE */
; ..\EAS\BSW\Com\Com.c	  2179          break;
; ..\EAS\BSW\Com\Com.c	  2180  
; ..\EAS\BSW\Com\Com.c	  2181      }
; ..\EAS\BSW\Com\Com.c	  2182  
; ..\EAS\BSW\Com\Com.c	  2183      /* other reason may enable tx request */
; ..\EAS\BSW\Com\Com.c	  2184  #if (STD_ON == COM_TriggerIPDUSend_API)
; ..\EAS\BSW\Com\Com.c	  2185      if(TRUE == Com_TriggerPDUSendFlag[TxIpduId])
.L59:
.L58:
.L57:
.L56:
	movh.a	a15,#@his(Com_TriggerPDUSendFlag)
	lea	a15,[a15]@los(Com_TriggerPDUSendFlag)
.L2004:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L2005:
	jne	d15,#1,.L60
.L2006:

; ..\EAS\BSW\Com\Com.c	  2186      {
; ..\EAS\BSW\Com\Com.c	  2187          sendFlag = TRUE;
	mov	d9,#1
.L2007:

; ..\EAS\BSW\Com\Com.c	  2188          Com_TriggerPDUSendFlag[TxIpduId] = FALSE;
	movh.a	a15,#@his(Com_TriggerPDUSendFlag)
	lea	a15,[a15]@los(Com_TriggerPDUSendFlag)
.L2008:
	addsc.a	a15,a15,d8,#0
.L2009:
	mov	d0,#0
.L2010:
	st.b	[a15],d0
.L60:

; ..\EAS\BSW\Com\Com.c	  2189      }
; ..\EAS\BSW\Com\Com.c	  2190  #endif
; ..\EAS\BSW\Com\Com.c	  2191  
; ..\EAS\BSW\Com\Com.c	  2192  #if (STD_ON == COM_RETRY_TRANSMIT_REQUESTS)
; ..\EAS\BSW\Com\Com.c	  2193      if(COM_TXPDU_START_RETX == Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  2194      {
; ..\EAS\BSW\Com\Com.c	  2195          sendFlag = TRUE;
; ..\EAS\BSW\Com\Com.c	  2196      }
; ..\EAS\BSW\Com\Com.c	  2197  #endif
; ..\EAS\BSW\Com\Com.c	  2198  
; ..\EAS\BSW\Com\Com.c	  2199  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  2200      if(TRUE == COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId))
	mul	d0,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]6
.L2011:
	jne	d15,#1,.L61
.L2012:

; ..\EAS\BSW\Com\Com.c	  2201      {
; ..\EAS\BSW\Com\Com.c	  2202          sendFlag = TRUE;
	mov	d9,#1
.L2013:

; ..\EAS\BSW\Com\Com.c	  2203          COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId) = FALSE;
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d0,#0
.L2014:
	mov	d15,#0
.L2015:
	st.b	[a15]6,d15
.L61:

; ..\EAS\BSW\Com\Com.c	  2204      }
; ..\EAS\BSW\Com\Com.c	  2205  #endif
; ..\EAS\BSW\Com\Com.c	  2206  
; ..\EAS\BSW\Com\Com.c	  2207      return sendFlag;
	mov	d2,d9
.L1098:

; ..\EAS\BSW\Com\Com.c	  2208  }
	ret
.L942:
	
__Com_TxModeProcess_function_end:
	.size	Com_TxModeProcess,__Com_TxModeProcess_function_end-Com_TxModeProcess
.L677:
	; End of function
	
	.sdecl	'.text.Com.Com_TransmitPdu',code,cluster('Com_TransmitPdu')
	.sect	'.text.Com.Com_TransmitPdu'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2209  
; ..\EAS\BSW\Com\Com.c	  2210  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2211  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2212  * Function Name: Com_TransmitPdu
; ..\EAS\BSW\Com\Com.c	  2213  *
; ..\EAS\BSW\Com\Com.c	  2214  * Description:
; ..\EAS\BSW\Com\Com.c	  2215  *
; ..\EAS\BSW\Com\Com.c	  2216  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  2217  *
; ..\EAS\BSW\Com\Com.c	  2218  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2219  *
; ..\EAS\BSW\Com\Com.c	  2220  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2221  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2222  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2223  STATIC FUNC(void, COM_CODE) Com_TransmitPdu
; Function Com_TransmitPdu
.L354:
Com_TransmitPdu:	.type	func
	sub.a	a10,#8
.L1099:
	mov	d8,d4
.L1100:

; ..\EAS\BSW\Com\Com.c	  2224  (
; ..\EAS\BSW\Com\Com.c	  2225      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  2226  )
; ..\EAS\BSW\Com\Com.c	  2227  {
; ..\EAS\BSW\Com\Com.c	  2228  
; ..\EAS\BSW\Com\Com.c	  2229  
; ..\EAS\BSW\Com\Com.c	  2230      PduInfoType PduInfo;
; ..\EAS\BSW\Com\Com.c	  2231      Std_ReturnType txReqResult = E_NOT_OK;
; ..\EAS\BSW\Com\Com.c	  2232  
; ..\EAS\BSW\Com\Com.c	  2233  #if (COM_TXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  2234      boolean TxIpduCalloutResultFlag = TRUE;
	mov	d2,#1
.L1101:

; ..\EAS\BSW\Com\Com.c	  2235  #endif
; ..\EAS\BSW\Com\Com.c	  2236  
; ..\EAS\BSW\Com\Com.c	  2237  
; ..\EAS\BSW\Com\Com.c	  2238      PduInfo.SduDataPtr = (SduDataPtrType)COM_CFG_TXPDU_DATA_PTR(TxIpduId);
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L2020:
	st.a	[a10],a15
.L2021:

; ..\EAS\BSW\Com\Com.c	  2239      PduInfo.SduLength = COM_CFG_TXPDU_LENGTH(TxIpduId);
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]24
.L2022:
	st.h	[a10]4,d0
.L2023:

; ..\EAS\BSW\Com\Com.c	  2240  #if (COM_TX_DYN_PDU_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  2241      if(TRUE == COM_CFG_TXPDU_IS_DYN(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2242      {
; ..\EAS\BSW\Com\Com.c	  2243          PduInfo.SduLength = COM_TXPDU_DYN_LENGTH(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2244      }
; ..\EAS\BSW\Com\Com.c	  2245  #endif
; ..\EAS\BSW\Com\Com.c	  2246  
; ..\EAS\BSW\Com\Com.c	  2247  
; ..\EAS\BSW\Com\Com.c	  2248  #if (COM_TXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  2249      if(NULL_PTR != COM_CFG_TXPDU_CALLOUT(TxIpduId))
	mov.a	a2,#0
.L2024:
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]36
.L2025:
	jeq.a	a2,a15,.L63
.L2026:

; ..\EAS\BSW\Com\Com.c	  2250      {
; ..\EAS\BSW\Com\Com.c	  2251          TxIpduCalloutResultFlag = COM_CFG_TXPDU_CALLOUT(TxIpduId)(TxIpduId, &PduInfo);/*SWS_Com_00492*/
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]36
.L2027:
	mov.aa	a4,a10
	calli	a15
.L63:

; ..\EAS\BSW\Com\Com.c	  2252      }
; ..\EAS\BSW\Com\Com.c	  2253  
; ..\EAS\BSW\Com\Com.c	  2254      if(TRUE == TxIpduCalloutResultFlag)
	jne	d2,#1,.L64
.L2028:

; ..\EAS\BSW\Com\Com.c	  2255  #endif
; ..\EAS\BSW\Com\Com.c	  2256      {
; ..\EAS\BSW\Com\Com.c	  2257          /*SWS_Com_00138 759 760*/
; ..\EAS\BSW\Com\Com.c	  2258          txReqResult = PduR_ComTransmit(COM_CFG_TXPDU_MAP_PDUR(TxIpduId), &PduInfo);
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d4,[a15]16
.L2029:
	mov.aa	a4,a10
	call	PduR_ComTransmit
.L1102:

; ..\EAS\BSW\Com\Com.c	  2259  
; ..\EAS\BSW\Com\Com.c	  2260          if(E_OK == txReqResult)
	jne	d2,#0,.L65
.L2030:

; ..\EAS\BSW\Com\Com.c	  2261          {
; ..\EAS\BSW\Com\Com.c	  2262  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  2263              if(COM_CUB_TX == COM_CFG_TXPDU_UPDATEBIT_CLEARTYPE(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2264              {
; ..\EAS\BSW\Com\Com.c	  2265                  Com_ClearUpdateBit(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2266              }
; ..\EAS\BSW\Com\Com.c	  2267  #endif
; ..\EAS\BSW\Com\Com.c	  2268  
; ..\EAS\BSW\Com\Com.c	  2269              Com_TxPduState[TxIpduId] = COM_TXPDU_START_BUSY;
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L2031:
	addsc.a	a15,a15,d8,#0
.L2032:
	mov	d15,#2
.L2033:
	st.b	[a15],d15
.L2034:

; ..\EAS\BSW\Com\Com.c	  2270  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  2271              COM_TXPDU_TP_INDEX(TxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  2272  #endif
; ..\EAS\BSW\Com\Com.c	  2273  
; ..\EAS\BSW\Com\Com.c	  2274  #if(STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  2275              if(COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId) > (uint16)0)
	mul	d0,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.hu	d15,[a15]2
.L2035:
	jeq	d15,#0,.L66
.L2036:

; ..\EAS\BSW\Com\Com.c	  2276              {
; ..\EAS\BSW\Com\Com.c	  2277                  COM_TXPDU_MIN_DELAY_TIMER(TxIpduId) = COM_CFG_TXPDU_MIN_DELAY_TIMER(TxIpduId);/* start MDT*/
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L2037:
	movh.a	a2,#@his(ComTxPduCfgTable)
	lea	a2,[a2]@los(ComTxPduCfgTable)
	addsc.a	a2,a2,d0,#0
	ld.hu	d15,[a2]2
.L2038:
	st.h	[a15]4,d15
.L66:
.L64:

; ..\EAS\BSW\Com\Com.c	  2278              }
; ..\EAS\BSW\Com\Com.c	  2279  #endif
; ..\EAS\BSW\Com\Com.c	  2280          }
; ..\EAS\BSW\Com\Com.c	  2281          else
; ..\EAS\BSW\Com\Com.c	  2282          {
; ..\EAS\BSW\Com\Com.c	  2283  #if(STD_ON == COM_RETRY_TRANSMIT_REQUESTS)/*SWS_Com_00698 828 */
; ..\EAS\BSW\Com\Com.c	  2284              /* if PduR_ComTransmit retrun notok, and last msg is not finish,
; ..\EAS\BSW\Com\Com.c	  2285                 new txReq will be ignor, keep sending last msg
; ..\EAS\BSW\Com\Com.c	  2286              */
; ..\EAS\BSW\Com\Com.c	  2287              if(COM_TXPDU_START_BUSY != Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  2288              {
; ..\EAS\BSW\Com\Com.c	  2289                  Com_TxPduState[TxIpduId] = COM_TXPDU_START_RETX;
; ..\EAS\BSW\Com\Com.c	  2290              }
; ..\EAS\BSW\Com\Com.c	  2291  #else
; ..\EAS\BSW\Com\Com.c	  2292              Com_ProcessTxConf(TxIpduId, COM_TXPDU_START_TXNOTOK);/*consider it as tx not ok*/
; ..\EAS\BSW\Com\Com.c	  2293  #endif
; ..\EAS\BSW\Com\Com.c	  2294          }
; ..\EAS\BSW\Com\Com.c	  2295      }
; ..\EAS\BSW\Com\Com.c	  2296  
; ..\EAS\BSW\Com\Com.c	  2297  }
	ret
.L65:
	mov	d5,#5
	mov	d4,d8
.L1103:
	j	Com_ProcessTxConf
.L945:
	
__Com_TransmitPdu_function_end:
	.size	Com_TransmitPdu,__Com_TransmitPdu_function_end-Com_TransmitPdu
.L682:
	; End of function
	
	.sdecl	'.text.Com.Com_CbkTxAck_PDU',code,cluster('Com_CbkTxAck_PDU')
	.sect	'.text.Com.Com_CbkTxAck_PDU'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2298  
; ..\EAS\BSW\Com\Com.c	  2299  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2300  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2301  * Function Name: Com_CbkTxTOut_PDU
; ..\EAS\BSW\Com\Com.c	  2302  *
; ..\EAS\BSW\Com\Com.c	  2303  * Description:
; ..\EAS\BSW\Com\Com.c	  2304  *
; ..\EAS\BSW\Com\Com.c	  2305  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  2306  *
; ..\EAS\BSW\Com\Com.c	  2307  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2308  *
; ..\EAS\BSW\Com\Com.c	  2309  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2310  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2311  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2312  #if(STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  2313  STATIC FUNC(void, COM_CODE) Com_CbkTxTOut_PDU
; ..\EAS\BSW\Com\Com.c	  2314  (
; ..\EAS\BSW\Com\Com.c	  2315      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  2316  )
; ..\EAS\BSW\Com\Com.c	  2317  {
; ..\EAS\BSW\Com\Com.c	  2318  
; ..\EAS\BSW\Com\Com.c	  2319      Com_SignalIdType SigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2320  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2321      Com_SignalGroupIdType SignalGroupId = (Com_SignalGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  2322  #endif
; ..\EAS\BSW\Com\Com.c	  2323  
; ..\EAS\BSW\Com\Com.c	  2324  
; ..\EAS\BSW\Com\Com.c	  2325  
; ..\EAS\BSW\Com\Com.c	  2326      for(SigId = COM_CFG_TXPDU_SIG_START_NUM(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2327              SigId <= COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2328              SigId++)
; ..\EAS\BSW\Com\Com.c	  2329      {
; ..\EAS\BSW\Com\Com.c	  2330  
; ..\EAS\BSW\Com\Com.c	  2331          if(NULL_PTR != COM_CFG_TXSIG_TXTOINDICATION_FUN(SigId))
; ..\EAS\BSW\Com\Com.c	  2332          {
; ..\EAS\BSW\Com\Com.c	  2333              COM_CFG_TXSIG_TXTOINDICATION_FUN(SigId)();
; ..\EAS\BSW\Com\Com.c	  2334          }
; ..\EAS\BSW\Com\Com.c	  2335  
; ..\EAS\BSW\Com\Com.c	  2336  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2337          if(TRUE == COM_CFG_TXSIG_IS_GROUP_SIGNAL(SigId))
; ..\EAS\BSW\Com\Com.c	  2338          {
; ..\EAS\BSW\Com\Com.c	  2339              SignalGroupId = COM_CFG_TXSIG_GET_SIGGROUPID(SigId);
; ..\EAS\BSW\Com\Com.c	  2340              /* set sigId to the end of this group, 1 group only ack once */
; ..\EAS\BSW\Com\Com.c	  2341              SigId = COM_CFG_TXSIGGRP_SIGSTOP(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  2342          }
; ..\EAS\BSW\Com\Com.c	  2343  #endif
; ..\EAS\BSW\Com\Com.c	  2344  
; ..\EAS\BSW\Com\Com.c	  2345      }
; ..\EAS\BSW\Com\Com.c	  2346  }
; ..\EAS\BSW\Com\Com.c	  2347  
; ..\EAS\BSW\Com\Com.c	  2348  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2349  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2350  * Function Name: Com_TxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	  2351  *
; ..\EAS\BSW\Com\Com.c	  2352  * Description:
; ..\EAS\BSW\Com\Com.c	  2353  *
; ..\EAS\BSW\Com\Com.c	  2354  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  2355  *
; ..\EAS\BSW\Com\Com.c	  2356  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2357  *
; ..\EAS\BSW\Com\Com.c	  2358  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2359  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2360  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2361  STATIC FUNC(void, COM_CODE) Com_TxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	  2362  (
; ..\EAS\BSW\Com\Com.c	  2363      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  2364  )
; ..\EAS\BSW\Com\Com.c	  2365  {
; ..\EAS\BSW\Com\Com.c	  2366  
; ..\EAS\BSW\Com\Com.c	  2367      if((TRUE == COM_CFG_TXPDU_TIMEOUT_MONITOR_FLAG(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2368              && (COM_TIMER_STOP_VAL != COM_TXPDU_TIMEOUT(TxIpduId)))
; ..\EAS\BSW\Com\Com.c	  2369      {
; ..\EAS\BSW\Com\Com.c	  2370          /*SWS_Com_00445 */
; ..\EAS\BSW\Com\Com.c	  2371          if((uint16)0 != COM_TXPDU_TIMEOUT(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2372          {
; ..\EAS\BSW\Com\Com.c	  2373              COM_TXPDU_TIMEOUT(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  2374          }
; ..\EAS\BSW\Com\Com.c	  2375  
; ..\EAS\BSW\Com\Com.c	  2376          if((uint16)0 == COM_TXPDU_TIMEOUT(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2377          {
; ..\EAS\BSW\Com\Com.c	  2378  #if(STD_ON == COM_CANCEL_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2379              if(TRUE == COM_CFG_TXPDU_CANCEL_TRANSMIT_FLAG(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2380              {
; ..\EAS\BSW\Com\Com.c	  2381                  (void)PduR_ComCancelTransmit(COM_CFG_TXPDU_MAP_PDUR(TxIpduId));/*SWS_Com_00708*/
; ..\EAS\BSW\Com\Com.c	  2382              }
; ..\EAS\BSW\Com\Com.c	  2383  #endif
; ..\EAS\BSW\Com\Com.c	  2384  
; ..\EAS\BSW\Com\Com.c	  2385              COM_TXPDU_TIMEOUT(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  2386              Com_TxPduState[TxIpduId] = COM_TXPDU_START_IDLE;/* SWS_Com_00775no Tx any more*/
; ..\EAS\BSW\Com\Com.c	  2387  #if(STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  2388              COM_TXPDU_REQ_CONF_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  2389              COM_TXPDU_REP_NUM(TxIpduId) = (uint8)0;/*SWS_Com_00392 ignor rest repetition tx*/
; ..\EAS\BSW\Com\Com.c	  2390  #endif
; ..\EAS\BSW\Com\Com.c	  2391  
; ..\EAS\BSW\Com\Com.c	  2392  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  2393              COM_TXPDU_MIN_DELAY_TIMER(TxIpduId) = COM_TIMER_STOP_VAL;/* SWS_Com_00812 Stop MDT if TxTimeout */
; ..\EAS\BSW\Com\Com.c	  2394  #endif
; ..\EAS\BSW\Com\Com.c	  2395  
; ..\EAS\BSW\Com\Com.c	  2396              /*SWS_Com_00812 do not reset Pengding txRequest, when txTimeout,
; ..\EAS\BSW\Com\Com.c	  2397                like COM_TXPDU_TX_REQ_BACKUP  COM_TXPDU_TX_REQ_MINDELAY_BACKUP
; ..\EAS\BSW\Com\Com.c	  2398              */
; ..\EAS\BSW\Com\Com.c	  2399  
; ..\EAS\BSW\Com\Com.c	  2400  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  2401              COM_TXPDU_TP_INDEX(TxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  2402  #endif
; ..\EAS\BSW\Com\Com.c	  2403  
; ..\EAS\BSW\Com\Com.c	  2404  
; ..\EAS\BSW\Com\Com.c	  2405              Com_CbkTxTOut_PDU(TxIpduId);/*SWS_Com_00304*/
; ..\EAS\BSW\Com\Com.c	  2406  
; ..\EAS\BSW\Com\Com.c	  2407          }
; ..\EAS\BSW\Com\Com.c	  2408      }
; ..\EAS\BSW\Com\Com.c	  2409  }
; ..\EAS\BSW\Com\Com.c	  2410  #endif
; ..\EAS\BSW\Com\Com.c	  2411  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2412  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2413  * Function Name: Com_CbkTxAck_PDU
; ..\EAS\BSW\Com\Com.c	  2414  *
; ..\EAS\BSW\Com\Com.c	  2415  * Description:
; ..\EAS\BSW\Com\Com.c	  2416  *
; ..\EAS\BSW\Com\Com.c	  2417  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  2418  *
; ..\EAS\BSW\Com\Com.c	  2419  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2420  *
; ..\EAS\BSW\Com\Com.c	  2421  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2422  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2423  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2424  STATIC FUNC(void, COM_CODE) Com_CbkTxAck_PDU
; Function Com_CbkTxAck_PDU
.L356:
Com_CbkTxAck_PDU:	.type	func

; ..\EAS\BSW\Com\Com.c	  2425  (
; ..\EAS\BSW\Com\Com.c	  2426      PduIdType TxIpduId
; ..\EAS\BSW\Com\Com.c	  2427  )
; ..\EAS\BSW\Com\Com.c	  2428  {
; ..\EAS\BSW\Com\Com.c	  2429  
; ..\EAS\BSW\Com\Com.c	  2430      Com_SignalIdType TxSigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2431  
; ..\EAS\BSW\Com\Com.c	  2432  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2433      Com_SignalGroupIdType SignalGroupId = (Com_SignalGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  2434  #endif
; ..\EAS\BSW\Com\Com.c	  2435  
; ..\EAS\BSW\Com\Com.c	  2436      for(TxSigId = COM_CFG_TXPDU_SIG_START_NUM(TxIpduId);
	mul	d15,d4,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d8,[a15]4
.L1104:

; ..\EAS\BSW\Com\Com.c	  2437              TxSigId <= COM_CFG_TXPDU_SIG_STOP_NUM(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  2438              TxSigId++)
; ..\EAS\BSW\Com\Com.c	  2439      {
; ..\EAS\BSW\Com\Com.c	  2440          if(NULL_PTR != COM_CFG_TXSIG_CBKTXACK_FUN(TxSigId))
	mov.a	a12,#0
.L2043:
	mov	d9,d15
.L2044:
	j	.L68
.L69:
	mul	d15,d8,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]12
.L2045:
	jeq.a	a12,a15,.L70
.L2046:

; ..\EAS\BSW\Com\Com.c	  2441          {
; ..\EAS\BSW\Com\Com.c	  2442              COM_CFG_TXSIG_CBKTXACK_FUN(TxSigId)();
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]12
.L2047:
	calli	a15
.L70:
	add	d8,#1
.L1105:
	extr.u	d8,d8,#0,#16
.L68:
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d9,#0
	ld.hu	d15,[a15]6
.L2048:
	jge.u	d15,d8,.L69
.L2049:

; ..\EAS\BSW\Com\Com.c	  2443          }
; ..\EAS\BSW\Com\Com.c	  2444  
; ..\EAS\BSW\Com\Com.c	  2445  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2446          if(TRUE == COM_CFG_TXSIG_IS_GROUP_SIGNAL(TxSigId))
; ..\EAS\BSW\Com\Com.c	  2447          {
; ..\EAS\BSW\Com\Com.c	  2448              SignalGroupId = COM_CFG_TXSIG_GET_SIGGROUPID(TxSigId);
; ..\EAS\BSW\Com\Com.c	  2449              /* set sigId to the end of this group, 1 group only ack once */
; ..\EAS\BSW\Com\Com.c	  2450              TxSigId = COM_CFG_TXSIGGRP_SIGSTOP(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  2451          }
; ..\EAS\BSW\Com\Com.c	  2452  #endif
; ..\EAS\BSW\Com\Com.c	  2453  
; ..\EAS\BSW\Com\Com.c	  2454  
; ..\EAS\BSW\Com\Com.c	  2455  
; ..\EAS\BSW\Com\Com.c	  2456  
; ..\EAS\BSW\Com\Com.c	  2457      }
; ..\EAS\BSW\Com\Com.c	  2458  }
	ret
.L951:
	
__Com_CbkTxAck_PDU_function_end:
	.size	Com_CbkTxAck_PDU,__Com_CbkTxAck_PDU_function_end-Com_CbkTxAck_PDU
.L687:
	; End of function
	
	.sdecl	'.text.Com.Com_ProcessTxConf',code,cluster('Com_ProcessTxConf')
	.sect	'.text.Com.Com_ProcessTxConf'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2459  
; ..\EAS\BSW\Com\Com.c	  2460  
; ..\EAS\BSW\Com\Com.c	  2461  
; ..\EAS\BSW\Com\Com.c	  2462  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2463  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2464  * Function Name: Com_ProcessTxConf
; ..\EAS\BSW\Com\Com.c	  2465  *
; ..\EAS\BSW\Com\Com.c	  2466  * Description:   process tx confirmation
; ..\EAS\BSW\Com\Com.c	  2467  *
; ..\EAS\BSW\Com\Com.c	  2468  * Inputs:        TxIpduId,pduState
; ..\EAS\BSW\Com\Com.c	  2469  *
; ..\EAS\BSW\Com\Com.c	  2470  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2471  *
; ..\EAS\BSW\Com\Com.c	  2472  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2473  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  2474  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2475  STATIC FUNC(void, COM_CODE) Com_ProcessTxConf
; Function Com_ProcessTxConf
.L358:
Com_ProcessTxConf:	.type	func
	mov	d15,d4
.L1107:

; ..\EAS\BSW\Com\Com.c	  2476  (
; ..\EAS\BSW\Com\Com.c	  2477      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  2478      Com_TxPduStateType pduState
; ..\EAS\BSW\Com\Com.c	  2479  )
; ..\EAS\BSW\Com\Com.c	  2480  {
; ..\EAS\BSW\Com\Com.c	  2481      Com_TxPduStateType tmpState = pduState;
; ..\EAS\BSW\Com\Com.c	  2482  #if(STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  2483      /* if notok, the error confirmation dont count*/
; ..\EAS\BSW\Com\Com.c	  2484      /* confnum <= repnum, means unexpected frame may insert to repetition transmission, like tx from Com_TriggerIPDUSend, in this case, this confirmation dont count*/
; ..\EAS\BSW\Com\Com.c	  2485      if((tmpState == COM_TXPDU_START_TXOK)
; ..\EAS\BSW\Com\Com.c	  2486          && (COM_TXPDU_REQ_CONF_NUM(TxIpduId) > COM_TXPDU_REP_NUM(TxIpduId)))/* this also cover the COM_TXPDU_REQ_CONF_NUM(TxIpduId) > 0, as repnum is unsigned*/
; ..\EAS\BSW\Com\Com.c	  2487      {
; ..\EAS\BSW\Com\Com.c	  2488          COM_TXPDU_REQ_CONF_NUM(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  2489      }
; ..\EAS\BSW\Com\Com.c	  2490      if((uint8)0 == COM_TXPDU_REP_NUM(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2491      {
; ..\EAS\BSW\Com\Com.c	  2492          if(COM_TXPDU_REQ_CONF_NUM(TxIpduId) > (uint8)0)
; ..\EAS\BSW\Com\Com.c	  2493          {
; ..\EAS\BSW\Com\Com.c	  2494              COM_TXPDU_REQ_CONF_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  2495              COM_TXPDU_REP_NUM(TxIpduId) = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  2496              /*rep = 0, but confrep > 0 means lost txconf  */
; ..\EAS\BSW\Com\Com.c	  2497              tmpState = COM_TXPDU_START_TXNOTOK;
; ..\EAS\BSW\Com\Com.c	  2498          }
; ..\EAS\BSW\Com\Com.c	  2499      }
; ..\EAS\BSW\Com\Com.c	  2500  #endif
; ..\EAS\BSW\Com\Com.c	  2501  
; ..\EAS\BSW\Com\Com.c	  2502      if(tmpState == COM_TXPDU_START_TXOK)
	jne	d5,#4,.L71
.L2063:

; ..\EAS\BSW\Com\Com.c	  2503      {
; ..\EAS\BSW\Com\Com.c	  2504          Com_CbkTxAck_PDU(TxIpduId);
	call	Com_CbkTxAck_PDU
.L1106:
	j	.L72
.L71:

; ..\EAS\BSW\Com\Com.c	  2505      }
; ..\EAS\BSW\Com\Com.c	  2506      else
; ..\EAS\BSW\Com\Com.c	  2507      {
; ..\EAS\BSW\Com\Com.c	  2508          Com_CbkTxErrAck_PDU(TxIpduId);
	call	Com_CbkTxErrAck_PDU
.L72:

; ..\EAS\BSW\Com\Com.c	  2509      }
; ..\EAS\BSW\Com\Com.c	  2510  
; ..\EAS\BSW\Com\Com.c	  2511  #if(COM_TX_TIMEOUT_MONITOR == STD_ON)
; ..\EAS\BSW\Com\Com.c	  2512      /* Stop Tx Time out monitor*/
; ..\EAS\BSW\Com\Com.c	  2513      /*SWS_Com_00308, rep txpdu, deadline is stopped when all rep is send out*/
; ..\EAS\BSW\Com\Com.c	  2514      if(TRUE == COM_CFG_TXPDU_TIMEOUT_MONITOR_FLAG(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  2515      {
; ..\EAS\BSW\Com\Com.c	  2516          COM_TXPDU_TIMEOUT(TxIpduId) = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  2517      }
; ..\EAS\BSW\Com\Com.c	  2518  #endif
; ..\EAS\BSW\Com\Com.c	  2519  
; ..\EAS\BSW\Com\Com.c	  2520      Com_TxPduState[TxIpduId] = COM_TXPDU_START_IDLE;
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L2064:
	addsc.a	a15,a15,d15,#0
.L2065:
	mov	d15,#1
.L1108:
	st.b	[a15],d15
.L2066:

; ..\EAS\BSW\Com\Com.c	  2521  
; ..\EAS\BSW\Com\Com.c	  2522  }
	ret
.L959:
	
__Com_ProcessTxConf_function_end:
	.size	Com_ProcessTxConf,__Com_ProcessTxConf_function_end-Com_ProcessTxConf
.L697:
	; End of function
	
	.sdecl	'.text.Com.Com_CheckRxLength',code,cluster('Com_CheckRxLength')
	.sect	'.text.Com.Com_CheckRxLength'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2523  
; ..\EAS\BSW\Com\Com.c	  2524  
; ..\EAS\BSW\Com\Com.c	  2525  
; ..\EAS\BSW\Com\Com.c	  2526  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  2527  
; ..\EAS\BSW\Com\Com.c	  2528  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  2529  
; ..\EAS\BSW\Com\Com.c	  2530  
; ..\EAS\BSW\Com\Com.c	  2531  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2532  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2533  * Function Name: Com_CheckRxLength
; ..\EAS\BSW\Com\Com.c	  2534  *
; ..\EAS\BSW\Com\Com.c	  2535  * Description:   check if rx length is valid
; ..\EAS\BSW\Com\Com.c	  2536  *
; ..\EAS\BSW\Com\Com.c	  2537  * Inputs:        RxPduId,length
; ..\EAS\BSW\Com\Com.c	  2538  *
; ..\EAS\BSW\Com\Com.c	  2539  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2540  *
; ..\EAS\BSW\Com\Com.c	  2541  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2542  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2543  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2544  STATIC FUNC(boolean, COM_CODE) Com_CheckRxLength
; Function Com_CheckRxLength
.L360:
Com_CheckRxLength:	.type	func

; ..\EAS\BSW\Com\Com.c	  2545  (
; ..\EAS\BSW\Com\Com.c	  2546      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	  2547      PduLengthType length
; ..\EAS\BSW\Com\Com.c	  2548  )
; ..\EAS\BSW\Com\Com.c	  2549  {
; ..\EAS\BSW\Com\Com.c	  2550      boolean ret = FALSE;
; ..\EAS\BSW\Com\Com.c	  2551  
; ..\EAS\BSW\Com\Com.c	  2552      /*length check */ /*SWS_Com_00574*/
; ..\EAS\BSW\Com\Com.c	  2553  #if (STD_ON == COM_PADDING_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2554      if(length <= COM_CFG_RXPDU_LENGTH(RxPduId))
; ..\EAS\BSW\Com\Com.c	  2555      {
; ..\EAS\BSW\Com\Com.c	  2556          ret = TRUE;
; ..\EAS\BSW\Com\Com.c	  2557      }
; ..\EAS\BSW\Com\Com.c	  2558  #else
; ..\EAS\BSW\Com\Com.c	  2559  
; ..\EAS\BSW\Com\Com.c	  2560  #if (STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2561      if(TRUE == COM_CFG_RXPDU_IS_DYN(RxPduId))
; ..\EAS\BSW\Com\Com.c	  2562      {
; ..\EAS\BSW\Com\Com.c	  2563          if((length <= COM_CFG_RXPDU_LENGTH(RxPduId)) && (length >= COM_CFG_RXPDU_FIX_LENGTH(RxPduId)))
; ..\EAS\BSW\Com\Com.c	  2564          {
; ..\EAS\BSW\Com\Com.c	  2565              ret = TRUE;
; ..\EAS\BSW\Com\Com.c	  2566          }
; ..\EAS\BSW\Com\Com.c	  2567      }
; ..\EAS\BSW\Com\Com.c	  2568      else
; ..\EAS\BSW\Com\Com.c	  2569  #endif
; ..\EAS\BSW\Com\Com.c	  2570      {
; ..\EAS\BSW\Com\Com.c	  2571          if(length == COM_CFG_RXPDU_LENGTH(RxPduId))
	sha	d4,#5
.L1109:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d4,#0
	ld.hu	d15,[a15]28
.L2071:
	eq	d2,d5,d15
.L1110:

; ..\EAS\BSW\Com\Com.c	  2572          {
; ..\EAS\BSW\Com\Com.c	  2573              ret = TRUE;
; ..\EAS\BSW\Com\Com.c	  2574          }
; ..\EAS\BSW\Com\Com.c	  2575      }
; ..\EAS\BSW\Com\Com.c	  2576  #endif/* #if (STD_ON == COM_PADDING_SUPPORT) */
; ..\EAS\BSW\Com\Com.c	  2577  
; ..\EAS\BSW\Com\Com.c	  2578      return ret;
; ..\EAS\BSW\Com\Com.c	  2579  
; ..\EAS\BSW\Com\Com.c	  2580  }
	ret
.L964:
	
__Com_CheckRxLength_function_end:
	.size	Com_CheckRxLength,__Com_CheckRxLength_function_end-Com_CheckRxLength
.L702:
	; End of function
	
	.sdecl	'.text.Com.Com_InitRxPduValue',code,cluster('Com_InitRxPduValue')
	.sect	'.text.Com.Com_InitRxPduValue'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2581  
; ..\EAS\BSW\Com\Com.c	  2582  
; ..\EAS\BSW\Com\Com.c	  2583  
; ..\EAS\BSW\Com\Com.c	  2584  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2585  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2586  * Function Name: Com_CheckSigUpdateBit
; ..\EAS\BSW\Com\Com.c	  2587  *
; ..\EAS\BSW\Com\Com.c	  2588  * Description:   This service check if rx  signal's update bit is set
; ..\EAS\BSW\Com\Com.c	  2589  *
; ..\EAS\BSW\Com\Com.c	  2590  * Inputs:        RxIpduId, index
; ..\EAS\BSW\Com\Com.c	  2591  *
; ..\EAS\BSW\Com\Com.c	  2592  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	  2593  *
; ..\EAS\BSW\Com\Com.c	  2594  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2595  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2596  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2597  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2598  STATIC FUNC(boolean, COM_CODE) Com_CheckSigUpdateBit
; ..\EAS\BSW\Com\Com.c	  2599  (
; ..\EAS\BSW\Com\Com.c	  2600      PduIdType RxIpduId,
; ..\EAS\BSW\Com\Com.c	  2601      Com_SignalIdType index
; ..\EAS\BSW\Com\Com.c	  2602  )
; ..\EAS\BSW\Com\Com.c	  2603  {
; ..\EAS\BSW\Com\Com.c	  2604      boolean ret = FALSE;
; ..\EAS\BSW\Com\Com.c	  2605      PduLengthType tempByteIndex = COM_CFG_RXPDU_UPDATEBIT_INFO(RxIpduId)[index].UpdateByteIndex;
; ..\EAS\BSW\Com\Com.c	  2606      uint8 tempMaskValue = (uint8)(~(COM_CFG_RXPDU_UPDATEBIT_INFO(RxIpduId)[index].UpdateMaskValue));
; ..\EAS\BSW\Com\Com.c	  2607      uint8 tempValue = ((uint8 *)COM_CFG_RXPDU_DATA_PTR_TEMP(RxIpduId))[tempByteIndex];
; ..\EAS\BSW\Com\Com.c	  2608  
; ..\EAS\BSW\Com\Com.c	  2609      /* update bit will only copied in temp rx buffer, it will not copy to real buffer*/
; ..\EAS\BSW\Com\Com.c	  2610      if((uint8)0 != (uint8)(tempValue & tempMaskValue))
; ..\EAS\BSW\Com\Com.c	  2611      {
; ..\EAS\BSW\Com\Com.c	  2612          ret = TRUE;
; ..\EAS\BSW\Com\Com.c	  2613      }
; ..\EAS\BSW\Com\Com.c	  2614      return ret;
; ..\EAS\BSW\Com\Com.c	  2615  
; ..\EAS\BSW\Com\Com.c	  2616  }
; ..\EAS\BSW\Com\Com.c	  2617  #endif
; ..\EAS\BSW\Com\Com.c	  2618  
; ..\EAS\BSW\Com\Com.c	  2619  
; ..\EAS\BSW\Com\Com.c	  2620  
; ..\EAS\BSW\Com\Com.c	  2621  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2622  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2623  * Function Name: Com_InitRxOccOfPdu
; ..\EAS\BSW\Com\Com.c	  2624  *
; ..\EAS\BSW\Com\Com.c	  2625  * Description:   Init Rx signal's occ counter to 0, if configured
; ..\EAS\BSW\Com\Com.c	  2626  *
; ..\EAS\BSW\Com\Com.c	  2627  * Inputs:        sigId
; ..\EAS\BSW\Com\Com.c	  2628  *
; ..\EAS\BSW\Com\Com.c	  2629  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2630  *
; ..\EAS\BSW\Com\Com.c	  2631  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2632  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2633  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2634  #if((COM_RX_FILTER_SUPPORT == STD_ON) && (COM_MAX_FILTER_OCCURRENCE_NUM > 0))
; ..\EAS\BSW\Com\Com.c	  2635  STATIC FUNC(void, COM_CODE) Com_InitRxOccOfPdu
; ..\EAS\BSW\Com\Com.c	  2636  (
; ..\EAS\BSW\Com\Com.c	  2637      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	  2638  )
; ..\EAS\BSW\Com\Com.c	  2639  {
; ..\EAS\BSW\Com\Com.c	  2640      Com_SignalIdType SigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2641  
; ..\EAS\BSW\Com\Com.c	  2642      for(SigIndex = COM_CFG_RXPDU_SIG_START_NUM(RxIpduId); SigIndex <= COM_CFG_RXPDU_SIG_STOP_NUM(RxIpduId); SigIndex++)
; ..\EAS\BSW\Com\Com.c	  2643      {
; ..\EAS\BSW\Com\Com.c	  2644          if(NULL_PTR != COM_CFG_RXSIG_FILTER_PTR(SigIndex))
; ..\EAS\BSW\Com\Com.c	  2645          {
; ..\EAS\BSW\Com\Com.c	  2646              if(COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_FILTER_PTR(SigIndex)->occIndex)
; ..\EAS\BSW\Com\Com.c	  2647              {
; ..\EAS\BSW\Com\Com.c	  2648                  Com_Sig_Occurrence[COM_CFG_RXSIG_FILTER_PTR(SigIndex)->occIndex] = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  2649              }
; ..\EAS\BSW\Com\Com.c	  2650          }
; ..\EAS\BSW\Com\Com.c	  2651      }
; ..\EAS\BSW\Com\Com.c	  2652  }
; ..\EAS\BSW\Com\Com.c	  2653  #endif
; ..\EAS\BSW\Com\Com.c	  2654  
; ..\EAS\BSW\Com\Com.c	  2655  
; ..\EAS\BSW\Com\Com.c	  2656  
; ..\EAS\BSW\Com\Com.c	  2657  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2658  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2659  * Function Name: Com_InitRxPduValue
; ..\EAS\BSW\Com\Com.c	  2660  *
; ..\EAS\BSW\Com\Com.c	  2661  * Description:   Init Rx Pdu values
; ..\EAS\BSW\Com\Com.c	  2662  *
; ..\EAS\BSW\Com\Com.c	  2663  * Inputs:        RxIpduId
; ..\EAS\BSW\Com\Com.c	  2664  *
; ..\EAS\BSW\Com\Com.c	  2665  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2666  *
; ..\EAS\BSW\Com\Com.c	  2667  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2668  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2669  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2670  STATIC FUNC(void, COM_CODE) Com_InitRxPduValue
; Function Com_InitRxPduValue
.L362:
Com_InitRxPduValue:	.type	func
	mov	d9,d4
.L1111:

; ..\EAS\BSW\Com\Com.c	  2671  (
; ..\EAS\BSW\Com\Com.c	  2672      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	  2673  )
; ..\EAS\BSW\Com\Com.c	  2674  {
; ..\EAS\BSW\Com\Com.c	  2675      PduLengthType IndexData = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  2676      Com_SignalIdType SigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2677  
; ..\EAS\BSW\Com\Com.c	  2678      /* Step 1 clear all byte to 0*/
; ..\EAS\BSW\Com\Com.c	  2679      for(IndexData = (PduLengthType)0; IndexData < COM_CFG_RXPDU_LENGTH(RxIpduId); IndexData++)
	mov	d0,#0
.L1112:

; ..\EAS\BSW\Com\Com.c	  2680      {
; ..\EAS\BSW\Com\Com.c	  2681          ((uint8 *)COM_CFG_RXPDU_DATA_PTR(RxIpduId))[IndexData] = (uint8)0;
	mov	d1,d0
.L1114:
	j	.L74
.L75:
	sha	d15,d9,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]24
.L2156:
	addsc.a	a15,a15,d0,#0
.L1115:
	st.b	[a15],d1
.L1116:
	add	d0,#1
.L1113:
	extr.u	d0,d0,#0,#16
.L74:
	sha	d15,d9,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d2,[a15]28
.L2157:
	jlt.u	d0,d2,.L75
.L2158:

; ..\EAS\BSW\Com\Com.c	  2682      }
; ..\EAS\BSW\Com\Com.c	  2683      /* Step 2 init all signals of this pdu*/
; ..\EAS\BSW\Com\Com.c	  2684      for(SigIndex = COM_CFG_RXPDU_SIG_START_NUM(RxIpduId); SigIndex <= COM_CFG_RXPDU_SIG_STOP_NUM(RxIpduId); SigIndex++)
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d8,[a15]2
.L1117:
	j	.L76
.L77:

; ..\EAS\BSW\Com\Com.c	  2685      {
; ..\EAS\BSW\Com\Com.c	  2686          Com_ReplaceRxSignalWithInit(RxIpduId, SigIndex, FALSE);
	mov	d6,#0
	mov	e4,d8,d9
	call	Com_ReplaceRxSignalWithInit
.L2159:
	add	d8,#1
.L1118:
	extr.u	d8,d8,#0,#16
.L76:
	sha	d15,d9,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]4
.L2160:
	jge.u	d15,d8,.L77
.L2161:

; ..\EAS\BSW\Com\Com.c	  2687      }
; ..\EAS\BSW\Com\Com.c	  2688  
; ..\EAS\BSW\Com\Com.c	  2689  }
	ret
.L985:
	
__Com_InitRxPduValue_function_end:
	.size	Com_InitRxPduValue,__Com_InitRxPduValue_function_end-Com_InitRxPduValue
.L732:
	; End of function
	
	.sdecl	'.text.Com.Com_InitRxPdu',code,cluster('Com_InitRxPdu')
	.sect	'.text.Com.Com_InitRxPdu'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2690  
; ..\EAS\BSW\Com\Com.c	  2691  
; ..\EAS\BSW\Com\Com.c	  2692  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2693  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2694  * Function Name: Com_InitRxPdu
; ..\EAS\BSW\Com\Com.c	  2695  *
; ..\EAS\BSW\Com\Com.c	  2696  * Description:   Init Rx Pdu Regs, called when Init only
; ..\EAS\BSW\Com\Com.c	  2697  *
; ..\EAS\BSW\Com\Com.c	  2698  * Inputs:         RxIpduId, isStartFlag,InitFlag
; ..\EAS\BSW\Com\Com.c	  2699  *
; ..\EAS\BSW\Com\Com.c	  2700  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2701  *
; ..\EAS\BSW\Com\Com.c	  2702  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2703  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2704  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2705  
; ..\EAS\BSW\Com\Com.c	  2706  STATIC FUNC(void, COM_CODE) Com_InitRxPdu
; Function Com_InitRxPdu
.L364:
Com_InitRxPdu:	.type	func
	mov	e8,d5,d4
.L1120:

; ..\EAS\BSW\Com\Com.c	  2707  (
; ..\EAS\BSW\Com\Com.c	  2708      PduIdType RxIpduId,
; ..\EAS\BSW\Com\Com.c	  2709      boolean   isStartFlag
; ..\EAS\BSW\Com\Com.c	  2710  )
; ..\EAS\BSW\Com\Com.c	  2711  {
; ..\EAS\BSW\Com\Com.c	  2712  
; ..\EAS\BSW\Com\Com.c	  2713  
; ..\EAS\BSW\Com\Com.c	  2714  
; ..\EAS\BSW\Com\Com.c	  2715  
; ..\EAS\BSW\Com\Com.c	  2716  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  2717      COM_RXPDU_TP_INDEX(RxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  2718  #endif
; ..\EAS\BSW\Com\Com.c	  2719  
; ..\EAS\BSW\Com\Com.c	  2720  
; ..\EAS\BSW\Com\Com.c	  2721      COM_RXPDU_TEMP_LENGTH(RxIpduId) = (PduLengthType)0;
	mul	d15,d8,#6
.L1121:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2089:
	mov	d0,#0
.L2090:
	st.h	[a15],d0
.L2091:

; ..\EAS\BSW\Com\Com.c	  2722  
; ..\EAS\BSW\Com\Com.c	  2723  
; ..\EAS\BSW\Com\Com.c	  2724      /* time out monitor Init*/
; ..\EAS\BSW\Com\Com.c	  2725  #if (STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  2726      COM_RXPDU_TIMEOUT(RxIpduId) = COM_TIMER_STOP_VAL;
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2092:
	mov.u	d1,#65535
.L2093:
	st.h	[a15]4,d1
.L1122:

; ..\EAS\BSW\Com\Com.c	  2727  #if (STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2728      Com_ResetUpdateRxToTimer(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  2729  #endif
; ..\EAS\BSW\Com\Com.c	  2730      if(FALSE == isStartFlag)
	jne	d9,#0,.L78
.L1123:

; ..\EAS\BSW\Com\Com.c	  2731      {
; ..\EAS\BSW\Com\Com.c	  2732          COM_RXPDU_MONITOR_FLAG(RxIpduId) = FALSE;
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2094:
	st.b	[a15]2,d0
.L2095:
	j	.L79
.L78:

; ..\EAS\BSW\Com\Com.c	  2733      }
; ..\EAS\BSW\Com\Com.c	  2734      else
; ..\EAS\BSW\Com\Com.c	  2735      {
; ..\EAS\BSW\Com\Com.c	  2736          COM_RXPDU_MONITOR_FLAG(RxIpduId) = COM_CFG_RXPDU_MONITOR_FLAG(RxIpduId);
	mul	d15,d8,#6
.L1124:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a2,a15,d15,#0
.L1125:
	sha	d15,d8,#5
.L1126:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L2096:
	st.b	[a2]2,d15
.L79:

; ..\EAS\BSW\Com\Com.c	  2737      }
; ..\EAS\BSW\Com\Com.c	  2738  #endif
; ..\EAS\BSW\Com\Com.c	  2739  
; ..\EAS\BSW\Com\Com.c	  2740      /*Pdu Data Length Init*/
; ..\EAS\BSW\Com\Com.c	  2741      Com_InitRxPduValue(RxIpduId);
	call	Com_InitRxPduValue
.L1119:

; ..\EAS\BSW\Com\Com.c	  2742  
; ..\EAS\BSW\Com\Com.c	  2743  
; ..\EAS\BSW\Com\Com.c	  2744      if(FALSE == isStartFlag)
; ..\EAS\BSW\Com\Com.c	  2745      {
; ..\EAS\BSW\Com\Com.c	  2746          Com_RxPduState[RxIpduId] = COM_RXPDU_STOP;/*SWS_Com_444 all group stop at Init*/
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1127:
	addsc.a	a15,a15,d8,#0
.L1128:
	ne	d15,d9,#0
.L1129:
	st.b	[a15],d15
.L2097:

; ..\EAS\BSW\Com\Com.c	  2747      }
; ..\EAS\BSW\Com\Com.c	  2748      else
; ..\EAS\BSW\Com\Com.c	  2749      {
; ..\EAS\BSW\Com\Com.c	  2750          Com_RxPduState[RxIpduId] = COM_RXPDU_START_IDLE;/*SWS_Com_840*/
; ..\EAS\BSW\Com\Com.c	  2751      }
; ..\EAS\BSW\Com\Com.c	  2752  
; ..\EAS\BSW\Com\Com.c	  2753  }
	ret
.L973:
	
__Com_InitRxPdu_function_end:
	.size	Com_InitRxPdu,__Com_InitRxPdu_function_end-Com_InitRxPdu
.L712:
	; End of function
	
	.sdecl	'.text.Com.Com_SwitchRxPduMode',code,cluster('Com_SwitchRxPduMode')
	.sect	'.text.Com.Com_SwitchRxPduMode'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2754  
; ..\EAS\BSW\Com\Com.c	  2755  
; ..\EAS\BSW\Com\Com.c	  2756  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2757  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2758  * Function Name: Com_SwitchRxPduMode
; ..\EAS\BSW\Com\Com.c	  2759  *
; ..\EAS\BSW\Com\Com.c	  2760  * Description:   Init Rx Pdu Regs When PduGroupMode Switch, called PduMode Switch
; ..\EAS\BSW\Com\Com.c	  2761  *
; ..\EAS\BSW\Com\Com.c	  2762  * Inputs:         RxIpduId, isStartFlag,InitFlag
; ..\EAS\BSW\Com\Com.c	  2763  *
; ..\EAS\BSW\Com\Com.c	  2764  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2765  *
; ..\EAS\BSW\Com\Com.c	  2766  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2767  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2768  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2769  #if(STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	  2770  STATIC FUNC(void, COM_CODE) Com_SwitchRxPduMode
; Function Com_SwitchRxPduMode
.L366:
Com_SwitchRxPduMode:	.type	func
	mov	e8,d5,d4
.L1130:

; ..\EAS\BSW\Com\Com.c	  2771  (
; ..\EAS\BSW\Com\Com.c	  2772      PduIdType RxIpduId,
; ..\EAS\BSW\Com\Com.c	  2773      boolean   isStartFlag,
; ..\EAS\BSW\Com\Com.c	  2774      boolean   InitFlag
; ..\EAS\BSW\Com\Com.c	  2775  )
; ..\EAS\BSW\Com\Com.c	  2776  {
; ..\EAS\BSW\Com\Com.c	  2777      COM_RXPDU_TEMP_LENGTH(RxIpduId) = (PduLengthType)0;
	mul	d15,d8,#6
.L1131:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2102:
	mov	d0,#0
.L2103:
	st.h	[a15],d0
.L1132:

; ..\EAS\BSW\Com\Com.c	  2778  
; ..\EAS\BSW\Com\Com.c	  2779  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  2780      COM_RXPDU_TP_INDEX(RxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  2781  #endif
; ..\EAS\BSW\Com\Com.c	  2782  
; ..\EAS\BSW\Com\Com.c	  2783  
; ..\EAS\BSW\Com\Com.c	  2784  
; ..\EAS\BSW\Com\Com.c	  2785      /*Pdu Data Length Init
; ..\EAS\BSW\Com\Com.c	  2786        Start-> Stop keep payload data unchange
; ..\EAS\BSW\Com\Com.c	  2787        Stop->start, decide by InitFlag SWS_Com_222
; ..\EAS\BSW\Com\Com.c	  2788      */
; ..\EAS\BSW\Com\Com.c	  2789  
; ..\EAS\BSW\Com\Com.c	  2790      if((TRUE == isStartFlag) && (TRUE == InitFlag))
	jeq	d9,#0,.L80
.L1133:
	jne	d6,#1,.L81
.L2104:

; ..\EAS\BSW\Com\Com.c	  2791      {
; ..\EAS\BSW\Com\Com.c	  2792          Com_InitRxPduValue(RxIpduId);
	call	Com_InitRxPduValue
.L81:
.L80:

; ..\EAS\BSW\Com\Com.c	  2793      }
; ..\EAS\BSW\Com\Com.c	  2794  
; ..\EAS\BSW\Com\Com.c	  2795  #if((COM_RX_FILTER_SUPPORT == STD_ON) && (COM_MAX_FILTER_OCCURRENCE_NUM > 0))
; ..\EAS\BSW\Com\Com.c	  2796      /* clear all occ signal's occ counter of this pdu */
; ..\EAS\BSW\Com\Com.c	  2797      Com_InitRxOccOfPdu(RxIpduId);/*SWS_Com_00787-4*/
; ..\EAS\BSW\Com\Com.c	  2798  #endif
; ..\EAS\BSW\Com\Com.c	  2799  
; ..\EAS\BSW\Com\Com.c	  2800  
; ..\EAS\BSW\Com\Com.c	  2801  
; ..\EAS\BSW\Com\Com.c	  2802  #if (STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  2803      COM_RXPDU_TIMEOUT(RxIpduId) = COM_TIMER_STOP_VAL;/*SWS_Com_00787-2*/
	mul	d15,d8,#6
.L1134:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2105:
	mov.u	d0,#65535
.L2106:
	st.h	[a15]4,d0
.L1135:

; ..\EAS\BSW\Com\Com.c	  2804  
; ..\EAS\BSW\Com\Com.c	  2805      if(FALSE == isStartFlag)/* SWS_Com_685 ,Start-> Stop, time monitor is disable*/
	jne	d9,#0,.L82
.L1136:

; ..\EAS\BSW\Com\Com.c	  2806      {
; ..\EAS\BSW\Com\Com.c	  2807          COM_RXPDU_MONITOR_FLAG(RxIpduId) = FALSE;
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2107:
	mov	d15,#0
.L2108:
	st.b	[a15]2,d15
.L2109:
	j	.L83
.L82:

; ..\EAS\BSW\Com\Com.c	  2808      }
; ..\EAS\BSW\Com\Com.c	  2809      else
; ..\EAS\BSW\Com\Com.c	  2810      {
; ..\EAS\BSW\Com\Com.c	  2811          /*SWS_Com_787 stop->start, timer must be restart*/
; ..\EAS\BSW\Com\Com.c	  2812          COM_RXPDU_MONITOR_FLAG(RxIpduId) = COM_CFG_RXPDU_MONITOR_FLAG(RxIpduId);
	mul	d15,d8,#6
.L1137:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a2,a15,d15,#0
.L1138:
	sha	d15,d8,#5
.L1139:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L2110:
	st.b	[a2]2,d15
.L83:

; ..\EAS\BSW\Com\Com.c	  2813      }
; ..\EAS\BSW\Com\Com.c	  2814  #endif
; ..\EAS\BSW\Com\Com.c	  2815  
; ..\EAS\BSW\Com\Com.c	  2816      if(FALSE == isStartFlag)
; ..\EAS\BSW\Com\Com.c	  2817      {
; ..\EAS\BSW\Com\Com.c	  2818          Com_RxPduState[RxIpduId] = COM_RXPDU_STOP;
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1140:
	addsc.a	a15,a15,d8,#0
.L1141:
	ne	d15,d9,#0
.L1142:
	st.b	[a15],d15
.L2111:

; ..\EAS\BSW\Com\Com.c	  2819      }
; ..\EAS\BSW\Com\Com.c	  2820      else
; ..\EAS\BSW\Com\Com.c	  2821      {
; ..\EAS\BSW\Com\Com.c	  2822          Com_RxPduState[RxIpduId] = COM_RXPDU_START_IDLE;/*SWS_Com_114*/
; ..\EAS\BSW\Com\Com.c	  2823      }
; ..\EAS\BSW\Com\Com.c	  2824  
; ..\EAS\BSW\Com\Com.c	  2825  
; ..\EAS\BSW\Com\Com.c	  2826  }
	ret
.L976:
	
__Com_SwitchRxPduMode_function_end:
	.size	Com_SwitchRxPduMode,__Com_SwitchRxPduMode_function_end-Com_SwitchRxPduMode
.L717:
	; End of function
	
	.sdecl	'.text.Com.Com_RxInit',code,cluster('Com_RxInit')
	.sect	'.text.Com.Com_RxInit'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2827  #endif/* #if(STD_ON == COM_IPDU_GROUP_FUN)*/
; ..\EAS\BSW\Com\Com.c	  2828  
; ..\EAS\BSW\Com\Com.c	  2829  
; ..\EAS\BSW\Com\Com.c	  2830  
; ..\EAS\BSW\Com\Com.c	  2831  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2832  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2833  * Function Name: Com_RxInit
; ..\EAS\BSW\Com\Com.c	  2834  *
; ..\EAS\BSW\Com\Com.c	  2835  * Description:   rx initialize.
; ..\EAS\BSW\Com\Com.c	  2836  *
; ..\EAS\BSW\Com\Com.c	  2837  * Inputs:         None
; ..\EAS\BSW\Com\Com.c	  2838  *
; ..\EAS\BSW\Com\Com.c	  2839  * Outputs:          None
; ..\EAS\BSW\Com\Com.c	  2840  *
; ..\EAS\BSW\Com\Com.c	  2841  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2842  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2843  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2844  STATIC FUNC(void, COM_CODE) Com_RxInit
; Function Com_RxInit
.L368:
Com_RxInit:	.type	func

; ..\EAS\BSW\Com\Com.c	  2845  (
; ..\EAS\BSW\Com\Com.c	  2846      void
; ..\EAS\BSW\Com\Com.c	  2847  )
; ..\EAS\BSW\Com\Com.c	  2848  {
; ..\EAS\BSW\Com\Com.c	  2849  
; ..\EAS\BSW\Com\Com.c	  2850      PduIdType IpduIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  2851  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  2852      Com_SignalIdType Index = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2853  #endif
; ..\EAS\BSW\Com\Com.c	  2854  
; ..\EAS\BSW\Com\Com.c	  2855  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  2856      for(Index = (Com_SignalIdType)0; Index < COM_GWSIG_NUM; Index++)
; ..\EAS\BSW\Com\Com.c	  2857      {
; ..\EAS\BSW\Com\Com.c	  2858          Com_GWSigFlag[Index] = FALSE;
; ..\EAS\BSW\Com\Com.c	  2859      }
; ..\EAS\BSW\Com\Com.c	  2860  #endif
; ..\EAS\BSW\Com\Com.c	  2861  
; ..\EAS\BSW\Com\Com.c	  2862      for(IpduIndex = (PduIdType)0; IpduIndex < COM_RXPDU_NUM; IpduIndex++)
	mov	d8,#0
.L1143:
	mov	d9,#58
.L2116:
	j	.L84
.L85:

; ..\EAS\BSW\Com\Com.c	  2863      {
; ..\EAS\BSW\Com\Com.c	  2864  
; ..\EAS\BSW\Com\Com.c	  2865  #if (STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	  2866          if(TRUE == COM_CFG_RXPDUGROUP_FLAG(IpduIndex))
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]6
.L2117:
	jne	d15,#1,.L86
.L2118:

; ..\EAS\BSW\Com\Com.c	  2867          {
; ..\EAS\BSW\Com\Com.c	  2868              Com_InitRxPdu(IpduIndex, FALSE);
	mov	d5,#0
.L2119:
	j	.L87
.L86:

; ..\EAS\BSW\Com\Com.c	  2869          }
; ..\EAS\BSW\Com\Com.c	  2870          else
; ..\EAS\BSW\Com\Com.c	  2871  #endif
; ..\EAS\BSW\Com\Com.c	  2872          {
; ..\EAS\BSW\Com\Com.c	  2873              Com_InitRxPdu(IpduIndex, TRUE);
	mov	d5,#1
.L87:
	mov	d4,d8
.L1144:
	call	Com_InitRxPdu
.L1145:
	add	d8,#1
.L84:
	jlt.u	d8,d9,.L85
.L2120:

; ..\EAS\BSW\Com\Com.c	  2874          }
; ..\EAS\BSW\Com\Com.c	  2875      }
; ..\EAS\BSW\Com\Com.c	  2876  
; ..\EAS\BSW\Com\Com.c	  2877  }
	ret
.L980:
	
__Com_RxInit_function_end:
	.size	Com_RxInit,__Com_RxInit_function_end-Com_RxInit
.L722:
	; End of function
	
	.sdecl	'.text.Com.Com_ReplaceRxSignalWithInit',code,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.text.Com.Com_ReplaceRxSignalWithInit'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2878  
; ..\EAS\BSW\Com\Com.c	  2879  
; ..\EAS\BSW\Com\Com.c	  2880  
; ..\EAS\BSW\Com\Com.c	  2881  
; ..\EAS\BSW\Com\Com.c	  2882  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2883  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2884  * Function Name: Com_ReplaceRxSignalWithInit
; ..\EAS\BSW\Com\Com.c	  2885  *
; ..\EAS\BSW\Com\Com.c	  2886  * Description:   replace signal with init value, called when init or rxsignal timeout
; ..\EAS\BSW\Com\Com.c	  2887  *
; ..\EAS\BSW\Com\Com.c	  2888  * Inputs:        sigId
; ..\EAS\BSW\Com\Com.c	  2889  *
; ..\EAS\BSW\Com\Com.c	  2890  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2891  *
; ..\EAS\BSW\Com\Com.c	  2892  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2893  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2894  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2895  STATIC FUNC(void, COM_CODE) Com_ReplaceRxSignalWithInit
; Function Com_ReplaceRxSignalWithInit
.L370:
Com_ReplaceRxSignalWithInit:	.type	func
	mov	d8,d5
.L1148:

; ..\EAS\BSW\Com\Com.c	  2896  (
; ..\EAS\BSW\Com\Com.c	  2897      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	  2898      uint16 sigId,
; ..\EAS\BSW\Com\Com.c	  2899      boolean needRoutOut
; ..\EAS\BSW\Com\Com.c	  2900  )
; ..\EAS\BSW\Com\Com.c	  2901  {
; ..\EAS\BSW\Com\Com.c	  2902      PduLengthType sigLen = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  2903  
; ..\EAS\BSW\Com\Com.c	  2904      sigLen = COM_CFG_RXSIG_LENGTH(sigId);
	mul	d15,d8,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d9,[a15]10
.L1149:

; ..\EAS\BSW\Com\Com.c	  2905  #if (STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2906      if(COM_SIG_DYN == COM_CFG_RXSIG_TYPE(sigId))
; ..\EAS\BSW\Com\Com.c	  2907      {
; ..\EAS\BSW\Com\Com.c	  2908          sigLen = COM_CFG_RXSIG_INIT_VALUE_LEN(sigId);
; ..\EAS\BSW\Com\Com.c	  2909          COM_RXPDU_DYN_LENGTH(RxPduId) = COM_CFG_RXSIG_START_BYTE_INDEX(sigId) + sigLen;
; ..\EAS\BSW\Com\Com.c	  2910      }
; ..\EAS\BSW\Com\Com.c	  2911  #endif
; ..\EAS\BSW\Com\Com.c	  2912  
; ..\EAS\BSW\Com\Com.c	  2913      /* copy init value to real buffer*/
; ..\EAS\BSW\Com\Com.c	  2914      COM_CFG_RXSIG_WRITE_SIG_FUN(sigId)(COM_CFG_RXSIG_INIT_VALUE_PTR(sigId), COM_CFG_RXPDU_DATA_PTR(RxPduId),  sigLen);
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]36
.L2076:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a4,[a15]4
.L2077:
	sha	d4,#5
.L1146:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d4,#0
	ld.a	a5,[a15]24
.L2078:
	mov	d4,d9
.L1150:
	calli	a2
.L1147:

; ..\EAS\BSW\Com\Com.c	  2915  #if (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2916      /* Also copy to shadow buffer*/
; ..\EAS\BSW\Com\Com.c	  2917      if(NULL_PTR != COM_CFG_RXSIG_GROUP_TEMP_BUF(sigId))
	mov.a	a2,#0
.L2079:
	mul	d15,d8,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]16
.L2080:
	jeq.a	a2,a15,.L88
.L2081:

; ..\EAS\BSW\Com\Com.c	  2918      {
; ..\EAS\BSW\Com\Com.c	  2919          COM_CFG_RXSIG_COPY_SIG_FUN(sigId)(COM_CFG_RXSIG_INIT_VALUE_PTR(sigId), COM_CFG_RXSIG_GROUP_TEMP_BUF(sigId), sigLen);
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]44
.L2082:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a4,[a15]4
.L2083:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a5,[a15]16
.L2084:
	mov	d4,d9
.L1151:
	ji	a2
.L88:

; ..\EAS\BSW\Com\Com.c	  2920      }
; ..\EAS\BSW\Com\Com.c	  2921  #if (STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2922      if(NULL_PTR != COM_CFG_RXSIG_GROUP_TEMPLENGTH_PTR(sigId))
; ..\EAS\BSW\Com\Com.c	  2923      {
; ..\EAS\BSW\Com\Com.c	  2924          *COM_CFG_RXSIG_GROUP_TEMPLENGTH_PTR(sigId) = sigLen;
; ..\EAS\BSW\Com\Com.c	  2925      }
; ..\EAS\BSW\Com\Com.c	  2926  #endif
; ..\EAS\BSW\Com\Com.c	  2927  #endif
; ..\EAS\BSW\Com\Com.c	  2928  
; ..\EAS\BSW\Com\Com.c	  2929  
; ..\EAS\BSW\Com\Com.c	  2930  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  2931      if(TRUE == needRoutOut)
; ..\EAS\BSW\Com\Com.c	  2932      {
; ..\EAS\BSW\Com\Com.c	  2933          /*if signal is rx ok, set GwFlag, GwFlag will only be cleared*/
; ..\EAS\BSW\Com\Com.c	  2934          if(COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_GW_INDEX(sigId))
; ..\EAS\BSW\Com\Com.c	  2935          {
; ..\EAS\BSW\Com\Com.c	  2936              Com_GWSigFlag[COM_CFG_RXSIG_GW_INDEX(sigId)] = TRUE;
; ..\EAS\BSW\Com\Com.c	  2937  
; ..\EAS\BSW\Com\Com.c	  2938          }
; ..\EAS\BSW\Com\Com.c	  2939      }
; ..\EAS\BSW\Com\Com.c	  2940  #endif
; ..\EAS\BSW\Com\Com.c	  2941  
; ..\EAS\BSW\Com\Com.c	  2942  }
	ret
.L968:
	
__Com_ReplaceRxSignalWithInit_function_end:
	.size	Com_ReplaceRxSignalWithInit,__Com_ReplaceRxSignalWithInit_function_end-Com_ReplaceRxSignalWithInit
.L707:
	; End of function
	
	.sdecl	'.text.Com.Com_HandleRxPdu_DirectCopy',code,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.text.Com.Com_HandleRxPdu_DirectCopy'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  2943  
; ..\EAS\BSW\Com\Com.c	  2944  
; ..\EAS\BSW\Com\Com.c	  2945  
; ..\EAS\BSW\Com\Com.c	  2946  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2947  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  2948  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2949  * Function Name: Com_RxPduInvalid
; ..\EAS\BSW\Com\Com.c	  2950  *
; ..\EAS\BSW\Com\Com.c	  2951  * Description:   do all invalid action when rx pdu got following cases:
; ..\EAS\BSW\Com\Com.c	  2952  *                1.rxCallout return not ok
; ..\EAS\BSW\Com\Com.c	  2953  *                2.tp rx result is not ok
; ..\EAS\BSW\Com\Com.c	  2954  *
; ..\EAS\BSW\Com\Com.c	  2955  * Inputs:        RxPduId:
; ..\EAS\BSW\Com\Com.c	  2956  *                invalidFlag:tp packet result only
; ..\EAS\BSW\Com\Com.c	  2957  *
; ..\EAS\BSW\Com\Com.c	  2958  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  2959  *
; ..\EAS\BSW\Com\Com.c	  2960  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  2961  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  2962  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  2963  STATIC FUNC(void, COM_CODE) Com_RxPduInvalid
; ..\EAS\BSW\Com\Com.c	  2964  (
; ..\EAS\BSW\Com\Com.c	  2965      PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	  2966  )
; ..\EAS\BSW\Com\Com.c	  2967  {
; ..\EAS\BSW\Com\Com.c	  2968      Com_SignalIdType signalIndex =  (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2969  #if (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2970      Com_SignalIdType grpSigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  2971      Com_SignalGroupIdType grpId = (Com_SignalGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  2972  #endif
; ..\EAS\BSW\Com\Com.c	  2973  
; ..\EAS\BSW\Com\Com.c	  2974      for(signalIndex = COM_CFG_RXPDU_SIG_START_NUM(RxPduId); signalIndex <= COM_CFG_RXPDU_SIG_STOP_NUM(RxPduId); signalIndex++)
; ..\EAS\BSW\Com\Com.c	  2975      {
; ..\EAS\BSW\Com\Com.c	  2976          if(COM_NOTIFY == COM_CFG_RXSIG_INVALID_ACTION(signalIndex))
; ..\EAS\BSW\Com\Com.c	  2977          {
; ..\EAS\BSW\Com\Com.c	  2978              COM_CFG_RXSIG_CBKINV_FUN(signalIndex)();
; ..\EAS\BSW\Com\Com.c	  2979          }
; ..\EAS\BSW\Com\Com.c	  2980          else if(COM_REPLACE == COM_CFG_RXSIG_INVALID_ACTION(signalIndex))
; ..\EAS\BSW\Com\Com.c	  2981          {
; ..\EAS\BSW\Com\Com.c	  2982  
; ..\EAS\BSW\Com\Com.c	  2983  #if (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  2984              if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(signalIndex))
; ..\EAS\BSW\Com\Com.c	  2985              {
; ..\EAS\BSW\Com\Com.c	  2986                  grpId = COM_CFG_RXSIG_GET_SIGGROUPID(signalIndex);
; ..\EAS\BSW\Com\Com.c	  2987                  for(grpSigIndex = COM_CFG_RXSIGGRP_SIGSTART(grpId); grpSigIndex <= COM_CFG_RXSIGGRP_SIGSTOP(grpId); grpSigIndex++)
; ..\EAS\BSW\Com\Com.c	  2988                  {
; ..\EAS\BSW\Com\Com.c	  2989                      Com_ReplaceRxSignalWithInit(RxPduId, grpSigIndex, TRUE);
; ..\EAS\BSW\Com\Com.c	  2990                  }
; ..\EAS\BSW\Com\Com.c	  2991              }
; ..\EAS\BSW\Com\Com.c	  2992              else
; ..\EAS\BSW\Com\Com.c	  2993  #endif
; ..\EAS\BSW\Com\Com.c	  2994              {
; ..\EAS\BSW\Com\Com.c	  2995                  Com_ReplaceRxSignalWithInit(RxPduId, signalIndex, TRUE);
; ..\EAS\BSW\Com\Com.c	  2996              }
; ..\EAS\BSW\Com\Com.c	  2997  
; ..\EAS\BSW\Com\Com.c	  2998          }
; ..\EAS\BSW\Com\Com.c	  2999          else
; ..\EAS\BSW\Com\Com.c	  3000          {
; ..\EAS\BSW\Com\Com.c	  3001              /* do nothing*/
; ..\EAS\BSW\Com\Com.c	  3002          }
; ..\EAS\BSW\Com\Com.c	  3003  
; ..\EAS\BSW\Com\Com.c	  3004  #if (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3005          if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(signalIndex))
; ..\EAS\BSW\Com\Com.c	  3006          {
; ..\EAS\BSW\Com\Com.c	  3007              grpId = COM_CFG_RXSIG_GET_SIGGROUPID(signalIndex);
; ..\EAS\BSW\Com\Com.c	  3008              /* set sigId to the end of this group */
; ..\EAS\BSW\Com\Com.c	  3009              signalIndex = COM_CFG_RXSIGGRP_SIGSTOP(grpId);
; ..\EAS\BSW\Com\Com.c	  3010          }
; ..\EAS\BSW\Com\Com.c	  3011  #endif
; ..\EAS\BSW\Com\Com.c	  3012  
; ..\EAS\BSW\Com\Com.c	  3013      }
; ..\EAS\BSW\Com\Com.c	  3014  }
; ..\EAS\BSW\Com\Com.c	  3015  #endif
; ..\EAS\BSW\Com\Com.c	  3016  
; ..\EAS\BSW\Com\Com.c	  3017  
; ..\EAS\BSW\Com\Com.c	  3018  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3019  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3020  * Function Name: Com_HandleRxPdu_DirectCopy
; ..\EAS\BSW\Com\Com.c	  3021  *
; ..\EAS\BSW\Com\Com.c	  3022  * Description:   rx process if directcopy rx pdu is received
; ..\EAS\BSW\Com\Com.c	  3023  *
; ..\EAS\BSW\Com\Com.c	  3024  * Inputs:        RxPduId:
; ..\EAS\BSW\Com\Com.c	  3025  *
; ..\EAS\BSW\Com\Com.c	  3026  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3027  *
; ..\EAS\BSW\Com\Com.c	  3028  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3029  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3030  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3031  STATIC FUNC(void, COM_CODE) Com_HandleRxPdu_DirectCopy
; Function Com_HandleRxPdu_DirectCopy
.L372:
Com_HandleRxPdu_DirectCopy:	.type	func

; ..\EAS\BSW\Com\Com.c	  3032  (
; ..\EAS\BSW\Com\Com.c	  3033      PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	  3034  )
; ..\EAS\BSW\Com\Com.c	  3035  {
; ..\EAS\BSW\Com\Com.c	  3036      Com_SignalIdType RxSigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3037  
; ..\EAS\BSW\Com\Com.c	  3038      for(RxSigId = COM_CFG_RXPDU_SIG_START_NUM(RxPduId);
	sha	d15,d4,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d8,[a15]2
.L1152:

; ..\EAS\BSW\Com\Com.c	  3039              RxSigId <= COM_CFG_RXPDU_SIG_STOP_NUM(RxPduId);
; ..\EAS\BSW\Com\Com.c	  3040              RxSigId++)
; ..\EAS\BSW\Com\Com.c	  3041      {
; ..\EAS\BSW\Com\Com.c	  3042  #if(STD_ON == COM_PADDING_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3043          if(COM_CFG_RXSIG_MIN_BYTE(RxSigId) <= COM_RXPDU_TEMP_LENGTH(RxPduId))/* rx data length may be smaller than cfg length*/
; ..\EAS\BSW\Com\Com.c	  3044  #endif
; ..\EAS\BSW\Com\Com.c	  3045          {
; ..\EAS\BSW\Com\Com.c	  3046              /*if signal is rx ok, set GwFlag, GwFlag will only be cleared in mainfunctionR*/
; ..\EAS\BSW\Com\Com.c	  3047  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  3048              if(COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_GW_INDEX(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3049              {
; ..\EAS\BSW\Com\Com.c	  3050                  Com_GWSigFlag[COM_CFG_RXSIG_GW_INDEX(RxSigId)] = TRUE;
; ..\EAS\BSW\Com\Com.c	  3051              }
; ..\EAS\BSW\Com\Com.c	  3052  #endif
; ..\EAS\BSW\Com\Com.c	  3053              if(NULL_PTR != COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId))
	mov.a	a12,#0
.L2166:
	mov	d9,d15
.L2167:
	j	.L89
.L90:
	mul	d15,d8,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L2168:
	jeq.a	a12,a15,.L91
.L2169:

; ..\EAS\BSW\Com\Com.c	  3054              {
; ..\EAS\BSW\Com\Com.c	  3055                  COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId)();/*SWS_Com_00574*/
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L2170:
	calli	a15
.L91:
	add	d8,#1
.L1153:
	extr.u	d8,d8,#0,#16
.L89:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d9,#0
	ld.hu	d15,[a15]4
.L2171:
	jge.u	d15,d8,.L90
.L2172:

; ..\EAS\BSW\Com\Com.c	  3056              }
; ..\EAS\BSW\Com\Com.c	  3057          }
; ..\EAS\BSW\Com\Com.c	  3058  
; ..\EAS\BSW\Com\Com.c	  3059      }
; ..\EAS\BSW\Com\Com.c	  3060  }
	ret
.L989:
	
__Com_HandleRxPdu_DirectCopy_function_end:
	.size	Com_HandleRxPdu_DirectCopy,__Com_HandleRxPdu_DirectCopy_function_end-Com_HandleRxPdu_DirectCopy
.L737:
	; End of function
	
	.sdecl	'.text.Com.Com_RxTimerOutMonitor',code,cluster('Com_RxTimerOutMonitor')
	.sect	'.text.Com.Com_RxTimerOutMonitor'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  3061  
; ..\EAS\BSW\Com\Com.c	  3062  
; ..\EAS\BSW\Com\Com.c	  3063  /*
; ..\EAS\BSW\Com\Com.c	  3064   0-OK,
; ..\EAS\BSW\Com\Com.c	  3065   1- NO UPDATED
; ..\EAS\BSW\Com\Com.c	  3066   2- INVALID VALUE RX
; ..\EAS\BSW\Com\Com.c	  3067   3- FILTER FAIL
; ..\EAS\BSW\Com\Com.c	  3068  
; ..\EAS\BSW\Com\Com.c	  3069  */
; ..\EAS\BSW\Com\Com.c	  3070  #if(STD_OFF == COM_RX_DIRECT_COPY)
; ..\EAS\BSW\Com\Com.c	  3071  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3072  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3073  * Function Name: Com_CheckRxSignalGroup_Invalid_Filter
; ..\EAS\BSW\Com\Com.c	  3074  *
; ..\EAS\BSW\Com\Com.c	  3075  * Description:   check all signals within a signal group
; ..\EAS\BSW\Com\Com.c	  3076  *
; ..\EAS\BSW\Com\Com.c	  3077  * Inputs:        RxPduId:
; ..\EAS\BSW\Com\Com.c	  3078  *
; ..\EAS\BSW\Com\Com.c	  3079  * Outputs:       uint8
; ..\EAS\BSW\Com\Com.c	  3080  *
; ..\EAS\BSW\Com\Com.c	  3081  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3082  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3083  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3084  #if (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3085  #if ((COM_RX_FILTER_SUPPORT == STD_ON) || (STD_ON == COM_RX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  3086  STATIC FUNC(uint8, COM_CODE) Com_CheckRxSignalGroup_Invalid_Filter
; ..\EAS\BSW\Com\Com.c	  3087  (
; ..\EAS\BSW\Com\Com.c	  3088      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	  3089      Com_SignalGroupIdType SigGrpId
; ..\EAS\BSW\Com\Com.c	  3090  )
; ..\EAS\BSW\Com\Com.c	  3091  {
; ..\EAS\BSW\Com\Com.c	  3092      uint8 ret = COM_RX_SIGNAL_OK;
; ..\EAS\BSW\Com\Com.c	  3093      Com_SignalIdType signalIndex =  (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3094  
; ..\EAS\BSW\Com\Com.c	  3095  
; ..\EAS\BSW\Com\Com.c	  3096      if((TRUE == COM_CFG_RXSIGGRP_HAS_INVALID_VAL(SigGrpId)) || (TRUE == COM_CFG_RXSIGGRP_HAS_FILTER(SigGrpId)))
; ..\EAS\BSW\Com\Com.c	  3097      {
; ..\EAS\BSW\Com\Com.c	  3098          for(signalIndex = COM_CFG_RXSIGGRP_SIGSTART(SigGrpId); signalIndex <= COM_CFG_RXSIGGRP_SIGSTOP(SigGrpId);  signalIndex++)
; ..\EAS\BSW\Com\Com.c	  3099          {
; ..\EAS\BSW\Com\Com.c	  3100              if(NULL_PTR != COM_CFG_RXSIG_CHECK_SIG_FUN(signalIndex))
; ..\EAS\BSW\Com\Com.c	  3101              {
; ..\EAS\BSW\Com\Com.c	  3102                  ret = COM_CFG_RXSIG_CHECK_SIG_FUN(signalIndex)(RxPduId, signalIndex, COM_CFG_RXSIG_FILTER_PTR(signalIndex));
; ..\EAS\BSW\Com\Com.c	  3103                  if(ret != COM_RX_SIGNAL_OK)
; ..\EAS\BSW\Com\Com.c	  3104                  {
; ..\EAS\BSW\Com\Com.c	  3105                      break;
; ..\EAS\BSW\Com\Com.c	  3106                  }
; ..\EAS\BSW\Com\Com.c	  3107  
; ..\EAS\BSW\Com\Com.c	  3108              }
; ..\EAS\BSW\Com\Com.c	  3109          }
; ..\EAS\BSW\Com\Com.c	  3110      }
; ..\EAS\BSW\Com\Com.c	  3111  
; ..\EAS\BSW\Com\Com.c	  3112      return ret;
; ..\EAS\BSW\Com\Com.c	  3113  }
; ..\EAS\BSW\Com\Com.c	  3114  #endif
; ..\EAS\BSW\Com\Com.c	  3115  
; ..\EAS\BSW\Com\Com.c	  3116  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3117  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3118  * Function Name: Com_RxSignalGroup_ProcessAfterCheck
; ..\EAS\BSW\Com\Com.c	  3119  *
; ..\EAS\BSW\Com\Com.c	  3120  * Description:   process ack indication  after signal group check
; ..\EAS\BSW\Com\Com.c	  3121  *
; ..\EAS\BSW\Com\Com.c	  3122  * Inputs:        RxPduId, filterResult,RxSigId,SigGrpId
; ..\EAS\BSW\Com\Com.c	  3123  *
; ..\EAS\BSW\Com\Com.c	  3124  * Outputs:       uint8
; ..\EAS\BSW\Com\Com.c	  3125  *
; ..\EAS\BSW\Com\Com.c	  3126  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3127  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3128  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3129  STATIC FUNC(void, COM_CODE) Com_RxSignalGroup_ProcessAfterCheck
; ..\EAS\BSW\Com\Com.c	  3130  (
; ..\EAS\BSW\Com\Com.c	  3131      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	  3132      uint8 filterResult,
; ..\EAS\BSW\Com\Com.c	  3133      Com_SignalIdType RxSigId,
; ..\EAS\BSW\Com\Com.c	  3134      Com_SignalGroupIdType SigGrpId
; ..\EAS\BSW\Com\Com.c	  3135  )
; ..\EAS\BSW\Com\Com.c	  3136  {
; ..\EAS\BSW\Com\Com.c	  3137      Com_SignalIdType signalIndex =  (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3138  
; ..\EAS\BSW\Com\Com.c	  3139  
; ..\EAS\BSW\Com\Com.c	  3140      if(COM_RX_SIGNAL_OK == filterResult)
; ..\EAS\BSW\Com\Com.c	  3141      {
; ..\EAS\BSW\Com\Com.c	  3142          /* COPY RX DATA*/
; ..\EAS\BSW\Com\Com.c	  3143          for(signalIndex = COM_CFG_RXSIGGRP_SIGSTART(SigGrpId); signalIndex <= COM_CFG_RXSIGGRP_SIGSTOP(SigGrpId);  signalIndex++)
; ..\EAS\BSW\Com\Com.c	  3144          {
; ..\EAS\BSW\Com\Com.c	  3145              COM_CFG_RXSIG_MOVE_FUN(signalIndex)();
; ..\EAS\BSW\Com\Com.c	  3146  #if (STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3147              if(COM_SIG_DYN == COM_CFG_RXSIG_TYPE(signalIndex))
; ..\EAS\BSW\Com\Com.c	  3148              {
; ..\EAS\BSW\Com\Com.c	  3149                  COM_RXPDU_DYN_LENGTH(RxPduId) = COM_RXPDU_TEMP_LENGTH(RxPduId);
; ..\EAS\BSW\Com\Com.c	  3150              }
; ..\EAS\BSW\Com\Com.c	  3151  #endif
; ..\EAS\BSW\Com\Com.c	  3152  
; ..\EAS\BSW\Com\Com.c	  3153  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  3154              /*if signal is rx ok, set GwFlag, GwFlag will only be cleared*/
; ..\EAS\BSW\Com\Com.c	  3155              if(COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_GW_INDEX(signalIndex))
; ..\EAS\BSW\Com\Com.c	  3156              {
; ..\EAS\BSW\Com\Com.c	  3157                  Com_GWSigFlag[COM_CFG_RXSIG_GW_INDEX(signalIndex)] = TRUE;
; ..\EAS\BSW\Com\Com.c	  3158              }
; ..\EAS\BSW\Com\Com.c	  3159  #endif
; ..\EAS\BSW\Com\Com.c	  3160          }
; ..\EAS\BSW\Com\Com.c	  3161  
; ..\EAS\BSW\Com\Com.c	  3162          if(NULL_PTR != COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3163          {
; ..\EAS\BSW\Com\Com.c	  3164              COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId)();/*SWS_Com_00574*/
; ..\EAS\BSW\Com\Com.c	  3165          }
; ..\EAS\BSW\Com\Com.c	  3166  
; ..\EAS\BSW\Com\Com.c	  3167      }
; ..\EAS\BSW\Com\Com.c	  3168  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3169      else if(COM_RX_SIGNAL_INVALD == filterResult)
; ..\EAS\BSW\Com\Com.c	  3170      {
; ..\EAS\BSW\Com\Com.c	  3171          if(COM_NOTIFY == COM_CFG_RXSIG_INVALID_ACTION(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3172          {
; ..\EAS\BSW\Com\Com.c	  3173              COM_CFG_RXSIG_CBKINV_FUN(RxSigId)();
; ..\EAS\BSW\Com\Com.c	  3174          }
; ..\EAS\BSW\Com\Com.c	  3175          else if(COM_REPLACE == COM_CFG_RXSIG_INVALID_ACTION(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3176          {
; ..\EAS\BSW\Com\Com.c	  3177              /* replace data*/
; ..\EAS\BSW\Com\Com.c	  3178              for(signalIndex = COM_CFG_RXSIGGRP_SIGSTART(SigGrpId); signalIndex <= COM_CFG_RXSIGGRP_SIGSTOP(SigGrpId);  signalIndex++)
; ..\EAS\BSW\Com\Com.c	  3179              {
; ..\EAS\BSW\Com\Com.c	  3180                  /* SWS_Com_00683*/
; ..\EAS\BSW\Com\Com.c	  3181                  Com_ReplaceRxSignalWithInit(RxPduId, signalIndex, TRUE);
; ..\EAS\BSW\Com\Com.c	  3182              }
; ..\EAS\BSW\Com\Com.c	  3183              if(NULL_PTR != COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3184              {
; ..\EAS\BSW\Com\Com.c	  3185                  COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId)();/*SWS_Com_00683*/
; ..\EAS\BSW\Com\Com.c	  3186              }
; ..\EAS\BSW\Com\Com.c	  3187          }
; ..\EAS\BSW\Com\Com.c	  3188          else
; ..\EAS\BSW\Com\Com.c	  3189          {
; ..\EAS\BSW\Com\Com.c	  3190              /* do nothing*/
; ..\EAS\BSW\Com\Com.c	  3191          }
; ..\EAS\BSW\Com\Com.c	  3192  
; ..\EAS\BSW\Com\Com.c	  3193      }
; ..\EAS\BSW\Com\Com.c	  3194  #endif
; ..\EAS\BSW\Com\Com.c	  3195      else
; ..\EAS\BSW\Com\Com.c	  3196      {
; ..\EAS\BSW\Com\Com.c	  3197          /* just ignor sgnal when rxfilter not pass */
; ..\EAS\BSW\Com\Com.c	  3198      }
; ..\EAS\BSW\Com\Com.c	  3199  
; ..\EAS\BSW\Com\Com.c	  3200  
; ..\EAS\BSW\Com\Com.c	  3201  
; ..\EAS\BSW\Com\Com.c	  3202  }
; ..\EAS\BSW\Com\Com.c	  3203  #endif
; ..\EAS\BSW\Com\Com.c	  3204  
; ..\EAS\BSW\Com\Com.c	  3205  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3206  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3207  * Function Name: Com_RxSignal_ProcessAfterCheck
; ..\EAS\BSW\Com\Com.c	  3208  *
; ..\EAS\BSW\Com\Com.c	  3209  * Description:   process ack indication  after signal check
; ..\EAS\BSW\Com\Com.c	  3210  *
; ..\EAS\BSW\Com\Com.c	  3211  * Inputs:        filterResult,RxSigId
; ..\EAS\BSW\Com\Com.c	  3212  *
; ..\EAS\BSW\Com\Com.c	  3213  * Outputs:       uint8
; ..\EAS\BSW\Com\Com.c	  3214  *
; ..\EAS\BSW\Com\Com.c	  3215  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3216  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3217  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3218  
; ..\EAS\BSW\Com\Com.c	  3219  STATIC FUNC(void, COM_CODE) Com_RxSignal_ProcessAfterCheck
; ..\EAS\BSW\Com\Com.c	  3220  (
; ..\EAS\BSW\Com\Com.c	  3221      uint8 filterResult,
; ..\EAS\BSW\Com\Com.c	  3222      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	  3223      Com_SignalIdType RxSigId
; ..\EAS\BSW\Com\Com.c	  3224  )
; ..\EAS\BSW\Com\Com.c	  3225  {
; ..\EAS\BSW\Com\Com.c	  3226      if(COM_RX_SIGNAL_OK == filterResult)
; ..\EAS\BSW\Com\Com.c	  3227      {
; ..\EAS\BSW\Com\Com.c	  3228          /* COPY RX DATA*/
; ..\EAS\BSW\Com\Com.c	  3229          COM_CFG_RXSIG_MOVE_FUN(RxSigId)();
; ..\EAS\BSW\Com\Com.c	  3230  
; ..\EAS\BSW\Com\Com.c	  3231  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  3232          /*if signal is rx ok, set GwFlag, GwFlag will only be cleared*/
; ..\EAS\BSW\Com\Com.c	  3233          if(COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_GW_INDEX(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3234          {
; ..\EAS\BSW\Com\Com.c	  3235              Com_GWSigFlag[COM_CFG_RXSIG_GW_INDEX(RxSigId)] = TRUE;
; ..\EAS\BSW\Com\Com.c	  3236          }
; ..\EAS\BSW\Com\Com.c	  3237  #endif
; ..\EAS\BSW\Com\Com.c	  3238  
; ..\EAS\BSW\Com\Com.c	  3239  #if (STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3240          if(COM_SIG_DYN == COM_CFG_RXSIG_TYPE(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3241          {
; ..\EAS\BSW\Com\Com.c	  3242              COM_RXPDU_DYN_LENGTH(RxPduId) = COM_RXPDU_TEMP_LENGTH(RxPduId);
; ..\EAS\BSW\Com\Com.c	  3243          }
; ..\EAS\BSW\Com\Com.c	  3244  #endif
; ..\EAS\BSW\Com\Com.c	  3245  
; ..\EAS\BSW\Com\Com.c	  3246          if(NULL_PTR != COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3247          {
; ..\EAS\BSW\Com\Com.c	  3248              COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId)();/*SWS_Com_00574*/
; ..\EAS\BSW\Com\Com.c	  3249          }
; ..\EAS\BSW\Com\Com.c	  3250  
; ..\EAS\BSW\Com\Com.c	  3251  
; ..\EAS\BSW\Com\Com.c	  3252  
; ..\EAS\BSW\Com\Com.c	  3253      }
; ..\EAS\BSW\Com\Com.c	  3254  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3255      else if(COM_RX_SIGNAL_INVALD == filterResult)
; ..\EAS\BSW\Com\Com.c	  3256      {
; ..\EAS\BSW\Com\Com.c	  3257          if(COM_NOTIFY == COM_CFG_RXSIG_INVALID_ACTION(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3258          {
; ..\EAS\BSW\Com\Com.c	  3259              COM_CFG_RXSIG_CBKINV_FUN(RxSigId)();
; ..\EAS\BSW\Com\Com.c	  3260          }
; ..\EAS\BSW\Com\Com.c	  3261          else if(COM_REPLACE == COM_CFG_RXSIG_INVALID_ACTION(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3262          {
; ..\EAS\BSW\Com\Com.c	  3263              /* replace data with Init SWS_COM_00681*/
; ..\EAS\BSW\Com\Com.c	  3264              Com_ReplaceRxSignalWithInit(RxPduId, RxSigId, TRUE);
; ..\EAS\BSW\Com\Com.c	  3265  
; ..\EAS\BSW\Com\Com.c	  3266              if(NULL_PTR != COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3267              {
; ..\EAS\BSW\Com\Com.c	  3268                  COM_CFG_RXSIG_CBKRXACK_FUN(RxSigId)();
; ..\EAS\BSW\Com\Com.c	  3269              }
; ..\EAS\BSW\Com\Com.c	  3270          }
; ..\EAS\BSW\Com\Com.c	  3271          else
; ..\EAS\BSW\Com\Com.c	  3272          {
; ..\EAS\BSW\Com\Com.c	  3273              /* do nothing*/
; ..\EAS\BSW\Com\Com.c	  3274          }
; ..\EAS\BSW\Com\Com.c	  3275  
; ..\EAS\BSW\Com\Com.c	  3276      }
; ..\EAS\BSW\Com\Com.c	  3277  #endif
; ..\EAS\BSW\Com\Com.c	  3278      else
; ..\EAS\BSW\Com\Com.c	  3279      {
; ..\EAS\BSW\Com\Com.c	  3280          /* just ignor sgnal when rxfilter not pass */
; ..\EAS\BSW\Com\Com.c	  3281      }
; ..\EAS\BSW\Com\Com.c	  3282  
; ..\EAS\BSW\Com\Com.c	  3283  }
; ..\EAS\BSW\Com\Com.c	  3284  
; ..\EAS\BSW\Com\Com.c	  3285  
; ..\EAS\BSW\Com\Com.c	  3286  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3287  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3288  * Function Name: Com_HandleRxPdu
; ..\EAS\BSW\Com\Com.c	  3289  *
; ..\EAS\BSW\Com\Com.c	  3290  * Description:   rx indication when rx Ipdu.
; ..\EAS\BSW\Com\Com.c	  3291  *
; ..\EAS\BSW\Com\Com.c	  3292  * Inputs:        RxPduId:
; ..\EAS\BSW\Com\Com.c	  3293  *
; ..\EAS\BSW\Com\Com.c	  3294  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3295  *
; ..\EAS\BSW\Com\Com.c	  3296  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3297  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3298  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3299  STATIC FUNC(void, COM_CODE) Com_HandleRxPdu
; ..\EAS\BSW\Com\Com.c	  3300  (
; ..\EAS\BSW\Com\Com.c	  3301      PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	  3302  )
; ..\EAS\BSW\Com\Com.c	  3303  {
; ..\EAS\BSW\Com\Com.c	  3304      Com_SignalIdType RxSigId = COM_CFG_RXPDU_SIG_START_NUM(RxPduId);
; ..\EAS\BSW\Com\Com.c	  3305      uint8 filterResult = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  3306  
; ..\EAS\BSW\Com\Com.c	  3307  
; ..\EAS\BSW\Com\Com.c	  3308  #if(COM_RX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  3309      boolean updateflag = TRUE;
; ..\EAS\BSW\Com\Com.c	  3310  #endif
; ..\EAS\BSW\Com\Com.c	  3311  
; ..\EAS\BSW\Com\Com.c	  3312  
; ..\EAS\BSW\Com\Com.c	  3313      while(RxSigId <= COM_CFG_RXPDU_SIG_STOP_NUM(RxPduId))
; ..\EAS\BSW\Com\Com.c	  3314      {
; ..\EAS\BSW\Com\Com.c	  3315          filterResult = COM_RX_SIGNAL_OK;
; ..\EAS\BSW\Com\Com.c	  3316  #if(STD_ON == COM_PADDING_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3317          if(COM_CFG_RXSIG_MIN_BYTE(RxSigId) <= COM_RXPDU_TEMP_LENGTH(RxPduId))/* rx data length may be smaller than cfg length*/
; ..\EAS\BSW\Com\Com.c	  3318  #endif
; ..\EAS\BSW\Com\Com.c	  3319          {
; ..\EAS\BSW\Com\Com.c	  3320  #if(COM_RX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  3321              updateflag = TRUE;
; ..\EAS\BSW\Com\Com.c	  3322              /* set update bit if configured*/
; ..\EAS\BSW\Com\Com.c	  3323              if(COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_UPDATEBIT_INDEX(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3324              {
; ..\EAS\BSW\Com\Com.c	  3325                  if(FALSE == Com_CheckSigUpdateBit(RxPduId, COM_CFG_RXSIG_UPDATEBIT_INDEX(RxSigId)))
; ..\EAS\BSW\Com\Com.c	  3326                  {
; ..\EAS\BSW\Com\Com.c	  3327                      updateflag = FALSE;
; ..\EAS\BSW\Com\Com.c	  3328  #if(COM_RX_SIGNAL_GROUP_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  3329                      if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3330                      {
; ..\EAS\BSW\Com\Com.c	  3331                          RxSigId = COM_CFG_RXSIGGRP_SIGSTOP(COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId));
; ..\EAS\BSW\Com\Com.c	  3332                      }
; ..\EAS\BSW\Com\Com.c	  3333  #endif
; ..\EAS\BSW\Com\Com.c	  3334                  }
; ..\EAS\BSW\Com\Com.c	  3335  #if(COM_RX_TIMEOUT_MONITOR == STD_ON)
; ..\EAS\BSW\Com\Com.c	  3336                  else
; ..\EAS\BSW\Com\Com.c	  3337                  {
; ..\EAS\BSW\Com\Com.c	  3338                      
; ..\EAS\BSW\Com\Com.c	  3339                      if((COM_INVALID_SIG_INDEX != COM_CFG_RXSIG_UPTO_INDEX(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3340                              && (COM_TIMER_STOP_VAL != Com_UpdateTimeoutCnt[COM_CFG_RXSIG_UPTO_INDEX(RxSigId)]))
; ..\EAS\BSW\Com\Com.c	  3341                      {
; ..\EAS\BSW\Com\Com.c	  3342                          /* reset signal rx timeout timer*/
; ..\EAS\BSW\Com\Com.c	  3343                          Com_UpdateTimeoutCnt[COM_CFG_RXSIG_UPTO_INDEX(RxSigId)] = COM_CFG_RXSIG_UPTO_PERIOD(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3344                      }
; ..\EAS\BSW\Com\Com.c	  3345                  }
; ..\EAS\BSW\Com\Com.c	  3346  #endif
; ..\EAS\BSW\Com\Com.c	  3347              }
; ..\EAS\BSW\Com\Com.c	  3348              if(TRUE == updateflag)
; ..\EAS\BSW\Com\Com.c	  3349  #endif
; ..\EAS\BSW\Com\Com.c	  3350              {
; ..\EAS\BSW\Com\Com.c	  3351                  /* reset timerout first */
; ..\EAS\BSW\Com\Com.c	  3352  #if(COM_RX_SIGNAL_GROUP_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  3353                  if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3354                  {
; ..\EAS\BSW\Com\Com.c	  3355  #if ((COM_RX_FILTER_SUPPORT == STD_ON) || (STD_ON == COM_RX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  3356                      filterResult = Com_CheckRxSignalGroup_Invalid_Filter(RxPduId, COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId));
; ..\EAS\BSW\Com\Com.c	  3357  #endif
; ..\EAS\BSW\Com\Com.c	  3358                      Com_RxSignalGroup_ProcessAfterCheck(RxPduId, filterResult, RxSigId, COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId));
; ..\EAS\BSW\Com\Com.c	  3359                      RxSigId = COM_CFG_RXSIGGRP_SIGSTOP(COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId));
; ..\EAS\BSW\Com\Com.c	  3360                  }
; ..\EAS\BSW\Com\Com.c	  3361                  else
; ..\EAS\BSW\Com\Com.c	  3362  #endif
; ..\EAS\BSW\Com\Com.c	  3363                  {
; ..\EAS\BSW\Com\Com.c	  3364  #if ((COM_RX_FILTER_SUPPORT == STD_ON) || (STD_ON == COM_RX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  3365                      if(NULL_PTR != COM_CFG_RXSIG_CHECK_SIG_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3366                      {
; ..\EAS\BSW\Com\Com.c	  3367                          filterResult = COM_CFG_RXSIG_CHECK_SIG_FUN(RxSigId)(RxPduId, RxSigId, COM_CFG_RXSIG_FILTER_PTR(RxSigId));
; ..\EAS\BSW\Com\Com.c	  3368                      }
; ..\EAS\BSW\Com\Com.c	  3369  #endif
; ..\EAS\BSW\Com\Com.c	  3370                      Com_RxSignal_ProcessAfterCheck(filterResult, RxPduId, RxSigId);
; ..\EAS\BSW\Com\Com.c	  3371                  }
; ..\EAS\BSW\Com\Com.c	  3372              }
; ..\EAS\BSW\Com\Com.c	  3373          }
; ..\EAS\BSW\Com\Com.c	  3374          RxSigId++;
; ..\EAS\BSW\Com\Com.c	  3375      }
; ..\EAS\BSW\Com\Com.c	  3376  
; ..\EAS\BSW\Com\Com.c	  3377  
; ..\EAS\BSW\Com\Com.c	  3378  
; ..\EAS\BSW\Com\Com.c	  3379  }
; ..\EAS\BSW\Com\Com.c	  3380  #endif/*#if(STD_OFF == COM_RX_DIRECT_COPY)*/
; ..\EAS\BSW\Com\Com.c	  3381  
; ..\EAS\BSW\Com\Com.c	  3382  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  3383  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3384  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3385  * Function Name: Com_ResetUpdateRxToTimer
; ..\EAS\BSW\Com\Com.c	  3386  *
; ..\EAS\BSW\Com\Com.c	  3387  * Description:   stop  timeout of signals with update bit, when DM is disabled or pdu is stopped
; ..\EAS\BSW\Com\Com.c	  3388  *
; ..\EAS\BSW\Com\Com.c	  3389  * Inputs:        RxIpduId
; ..\EAS\BSW\Com\Com.c	  3390  *
; ..\EAS\BSW\Com\Com.c	  3391  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3392  *
; ..\EAS\BSW\Com\Com.c	  3393  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3394  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3395  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3396  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3397  STATIC FUNC(void, COM_CODE) Com_ResetUpdateRxToTimer
; ..\EAS\BSW\Com\Com.c	  3398  (
; ..\EAS\BSW\Com\Com.c	  3399      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	  3400  )
; ..\EAS\BSW\Com\Com.c	  3401  {
; ..\EAS\BSW\Com\Com.c	  3402      Com_SignalIdType RxSigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3403      Com_SignalIdType RxIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3404      uint16 upIndex = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  3405  
; ..\EAS\BSW\Com\Com.c	  3406  
; ..\EAS\BSW\Com\Com.c	  3407      if(COM_CFG_RXPDU_UPDATEBIT_NUM(RxIpduId) > (Com_SignalIdType)0)
; ..\EAS\BSW\Com\Com.c	  3408      {
; ..\EAS\BSW\Com\Com.c	  3409          for(RxIndex = (Com_SignalIdType)0; RxIndex < COM_CFG_RXPDU_UPDATEBIT_NUM(RxIpduId); RxIndex++)
; ..\EAS\BSW\Com\Com.c	  3410          {
; ..\EAS\BSW\Com\Com.c	  3411              RxSigId = COM_CFG_RXPDU_UPDATEBIT_INFO(RxIpduId)[RxIndex].updateSignalId;
; ..\EAS\BSW\Com\Com.c	  3412  
; ..\EAS\BSW\Com\Com.c	  3413              upIndex = COM_CFG_RXSIG_UPTO_INDEX(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3414  
; ..\EAS\BSW\Com\Com.c	  3415              Com_UpdateTimeoutCnt[upIndex] = COM_TIMER_STOP_VAL;
; ..\EAS\BSW\Com\Com.c	  3416          }
; ..\EAS\BSW\Com\Com.c	  3417      }
; ..\EAS\BSW\Com\Com.c	  3418  
; ..\EAS\BSW\Com\Com.c	  3419  
; ..\EAS\BSW\Com\Com.c	  3420  }
; ..\EAS\BSW\Com\Com.c	  3421  
; ..\EAS\BSW\Com\Com.c	  3422  
; ..\EAS\BSW\Com\Com.c	  3423  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3424  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3425  * Function Name: Com_UpdateRxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	  3426  *
; ..\EAS\BSW\Com\Com.c	  3427  * Description:   process rx timeout of signals with update bit
; ..\EAS\BSW\Com\Com.c	  3428  *
; ..\EAS\BSW\Com\Com.c	  3429  * Inputs:        RxIpduId
; ..\EAS\BSW\Com\Com.c	  3430  *
; ..\EAS\BSW\Com\Com.c	  3431  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3432  *
; ..\EAS\BSW\Com\Com.c	  3433  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3434  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3435  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3436  
; ..\EAS\BSW\Com\Com.c	  3437  STATIC FUNC(void, COM_CODE) Com_UpdateRxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	  3438  (
; ..\EAS\BSW\Com\Com.c	  3439      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	  3440  )
; ..\EAS\BSW\Com\Com.c	  3441  {
; ..\EAS\BSW\Com\Com.c	  3442      Com_SignalIdType RxSigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3443      Com_SignalIdType RxIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3444      uint16 upIndex = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  3445  #if(STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3446      Com_SignalIdType grpSignalIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3447      Com_SignalGroupIdType SigGrpId = (Com_SignalGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  3448  #endif
; ..\EAS\BSW\Com\Com.c	  3449  
; ..\EAS\BSW\Com\Com.c	  3450  
; ..\EAS\BSW\Com\Com.c	  3451  
; ..\EAS\BSW\Com\Com.c	  3452      if(COM_CFG_RXPDU_UPDATEBIT_NUM(RxIpduId) > (Com_SignalIdType)0)
; ..\EAS\BSW\Com\Com.c	  3453      {
; ..\EAS\BSW\Com\Com.c	  3454          for(RxIndex = (Com_SignalIdType)0; RxIndex < COM_CFG_RXPDU_UPDATEBIT_NUM(RxIpduId); RxIndex++)
; ..\EAS\BSW\Com\Com.c	  3455          {
; ..\EAS\BSW\Com\Com.c	  3456              RxSigId = COM_CFG_RXPDU_UPDATEBIT_INFO(RxIpduId)[RxIndex].updateSignalId;
; ..\EAS\BSW\Com\Com.c	  3457  
; ..\EAS\BSW\Com\Com.c	  3458              upIndex = COM_CFG_RXSIG_UPTO_INDEX(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3459              if((uint16)0 != COM_CFG_RXSIG_UPTO_PERIOD(RxSigId))/* may be no timeout */
; ..\EAS\BSW\Com\Com.c	  3460              {
; ..\EAS\BSW\Com\Com.c	  3461                  if(COM_TIMER_STOP_VAL == Com_UpdateTimeoutCnt[upIndex])
; ..\EAS\BSW\Com\Com.c	  3462                  {
; ..\EAS\BSW\Com\Com.c	  3463                      Com_UpdateTimeoutCnt[upIndex] = COM_CFG_RXSIG_UPTO_FIRSTPERIOD(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3464                  }
; ..\EAS\BSW\Com\Com.c	  3465  
; ..\EAS\BSW\Com\Com.c	  3466                  if((uint16)0 != Com_UpdateTimeoutCnt[upIndex])
; ..\EAS\BSW\Com\Com.c	  3467                  {
; ..\EAS\BSW\Com\Com.c	  3468                      Com_UpdateTimeoutCnt[upIndex]--;
; ..\EAS\BSW\Com\Com.c	  3469                  }
; ..\EAS\BSW\Com\Com.c	  3470                  if((uint16)0 == Com_UpdateTimeoutCnt[upIndex])
; ..\EAS\BSW\Com\Com.c	  3471                  {
; ..\EAS\BSW\Com\Com.c	  3472                      Com_UpdateTimeoutCnt[upIndex] = COM_CFG_RXSIG_UPTO_PERIOD(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3473  
; ..\EAS\BSW\Com\Com.c	  3474                      if(TRUE == COM_CFG_RXSIG_TO_REPLACE(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3475                      {
; ..\EAS\BSW\Com\Com.c	  3476  #if(STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3477                          if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3478                          {
; ..\EAS\BSW\Com\Com.c	  3479                              SigGrpId = COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3480                              for(grpSignalIndex = COM_CFG_RXSIGGRP_SIGSTART(SigGrpId); grpSignalIndex <= COM_CFG_RXSIGGRP_SIGSTOP(SigGrpId);  grpSignalIndex++)
; ..\EAS\BSW\Com\Com.c	  3481                              {
; ..\EAS\BSW\Com\Com.c	  3482                                  Com_ReplaceRxSignalWithInit(RxIpduId, grpSignalIndex, TRUE);
; ..\EAS\BSW\Com\Com.c	  3483                              }
; ..\EAS\BSW\Com\Com.c	  3484                          }
; ..\EAS\BSW\Com\Com.c	  3485                          else
; ..\EAS\BSW\Com\Com.c	  3486  #endif
; ..\EAS\BSW\Com\Com.c	  3487                          {
; ..\EAS\BSW\Com\Com.c	  3488                              Com_ReplaceRxSignalWithInit(RxIpduId, RxSigId, TRUE);
; ..\EAS\BSW\Com\Com.c	  3489  
; ..\EAS\BSW\Com\Com.c	  3490                          }
; ..\EAS\BSW\Com\Com.c	  3491                      }
; ..\EAS\BSW\Com\Com.c	  3492  
; ..\EAS\BSW\Com\Com.c	  3493                      if(NULL_PTR != COM_CFG_RXSIG_CBKRXTOUT_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3494                      {
; ..\EAS\BSW\Com\Com.c	  3495                          COM_CFG_RXSIG_CBKRXTOUT_FUN(RxSigId)();
; ..\EAS\BSW\Com\Com.c	  3496                      }
; ..\EAS\BSW\Com\Com.c	  3497                  }
; ..\EAS\BSW\Com\Com.c	  3498              }
; ..\EAS\BSW\Com\Com.c	  3499          }
; ..\EAS\BSW\Com\Com.c	  3500      }
; ..\EAS\BSW\Com\Com.c	  3501  }
; ..\EAS\BSW\Com\Com.c	  3502  #endif
; ..\EAS\BSW\Com\Com.c	  3503  
; ..\EAS\BSW\Com\Com.c	  3504  
; ..\EAS\BSW\Com\Com.c	  3505  
; ..\EAS\BSW\Com\Com.c	  3506  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3507  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3508  * Function Name: Com_RxTimerOutMonitor
; ..\EAS\BSW\Com\Com.c	  3509  *
; ..\EAS\BSW\Com\Com.c	  3510  * Description:   process rx timeout
; ..\EAS\BSW\Com\Com.c	  3511  *
; ..\EAS\BSW\Com\Com.c	  3512  * Inputs:        RxIpduId
; ..\EAS\BSW\Com\Com.c	  3513  *
; ..\EAS\BSW\Com\Com.c	  3514  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3515  *
; ..\EAS\BSW\Com\Com.c	  3516  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3517  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3518  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3519  
; ..\EAS\BSW\Com\Com.c	  3520  STATIC FUNC(void, COM_CODE) Com_RxTimerOutMonitor
; Function Com_RxTimerOutMonitor
.L374:
Com_RxTimerOutMonitor:	.type	func
	mov	d8,d4
.L1154:

; ..\EAS\BSW\Com\Com.c	  3521  (
; ..\EAS\BSW\Com\Com.c	  3522      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	  3523  )
; ..\EAS\BSW\Com\Com.c	  3524  {
; ..\EAS\BSW\Com\Com.c	  3525  
; ..\EAS\BSW\Com\Com.c	  3526      Com_SignalIdType RxSigId = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3527  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3528  #if(STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3529      Com_SignalGroupIdType grpId = (Com_SignalGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  3530  #endif
; ..\EAS\BSW\Com\Com.c	  3531  #endif
; ..\EAS\BSW\Com\Com.c	  3532  
; ..\EAS\BSW\Com\Com.c	  3533      if(COM_TIMER_STOP_VAL == COM_RXPDU_TIMEOUT(RxIpduId))
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]4
.L2125:
	mov.u	d1,#65535
.L2126:
	jne	d0,d1,.L92
.L2127:

; ..\EAS\BSW\Com\Com.c	  3534      {
; ..\EAS\BSW\Com\Com.c	  3535          COM_RXPDU_TIMEOUT(RxIpduId) =
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2128:

; ..\EAS\BSW\Com\Com.c	  3536              COM_CFG_RXPDU_FIRST_TIMEOUT(RxIpduId);/* First time start*/
	sha	d15,d8,#5
	movh.a	a2,#@his(ComRxPduCfgTable)
	lea	a2,[a2]@los(ComRxPduCfgTable)
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]14
.L2129:
	st.h	[a15]4,d15
.L92:

; ..\EAS\BSW\Com\Com.c	  3537      }
; ..\EAS\BSW\Com\Com.c	  3538      if((uint16)0 != COM_RXPDU_TIMEOUT(RxIpduId))
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]4
.L2130:
	jeq	d0,#0,.L93
.L2131:

; ..\EAS\BSW\Com\Com.c	  3539      {
; ..\EAS\BSW\Com\Com.c	  3540          COM_RXPDU_TIMEOUT(RxIpduId)--;
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
	movh.a	a2,#@his(Com_RxPduTable)
	lea	a2,[a2]@los(Com_RxPduTable)
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]4
.L2132:
	add	d15,#-1
	st.h	[a15]4,d15
.L2133:

; ..\EAS\BSW\Com\Com.c	  3541      }
; ..\EAS\BSW\Com\Com.c	  3542      else
; ..\EAS\BSW\Com\Com.c	  3543      {
; ..\EAS\BSW\Com\Com.c	  3544          COM_RXPDU_TIMEOUT(RxIpduId) =
; ..\EAS\BSW\Com\Com.c	  3545              COM_CFG_RXPDU_PERIOD_TIMEOUT(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  3546          COM_RXPDU_TIMEOUT(RxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  3547  
; ..\EAS\BSW\Com\Com.c	  3548          /* SWS_Com_00290 291 all signal timeout is monitor by pdu*/
; ..\EAS\BSW\Com\Com.c	  3549          for(RxSigId = COM_CFG_RXPDU_SIG_START_NUM(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  3550                  RxSigId <= COM_CFG_RXPDU_SIG_STOP_NUM(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  3551                  RxSigId++)
; ..\EAS\BSW\Com\Com.c	  3552          {
; ..\EAS\BSW\Com\Com.c	  3553              /*SWS_Com_00744 first ComRxDataTimeoutAction then ComTimeoutNotification*/
; ..\EAS\BSW\Com\Com.c	  3554              /* can not copy all pdu's init value, as some sig may be configed not replace*/
; ..\EAS\BSW\Com\Com.c	  3555  
; ..\EAS\BSW\Com\Com.c	  3556  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3557              if(COM_INVALID_SIG_INDEX == COM_CFG_RXSIG_UPTO_INDEX(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3558  #endif
; ..\EAS\BSW\Com\Com.c	  3559              {
; ..\EAS\BSW\Com\Com.c	  3560                  /* replace attibute will generated for all signal of group ,  not only for the first signal,
; ..\EAS\BSW\Com\Com.c	  3561                     so no need to replace all group signal here
; ..\EAS\BSW\Com\Com.c	  3562                  */
; ..\EAS\BSW\Com\Com.c	  3563                  if(TRUE == COM_CFG_RXSIG_TO_REPLACE(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3564                  {
; ..\EAS\BSW\Com\Com.c	  3565                      Com_ReplaceRxSignalWithInit(RxIpduId, RxSigId, TRUE);
; ..\EAS\BSW\Com\Com.c	  3566                  }
; ..\EAS\BSW\Com\Com.c	  3567  
; ..\EAS\BSW\Com\Com.c	  3568                  /*SWS_Com_00470 500 513*/
; ..\EAS\BSW\Com\Com.c	  3569                  if(NULL_PTR != COM_CFG_RXSIG_CBKRXTOUT_FUN(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3570                  {
; ..\EAS\BSW\Com\Com.c	  3571                      COM_CFG_RXSIG_CBKRXTOUT_FUN(RxSigId)();
; ..\EAS\BSW\Com\Com.c	  3572                  }
; ..\EAS\BSW\Com\Com.c	  3573  
; ..\EAS\BSW\Com\Com.c	  3574              }
; ..\EAS\BSW\Com\Com.c	  3575  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3576  			else
; ..\EAS\BSW\Com\Com.c	  3577  			{
; ..\EAS\BSW\Com\Com.c	  3578  			    /* has updatebit and this is signal group , jump all groupsiganl*/
; ..\EAS\BSW\Com\Com.c	  3579  #if(STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3580  				if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(RxSigId))
; ..\EAS\BSW\Com\Com.c	  3581  				{
; ..\EAS\BSW\Com\Com.c	  3582  					grpId = COM_CFG_RXSIG_GET_SIGGROUPID(RxSigId);
; ..\EAS\BSW\Com\Com.c	  3583  					RxSigId = COM_CFG_RXSIGGRP_SIGSTOP(grpId);/* set sigId to the end of this group */
; ..\EAS\BSW\Com\Com.c	  3584  				}
; ..\EAS\BSW\Com\Com.c	  3585  #endif
; ..\EAS\BSW\Com\Com.c	  3586  			}
; ..\EAS\BSW\Com\Com.c	  3587  #endif
; ..\EAS\BSW\Com\Com.c	  3588  
; ..\EAS\BSW\Com\Com.c	  3589          }
; ..\EAS\BSW\Com\Com.c	  3590  
; ..\EAS\BSW\Com\Com.c	  3591          /* time out reset */
; ..\EAS\BSW\Com\Com.c	  3592          Com_RxPduState[RxIpduId] = COM_RXPDU_START_IDLE;
; ..\EAS\BSW\Com\Com.c	  3593          COM_RXPDU_TEMP_LENGTH(RxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  3594  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  3595          COM_RXPDU_TP_INDEX(RxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  3596  #endif
; ..\EAS\BSW\Com\Com.c	  3597      }
; ..\EAS\BSW\Com\Com.c	  3598  
; ..\EAS\BSW\Com\Com.c	  3599  }
	ret
.L93:
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2134:
	sha	d0,d8,#5
	movh.a	a2,#@his(ComRxPduCfgTable)
	lea	a2,[a2]@los(ComRxPduCfgTable)
	addsc.a	a2,a2,d0,#0
	ld.hu	d15,[a2]16
.L2135:
	add	d15,#-1
	st.h	[a15]4,d15
.L2136:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.hu	d9,[a15]2
.L1155:
	mov.a	a12,#0
.L2137:
	j	.L95
.L96:
	mul	d15,d9,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L2138:
	jne	d15,#1,.L97
.L2139:
	mov	d6,#1
	mov	e4,d9,d8
	call	Com_ReplaceRxSignalWithInit
.L97:
	mul	d15,d9,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]28
.L2140:
	jeq.a	a12,a15,.L98
.L2141:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]28
.L2142:
	calli	a15
.L98:
	add	d9,#1
.L1156:
	extr.u	d9,d9,#0,#16
.L95:
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]4
.L2143:
	jge.u	d15,d9,.L96
.L2144:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L2145:
	addsc.a	a15,a15,d8,#0
.L2146:
	mov	d15,#1
.L2147:
	st.b	[a15],d15
.L2148:
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L2149:
	mov	d15,#0
.L2150:
	st.h	[a15],d15
.L2151:
	ret
.L982:
	
__Com_RxTimerOutMonitor_function_end:
	.size	Com_RxTimerOutMonitor,__Com_RxTimerOutMonitor_function_end-Com_RxTimerOutMonitor
.L727:
	; End of function
	
	.sdecl	'.text.Com.Com_SetIpduTrigRepFlag',code,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.text.Com.Com_SetIpduTrigRepFlag'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  3600  #endif
; ..\EAS\BSW\Com\Com.c	  3601  
; ..\EAS\BSW\Com\Com.c	  3602  
; ..\EAS\BSW\Com\Com.c	  3603  
; ..\EAS\BSW\Com\Com.c	  3604  #endif/*#if(STD_ON == COM_RXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  3605  
; ..\EAS\BSW\Com\Com.c	  3606  
; ..\EAS\BSW\Com\Com.c	  3607  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3608  *   Api Used by generate file
; ..\EAS\BSW\Com\Com.c	  3609  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	  3610  
; ..\EAS\BSW\Com\Com.c	  3611  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3612  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3613  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3614  * Function Name: Com_TxSignalFilter
; ..\EAS\BSW\Com\Com.c	  3615  *
; ..\EAS\BSW\Com\Com.c	  3616  * Description:   only called when tx signal's value updated, this funtion only
; ..\EAS\BSW\Com\Com.c	  3617  *                caculate single signal's filter result, the whole Pdu result will
; ..\EAS\BSW\Com\Com.c	  3618  *                be caculated in mainfunction tx
; ..\EAS\BSW\Com\Com.c	  3619  * Inputs:        ComTxSigId, ComSigValuePtr
; ..\EAS\BSW\Com\Com.c	  3620  *
; ..\EAS\BSW\Com\Com.c	  3621  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3622  *
; ..\EAS\BSW\Com\Com.c	  3623  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3624  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3625  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3626  STATIC FUNC(void, COM_CODE) Com_TxSignalFilter
; ..\EAS\BSW\Com\Com.c	  3627  (
; ..\EAS\BSW\Com\Com.c	  3628      Com_SignalIdType  ComTxSigId,
; ..\EAS\BSW\Com\Com.c	  3629      P2CONST(void, AUTOMATIC, AUTOMATIC) value
; ..\EAS\BSW\Com\Com.c	  3630  )
; ..\EAS\BSW\Com\Com.c	  3631  {
; ..\EAS\BSW\Com\Com.c	  3632  
; ..\EAS\BSW\Com\Com.c	  3633      PduIdType TxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  3634      uint16 TxSigSetBitNum = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  3635      boolean TxSigFilterResult = TRUE;
; ..\EAS\BSW\Com\Com.c	  3636      uint8 Position_Bit = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  3637      uint16 Position_Byte = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  3638      P2CONST(Com_CfgSigFilterParsType, AUTOMATIC, COM_CONST) algPtr = COM_CFG_TXSIG_FILTER_PTR(ComTxSigId);
; ..\EAS\BSW\Com\Com.c	  3639      uint8 tempByte = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  3640  
; ..\EAS\BSW\Com\Com.c	  3641      if(NULL_PTR != COM_CFG_TXSIG_CHECK_FILTER(ComTxSigId))
; ..\EAS\BSW\Com\Com.c	  3642      {
; ..\EAS\BSW\Com\Com.c	  3643  
; ..\EAS\BSW\Com\Com.c	  3644          TxIpduId = COM_CFG_TXSIG_TXPDU_ID(ComTxSigId);
; ..\EAS\BSW\Com\Com.c	  3645          TxSigFilterResult = COM_CFG_TXSIG_CHECK_FILTER(ComTxSigId)(TxIpduId, ComTxSigId, value, algPtr);
; ..\EAS\BSW\Com\Com.c	  3646  
; ..\EAS\BSW\Com\Com.c	  3647  
; ..\EAS\BSW\Com\Com.c	  3648          TxSigSetBitNum = ComTxSigId - COM_CFG_TXPDU_SIG_START_NUM(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  3649          Position_Byte = (TxSigSetBitNum >> COM_GET_BYTEINX_SHIFT_VALUE);
; ..\EAS\BSW\Com\Com.c	  3650          Position_Bit = (uint8)(TxSigSetBitNum % COM_GET_BITPOS_RES_VALUE);
; ..\EAS\BSW\Com\Com.c	  3651          tempByte = (uint8)(((uint8)1) << Position_Bit);
; ..\EAS\BSW\Com\Com.c	  3652  
; ..\EAS\BSW\Com\Com.c	  3653          if(TRUE != TxSigFilterResult)
; ..\EAS\BSW\Com\Com.c	  3654          {
; ..\EAS\BSW\Com\Com.c	  3655              tempByte = (uint8)~tempByte;
; ..\EAS\BSW\Com\Com.c	  3656              COM_CFG_TXPDU_FILTER_PTR(TxIpduId)[Position_Byte] &= tempByte;
; ..\EAS\BSW\Com\Com.c	  3657          }
; ..\EAS\BSW\Com\Com.c	  3658          else
; ..\EAS\BSW\Com\Com.c	  3659          {
; ..\EAS\BSW\Com\Com.c	  3660  
; ..\EAS\BSW\Com\Com.c	  3661              COM_CFG_TXPDU_FILTER_PTR(TxIpduId)[Position_Byte] |= tempByte;
; ..\EAS\BSW\Com\Com.c	  3662          }
; ..\EAS\BSW\Com\Com.c	  3663  
; ..\EAS\BSW\Com\Com.c	  3664          Com_SendSwitchTxModeFlag[TxIpduId] = COM_TXMODE_SWITCH_SEND_SIGNAL;
; ..\EAS\BSW\Com\Com.c	  3665      }
; ..\EAS\BSW\Com\Com.c	  3666  
; ..\EAS\BSW\Com\Com.c	  3667  }
; ..\EAS\BSW\Com\Com.c	  3668  #endif/*#if(STD_ON == COM_TX_FILTER_SUPPORT)*/
; ..\EAS\BSW\Com\Com.c	  3669  
; ..\EAS\BSW\Com\Com.c	  3670  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  3671  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  3672  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3673  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3674  * Function Name: Com_SetIpduTrigRepFlag
; ..\EAS\BSW\Com\Com.c	  3675  *
; ..\EAS\BSW\Com\Com.c	  3676  * Description:   only called when tx signal's value updated, this funtion only
; ..\EAS\BSW\Com\Com.c	  3677  *                set trigger and reptition flag, the flag will
; ..\EAS\BSW\Com\Com.c	  3678  *                be caculated in mainfunction tx
; ..\EAS\BSW\Com\Com.c	  3679  *
; ..\EAS\BSW\Com\Com.c	  3680  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  3681  *
; ..\EAS\BSW\Com\Com.c	  3682  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3683  *
; ..\EAS\BSW\Com\Com.c	  3684  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3685  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3686  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3687  STATIC FUNC(void, COM_CODE) Com_SetIpduTrigRepFlag
; Function Com_SetIpduTrigRepFlag
.L376:
Com_SetIpduTrigRepFlag:	.type	func

; ..\EAS\BSW\Com\Com.c	  3688  (
; ..\EAS\BSW\Com\Com.c	  3689      Com_SignalTxPropertyType txProperty,
; ..\EAS\BSW\Com\Com.c	  3690      PduIdType TxIpduId,
; ..\EAS\BSW\Com\Com.c	  3691      boolean changeFlag
; ..\EAS\BSW\Com\Com.c	  3692  )
; ..\EAS\BSW\Com\Com.c	  3693  {
; ..\EAS\BSW\Com\Com.c	  3694      switch(txProperty)
; ..\EAS\BSW\Com\Com.c	  3695      {
; ..\EAS\BSW\Com\Com.c	  3696  #if(STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  3697      case COM_TRIGGERED:
; ..\EAS\BSW\Com\Com.c	  3698          /*This is not possible to confirm the txmodeof the message, which must be confirmed after aaa and then determine the BBB*/
; ..\EAS\BSW\Com\Com.c	  3699          Com_PDUTrigRepFlag[TxIpduId] = COM_TRIGGER_REP;
; ..\EAS\BSW\Com\Com.c	  3700          break;
; ..\EAS\BSW\Com\Com.c	  3701  
; ..\EAS\BSW\Com\Com.c	  3702      case COM_TRIGGERED_ON_CHANGE:
; ..\EAS\BSW\Com\Com.c	  3703          if(TRUE == changeFlag)
; ..\EAS\BSW\Com\Com.c	  3704          {
; ..\EAS\BSW\Com\Com.c	  3705              Com_PDUTrigRepFlag[TxIpduId] = COM_TRIGGER_REP;
; ..\EAS\BSW\Com\Com.c	  3706          }
; ..\EAS\BSW\Com\Com.c	  3707          break;
; ..\EAS\BSW\Com\Com.c	  3708  #endif
; ..\EAS\BSW\Com\Com.c	  3709  
; ..\EAS\BSW\Com\Com.c	  3710      case COM_TRIGGERED_WITHOUT_REPETITION:
	jeq	d4,#2,.L99
.L2054:

; ..\EAS\BSW\Com\Com.c	  3711          Com_PDUTrigRepFlag[TxIpduId] = COM_TRIGGER;
; ..\EAS\BSW\Com\Com.c	  3712          break;
; ..\EAS\BSW\Com\Com.c	  3713  
; ..\EAS\BSW\Com\Com.c	  3714      case COM_TRIGGERED_ON_CHANGE_WITHOUT_REPETITION:
	jne	d4,#4,.L101
.L2055:

; ..\EAS\BSW\Com\Com.c	  3715          if(TRUE == changeFlag)
	jne	d6,#1,.L102
.L99:

; ..\EAS\BSW\Com\Com.c	  3716          {
; ..\EAS\BSW\Com\Com.c	  3717              Com_PDUTrigRepFlag[TxIpduId] = COM_TRIGGER;
	movh.a	a15,#@his(Com_PDUTrigRepFlag)
	lea	a15,[a15]@los(Com_PDUTrigRepFlag)
.L2056:
	addsc.a	a15,a15,d5,#0
.L2057:
	mov	d15,#1
.L2058:
	st.b	[a15],d15
.L102:

; ..\EAS\BSW\Com\Com.c	  3718          }
; ..\EAS\BSW\Com\Com.c	  3719          break;
; ..\EAS\BSW\Com\Com.c	  3720  
; ..\EAS\BSW\Com\Com.c	  3721      default:
.L101:

; ..\EAS\BSW\Com\Com.c	  3722          /* pending do nothing*/
; ..\EAS\BSW\Com\Com.c	  3723          break;
; ..\EAS\BSW\Com\Com.c	  3724  
; ..\EAS\BSW\Com\Com.c	  3725  
; ..\EAS\BSW\Com\Com.c	  3726      }
; ..\EAS\BSW\Com\Com.c	  3727  
; ..\EAS\BSW\Com\Com.c	  3728  }
	ret
.L954:
	
__Com_SetIpduTrigRepFlag_function_end:
	.size	Com_SetIpduTrigRepFlag,__Com_SetIpduTrigRepFlag_function_end-Com_SetIpduTrigRepFlag
.L692:
	; End of function
	
	.sdecl	'.text.Com.Com_Init',code,cluster('Com_Init')
	.sect	'.text.Com.Com_Init'
	.align	2
	
	.global	Com_Init

; ..\EAS\BSW\Com\Com.c	  3729  #endif/*#if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)*/
; ..\EAS\BSW\Com\Com.c	  3730  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  3731  
; ..\EAS\BSW\Com\Com.c	  3732  
; ..\EAS\BSW\Com\Com.c	  3733  /*******************************************************************************
; ..\EAS\BSW\Com\Com.c	  3734  *   Asr Stabdard Api
; ..\EAS\BSW\Com\Com.c	  3735  *******************************************************************************/
; ..\EAS\BSW\Com\Com.c	  3736  
; ..\EAS\BSW\Com\Com.c	  3737  
; ..\EAS\BSW\Com\Com.c	  3738  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3739  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3740  * Function Name: Com_Init SWS_Com_432
; ..\EAS\BSW\Com\Com.c	  3741  *
; ..\EAS\BSW\Com\Com.c	  3742  * Description:   tx/rx initialize.  SWS_Com_128
; ..\EAS\BSW\Com\Com.c	  3743  *
; ..\EAS\BSW\Com\Com.c	  3744  * Inputs:        ConfigPtr
; ..\EAS\BSW\Com\Com.c	  3745  *
; ..\EAS\BSW\Com\Com.c	  3746  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3747  *
; ..\EAS\BSW\Com\Com.c	  3748  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3749  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3750  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3751  FUNC(void, COM_CODE) Com_Init
; Function Com_Init
.L378:
Com_Init:	.type	func

; ..\EAS\BSW\Com\Com.c	  3752  (
; ..\EAS\BSW\Com\Com.c	  3753      P2CONST(Com_ConfigType, AUTOMATIC, COM_CONST) ConfigPtr
; ..\EAS\BSW\Com\Com.c	  3754  )
; ..\EAS\BSW\Com\Com.c	  3755  {
; ..\EAS\BSW\Com\Com.c	  3756  #if (COM_MAX_FILTER_OCCURRENCE_NUM > 0)
; ..\EAS\BSW\Com\Com.c	  3757      Com_SignalIdType Index = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3758  #endif
; ..\EAS\BSW\Com\Com.c	  3759  
; ..\EAS\BSW\Com\Com.c	  3760  #if (STD_ON == COM_IPDU_GROUP_FUN)    
; ..\EAS\BSW\Com\Com.c	  3761      Com_IpduGroupIdType grpIdx = (Com_IpduGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  3762  #endif
; ..\EAS\BSW\Com\Com.c	  3763  
; ..\EAS\BSW\Com\Com.c	  3764  #if(COM_CONFIG_VARIANTS == STD_CONFIG_VARIANTS_POSTBUILD)
; ..\EAS\BSW\Com\Com.c	  3765      if(NULL_PTR == ConfigPtr)
; ..\EAS\BSW\Com\Com.c	  3766      {
; ..\EAS\BSW\Com\Com.c	  3767          COM_DET_REPORT_ERROR(COMServiceId_Init, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  3768      }
; ..\EAS\BSW\Com\Com.c	  3769      else
; ..\EAS\BSW\Com\Com.c	  3770  #endif
; ..\EAS\BSW\Com\Com.c	  3771      {
; ..\EAS\BSW\Com\Com.c	  3772  #if(COM_CONFIG_VARIANTS == STD_CONFIG_VARIANTS_POSTBUILD)
; ..\EAS\BSW\Com\Com.c	  3773          Com_PBConfig = ConfigPtr;
; ..\EAS\BSW\Com\Com.c	  3774          (void)Com_PBConfig;
; ..\EAS\BSW\Com\Com.c	  3775  #else
; ..\EAS\BSW\Com\Com.c	  3776          (void)ConfigPtr;
; ..\EAS\BSW\Com\Com.c	  3777  #endif
; ..\EAS\BSW\Com\Com.c	  3778  
; ..\EAS\BSW\Com\Com.c	  3779  #if (STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  3780          Com_RxInit();
	call	Com_RxInit
.L1157:

; ..\EAS\BSW\Com\Com.c	  3781  #endif
; ..\EAS\BSW\Com\Com.c	  3782  
; ..\EAS\BSW\Com\Com.c	  3783  #if (STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  3784          Com_TxInit();
	call	Com_TxInit
.L1367:

; ..\EAS\BSW\Com\Com.c	  3785  #endif
; ..\EAS\BSW\Com\Com.c	  3786  
; ..\EAS\BSW\Com\Com.c	  3787  #if (STD_ON == COM_IPDU_GROUP_FUN)      
; ..\EAS\BSW\Com\Com.c	  3788          for(grpIdx = 0; grpIdx < (Com_IpduGroupIdType)COM_PDUGROUP_MAX_NUM; grpIdx++)
	mov	d15,#0
.L1158:

; ..\EAS\BSW\Com\Com.c	  3789          {
; ..\EAS\BSW\Com\Com.c	  3790              Com_IpduGroupStartFlag[grpIdx] = FALSE;
	mov	d0,d15
.L1160:
	j	.L103
.L104:
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L1368:
	addsc.a	a15,a15,d15,#0
.L1161:
	st.b	[a15],d0
.L1162:
	add	d15,#1
.L103:
	jlt.u	d15,#3,.L104
.L1369:

; ..\EAS\BSW\Com\Com.c	  3791          }
; ..\EAS\BSW\Com\Com.c	  3792          
; ..\EAS\BSW\Com\Com.c	  3793  #endif
; ..\EAS\BSW\Com\Com.c	  3794  
; ..\EAS\BSW\Com\Com.c	  3795  #if (STD_ON == COM_RX_TIMEOUT_MONITOR)      
; ..\EAS\BSW\Com\Com.c	  3796          for(grpIdx = 0; grpIdx < (Com_IpduGroupIdType)COM_PDUGROUP_MAX_NUM; grpIdx++)
	mov	d15,#0
.L1370:

; ..\EAS\BSW\Com\Com.c	  3797          {
; ..\EAS\BSW\Com\Com.c	  3798              Com_IpduGroupDMEnableFlag[grpIdx] = TRUE;
	mov	d0,#1
.L1371:
	j	.L105
.L106:
	movh.a	a15,#@his(Com_IpduGroupDMEnableFlag)
	lea	a15,[a15]@los(Com_IpduGroupDMEnableFlag)
.L1372:
	addsc.a	a15,a15,d15,#0
.L1373:
	st.b	[a15],d0
.L1374:
	add	d15,#1
.L105:
	jlt.u	d15,#3,.L106
.L1375:

; ..\EAS\BSW\Com\Com.c	  3799          }
; ..\EAS\BSW\Com\Com.c	  3800          
; ..\EAS\BSW\Com\Com.c	  3801  #endif
; ..\EAS\BSW\Com\Com.c	  3802  
; ..\EAS\BSW\Com\Com.c	  3803  #if (COM_MAX_FILTER_OCCURRENCE_NUM > 0)
; ..\EAS\BSW\Com\Com.c	  3804          /* Occurrence is only used in config file, so there is no offset index reg for pdu*/
; ..\EAS\BSW\Com\Com.c	  3805          for(Index = (uint16)0; Index < (uint16)COM_MAX_FILTER_OCCURRENCE_NUM; Index++)
; ..\EAS\BSW\Com\Com.c	  3806          {
; ..\EAS\BSW\Com\Com.c	  3807              Com_Sig_Occurrence[Index] = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  3808          }
; ..\EAS\BSW\Com\Com.c	  3809  #endif
; ..\EAS\BSW\Com\Com.c	  3810          Com_InitStateFlag = COM_INIT;
	movh.a	a15,#@his(Com_InitStateFlag)
.L1376:
	mov	d15,d0
.L1159:
	st.b	[a15]@los(Com_InitStateFlag),d15
.L1377:

; ..\EAS\BSW\Com\Com.c	  3811  
; ..\EAS\BSW\Com\Com.c	  3812      }
; ..\EAS\BSW\Com\Com.c	  3813  
; ..\EAS\BSW\Com\Com.c	  3814  }
	ret
.L760:
	
__Com_Init_function_end:
	.size	Com_Init,__Com_Init_function_end-Com_Init
.L457:
	; End of function
	
	.sdecl	'.text.Com.Com_DeInit',code,cluster('Com_DeInit')
	.sect	'.text.Com.Com_DeInit'
	.align	2
	
	.global	Com_DeInit

; ..\EAS\BSW\Com\Com.c	  3815  
; ..\EAS\BSW\Com\Com.c	  3816  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3817  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3818  * Function Name: Com_DeInit SWS_Com_130
; ..\EAS\BSW\Com\Com.c	  3819  *
; ..\EAS\BSW\Com\Com.c	  3820  * Description:   tx/rx Deinitialize.
; ..\EAS\BSW\Com\Com.c	  3821  *
; ..\EAS\BSW\Com\Com.c	  3822  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  3823  *
; ..\EAS\BSW\Com\Com.c	  3824  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  3825  *
; ..\EAS\BSW\Com\Com.c	  3826  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3827  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3828  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3829  FUNC(void, COM_CODE) Com_DeInit
; Function Com_DeInit
.L380:
Com_DeInit:	.type	func

; ..\EAS\BSW\Com\Com.c	  3830  (
; ..\EAS\BSW\Com\Com.c	  3831      void
; ..\EAS\BSW\Com\Com.c	  3832  )
; ..\EAS\BSW\Com\Com.c	  3833  {
; ..\EAS\BSW\Com\Com.c	  3834  
; ..\EAS\BSW\Com\Com.c	  3835      PduIdType IpduIndex = (PduIdType)0;/* sigID PduId will not exceed u16*/
; ..\EAS\BSW\Com\Com.c	  3836  #if (COM_MAX_FILTER_OCCURRENCE_NUM > 0)
; ..\EAS\BSW\Com\Com.c	  3837      Com_SignalIdType Index = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  3838  #endif
; ..\EAS\BSW\Com\Com.c	  3839  
; ..\EAS\BSW\Com\Com.c	  3840  
; ..\EAS\BSW\Com\Com.c	  3841  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  3842      for(IpduIndex = (PduIdType)0; IpduIndex < (PduIdType)COM_GWSIG_MAX_NUM; IpduIndex++)
; ..\EAS\BSW\Com\Com.c	  3843      {
; ..\EAS\BSW\Com\Com.c	  3844          Com_GWSigFlag[IpduIndex] = FALSE;
; ..\EAS\BSW\Com\Com.c	  3845      }
; ..\EAS\BSW\Com\Com.c	  3846  #endif
; ..\EAS\BSW\Com\Com.c	  3847  
; ..\EAS\BSW\Com\Com.c	  3848      /*SWS_Com_129*/
; ..\EAS\BSW\Com\Com.c	  3849  #if (COM_RXPDU_MAX_NUM > 0)
; ..\EAS\BSW\Com\Com.c	  3850      for(IpduIndex = (PduIdType)0; IpduIndex < COM_RXPDU_NUM; IpduIndex++)
	mov	d8,#0
.L1163:
	mov	d15,#58
.L1382:
	j	.L107
.L108:

; ..\EAS\BSW\Com\Com.c	  3851      {
; ..\EAS\BSW\Com\Com.c	  3852          Com_InitRxPdu(IpduIndex, FALSE);
	mov	d5,#0
	mov	d4,d8
.L1164:
	call	Com_InitRxPdu
.L1165:
	add	d8,#1
.L107:
	jlt.u	d8,d15,.L108
.L1383:

; ..\EAS\BSW\Com\Com.c	  3853      }
; ..\EAS\BSW\Com\Com.c	  3854  #endif
; ..\EAS\BSW\Com\Com.c	  3855  
; ..\EAS\BSW\Com\Com.c	  3856  #if (COM_TXPDU_MAX_NUM > 0)
; ..\EAS\BSW\Com\Com.c	  3857      for(IpduIndex = (PduIdType)0; IpduIndex < COM_TXPDU_NUM; IpduIndex++)
	mov	d8,#0
.L1384:
	mov	d15,#46
.L1385:
	j	.L109
.L110:

; ..\EAS\BSW\Com\Com.c	  3858      {
; ..\EAS\BSW\Com\Com.c	  3859          Com_InitTxPdu(IpduIndex, FALSE);
	mov	d5,#0
	mov	d4,d8
.L1166:
	call	Com_InitTxPdu
.L1167:
	add	d8,#1
.L109:
	jlt.u	d8,d15,.L110
.L1386:

; ..\EAS\BSW\Com\Com.c	  3860      }
; ..\EAS\BSW\Com\Com.c	  3861  #endif
; ..\EAS\BSW\Com\Com.c	  3862  
; ..\EAS\BSW\Com\Com.c	  3863  
; ..\EAS\BSW\Com\Com.c	  3864  #if (COM_MAX_FILTER_OCCURRENCE_NUM > 0)
; ..\EAS\BSW\Com\Com.c	  3865      /* Occurrence is only used in config file, so there is no offset index reg for pdu*/
; ..\EAS\BSW\Com\Com.c	  3866      for(Index = (uint16)0; Index < (uint16)COM_MAX_FILTER_OCCURRENCE_NUM; Index++)
; ..\EAS\BSW\Com\Com.c	  3867      {
; ..\EAS\BSW\Com\Com.c	  3868          Com_Sig_Occurrence[Index] = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  3869      }
; ..\EAS\BSW\Com\Com.c	  3870  #endif
; ..\EAS\BSW\Com\Com.c	  3871  
; ..\EAS\BSW\Com\Com.c	  3872  
; ..\EAS\BSW\Com\Com.c	  3873      Com_InitStateFlag = COM_UNINIT;
	movh.a	a15,#@his(Com_InitStateFlag)
.L1387:
	mov	d15,#0
.L1388:
	st.b	[a15]@los(Com_InitStateFlag),d15
.L1389:

; ..\EAS\BSW\Com\Com.c	  3874  }
	ret
.L765:
	
__Com_DeInit_function_end:
	.size	Com_DeInit,__Com_DeInit_function_end-Com_DeInit
.L462:
	; End of function
	
	.sdecl	'.text.Com.Com_GetStatus',code,cluster('Com_GetStatus')
	.sect	'.text.Com.Com_GetStatus'
	.align	2
	
	.global	Com_GetStatus

; ..\EAS\BSW\Com\Com.c	  3875  
; ..\EAS\BSW\Com\Com.c	  3876  
; ..\EAS\BSW\Com\Com.c	  3877  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3878  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3879  * Function Name: Com_GetStatus SWS_Com_00194
; ..\EAS\BSW\Com\Com.c	  3880  *
; ..\EAS\BSW\Com\Com.c	  3881  * Description:   Get If Com is Init
; ..\EAS\BSW\Com\Com.c	  3882  *
; ..\EAS\BSW\Com\Com.c	  3883  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  3884  *
; ..\EAS\BSW\Com\Com.c	  3885  * Outputs:       Com_StatusType
; ..\EAS\BSW\Com\Com.c	  3886  *
; ..\EAS\BSW\Com\Com.c	  3887  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3888  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3889  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3890  FUNC(Com_StatusType, COM_CODE) Com_GetStatus
; Function Com_GetStatus
.L382:
Com_GetStatus:	.type	func

; ..\EAS\BSW\Com\Com.c	  3891  (
; ..\EAS\BSW\Com\Com.c	  3892      void
; ..\EAS\BSW\Com\Com.c	  3893  )
; ..\EAS\BSW\Com\Com.c	  3894  {
; ..\EAS\BSW\Com\Com.c	  3895      return Com_InitStateFlag;
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d2,[a15]@los(Com_InitStateFlag)
.L1394:

; ..\EAS\BSW\Com\Com.c	  3896  }
	ret
.L769:
	
__Com_GetStatus_function_end:
	.size	Com_GetStatus,__Com_GetStatus_function_end-Com_GetStatus
.L467:
	; End of function
	
	.sdecl	'.text.Com.Com_SendSignal',code,cluster('Com_SendSignal')
	.sect	'.text.Com.Com_SendSignal'
	.align	2
	
	.global	Com_SendSignal

; ..\EAS\BSW\Com\Com.c	  3897  
; ..\EAS\BSW\Com\Com.c	  3898  
; ..\EAS\BSW\Com\Com.c	  3899  
; ..\EAS\BSW\Com\Com.c	  3900  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3901  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3902  * Function Name: Com_SendSignal SWS_Com_00197
; ..\EAS\BSW\Com\Com.c	  3903  *
; ..\EAS\BSW\Com\Com.c	  3904  * Description:   This service updates the signal object identified by
; ..\EAS\BSW\Com\Com.c	  3905  *                SignalId with the signal referenced by the SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  3906  *                parameter
; ..\EAS\BSW\Com\Com.c	  3907  *
; ..\EAS\BSW\Com\Com.c	  3908  * Inputs:        SignalId: Signal handle
; ..\EAS\BSW\Com\Com.c	  3909  *                SignalDataPtr: Reference to the Signal data to be transmitted
; ..\EAS\BSW\Com\Com.c	  3910  *
; ..\EAS\BSW\Com\Com.c	  3911  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  3912  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  3913  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  3914  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  3915                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  3916  *
; ..\EAS\BSW\Com\Com.c	  3917  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3918  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3919  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3920  FUNC(uint8, COM_CODE) Com_SendSignal
; Function Com_SendSignal
.L384:
Com_SendSignal:	.type	func

; ..\EAS\BSW\Com\Com.c	  3921  (
; ..\EAS\BSW\Com\Com.c	  3922      Com_SignalIdType SignalId,
; ..\EAS\BSW\Com\Com.c	  3923      P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  3924  )
; ..\EAS\BSW\Com\Com.c	  3925  {
; ..\EAS\BSW\Com\Com.c	  3926      uint8 result = COM_SERVICE_NOT_AVAILABLE;
	mov	d8,#128
.L1170:

; ..\EAS\BSW\Com\Com.c	  3927  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  3928      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1399:
	jeq	d15,#1,.L112
.L1400:

; ..\EAS\BSW\Com\Com.c	  3929      {
; ..\EAS\BSW\Com\Com.c	  3930          COM_DET_REPORT_ERROR(COMServiceId_SendSignal, COM_E_UNINIT);
	mov	d4,#50
.L1169:
	mov	d5,#0
	mov	d6,#10
	mov	d7,#2
	call	Det_ReportError
.L1168:
	j	.L113
.L112:

; ..\EAS\BSW\Com\Com.c	  3931      }
; ..\EAS\BSW\Com\Com.c	  3932      else if(SignalId >= COM_TXSIG_NUM)
	mov	d15,#266
.L1401:
	jge.u	d4,d15,.L114
.L1402:

; ..\EAS\BSW\Com\Com.c	  3933      {
; ..\EAS\BSW\Com\Com.c	  3934          COM_DET_REPORT_ERROR(COMServiceId_SendSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  3935      }
; ..\EAS\BSW\Com\Com.c	  3936      else if(COM_SIG_DYN == COM_CFG_TXSIG_TYPE(SignalId))
	mul	d15,d4,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]2
.L1403:
	mov	d15,#8
.L1404:
	jne	d15,d0,.L115
.L114:

; ..\EAS\BSW\Com\Com.c	  3937      {
; ..\EAS\BSW\Com\Com.c	  3938          COM_DET_REPORT_ERROR(COMServiceId_SendSignal, COM_E_PARAM);
	mov	d4,#50
.L1173:
	mov	d5,#0
	mov	d6,#10
	mov	d7,#1
	call	Det_ReportError
.L1172:
	j	.L116
.L115:

; ..\EAS\BSW\Com\Com.c	  3939      }
; ..\EAS\BSW\Com\Com.c	  3940      else if(NULL_PTR == SignalDataPtr)
	mov.a	a15,#0
.L1405:
	jne.a	a15,a4,.L117
.L1406:

; ..\EAS\BSW\Com\Com.c	  3941      {
; ..\EAS\BSW\Com\Com.c	  3942          COM_DET_REPORT_ERROR(COMServiceId_SendSignal, COM_E_PARAM_POINTER);
	mov	d4,#50
.L1175:
	mov	d5,#0
	mov	d6,#10
	mov	d7,#3
	call	Det_ReportError
.L1174:
	j	.L118
.L117:

; ..\EAS\BSW\Com\Com.c	  3943      }
; ..\EAS\BSW\Com\Com.c	  3944      else
; ..\EAS\BSW\Com\Com.c	  3945      {
; ..\EAS\BSW\Com\Com.c	  3946          SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  3947          result = Com_WriteSignal_Internal(SignalId, SignalDataPtr, COM_CFG_TXSIG_LENGTH(SignalId));
	mul	d15,d4,#40
	movh.a	a15,#@his(ComTxSigCfgTable)
	lea	a15,[a15]@los(ComTxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d5,[a15]10
	call	Com_WriteSignal_Internal
.L1171:
	mov	d8,d2
.L118:
.L116:
.L113:

; ..\EAS\BSW\Com\Com.c	  3948          SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  3949  
; ..\EAS\BSW\Com\Com.c	  3950      }
; ..\EAS\BSW\Com\Com.c	  3951  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  3952  
; ..\EAS\BSW\Com\Com.c	  3953  
; ..\EAS\BSW\Com\Com.c	  3954      return  result;
	mov	d2,d8
.L1176:

; ..\EAS\BSW\Com\Com.c	  3955  
; ..\EAS\BSW\Com\Com.c	  3956  }
	ret
.L770:
	
__Com_SendSignal_function_end:
	.size	Com_SendSignal,__Com_SendSignal_function_end-Com_SendSignal
.L472:
	; End of function
	
	.sdecl	'.text.Com.Com_InvalidateSignal',code,cluster('Com_InvalidateSignal')
	.sect	'.text.Com.Com_InvalidateSignal'
	.align	2
	
	.global	Com_InvalidateSignal

; ..\EAS\BSW\Com\Com.c	  3957  
; ..\EAS\BSW\Com\Com.c	  3958  
; ..\EAS\BSW\Com\Com.c	  3959  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  3960  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3961  * Function Name: Com_InvalidateSignal  SWS_Com_00203
; ..\EAS\BSW\Com\Com.c	  3962  *
; ..\EAS\BSW\Com\Com.c	  3963  * Description:   This service copies the invalid data of signal identified by CFG
; ..\EAS\BSW\Com\Com.c	  3964  *
; ..\EAS\BSW\Com\Com.c	  3965  * Inputs:        SignalId: ignal handle
; ..\EAS\BSW\Com\Com.c	  3966  *
; ..\EAS\BSW\Com\Com.c	  3967  * Outputs:       E_OK
; ..\EAS\BSW\Com\Com.c	  3968  *                COM_SERVICE_NOT_AVAILABLE
; ..\EAS\BSW\Com\Com.c	  3969  *                COM_BUSY
; ..\EAS\BSW\Com\Com.c	  3970  *
; ..\EAS\BSW\Com\Com.c	  3971  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  3972  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  3973  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  3974  FUNC(uint8, COM_CODE) Com_InvalidateSignal
; Function Com_InvalidateSignal
.L386:
Com_InvalidateSignal:	.type	func

; ..\EAS\BSW\Com\Com.c	  3975  (
; ..\EAS\BSW\Com\Com.c	  3976      Com_SignalIdType SignalId
; ..\EAS\BSW\Com\Com.c	  3977  )
; ..\EAS\BSW\Com\Com.c	  3978  {
; ..\EAS\BSW\Com\Com.c	  3979      uint8 result = COM_SERVICE_NOT_AVAILABLE;
	mov	d2,#128
.L1177:

; ..\EAS\BSW\Com\Com.c	  3980  #if((STD_ON == COM_TXPDU_FUN) && (STD_ON == COM_TX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  3981      PduLengthType length = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  3982  #endif
; ..\EAS\BSW\Com\Com.c	  3983  
; ..\EAS\BSW\Com\Com.c	  3984  #if((STD_ON == COM_TXPDU_FUN) && (STD_ON == COM_TX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  3985      if(COM_INIT != Com_InitStateFlag)
; ..\EAS\BSW\Com\Com.c	  3986      {
; ..\EAS\BSW\Com\Com.c	  3987          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignal, COM_E_UNINIT);
; ..\EAS\BSW\Com\Com.c	  3988      }
; ..\EAS\BSW\Com\Com.c	  3989      else if(SignalId >= COM_TXSIG_NUM)
; ..\EAS\BSW\Com\Com.c	  3990      {
; ..\EAS\BSW\Com\Com.c	  3991          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  3992      }
; ..\EAS\BSW\Com\Com.c	  3993      else if(NULL_PTR == COM_CFG_TXSIG_INVALID_VALUE_PTR(SignalId))
; ..\EAS\BSW\Com\Com.c	  3994      {
; ..\EAS\BSW\Com\Com.c	  3995          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  3996      }
; ..\EAS\BSW\Com\Com.c	  3997  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  3998      /* in this version, only invalidateSignalGrp is allowed*/
; ..\EAS\BSW\Com\Com.c	  3999      else if(TRUE == COM_CFG_TXSIG_IS_GROUP_SIGNAL(SignalId))
; ..\EAS\BSW\Com\Com.c	  4000      {
; ..\EAS\BSW\Com\Com.c	  4001          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4002      }
; ..\EAS\BSW\Com\Com.c	  4003  #endif
; ..\EAS\BSW\Com\Com.c	  4004      else
; ..\EAS\BSW\Com\Com.c	  4005      {
; ..\EAS\BSW\Com\Com.c	  4006          length = COM_CFG_TXSIG_LENGTH(SignalId);
; ..\EAS\BSW\Com\Com.c	  4007  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4008          if(COM_SIG_DYN == COM_CFG_TXSIG_TYPE(SignalId))
; ..\EAS\BSW\Com\Com.c	  4009          {
; ..\EAS\BSW\Com\Com.c	  4010              length = COM_CFG_TXSIG_INVALID_VALUE_LEN(SignalId);
; ..\EAS\BSW\Com\Com.c	  4011          }
; ..\EAS\BSW\Com\Com.c	  4012  #endif
; ..\EAS\BSW\Com\Com.c	  4013          SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4014          result = Com_WriteSignal_Internal(SignalId, COM_CFG_TXSIG_INVALID_VALUE_PTR(SignalId), length);
; ..\EAS\BSW\Com\Com.c	  4015          SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4016      }
; ..\EAS\BSW\Com\Com.c	  4017  #endif/*#if((STD_ON == COM_TXPDU_FUN) && (STD_ON == COM_TX_INVALID_SUPPORT))*/
; ..\EAS\BSW\Com\Com.c	  4018  
; ..\EAS\BSW\Com\Com.c	  4019      return    result;
; ..\EAS\BSW\Com\Com.c	  4020  
; ..\EAS\BSW\Com\Com.c	  4021  }
	ret
.L780:
	
__Com_InvalidateSignal_function_end:
	.size	Com_InvalidateSignal,__Com_InvalidateSignal_function_end-Com_InvalidateSignal
.L482:
	; End of function
	
	.sdecl	'.text.Com.Com_SendDynSignal',code,cluster('Com_SendDynSignal')
	.sect	'.text.Com.Com_SendDynSignal'
	.align	2
	
	.global	Com_SendDynSignal

; ..\EAS\BSW\Com\Com.c	  4022  
; ..\EAS\BSW\Com\Com.c	  4023  
; ..\EAS\BSW\Com\Com.c	  4024  
; ..\EAS\BSW\Com\Com.c	  4025  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4026  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4027  * Function Name: Com_SendDynSignal  SWS_Com_00627
; ..\EAS\BSW\Com\Com.c	  4028  *
; ..\EAS\BSW\Com\Com.c	  4029  * Description:   This service updates the signal object identified by
; ..\EAS\BSW\Com\Com.c	  4030  *                SignalId with the signal referenced by the SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  4031  *                parameter
; ..\EAS\BSW\Com\Com.c	  4032  *
; ..\EAS\BSW\Com\Com.c	  4033  * Inputs:        SignalId: Signal handle
; ..\EAS\BSW\Com\Com.c	  4034  *                SignalDataPtr: Reference to the Signal data to be transmitted
; ..\EAS\BSW\Com\Com.c	  4035  *                Length: Dyn-Signal length
; ..\EAS\BSW\Com\Com.c	  4036  *
; ..\EAS\BSW\Com\Com.c	  4037  * Outputs:       E_OK
; ..\EAS\BSW\Com\Com.c	  4038  *                COM_SERVICE_NOT_AVAILABLE
; ..\EAS\BSW\Com\Com.c	  4039  *                COM_BUSY
; ..\EAS\BSW\Com\Com.c	  4040  *
; ..\EAS\BSW\Com\Com.c	  4041  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4042  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4043  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4044  FUNC(uint8, COM_CODE) Com_SendDynSignal
; Function Com_SendDynSignal
.L388:
Com_SendDynSignal:	.type	func

; ..\EAS\BSW\Com\Com.c	  4045  (
; ..\EAS\BSW\Com\Com.c	  4046      Com_SignalIdType SignalId,
; ..\EAS\BSW\Com\Com.c	  4047      P2CONST(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; ..\EAS\BSW\Com\Com.c	  4048      uint16 Length
; ..\EAS\BSW\Com\Com.c	  4049  )
; ..\EAS\BSW\Com\Com.c	  4050  {
; ..\EAS\BSW\Com\Com.c	  4051      uint8 result = COM_SERVICE_NOT_AVAILABLE;
; ..\EAS\BSW\Com\Com.c	  4052  
; ..\EAS\BSW\Com\Com.c	  4053      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1411:
	jeq	d15,#1,.L121
.L1412:

; ..\EAS\BSW\Com\Com.c	  4054      {
; ..\EAS\BSW\Com\Com.c	  4055          COM_DET_REPORT_ERROR(COMServiceId_SendDynSignal, COM_E_UNINIT);
	mov	d7,#2
.L1413:
	j	.L122
.L121:

; ..\EAS\BSW\Com\Com.c	  4056      }
; ..\EAS\BSW\Com\Com.c	  4057  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4058      else if((SignalId >= COM_TXSIG_NUM)
; ..\EAS\BSW\Com\Com.c	  4059              || (COM_SIG_DYN != COM_CFG_TXSIG_TYPE(SignalId)))
; ..\EAS\BSW\Com\Com.c	  4060      {
; ..\EAS\BSW\Com\Com.c	  4061          COM_DET_REPORT_ERROR(COMServiceId_SendDynSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4062      }
; ..\EAS\BSW\Com\Com.c	  4063      else if(NULL_PTR == SignalDataPtr)
; ..\EAS\BSW\Com\Com.c	  4064      {
; ..\EAS\BSW\Com\Com.c	  4065          COM_DET_REPORT_ERROR(COMServiceId_SendDynSignal, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  4066      }
; ..\EAS\BSW\Com\Com.c	  4067      else
; ..\EAS\BSW\Com\Com.c	  4068      {
; ..\EAS\BSW\Com\Com.c	  4069          /* SWS_Com_00334, signal can be updated when pdu is stop
; ..\EAS\BSW\Com\Com.c	  4070             in stop mode, tms result, txmode and data will be saved
; ..\EAS\BSW\Com\Com.c	  4071             but trigger will not be saved,
; ..\EAS\BSW\Com\Com.c	  4072             so that the msg will not be send at once when pdu is started
; ..\EAS\BSW\Com\Com.c	  4073          */
; ..\EAS\BSW\Com\Com.c	  4074          if(Length > COM_CFG_TXSIG_LENGTH(SignalId))
; ..\EAS\BSW\Com\Com.c	  4075          {
; ..\EAS\BSW\Com\Com.c	  4076              COM_DET_REPORT_ERROR(COMServiceId_SendDynSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4077              result = E_NOT_OK;
; ..\EAS\BSW\Com\Com.c	  4078          }
; ..\EAS\BSW\Com\Com.c	  4079          else
; ..\EAS\BSW\Com\Com.c	  4080          {
; ..\EAS\BSW\Com\Com.c	  4081  
; ..\EAS\BSW\Com\Com.c	  4082              SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4083              result = Com_WriteSignal_Internal(SignalId, SignalDataPtr, Length);
; ..\EAS\BSW\Com\Com.c	  4084              SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4085          }
; ..\EAS\BSW\Com\Com.c	  4086      }
; ..\EAS\BSW\Com\Com.c	  4087  #else
; ..\EAS\BSW\Com\Com.c	  4088      else
; ..\EAS\BSW\Com\Com.c	  4089      {
; ..\EAS\BSW\Com\Com.c	  4090          COM_DET_REPORT_ERROR(COMServiceId_SendDynSignal, COM_E_PARAM);
	mov	d7,#1
.L122:
	mov	d4,#50
.L1180:
	mov	d5,#0
.L1178:
	mov	d6,#33
	call	Det_ReportError
.L1179:
	mov	d2,#128
.L1181:

; ..\EAS\BSW\Com\Com.c	  4091      }
; ..\EAS\BSW\Com\Com.c	  4092  #endif/*#if(STD_ON == COM_TX_DYN_PDU_SUPPORT)*/
; ..\EAS\BSW\Com\Com.c	  4093  
; ..\EAS\BSW\Com\Com.c	  4094  
; ..\EAS\BSW\Com\Com.c	  4095  
; ..\EAS\BSW\Com\Com.c	  4096      return  result;
; ..\EAS\BSW\Com\Com.c	  4097  
; ..\EAS\BSW\Com\Com.c	  4098  }
	ret
.L775:
	
__Com_SendDynSignal_function_end:
	.size	Com_SendDynSignal,__Com_SendDynSignal_function_end-Com_SendDynSignal
.L477:
	; End of function
	
	.sdecl	'.text.Com.Com_TxConfirmation',code,cluster('Com_TxConfirmation')
	.sect	'.text.Com.Com_TxConfirmation'
	.align	2
	
	.global	Com_TxConfirmation

; ..\EAS\BSW\Com\Com.c	  4099  
; ..\EAS\BSW\Com\Com.c	  4100  
; ..\EAS\BSW\Com\Com.c	  4101  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4102  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  4103  * Function Name: Com_TxConfirmation SWS_Com_00124
; ..\EAS\BSW\Com\Com.c	  4104  *
; ..\EAS\BSW\Com\Com.c	  4105  * Description:   tx confirmation when transmit successful.
; ..\EAS\BSW\Com\Com.c	  4106  *
; ..\EAS\BSW\Com\Com.c	  4107  * Inputs:        TxPduId
; ..\EAS\BSW\Com\Com.c	  4108  *
; ..\EAS\BSW\Com\Com.c	  4109  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4110  *
; ..\EAS\BSW\Com\Com.c	  4111  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4112  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  4113  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4114  FUNC(void, COM_CODE) Com_TxConfirmation
; Function Com_TxConfirmation
.L390:
Com_TxConfirmation:	.type	func
	mov	d8,d4
.L1183:

; ..\EAS\BSW\Com\Com.c	  4115  (
; ..\EAS\BSW\Com\Com.c	  4116      PduIdType TxPduId
; ..\EAS\BSW\Com\Com.c	  4117  )
; ..\EAS\BSW\Com\Com.c	  4118  {
; ..\EAS\BSW\Com\Com.c	  4119  
; ..\EAS\BSW\Com\Com.c	  4120      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1821:
	jeq	d15,#1,.L124
.L1822:

; ..\EAS\BSW\Com\Com.c	  4121      {
; ..\EAS\BSW\Com\Com.c	  4122          COM_DET_REPORT_ERROR(COMServiceId_TxConfirmation, COM_E_UNINIT);
	mov	d4,#50
.L1182:
	mov	d5,#0
	mov	d6,#64
	mov	d7,#2
	j	Det_ReportError
.L124:

; ..\EAS\BSW\Com\Com.c	  4123      }
; ..\EAS\BSW\Com\Com.c	  4124  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4125      else if(TxPduId >= COM_TXPDU_NUM)
	mov	d15,#46
.L1823:
	jge.u	d8,d15,.L126
.L1824:

; ..\EAS\BSW\Com\Com.c	  4126      {
; ..\EAS\BSW\Com\Com.c	  4127          COM_DET_REPORT_ERROR(COMServiceId_TxConfirmation, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4128      }
; ..\EAS\BSW\Com\Com.c	  4129      else if(TRUE == COM_CFG_TXPDU_IS_TP_PDU(TxPduId))
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]41
.L1825:
	jne	d15,#1,.L127
.L126:

; ..\EAS\BSW\Com\Com.c	  4130      {
; ..\EAS\BSW\Com\Com.c	  4131          COM_DET_REPORT_ERROR(COMServiceId_TxConfirmation, COM_E_PARAM);
	mov	d4,#50
.L1184:
	mov	d5,#0
	mov	d6,#64
	mov	d7,#1
	j	Det_ReportError
.L127:

; ..\EAS\BSW\Com\Com.c	  4132      }
; ..\EAS\BSW\Com\Com.c	  4133      else
; ..\EAS\BSW\Com\Com.c	  4134      {
; ..\EAS\BSW\Com\Com.c	  4135          /* None type Pdu like Lin Pdu, is controlled by other module like linif,
; ..\EAS\BSW\Com\Com.c	  4136             but com may need to monitor timeout with this txconfirmation ,
; ..\EAS\BSW\Com\Com.c	  4137             also need to call rte_TxAck to uplayer module*/
; ..\EAS\BSW\Com\Com.c	  4138          /*SWS_Com_00800 STOP Pdu ignor txConf*/
; ..\EAS\BSW\Com\Com.c	  4139          if((COM_TXPDU_START_BUSY == Com_TxPduState[TxPduId]) || (COM_TXPDU_TXMODE(TxPduId) == COM_PDU_NONE))
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1826:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1827:
	jeq	d15,#2,.L129
.L1828:
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
	ld.bu	d0,[a15]
.L1829:
	jne	d0,#2,.L130
.L129:

; ..\EAS\BSW\Com\Com.c	  4140          {
; ..\EAS\BSW\Com\Com.c	  4141              SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4142  
; ..\EAS\BSW\Com\Com.c	  4143              if(TRUE == COM_CFG_TXPDU_IS_IMM_PROCESSING(TxPduId))
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1830:
	jne	d15,#1,.L131
.L1831:

; ..\EAS\BSW\Com\Com.c	  4144              {
; ..\EAS\BSW\Com\Com.c	  4145                  /* switch IDLE in this fucntion as nothinf need to do in mainfuntionTx*/
; ..\EAS\BSW\Com\Com.c	  4146                  Com_ProcessTxConf(TxPduId, COM_TXPDU_START_TXOK);
	mov	d5,#4
	call	Com_ProcessTxConf
.L1185:
	j	.L132
.L131:

; ..\EAS\BSW\Com\Com.c	  4147              }
; ..\EAS\BSW\Com\Com.c	  4148              else
; ..\EAS\BSW\Com\Com.c	  4149              {
; ..\EAS\BSW\Com\Com.c	  4150                  /* set to OK, process will be done in mainfuntionTx*/
; ..\EAS\BSW\Com\Com.c	  4151                  Com_TxPduState[TxPduId] = COM_TXPDU_START_TXOK;
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1832:
	addsc.a	a15,a15,d8,#0
.L1833:
	mov	d15,#4
.L1834:
	st.b	[a15],d15
.L132:

; ..\EAS\BSW\Com\Com.c	  4152              }
; ..\EAS\BSW\Com\Com.c	  4153  
; ..\EAS\BSW\Com\Com.c	  4154  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4155              if(COM_CUB_CONF == COM_CFG_TXPDU_UPDATEBIT_CLEARTYPE(TxPduId))
; ..\EAS\BSW\Com\Com.c	  4156              {
; ..\EAS\BSW\Com\Com.c	  4157                  Com_ClearUpdateBit(TxPduId);
; ..\EAS\BSW\Com\Com.c	  4158              }
; ..\EAS\BSW\Com\Com.c	  4159  #endif
; ..\EAS\BSW\Com\Com.c	  4160  
; ..\EAS\BSW\Com\Com.c	  4161  #if(STD_ON == COM_MDT_CYCLIC_TRANSMISSION)/*SWS_Com_00469, reset min delay timer when txConf is received*/
; ..\EAS\BSW\Com\Com.c	  4162              if((COM_TXPDU_TXMODE(TxPduId) != COM_PDU_NONE)
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
	ld.bu	d0,[a15]
.L1835:
	jeq	d0,#2,.L133
.L1836:

; ..\EAS\BSW\Com\Com.c	  4163                      && (COM_CFG_TXPDU_MIN_DELAY_TIMER(TxPduId) > (uint16)0)
	mul	d0,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.hu	d1,[a15]2
.L1837:
	jeq	d1,#0,.L134
.L1838:

; ..\EAS\BSW\Com\Com.c	  4164                      && (COM_TXPDU_MIN_DELAY_TIMER(TxPduId) != (uint16)0)
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d1,[a15]4
.L1839:
	jeq	d1,#0,.L135
.L1840:

; ..\EAS\BSW\Com\Com.c	  4165                      && (COM_TXPDU_MIN_DELAY_TIMER(TxPduId) != COM_TIMER_STOP_VAL))
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d1,[a15]4
.L1841:
	mov.u	d2,#65535
.L1842:
	jeq	d1,d2,.L136
.L1843:

; ..\EAS\BSW\Com\Com.c	  4166              {
; ..\EAS\BSW\Com\Com.c	  4167                  /* no MDT for NONE pdu*/
; ..\EAS\BSW\Com\Com.c	  4168                  COM_TXPDU_MIN_DELAY_TIMER(TxPduId) = COM_CFG_TXPDU_MIN_DELAY_TIMER(TxPduId);
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1844:
	movh.a	a2,#@his(ComTxPduCfgTable)
	lea	a2,[a2]@los(ComTxPduCfgTable)
	addsc.a	a2,a2,d0,#0
	ld.hu	d15,[a2]2
.L1845:
	st.h	[a15]4,d15
.L136:
.L135:
.L134:
.L133:
.L130:

; ..\EAS\BSW\Com\Com.c	  4169              }
; ..\EAS\BSW\Com\Com.c	  4170  #endif
; ..\EAS\BSW\Com\Com.c	  4171              SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4172          }
; ..\EAS\BSW\Com\Com.c	  4173      }
; ..\EAS\BSW\Com\Com.c	  4174  
; ..\EAS\BSW\Com\Com.c	  4175  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  4176  }
	ret
.L889:
	
__Com_TxConfirmation_function_end:
	.size	Com_TxConfirmation,__Com_TxConfirmation_function_end-Com_TxConfirmation
.L607:
	; End of function
	
	.sdecl	'.text.Com.Com_MainFunctionTx',code,cluster('Com_MainFunctionTx')
	.sect	'.text.Com.Com_MainFunctionTx'
	.align	2
	
	.global	Com_MainFunctionTx

; ..\EAS\BSW\Com\Com.c	  4177  
; ..\EAS\BSW\Com\Com.c	  4178  
; ..\EAS\BSW\Com\Com.c	  4179  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4180  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  4181  * Function Name: Com_MainFunctionTx SWS_Com_00399
; ..\EAS\BSW\Com\Com.c	  4182  *
; ..\EAS\BSW\Com\Com.c	  4183  * Description:    process tx msg of com
; ..\EAS\BSW\Com\Com.c	  4184  *
; ..\EAS\BSW\Com\Com.c	  4185  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  4186  *
; ..\EAS\BSW\Com\Com.c	  4187  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4188  *
; ..\EAS\BSW\Com\Com.c	  4189  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4190  *******************************************************************************
; ..\EAS\BSW\Com\Com.c	  4191  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4192  FUNC(void, COM_CODE) Com_MainFunctionTx
; Function Com_MainFunctionTx
.L392:
Com_MainFunctionTx:	.type	func

; ..\EAS\BSW\Com\Com.c	  4193  (
; ..\EAS\BSW\Com\Com.c	  4194      void
; ..\EAS\BSW\Com\Com.c	  4195  )
; ..\EAS\BSW\Com\Com.c	  4196  {
; ..\EAS\BSW\Com\Com.c	  4197  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4198      PduIdType TxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  4199      boolean sendFlag = FALSE;
; ..\EAS\BSW\Com\Com.c	  4200  #endif
; ..\EAS\BSW\Com\Com.c	  4201  
; ..\EAS\BSW\Com\Com.c	  4202      if(COM_INIT != Com_InitStateFlag) /*SWS_Com_00665*/
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1506:
	jeq	d15,#1,.L137
.L1507:

; ..\EAS\BSW\Com\Com.c	  4203      {
; ..\EAS\BSW\Com\Com.c	  4204          COM_DET_REPORT_ERROR(COMServiceId_MainFunctionTx, COM_E_UNINIT);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#25
	mov	d7,#2
	j	Det_ReportError
.L137:

; ..\EAS\BSW\Com\Com.c	  4205      }
; ..\EAS\BSW\Com\Com.c	  4206  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4207      else
; ..\EAS\BSW\Com\Com.c	  4208      {
; ..\EAS\BSW\Com\Com.c	  4209          for(TxIpduId = (PduIdType)0; TxIpduId < COM_TXPDU_NUM; TxIpduId++)
	mov	d8,#0
.L1186:

; ..\EAS\BSW\Com\Com.c	  4210          {
; ..\EAS\BSW\Com\Com.c	  4211              if(COM_TXPDU_STOP != Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  4212              {
; ..\EAS\BSW\Com\Com.c	  4213                  SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4214  
; ..\EAS\BSW\Com\Com.c	  4215                  if(Com_TxPduState[TxIpduId] >= COM_TXPDU_START_TXOK)
; ..\EAS\BSW\Com\Com.c	  4216                  {
; ..\EAS\BSW\Com\Com.c	  4217                      if(FALSE == COM_CFG_TXPDU_IS_IMM_PROCESSING(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  4218                      {
; ..\EAS\BSW\Com\Com.c	  4219                          Com_ProcessTxConf(TxIpduId, Com_TxPduState[TxIpduId]);
; ..\EAS\BSW\Com\Com.c	  4220                      }
; ..\EAS\BSW\Com\Com.c	  4221                  }
; ..\EAS\BSW\Com\Com.c	  4222  
; ..\EAS\BSW\Com\Com.c	  4223  #if (STD_ON == COM_TX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  4224                  Com_TxTimerOutMonitor(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  4225  #endif
; ..\EAS\BSW\Com\Com.c	  4226  
; ..\EAS\BSW\Com\Com.c	  4227  #if (STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4228                  /* switch txMode if needed, reset TxRegs acrroding to the new TxMode*/
; ..\EAS\BSW\Com\Com.c	  4229                  Com_SelectPduTxMode(TxIpduId, Com_SendSwitchTxModeFlag[TxIpduId]);
; ..\EAS\BSW\Com\Com.c	  4230                  Com_SendSwitchTxModeFlag[TxIpduId] = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  4231  #endif
; ..\EAS\BSW\Com\Com.c	  4232  
; ..\EAS\BSW\Com\Com.c	  4233  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  4234  #if(STD_ON == COM_TXMODE_REPTITION)
; ..\EAS\BSW\Com\Com.c	  4235                  if((Com_PDUTrigRepFlag[TxIpduId] == COM_TRIGGER_REP) &&
; ..\EAS\BSW\Com\Com.c	  4236                      ((uint8)0 == COM_TXPDU_TXMODE_REP_NUM(TxIpduId)))
; ..\EAS\BSW\Com\Com.c	  4237                  {
; ..\EAS\BSW\Com\Com.c	  4238                      Com_PDUTrigRepFlag[TxIpduId] = COM_TRIGGER;
; ..\EAS\BSW\Com\Com.c	  4239                  }
; ..\EAS\BSW\Com\Com.c	  4240  #endif
; ..\EAS\BSW\Com\Com.c	  4241  #endif
; ..\EAS\BSW\Com\Com.c	  4242  
; ..\EAS\BSW\Com\Com.c	  4243                  /* check if there is tx request this cycle*/
; ..\EAS\BSW\Com\Com.c	  4244                  sendFlag = Com_TxModeProcess(TxIpduId);
; ..\EAS\BSW\Com\Com.c	  4245  
; ..\EAS\BSW\Com\Com.c	  4246  #if (STD_ON == COM_MDT_CYCLIC_TRANSMISSION)
; ..\EAS\BSW\Com\Com.c	  4247                  if(COM_TIMER_STOP_VAL != COM_TXPDU_MIN_DELAY_TIMER(TxIpduId))
	mov.u	d9,#65535
.L1508:

; ..\EAS\BSW\Com\Com.c	  4248                  {
; ..\EAS\BSW\Com\Com.c	  4249                      if((uint16)0 != COM_TXPDU_MIN_DELAY_TIMER(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  4250                      {
; ..\EAS\BSW\Com\Com.c	  4251                          COM_TXPDU_MIN_DELAY_TIMER(TxIpduId)--;
; ..\EAS\BSW\Com\Com.c	  4252                      }
; ..\EAS\BSW\Com\Com.c	  4253                      if((uint16)0 == COM_TXPDU_MIN_DELAY_TIMER(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  4254                      {
; ..\EAS\BSW\Com\Com.c	  4255                          COM_TXPDU_MIN_DELAY_TIMER(TxIpduId) = COM_TIMER_STOP_VAL;
	mov.u	d10,#65535
.L1509:

; ..\EAS\BSW\Com\Com.c	  4256                      }
; ..\EAS\BSW\Com\Com.c	  4257                      else
; ..\EAS\BSW\Com\Com.c	  4258                      {
; ..\EAS\BSW\Com\Com.c	  4259                          if(TRUE == sendFlag)
; ..\EAS\BSW\Com\Com.c	  4260                          {
; ..\EAS\BSW\Com\Com.c	  4261                              COM_TXPDU_TX_REQ_MINDELAY_BACKUP(TxIpduId) = TRUE;
	mov	d11,#1
.L1510:
	mov	d12,#46
.L1511:
	j	.L139
.L140:
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1512:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1513:
	jeq	d15,#0,.L141
.L1514:
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1515:
	addsc.a	a15,a15,d8,#0
	ld.bu	d0,[a15]
.L1516:
	jlt.u	d0,#4,.L142
.L1517:
	mul	d15,d8,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1518:
	jne	d15,#0,.L143
.L1519:
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1520:
	addsc.a	a15,a15,d8,#0
	ld.bu	d5,[a15]
	mov	d4,d8
.L1187:
	call	Com_ProcessTxConf
.L143:
.L142:
	mov	d4,d8
.L1188:
	call	Com_TxModeProcess
.L1189:
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]4
.L1521:
	jeq	d0,d9,.L144
.L1522:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]4
.L1523:
	jeq	d0,#0,.L145
.L1524:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	movh.a	a2,#@his(Com_TxPduTable)
	lea	a2,[a2]@los(Com_TxPduTable)
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]4
.L1525:
	add	d15,#-1
	st.h	[a15]4,d15
.L145:
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d0,[a15]4
.L1526:
	jne	d0,#0,.L146
.L1527:
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1528:
	st.h	[a15]4,d10
.L1529:
	j	.L147
.L146:
	jeq	d2,#0,.L148
.L1530:
	mul	d15,d8,#12
	movh.a	a15,#@his(Com_TxPduTable)
	lea	a15,[a15]@los(Com_TxPduTable)
	addsc.a	a15,a15,d15,#0
.L1531:
	st.b	[a15]6,d11
.L148:

; ..\EAS\BSW\Com\Com.c	  4262                          }
; ..\EAS\BSW\Com\Com.c	  4263  
; ..\EAS\BSW\Com\Com.c	  4264                          sendFlag = FALSE;
	mov	d2,#0
.L147:
.L144:

; ..\EAS\BSW\Com\Com.c	  4265  
; ..\EAS\BSW\Com\Com.c	  4266                      }
; ..\EAS\BSW\Com\Com.c	  4267                  }
; ..\EAS\BSW\Com\Com.c	  4268  #endif
; ..\EAS\BSW\Com\Com.c	  4269  
; ..\EAS\BSW\Com\Com.c	  4270  #if(STD_ON == COM_TX_LONG_PDU_FUN)/*SWS_Com_00863*/
; ..\EAS\BSW\Com\Com.c	  4271                  if((TRUE == sendFlag)
; ..\EAS\BSW\Com\Com.c	  4272                          && (TRUE == COM_CFG_TXPDU_IS_TP_PDU(TxIpduId))
; ..\EAS\BSW\Com\Com.c	  4273                          && (COM_TXPDU_START_BUSY == Com_TxPduState[TxIpduId]))
; ..\EAS\BSW\Com\Com.c	  4274                  {
; ..\EAS\BSW\Com\Com.c	  4275                      sendFlag = FALSE;
; ..\EAS\BSW\Com\Com.c	  4276                      COM_DET_REPORT_RUNTIME_ERROR(COMServiceId_MainFunctionTx, COM_E_SKIP_TRANSMISSION);
; ..\EAS\BSW\Com\Com.c	  4277                  }
; ..\EAS\BSW\Com\Com.c	  4278  #endif
; ..\EAS\BSW\Com\Com.c	  4279  
; ..\EAS\BSW\Com\Com.c	  4280  
; ..\EAS\BSW\Com\Com.c	  4281  
; ..\EAS\BSW\Com\Com.c	  4282                  if(TRUE == sendFlag)
	jeq	d2,#0,.L149
.L1532:

; ..\EAS\BSW\Com\Com.c	  4283                  {
; ..\EAS\BSW\Com\Com.c	  4284                      Com_TransmitPdu(TxIpduId);/*SWS_Com_478*/
	mov	d4,d8
.L1190:
	call	Com_TransmitPdu
.L149:
.L141:
	add	d8,#1
.L139:
	jlt.u	d8,d12,.L140
.L1533:

; ..\EAS\BSW\Com\Com.c	  4285                  }
; ..\EAS\BSW\Com\Com.c	  4286                  SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4287  
; ..\EAS\BSW\Com\Com.c	  4288              }
; ..\EAS\BSW\Com\Com.c	  4289          }
; ..\EAS\BSW\Com\Com.c	  4290      }
; ..\EAS\BSW\Com\Com.c	  4291  #endif /*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  4292  
; ..\EAS\BSW\Com\Com.c	  4293  }
	ret
.L803:
	
__Com_MainFunctionTx_function_end:
	.size	Com_MainFunctionTx,__Com_MainFunctionTx_function_end-Com_MainFunctionTx
.L512:
	; End of function
	
	.sdecl	'.text.Com.Com_RxIndication',code,cluster('Com_RxIndication')
	.sect	'.text.Com.Com_RxIndication'
	.align	2
	
	.global	Com_RxIndication

; ..\EAS\BSW\Com\Com.c	  4294  
; ..\EAS\BSW\Com\Com.c	  4295  
; ..\EAS\BSW\Com\Com.c	  4296  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4297  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4298  * Function Name: Com_RxIndication  SWS_Com_00123
; ..\EAS\BSW\Com\Com.c	  4299  *
; ..\EAS\BSW\Com\Com.c	  4300  * Description:   rx indication when rx Ipdu.
; ..\EAS\BSW\Com\Com.c	  4301  *
; ..\EAS\BSW\Com\Com.c	  4302  * Inputs:        RxPduId,PduInfoPtr
; ..\EAS\BSW\Com\Com.c	  4303  *
; ..\EAS\BSW\Com\Com.c	  4304  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4305  *
; ..\EAS\BSW\Com\Com.c	  4306  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4307  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4308  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4309  FUNC(void, COM_CODE) Com_RxIndication
; Function Com_RxIndication
.L394:
Com_RxIndication:	.type	func
	mov	d8,d4
.L1193:
	mov.aa	a12,a4
.L1194:

; ..\EAS\BSW\Com\Com.c	  4310  (
; ..\EAS\BSW\Com\Com.c	  4311      PduIdType RxPduId,
; ..\EAS\BSW\Com\Com.c	  4312      P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr
; ..\EAS\BSW\Com\Com.c	  4313  )
; ..\EAS\BSW\Com\Com.c	  4314  {
; ..\EAS\BSW\Com\Com.c	  4315  
; ..\EAS\BSW\Com\Com.c	  4316  #if(COM_RXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4317      boolean Com_RxCalResult = TRUE;
	mov	d9,#1
.L1195:

; ..\EAS\BSW\Com\Com.c	  4318  #endif
; ..\EAS\BSW\Com\Com.c	  4319  #if(COM_RXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4320      /* this ptr must remove const as e2e may need change*/
; ..\EAS\BSW\Com\Com.c	  4321      P2VAR(PduInfoType, AUTOMATIC, COM_APPL_DATA) tempPduInfoPtr = (PduInfoType *)PduInfoPtr;
; ..\EAS\BSW\Com\Com.c	  4322  #endif
; ..\EAS\BSW\Com\Com.c	  4323  
; ..\EAS\BSW\Com\Com.c	  4324      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1779:
	jeq	d15,#1,.L150
.L1780:

; ..\EAS\BSW\Com\Com.c	  4325      {
; ..\EAS\BSW\Com\Com.c	  4326          COM_DET_REPORT_ERROR(COMServiceId_RxIndication, COM_E_UNINIT);
	mov	d4,#50
.L1192:
	mov	d5,#0
	mov	d6,#66
	mov	d7,#2
	j	Det_ReportError
.L150:

; ..\EAS\BSW\Com\Com.c	  4327      }
; ..\EAS\BSW\Com\Com.c	  4328      else if(RxPduId >= COM_RXPDU_NUM)
	mov	d15,#58
.L1781:
	jge.u	d8,d15,.L152
.L1782:

; ..\EAS\BSW\Com\Com.c	  4329      {
; ..\EAS\BSW\Com\Com.c	  4330          COM_DET_REPORT_ERROR(COMServiceId_RxIndication, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4331      }
; ..\EAS\BSW\Com\Com.c	  4332      else if(PduInfoPtr == NULL_PTR)
	jz.a	a12,.L153
.L1783:

; ..\EAS\BSW\Com\Com.c	  4333      {
; ..\EAS\BSW\Com\Com.c	  4334          COM_DET_REPORT_ERROR(COMServiceId_RxIndication, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  4335      }
; ..\EAS\BSW\Com\Com.c	  4336      else if(PduInfoPtr->SduDataPtr == NULL_PTR)
	ld.w	d15,[a12]
.L1784:
	jne	d15,#0,.L154
.L153:

; ..\EAS\BSW\Com\Com.c	  4337      {
; ..\EAS\BSW\Com\Com.c	  4338          COM_DET_REPORT_ERROR(COMServiceId_RxIndication, COM_E_PARAM_POINTER);
	mov	d4,#50
.L1197:
	mov	d5,#0
	mov	d6,#66
	mov	d7,#3
	j	Det_ReportError
.L154:

; ..\EAS\BSW\Com\Com.c	  4339      }
; ..\EAS\BSW\Com\Com.c	  4340  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4341      else if(TRUE == COM_CFG_RXPDU_IS_TP_PDU(RxPduId))
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]30
.L1785:
	jeq	d15,#1,.L156
.L1786:

; ..\EAS\BSW\Com\Com.c	  4342      {
; ..\EAS\BSW\Com\Com.c	  4343          COM_DET_REPORT_ERROR(COMServiceId_RxIndication, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4344      }
; ..\EAS\BSW\Com\Com.c	  4345      else if(FALSE == Com_CheckRxLength(RxPduId, PduInfoPtr->SduLength))
	ld.hu	d5,[a12]4
	call	Com_CheckRxLength
.L1191:
	jne	d2,#0,.L157
.L156:
.L152:

; ..\EAS\BSW\Com\Com.c	  4346      {
; ..\EAS\BSW\Com\Com.c	  4347          COM_DET_REPORT_ERROR(COMServiceId_RxIndication, COM_E_PARAM);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#66
	mov	d7,#1
	j	Det_ReportError
.L157:

; ..\EAS\BSW\Com\Com.c	  4348      }
; ..\EAS\BSW\Com\Com.c	  4349      else
; ..\EAS\BSW\Com\Com.c	  4350      {
; ..\EAS\BSW\Com\Com.c	  4351  
; ..\EAS\BSW\Com\Com.c	  4352          if(COM_RXPDU_START_IDLE == Com_RxPduState[RxPduId])
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1787:
	addsc.a	a15,a15,d8,#0
	ld.bu	d0,[a15]
.L1788:
	jne	d0,#1,.L159
.L1789:

; ..\EAS\BSW\Com\Com.c	  4353          {
; ..\EAS\BSW\Com\Com.c	  4354  		    /* when imm pdu, reset timeout at once*/
; ..\EAS\BSW\Com\Com.c	  4355  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  4356  			if((TRUE == COM_RXPDU_MONITOR_FLAG(RxPduId)) && (TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(RxPduId)))
	mul	d0,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]2
.L1790:
	jne	d15,#1,.L160
.L1791:
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d1,[a15]
.L1792:
	jne	d1,#1,.L161
.L1793:

; ..\EAS\BSW\Com\Com.c	  4357  			{
; ..\EAS\BSW\Com\Com.c	  4358  				COM_RXPDU_TIMEOUT(RxPduId) = COM_CFG_RXPDU_PERIOD_TIMEOUT(RxPduId);/*SWS_Com_00715*/
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d0,#0
.L1794:
	movh.a	a2,#@his(ComRxPduCfgTable)
	lea	a2,[a2]@los(ComRxPduCfgTable)
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]16
.L1795:
	st.h	[a15]4,d15
.L161:
.L160:

; ..\EAS\BSW\Com\Com.c	  4359  			}
; ..\EAS\BSW\Com\Com.c	  4360  #endif
; ..\EAS\BSW\Com\Com.c	  4361  #if(COM_RXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4362              if(NULL_PTR != COM_CFG_RXPDU_CALLOUT(RxPduId))
	mov.a	a2,#0
.L1796:
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L1797:
	jeq.a	a2,a15,.L162
.L1798:

; ..\EAS\BSW\Com\Com.c	  4363              {
; ..\EAS\BSW\Com\Com.c	  4364                  Com_RxCalResult = COM_CFG_RXPDU_CALLOUT(RxPduId)(RxPduId, tempPduInfoPtr);
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]20
.L1799:
	mov	d4,d8
.L1198:
	mov.aa	a4,a12
.L1199:
	calli	a15
.L1196:
	mov	d9,d2
.L162:

; ..\EAS\BSW\Com\Com.c	  4365              }
; ..\EAS\BSW\Com\Com.c	  4366              if(FALSE == Com_RxCalResult)
	jne	d9,#0,.L163
.L1800:

; ..\EAS\BSW\Com\Com.c	  4367              {
; ..\EAS\BSW\Com\Com.c	  4368                  Com_RxPduState[RxPduId] = COM_RXPDU_START_RXSTOP;
	mov	d15,#5
.L1801:
	j	.L164
.L163:

; ..\EAS\BSW\Com\Com.c	  4369  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4370                  if(TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(RxPduId))
; ..\EAS\BSW\Com\Com.c	  4371                  {
; ..\EAS\BSW\Com\Com.c	  4372                      /*call invalid ack, or replace invalid value to signal SWS_Com_00839*/
; ..\EAS\BSW\Com\Com.c	  4373                      Com_RxPduInvalid(RxPduId);
; ..\EAS\BSW\Com\Com.c	  4374  					Com_RxPduState[RxPduId] = COM_RXPDU_START_IDLE;
; ..\EAS\BSW\Com\Com.c	  4375                  }
; ..\EAS\BSW\Com\Com.c	  4376  #endif
; ..\EAS\BSW\Com\Com.c	  4377              }
; ..\EAS\BSW\Com\Com.c	  4378              else
; ..\EAS\BSW\Com\Com.c	  4379  #endif
; ..\EAS\BSW\Com\Com.c	  4380              {
; ..\EAS\BSW\Com\Com.c	  4381                  SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4382                  Com_RxPduState[RxPduId] = COM_RXPDU_START_RXOK;
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1802:
	addsc.a	a15,a15,d8,#0
.L1803:
	mov	d15,#3
.L1804:
	st.b	[a15],d15
.L1805:

; ..\EAS\BSW\Com\Com.c	  4383  
; ..\EAS\BSW\Com\Com.c	  4384                  /* temp buf is not null, copy to temp first
; ..\EAS\BSW\Com\Com.c	  4385                     data may need to be copy in following cases:
; ..\EAS\BSW\Com\Com.c	  4386                     1. need rx filter
; ..\EAS\BSW\Com\Com.c	  4387                     2. need check invalid
; ..\EAS\BSW\Com\Com.c	  4388                     3. has update bit
; ..\EAS\BSW\Com\Com.c	  4389                  */
; ..\EAS\BSW\Com\Com.c	  4390                  /* Copy data and length, if pdu is dyn pdu, dyn length also copied*/
; ..\EAS\BSW\Com\Com.c	  4391                  /* process if imm*/
; ..\EAS\BSW\Com\Com.c	  4392                  COM_RXPDU_TEMP_LENGTH(RxPduId)  = PduInfoPtr->SduLength;
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L1806:
	ld.hu	d15,[a12]4
.L1807:
	st.h	[a15],d15
.L1808:

; ..\EAS\BSW\Com\Com.c	  4393  #if (STD_OFF == COM_RX_DIRECT_COPY)
; ..\EAS\BSW\Com\Com.c	  4394                  if(NULL_PTR != COM_CFG_RXPDU_DATA_PTR_TEMP(RxPduId))
; ..\EAS\BSW\Com\Com.c	  4395                  {
; ..\EAS\BSW\Com\Com.c	  4396                      Bsw_MemCpy((uint8 *)COM_CFG_RXPDU_DATA_PTR_TEMP(RxPduId), PduInfoPtr->SduDataPtr, (uint32)PduInfoPtr->SduLength);
; ..\EAS\BSW\Com\Com.c	  4397                      if(TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(RxPduId))/*SWS_Com_00300*/
; ..\EAS\BSW\Com\Com.c	  4398                      {
; ..\EAS\BSW\Com\Com.c	  4399                          Com_HandleRxPdu(RxPduId);
; ..\EAS\BSW\Com\Com.c	  4400  						Com_RxPduState[RxPduId] = COM_RXPDU_START_IDLE;
; ..\EAS\BSW\Com\Com.c	  4401                      }
; ..\EAS\BSW\Com\Com.c	  4402                  }
; ..\EAS\BSW\Com\Com.c	  4403                  else
; ..\EAS\BSW\Com\Com.c	  4404  #endif
; ..\EAS\BSW\Com\Com.c	  4405                  {
; ..\EAS\BSW\Com\Com.c	  4406                      Bsw_MemCpy((uint8 *)COM_CFG_RXPDU_DATA_PTR(RxPduId), PduInfoPtr->SduDataPtr, (uint32)PduInfoPtr->SduLength);
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a4,[a15]24
.L1809:
	ld.a	a5,[a12]
.L1810:
	ld.hu	d4,[a12]4
.L1811:
	call	Bsw_MemCpy
.L1812:

; ..\EAS\BSW\Com\Com.c	  4407  
; ..\EAS\BSW\Com\Com.c	  4408  #if (STD_ON == COM_RX_DYN_PDU_SUPPORT)/* dynlength must be copy here too*/
; ..\EAS\BSW\Com\Com.c	  4409                      if(TRUE == COM_CFG_RXPDU_IS_DYN(RxPduId))
; ..\EAS\BSW\Com\Com.c	  4410                      {
; ..\EAS\BSW\Com\Com.c	  4411                          COM_RXPDU_DYN_LENGTH(RxPduId) = COM_RXPDU_TEMP_LENGTH(RxPduId);
; ..\EAS\BSW\Com\Com.c	  4412                      }
; ..\EAS\BSW\Com\Com.c	  4413  #endif
; ..\EAS\BSW\Com\Com.c	  4414  
; ..\EAS\BSW\Com\Com.c	  4415  
; ..\EAS\BSW\Com\Com.c	  4416  
; ..\EAS\BSW\Com\Com.c	  4417                      if(TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(RxPduId))/*SWS_Com_00300*/
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L1813:
	jne	d15,#1,.L165
.L1814:

; ..\EAS\BSW\Com\Com.c	  4418                      {
; ..\EAS\BSW\Com\Com.c	  4419                          Com_HandleRxPdu_DirectCopy(RxPduId);
	mov	d4,d8
.L1200:
	call	Com_HandleRxPdu_DirectCopy
.L164:

; ..\EAS\BSW\Com\Com.c	  4420  						Com_RxPduState[RxPduId] = COM_RXPDU_START_IDLE;
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1815:
	addsc.a	a15,a15,d8,#0
.L1816:
	st.b	[a15],d15
.L165:
.L159:

; ..\EAS\BSW\Com\Com.c	  4421                      }
; ..\EAS\BSW\Com\Com.c	  4422                  }
; ..\EAS\BSW\Com\Com.c	  4423                  SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4424              }
; ..\EAS\BSW\Com\Com.c	  4425  
; ..\EAS\BSW\Com\Com.c	  4426          }
; ..\EAS\BSW\Com\Com.c	  4427      }
; ..\EAS\BSW\Com\Com.c	  4428  #endif/* #if(STD_ON == COM_RXPDU_FUN) */
; ..\EAS\BSW\Com\Com.c	  4429  }
	ret
.L883:
	
__Com_RxIndication_function_end:
	.size	Com_RxIndication,__Com_RxIndication_function_end-Com_RxIndication
.L602:
	; End of function
	
	.sdecl	'.text.Com.Com_MainFunctionRx',code,cluster('Com_MainFunctionRx')
	.sect	'.text.Com.Com_MainFunctionRx'
	.align	2
	
	.global	Com_MainFunctionRx

; ..\EAS\BSW\Com\Com.c	  4430  
; ..\EAS\BSW\Com\Com.c	  4431  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4432  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4433  * Function Name: Com_MainFunctionRx SWS_Com_0039
; ..\EAS\BSW\Com\Com.c	  4434  *
; ..\EAS\BSW\Com\Com.c	  4435  * Description:   process rx msg of com
; ..\EAS\BSW\Com\Com.c	  4436  *
; ..\EAS\BSW\Com\Com.c	  4437  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  4438  *
; ..\EAS\BSW\Com\Com.c	  4439  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4440  *
; ..\EAS\BSW\Com\Com.c	  4441  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4442  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4443  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4444  FUNC(void, COM_CODE) Com_MainFunctionRx
; Function Com_MainFunctionRx
.L396:
Com_MainFunctionRx:	.type	func

; ..\EAS\BSW\Com\Com.c	  4445  (
; ..\EAS\BSW\Com\Com.c	  4446      void
; ..\EAS\BSW\Com\Com.c	  4447  )
; ..\EAS\BSW\Com\Com.c	  4448  {
; ..\EAS\BSW\Com\Com.c	  4449  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4450      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  4451  #endif
; ..\EAS\BSW\Com\Com.c	  4452  
; ..\EAS\BSW\Com\Com.c	  4453      if(COM_INIT != Com_InitStateFlag)/*SWS_Com_00664*/
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1478:
	jeq	d15,#1,.L166
.L1479:

; ..\EAS\BSW\Com\Com.c	  4454      {
; ..\EAS\BSW\Com\Com.c	  4455          COM_DET_REPORT_ERROR(COMServiceId_MainFunctionRx, COM_E_UNINIT);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#24
	mov	d7,#2
	j	Det_ReportError
.L166:

; ..\EAS\BSW\Com\Com.c	  4456      }
; ..\EAS\BSW\Com\Com.c	  4457  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4458      else
; ..\EAS\BSW\Com\Com.c	  4459      {
; ..\EAS\BSW\Com\Com.c	  4460          for(RxIpduId = (PduIdType)0; RxIpduId < COM_RXPDU_NUM; RxIpduId++)
	mov	d8,#0
.L1201:

; ..\EAS\BSW\Com\Com.c	  4461          {
; ..\EAS\BSW\Com\Com.c	  4462              if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
; ..\EAS\BSW\Com\Com.c	  4463              {
; ..\EAS\BSW\Com\Com.c	  4464                  SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4465  
; ..\EAS\BSW\Com\Com.c	  4466                  if((Com_RxPduState[RxIpduId] >= COM_RXPDU_START_RXOK)
; ..\EAS\BSW\Com\Com.c	  4467  				&&(FALSE == COM_CFG_RXPDU_IS_IMM_PROCESSING(RxIpduId)))
; ..\EAS\BSW\Com\Com.c	  4468                  {
; ..\EAS\BSW\Com\Com.c	  4469  
; ..\EAS\BSW\Com\Com.c	  4470  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4471                      COM_RXPDU_TP_INDEX(RxIpduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  4472  #endif
; ..\EAS\BSW\Com\Com.c	  4473  
; ..\EAS\BSW\Com\Com.c	  4474  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  4475                      if(TRUE == COM_RXPDU_MONITOR_FLAG(RxIpduId))
; ..\EAS\BSW\Com\Com.c	  4476                      {
; ..\EAS\BSW\Com\Com.c	  4477                          COM_RXPDU_TIMEOUT(RxIpduId) = COM_CFG_RXPDU_PERIOD_TIMEOUT(RxIpduId);/*SWS_Com_00715*/
; ..\EAS\BSW\Com\Com.c	  4478                      }
; ..\EAS\BSW\Com\Com.c	  4479  #endif
; ..\EAS\BSW\Com\Com.c	  4480  
; ..\EAS\BSW\Com\Com.c	  4481  
; ..\EAS\BSW\Com\Com.c	  4482                      if(Com_RxPduState[RxIpduId] == COM_RXPDU_START_RXOK)
; ..\EAS\BSW\Com\Com.c	  4483                      {
; ..\EAS\BSW\Com\Com.c	  4484  
; ..\EAS\BSW\Com\Com.c	  4485  #if(STD_OFF == COM_RX_DIRECT_COPY)
; ..\EAS\BSW\Com\Com.c	  4486                          if(NULL_PTR != COM_CFG_RXPDU_DATA_PTR_TEMP(RxIpduId))
; ..\EAS\BSW\Com\Com.c	  4487                          {
; ..\EAS\BSW\Com\Com.c	  4488                              Com_HandleRxPdu(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  4489                          }
; ..\EAS\BSW\Com\Com.c	  4490                          else
; ..\EAS\BSW\Com\Com.c	  4491  #endif
; ..\EAS\BSW\Com\Com.c	  4492                          {
; ..\EAS\BSW\Com\Com.c	  4493                              Com_HandleRxPdu_DirectCopy(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  4494                          }
; ..\EAS\BSW\Com\Com.c	  4495                      }
; ..\EAS\BSW\Com\Com.c	  4496                      /* RXSTOP or NOTOK, do invalid action*/
; ..\EAS\BSW\Com\Com.c	  4497  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4498                      else
; ..\EAS\BSW\Com\Com.c	  4499                      {
; ..\EAS\BSW\Com\Com.c	  4500                          Com_RxPduInvalid(RxIpduId);/*SWS_Com_00839*/
; ..\EAS\BSW\Com\Com.c	  4501                      }
; ..\EAS\BSW\Com\Com.c	  4502  #endif
; ..\EAS\BSW\Com\Com.c	  4503  
; ..\EAS\BSW\Com\Com.c	  4504  
; ..\EAS\BSW\Com\Com.c	  4505                      Com_RxPduState[RxIpduId] = COM_RXPDU_START_IDLE;
	mov	d9,#1
.L1480:
	mov	d10,#58
.L1481:
	j	.L168
.L169:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1482:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1483:
	jeq	d15,#0,.L170
.L1484:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1485:
	addsc.a	a15,a15,d8,#0
	ld.bu	d0,[a15]
.L1486:
	jlt.u	d0,#3,.L171
.L1487:
	sha	d0,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]
.L1488:
	jne	d15,#0,.L172
.L1489:
	mul	d1,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d1,#0
	ld.bu	d15,[a15]2
.L1490:
	jne	d15,#1,.L173
.L1491:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d1,#0
.L1492:
	movh.a	a2,#@his(ComRxPduCfgTable)
	lea	a2,[a2]@los(ComRxPduCfgTable)
	addsc.a	a2,a2,d0,#0
	ld.hu	d15,[a2]16
.L1493:
	st.h	[a15]4,d15
.L173:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1494:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1495:
	jne	d15,#3,.L174
.L1496:
	mov	d4,d8
.L1202:
	call	Com_HandleRxPdu_DirectCopy
.L174:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1497:
	addsc.a	a15,a15,d8,#0
.L1498:
	st.b	[a15],d9
.L172:
.L171:

; ..\EAS\BSW\Com\Com.c	  4506                  }
; ..\EAS\BSW\Com\Com.c	  4507  
; ..\EAS\BSW\Com\Com.c	  4508  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  4509                  if(TRUE == COM_RXPDU_MONITOR_FLAG(RxIpduId))
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]2
.L1499:
	jne	d15,#1,.L175
.L1500:

; ..\EAS\BSW\Com\Com.c	  4510                  {
; ..\EAS\BSW\Com\Com.c	  4511                      Com_RxTimerOutMonitor(RxIpduId);
	mov	d4,d8
.L1203:
	call	Com_RxTimerOutMonitor
.L175:
.L170:
	add	d8,#1
.L168:
	jlt.u	d8,d10,.L169
.L1501:

; ..\EAS\BSW\Com\Com.c	  4512  #if(STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4513                      Com_UpdateRxTimerOutMonitor(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  4514  #endif
; ..\EAS\BSW\Com\Com.c	  4515                  }
; ..\EAS\BSW\Com\Com.c	  4516  #endif
; ..\EAS\BSW\Com\Com.c	  4517  
; ..\EAS\BSW\Com\Com.c	  4518                  SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4519              }
; ..\EAS\BSW\Com\Com.c	  4520  
; ..\EAS\BSW\Com\Com.c	  4521          }
; ..\EAS\BSW\Com\Com.c	  4522      }
; ..\EAS\BSW\Com\Com.c	  4523  #endif/* #if(STD_ON == COM_RXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  4524  }
	ret
.L801:
	
__Com_MainFunctionRx_function_end:
	.size	Com_MainFunctionRx,__Com_MainFunctionRx_function_end-Com_MainFunctionRx
.L507:
	; End of function
	
	.sdecl	'.text.Com.Com_ReceiveSignal',code,cluster('Com_ReceiveSignal')
	.sect	'.text.Com.Com_ReceiveSignal'
	.align	2
	
	.global	Com_ReceiveSignal

; ..\EAS\BSW\Com\Com.c	  4525  
; ..\EAS\BSW\Com\Com.c	  4526  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4527  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4528  * Function Name: Com_ReceivedSignal
; ..\EAS\BSW\Com\Com.c	  4529  *
; ..\EAS\BSW\Com\Com.c	  4530  * Description:   This service copies the data of signal identified by SignalId
; ..\EAS\BSW\Com\Com.c	  4531  *                to the location specified by SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  4532  *
; ..\EAS\BSW\Com\Com.c	  4533  * Inputs:        SignalId: ignal handle
; ..\EAS\BSW\Com\Com.c	  4534  *                SignalDataPtr: Reference to the location where the received
; ..\EAS\BSW\Com\Com.c	  4535  *                               signal data shall be stored
; ..\EAS\BSW\Com\Com.c	  4536  *
; ..\EAS\BSW\Com\Com.c	  4537  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  4538  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  4539  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  4540  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  4541                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  4542  *
; ..\EAS\BSW\Com\Com.c	  4543  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4544  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4545  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4546  FUNC(uint8, COM_CODE) Com_ReceiveSignal
; Function Com_ReceiveSignal
.L398:
Com_ReceiveSignal:	.type	func
	mov.aa	a5,a4
.L1206:

; ..\EAS\BSW\Com\Com.c	  4547  (
; ..\EAS\BSW\Com\Com.c	  4548      Com_SignalIdType SignalId,
; ..\EAS\BSW\Com\Com.c	  4549      P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  4550  )
; ..\EAS\BSW\Com\Com.c	  4551  {
; ..\EAS\BSW\Com\Com.c	  4552  
; ..\EAS\BSW\Com\Com.c	  4553      uint8 result = COM_SERVICE_NOT_AVAILABLE;
	mov	d9,#128
.L1207:

; ..\EAS\BSW\Com\Com.c	  4554  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4555      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  4556  #endif
; ..\EAS\BSW\Com\Com.c	  4557  
; ..\EAS\BSW\Com\Com.c	  4558  
; ..\EAS\BSW\Com\Com.c	  4559      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1448:
	jeq	d15,#1,.L176
.L1449:

; ..\EAS\BSW\Com\Com.c	  4560      {
; ..\EAS\BSW\Com\Com.c	  4561          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_UNINIT);
	mov	d4,#50
.L1205:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#2
	call	Det_ReportError
.L1204:
	j	.L177
.L176:

; ..\EAS\BSW\Com\Com.c	  4562      }
; ..\EAS\BSW\Com\Com.c	  4563      else if(SignalId >= COM_RXSIG_NUM)
	mov	d0,#1430
.L1450:
	jge.u	d4,d0,.L178
.L1451:

; ..\EAS\BSW\Com\Com.c	  4564      {
; ..\EAS\BSW\Com\Com.c	  4565          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4566      }
; ..\EAS\BSW\Com\Com.c	  4567  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4568      else if(COM_SIG_DYN == COM_CFG_RXSIG_TYPE(SignalId))
	mul	d15,d4,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]1
.L1452:
	mov	d15,#8
.L1453:
	jne	d15,d0,.L179
.L178:

; ..\EAS\BSW\Com\Com.c	  4569      {
; ..\EAS\BSW\Com\Com.c	  4570          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_PARAM);
	mov	d4,#50
.L1209:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#1
	call	Det_ReportError
.L1208:
	j	.L180
.L179:

; ..\EAS\BSW\Com\Com.c	  4571      }
; ..\EAS\BSW\Com\Com.c	  4572      else if(NULL_PTR == SignalDataPtr)
	mov.a	a15,#0
.L1454:
	jne.a	a15,a5,.L181
.L1455:

; ..\EAS\BSW\Com\Com.c	  4573      {
; ..\EAS\BSW\Com\Com.c	  4574          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_PARAM_POINTER);
	mov	d4,#50
.L1211:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#3
	call	Det_ReportError
.L1210:
	j	.L182
.L181:

; ..\EAS\BSW\Com\Com.c	  4575      }
; ..\EAS\BSW\Com\Com.c	  4576      else
; ..\EAS\BSW\Com\Com.c	  4577      {
; ..\EAS\BSW\Com\Com.c	  4578  
; ..\EAS\BSW\Com\Com.c	  4579          RxIpduId = COM_CFG_RXSIG_RXPDU_ID(SignalId);
	mul	d15,d4,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d8,[a15]
.L1214:

; ..\EAS\BSW\Com\Com.c	  4580          /* dont need report busy , as copy process is protected by Area2
; ..\EAS\BSW\Com\Com.c	  4581             and always read old data
; ..\EAS\BSW\Com\Com.c	  4582          */
; ..\EAS\BSW\Com\Com.c	  4583  
; ..\EAS\BSW\Com\Com.c	  4584          SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4585  #if(COM_RX_SIGNAL_GROUP_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4586          if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(SignalId))
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]13
.L1456:
	jne	d0,#1,.L183
.L1457:

; ..\EAS\BSW\Com\Com.c	  4587          {
; ..\EAS\BSW\Com\Com.c	  4588              if(NULL_PTR == COM_CFG_RXSIG_GROUP_TEMP_BUF(SignalId))/* SWS_Com_00843 not support groupsignal with arrayaccess = true*/
	mov.a	a2,#0
.L1458:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]16
.L1459:
	jne.a	a2,a15,.L184
.L1460:

; ..\EAS\BSW\Com\Com.c	  4589              {
; ..\EAS\BSW\Com\Com.c	  4590                  COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_PARAM);
	mov	d4,#50
.L1213:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#1
	call	Det_ReportError
.L1212:
	j	.L185
.L184:

; ..\EAS\BSW\Com\Com.c	  4591              }
; ..\EAS\BSW\Com\Com.c	  4592              else
; ..\EAS\BSW\Com\Com.c	  4593              {
; ..\EAS\BSW\Com\Com.c	  4594                  COM_CFG_RXSIG_COPY_SIG_FUN(SignalId)(COM_CFG_RXSIG_GROUP_TEMP_BUF(SignalId), SignalDataPtr, COM_CFG_RXSIG_LENGTH(SignalId));
	mul	d15,d4,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]44
.L1461:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a4,[a15]16
.L1215:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d4,[a15]10
.L1216:
	j	.L186
.L183:

; ..\EAS\BSW\Com\Com.c	  4595              }
; ..\EAS\BSW\Com\Com.c	  4596          }
; ..\EAS\BSW\Com\Com.c	  4597          else
; ..\EAS\BSW\Com\Com.c	  4598  #endif
; ..\EAS\BSW\Com\Com.c	  4599          {
; ..\EAS\BSW\Com\Com.c	  4600              COM_CFG_RXSIG_READ_SIG_FUN(SignalId)(SignalDataPtr, COM_CFG_RXPDU_DATA_PTR(RxIpduId), COM_CFG_RXSIG_LENGTH(SignalId));
	mul	d15,d4,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]32
.L1462:
	sha	d0,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.a	a15,[a15]24
.L1463:
	movh.a	a4,#@his(ComRxSigCfgTable)
.L1217:
	lea	a4,[a4]@los(ComRxSigCfgTable)
	addsc.a	a4,a4,d15,#0
	ld.hu	d4,[a4]10
.L1218:
	mov.aa	a4,a5
.L1219:
	mov.aa	a5,a15
.L186:
	calli	a2
.L185:

; ..\EAS\BSW\Com\Com.c	  4601          }
; ..\EAS\BSW\Com\Com.c	  4602          SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4603  
; ..\EAS\BSW\Com\Com.c	  4604          /*
; ..\EAS\BSW\Com\Com.c	  4605             when stop , read old data but return COM_SERVICE_NOT_AVAILABLE, no det err
; ..\EAS\BSW\Com\Com.c	  4606             See Page54 Table3
; ..\EAS\BSW\Com\Com.c	  4607          */
; ..\EAS\BSW\Com\Com.c	  4608  
; ..\EAS\BSW\Com\Com.c	  4609          if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1464:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1465:
	jeq	d15,#0,.L187
.L1466:

; ..\EAS\BSW\Com\Com.c	  4610          {
; ..\EAS\BSW\Com\Com.c	  4611              result = E_OK;
	mov	d9,#0
.L187:
.L182:
.L180:
.L177:

; ..\EAS\BSW\Com\Com.c	  4612          }
; ..\EAS\BSW\Com\Com.c	  4613  
; ..\EAS\BSW\Com\Com.c	  4614      }
; ..\EAS\BSW\Com\Com.c	  4615  
; ..\EAS\BSW\Com\Com.c	  4616  #endif/* #if(STD_ON == COM_RXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  4617      return    result;
	mov	d2,d9
.L1220:

; ..\EAS\BSW\Com\Com.c	  4618  
; ..\EAS\BSW\Com\Com.c	  4619  }
	ret
.L789:
	
__Com_ReceiveSignal_function_end:
	.size	Com_ReceiveSignal,__Com_ReceiveSignal_function_end-Com_ReceiveSignal
.L497:
	; End of function
	
	.sdecl	'.text.Com.Com_ReceiveDynSignal',code,cluster('Com_ReceiveDynSignal')
	.sect	'.text.Com.Com_ReceiveDynSignal'
	.align	2
	
	.global	Com_ReceiveDynSignal

; ..\EAS\BSW\Com\Com.c	  4620  
; ..\EAS\BSW\Com\Com.c	  4621  
; ..\EAS\BSW\Com\Com.c	  4622  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4623  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4624  * Function Name: Com_ReceiveDynSignal
; ..\EAS\BSW\Com\Com.c	  4625  *
; ..\EAS\BSW\Com\Com.c	  4626  * Description:   This service copies the data of signal identified by SignalId
; ..\EAS\BSW\Com\Com.c	  4627  *                to the location specified by SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  4628  *
; ..\EAS\BSW\Com\Com.c	  4629  * Inputs:        SignalId: ignal handle
; ..\EAS\BSW\Com\Com.c	  4630  *                SignalDataPtr: Reference to the location where the received
; ..\EAS\BSW\Com\Com.c	  4631  *                               signal data shall be stored
; ..\EAS\BSW\Com\Com.c	  4632  *                Length
; ..\EAS\BSW\Com\Com.c	  4633  *
; ..\EAS\BSW\Com\Com.c	  4634  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  4635  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  4636  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  4637  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  4638                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  4639  *
; ..\EAS\BSW\Com\Com.c	  4640  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4641  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4642  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4643  FUNC(uint8, COM_CODE) Com_ReceiveDynSignal
; Function Com_ReceiveDynSignal
.L400:
Com_ReceiveDynSignal:	.type	func

; ..\EAS\BSW\Com\Com.c	  4644  (
; ..\EAS\BSW\Com\Com.c	  4645      Com_SignalIdType SignalId,
; ..\EAS\BSW\Com\Com.c	  4646      P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; ..\EAS\BSW\Com\Com.c	  4647      P2VAR(uint16, AUTOMATIC, COM_APPL_DATA) Length
; ..\EAS\BSW\Com\Com.c	  4648  )
; ..\EAS\BSW\Com\Com.c	  4649  {
; ..\EAS\BSW\Com\Com.c	  4650  
; ..\EAS\BSW\Com\Com.c	  4651      uint8 result = COM_SERVICE_NOT_AVAILABLE;
; ..\EAS\BSW\Com\Com.c	  4652  #if(STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4653      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  4654      PduLengthType dynlength = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  4655      /* as dyn signal must be byte aligned, so the temp srcDataPtr canbe uint8 * Ptr*/
; ..\EAS\BSW\Com\Com.c	  4656      P2VAR(uint8, AUTOMATIC, COM_VAR) srcDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  4657  #endif
; ..\EAS\BSW\Com\Com.c	  4658  
; ..\EAS\BSW\Com\Com.c	  4659      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1471:
	jeq	d15,#1,.L189
.L1472:

; ..\EAS\BSW\Com\Com.c	  4660      {
; ..\EAS\BSW\Com\Com.c	  4661          COM_DET_REPORT_ERROR(COMServiceId_ReceiveDynSignal, COM_E_UNINIT);
	mov	d7,#2
.L1473:
	j	.L190
.L189:

; ..\EAS\BSW\Com\Com.c	  4662      }
; ..\EAS\BSW\Com\Com.c	  4663  #if(STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4664      else if(SignalId >= COM_RXSIG_NUM)
; ..\EAS\BSW\Com\Com.c	  4665      {
; ..\EAS\BSW\Com\Com.c	  4666          COM_DET_REPORT_ERROR(COMServiceId_ReceiveDynSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4667      }
; ..\EAS\BSW\Com\Com.c	  4668      else if(COM_SIG_DYN != COM_CFG_RXSIG_TYPE(SignalId))
; ..\EAS\BSW\Com\Com.c	  4669      {
; ..\EAS\BSW\Com\Com.c	  4670          COM_DET_REPORT_ERROR(COMServiceId_ReceiveDynSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4671      }
; ..\EAS\BSW\Com\Com.c	  4672  
; ..\EAS\BSW\Com\Com.c	  4673      else if(NULL_PTR == SignalDataPtr)
; ..\EAS\BSW\Com\Com.c	  4674      {
; ..\EAS\BSW\Com\Com.c	  4675          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  4676      }
; ..\EAS\BSW\Com\Com.c	  4677      else if(NULL_PTR == Length)
; ..\EAS\BSW\Com\Com.c	  4678      {
; ..\EAS\BSW\Com\Com.c	  4679          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignal, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  4680      }
; ..\EAS\BSW\Com\Com.c	  4681      else
; ..\EAS\BSW\Com\Com.c	  4682      {
; ..\EAS\BSW\Com\Com.c	  4683          RxIpduId = COM_CFG_RXSIG_RXPDU_ID(SignalId);
; ..\EAS\BSW\Com\Com.c	  4684          /* dont need report busy , as copy process is protected by Area2
; ..\EAS\BSW\Com\Com.c	  4685             and always read old data
; ..\EAS\BSW\Com\Com.c	  4686          */
; ..\EAS\BSW\Com\Com.c	  4687  
; ..\EAS\BSW\Com\Com.c	  4688  #if(COM_RX_SIGNAL_GROUP_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4689          if(TRUE == COM_CFG_RXSIG_IS_GROUP_SIGNAL(SignalId))
; ..\EAS\BSW\Com\Com.c	  4690          {
; ..\EAS\BSW\Com\Com.c	  4691              dynlength = *COM_CFG_RXSIG_GROUP_TEMPLENGTH_PTR(SignalId);
; ..\EAS\BSW\Com\Com.c	  4692              srcDataPtr = (uint8 *)COM_CFG_RXSIG_GROUP_TEMP_BUF(SignalId);
; ..\EAS\BSW\Com\Com.c	  4693          }
; ..\EAS\BSW\Com\Com.c	  4694          else
; ..\EAS\BSW\Com\Com.c	  4695  #endif
; ..\EAS\BSW\Com\Com.c	  4696          {
; ..\EAS\BSW\Com\Com.c	  4697              dynlength = COM_RXPDU_DYN_LENGTH(RxIpduId) - COM_CFG_RXSIG_START_BYTE_INDEX(SignalId);
; ..\EAS\BSW\Com\Com.c	  4698              srcDataPtr = &((uint8 *)COM_CFG_RXPDU_DATA_PTR(RxIpduId)) [COM_CFG_RXSIG_START_BYTE_INDEX(SignalId)];
; ..\EAS\BSW\Com\Com.c	  4699          }
; ..\EAS\BSW\Com\Com.c	  4700          if(*Length < dynlength)
; ..\EAS\BSW\Com\Com.c	  4701          {
; ..\EAS\BSW\Com\Com.c	  4702              COM_DET_REPORT_ERROR(COMServiceId_ReceiveDynSignal, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4703              result = E_NOT_OK;
; ..\EAS\BSW\Com\Com.c	  4704          }
; ..\EAS\BSW\Com\Com.c	  4705          else
; ..\EAS\BSW\Com\Com.c	  4706          {
; ..\EAS\BSW\Com\Com.c	  4707              SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4708              Bsw_MemCpy((uint8 *)SignalDataPtr,  srcDataPtr, (uint32)dynlength);
; ..\EAS\BSW\Com\Com.c	  4709              *Length = dynlength;
; ..\EAS\BSW\Com\Com.c	  4710              SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  4711          }
; ..\EAS\BSW\Com\Com.c	  4712  
; ..\EAS\BSW\Com\Com.c	  4713          /*
; ..\EAS\BSW\Com\Com.c	  4714             when stop , read old data but return COM_SERVICE_NOT_AVAILABLE, no det err
; ..\EAS\BSW\Com\Com.c	  4715             See Page54 Table3
; ..\EAS\BSW\Com\Com.c	  4716          */
; ..\EAS\BSW\Com\Com.c	  4717  
; ..\EAS\BSW\Com\Com.c	  4718          if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
; ..\EAS\BSW\Com\Com.c	  4719          {
; ..\EAS\BSW\Com\Com.c	  4720              result = E_OK;
; ..\EAS\BSW\Com\Com.c	  4721          }
; ..\EAS\BSW\Com\Com.c	  4722  
; ..\EAS\BSW\Com\Com.c	  4723      }
; ..\EAS\BSW\Com\Com.c	  4724  #else
; ..\EAS\BSW\Com\Com.c	  4725      else
; ..\EAS\BSW\Com\Com.c	  4726      {
; ..\EAS\BSW\Com\Com.c	  4727          COM_DET_REPORT_ERROR(COMServiceId_ReceiveDynSignal, COM_E_PARAM);
	mov	d7,#1
.L190:
	mov	d4,#50
.L1222:
	mov	d5,#0
	mov	d6,#34
	call	Det_ReportError
.L1221:
	mov	d2,#128
.L1223:

; ..\EAS\BSW\Com\Com.c	  4728      }
; ..\EAS\BSW\Com\Com.c	  4729  #endif/*#if(STD_ON == COM_RX_DYN_PDU_SUPPORT)*/
; ..\EAS\BSW\Com\Com.c	  4730  
; ..\EAS\BSW\Com\Com.c	  4731      return    result;
; ..\EAS\BSW\Com\Com.c	  4732  
; ..\EAS\BSW\Com\Com.c	  4733  }
	ret
.L795:
	
__Com_ReceiveDynSignal_function_end:
	.size	Com_ReceiveDynSignal,__Com_ReceiveDynSignal_function_end-Com_ReceiveDynSignal
.L502:
	; End of function
	
	.sdecl	'.text.Com.Com_SwitchIpduTxMode',code,cluster('Com_SwitchIpduTxMode')
	.sect	'.text.Com.Com_SwitchIpduTxMode'
	.align	2
	
	.global	Com_SwitchIpduTxMode

; ..\EAS\BSW\Com\Com.c	  4734  
; ..\EAS\BSW\Com\Com.c	  4735  
; ..\EAS\BSW\Com\Com.c	  4736  
; ..\EAS\BSW\Com\Com.c	  4737  
; ..\EAS\BSW\Com\Com.c	  4738  
; ..\EAS\BSW\Com\Com.c	  4739  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4740  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4741  * Function Name: Com_SwitchIpduTxMode SWS_Com_00784
; ..\EAS\BSW\Com\Com.c	  4742  *
; ..\EAS\BSW\Com\Com.c	  4743  * Description:   This service copies the data of signal identified by SignalId
; ..\EAS\BSW\Com\Com.c	  4744  *                to the location specified by SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  4745  *
; ..\EAS\BSW\Com\Com.c	  4746  * Inputs:        PduId
; ..\EAS\BSW\Com\Com.c	  4747  *                Mode
; ..\EAS\BSW\Com\Com.c	  4748  *
; ..\EAS\BSW\Com\Com.c	  4749  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4750  *
; ..\EAS\BSW\Com\Com.c	  4751  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4752  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4753  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4754  FUNC(void, COM_CODE) Com_SwitchIpduTxMode
; Function Com_SwitchIpduTxMode
.L402:
Com_SwitchIpduTxMode:	.type	func

; ..\EAS\BSW\Com\Com.c	  4755  (
; ..\EAS\BSW\Com\Com.c	  4756      PduIdType PduId,
; ..\EAS\BSW\Com\Com.c	  4757      boolean Mode
; ..\EAS\BSW\Com\Com.c	  4758  )
; ..\EAS\BSW\Com\Com.c	  4759  {
; ..\EAS\BSW\Com\Com.c	  4760      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1439:
	jeq	d15,#1,.L192
.L1440:

; ..\EAS\BSW\Com\Com.c	  4761      {
; ..\EAS\BSW\Com\Com.c	  4762          COM_DET_REPORT_ERROR(COMServiceId_SwitchIpduTxMode, COM_E_UNINIT);
	mov	d7,#2
.L1441:
	j	.L193
.L192:

; ..\EAS\BSW\Com\Com.c	  4763      }
; ..\EAS\BSW\Com\Com.c	  4764      else if(PduId >= COM_TXPDU_NUM)
	mov	d15,#46
.L1442:
	jlt.u	d4,d15,.L194
.L1443:

; ..\EAS\BSW\Com\Com.c	  4765      {
; ..\EAS\BSW\Com\Com.c	  4766          COM_DET_REPORT_ERROR(COMServiceId_SwitchIpduTxMode, COM_E_PARAM);
	mov	d7,#1
.L193:
	mov	d4,#50
.L1225:
	mov	d5,#0
.L1224:
	mov	d6,#39
	j	Det_ReportError
.L194:

; ..\EAS\BSW\Com\Com.c	  4767      }
; ..\EAS\BSW\Com\Com.c	  4768      else
; ..\EAS\BSW\Com\Com.c	  4769      {
; ..\EAS\BSW\Com\Com.c	  4770  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4771          /*
; ..\EAS\BSW\Com\Com.c	  4772              Can switch mode when pdu is stop
; ..\EAS\BSW\Com\Com.c	  4773              new txmode will be active when pdu is restart
; ..\EAS\BSW\Com\Com.c	  4774          */
; ..\EAS\BSW\Com\Com.c	  4775          SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4776          if(TRUE == Mode)
; ..\EAS\BSW\Com\Com.c	  4777          {
; ..\EAS\BSW\Com\Com.c	  4778              if(NULL_PTR != COM_CFG_TXPDU_TXMODE_TRUE_PTR(PduId))
; ..\EAS\BSW\Com\Com.c	  4779              {
; ..\EAS\BSW\Com\Com.c	  4780                  Com_SendSwitchTxModeFlag[PduId] = COM_TXMODE_SWITCH_API_TRUE;
; ..\EAS\BSW\Com\Com.c	  4781              }
; ..\EAS\BSW\Com\Com.c	  4782          }
; ..\EAS\BSW\Com\Com.c	  4783          else
; ..\EAS\BSW\Com\Com.c	  4784          {
; ..\EAS\BSW\Com\Com.c	  4785              if(NULL_PTR != COM_CFG_TXPDU_TXMODE_FALSE_PTR(PduId))
; ..\EAS\BSW\Com\Com.c	  4786              {
; ..\EAS\BSW\Com\Com.c	  4787                  Com_SendSwitchTxModeFlag[PduId] = COM_TXMODE_SWITCH_API_FALSE;
; ..\EAS\BSW\Com\Com.c	  4788              }
; ..\EAS\BSW\Com\Com.c	  4789  
; ..\EAS\BSW\Com\Com.c	  4790          }
; ..\EAS\BSW\Com\Com.c	  4791          SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4792  #endif
; ..\EAS\BSW\Com\Com.c	  4793  
; ..\EAS\BSW\Com\Com.c	  4794      }
; ..\EAS\BSW\Com\Com.c	  4795  }
	ret
.L786:
	
__Com_SwitchIpduTxMode_function_end:
	.size	Com_SwitchIpduTxMode,__Com_SwitchIpduTxMode_function_end-Com_SwitchIpduTxMode
.L492:
	; End of function
	
	.sdecl	'.text.Com.Com_TriggerIPDUSend',code,cluster('Com_TriggerIPDUSend')
	.sect	'.text.Com.Com_TriggerIPDUSend'
	.align	2
	
	.global	Com_TriggerIPDUSend

; ..\EAS\BSW\Com\Com.c	  4796  
; ..\EAS\BSW\Com\Com.c	  4797  
; ..\EAS\BSW\Com\Com.c	  4798  
; ..\EAS\BSW\Com\Com.c	  4799  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4800  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4801  * Function Name: Com_TriggerIPDUSend SWS_Com_00348
; ..\EAS\BSW\Com\Com.c	  4802  *
; ..\EAS\BSW\Com\Com.c	  4803  * Description:
; ..\EAS\BSW\Com\Com.c	  4804  *
; ..\EAS\BSW\Com\Com.c	  4805  * Inputs:        PduId: ignal handle
; ..\EAS\BSW\Com\Com.c	  4806  *
; ..\EAS\BSW\Com\Com.c	  4807  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4808  *
; ..\EAS\BSW\Com\Com.c	  4809  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4810  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4811  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4812  FUNC(Std_ReturnType, COM_CODE) Com_TriggerIPDUSend
; Function Com_TriggerIPDUSend
.L404:
Com_TriggerIPDUSend:	.type	func

; ..\EAS\BSW\Com\Com.c	  4813  (
; ..\EAS\BSW\Com\Com.c	  4814      PduIdType PduId
; ..\EAS\BSW\Com\Com.c	  4815  )
; ..\EAS\BSW\Com\Com.c	  4816  {
; ..\EAS\BSW\Com\Com.c	  4817      Std_ReturnType ret = E_NOT_OK;
	mov	d8,#1
.L1227:

; ..\EAS\BSW\Com\Com.c	  4818  
; ..\EAS\BSW\Com\Com.c	  4819  
; ..\EAS\BSW\Com\Com.c	  4820      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1422:
	jeq	d15,#1,.L195
.L1423:

; ..\EAS\BSW\Com\Com.c	  4821      {
; ..\EAS\BSW\Com\Com.c	  4822          COM_DET_REPORT_ERROR(COMServiceId_TriggerIPDUSend, COM_E_UNINIT);
	mov	d4,#50
.L1226:
	mov	d5,#0
	mov	d6,#23
	mov	d7,#2
	call	Det_ReportError
.L1424:
	j	.L196
.L195:

; ..\EAS\BSW\Com\Com.c	  4823      }
; ..\EAS\BSW\Com\Com.c	  4824      else if(PduId >= COM_TXPDU_NUM)
	mov	d15,#46
.L1425:
	jlt.u	d4,d15,.L197
.L1426:

; ..\EAS\BSW\Com\Com.c	  4825      {
; ..\EAS\BSW\Com\Com.c	  4826          COM_DET_REPORT_ERROR(COMServiceId_TriggerIPDUSend, COM_E_PARAM);
	mov	d4,#50
.L1228:
	mov	d5,#0
	mov	d6,#23
	mov	d7,#1
	call	Det_ReportError
.L1427:
	j	.L198
.L197:

; ..\EAS\BSW\Com\Com.c	  4827      }
; ..\EAS\BSW\Com\Com.c	  4828      else
; ..\EAS\BSW\Com\Com.c	  4829      {
; ..\EAS\BSW\Com\Com.c	  4830  #if(STD_ON == COM_TriggerIPDUSend_API)
; ..\EAS\BSW\Com\Com.c	  4831          if(COM_TXPDU_STOP != Com_TxPduState[PduId])/*SWS_Com_00861*/
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1428:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1429:
	jeq	d15,#0,.L199
.L1430:

; ..\EAS\BSW\Com\Com.c	  4832          {
; ..\EAS\BSW\Com\Com.c	  4833              Com_TriggerPDUSendFlag[PduId] = TRUE;
	movh.a	a15,#@his(Com_TriggerPDUSendFlag)
	lea	a15,[a15]@los(Com_TriggerPDUSendFlag)
.L1431:
	addsc.a	a15,a15,d4,#0
.L1432:
	mov	d15,#1
.L1433:
	st.b	[a15],d15
.L1434:

; ..\EAS\BSW\Com\Com.c	  4834              ret = E_OK;
	mov	d8,#0
.L199:
.L198:
.L196:

; ..\EAS\BSW\Com\Com.c	  4835          }
; ..\EAS\BSW\Com\Com.c	  4836  #endif
; ..\EAS\BSW\Com\Com.c	  4837      }
; ..\EAS\BSW\Com\Com.c	  4838  
; ..\EAS\BSW\Com\Com.c	  4839      return ret;
	mov	d2,d8
.L1229:

; ..\EAS\BSW\Com\Com.c	  4840  }
	ret
.L783:
	
__Com_TriggerIPDUSend_function_end:
	.size	Com_TriggerIPDUSend,__Com_TriggerIPDUSend_function_end-Com_TriggerIPDUSend
.L487:
	; End of function
	
	.sdecl	'.text.Com.Com_TriggerTransmit',code,cluster('Com_TriggerTransmit')
	.sect	'.text.Com.Com_TriggerTransmit'
	.align	2
	
	.global	Com_TriggerTransmit

; ..\EAS\BSW\Com\Com.c	  4841  
; ..\EAS\BSW\Com\Com.c	  4842  
; ..\EAS\BSW\Com\Com.c	  4843  
; ..\EAS\BSW\Com\Com.c	  4844  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4845  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4846  * Function Name: Com_TriggerTransmit SWS_Com_00001
; ..\EAS\BSW\Com\Com.c	  4847  *
; ..\EAS\BSW\Com\Com.c	  4848  * Description:   This service copies the data  to  PduInfoPtr
; ..\EAS\BSW\Com\Com.c	  4849  *
; ..\EAS\BSW\Com\Com.c	  4850  * Inputs:        TxPduId: ignal handle
; ..\EAS\BSW\Com\Com.c	  4851  *                PduInfoPtr: Reference to the location where the tx
; ..\EAS\BSW\Com\Com.c	  4852  *                            data shall be stored
; ..\EAS\BSW\Com\Com.c	  4853  *
; ..\EAS\BSW\Com\Com.c	  4854  * Outputs:       E_OK
; ..\EAS\BSW\Com\Com.c	  4855  *                E_NOT_OK
; ..\EAS\BSW\Com\Com.c	  4856  *
; ..\EAS\BSW\Com\Com.c	  4857  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4858  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4859  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4860  FUNC(Std_ReturnType, COM_CODE)Com_TriggerTransmit
; Function Com_TriggerTransmit
.L406:
Com_TriggerTransmit:	.type	func
	mov.aa	a12,a4
.L1232:

; ..\EAS\BSW\Com\Com.c	  4861  (
; ..\EAS\BSW\Com\Com.c	  4862      PduIdType TxPduId,
; ..\EAS\BSW\Com\Com.c	  4863      P2VAR(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr
; ..\EAS\BSW\Com\Com.c	  4864  )
; ..\EAS\BSW\Com\Com.c	  4865  {
; ..\EAS\BSW\Com\Com.c	  4866  
; ..\EAS\BSW\Com\Com.c	  4867      Std_ReturnType result = E_NOT_OK;
	mov	d8,#1
.L1233:

; ..\EAS\BSW\Com\Com.c	  4868  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4869      PduLengthType length = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  4870  #endif
; ..\EAS\BSW\Com\Com.c	  4871  
; ..\EAS\BSW\Com\Com.c	  4872      if(COM_INIT != Com_InitStateFlag)
	movh.a	a2,#@his(Com_InitStateFlag)
	ld.bu	d15,[a2]@los(Com_InitStateFlag)
.L1761:
	jeq	d15,#1,.L201
.L1762:

; ..\EAS\BSW\Com\Com.c	  4873      {
; ..\EAS\BSW\Com\Com.c	  4874          COM_DET_REPORT_ERROR(COMServiceId_TriggerTransmit, COM_E_UNINIT);
	mov	d4,#50
.L1231:
	mov	d5,#0
	mov	d6,#65
	mov	d7,#2
	call	Det_ReportError
.L1230:
	j	.L202
.L201:

; ..\EAS\BSW\Com\Com.c	  4875      }
; ..\EAS\BSW\Com\Com.c	  4876  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4877      else if(TxPduId >= COM_TXPDU_NUM)
	mov	d15,#46
.L1763:
	jge.u	d4,d15,.L203
.L1764:

; ..\EAS\BSW\Com\Com.c	  4878      {
; ..\EAS\BSW\Com\Com.c	  4879          COM_DET_REPORT_ERROR(COMServiceId_TriggerTransmit, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4880      }
; ..\EAS\BSW\Com\Com.c	  4881      else if(NULL_PTR == PduInfoPtr)
	mov.a	a2,#0
.L1765:
	jeq.a	a2,a12,.L204
.L1766:

; ..\EAS\BSW\Com\Com.c	  4882      {
; ..\EAS\BSW\Com\Com.c	  4883          COM_DET_REPORT_ERROR(COMServiceId_TriggerTransmit, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  4884      }
; ..\EAS\BSW\Com\Com.c	  4885      else if(NULL_PTR == (PduInfoPtr->SduDataPtr))
	ld.a	a4,[a12]
.L1234:
	jne.a	a2,a4,.L205
.L204:

; ..\EAS\BSW\Com\Com.c	  4886      {
; ..\EAS\BSW\Com\Com.c	  4887          COM_DET_REPORT_ERROR(COMServiceId_TriggerTransmit, COM_E_PARAM_POINTER);
	mov	d4,#50
.L1235:
	mov	d5,#0
	mov	d6,#65
	mov	d7,#3
	call	Det_ReportError
.L1767:
	j	.L206
.L205:

; ..\EAS\BSW\Com\Com.c	  4888      }
; ..\EAS\BSW\Com\Com.c	  4889      else
; ..\EAS\BSW\Com\Com.c	  4890      {
; ..\EAS\BSW\Com\Com.c	  4891          /*length check */ /*SWS_Com_869*/
; ..\EAS\BSW\Com\Com.c	  4892          length = COM_CFG_TXPDU_LENGTH(TxPduId);
	mul	d15,d4,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d9,[a15]24
.L1237:

; ..\EAS\BSW\Com\Com.c	  4893  #if (STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4894          if(TRUE == COM_CFG_TXPDU_IS_DYN(TxPduId))
; ..\EAS\BSW\Com\Com.c	  4895          {
; ..\EAS\BSW\Com\Com.c	  4896              length = COM_TXPDU_DYN_LENGTH(TxPduId);
; ..\EAS\BSW\Com\Com.c	  4897          }
; ..\EAS\BSW\Com\Com.c	  4898  #endif
; ..\EAS\BSW\Com\Com.c	  4899  
; ..\EAS\BSW\Com\Com.c	  4900          if(PduInfoPtr->SduLength < length)
	ld.hu	d15,[a12]4
.L1768:
	jge.u	d15,d9,.L207
.L203:

; ..\EAS\BSW\Com\Com.c	  4901          {
; ..\EAS\BSW\Com\Com.c	  4902              COM_DET_REPORT_ERROR(COMServiceId_TriggerTransmit, COM_E_PARAM);
	mov	d4,#50
.L1236:
	mov	d5,#0
	mov	d6,#65
	mov	d7,#1
	call	Det_ReportError
.L1769:
	j	.L208
.L207:

; ..\EAS\BSW\Com\Com.c	  4903          }
; ..\EAS\BSW\Com\Com.c	  4904          else
; ..\EAS\BSW\Com\Com.c	  4905          {
; ..\EAS\BSW\Com\Com.c	  4906              if(COM_TXPDU_STOP != Com_TxPduState[TxPduId])
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1770:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1771:
	jeq	d15,#0,.L209
.L1772:

; ..\EAS\BSW\Com\Com.c	  4907              {
; ..\EAS\BSW\Com\Com.c	  4908                  SchM_Enter_Com_COM_EXCLUSIVE_AREA_6();
; ..\EAS\BSW\Com\Com.c	  4909  
; ..\EAS\BSW\Com\Com.c	  4910                  /*SWS_Com_647*/
; ..\EAS\BSW\Com\Com.c	  4911                  Bsw_MemCpy(PduInfoPtr->SduDataPtr, (uint8 *)COM_CFG_TXPDU_DATA_PTR(TxPduId), (uint32)length);
	mul	d15,d4,#44
	movh.a	a15,#@his(ComTxPduCfgTable)
	lea	a15,[a15]@los(ComTxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a5,[a15]20
.L1773:
	mov	d4,d9
.L1238:
	call	Bsw_MemCpy
.L1239:

; ..\EAS\BSW\Com\Com.c	  4912                  PduInfoPtr->SduLength = length;
	st.h	[a12]4,d9
.L1774:

; ..\EAS\BSW\Com\Com.c	  4913  
; ..\EAS\BSW\Com\Com.c	  4914  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  4915                  if(COM_CUB_TRIGGER == COM_CFG_TXPDU_UPDATEBIT_CLEARTYPE(TxPduId))
; ..\EAS\BSW\Com\Com.c	  4916  
; ..\EAS\BSW\Com\Com.c	  4917                  {
; ..\EAS\BSW\Com\Com.c	  4918                      Com_ClearUpdateBit(TxPduId);
; ..\EAS\BSW\Com\Com.c	  4919                  }
; ..\EAS\BSW\Com\Com.c	  4920  #endif
; ..\EAS\BSW\Com\Com.c	  4921  
; ..\EAS\BSW\Com\Com.c	  4922                  SchM_Exit_Com_COM_EXCLUSIVE_AREA_6();
; ..\EAS\BSW\Com\Com.c	  4923  
; ..\EAS\BSW\Com\Com.c	  4924  #if (STD_ON == COM_TX_TRIGGER_CALLOUT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  4925                  if(NULL_PTR != COM_CFG_TXPDU_TRIGGER_CALLOUT(TxPduId))
; ..\EAS\BSW\Com\Com.c	  4926                  {
; ..\EAS\BSW\Com\Com.c	  4927                      /*SWS_Com_395 ignor the return value of this callout. why?*/
; ..\EAS\BSW\Com\Com.c	  4928                      (void)COM_CFG_TXPDU_TRIGGER_CALLOUT(TxPduId)(TxPduId, PduInfoPtr); /*SWS_Com_766 */
; ..\EAS\BSW\Com\Com.c	  4929                  }
; ..\EAS\BSW\Com\Com.c	  4930  #endif
; ..\EAS\BSW\Com\Com.c	  4931  
; ..\EAS\BSW\Com\Com.c	  4932                  result = E_OK;
	mov	d8,#0
.L209:
.L208:
.L206:
.L202:

; ..\EAS\BSW\Com\Com.c	  4933              }
; ..\EAS\BSW\Com\Com.c	  4934  
; ..\EAS\BSW\Com\Com.c	  4935          }
; ..\EAS\BSW\Com\Com.c	  4936      }
; ..\EAS\BSW\Com\Com.c	  4937  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  4938      return result;
	mov	d2,d8
.L1240:

; ..\EAS\BSW\Com\Com.c	  4939  }
	ret
.L877:
	
__Com_TriggerTransmit_function_end:
	.size	Com_TriggerTransmit,__Com_TriggerTransmit_function_end-Com_TriggerTransmit
.L597:
	; End of function
	
	.sdecl	'.text.Com.Com_TpTxConfirmation',code,cluster('Com_TpTxConfirmation')
	.sect	'.text.Com.Com_TpTxConfirmation'
	.align	2
	
	.global	Com_TpTxConfirmation

; ..\EAS\BSW\Com\Com.c	  4940  
; ..\EAS\BSW\Com\Com.c	  4941  
; ..\EAS\BSW\Com\Com.c	  4942  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  4943  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4944  * Function Name: Com_TpTxConfirmation SWS_Com_00725
; ..\EAS\BSW\Com\Com.c	  4945  *
; ..\EAS\BSW\Com\Com.c	  4946  * Description:   Callbak function Com provided by Com to Tp
; ..\EAS\BSW\Com\Com.c	  4947  *
; ..\EAS\BSW\Com\Com.c	  4948  * Inputs:        PduId:  Receive PduId
; ..\EAS\BSW\Com\Com.c	  4949  *                Result: NTFRSLT_OK means the complete N-PDU has been eceived
; ..\EAS\BSW\Com\Com.c	  4950  *                        and is stored in the receive buffer.Any other value
; ..\EAS\BSW\Com\Com.c	  4951  *                        means the N_PDU has not been received,
; ..\EAS\BSW\Com\Com.c	  4952  *
; ..\EAS\BSW\Com\Com.c	  4953  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  4954  *
; ..\EAS\BSW\Com\Com.c	  4955  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  4956  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  4957  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  4958  FUNC(void, COM_CODE) Com_TpTxConfirmation
; Function Com_TpTxConfirmation
.L408:
Com_TpTxConfirmation:	.type	func

; ..\EAS\BSW\Com\Com.c	  4959  (
; ..\EAS\BSW\Com\Com.c	  4960      PduIdType TxPduId,
; ..\EAS\BSW\Com\Com.c	  4961      Std_ReturnType Result
; ..\EAS\BSW\Com\Com.c	  4962  )
; ..\EAS\BSW\Com\Com.c	  4963  {
; ..\EAS\BSW\Com\Com.c	  4964  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4965      Com_TxPduStateType pduState;
; ..\EAS\BSW\Com\Com.c	  4966  #endif
; ..\EAS\BSW\Com\Com.c	  4967  
; ..\EAS\BSW\Com\Com.c	  4968      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1850:
	jeq	d15,#1,.L211
.L1851:

; ..\EAS\BSW\Com\Com.c	  4969      {
; ..\EAS\BSW\Com\Com.c	  4970          COM_DET_REPORT_ERROR(COMServiceId_TpTxConfirmation, COM_E_UNINIT);
	mov	d7,#2
.L1852:
	j	.L212
.L211:

; ..\EAS\BSW\Com\Com.c	  4971      }
; ..\EAS\BSW\Com\Com.c	  4972  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  4973      else if(TxPduId >= COM_TXPDU_NUM)
; ..\EAS\BSW\Com\Com.c	  4974      {
; ..\EAS\BSW\Com\Com.c	  4975          COM_DET_REPORT_ERROR(COMServiceId_TpTxConfirmation, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4976      }
; ..\EAS\BSW\Com\Com.c	  4977      else if(FALSE == COM_CFG_TXPDU_IS_TP_PDU(TxPduId))
; ..\EAS\BSW\Com\Com.c	  4978      {
; ..\EAS\BSW\Com\Com.c	  4979          COM_DET_REPORT_ERROR(COMServiceId_TpTxConfirmation, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  4980      }
; ..\EAS\BSW\Com\Com.c	  4981      else
; ..\EAS\BSW\Com\Com.c	  4982      {
; ..\EAS\BSW\Com\Com.c	  4983          /* dont consider None Pdu here as  tp will callCopyTxDta first*/
; ..\EAS\BSW\Com\Com.c	  4984          /*SWS_Com_00800 STOP Pdu ignor txConf*/
; ..\EAS\BSW\Com\Com.c	  4985          if(COM_TXPDU_START_BUSY == Com_TxPduState[TxPduId])
; ..\EAS\BSW\Com\Com.c	  4986          {
; ..\EAS\BSW\Com\Com.c	  4987              SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  4988              if(E_OK == Result)
; ..\EAS\BSW\Com\Com.c	  4989              {
; ..\EAS\BSW\Com\Com.c	  4990                  pduState = COM_TXPDU_START_TXOK;
; ..\EAS\BSW\Com\Com.c	  4991  
; ..\EAS\BSW\Com\Com.c	  4992              }
; ..\EAS\BSW\Com\Com.c	  4993              else
; ..\EAS\BSW\Com\Com.c	  4994              {
; ..\EAS\BSW\Com\Com.c	  4995                  pduState = COM_TXPDU_START_TXNOTOK;/*TXNOTOK not used in this version*/
; ..\EAS\BSW\Com\Com.c	  4996              }
; ..\EAS\BSW\Com\Com.c	  4997  
; ..\EAS\BSW\Com\Com.c	  4998              if(TRUE == COM_CFG_TXPDU_IS_IMM_PROCESSING(TxPduId))
; ..\EAS\BSW\Com\Com.c	  4999              {
; ..\EAS\BSW\Com\Com.c	  5000                  /* switch IDLE in this fucntion as nothinf need to do in mainfuntionTx*/
; ..\EAS\BSW\Com\Com.c	  5001                  Com_ProcessTxConf(TxPduId, pduState);
; ..\EAS\BSW\Com\Com.c	  5002              }
; ..\EAS\BSW\Com\Com.c	  5003              else
; ..\EAS\BSW\Com\Com.c	  5004              {
; ..\EAS\BSW\Com\Com.c	  5005                  /* set to OK or notok, process will be done in mainfuntionTx*/
; ..\EAS\BSW\Com\Com.c	  5006                  Com_TxPduState[TxPduId] = pduState;
; ..\EAS\BSW\Com\Com.c	  5007              }
; ..\EAS\BSW\Com\Com.c	  5008  
; ..\EAS\BSW\Com\Com.c	  5009  
; ..\EAS\BSW\Com\Com.c	  5010  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  5011              if(COM_CUB_CONF == COM_CFG_TXPDU_UPDATEBIT_CLEARTYPE(TxPduId))
; ..\EAS\BSW\Com\Com.c	  5012              {
; ..\EAS\BSW\Com\Com.c	  5013                  Com_ClearUpdateBit(TxPduId);
; ..\EAS\BSW\Com\Com.c	  5014              }
; ..\EAS\BSW\Com\Com.c	  5015  #endif
; ..\EAS\BSW\Com\Com.c	  5016  
; ..\EAS\BSW\Com\Com.c	  5017  #if(STD_ON == COM_MDT_CYCLIC_TRANSMISSION)/*SWS_Com_00469, reset min delay timer when txConf is received*/
; ..\EAS\BSW\Com\Com.c	  5018              if((COM_TXPDU_TXMODE(TxPduId) != COM_PDU_NONE)
; ..\EAS\BSW\Com\Com.c	  5019                      && (COM_CFG_TXPDU_MIN_DELAY_TIMER(TxPduId) > (uint16)0)
; ..\EAS\BSW\Com\Com.c	  5020                      && (COM_TXPDU_MIN_DELAY_TIMER(TxPduId) != (uint16)0)
; ..\EAS\BSW\Com\Com.c	  5021                      && (COM_TXPDU_MIN_DELAY_TIMER(TxPduId) != COM_TIMER_STOP_VAL))
; ..\EAS\BSW\Com\Com.c	  5022              {
; ..\EAS\BSW\Com\Com.c	  5023                  /* no MDT for NONE pdu*/
; ..\EAS\BSW\Com\Com.c	  5024                  COM_TXPDU_MIN_DELAY_TIMER(TxPduId) = COM_CFG_TXPDU_MIN_DELAY_TIMER(TxPduId);
; ..\EAS\BSW\Com\Com.c	  5025              }
; ..\EAS\BSW\Com\Com.c	  5026  #endif
; ..\EAS\BSW\Com\Com.c	  5027              SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  5028  
; ..\EAS\BSW\Com\Com.c	  5029          }
; ..\EAS\BSW\Com\Com.c	  5030      }
; ..\EAS\BSW\Com\Com.c	  5031  #else
; ..\EAS\BSW\Com\Com.c	  5032      else
; ..\EAS\BSW\Com\Com.c	  5033      {
; ..\EAS\BSW\Com\Com.c	  5034          COM_DET_REPORT_ERROR(COMServiceId_TpTxConfirmation, COM_E_PARAM);
	mov	d7,#1
.L212:
	mov	d4,#50
.L1242:
	mov	d5,#0
.L1241:
	mov	d6,#38
	j	Det_ReportError
.L891:
	
__Com_TpTxConfirmation_function_end:
	.size	Com_TpTxConfirmation,__Com_TpTxConfirmation_function_end-Com_TpTxConfirmation
.L612:
	; End of function
	
	.sdecl	'.text.Com.Com_CopyTxData',code,cluster('Com_CopyTxData')
	.sect	'.text.Com.Com_CopyTxData'
	.align	2
	
	.global	Com_CopyTxData

; ..\EAS\BSW\Com\Com.c	  5035      }
; ..\EAS\BSW\Com\Com.c	  5036  #endif /*#if(STD_ON == COM_TX_LONG_PDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  5037  
; ..\EAS\BSW\Com\Com.c	  5038  }
; ..\EAS\BSW\Com\Com.c	  5039  
; ..\EAS\BSW\Com\Com.c	  5040  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5041  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5042  * Function Name: Com_CopyTxData SWS_Com_00693
; ..\EAS\BSW\Com\Com.c	  5043  *
; ..\EAS\BSW\Com\Com.c	  5044  * Description:   Callbak function Com provided by Com to Tp
; ..\EAS\BSW\Com\Com.c	  5045  *
; ..\EAS\BSW\Com\Com.c	  5046  * Inputs:        PduId:   Transmitt PduId
; ..\EAS\BSW\Com\Com.c	  5047  *                PduInfoPtr:   Pointer to a PduInfoType, which indicates the
; ..\EAS\BSW\Com\Com.c	  5048  *                              number of bytes to be copied (SduLength) and the
; ..\EAS\BSW\Com\Com.c	  5049  *                              location where the data have to be copied to
; ..\EAS\BSW\Com\Com.c	  5050  *                              SduDataPtr).
; ..\EAS\BSW\Com\Com.c	  5051  *                RetryInfoPtr: None used
; ..\EAS\BSW\Com\Com.c	  5052  *                TxDataCntPtr: Remaining Tx data after completion of this call
; ..\EAS\BSW\Com\Com.c	  5053  *
; ..\EAS\BSW\Com\Com.c	  5054  * Outputs:       BUFREQ_OK, BUFREQ_E_NOT_OK
; ..\EAS\BSW\Com\Com.c	  5055  *
; ..\EAS\BSW\Com\Com.c	  5056  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5057  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5058  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5059  FUNC(BufReq_ReturnType, COM_CODE) Com_CopyTxData
; Function Com_CopyTxData
.L410:
Com_CopyTxData:	.type	func

; ..\EAS\BSW\Com\Com.c	  5060  (
; ..\EAS\BSW\Com\Com.c	  5061      PduIdType PduId,
; ..\EAS\BSW\Com\Com.c	  5062      P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr,
; ..\EAS\BSW\Com\Com.c	  5063      P2VAR(RetryInfoType, AUTOMATIC, COM_APPL_DATA) RetryInfoPtr,
; ..\EAS\BSW\Com\Com.c	  5064      P2VAR(PduLengthType, AUTOMATIC, COM_APPL_DATA) TxDataCntPtr
; ..\EAS\BSW\Com\Com.c	  5065  )
; ..\EAS\BSW\Com\Com.c	  5066  {
; ..\EAS\BSW\Com\Com.c	  5067  
; ..\EAS\BSW\Com\Com.c	  5068      BufReq_ReturnType result = BUFREQ_E_NOT_OK;
; ..\EAS\BSW\Com\Com.c	  5069  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  5070      PduLengthType maxLength;
; ..\EAS\BSW\Com\Com.c	  5071  #endif
; ..\EAS\BSW\Com\Com.c	  5072  
; ..\EAS\BSW\Com\Com.c	  5073      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1857:
	jeq	d15,#1,.L213
.L1858:

; ..\EAS\BSW\Com\Com.c	  5074      {
; ..\EAS\BSW\Com\Com.c	  5075          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_UNINIT);
	mov	d7,#2
.L1859:
	j	.L214
.L213:

; ..\EAS\BSW\Com\Com.c	  5076      }
; ..\EAS\BSW\Com\Com.c	  5077  #if(STD_ON == COM_TX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  5078      else if(PduId >= COM_TXPDU_NUM)
; ..\EAS\BSW\Com\Com.c	  5079      {
; ..\EAS\BSW\Com\Com.c	  5080          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5081      }
; ..\EAS\BSW\Com\Com.c	  5082      else if(FALSE == COM_CFG_TXPDU_IS_TP_PDU(PduId))
; ..\EAS\BSW\Com\Com.c	  5083      {
; ..\EAS\BSW\Com\Com.c	  5084          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5085      }
; ..\EAS\BSW\Com\Com.c	  5086      else if(COM_TXPDU_STOP == Com_TxPduState[PduId])/*SWS_Com_00783*/
; ..\EAS\BSW\Com\Com.c	  5087      {
; ..\EAS\BSW\Com\Com.c	  5088          /* do nothing only return notok*/
; ..\EAS\BSW\Com\Com.c	  5089      }
; ..\EAS\BSW\Com\Com.c	  5090      else if(NULL_PTR == TxDataCntPtr)
; ..\EAS\BSW\Com\Com.c	  5091      {
; ..\EAS\BSW\Com\Com.c	  5092          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5093      }
; ..\EAS\BSW\Com\Com.c	  5094      else if(NULL_PTR == PduInfoPtr)
; ..\EAS\BSW\Com\Com.c	  5095      {
; ..\EAS\BSW\Com\Com.c	  5096          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5097      }
; ..\EAS\BSW\Com\Com.c	  5098      else if(NULL_PTR == PduInfoPtr->SduDataPtr)
; ..\EAS\BSW\Com\Com.c	  5099      {
; ..\EAS\BSW\Com\Com.c	  5100          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5101      }
; ..\EAS\BSW\Com\Com.c	  5102      else
; ..\EAS\BSW\Com\Com.c	  5103      {
; ..\EAS\BSW\Com\Com.c	  5104          (void)RetryInfoPtr;
; ..\EAS\BSW\Com\Com.c	  5105          /* 1.current version com dont support LinTp  message
; ..\EAS\BSW\Com\Com.c	  5106             2.normally LinTp dont tx tp packet by itsself, if support lintp, com need to start tp tx request bu call LinTp_Transmit
; ..\EAS\BSW\Com\Com.c	  5107             so here we dont consider NONE type pdu.
; ..\EAS\BSW\Com\Com.c	  5108          */
; ..\EAS\BSW\Com\Com.c	  5109          if(COM_TXPDU_START_BUSY == Com_TxPduState[PduId])
; ..\EAS\BSW\Com\Com.c	  5110          {
; ..\EAS\BSW\Com\Com.c	  5111  
; ..\EAS\BSW\Com\Com.c	  5112              maxLength = COM_CFG_TXPDU_LENGTH(PduId);
; ..\EAS\BSW\Com\Com.c	  5113  
; ..\EAS\BSW\Com\Com.c	  5114  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  5115              if(TRUE == COM_CFG_TXPDU_IS_DYN(PduId))
; ..\EAS\BSW\Com\Com.c	  5116              {
; ..\EAS\BSW\Com\Com.c	  5117                  maxLength = COM_TXPDU_DYN_LENGTH(PduId);
; ..\EAS\BSW\Com\Com.c	  5118  
; ..\EAS\BSW\Com\Com.c	  5119              }
; ..\EAS\BSW\Com\Com.c	  5120  #endif
; ..\EAS\BSW\Com\Com.c	  5121  
; ..\EAS\BSW\Com\Com.c	  5122              if((COM_TXPDU_TP_INDEX(PduId) + PduInfoPtr->SduLength) > maxLength)
; ..\EAS\BSW\Com\Com.c	  5123              {
; ..\EAS\BSW\Com\Com.c	  5124                  COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5125              }
; ..\EAS\BSW\Com\Com.c	  5126              else
; ..\EAS\BSW\Com\Com.c	  5127              {
; ..\EAS\BSW\Com\Com.c	  5128                  /* no Exclusive  Area, as the tp buffer is locked by busy state */
; ..\EAS\BSW\Com\Com.c	  5129                  Bsw_MemCpy(PduInfoPtr->SduDataPtr, &(((uint8 *)COM_CFG_TXPDU_DATA_PTR(PduId))[COM_TXPDU_TP_INDEX(PduId)]), (uint32)PduInfoPtr->SduLength);
; ..\EAS\BSW\Com\Com.c	  5130                  COM_TXPDU_TP_INDEX(PduId) += (PduInfoPtr->SduLength);
; ..\EAS\BSW\Com\Com.c	  5131                  *TxDataCntPtr =  maxLength - COM_TXPDU_TP_INDEX(PduId);
; ..\EAS\BSW\Com\Com.c	  5132                  result = BUFREQ_OK;
; ..\EAS\BSW\Com\Com.c	  5133              }
; ..\EAS\BSW\Com\Com.c	  5134          }
; ..\EAS\BSW\Com\Com.c	  5135      }
; ..\EAS\BSW\Com\Com.c	  5136  #else
; ..\EAS\BSW\Com\Com.c	  5137      else
; ..\EAS\BSW\Com\Com.c	  5138      {
; ..\EAS\BSW\Com\Com.c	  5139          COM_DET_REPORT_ERROR(COMServiceId_CopyTxData, COM_E_PARAM);
	mov	d7,#1
.L214:
	mov	d4,#50
.L1243:
	mov	d5,#0
	mov	d6,#36
	call	Det_ReportError
.L1244:
	mov	d2,#1
.L1245:

; ..\EAS\BSW\Com\Com.c	  5140      }
; ..\EAS\BSW\Com\Com.c	  5141  #endif /*#if(STD_ON == COM_TX_LONG_PDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  5142  
; ..\EAS\BSW\Com\Com.c	  5143      return result;
; ..\EAS\BSW\Com\Com.c	  5144  
; ..\EAS\BSW\Com\Com.c	  5145  }
	ret
.L895:
	
__Com_CopyTxData_function_end:
	.size	Com_CopyTxData,__Com_CopyTxData_function_end-Com_CopyTxData
.L617:
	; End of function
	
	.sdecl	'.text.Com.Com_StartOfReception',code,cluster('Com_StartOfReception')
	.sect	'.text.Com.Com_StartOfReception'
	.align	2
	
	.global	Com_StartOfReception

; ..\EAS\BSW\Com\Com.c	  5146  
; ..\EAS\BSW\Com\Com.c	  5147  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5148  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5149  * Function Name: Com_StartOfReception SWS_Com_00691
; ..\EAS\BSW\Com\Com.c	  5150  *
; ..\EAS\BSW\Com\Com.c	  5151  * Description:   Callbak function Com provided by Com to J1939Tp
; ..\EAS\BSW\Com\Com.c	  5152  *
; ..\EAS\BSW\Com\Com.c	  5153  * Inputs:        ComRxPduId:      Receive PduId
; ..\EAS\BSW\Com\Com.c	  5154  *                TpSduLength:     Length in Single Frame or Fist Frame
; ..\EAS\BSW\Com\Com.c	  5155  *                RxBufferSizePtr: Avaliable buffer size Com can provided
; ..\EAS\BSW\Com\Com.c	  5156  *
; ..\EAS\BSW\Com\Com.c	  5157  * Outputs:       BUFREQ_E_NOT_OK, BUFREQ_E_BUSY and BUFREQ_E_OVFL
; ..\EAS\BSW\Com\Com.c	  5158  *
; ..\EAS\BSW\Com\Com.c	  5159  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5160  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5161  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5162  FUNC(BufReq_ReturnType, COM_CODE) Com_StartOfReception
; Function Com_StartOfReception
.L412:
Com_StartOfReception:	.type	func

; ..\EAS\BSW\Com\Com.c	  5163  (
; ..\EAS\BSW\Com\Com.c	  5164      PduIdType ComRxPduId,
; ..\EAS\BSW\Com\Com.c	  5165      P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPointer,
; ..\EAS\BSW\Com\Com.c	  5166      PduLengthType TpSduLength,
; ..\EAS\BSW\Com\Com.c	  5167      P2VAR(PduLengthType, AUTOMATIC, COM_APPL_DATA) RxBufferSizePtr
; ..\EAS\BSW\Com\Com.c	  5168  )
; ..\EAS\BSW\Com\Com.c	  5169  {
; ..\EAS\BSW\Com\Com.c	  5170  
; ..\EAS\BSW\Com\Com.c	  5171      BufReq_ReturnType result = BUFREQ_E_NOT_OK;
; ..\EAS\BSW\Com\Com.c	  5172  
; ..\EAS\BSW\Com\Com.c	  5173      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1871:
	jeq	d15,#1,.L216
.L1872:

; ..\EAS\BSW\Com\Com.c	  5174      {
; ..\EAS\BSW\Com\Com.c	  5175          COM_DET_REPORT_ERROR(COMServiceId_StartOfReception, COM_E_UNINIT);
	mov	d7,#2
.L1873:
	j	.L217
.L216:

; ..\EAS\BSW\Com\Com.c	  5176      }
; ..\EAS\BSW\Com\Com.c	  5177  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  5178      else if((ComRxPduId >= COM_RXPDU_NUM)
; ..\EAS\BSW\Com\Com.c	  5179              || (FALSE == COM_CFG_RXPDU_IS_TP_PDU(ComRxPduId)))
; ..\EAS\BSW\Com\Com.c	  5180      {
; ..\EAS\BSW\Com\Com.c	  5181          COM_DET_REPORT_ERROR(COMServiceId_StartOfReception, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5182      }
; ..\EAS\BSW\Com\Com.c	  5183      else if(COM_RXPDU_STOP == Com_RxPduState[ComRxPduId])
; ..\EAS\BSW\Com\Com.c	  5184      {
; ..\EAS\BSW\Com\Com.c	  5185          /*SWS_Com_00721  SWS_Com_00684 713 do nothing, only return BUFREQ_E_NOT_OK*/
; ..\EAS\BSW\Com\Com.c	  5186      }
; ..\EAS\BSW\Com\Com.c	  5187      else if(NULL_PTR == RxBufferSizePtr)
; ..\EAS\BSW\Com\Com.c	  5188      {
; ..\EAS\BSW\Com\Com.c	  5189          COM_DET_REPORT_ERROR(COMServiceId_StartOfReception, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5190      }
; ..\EAS\BSW\Com\Com.c	  5191      else if(COM_RXPDU_START_BUSY == Com_RxPduState[ComRxPduId])
; ..\EAS\BSW\Com\Com.c	  5192      {
; ..\EAS\BSW\Com\Com.c	  5193          result = BUFREQ_E_BUSY;
; ..\EAS\BSW\Com\Com.c	  5194      }
; ..\EAS\BSW\Com\Com.c	  5195      /*length check */ /*SWS_Com_00574*/
; ..\EAS\BSW\Com\Com.c	  5196      else if(TpSduLength > COM_CFG_RXPDU_LENGTH(ComRxPduId))
; ..\EAS\BSW\Com\Com.c	  5197      {
; ..\EAS\BSW\Com\Com.c	  5198          result = BUFREQ_E_OVFL;/* SWS_Com_00654 655*/
; ..\EAS\BSW\Com\Com.c	  5199          COM_DET_REPORT_ERROR(COMServiceId_StartOfReception, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5200      }
; ..\EAS\BSW\Com\Com.c	  5201      else if(FALSE == Com_CheckRxLength(ComRxPduId, TpSduLength))
; ..\EAS\BSW\Com\Com.c	  5202      {
; ..\EAS\BSW\Com\Com.c	  5203          COM_DET_REPORT_ERROR(COMServiceId_StartOfReception, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5204      }
; ..\EAS\BSW\Com\Com.c	  5205      else
; ..\EAS\BSW\Com\Com.c	  5206      {
; ..\EAS\BSW\Com\Com.c	  5207  
; ..\EAS\BSW\Com\Com.c	  5208          (void)PduInfoPointer;/* dont support metaData in this version, ignor this parameter*/
; ..\EAS\BSW\Com\Com.c	  5209  
; ..\EAS\BSW\Com\Com.c	  5210          Com_RxPduState[ComRxPduId] = COM_RXPDU_START_BUSY;
; ..\EAS\BSW\Com\Com.c	  5211          COM_RXPDU_TP_INDEX(ComRxPduId) = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  5212  
; ..\EAS\BSW\Com\Com.c	  5213          /* save length to tempLength reg, both for dyn or fix pdu
; ..\EAS\BSW\Com\Com.c	  5214               as the rx length may be smaller than cfg length*/
; ..\EAS\BSW\Com\Com.c	  5215          COM_RXPDU_TEMP_LENGTH(ComRxPduId) = TpSduLength;
; ..\EAS\BSW\Com\Com.c	  5216  
; ..\EAS\BSW\Com\Com.c	  5217          *RxBufferSizePtr = TpSduLength;/* if dyn pdu , only tell the dyn length*/
; ..\EAS\BSW\Com\Com.c	  5218          result = BUFREQ_OK;
; ..\EAS\BSW\Com\Com.c	  5219  
; ..\EAS\BSW\Com\Com.c	  5220      }
; ..\EAS\BSW\Com\Com.c	  5221  #else
; ..\EAS\BSW\Com\Com.c	  5222      else
; ..\EAS\BSW\Com\Com.c	  5223      {
; ..\EAS\BSW\Com\Com.c	  5224          COM_DET_REPORT_ERROR(COMServiceId_StartOfReception, COM_E_PARAM);
	mov	d7,#1
.L217:
	mov	d4,#50
.L1246:
	mov	d5,#0
.L1248:
	mov	d6,#37
	call	Det_ReportError
.L1247:
	mov	d2,#1
.L1249:

; ..\EAS\BSW\Com\Com.c	  5225      }
; ..\EAS\BSW\Com\Com.c	  5226  #endif/*#if(STD_ON == COM_RX_LONG_PDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  5227  
; ..\EAS\BSW\Com\Com.c	  5228      return result;
; ..\EAS\BSW\Com\Com.c	  5229  
; ..\EAS\BSW\Com\Com.c	  5230  }
	ret
.L906:
	
__Com_StartOfReception_function_end:
	.size	Com_StartOfReception,__Com_StartOfReception_function_end-Com_StartOfReception
.L627:
	; End of function
	
	.sdecl	'.text.Com.Com_CopyRxData',code,cluster('Com_CopyRxData')
	.sect	'.text.Com.Com_CopyRxData'
	.align	2
	
	.global	Com_CopyRxData

; ..\EAS\BSW\Com\Com.c	  5231  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5232  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5233  * Function Name: Com_CopyRxData SWS_Com_00692
; ..\EAS\BSW\Com\Com.c	  5234  *
; ..\EAS\BSW\Com\Com.c	  5235  * Description:   Callbak function Comm provided by Comm to J1939Tp
; ..\EAS\BSW\Com\Com.c	  5236  *
; ..\EAS\BSW\Com\Com.c	  5237  * Inputs:        PduId:     Receive PduId
; ..\EAS\BSW\Com\Com.c	  5238  *                PduInfoPointer:  Pointer to a PduInfoType which indicates
; ..\EAS\BSW\Com\Com.c	  5239  *                                 the number of bytes to be copied (SduLength)
; ..\EAS\BSW\Com\Com.c	  5240  *                                 and the location of the source data
; ..\EAS\BSW\Com\Com.c	  5241  *                                 (SduDataPtr).
; ..\EAS\BSW\Com\Com.c	  5242  *                RxBufferSizePtr: Remaining free place in receive buffer after
; ..\EAS\BSW\Com\Com.c	  5243  *                                 completion of this call.
; ..\EAS\BSW\Com\Com.c	  5244  *
; ..\EAS\BSW\Com\Com.c	  5245  * Outputs:       BUFREQ_OK, BUFREQ_E_BUSY
; ..\EAS\BSW\Com\Com.c	  5246  *
; ..\EAS\BSW\Com\Com.c	  5247  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5248  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5249  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5250  FUNC(BufReq_ReturnType, COM_CODE) Com_CopyRxData
; Function Com_CopyRxData
.L414:
Com_CopyRxData:	.type	func

; ..\EAS\BSW\Com\Com.c	  5251  (
; ..\EAS\BSW\Com\Com.c	  5252      PduIdType PduId,
; ..\EAS\BSW\Com\Com.c	  5253      P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPointer,
; ..\EAS\BSW\Com\Com.c	  5254      P2VAR(PduLengthType, AUTOMATIC, COM_APPL_DATA) RxBufferSizePtr
; ..\EAS\BSW\Com\Com.c	  5255  )
; ..\EAS\BSW\Com\Com.c	  5256  {
; ..\EAS\BSW\Com\Com.c	  5257  
; ..\EAS\BSW\Com\Com.c	  5258      BufReq_ReturnType result = BUFREQ_E_NOT_OK;
; ..\EAS\BSW\Com\Com.c	  5259  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  5260      PduLengthType maxLength = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  5261  #endif
; ..\EAS\BSW\Com\Com.c	  5262  
; ..\EAS\BSW\Com\Com.c	  5263      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1878:
	jeq	d15,#1,.L219
.L1879:

; ..\EAS\BSW\Com\Com.c	  5264      {
; ..\EAS\BSW\Com\Com.c	  5265          COM_DET_REPORT_ERROR(COMServiceId_CopyRxData, COM_E_UNINIT);
	mov	d7,#2
.L1880:
	j	.L220
.L219:

; ..\EAS\BSW\Com\Com.c	  5266      }
; ..\EAS\BSW\Com\Com.c	  5267  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  5268      else if((PduId >= COM_RXPDU_NUM)
; ..\EAS\BSW\Com\Com.c	  5269              || (FALSE == COM_CFG_RXPDU_IS_TP_PDU(PduId)))
; ..\EAS\BSW\Com\Com.c	  5270      {
; ..\EAS\BSW\Com\Com.c	  5271          COM_DET_REPORT_ERROR(COMServiceId_CopyRxData, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5272      }
; ..\EAS\BSW\Com\Com.c	  5273      else if(COM_RXPDU_START_BUSY != Com_RxPduState[PduId])
; ..\EAS\BSW\Com\Com.c	  5274      {
; ..\EAS\BSW\Com\Com.c	  5275          /*SWS_Com_00782  SWS_Com_00684 713 do nothing, only return BUFREQ_E_NOT_OK*/
; ..\EAS\BSW\Com\Com.c	  5276          /* Only copy data when buffer is lock by startofrx */
; ..\EAS\BSW\Com\Com.c	  5277      }
; ..\EAS\BSW\Com\Com.c	  5278      else if(NULL_PTR == RxBufferSizePtr)
; ..\EAS\BSW\Com\Com.c	  5279      {
; ..\EAS\BSW\Com\Com.c	  5280          COM_DET_REPORT_ERROR(COMServiceId_CopyRxData, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5281  
; ..\EAS\BSW\Com\Com.c	  5282      }
; ..\EAS\BSW\Com\Com.c	  5283      else if(NULL_PTR == PduInfoPointer)
; ..\EAS\BSW\Com\Com.c	  5284      {
; ..\EAS\BSW\Com\Com.c	  5285          COM_DET_REPORT_ERROR(COMServiceId_CopyRxData, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5286      }
; ..\EAS\BSW\Com\Com.c	  5287      else if(NULL_PTR == PduInfoPointer->SduDataPtr)
; ..\EAS\BSW\Com\Com.c	  5288      {
; ..\EAS\BSW\Com\Com.c	  5289          COM_DET_REPORT_ERROR(COMServiceId_CopyRxData, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  5290      }
; ..\EAS\BSW\Com\Com.c	  5291      else
; ..\EAS\BSW\Com\Com.c	  5292      {
; ..\EAS\BSW\Com\Com.c	  5293  
; ..\EAS\BSW\Com\Com.c	  5294          maxLength = COM_RXPDU_TEMP_LENGTH(PduId);
; ..\EAS\BSW\Com\Com.c	  5295  
; ..\EAS\BSW\Com\Com.c	  5296          if((COM_RXPDU_TP_INDEX(PduId) + PduInfoPointer->SduLength) > maxLength)
; ..\EAS\BSW\Com\Com.c	  5297          {
; ..\EAS\BSW\Com\Com.c	  5298              /* dont reset rxState here, as com will expected a rxTpIndication with result = notok*/
; ..\EAS\BSW\Com\Com.c	  5299              result = BUFREQ_E_OVFL;
; ..\EAS\BSW\Com\Com.c	  5300          }
; ..\EAS\BSW\Com\Com.c	  5301          else
; ..\EAS\BSW\Com\Com.c	  5302          {
; ..\EAS\BSW\Com\Com.c	  5303              Bsw_MemCpy(&(((uint8 *)COM_CFG_RXPDU_DATA_PTR_TEMP(PduId))[COM_RXPDU_TP_INDEX(PduId)]), PduInfoPointer->SduDataPtr, (uint32)PduInfoPointer->SduLength);
; ..\EAS\BSW\Com\Com.c	  5304  
; ..\EAS\BSW\Com\Com.c	  5305              COM_RXPDU_TP_INDEX(PduId) += (PduInfoPointer->SduLength);
; ..\EAS\BSW\Com\Com.c	  5306  
; ..\EAS\BSW\Com\Com.c	  5307              *RxBufferSizePtr = maxLength - COM_RXPDU_TP_INDEX(PduId);
; ..\EAS\BSW\Com\Com.c	  5308              result = BUFREQ_OK;
; ..\EAS\BSW\Com\Com.c	  5309  
; ..\EAS\BSW\Com\Com.c	  5310          }
; ..\EAS\BSW\Com\Com.c	  5311  
; ..\EAS\BSW\Com\Com.c	  5312      }
; ..\EAS\BSW\Com\Com.c	  5313  #else
; ..\EAS\BSW\Com\Com.c	  5314      else
; ..\EAS\BSW\Com\Com.c	  5315      {
; ..\EAS\BSW\Com\Com.c	  5316          COM_DET_REPORT_ERROR(COMServiceId_CopyRxData, COM_E_PARAM);
	mov	d7,#1
.L220:
	mov	d4,#50
.L1250:
	mov	d5,#0
	mov	d6,#35
	call	Det_ReportError
.L1251:
	mov	d2,#1
.L1252:

; ..\EAS\BSW\Com\Com.c	  5317      }
; ..\EAS\BSW\Com\Com.c	  5318  #endif/*#if(STD_ON == COM_RX_LONG_PDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  5319  
; ..\EAS\BSW\Com\Com.c	  5320  
; ..\EAS\BSW\Com\Com.c	  5321      return result;
; ..\EAS\BSW\Com\Com.c	  5322  }
	ret
.L912:
	
__Com_CopyRxData_function_end:
	.size	Com_CopyRxData,__Com_CopyRxData_function_end-Com_CopyRxData
.L632:
	; End of function
	
	.sdecl	'.text.Com.Com_TpRxIndication',code,cluster('Com_TpRxIndication')
	.sect	'.text.Com.Com_TpRxIndication'
	.align	2
	
	.global	Com_TpRxIndication

; ..\EAS\BSW\Com\Com.c	  5323  
; ..\EAS\BSW\Com\Com.c	  5324  
; ..\EAS\BSW\Com\Com.c	  5325  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5326  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5327  * Function Name: Com_TpRxIndication SWS_Com_00650
; ..\EAS\BSW\Com\Com.c	  5328  *
; ..\EAS\BSW\Com\Com.c	  5329  * Description:   Callbak function Com provided by Com to J1939Tp
; ..\EAS\BSW\Com\Com.c	  5330  *
; ..\EAS\BSW\Com\Com.c	  5331  * Inputs:        PduId:  Receive PduId
; ..\EAS\BSW\Com\Com.c	  5332  *                Result: NTFRSLT_OK means the complete N-PDU has been eceived
; ..\EAS\BSW\Com\Com.c	  5333  *                        and is stored in the receive buffer.Any other value
; ..\EAS\BSW\Com\Com.c	  5334  *                        means the N_PDU has not been received,
; ..\EAS\BSW\Com\Com.c	  5335  *
; ..\EAS\BSW\Com\Com.c	  5336  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5337  *
; ..\EAS\BSW\Com\Com.c	  5338  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5339  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5340  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5341  FUNC(void, COM_CODE) Com_TpRxIndication
; Function Com_TpRxIndication
.L416:
Com_TpRxIndication:	.type	func

; ..\EAS\BSW\Com\Com.c	  5342  (
; ..\EAS\BSW\Com\Com.c	  5343      PduIdType PduId,
; ..\EAS\BSW\Com\Com.c	  5344      Std_ReturnType Result
; ..\EAS\BSW\Com\Com.c	  5345  )
; ..\EAS\BSW\Com\Com.c	  5346  {
; ..\EAS\BSW\Com\Com.c	  5347  #if(COM_RXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  5348      boolean Com_RxCalResult = TRUE;
; ..\EAS\BSW\Com\Com.c	  5349      PduInfoType PduInfo;
; ..\EAS\BSW\Com\Com.c	  5350  #endif
; ..\EAS\BSW\Com\Com.c	  5351  
; ..\EAS\BSW\Com\Com.c	  5352      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1864:
	jeq	d15,#1,.L222
.L1865:

; ..\EAS\BSW\Com\Com.c	  5353      {
; ..\EAS\BSW\Com\Com.c	  5354          COM_DET_REPORT_ERROR(COMServiceId_TpRxIndication, COM_E_UNINIT);
	mov	d7,#2
.L1866:
	j	.L223
.L222:

; ..\EAS\BSW\Com\Com.c	  5355      }
; ..\EAS\BSW\Com\Com.c	  5356  #if(STD_ON == COM_RX_LONG_PDU_FUN)
; ..\EAS\BSW\Com\Com.c	  5357      else if((PduId >= COM_RXPDU_NUM)
; ..\EAS\BSW\Com\Com.c	  5358              || (FALSE == COM_CFG_RXPDU_IS_TP_PDU(PduId)))
; ..\EAS\BSW\Com\Com.c	  5359      {
; ..\EAS\BSW\Com\Com.c	  5360          COM_DET_REPORT_ERROR(COMServiceId_TpRxIndication, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  5361      }
; ..\EAS\BSW\Com\Com.c	  5362      else
; ..\EAS\BSW\Com\Com.c	  5363      {
; ..\EAS\BSW\Com\Com.c	  5364          if(COM_RXPDU_START_BUSY == Com_RxPduState[PduId])/*SWS_Com_00684 713*/
; ..\EAS\BSW\Com\Com.c	  5365          {
; ..\EAS\BSW\Com\Com.c	  5366  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  5367  			if((TRUE == COM_RXPDU_MONITOR_FLAG(PduId)) && (TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(PduId)))
; ..\EAS\BSW\Com\Com.c	  5368  			{
; ..\EAS\BSW\Com\Com.c	  5369  				COM_RXPDU_TIMEOUT(PduId) = COM_CFG_RXPDU_PERIOD_TIMEOUT(PduId);/*SWS_Com_00715*/
; ..\EAS\BSW\Com\Com.c	  5370  			}
; ..\EAS\BSW\Com\Com.c	  5371  #endif
; ..\EAS\BSW\Com\Com.c	  5372              /* not reset tempDynLength, as it will not affect anything*/
; ..\EAS\BSW\Com\Com.c	  5373              if(E_OK == Result)
; ..\EAS\BSW\Com\Com.c	  5374              {
; ..\EAS\BSW\Com\Com.c	  5375                  /* Ipdu received */
; ..\EAS\BSW\Com\Com.c	  5376  #if(COM_RXIPDU_CALLOUT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  5377                  if(NULL_PTR != COM_CFG_RXPDU_CALLOUT(PduId))
; ..\EAS\BSW\Com\Com.c	  5378                  {
; ..\EAS\BSW\Com\Com.c	  5379                      PduInfo.SduLength = COM_RXPDU_TEMP_LENGTH(PduId);
; ..\EAS\BSW\Com\Com.c	  5380                      PduInfo.SduDataPtr = (SduDataPtrType)COM_CFG_RXPDU_DATA_PTR_TEMP(PduId);
; ..\EAS\BSW\Com\Com.c	  5381                      Com_RxCalResult = COM_CFG_RXPDU_CALLOUT(PduId)(PduId, &PduInfo);
; ..\EAS\BSW\Com\Com.c	  5382                  }
; ..\EAS\BSW\Com\Com.c	  5383  
; ..\EAS\BSW\Com\Com.c	  5384                  if(FALSE == Com_RxCalResult)
; ..\EAS\BSW\Com\Com.c	  5385                  {
; ..\EAS\BSW\Com\Com.c	  5386                      Com_RxPduState[PduId] = COM_RXPDU_START_RXSTOP;
; ..\EAS\BSW\Com\Com.c	  5387  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  5388                      if(TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(PduId))
; ..\EAS\BSW\Com\Com.c	  5389                      {
; ..\EAS\BSW\Com\Com.c	  5390                          /*call invalid ack, or replace invalid value to signa l SWS_Com_00839*/
; ..\EAS\BSW\Com\Com.c	  5391                          Com_RxPduInvalid(PduId);
; ..\EAS\BSW\Com\Com.c	  5392  						Com_RxPduState[PduId] = COM_RXPDU_START_IDLE;
; ..\EAS\BSW\Com\Com.c	  5393                      }
; ..\EAS\BSW\Com\Com.c	  5394  #endif
; ..\EAS\BSW\Com\Com.c	  5395                  }
; ..\EAS\BSW\Com\Com.c	  5396                  else
; ..\EAS\BSW\Com\Com.c	  5397  #endif
; ..\EAS\BSW\Com\Com.c	  5398                  {
; ..\EAS\BSW\Com\Com.c	  5399                      SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  5400  					Com_RxPduState[PduId] = COM_RXPDU_START_RXOK;
; ..\EAS\BSW\Com\Com.c	  5401                      /* data and length has been saved in temp buffer*/
; ..\EAS\BSW\Com\Com.c	  5402                      if(TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(PduId))
; ..\EAS\BSW\Com\Com.c	  5403                      {
; ..\EAS\BSW\Com\Com.c	  5404                          Com_HandleRxPdu(PduId);/*SWS_Com_00300*/
; ..\EAS\BSW\Com\Com.c	  5405  						Com_RxPduState[PduId] = COM_RXPDU_START_IDLE;
; ..\EAS\BSW\Com\Com.c	  5406                      }
; ..\EAS\BSW\Com\Com.c	  5407                      SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  5408                  }
; ..\EAS\BSW\Com\Com.c	  5409              }
; ..\EAS\BSW\Com\Com.c	  5410              else
; ..\EAS\BSW\Com\Com.c	  5411              {
; ..\EAS\BSW\Com\Com.c	  5412                  /* can not reset dynRxLength, as old data may be read again*/
; ..\EAS\BSW\Com\Com.c	  5413                  Com_RxPduState[PduId] = COM_RXPDU_START_RXNOTOK;
; ..\EAS\BSW\Com\Com.c	  5414  #if (STD_ON == COM_RX_INVALID_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  5415                  if(TRUE == COM_CFG_RXPDU_IS_IMM_PROCESSING(PduId))
; ..\EAS\BSW\Com\Com.c	  5416                  {
; ..\EAS\BSW\Com\Com.c	  5417                      Com_RxPduInvalid(PduId);/*SWS_Com_00838*/
; ..\EAS\BSW\Com\Com.c	  5418  					Com_RxPduState[PduId] = COM_RXPDU_START_IDLE;
; ..\EAS\BSW\Com\Com.c	  5419                  }
; ..\EAS\BSW\Com\Com.c	  5420  #endif
; ..\EAS\BSW\Com\Com.c	  5421              }
; ..\EAS\BSW\Com\Com.c	  5422  
; ..\EAS\BSW\Com\Com.c	  5423  
; ..\EAS\BSW\Com\Com.c	  5424          }
; ..\EAS\BSW\Com\Com.c	  5425      }
; ..\EAS\BSW\Com\Com.c	  5426  #else
; ..\EAS\BSW\Com\Com.c	  5427      else
; ..\EAS\BSW\Com\Com.c	  5428      {
; ..\EAS\BSW\Com\Com.c	  5429          COM_DET_REPORT_ERROR(COMServiceId_TpRxIndication, COM_E_PARAM);
	mov	d7,#1
.L223:
	mov	d4,#50
.L1253:
	mov	d5,#0
.L1254:
	mov	d6,#30
	j	Det_ReportError
.L903:
	
__Com_TpRxIndication_function_end:
	.size	Com_TpRxIndication,__Com_TpRxIndication_function_end-Com_TpRxIndication
.L622:
	; End of function
	
	.sdecl	'.text.Com.Com_ClearIpduGroupVector',code,cluster('Com_ClearIpduGroupVector')
	.sect	'.text.Com.Com_ClearIpduGroupVector'
	.align	2
	
	.global	Com_ClearIpduGroupVector

; ..\EAS\BSW\Com\Com.c	  5430      }
; ..\EAS\BSW\Com\Com.c	  5431  #endif/*#if(STD_ON == COM_RX_LONG_PDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  5432  
; ..\EAS\BSW\Com\Com.c	  5433  }
; ..\EAS\BSW\Com\Com.c	  5434  
; ..\EAS\BSW\Com\Com.c	  5435  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5436  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5437  * Function Name: Com_ClearIpduGroupVector SWS_Com_00749
; ..\EAS\BSW\Com\Com.c	  5438  *
; ..\EAS\BSW\Com\Com.c	  5439  * Description:
; ..\EAS\BSW\Com\Com.c	  5440  *
; ..\EAS\BSW\Com\Com.c	  5441  * Inputs:        ipduGroupVector: ignal handle
; ..\EAS\BSW\Com\Com.c	  5442  *
; ..\EAS\BSW\Com\Com.c	  5443  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5444  *
; ..\EAS\BSW\Com\Com.c	  5445  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5446  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5447  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5448  #if (STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	  5449  FUNC(void, COM_CODE) Com_ClearIpduGroupVector
; Function Com_ClearIpduGroupVector
.L418:
Com_ClearIpduGroupVector:	.type	func

; ..\EAS\BSW\Com\Com.c	  5450  (
; ..\EAS\BSW\Com\Com.c	  5451      Com_IpduGroupVector ipduGroupVector
; ..\EAS\BSW\Com\Com.c	  5452  )
; ..\EAS\BSW\Com\Com.c	  5453  {
; ..\EAS\BSW\Com\Com.c	  5454  
; ..\EAS\BSW\Com\Com.c	  5455      uint16 Index = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  5456      uint16 PduGroupVectorSize = COM_PDU_GROUP_NUM - (uint16)1;
; ..\EAS\BSW\Com\Com.c	  5457  
; ..\EAS\BSW\Com\Com.c	  5458      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1594:
	jeq	d15,#1,.L224
.L1595:

; ..\EAS\BSW\Com\Com.c	  5459      {
; ..\EAS\BSW\Com\Com.c	  5460          COM_DET_REPORT_ERROR(COMServiceId_ClearIpduGroupVector, COM_E_UNINIT);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#28
	mov	d7,#2
	j	Det_ReportError
.L224:

; ..\EAS\BSW\Com\Com.c	  5461      }
; ..\EAS\BSW\Com\Com.c	  5462      else if(NULL_PTR == ipduGroupVector)
	mov.a	a15,#0
.L1596:
	jne.a	a15,a4,.L226
.L1597:

; ..\EAS\BSW\Com\Com.c	  5463      {
; ..\EAS\BSW\Com\Com.c	  5464          COM_DET_REPORT_ERROR(COMServiceId_ClearIpduGroupVector, COM_E_PARAM_POINTER);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#28
	mov	d7,#3
	j	Det_ReportError
.L226:

; ..\EAS\BSW\Com\Com.c	  5465      }
; ..\EAS\BSW\Com\Com.c	  5466      else
; ..\EAS\BSW\Com\Com.c	  5467      {
; ..\EAS\BSW\Com\Com.c	  5468          PduGroupVectorSize = PduGroupVectorSize >> COM_GET_BYTEINX_SHIFT_VALUE;
; ..\EAS\BSW\Com\Com.c	  5469          PduGroupVectorSize = PduGroupVectorSize + (uint16)1;
; ..\EAS\BSW\Com\Com.c	  5470  
; ..\EAS\BSW\Com\Com.c	  5471          SchM_Enter_Com_COM_EXCLUSIVE_AREA_7();
; ..\EAS\BSW\Com\Com.c	  5472          for(Index = (uint16)0; Index < PduGroupVectorSize; Index++)
	mov	d15,#0
.L1255:

; ..\EAS\BSW\Com\Com.c	  5473          {
; ..\EAS\BSW\Com\Com.c	  5474              ipduGroupVector[Index] = (uint8)0;
	mov	d0,d15
.L1257:
	j	.L228
.L229:
	addsc.a	a15,a4,d15,#0
.L1258:
	st.b	[a15],d0
.L1259:
	add	d15,#1
.L1256:
	extr.u	d15,d15,#0,#16
.L228:
	jlt.u	d15,#1,.L229
.L1598:

; ..\EAS\BSW\Com\Com.c	  5475          }
; ..\EAS\BSW\Com\Com.c	  5476          SchM_Exit_Com_COM_EXCLUSIVE_AREA_7();
; ..\EAS\BSW\Com\Com.c	  5477      }
; ..\EAS\BSW\Com\Com.c	  5478  }
	ret
.L823:
	
__Com_ClearIpduGroupVector_function_end:
	.size	Com_ClearIpduGroupVector,__Com_ClearIpduGroupVector_function_end-Com_ClearIpduGroupVector
.L532:
	; End of function
	
	.sdecl	'.text.Com.Com_SetIpduGroup',code,cluster('Com_SetIpduGroup')
	.sect	'.text.Com.Com_SetIpduGroup'
	.align	2
	
	.global	Com_SetIpduGroup

; ..\EAS\BSW\Com\Com.c	  5479  
; ..\EAS\BSW\Com\Com.c	  5480  
; ..\EAS\BSW\Com\Com.c	  5481  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5482  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5483  * Function Name: Com_SetIpduGroup SWS_Com_00750
; ..\EAS\BSW\Com\Com.c	  5484  *
; ..\EAS\BSW\Com\Com.c	  5485  * Description:
; ..\EAS\BSW\Com\Com.c	  5486  *
; ..\EAS\BSW\Com\Com.c	  5487  * Inputs:        ipduGroupVector
; ..\EAS\BSW\Com\Com.c	  5488  *                IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5489  *                bitval
; ..\EAS\BSW\Com\Com.c	  5490  *
; ..\EAS\BSW\Com\Com.c	  5491  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5492  *
; ..\EAS\BSW\Com\Com.c	  5493  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5494  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5495  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5496  FUNC(void, COM_CODE) Com_SetIpduGroup
; Function Com_SetIpduGroup
.L420:
Com_SetIpduGroup:	.type	func

; ..\EAS\BSW\Com\Com.c	  5497  (
; ..\EAS\BSW\Com\Com.c	  5498      Com_IpduGroupVector ipduGroupVector,
; ..\EAS\BSW\Com\Com.c	  5499      Com_IpduGroupIdType  ipduGroupId,
; ..\EAS\BSW\Com\Com.c	  5500      boolean bitval
; ..\EAS\BSW\Com\Com.c	  5501  )
; ..\EAS\BSW\Com\Com.c	  5502  {
; ..\EAS\BSW\Com\Com.c	  5503  
; ..\EAS\BSW\Com\Com.c	  5504      uint8 Position_Bit = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  5505      uint16 Position_Byte = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  5506      uint8 tempByte = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  5507  
; ..\EAS\BSW\Com\Com.c	  5508      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1603:
	jeq	d15,#1,.L230
.L1604:

; ..\EAS\BSW\Com\Com.c	  5509      {
; ..\EAS\BSW\Com\Com.c	  5510          COM_DET_REPORT_ERROR(COMServiceId_SetIpduGroup, COM_E_UNINIT);
	mov	d4,#50
.L1261:
	mov	d5,#0
.L1260:
	mov	d6,#29
	mov	d7,#2
	j	Det_ReportError
.L230:

; ..\EAS\BSW\Com\Com.c	  5511      }
; ..\EAS\BSW\Com\Com.c	  5512      else if(NULL_PTR == ipduGroupVector)
	mov.a	a15,#0
.L1605:
	jne.a	a15,a4,.L232
.L1606:

; ..\EAS\BSW\Com\Com.c	  5513      {
; ..\EAS\BSW\Com\Com.c	  5514          COM_DET_REPORT_ERROR(COMServiceId_SetIpduGroup, COM_E_PARAM_POINTER);
	mov	d4,#50
.L1263:
	mov	d5,#0
.L1262:
	mov	d6,#29
	mov	d7,#3
	j	Det_ReportError
.L232:

; ..\EAS\BSW\Com\Com.c	  5515      }
; ..\EAS\BSW\Com\Com.c	  5516      else if(ipduGroupId >= COM_PDU_GROUP_NUM)
	jlt.u	d4,#3,.L234
.L1607:

; ..\EAS\BSW\Com\Com.c	  5517      {
; ..\EAS\BSW\Com\Com.c	  5518          COM_DET_REPORT_ERROR(COMServiceId_SetIpduGroup, COM_E_PARAM);
	mov	d4,#50
.L1265:
	mov	d5,#0
.L1264:
	mov	d6,#29
	mov	d7,#1
	j	Det_ReportError
.L234:

; ..\EAS\BSW\Com\Com.c	  5519      }
; ..\EAS\BSW\Com\Com.c	  5520      else
; ..\EAS\BSW\Com\Com.c	  5521      {
; ..\EAS\BSW\Com\Com.c	  5522          /*SWS_Com_00623*/
; ..\EAS\BSW\Com\Com.c	  5523          SchM_Enter_Com_COM_EXCLUSIVE_AREA_7();
; ..\EAS\BSW\Com\Com.c	  5524          Position_Byte = (ipduGroupId >> COM_GET_BYTEINX_SHIFT_VALUE);
	sha	d15,d4,#-3
.L1266:

; ..\EAS\BSW\Com\Com.c	  5525          Position_Bit = (uint8)(ipduGroupId % COM_GET_BITPOS_RES_VALUE);
	and	d0,d4,#7
.L1268:

; ..\EAS\BSW\Com\Com.c	  5526  
; ..\EAS\BSW\Com\Com.c	  5527          tempByte = (uint8)(((uint8)1) << Position_Bit);
	mov	d1,#1
.L1608:
	sha	d1,d1,d0
.L1270:

; ..\EAS\BSW\Com\Com.c	  5528  
; ..\EAS\BSW\Com\Com.c	  5529          if(FALSE == bitval)
	jne	d5,#0,.L236
.L1609:

; ..\EAS\BSW\Com\Com.c	  5530          {
; ..\EAS\BSW\Com\Com.c	  5531              tempByte = (uint8)~tempByte;
	xor	d0,d1,#255
.L1269:

; ..\EAS\BSW\Com\Com.c	  5532              ipduGroupVector[Position_Byte] &= tempByte;
	addsc.a	a15,a4,d15,#0
	ld.bu	d15,[a15]
.L1267:
	and	d0,d15
.L1271:
	st.b	[a15],d0
.L1610:

; ..\EAS\BSW\Com\Com.c	  5533          }
; ..\EAS\BSW\Com\Com.c	  5534          else
; ..\EAS\BSW\Com\Com.c	  5535          {
; ..\EAS\BSW\Com\Com.c	  5536              ipduGroupVector[Position_Byte] |= tempByte;
; ..\EAS\BSW\Com\Com.c	  5537          }
; ..\EAS\BSW\Com\Com.c	  5538  
; ..\EAS\BSW\Com\Com.c	  5539          SchM_Exit_Com_COM_EXCLUSIVE_AREA_7();
; ..\EAS\BSW\Com\Com.c	  5540      }
; ..\EAS\BSW\Com\Com.c	  5541  
; ..\EAS\BSW\Com\Com.c	  5542  }
	ret
.L236:
	addsc.a	a15,a4,d15,#0
	ld.bu	d15,[a15]
.L1272:
	or	d15,d1
	st.b	[a15],d15
.L1611:
	ret
.L827:
	
__Com_SetIpduGroup_function_end:
	.size	Com_SetIpduGroup,__Com_SetIpduGroup_function_end-Com_SetIpduGroup
.L537:
	; End of function
	
	.sdecl	'.text.Com.Com_IsPduDMEnable_Internal',code,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.text.Com.Com_IsPduDMEnable_Internal'
	.align	2
	

; ..\EAS\BSW\Com\Com.c	  5543  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  5544  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5545  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5546  * Function Name: Com_IsPduDMEnable_Internal
; ..\EAS\BSW\Com\Com.c	  5547  *
; ..\EAS\BSW\Com\Com.c	  5548  * Description:   This interface is used to check if the PduDM can be enabled
; ..\EAS\BSW\Com\Com.c	  5549  *
; ..\EAS\BSW\Com\Com.c	  5550  * Inputs:        pduId
; ..\EAS\BSW\Com\Com.c	  5551  *
; ..\EAS\BSW\Com\Com.c	  5552  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	  5553  *
; ..\EAS\BSW\Com\Com.c	  5554  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5555  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5556  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5557  STATIC FUNC(boolean, COM_CODE) Com_IsPduDMEnable_Internal
; Function Com_IsPduDMEnable_Internal
.L422:
Com_IsPduDMEnable_Internal:	.type	func

; ..\EAS\BSW\Com\Com.c	  5558  (
; ..\EAS\BSW\Com\Com.c	  5559      PduIdType RxIpduId
; ..\EAS\BSW\Com\Com.c	  5560  )
; ..\EAS\BSW\Com\Com.c	  5561  {
; ..\EAS\BSW\Com\Com.c	  5562      boolean flag = FALSE;
	mov	d2,#0
.L1273:

; ..\EAS\BSW\Com\Com.c	  5563      Com_IpduGroupIdType grpIdx = (Com_IpduGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  5564      PduIdType tmpNum = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5565      P2CONST(PduIdType, AUTOMATIC, COM_CONST) tmpPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  5566      tmpNum = COM_CFG_RXPDU_IN_PDUGRP_NUM(RxIpduId);
	sha	d15,d4,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]7
.L1274:

; ..\EAS\BSW\Com\Com.c	  5567      tmpPtr = COM_CFG_RXPDU_IN_PDUGRP_PTR(RxIpduId);
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L1275:

; ..\EAS\BSW\Com\Com.c	  5568      /* search all pdugroup which contains this pdu, if any one is enable, retuan TRUE(Enable)*/
; ..\EAS\BSW\Com\Com.c	  5569      for(grpIdx =  (Com_IpduGroupIdType)0; grpIdx < tmpNum; grpIdx++)
	mov	d15,d2
.L1276:
	j	.L238
.L239:

; ..\EAS\BSW\Com\Com.c	  5570      {
; ..\EAS\BSW\Com\Com.c	  5571          if(TRUE == Com_IpduGroupDMEnableFlag[tmpPtr[grpIdx]])
	addsc.a	a2,a15,d15,#0
	ld.bu	d1,[a2]
.L2249:
	movh.a	a2,#@his(Com_IpduGroupDMEnableFlag)
	lea	a2,[a2]@los(Com_IpduGroupDMEnableFlag)
.L2250:
	addsc.a	a2,a2,d1,#0
	ld.bu	d1,[a2]
.L2251:
	jne	d1,#1,.L240
.L2252:

; ..\EAS\BSW\Com\Com.c	  5572          {
; ..\EAS\BSW\Com\Com.c	  5573              flag = TRUE;
	mov	d2,#1
.L2253:

; ..\EAS\BSW\Com\Com.c	  5574              break;
; ..\EAS\BSW\Com\Com.c	  5575          }
; ..\EAS\BSW\Com\Com.c	  5576      }
; ..\EAS\BSW\Com\Com.c	  5577      return flag;
; ..\EAS\BSW\Com\Com.c	  5578  }
	ret
.L240:
	add	d15,#1
.L1277:
	extr.u	d15,d15,#0,#16
.L238:
	jlt.u	d15,d0,.L239
.L2254:
	ret
.L1010:
	
__Com_IsPduDMEnable_Internal_function_end:
	.size	Com_IsPduDMEnable_Internal,__Com_IsPduDMEnable_Internal_function_end-Com_IsPduDMEnable_Internal
.L757:
	; End of function
	
	.sdecl	'.text.Com.Com_ReceptionDMControl',code,cluster('Com_ReceptionDMControl')
	.sect	'.text.Com.Com_ReceptionDMControl'
	.align	2
	
	.global	Com_ReceptionDMControl

; ..\EAS\BSW\Com\Com.c	  5579  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5580  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5581  * Function Name: Com_ReceptionDMControl SWS_Com_752
; ..\EAS\BSW\Com\Com.c	  5582  *
; ..\EAS\BSW\Com\Com.c	  5583  * Description:   Used to start or stop rx time out monitor of group's rxPdu
; ..\EAS\BSW\Com\Com.c	  5584  *
; ..\EAS\BSW\Com\Com.c	  5585  * Inputs:        ipduGroupVector
; ..\EAS\BSW\Com\Com.c	  5586  *
; ..\EAS\BSW\Com\Com.c	  5587  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5588  *
; ..\EAS\BSW\Com\Com.c	  5589  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5590  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5591  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5592  FUNC(void, COM_CODE) Com_ReceptionDMControl
; Function Com_ReceptionDMControl
.L424:
Com_ReceptionDMControl:	.type	func

; ..\EAS\BSW\Com\Com.c	  5593  (
; ..\EAS\BSW\Com\Com.c	  5594      Com_IpduGroupVector ipduGroupVector
; ..\EAS\BSW\Com\Com.c	  5595  )
; ..\EAS\BSW\Com\Com.c	  5596  {
; ..\EAS\BSW\Com\Com.c	  5597  
; ..\EAS\BSW\Com\Com.c	  5598      Com_IpduGroupIdType GroupIDIndex = (Com_IpduGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  5599      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5600      uint8 Position_Bit = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  5601      uint16 Position_Byte = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  5602      uint8 tempByte = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  5603      boolean tmpPduDMEnableFlag = TRUE;
; ..\EAS\BSW\Com\Com.c	  5604  
; ..\EAS\BSW\Com\Com.c	  5605      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1564:
	jeq	d15,#1,.L243
.L1565:

; ..\EAS\BSW\Com\Com.c	  5606      {
; ..\EAS\BSW\Com\Com.c	  5607          COM_DET_REPORT_ERROR(COMServiceId_ReceptionDMControl, COM_E_UNINIT);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#6
	mov	d7,#2
	j	Det_ReportError
.L243:

; ..\EAS\BSW\Com\Com.c	  5608      }
; ..\EAS\BSW\Com\Com.c	  5609      else if(NULL_PTR == ipduGroupVector)
	mov.a	a15,#0
.L1566:
	jne.a	a15,a4,.L245
.L1567:

; ..\EAS\BSW\Com\Com.c	  5610      {
; ..\EAS\BSW\Com\Com.c	  5611          COM_DET_REPORT_ERROR(COMServiceId_ReceptionDMControl, COM_E_PARAM_POINTER);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#6
	mov	d7,#3
	j	Det_ReportError
.L245:

; ..\EAS\BSW\Com\Com.c	  5612      }
; ..\EAS\BSW\Com\Com.c	  5613      else
; ..\EAS\BSW\Com\Com.c	  5614      {
; ..\EAS\BSW\Com\Com.c	  5615          SchM_Enter_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5616          for(GroupIDIndex = (Com_IpduGroupIdType)0; GroupIDIndex < COM_PDU_GROUP_NUM; GroupIDIndex++)
	mov	d15,#0
.L1278:

; ..\EAS\BSW\Com\Com.c	  5617          {
; ..\EAS\BSW\Com\Com.c	  5618              Position_Byte = (GroupIDIndex >> COM_GET_BYTEINX_SHIFT_VALUE);
; ..\EAS\BSW\Com\Com.c	  5619              Position_Bit = (uint8)(GroupIDIndex % COM_GET_BITPOS_RES_VALUE);
; ..\EAS\BSW\Com\Com.c	  5620              tempByte = (uint8)(((uint8)1) << Position_Bit);
	mov	d0,#1
.L1568:
	j	.L247
.L248:
	sha	d1,d15,#-3
.L1279:
	and	d2,d15,#7
.L1281:
	sha	d2,d0,d2
.L1282:

; ..\EAS\BSW\Com\Com.c	  5621  
; ..\EAS\BSW\Com\Com.c	  5622              if((uint8)0 != (uint8)(ipduGroupVector[Position_Byte] & tempByte))
; ..\EAS\BSW\Com\Com.c	  5623              {
; ..\EAS\BSW\Com\Com.c	  5624                  Com_IpduGroupDMEnableFlag[GroupIDIndex] = TRUE;
	movh.a	a15,#@his(Com_IpduGroupDMEnableFlag)
	lea	a15,[a15]@los(Com_IpduGroupDMEnableFlag)
.L1569:
	addsc.a	a15,a15,d15,#0
.L1570:
	addsc.a	a2,a4,d1,#0
	ld.bu	d1,[a2]
.L1280:
	and	d2,d1
.L1283:
	ne	d1,d2,#0
.L1571:
	st.b	[a15],d1
.L1572:
	add	d15,#1
.L247:
	jlt.u	d15,#3,.L248
.L1573:

; ..\EAS\BSW\Com\Com.c	  5625              }
; ..\EAS\BSW\Com\Com.c	  5626              else
; ..\EAS\BSW\Com\Com.c	  5627              {
; ..\EAS\BSW\Com\Com.c	  5628                  Com_IpduGroupDMEnableFlag[GroupIDIndex] = FALSE;
; ..\EAS\BSW\Com\Com.c	  5629              }
; ..\EAS\BSW\Com\Com.c	  5630          }
; ..\EAS\BSW\Com\Com.c	  5631          /*SWS_Com_00534 ignor txPdu of this group*/
; ..\EAS\BSW\Com\Com.c	  5632          for(RxIpduId = (PduIdType)0; RxIpduId < COM_RXPDU_MAX_NUM; RxIpduId++)
	mov	d8,#0
.L1284:

; ..\EAS\BSW\Com\Com.c	  5633          {
; ..\EAS\BSW\Com\Com.c	  5634              if((PduIdType)0 != COM_CFG_RXPDU_IN_PDUGRP_NUM(RxIpduId))
; ..\EAS\BSW\Com\Com.c	  5635              {
; ..\EAS\BSW\Com\Com.c	  5636                  if(TRUE == COM_CFG_RXPDU_MONITOR_FLAG(RxIpduId))
; ..\EAS\BSW\Com\Com.c	  5637                  {
; ..\EAS\BSW\Com\Com.c	  5638                      /* when pdu stop, time out monitor must be disable*/
; ..\EAS\BSW\Com\Com.c	  5639                      if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
; ..\EAS\BSW\Com\Com.c	  5640                      {
; ..\EAS\BSW\Com\Com.c	  5641                          tmpPduDMEnableFlag = Com_IsPduDMEnable_Internal(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  5642                          /*SWS_Com_00224 486 225 616 617 618 process only when state change*/
; ..\EAS\BSW\Com\Com.c	  5643                          if(COM_RXPDU_MONITOR_FLAG(RxIpduId) != tmpPduDMEnableFlag)
; ..\EAS\BSW\Com\Com.c	  5644                          {
; ..\EAS\BSW\Com\Com.c	  5645                              if(TRUE == tmpPduDMEnableFlag)
; ..\EAS\BSW\Com\Com.c	  5646                              {
; ..\EAS\BSW\Com\Com.c	  5647                                  COM_RXPDU_MONITOR_FLAG(RxIpduId) = TRUE;
; ..\EAS\BSW\Com\Com.c	  5648                              }
; ..\EAS\BSW\Com\Com.c	  5649                              else
; ..\EAS\BSW\Com\Com.c	  5650                              {
; ..\EAS\BSW\Com\Com.c	  5651                                  COM_RXPDU_MONITOR_FLAG(RxIpduId) = FALSE;
; ..\EAS\BSW\Com\Com.c	  5652                              }
; ..\EAS\BSW\Com\Com.c	  5653                              COM_RXPDU_TIMEOUT(RxIpduId) = COM_TIMER_STOP_VAL;
	mov.u	d9,#65535
.L1574:
	mov	d10,#58
.L1575:
	j	.L249
.L250:
	sha	d0,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]7
.L1576:
	jeq	d15,#0,.L251
.L1577:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]12
.L1578:
	jne	d15,#1,.L252
.L1579:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1580:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1581:
	jeq	d15,#0,.L253
.L1582:
	mov	d4,d8
.L1285:
	call	Com_IsPduDMEnable_Internal
.L1286:
	mul	d0,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d0,#0
	ld.bu	d15,[a15]2
.L1583:
	jeq	d15,d2,.L254
.L1584:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d0,#0
.L1585:
	ne	d15,d2,#0
.L1586:
	st.b	[a15]2,d15
.L1587:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d0,#0
.L1588:
	st.h	[a15]4,d9
.L254:
.L253:
.L252:
.L251:
	add	d8,#1
.L249:
	jlt.u	d8,d10,.L250
.L1589:

; ..\EAS\BSW\Com\Com.c	  5654  #if (STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  5655                              Com_ResetUpdateRxToTimer(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  5656  #endif
; ..\EAS\BSW\Com\Com.c	  5657                          }
; ..\EAS\BSW\Com\Com.c	  5658  
; ..\EAS\BSW\Com\Com.c	  5659                      }
; ..\EAS\BSW\Com\Com.c	  5660                  }
; ..\EAS\BSW\Com\Com.c	  5661  
; ..\EAS\BSW\Com\Com.c	  5662              }
; ..\EAS\BSW\Com\Com.c	  5663          }
; ..\EAS\BSW\Com\Com.c	  5664          SchM_Exit_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5665      }
; ..\EAS\BSW\Com\Com.c	  5666  
; ..\EAS\BSW\Com\Com.c	  5667  }
	ret
.L815:
	
__Com_ReceptionDMControl_function_end:
	.size	Com_ReceptionDMControl,__Com_ReceptionDMControl_function_end-Com_ReceptionDMControl
.L527:
	; End of function
	
	.sdecl	'.text.Com.Com_IpduGroupControl',code,cluster('Com_IpduGroupControl')
	.sect	'.text.Com.Com_IpduGroupControl'
	.align	2
	
	.global	Com_IpduGroupControl

; ..\EAS\BSW\Com\Com.c	  5668  #endif
; ..\EAS\BSW\Com\Com.c	  5669  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5670  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5671  * Function Name: Com_IpduGroupControl SWS_Com_00751 792
; ..\EAS\BSW\Com\Com.c	  5672  *
; ..\EAS\BSW\Com\Com.c	  5673  * Description:
; ..\EAS\BSW\Com\Com.c	  5674  *
; ..\EAS\BSW\Com\Com.c	  5675  * Inputs:        ipduGroupVector
; ..\EAS\BSW\Com\Com.c	  5676  *                Initialize
; ..\EAS\BSW\Com\Com.c	  5677  *
; ..\EAS\BSW\Com\Com.c	  5678  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5679  *
; ..\EAS\BSW\Com\Com.c	  5680  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5681  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5682  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5683  FUNC(void, COM_CODE) Com_IpduGroupControl
; Function Com_IpduGroupControl
.L426:
Com_IpduGroupControl:	.type	func
	mov.aa	a12,a4
.L1288:
	mov	d9,d4
.L1289:

; ..\EAS\BSW\Com\Com.c	  5684  (
; ..\EAS\BSW\Com\Com.c	  5685      Com_IpduGroupVector ipduGroupVector,
; ..\EAS\BSW\Com\Com.c	  5686      boolean Initialize
; ..\EAS\BSW\Com\Com.c	  5687  )
; ..\EAS\BSW\Com\Com.c	  5688  {
; ..\EAS\BSW\Com\Com.c	  5689  
; ..\EAS\BSW\Com\Com.c	  5690      Com_IpduGroupIdType GroupIDIndex = (Com_IpduGroupIdType)0;
; ..\EAS\BSW\Com\Com.c	  5691      uint8 Position_Bit = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  5692      uint16 Position_Byte = (uint16)0;
; ..\EAS\BSW\Com\Com.c	  5693      PduIdType pduIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5694      PduIdType pduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5695      uint8 tempByte = (uint8)0;
; ..\EAS\BSW\Com\Com.c	  5696  
; ..\EAS\BSW\Com\Com.c	  5697      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1544:
	jeq	d15,#1,.L255
.L1545:

; ..\EAS\BSW\Com\Com.c	  5698      {
; ..\EAS\BSW\Com\Com.c	  5699          COM_DET_REPORT_ERROR(COMServiceId_IpduGroupControl, COM_E_UNINIT);
	mov	d4,#50
.L1287:
	mov	d5,#0
	mov	d6,#3
	mov	d7,#2
	j	Det_ReportError
.L255:

; ..\EAS\BSW\Com\Com.c	  5700      }
; ..\EAS\BSW\Com\Com.c	  5701      else if(NULL_PTR == ipduGroupVector)
	mov.a	a15,#0
.L1546:
	jne.a	a15,a12,.L257
.L1547:

; ..\EAS\BSW\Com\Com.c	  5702      {
; ..\EAS\BSW\Com\Com.c	  5703          COM_DET_REPORT_ERROR(COMServiceId_IpduGroupControl, COM_E_PARAM_POINTER);
	mov	d4,#50
.L1291:
	mov	d5,#0
	mov	d6,#3
	mov	d7,d6
	j	Det_ReportError
.L257:

; ..\EAS\BSW\Com\Com.c	  5704      }
; ..\EAS\BSW\Com\Com.c	  5705      else
; ..\EAS\BSW\Com\Com.c	  5706      {
; ..\EAS\BSW\Com\Com.c	  5707          SchM_Enter_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5708          /*
; ..\EAS\BSW\Com\Com.c	  5709           * first process stop -> start group 
; ..\EAS\BSW\Com\Com.c	  5710           * 2nd  process start -> stop group 
; ..\EAS\BSW\Com\Com.c	  5711           * this order make sure that if txpdu keep start in this call cycle,  nothing will affect this txpdu 
; ..\EAS\BSW\Com\Com.c	  5712           */
; ..\EAS\BSW\Com\Com.c	  5713          /* if group state not change,  do nothing */
; ..\EAS\BSW\Com\Com.c	  5714  
; ..\EAS\BSW\Com\Com.c	  5715          for(GroupIDIndex = (Com_IpduGroupIdType)0; GroupIDIndex < COM_PDU_GROUP_NUM; GroupIDIndex++)
	mov	d8,#0
.L1292:

; ..\EAS\BSW\Com\Com.c	  5716          {
; ..\EAS\BSW\Com\Com.c	  5717              Position_Byte = (GroupIDIndex >> COM_GET_BYTEINX_SHIFT_VALUE);
; ..\EAS\BSW\Com\Com.c	  5718              Position_Bit = (uint8)(GroupIDIndex % COM_GET_BITPOS_RES_VALUE);
; ..\EAS\BSW\Com\Com.c	  5719              tempByte = (uint8)(((uint8)1) << Position_Bit);
	mov	d10,#1
.L1548:
	j	.L259
.L260:
	sha	d0,d8,#-3
.L1293:
	and	d15,d8,#7
.L1295:
	sha	d1,d10,d15
.L1297:

; ..\EAS\BSW\Com\Com.c	  5720  
; ..\EAS\BSW\Com\Com.c	  5721              /* if group state switch from 0 to 1,  call Com_IpduGroupStart */
; ..\EAS\BSW\Com\Com.c	  5722              if(((uint8)0 != (uint8)(ipduGroupVector[Position_Byte] & tempByte)) && (FALSE == Com_IpduGroupStartFlag[GroupIDIndex]))
	addsc.a	a15,a12,d0,#0
	ld.bu	d0,[a15]
.L1294:
	and	d0,d1
.L1549:
	jeq	d0,#0,.L261
.L1550:
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L1551:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1296:
	jne	d15,#0,.L262
.L1552:

; ..\EAS\BSW\Com\Com.c	  5723              {
; ..\EAS\BSW\Com\Com.c	  5724                  Com_IpduGroupStart_Internal(GroupIDIndex, Initialize);
	mov	e4,d9,d8
	call	Com_IpduGroupStart_Internal
.L262:
.L261:
	add	d8,#1
.L259:
	jlt.u	d8,#3,.L260
.L1553:

; ..\EAS\BSW\Com\Com.c	  5725              }
; ..\EAS\BSW\Com\Com.c	  5726  
; ..\EAS\BSW\Com\Com.c	  5727              
; ..\EAS\BSW\Com\Com.c	  5728          }
; ..\EAS\BSW\Com\Com.c	  5729  
; ..\EAS\BSW\Com\Com.c	  5730          for(GroupIDIndex = (Com_IpduGroupIdType)0; GroupIDIndex < COM_PDU_GROUP_NUM; GroupIDIndex++)
	mov	d8,#0
.L1554:

; ..\EAS\BSW\Com\Com.c	  5731          {
; ..\EAS\BSW\Com\Com.c	  5732              Position_Byte = (GroupIDIndex >> COM_GET_BYTEINX_SHIFT_VALUE);
; ..\EAS\BSW\Com\Com.c	  5733              Position_Bit = (uint8)(GroupIDIndex % COM_GET_BITPOS_RES_VALUE);
; ..\EAS\BSW\Com\Com.c	  5734              tempByte = (uint8)(((uint8)1) << Position_Bit);
	mov	d9,#1
.L1290:
	j	.L263
.L264:
	sha	d0,d8,#-3
.L1298:
	and	d15,d8,#7
.L1300:
	sha	d15,d9,d15
.L1301:

; ..\EAS\BSW\Com\Com.c	  5735  
; ..\EAS\BSW\Com\Com.c	  5736              /* if group state switch from 1 to 0,  call Com_IpduGroupStop */
; ..\EAS\BSW\Com\Com.c	  5737              if(((uint8)0 == (uint8)(ipduGroupVector[Position_Byte] & tempByte)) && (TRUE == Com_IpduGroupStartFlag[GroupIDIndex]))
	addsc.a	a15,a12,d0,#0
	ld.bu	d0,[a15]
.L1299:
	and	d0,d15
.L1555:
	jne	d0,#0,.L265
.L1556:
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L1557:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1302:
	jne	d15,#1,.L266
.L1558:

; ..\EAS\BSW\Com\Com.c	  5738              {
; ..\EAS\BSW\Com\Com.c	  5739                  Com_IpduGroupStop_Internal(GroupIDIndex);
	mov	d4,d8
.L1303:
	call	Com_IpduGroupStop_Internal
.L266:
.L265:
	add	d8,#1
.L263:
	jlt.u	d8,#3,.L264
.L1559:

; ..\EAS\BSW\Com\Com.c	  5740              }
; ..\EAS\BSW\Com\Com.c	  5741             
; ..\EAS\BSW\Com\Com.c	  5742          }
; ..\EAS\BSW\Com\Com.c	  5743  
; ..\EAS\BSW\Com\Com.c	  5744          SchM_Exit_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5745      }
; ..\EAS\BSW\Com\Com.c	  5746  
; ..\EAS\BSW\Com\Com.c	  5747  }
	ret
.L807:
	
__Com_IpduGroupControl_function_end:
	.size	Com_IpduGroupControl,__Com_IpduGroupControl_function_end-Com_IpduGroupControl
.L522:
	; End of function
	
	.sdecl	'.text.Com.Com_IpduGroupStart',code,cluster('Com_IpduGroupStart')
	.sect	'.text.Com.Com_IpduGroupStart'
	.align	2
	
	.global	Com_IpduGroupStart

; ..\EAS\BSW\Com\Com.c	  5748  #endif/*#if (STD_ON == COM_IPDU_GROUP_FUN)*/
; ..\EAS\BSW\Com\Com.c	  5749  
; ..\EAS\BSW\Com\Com.c	  5750  
; ..\EAS\BSW\Com\Com.c	  5751  
; ..\EAS\BSW\Com\Com.c	  5752  
; ..\EAS\BSW\Com\Com.c	  5753  
; ..\EAS\BSW\Com\Com.c	  5754  #if (STD_ON == COM_IPDU_GROUP_FUN)
; ..\EAS\BSW\Com\Com.c	  5755  #if (STD_ON == COM_GROUP_API_R3_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  5756  
; ..\EAS\BSW\Com\Com.c	  5757  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5758  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5759  * Function Name: Com_IpduGroupStart SWS_Com_00751 792
; ..\EAS\BSW\Com\Com.c	  5760  *
; ..\EAS\BSW\Com\Com.c	  5761  * Description:   start target group and keep other group unchange
; ..\EAS\BSW\Com\Com.c	  5762  *
; ..\EAS\BSW\Com\Com.c	  5763  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5764  *                Initialize
; ..\EAS\BSW\Com\Com.c	  5765  *
; ..\EAS\BSW\Com\Com.c	  5766  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5767  *
; ..\EAS\BSW\Com\Com.c	  5768  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5769  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5770  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5771  FUNC(void, COM_CODE) Com_IpduGroupStart
; Function Com_IpduGroupStart
.L428:
Com_IpduGroupStart:	.type	func

; ..\EAS\BSW\Com\Com.c	  5772  (
; ..\EAS\BSW\Com\Com.c	  5773      Com_IpduGroupIdType IpduGroupId,
; ..\EAS\BSW\Com\Com.c	  5774      boolean Initialize
; ..\EAS\BSW\Com\Com.c	  5775  )
; ..\EAS\BSW\Com\Com.c	  5776  {
; ..\EAS\BSW\Com\Com.c	  5777      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1625:
	jeq	d15,#1,.L267
.L1626:

; ..\EAS\BSW\Com\Com.c	  5778      {
; ..\EAS\BSW\Com\Com.c	  5779          COM_DET_REPORT_ERROR(COMServiceId_StartGroup, COM_E_UNINIT);
	mov	d4,#50
.L1305:
	mov	d5,#0
.L1304:
	mov	d6,#81
	mov	d7,#2
	j	Det_ReportError
.L267:

; ..\EAS\BSW\Com\Com.c	  5780      }
; ..\EAS\BSW\Com\Com.c	  5781      else if(IpduGroupId >= COM_PDU_GROUP_NUM)
	jlt.u	d4,#3,.L269
.L1627:

; ..\EAS\BSW\Com\Com.c	  5782      {
; ..\EAS\BSW\Com\Com.c	  5783          COM_DET_REPORT_ERROR(COMServiceId_StartGroup, COM_E_PARAM);
	mov	d4,#50
.L1307:
	mov	d5,#0
.L1306:
	mov	d6,#81
	mov	d7,#1
	j	Det_ReportError
.L269:

; ..\EAS\BSW\Com\Com.c	  5784      }
; ..\EAS\BSW\Com\Com.c	  5785      else
; ..\EAS\BSW\Com\Com.c	  5786      {
; ..\EAS\BSW\Com\Com.c	  5787          SchM_Enter_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5788  
; ..\EAS\BSW\Com\Com.c	  5789          Com_IpduGroupStart_Internal(IpduGroupId, Initialize);
	j	Com_IpduGroupStart_Internal
.L837:
	
__Com_IpduGroupStart_function_end:
	.size	Com_IpduGroupStart,__Com_IpduGroupStart_function_end-Com_IpduGroupStart
.L547:
	; End of function
	
	.sdecl	'.text.Com.Com_IpduGroupStop',code,cluster('Com_IpduGroupStop')
	.sect	'.text.Com.Com_IpduGroupStop'
	.align	2
	
	.global	Com_IpduGroupStop

; ..\EAS\BSW\Com\Com.c	  5790          
; ..\EAS\BSW\Com\Com.c	  5791          SchM_Exit_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5792  
; ..\EAS\BSW\Com\Com.c	  5793      }
; ..\EAS\BSW\Com\Com.c	  5794  
; ..\EAS\BSW\Com\Com.c	  5795  }
; ..\EAS\BSW\Com\Com.c	  5796  
; ..\EAS\BSW\Com\Com.c	  5797  
; ..\EAS\BSW\Com\Com.c	  5798  
; ..\EAS\BSW\Com\Com.c	  5799  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5800  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5801  * Function Name: Com_IpduGroupStop SWS_Com_00751 792
; ..\EAS\BSW\Com\Com.c	  5802  *
; ..\EAS\BSW\Com\Com.c	  5803  * Description:   stop target group and keep other group unchange
; ..\EAS\BSW\Com\Com.c	  5804  *
; ..\EAS\BSW\Com\Com.c	  5805  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5806  *
; ..\EAS\BSW\Com\Com.c	  5807  *
; ..\EAS\BSW\Com\Com.c	  5808  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5809  *
; ..\EAS\BSW\Com\Com.c	  5810  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5811  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5812  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5813  FUNC(void, COM_CODE) Com_IpduGroupStop
; Function Com_IpduGroupStop
.L430:
Com_IpduGroupStop:	.type	func

; ..\EAS\BSW\Com\Com.c	  5814  (
; ..\EAS\BSW\Com\Com.c	  5815      Com_IpduGroupIdType IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5816  )
; ..\EAS\BSW\Com\Com.c	  5817  {
; ..\EAS\BSW\Com\Com.c	  5818      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1632:
	jeq	d15,#1,.L271
.L1633:

; ..\EAS\BSW\Com\Com.c	  5819      {
; ..\EAS\BSW\Com\Com.c	  5820          COM_DET_REPORT_ERROR(COMServiceId_StopGroup, COM_E_UNINIT);
	mov	d4,#50
.L1308:
	mov	d5,#0
	mov	d6,#82
	mov	d7,#2
	j	Det_ReportError
.L271:

; ..\EAS\BSW\Com\Com.c	  5821      }
; ..\EAS\BSW\Com\Com.c	  5822      else if(IpduGroupId >= COM_PDU_GROUP_NUM)
	jlt.u	d4,#3,.L273
.L1634:

; ..\EAS\BSW\Com\Com.c	  5823      {
; ..\EAS\BSW\Com\Com.c	  5824          COM_DET_REPORT_ERROR(COMServiceId_StopGroup, COM_E_PARAM);
	mov	d4,#50
.L1309:
	mov	d5,#0
	mov	d6,#82
	mov	d7,#1
	j	Det_ReportError
.L273:

; ..\EAS\BSW\Com\Com.c	  5825      }
; ..\EAS\BSW\Com\Com.c	  5826      else
; ..\EAS\BSW\Com\Com.c	  5827      {
; ..\EAS\BSW\Com\Com.c	  5828          SchM_Enter_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5829  
; ..\EAS\BSW\Com\Com.c	  5830          Com_IpduGroupStop_Internal(IpduGroupId);
	j	Com_IpduGroupStop_Internal
.L840:
	
__Com_IpduGroupStop_function_end:
	.size	Com_IpduGroupStop,__Com_IpduGroupStop_function_end-Com_IpduGroupStop
.L552:
	; End of function
	
	.sdecl	'.text.Com.Com_GetIpduGroupState',code,cluster('Com_GetIpduGroupState')
	.sect	'.text.Com.Com_GetIpduGroupState'
	.align	2
	
	.global	Com_GetIpduGroupState

; ..\EAS\BSW\Com\Com.c	  5831  
; ..\EAS\BSW\Com\Com.c	  5832          SchM_Exit_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5833  
; ..\EAS\BSW\Com\Com.c	  5834      }
; ..\EAS\BSW\Com\Com.c	  5835  
; ..\EAS\BSW\Com\Com.c	  5836  }
; ..\EAS\BSW\Com\Com.c	  5837  
; ..\EAS\BSW\Com\Com.c	  5838  
; ..\EAS\BSW\Com\Com.c	  5839  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5840  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5841  * Function Name: Com_GetIpduGroupState 
; ..\EAS\BSW\Com\Com.c	  5842  *
; ..\EAS\BSW\Com\Com.c	  5843  * Description:   return start or stop state of IpduGroup
; ..\EAS\BSW\Com\Com.c	  5844  *
; ..\EAS\BSW\Com\Com.c	  5845  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5846  *
; ..\EAS\BSW\Com\Com.c	  5847  *
; ..\EAS\BSW\Com\Com.c	  5848  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	  5849  *
; ..\EAS\BSW\Com\Com.c	  5850  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5851  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5852  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5853  FUNC(boolean, COM_CODE) Com_GetIpduGroupState
; Function Com_GetIpduGroupState
.L432:
Com_GetIpduGroupState:	.type	func

; ..\EAS\BSW\Com\Com.c	  5854  (
; ..\EAS\BSW\Com\Com.c	  5855      Com_IpduGroupIdType IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5856  )
; ..\EAS\BSW\Com\Com.c	  5857  {
; ..\EAS\BSW\Com\Com.c	  5858      boolean flag = FALSE;
	mov	d8,#0
.L1311:

; ..\EAS\BSW\Com\Com.c	  5859  
; ..\EAS\BSW\Com\Com.c	  5860  
; ..\EAS\BSW\Com\Com.c	  5861      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1616:
	jeq	d15,#1,.L275
.L1617:

; ..\EAS\BSW\Com\Com.c	  5862      {
; ..\EAS\BSW\Com\Com.c	  5863          COM_DET_REPORT_ERROR(COMServiceId_GetIpduGroupState, COM_E_UNINIT);
	mov	d4,#50
.L1310:
	mov	d5,d8
.L1312:
	mov	d6,#240
	mov	d7,#2
	call	Det_ReportError
.L1313:
	j	.L276
.L275:

; ..\EAS\BSW\Com\Com.c	  5864      }
; ..\EAS\BSW\Com\Com.c	  5865      else if(IpduGroupId >= COM_PDU_GROUP_NUM)
	jlt.u	d4,#3,.L277
.L1618:

; ..\EAS\BSW\Com\Com.c	  5866      {
; ..\EAS\BSW\Com\Com.c	  5867          COM_DET_REPORT_ERROR(COMServiceId_GetIpduGroupState, COM_E_PARAM);
	mov	d4,#50
.L1314:
	mov	d5,#0
	mov	d6,#240
	mov	d7,#1
	call	Det_ReportError
.L1619:
	j	.L278
.L277:

; ..\EAS\BSW\Com\Com.c	  5868      }
; ..\EAS\BSW\Com\Com.c	  5869      else
; ..\EAS\BSW\Com\Com.c	  5870      {
; ..\EAS\BSW\Com\Com.c	  5871          flag = Com_IpduGroupStartFlag[IpduGroupId];
	movh.a	a15,#@his(Com_IpduGroupStartFlag)
	lea	a15,[a15]@los(Com_IpduGroupStartFlag)
.L1620:
	addsc.a	a15,a15,d4,#0
	ld.bu	d8,[a15]
.L278:
.L276:

; ..\EAS\BSW\Com\Com.c	  5872      }
; ..\EAS\BSW\Com\Com.c	  5873  
; ..\EAS\BSW\Com\Com.c	  5874      return flag;
	mov	d2,d8
.L1315:

; ..\EAS\BSW\Com\Com.c	  5875  }
	ret
.L834:
	
__Com_GetIpduGroupState_function_end:
	.size	Com_GetIpduGroupState,__Com_GetIpduGroupState_function_end-Com_GetIpduGroupState
.L542:
	; End of function
	
	.sdecl	'.text.Com.Com_EnableReceptionDM',code,cluster('Com_EnableReceptionDM')
	.sect	'.text.Com.Com_EnableReceptionDM'
	.align	2
	
	.global	Com_EnableReceptionDM

; ..\EAS\BSW\Com\Com.c	  5876  
; ..\EAS\BSW\Com\Com.c	  5877  
; ..\EAS\BSW\Com\Com.c	  5878  
; ..\EAS\BSW\Com\Com.c	  5879  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5880  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5881  * Function Name: Com_EnableReceptionDM
; ..\EAS\BSW\Com\Com.c	  5882  *
; ..\EAS\BSW\Com\Com.c	  5883  * Description:   Used to start rx time out monitor of group's rxPdu
; ..\EAS\BSW\Com\Com.c	  5884  *
; ..\EAS\BSW\Com\Com.c	  5885  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5886  *
; ..\EAS\BSW\Com\Com.c	  5887  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5888  *
; ..\EAS\BSW\Com\Com.c	  5889  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5890  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5891  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5892  #if(STD_ON == COM_RX_TIMEOUT_MONITOR)
; ..\EAS\BSW\Com\Com.c	  5893  FUNC(void, COM_CODE) Com_EnableReceptionDM
; Function Com_EnableReceptionDM
.L434:
Com_EnableReceptionDM:	.type	func

; ..\EAS\BSW\Com\Com.c	  5894  (
; ..\EAS\BSW\Com\Com.c	  5895      Com_IpduGroupIdType IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5896  )
; ..\EAS\BSW\Com\Com.c	  5897  {
; ..\EAS\BSW\Com\Com.c	  5898  
; ..\EAS\BSW\Com\Com.c	  5899      PduIdType RxIpduIdIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5900      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5901  
; ..\EAS\BSW\Com\Com.c	  5902      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1639:
	jeq	d15,#1,.L280
.L1640:

; ..\EAS\BSW\Com\Com.c	  5903      {
; ..\EAS\BSW\Com\Com.c	  5904          COM_DET_REPORT_ERROR(COMServiceId_StartRXDMGroup, COM_E_UNINIT);
	mov	d4,#50
.L1316:
	mov	d5,#0
	mov	d6,#83
	mov	d7,#2
	j	Det_ReportError
.L280:

; ..\EAS\BSW\Com\Com.c	  5905      }
; ..\EAS\BSW\Com\Com.c	  5906      else if(IpduGroupId >= COM_PDU_GROUP_NUM)
	jlt.u	d4,#3,.L282
.L1641:

; ..\EAS\BSW\Com\Com.c	  5907      {
; ..\EAS\BSW\Com\Com.c	  5908          COM_DET_REPORT_ERROR(COMServiceId_StartRXDMGroup, COM_E_PARAM);
	mov	d4,#50
.L1317:
	mov	d5,#0
	mov	d6,#83
	mov	d7,#1
	j	Det_ReportError
.L282:

; ..\EAS\BSW\Com\Com.c	  5909      }
; ..\EAS\BSW\Com\Com.c	  5910      else
; ..\EAS\BSW\Com\Com.c	  5911      {
; ..\EAS\BSW\Com\Com.c	  5912  
; ..\EAS\BSW\Com\Com.c	  5913  
; ..\EAS\BSW\Com\Com.c	  5914          SchM_Enter_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5915          if((PduIdType)0 != COM_CFG_RX_PDUGROUP_NUM(IpduGroupId))
	sha	d15,d4,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L1642:
	jeq	d15,#0,.L284
.L1643:

; ..\EAS\BSW\Com\Com.c	  5916          {
; ..\EAS\BSW\Com\Com.c	  5917              Com_IpduGroupDMEnableFlag[IpduGroupId] = TRUE;
	movh.a	a15,#@his(Com_IpduGroupDMEnableFlag)
	lea	a15,[a15]@los(Com_IpduGroupDMEnableFlag)
.L1644:
	addsc.a	a15,a15,d4,#0
.L1645:
	mov	d15,#1
.L1646:
	st.b	[a15],d15
.L1647:

; ..\EAS\BSW\Com\Com.c	  5918              /*SWS_Com_00534 ignor txPdu of this group*/
; ..\EAS\BSW\Com\Com.c	  5919              for(RxIpduIdIndex = (PduIdType)0;
	mov	d0,#0
.L1318:

; ..\EAS\BSW\Com\Com.c	  5920                      RxIpduIdIndex < COM_CFG_RX_PDUGROUP_NUM(IpduGroupId);
; ..\EAS\BSW\Com\Com.c	  5921                      RxIpduIdIndex++)
; ..\EAS\BSW\Com\Com.c	  5922              {
; ..\EAS\BSW\Com\Com.c	  5923                  RxIpduId = COM_CFG_RX_PDUGROUP_PTR(IpduGroupId)[RxIpduIdIndex];
; ..\EAS\BSW\Com\Com.c	  5924  
; ..\EAS\BSW\Com\Com.c	  5925                  if(TRUE == COM_CFG_RXPDU_MONITOR_FLAG(RxIpduId))
; ..\EAS\BSW\Com\Com.c	  5926                  {
; ..\EAS\BSW\Com\Com.c	  5927                      /* when pdu stop, time out monitor must be disable*/
; ..\EAS\BSW\Com\Com.c	  5928                      if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
; ..\EAS\BSW\Com\Com.c	  5929                      {
; ..\EAS\BSW\Com\Com.c	  5930                          /*SWS_Com_00224 486 225 616 617 618 process only when state change*/
; ..\EAS\BSW\Com\Com.c	  5931                          if(COM_RXPDU_MONITOR_FLAG(RxIpduId) != TRUE)
; ..\EAS\BSW\Com\Com.c	  5932                          {
; ..\EAS\BSW\Com\Com.c	  5933                              COM_RXPDU_MONITOR_FLAG(RxIpduId) = TRUE;
	mov	d1,d15
.L1648:

; ..\EAS\BSW\Com\Com.c	  5934                              COM_RXPDU_TIMEOUT(RxIpduId) = COM_TIMER_STOP_VAL;
	mov.u	d2,#65535
.L1649:
	j	.L285
.L286:
	sha	d15,d4,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L1650:
	addsc.a	a15,a15,d0,#0
	ld.bu	d3,[a15]
.L1320:
	sha	d15,d3,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L1651:
	jne	d15,#1,.L287
.L1652:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1653:
	addsc.a	a15,a15,d3,#0
	ld.bu	d15,[a15]
.L1654:
	jeq	d15,#0,.L288
.L1655:
	mul	d15,d3,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d3,[a15]2
.L1321:
	jeq	d3,#1,.L289
.L1656:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L1657:
	st.b	[a15]2,d1
.L1658:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L1659:
	st.h	[a15]4,d2
.L289:
.L288:
.L287:
	add	d0,#1
.L1319:
	extr.u	d0,d0,#0,#8
.L285:
	sha	d15,d4,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L1660:
	jlt.u	d0,d15,.L286
.L284:

; ..\EAS\BSW\Com\Com.c	  5935  #if (STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  5936                              Com_ResetUpdateRxToTimer(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  5937  #endif
; ..\EAS\BSW\Com\Com.c	  5938                          }
; ..\EAS\BSW\Com\Com.c	  5939  
; ..\EAS\BSW\Com\Com.c	  5940                      }
; ..\EAS\BSW\Com\Com.c	  5941                  }
; ..\EAS\BSW\Com\Com.c	  5942  
; ..\EAS\BSW\Com\Com.c	  5943              }
; ..\EAS\BSW\Com\Com.c	  5944          }
; ..\EAS\BSW\Com\Com.c	  5945          SchM_Exit_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5946      }
; ..\EAS\BSW\Com\Com.c	  5947  
; ..\EAS\BSW\Com\Com.c	  5948  }
	ret
.L842:
	
__Com_EnableReceptionDM_function_end:
	.size	Com_EnableReceptionDM,__Com_EnableReceptionDM_function_end-Com_EnableReceptionDM
.L557:
	; End of function
	
	.sdecl	'.text.Com.Com_DisableReceptionDM',code,cluster('Com_DisableReceptionDM')
	.sect	'.text.Com.Com_DisableReceptionDM'
	.align	2
	
	.global	Com_DisableReceptionDM

; ..\EAS\BSW\Com\Com.c	  5949  
; ..\EAS\BSW\Com\Com.c	  5950  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  5951  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5952  * Function Name: Com_DisableReceptionDM
; ..\EAS\BSW\Com\Com.c	  5953  *
; ..\EAS\BSW\Com\Com.c	  5954  * Description:   Used to stOP rx time out monitor of group's rxPdu
; ..\EAS\BSW\Com\Com.c	  5955  *
; ..\EAS\BSW\Com\Com.c	  5956  * Inputs:        IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5957  *
; ..\EAS\BSW\Com\Com.c	  5958  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  5959  *
; ..\EAS\BSW\Com\Com.c	  5960  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  5961  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  5962  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  5963  FUNC(void, COM_CODE) Com_DisableReceptionDM
; Function Com_DisableReceptionDM
.L436:
Com_DisableReceptionDM:	.type	func
	mov	d9,d4
.L1323:

; ..\EAS\BSW\Com\Com.c	  5964  (
; ..\EAS\BSW\Com\Com.c	  5965      Com_IpduGroupIdType IpduGroupId
; ..\EAS\BSW\Com\Com.c	  5966  )
; ..\EAS\BSW\Com\Com.c	  5967  {
; ..\EAS\BSW\Com\Com.c	  5968  
; ..\EAS\BSW\Com\Com.c	  5969      PduIdType RxIpduIdIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5970      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5971      boolean tmpPduDMEnableFlag = TRUE;
; ..\EAS\BSW\Com\Com.c	  5972      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1665:
	jeq	d15,#1,.L290
.L1666:

; ..\EAS\BSW\Com\Com.c	  5973      {
; ..\EAS\BSW\Com\Com.c	  5974          COM_DET_REPORT_ERROR(COMServiceId_StopRXDMGroup, COM_E_UNINIT);
	mov	d4,#50
.L1322:
	mov	d5,#0
	mov	d6,#84
	mov	d7,#2
	j	Det_ReportError
.L290:

; ..\EAS\BSW\Com\Com.c	  5975      }
; ..\EAS\BSW\Com\Com.c	  5976      else if(IpduGroupId >= COM_PDU_GROUP_NUM)
	jlt.u	d9,#3,.L292
.L1667:

; ..\EAS\BSW\Com\Com.c	  5977      {
; ..\EAS\BSW\Com\Com.c	  5978          COM_DET_REPORT_ERROR(COMServiceId_StopRXDMGroup, COM_E_PARAM);
	mov	d4,#50
.L1324:
	mov	d5,#0
	mov	d6,#84
	mov	d7,#1
	j	Det_ReportError
.L292:

; ..\EAS\BSW\Com\Com.c	  5979      }
; ..\EAS\BSW\Com\Com.c	  5980      else
; ..\EAS\BSW\Com\Com.c	  5981      {
; ..\EAS\BSW\Com\Com.c	  5982  
; ..\EAS\BSW\Com\Com.c	  5983  
; ..\EAS\BSW\Com\Com.c	  5984          SchM_Enter_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  5985          if((PduIdType)0 != COM_CFG_RX_PDUGROUP_NUM(IpduGroupId))
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L1668:
	jeq	d15,#0,.L294
.L1669:

; ..\EAS\BSW\Com\Com.c	  5986          {
; ..\EAS\BSW\Com\Com.c	  5987              Com_IpduGroupDMEnableFlag[IpduGroupId] = FALSE;
	movh.a	a15,#@his(Com_IpduGroupDMEnableFlag)
	lea	a15,[a15]@los(Com_IpduGroupDMEnableFlag)
.L1670:
	addsc.a	a15,a15,d9,#0
.L1671:
	mov	d10,#0
.L1325:
	st.b	[a15],d10
.L1672:

; ..\EAS\BSW\Com\Com.c	  5988              /*SWS_Com_00534 ignor txPdu of this group*/
; ..\EAS\BSW\Com\Com.c	  5989              for(RxIpduIdIndex = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  5990                      RxIpduIdIndex < COM_CFG_RX_PDUGROUP_NUM(IpduGroupId);
; ..\EAS\BSW\Com\Com.c	  5991                      RxIpduIdIndex++)
; ..\EAS\BSW\Com\Com.c	  5992              {
; ..\EAS\BSW\Com\Com.c	  5993                  RxIpduId = COM_CFG_RX_PDUGROUP_PTR(IpduGroupId)[RxIpduIdIndex];
; ..\EAS\BSW\Com\Com.c	  5994                  if(TRUE == COM_CFG_RXPDU_MONITOR_FLAG(RxIpduId))
; ..\EAS\BSW\Com\Com.c	  5995                  {
; ..\EAS\BSW\Com\Com.c	  5996                      /* when pdu stop, time out monitor must be disable*/
; ..\EAS\BSW\Com\Com.c	  5997                      if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
; ..\EAS\BSW\Com\Com.c	  5998                      {
; ..\EAS\BSW\Com\Com.c	  5999                          tmpPduDMEnableFlag = Com_IsPduDMEnable_Internal(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  6000                          /*SWS_Com_00224 486 225 616 617 618 process only when state change*/
; ..\EAS\BSW\Com\Com.c	  6001                          if((COM_RXPDU_MONITOR_FLAG(RxIpduId) != FALSE) && (tmpPduDMEnableFlag == FALSE))
; ..\EAS\BSW\Com\Com.c	  6002                          {
; ..\EAS\BSW\Com\Com.c	  6003                              COM_RXPDU_MONITOR_FLAG(RxIpduId) = FALSE;
	mov	d11,d10
.L1327:

; ..\EAS\BSW\Com\Com.c	  6004                              COM_RXPDU_TIMEOUT(RxIpduId) = COM_TIMER_STOP_VAL;
	mov.u	d12,#65535
.L1673:
	j	.L295
.L296:
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a15,[a15]8
.L1674:
	addsc.a	a15,a15,d10,#0
	ld.bu	d8,[a15]
.L1328:
	sha	d15,d8,#5
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L1675:
	jne	d15,#1,.L297
.L1676:
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1677:
	addsc.a	a15,a15,d8,#0
	ld.bu	d15,[a15]
.L1678:
	jeq	d15,#0,.L298
.L1679:
	mov	d4,d8
.L1329:
	call	Com_IsPduDMEnable_Internal
.L1330:
	mul	d15,d8,#6
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d0,[a15]2
.L1680:
	jeq	d0,#0,.L299
.L1681:
	jne	d2,#0,.L300
.L1682:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L1331:
	st.b	[a15]2,d11
.L1332:
	movh.a	a15,#@his(Com_RxPduTable)
	lea	a15,[a15]@los(Com_RxPduTable)
	addsc.a	a15,a15,d15,#0
.L1683:
	st.h	[a15]4,d12
.L300:
.L299:
.L298:
.L297:
	add	d10,#1
.L1326:
	extr.u	d10,d10,#0,#8
.L295:
	sha	d15,d9,#4
	movh.a	a15,#@his(ComPduGroupCfgTable)
	lea	a15,[a15]@los(ComPduGroupCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]12
.L1684:
	jlt.u	d10,d15,.L296
.L294:

; ..\EAS\BSW\Com\Com.c	  6005  #if (STD_ON == COM_RX_UPDATEBIT_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6006                              Com_ResetUpdateRxToTimer(RxIpduId);
; ..\EAS\BSW\Com\Com.c	  6007  #endif
; ..\EAS\BSW\Com\Com.c	  6008                          }
; ..\EAS\BSW\Com\Com.c	  6009                      }
; ..\EAS\BSW\Com\Com.c	  6010                  }
; ..\EAS\BSW\Com\Com.c	  6011  
; ..\EAS\BSW\Com\Com.c	  6012              }
; ..\EAS\BSW\Com\Com.c	  6013          }
; ..\EAS\BSW\Com\Com.c	  6014          SchM_Exit_Com_COM_EXCLUSIVE_AREA_8();
; ..\EAS\BSW\Com\Com.c	  6015      }
; ..\EAS\BSW\Com\Com.c	  6016  }
	ret
.L846:
	
__Com_DisableReceptionDM_function_end:
	.size	Com_DisableReceptionDM,__Com_DisableReceptionDM_function_end-Com_DisableReceptionDM
.L562:
	; End of function
	
	.sdecl	'.text.Com.Com_MainFunctionRouteSignals',code,cluster('Com_MainFunctionRouteSignals')
	.sect	'.text.Com.Com_MainFunctionRouteSignals'
	.align	2
	
	.global	Com_MainFunctionRouteSignals

; ..\EAS\BSW\Com\Com.c	  6017  
; ..\EAS\BSW\Com\Com.c	  6018  
; ..\EAS\BSW\Com\Com.c	  6019  #endif
; ..\EAS\BSW\Com\Com.c	  6020  #endif
; ..\EAS\BSW\Com\Com.c	  6021  #endif
; ..\EAS\BSW\Com\Com.c	  6022  
; ..\EAS\BSW\Com\Com.c	  6023  
; ..\EAS\BSW\Com\Com.c	  6024  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6025  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6026  * Function Name: Com_MainFunctionRouteSignals SWS_Com_00400
; ..\EAS\BSW\Com\Com.c	  6027  *
; ..\EAS\BSW\Com\Com.c	  6028  * Description:   process signal routing of com
; ..\EAS\BSW\Com\Com.c	  6029  *
; ..\EAS\BSW\Com\Com.c	  6030  * Inputs:        None
; ..\EAS\BSW\Com\Com.c	  6031  *
; ..\EAS\BSW\Com\Com.c	  6032  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  6033  *
; ..\EAS\BSW\Com\Com.c	  6034  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6035  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6036  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6037  FUNC(void, COM_CODE) Com_MainFunctionRouteSignals
; Function Com_MainFunctionRouteSignals
.L438:
Com_MainFunctionRouteSignals:	.type	func

; ..\EAS\BSW\Com\Com.c	  6038  (
; ..\EAS\BSW\Com\Com.c	  6039      void
; ..\EAS\BSW\Com\Com.c	  6040  )
; ..\EAS\BSW\Com\Com.c	  6041  {
; ..\EAS\BSW\Com\Com.c	  6042  
; ..\EAS\BSW\Com\Com.c	  6043  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  6044      Com_SignalIdType GWSigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  6045  #endif
; ..\EAS\BSW\Com\Com.c	  6046  
; ..\EAS\BSW\Com\Com.c	  6047      if(COM_INIT != Com_InitStateFlag)/*SWS_Com_00666*/
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1538:
	jeq	d15,#1,.L301
.L1539:

; ..\EAS\BSW\Com\Com.c	  6048      {
; ..\EAS\BSW\Com\Com.c	  6049          COM_DET_REPORT_ERROR(COMServiceId_MainFunctionRouteSignals, COM_E_UNINIT);
	mov	d4,#50
	mov	d5,#0
	mov	d6,#26
	mov	d7,#2
	j	Det_ReportError
.L301:

; ..\EAS\BSW\Com\Com.c	  6050      }
; ..\EAS\BSW\Com\Com.c	  6051      else
; ..\EAS\BSW\Com\Com.c	  6052      {
; ..\EAS\BSW\Com\Com.c	  6053  #if (STD_ON == COM_GW_FUN)
; ..\EAS\BSW\Com\Com.c	  6054          for(GWSigIndex = (Com_SignalIdType)0; GWSigIndex < COM_GWSIG_NUM; GWSigIndex++)
; ..\EAS\BSW\Com\Com.c	  6055          {
; ..\EAS\BSW\Com\Com.c	  6056              if(TRUE == Com_GWSigFlag[GWSigIndex])
; ..\EAS\BSW\Com\Com.c	  6057              {
; ..\EAS\BSW\Com\Com.c	  6058                  SchM_Enter_Com_COM_EXCLUSIVE_AREA_5();
; ..\EAS\BSW\Com\Com.c	  6059                  /*SWS_Com_00377 357 359 466 539*/
; ..\EAS\BSW\Com\Com.c	  6060                  Com_GWSigFlag[GWSigIndex] = FALSE;
; ..\EAS\BSW\Com\Com.c	  6061                  if(NULL_PTR != COM_CFG_GWPDU_INFO[GWSigIndex])
; ..\EAS\BSW\Com\Com.c	  6062                  {
; ..\EAS\BSW\Com\Com.c	  6063                      COM_CFG_GWPDU_INFO[GWSigIndex]();
; ..\EAS\BSW\Com\Com.c	  6064                  }
; ..\EAS\BSW\Com\Com.c	  6065                  SchM_Exit_Com_COM_EXCLUSIVE_AREA_5();
; ..\EAS\BSW\Com\Com.c	  6066              }
; ..\EAS\BSW\Com\Com.c	  6067          }
; ..\EAS\BSW\Com\Com.c	  6068  #endif
; ..\EAS\BSW\Com\Com.c	  6069      }
; ..\EAS\BSW\Com\Com.c	  6070  }
	ret
.L806:
	
__Com_MainFunctionRouteSignals_function_end:
	.size	Com_MainFunctionRouteSignals,__Com_MainFunctionRouteSignals_function_end-Com_MainFunctionRouteSignals
.L517:
	; End of function
	
	.sdecl	'.text.Com.Com_SendSignalGroup',code,cluster('Com_SendSignalGroup')
	.sect	'.text.Com.Com_SendSignalGroup'
	.align	2
	
	.global	Com_SendSignalGroup

; ..\EAS\BSW\Com\Com.c	  6071  
; ..\EAS\BSW\Com\Com.c	  6072  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6073  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6074  * Function Name: Com_GetVersionInfo  SWS_Com_00426
; ..\EAS\BSW\Com\Com.c	  6075  *
; ..\EAS\BSW\Com\Com.c	  6076  * Description:   This service returns the version information of the called
; ..\EAS\BSW\Com\Com.c	  6077  *                CAN Interface module
; ..\EAS\BSW\Com\Com.c	  6078  *
; ..\EAS\BSW\Com\Com.c	  6079  * Inputs:        VersionInfo  Pointer to where to store the version information
; ..\EAS\BSW\Com\Com.c	  6080  *                             of this module.DLC and pointer to CAN L-SDU buffer
; ..\EAS\BSW\Com\Com.c	  6081  *
; ..\EAS\BSW\Com\Com.c	  6082  * Outputs:       None
; ..\EAS\BSW\Com\Com.c	  6083  *
; ..\EAS\BSW\Com\Com.c	  6084  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6085  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6086  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6087  #if (STD_ON == COM_PUBLIC_VERSION_INFO_API)
; ..\EAS\BSW\Com\Com.c	  6088  FUNC(void, COM_CODE) Com_GetVersionInfo
; ..\EAS\BSW\Com\Com.c	  6089  (
; ..\EAS\BSW\Com\Com.c	  6090      P2VAR(Std_VersionInfoType, AUTOMATIC, COM_APPL_DATA) VersionInfo
; ..\EAS\BSW\Com\Com.c	  6091  )
; ..\EAS\BSW\Com\Com.c	  6092  {
; ..\EAS\BSW\Com\Com.c	  6093  
; ..\EAS\BSW\Com\Com.c	  6094      if(NULL_PTR == VersionInfo)
; ..\EAS\BSW\Com\Com.c	  6095      {
; ..\EAS\BSW\Com\Com.c	  6096          COM_DET_REPORT_ERROR(COMServiceId_GetVersionInfo, COM_E_PARAM_POINTER);
; ..\EAS\BSW\Com\Com.c	  6097      }
; ..\EAS\BSW\Com\Com.c	  6098      else
; ..\EAS\BSW\Com\Com.c	  6099      {
; ..\EAS\BSW\Com\Com.c	  6100          VersionInfo->vendorID = COM_VENDOR_ID;
; ..\EAS\BSW\Com\Com.c	  6101          VersionInfo->moduleID = COM_MODULE_ID;
; ..\EAS\BSW\Com\Com.c	  6102  
; ..\EAS\BSW\Com\Com.c	  6103          VersionInfo->sw_major_version = (uint8)COM_SW_MAJOR_VERSION;
; ..\EAS\BSW\Com\Com.c	  6104          VersionInfo->sw_minor_version = (uint8)COM_SW_MINOR_VERSION;
; ..\EAS\BSW\Com\Com.c	  6105          VersionInfo->sw_patch_version = (uint8)COM_SW_PATCH_VERSION;
; ..\EAS\BSW\Com\Com.c	  6106      }
; ..\EAS\BSW\Com\Com.c	  6107  }
; ..\EAS\BSW\Com\Com.c	  6108  #endif
; ..\EAS\BSW\Com\Com.c	  6109  
; ..\EAS\BSW\Com\Com.c	  6110  
; ..\EAS\BSW\Com\Com.c	  6111  
; ..\EAS\BSW\Com\Com.c	  6112  
; ..\EAS\BSW\Com\Com.c	  6113  
; ..\EAS\BSW\Com\Com.c	  6114  
; ..\EAS\BSW\Com\Com.c	  6115  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6116  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6117  * Function Name: Com_SendSignalGroup SWS_Com_00197
; ..\EAS\BSW\Com\Com.c	  6118  *
; ..\EAS\BSW\Com\Com.c	  6119  * Description:   This service updates the signal object identified by
; ..\EAS\BSW\Com\Com.c	  6120  *                SignalId with the signal referenced by the SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  6121  *                parameter
; ..\EAS\BSW\Com\Com.c	  6122  *
; ..\EAS\BSW\Com\Com.c	  6123  * Inputs:        SignalId: Signal handle
; ..\EAS\BSW\Com\Com.c	  6124  *                SignalDataPtr: Reference to the Signal data to be transmitted
; ..\EAS\BSW\Com\Com.c	  6125  *
; ..\EAS\BSW\Com\Com.c	  6126  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  6127  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  6128  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  6129  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  6130                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  6131  *
; ..\EAS\BSW\Com\Com.c	  6132  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6133  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6134  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6135  FUNC(uint8, COM_CODE) Com_SendSignalGroup
; Function Com_SendSignalGroup
.L440:
Com_SendSignalGroup:	.type	func

; ..\EAS\BSW\Com\Com.c	  6136  (
; ..\EAS\BSW\Com\Com.c	  6137      Com_SignalGroupIdType SignalGroupId
; ..\EAS\BSW\Com\Com.c	  6138  )
; ..\EAS\BSW\Com\Com.c	  6139  {
; ..\EAS\BSW\Com\Com.c	  6140      uint8 result = COM_SERVICE_NOT_AVAILABLE;/* return not available when det err*/
; ..\EAS\BSW\Com\Com.c	  6141  
; ..\EAS\BSW\Com\Com.c	  6142  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6143      PduIdType TxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  6144      Com_SignalIdType GrpSigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  6145      P2VAR(void, AUTOMATIC, COM_VAR) destDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  6146      PduLengthType length = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  6147  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  6148      boolean changeflag = FALSE;
; ..\EAS\BSW\Com\Com.c	  6149  #endif
; ..\EAS\BSW\Com\Com.c	  6150  #endif
; ..\EAS\BSW\Com\Com.c	  6151  
; ..\EAS\BSW\Com\Com.c	  6152      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1689:
	jeq	d15,#1,.L302
.L1690:

; ..\EAS\BSW\Com\Com.c	  6153      {
; ..\EAS\BSW\Com\Com.c	  6154          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroup, COM_E_UNINIT);
	mov	d4,#50
.L1333:
	mov	d5,#0
	mov	d6,#13
	mov	d7,#2
	call	Det_ReportError
.L302:
	mov	d2,#128
.L1334:

; ..\EAS\BSW\Com\Com.c	  6155      }
; ..\EAS\BSW\Com\Com.c	  6156  #if(STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6157      else if(SignalGroupId >= COM_TXSIG_GROUP_NUM)
; ..\EAS\BSW\Com\Com.c	  6158      {
; ..\EAS\BSW\Com\Com.c	  6159          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroup, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6160      }
; ..\EAS\BSW\Com\Com.c	  6161      else if(COM_CFG_TXSIGGRP_SUPPORT_ARRAY(SignalGroupId) == TRUE)
; ..\EAS\BSW\Com\Com.c	  6162      {
; ..\EAS\BSW\Com\Com.c	  6163          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroup, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6164      }
; ..\EAS\BSW\Com\Com.c	  6165      else
; ..\EAS\BSW\Com\Com.c	  6166      {
; ..\EAS\BSW\Com\Com.c	  6167  
; ..\EAS\BSW\Com\Com.c	  6168          TxIpduId = COM_CFG_TXSIGGRP_PDUID(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  6169  
; ..\EAS\BSW\Com\Com.c	  6170          if((COM_TXPDU_START_BUSY == Com_TxPduState[TxIpduId]) && (TRUE == COM_CFG_TXPDU_IS_TP_PDU(TxIpduId)))
; ..\EAS\BSW\Com\Com.c	  6171          {
; ..\EAS\BSW\Com\Com.c	  6172              result = COM_BUSY;
; ..\EAS\BSW\Com\Com.c	  6173          }
; ..\EAS\BSW\Com\Com.c	  6174          else
; ..\EAS\BSW\Com\Com.c	  6175          {
; ..\EAS\BSW\Com\Com.c	  6176  
; ..\EAS\BSW\Com\Com.c	  6177              SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  6178              for(GrpSigIndex = COM_CFG_TXSIGGRP_SIGSTART(SignalGroupId); GrpSigIndex <= COM_CFG_TXSIGGRP_SIGSTOP(SignalGroupId); GrpSigIndex++)
; ..\EAS\BSW\Com\Com.c	  6179              {
; ..\EAS\BSW\Com\Com.c	  6180  
; ..\EAS\BSW\Com\Com.c	  6181                  destDataPtr = COM_CFG_TXSIG_GROUP_TEMP_BUF(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6182                  length = COM_CFG_TXSIG_LENGTH(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6183  
; ..\EAS\BSW\Com\Com.c	  6184  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6185                  if(COM_CFG_TXSIG_TYPE(GrpSigIndex) == COM_SIG_DYN)
; ..\EAS\BSW\Com\Com.c	  6186                  {
; ..\EAS\BSW\Com\Com.c	  6187                      length = *COM_CFG_TXSIG_GROUP_TEMPLENGTH_PTR(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6188                      COM_TXPDU_DYN_LENGTH(TxIpduId) = length + COM_CFG_TXSIG_START_BYTE_INDEX(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6189                  }
; ..\EAS\BSW\Com\Com.c	  6190  #endif
; ..\EAS\BSW\Com\Com.c	  6191  
; ..\EAS\BSW\Com\Com.c	  6192  #if(STD_ON == COM_TXSIG_ON_CHANGE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6193                  if(COM_CFG_TXSIG_TRANSPROPERTY(GrpSigIndex) >= COM_TRIGGERED_ON_CHANGE)
; ..\EAS\BSW\Com\Com.c	  6194                  {
; ..\EAS\BSW\Com\Com.c	  6195                      if(FALSE == changeflag)
; ..\EAS\BSW\Com\Com.c	  6196                      {
; ..\EAS\BSW\Com\Com.c	  6197                          changeflag = COM_CFG_TXSIG_CHECKCHANGE_SIG_FUN(GrpSigIndex)(TxIpduId, GrpSigIndex, destDataPtr, length);
; ..\EAS\BSW\Com\Com.c	  6198                      }
; ..\EAS\BSW\Com\Com.c	  6199                  }
; ..\EAS\BSW\Com\Com.c	  6200  #endif
; ..\EAS\BSW\Com\Com.c	  6201  
; ..\EAS\BSW\Com\Com.c	  6202  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6203                  Com_TxSignalFilter(GrpSigIndex, destDataPtr);
; ..\EAS\BSW\Com\Com.c	  6204  #endif
; ..\EAS\BSW\Com\Com.c	  6205  
; ..\EAS\BSW\Com\Com.c	  6206                  COM_CFG_TXSIG_WRITE_SIG_FUN(GrpSigIndex)(destDataPtr, COM_CFG_TXPDU_DATA_PTR(TxIpduId), length);
; ..\EAS\BSW\Com\Com.c	  6207  
; ..\EAS\BSW\Com\Com.c	  6208  #if(STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6209                  Com_CheckTxSigIfActive(TxIpduId, GrpSigIndex,destDataPtr, COM_CFG_TXSIG_INACTIVE_VALUE_PTR(GrpSigIndex));
; ..\EAS\BSW\Com\Com.c	  6210  #endif
; ..\EAS\BSW\Com\Com.c	  6211  
; ..\EAS\BSW\Com\Com.c	  6212  
; ..\EAS\BSW\Com\Com.c	  6213              }
; ..\EAS\BSW\Com\Com.c	  6214  
; ..\EAS\BSW\Com\Com.c	  6215  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  6216              /* set update bit if configured*/
; ..\EAS\BSW\Com\Com.c	  6217              if(COM_INVALID_SIG_INDEX != COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SignalGroupId))
; ..\EAS\BSW\Com\Com.c	  6218              {
; ..\EAS\BSW\Com\Com.c	  6219                  Com_SetSigUpdateBit(TxIpduId, COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SignalGroupId));
; ..\EAS\BSW\Com\Com.c	  6220              }
; ..\EAS\BSW\Com\Com.c	  6221  #endif
; ..\EAS\BSW\Com\Com.c	  6222  
; ..\EAS\BSW\Com\Com.c	  6223              /* this Asr req, when pdu is stop, data canbe updated, but return COM_SERVICE_NOT_AVAILABLE*/
; ..\EAS\BSW\Com\Com.c	  6224              /*SWS_Com_334 dont save trigger when stop*/
; ..\EAS\BSW\Com\Com.c	  6225              if(COM_TXPDU_STOP != Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  6226              {
; ..\EAS\BSW\Com\Com.c	  6227  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  6228                  Com_SetIpduTrigRepFlag(COM_CFG_TXSIGGRP_TRPROP(SignalGroupId), TxIpduId, changeflag);
; ..\EAS\BSW\Com\Com.c	  6229  #endif
; ..\EAS\BSW\Com\Com.c	  6230                  result = E_OK;
; ..\EAS\BSW\Com\Com.c	  6231              }
; ..\EAS\BSW\Com\Com.c	  6232  
; ..\EAS\BSW\Com\Com.c	  6233  
; ..\EAS\BSW\Com\Com.c	  6234              SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  6235          }
; ..\EAS\BSW\Com\Com.c	  6236  
; ..\EAS\BSW\Com\Com.c	  6237      }
; ..\EAS\BSW\Com\Com.c	  6238  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  6239  
; ..\EAS\BSW\Com\Com.c	  6240  
; ..\EAS\BSW\Com\Com.c	  6241      return  result;
; ..\EAS\BSW\Com\Com.c	  6242  
; ..\EAS\BSW\Com\Com.c	  6243  }
	ret
.L851:
	
__Com_SendSignalGroup_function_end:
	.size	Com_SendSignalGroup,__Com_SendSignalGroup_function_end-Com_SendSignalGroup
.L567:
	; End of function
	
	.sdecl	'.text.Com.Com_InvalidateSignalGroup',code,cluster('Com_InvalidateSignalGroup')
	.sect	'.text.Com.Com_InvalidateSignalGroup'
	.align	2
	
	.global	Com_InvalidateSignalGroup

; ..\EAS\BSW\Com\Com.c	  6244  
; ..\EAS\BSW\Com\Com.c	  6245  
; ..\EAS\BSW\Com\Com.c	  6246  
; ..\EAS\BSW\Com\Com.c	  6247  
; ..\EAS\BSW\Com\Com.c	  6248  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6249  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6250  * Function Name: Com_InvalidateSignalGroup SWS_Com_00557
; ..\EAS\BSW\Com\Com.c	  6251  *
; ..\EAS\BSW\Com\Com.c	  6252  * Description:   This service updates all group signal to invalid value
; ..\EAS\BSW\Com\Com.c	  6253  * Inputs:        SignalGroupId: Signal group handle
; ..\EAS\BSW\Com\Com.c	  6254  *
; ..\EAS\BSW\Com\Com.c	  6255  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  6256  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  6257  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  6258  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  6259                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  6260  *
; ..\EAS\BSW\Com\Com.c	  6261  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6262  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6263  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6264  FUNC(uint8, COM_CODE) Com_InvalidateSignalGroup
; Function Com_InvalidateSignalGroup
.L442:
Com_InvalidateSignalGroup:	.type	func

; ..\EAS\BSW\Com\Com.c	  6265  (
; ..\EAS\BSW\Com\Com.c	  6266      Com_SignalGroupIdType SignalGroupId
; ..\EAS\BSW\Com\Com.c	  6267  )
; ..\EAS\BSW\Com\Com.c	  6268  {
; ..\EAS\BSW\Com\Com.c	  6269  
; ..\EAS\BSW\Com\Com.c	  6270  
; ..\EAS\BSW\Com\Com.c	  6271      uint8 result = COM_SERVICE_NOT_AVAILABLE;/* return not available when det err*/
; ..\EAS\BSW\Com\Com.c	  6272  #if((STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT) && (STD_ON == COM_TX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  6273      PduIdType TxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  6274      Com_SignalIdType GrpSigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  6275      P2VAR(void, AUTOMATIC, COM_VAR) destDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  6276      P2CONST(void, AUTOMATIC, COM_CONST) srcDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  6277      PduLengthType length = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  6278  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  6279      boolean changeflag = FALSE;
; ..\EAS\BSW\Com\Com.c	  6280  #endif
; ..\EAS\BSW\Com\Com.c	  6281  
; ..\EAS\BSW\Com\Com.c	  6282  #endif
; ..\EAS\BSW\Com\Com.c	  6283  
; ..\EAS\BSW\Com\Com.c	  6284  
; ..\EAS\BSW\Com\Com.c	  6285      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1695:
	jeq	d15,#1,.L304
.L1696:

; ..\EAS\BSW\Com\Com.c	  6286      {
; ..\EAS\BSW\Com\Com.c	  6287          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignalGroup, COM_E_UNINIT);
	mov	d4,#50
.L1335:
	mov	d5,#0
	mov	d6,#27
	mov	d7,#2
	call	Det_ReportError
.L304:
	mov	d2,#128
.L1336:

; ..\EAS\BSW\Com\Com.c	  6288      }
; ..\EAS\BSW\Com\Com.c	  6289  #if((STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT) && (STD_ON == COM_TX_INVALID_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  6290      else if(SignalGroupId >= COM_TXSIG_GROUP_NUM)
; ..\EAS\BSW\Com\Com.c	  6291      {
; ..\EAS\BSW\Com\Com.c	  6292          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignalGroup, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6293      }
; ..\EAS\BSW\Com\Com.c	  6294      else if(FALSE == COM_CFG_TXSIGGRP_HAS_INVALID_VAL(SignalGroupId))
; ..\EAS\BSW\Com\Com.c	  6295      {
; ..\EAS\BSW\Com\Com.c	  6296          COM_DET_REPORT_ERROR(COMServiceId_InvalidateSignalGroup, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6297      }
; ..\EAS\BSW\Com\Com.c	  6298  
; ..\EAS\BSW\Com\Com.c	  6299      /* this api support array signal group*/
; ..\EAS\BSW\Com\Com.c	  6300      else
; ..\EAS\BSW\Com\Com.c	  6301      {
; ..\EAS\BSW\Com\Com.c	  6302          TxIpduId = COM_CFG_TXSIGGRP_PDUID(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  6303  
; ..\EAS\BSW\Com\Com.c	  6304          if(COM_TXPDU_START_BUSY == Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  6305          {
; ..\EAS\BSW\Com\Com.c	  6306              result = COM_BUSY;
; ..\EAS\BSW\Com\Com.c	  6307          }
; ..\EAS\BSW\Com\Com.c	  6308          else
; ..\EAS\BSW\Com\Com.c	  6309          {
; ..\EAS\BSW\Com\Com.c	  6310  
; ..\EAS\BSW\Com\Com.c	  6311              SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  6312              for(GrpSigIndex = COM_CFG_TXSIGGRP_SIGSTART(SignalGroupId); GrpSigIndex <= COM_CFG_TXSIGGRP_SIGSTOP(SignalGroupId); GrpSigIndex++)
; ..\EAS\BSW\Com\Com.c	  6313              {
; ..\EAS\BSW\Com\Com.c	  6314                  if(NULL_PTR != COM_CFG_TXSIG_INVALID_VALUE_PTR(GrpSigIndex))
; ..\EAS\BSW\Com\Com.c	  6315                  {
; ..\EAS\BSW\Com\Com.c	  6316                      destDataPtr = COM_CFG_TXSIG_GROUP_TEMP_BUF(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6317                      srcDataPtr = COM_CFG_TXSIG_INVALID_VALUE_PTR(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6318                      length = COM_CFG_TXSIG_LENGTH(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6319  #if(STD_ON == COM_TX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6320                      if(COM_CFG_TXSIG_TYPE(GrpSigIndex) == COM_SIG_DYN)
; ..\EAS\BSW\Com\Com.c	  6321                      {
; ..\EAS\BSW\Com\Com.c	  6322                          length = COM_CFG_TXSIG_INVALID_VALUE_LEN(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6323                          COM_TXPDU_DYN_LENGTH(TxIpduId) = length + COM_CFG_TXSIG_START_BYTE_INDEX(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6324                      }
; ..\EAS\BSW\Com\Com.c	  6325  #endif
; ..\EAS\BSW\Com\Com.c	  6326  
; ..\EAS\BSW\Com\Com.c	  6327  #if(STD_ON == COM_TXSIG_ON_CHANGE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6328                      if(COM_CFG_TXSIG_TRANSPROPERTY(GrpSigIndex) >= COM_TRIGGERED_ON_CHANGE)
; ..\EAS\BSW\Com\Com.c	  6329                      {
; ..\EAS\BSW\Com\Com.c	  6330                          changeflag = COM_CFG_TXSIG_CHECKCHANGE_SIG_FUN(GrpSigIndex)(TxIpduId, GrpSigIndex, destDataPtr, length);
; ..\EAS\BSW\Com\Com.c	  6331                      }
; ..\EAS\BSW\Com\Com.c	  6332  #endif
; ..\EAS\BSW\Com\Com.c	  6333  
; ..\EAS\BSW\Com\Com.c	  6334  #if(STD_ON == COM_TX_FILTER_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6335                      Com_TxSignalFilter(GrpSigIndex, srcDataPtr);
; ..\EAS\BSW\Com\Com.c	  6336  #endif
; ..\EAS\BSW\Com\Com.c	  6337                      COM_CFG_TXSIG_WRITE_SIG_FUN(GrpSigIndex)(srcDataPtr, COM_CFG_TXPDU_DATA_PTR(TxIpduId), length);
; ..\EAS\BSW\Com\Com.c	  6338                      if((NULL_PTR != COM_CFG_TXSIG_COPY_SIG_FUN(GrpSigIndex)) && (NULL_PTR != destDataPtr))
; ..\EAS\BSW\Com\Com.c	  6339                      {
; ..\EAS\BSW\Com\Com.c	  6340                          COM_CFG_TXSIG_COPY_SIG_FUN(GrpSigIndex)(srcDataPtr, destDataPtr, length);
; ..\EAS\BSW\Com\Com.c	  6341                      }
; ..\EAS\BSW\Com\Com.c	  6342  
; ..\EAS\BSW\Com\Com.c	  6343  #if(STD_ON == COM_TXMODE_IFACTIVE_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6344                      Com_CheckTxSigIfActive(TxIpduId, GrpSigIndex,srcDataPtr, COM_CFG_TXSIG_INACTIVE_VALUE_PTR(GrpSigIndex));
; ..\EAS\BSW\Com\Com.c	  6345  #endif
; ..\EAS\BSW\Com\Com.c	  6346  
; ..\EAS\BSW\Com\Com.c	  6347                  }
; ..\EAS\BSW\Com\Com.c	  6348  
; ..\EAS\BSW\Com\Com.c	  6349              }
; ..\EAS\BSW\Com\Com.c	  6350  
; ..\EAS\BSW\Com\Com.c	  6351  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  6352              /* set update bit if configured*/
; ..\EAS\BSW\Com\Com.c	  6353              if(COM_INVALID_SIG_INDEX != COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SignalGroupId))
; ..\EAS\BSW\Com\Com.c	  6354              {
; ..\EAS\BSW\Com\Com.c	  6355                  Com_SetSigUpdateBit(TxIpduId, COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SignalGroupId));
; ..\EAS\BSW\Com\Com.c	  6356              }
; ..\EAS\BSW\Com\Com.c	  6357  #endif
; ..\EAS\BSW\Com\Com.c	  6358  
; ..\EAS\BSW\Com\Com.c	  6359              /* this Asr req, when pdu is stop, data canbe updated, but return COM_SERVICE_NOT_AVAILABLE*/
; ..\EAS\BSW\Com\Com.c	  6360              /*SWS_Com_334 dont save trigger when stop*/
; ..\EAS\BSW\Com\Com.c	  6361              if(COM_TXPDU_STOP != Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  6362              {
; ..\EAS\BSW\Com\Com.c	  6363  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  6364                  Com_SetIpduTrigRepFlag(COM_CFG_TXSIGGRP_TRPROP(SignalGroupId), TxIpduId, changeflag);
; ..\EAS\BSW\Com\Com.c	  6365  #endif
; ..\EAS\BSW\Com\Com.c	  6366                  result = E_OK;
; ..\EAS\BSW\Com\Com.c	  6367              }
; ..\EAS\BSW\Com\Com.c	  6368  
; ..\EAS\BSW\Com\Com.c	  6369  
; ..\EAS\BSW\Com\Com.c	  6370              SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  6371          }
; ..\EAS\BSW\Com\Com.c	  6372  
; ..\EAS\BSW\Com\Com.c	  6373      }
; ..\EAS\BSW\Com\Com.c	  6374  #endif/*#if(STD_ON == COM_TXPDU_FUN)*/
; ..\EAS\BSW\Com\Com.c	  6375  
; ..\EAS\BSW\Com\Com.c	  6376  
; ..\EAS\BSW\Com\Com.c	  6377      return  result;
; ..\EAS\BSW\Com\Com.c	  6378  
; ..\EAS\BSW\Com\Com.c	  6379  }
	ret
.L854:
	
__Com_InvalidateSignalGroup_function_end:
	.size	Com_InvalidateSignalGroup,__Com_InvalidateSignalGroup_function_end-Com_InvalidateSignalGroup
.L572:
	; End of function
	
	.sdecl	'.text.Com.Com_ReceiveSignalGroup',code,cluster('Com_ReceiveSignalGroup')
	.sect	'.text.Com.Com_ReceiveSignalGroup'
	.align	2
	
	.global	Com_ReceiveSignalGroup

; ..\EAS\BSW\Com\Com.c	  6380  
; ..\EAS\BSW\Com\Com.c	  6381  
; ..\EAS\BSW\Com\Com.c	  6382  
; ..\EAS\BSW\Com\Com.c	  6383  
; ..\EAS\BSW\Com\Com.c	  6384  
; ..\EAS\BSW\Com\Com.c	  6385  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6386  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6387  * Function Name: Com_SendSignalGroupArray SWS_Com_00851
; ..\EAS\BSW\Com\Com.c	  6388  *
; ..\EAS\BSW\Com\Com.c	  6389  * Description:   This service send signal group data in array type
; ..\EAS\BSW\Com\Com.c	  6390  *
; ..\EAS\BSW\Com\Com.c	  6391  * Inputs:        SignalGroupId: Signal group handle
; ..\EAS\BSW\Com\Com.c	  6392  *                SignalGroupArrayPtr: Reference to the Signal data to be read
; ..\EAS\BSW\Com\Com.c	  6393  *
; ..\EAS\BSW\Com\Com.c	  6394  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  6395  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  6396  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  6397  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  6398                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  6399  *
; ..\EAS\BSW\Com\Com.c	  6400  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6401  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6402  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6403  
; ..\EAS\BSW\Com\Com.c	  6404  #if((STD_ON == COM_Enable_SignalGroupArrayApi) && (STD_ON == COM_TX_SIGNAL_GROUP_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  6405  FUNC(uint8, COM_CODE) Com_SendSignalGroupArray
; ..\EAS\BSW\Com\Com.c	  6406  (
; ..\EAS\BSW\Com\Com.c	  6407      Com_SignalGroupIdType SignalGroupId,
; ..\EAS\BSW\Com\Com.c	  6408      P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)  SignalGroupArrayPtr
; ..\EAS\BSW\Com\Com.c	  6409  )
; ..\EAS\BSW\Com\Com.c	  6410  {
; ..\EAS\BSW\Com\Com.c	  6411      uint8 result = COM_SERVICE_NOT_AVAILABLE;/* return not available when det err*/
; ..\EAS\BSW\Com\Com.c	  6412      P2VAR(uint8, AUTOMATIC, COM_VAR) destDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  6413      PduIdType TxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  6414  
; ..\EAS\BSW\Com\Com.c	  6415  
; ..\EAS\BSW\Com\Com.c	  6416  
; ..\EAS\BSW\Com\Com.c	  6417      if(COM_INIT != Com_InitStateFlag)
; ..\EAS\BSW\Com\Com.c	  6418      {
; ..\EAS\BSW\Com\Com.c	  6419          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroupArray, COM_E_UNINIT);
; ..\EAS\BSW\Com\Com.c	  6420      }
; ..\EAS\BSW\Com\Com.c	  6421      else if(SignalGroupId >= COM_TXSIG_GROUP_NUM)
; ..\EAS\BSW\Com\Com.c	  6422      {
; ..\EAS\BSW\Com\Com.c	  6423          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroupArray, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6424      }
; ..\EAS\BSW\Com\Com.c	  6425      else if(SignalGroupArrayPtr == NULL_PTR)
; ..\EAS\BSW\Com\Com.c	  6426      {
; ..\EAS\BSW\Com\Com.c	  6427          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroupArray, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6428      }
; ..\EAS\BSW\Com\Com.c	  6429      else if(COM_CFG_TXSIGGRP_SUPPORT_ARRAY(SignalGroupId) == FALSE)
; ..\EAS\BSW\Com\Com.c	  6430      {
; ..\EAS\BSW\Com\Com.c	  6431          COM_DET_REPORT_ERROR(COMServiceId_SendSignalGroupArray, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6432      }
; ..\EAS\BSW\Com\Com.c	  6433      else
; ..\EAS\BSW\Com\Com.c	  6434      {
; ..\EAS\BSW\Com\Com.c	  6435          TxIpduId = COM_CFG_TXSIGGRP_PDUID(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  6436          if((COM_TXPDU_START_BUSY == Com_TxPduState[TxIpduId]) && (TRUE == COM_CFG_TXPDU_IS_TP_PDU(TxIpduId)))
; ..\EAS\BSW\Com\Com.c	  6437          {
; ..\EAS\BSW\Com\Com.c	  6438              result = COM_BUSY;
; ..\EAS\BSW\Com\Com.c	  6439          }
; ..\EAS\BSW\Com\Com.c	  6440          else
; ..\EAS\BSW\Com\Com.c	  6441          {
; ..\EAS\BSW\Com\Com.c	  6442              SchM_Enter_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  6443              destDataPtr = &((uint8 *)COM_CFG_TXPDU_DATA_PTR(TxIpduId))[COM_CFG_TXSIGGRP_STARTBYTE(SignalGroupId)];
; ..\EAS\BSW\Com\Com.c	  6444  
; ..\EAS\BSW\Com\Com.c	  6445              Bsw_MemCpy(destDataPtr, SignalGroupArrayPtr, (uint32)COM_CFG_TXSIGGRP_SIZE(SignalGroupId));
; ..\EAS\BSW\Com\Com.c	  6446  
; ..\EAS\BSW\Com\Com.c	  6447              /* No filter and onchange check not support this version */
; ..\EAS\BSW\Com\Com.c	  6448  
; ..\EAS\BSW\Com\Com.c	  6449  #if(COM_TX_UPDATEBIT_SUPPORT == STD_ON)
; ..\EAS\BSW\Com\Com.c	  6450              /* set update bit if configured*/
; ..\EAS\BSW\Com\Com.c	  6451              if(COM_INVALID_SIG_INDEX != COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SignalGroupId))
; ..\EAS\BSW\Com\Com.c	  6452              {
; ..\EAS\BSW\Com\Com.c	  6453                  Com_SetSigUpdateBit(TxIpduId, COM_CFG_TXSIGGRP_UPDATEBIT_INDEX(SignalGroupId));
; ..\EAS\BSW\Com\Com.c	  6454              }
; ..\EAS\BSW\Com\Com.c	  6455  #endif
; ..\EAS\BSW\Com\Com.c	  6456  
; ..\EAS\BSW\Com\Com.c	  6457              /* this Asr req, when pdu is stop, data canbe updated, but return COM_SERVICE_NOT_AVAILABLE*/
; ..\EAS\BSW\Com\Com.c	  6458              /*SWS_Com_334 dont save trigger when stop*/
; ..\EAS\BSW\Com\Com.c	  6459              if(COM_TXPDU_STOP != Com_TxPduState[TxIpduId])
; ..\EAS\BSW\Com\Com.c	  6460              {
; ..\EAS\BSW\Com\Com.c	  6461  #if(STD_OFF == COM_TXMODE_PERIODIC_ONLY)
; ..\EAS\BSW\Com\Com.c	  6462                  Com_SetIpduTrigRepFlag(COM_CFG_TXSIGGRP_TRPROP(SignalGroupId), TxIpduId, FALSE);
; ..\EAS\BSW\Com\Com.c	  6463  #endif
; ..\EAS\BSW\Com\Com.c	  6464                  result = E_OK;
; ..\EAS\BSW\Com\Com.c	  6465              }
; ..\EAS\BSW\Com\Com.c	  6466              SchM_Exit_Com_COM_EXCLUSIVE_AREA_0();
; ..\EAS\BSW\Com\Com.c	  6467  
; ..\EAS\BSW\Com\Com.c	  6468          }
; ..\EAS\BSW\Com\Com.c	  6469  
; ..\EAS\BSW\Com\Com.c	  6470      }
; ..\EAS\BSW\Com\Com.c	  6471  
; ..\EAS\BSW\Com\Com.c	  6472      return result;
; ..\EAS\BSW\Com\Com.c	  6473  
; ..\EAS\BSW\Com\Com.c	  6474  
; ..\EAS\BSW\Com\Com.c	  6475  }
; ..\EAS\BSW\Com\Com.c	  6476  #endif
; ..\EAS\BSW\Com\Com.c	  6477  
; ..\EAS\BSW\Com\Com.c	  6478  
; ..\EAS\BSW\Com\Com.c	  6479  
; ..\EAS\BSW\Com\Com.c	  6480  
; ..\EAS\BSW\Com\Com.c	  6481  
; ..\EAS\BSW\Com\Com.c	  6482  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6483  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6484  * Function Name: Com_ReceiveSignalGroup SWS_Com_00201
; ..\EAS\BSW\Com\Com.c	  6485  *
; ..\EAS\BSW\Com\Com.c	  6486  * Description:   This service updates the signal object identified by
; ..\EAS\BSW\Com\Com.c	  6487  *                SignalId with the signal referenced by the SignalDataPtr
; ..\EAS\BSW\Com\Com.c	  6488  *                parameter
; ..\EAS\BSW\Com\Com.c	  6489  *
; ..\EAS\BSW\Com\Com.c	  6490  * Inputs:        SignalId: Signal handle
; ..\EAS\BSW\Com\Com.c	  6491  *                SignalDataPtr: Reference to the Signal data to be transmitted
; ..\EAS\BSW\Com\Com.c	  6492  *
; ..\EAS\BSW\Com\Com.c	  6493  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  6494  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  6495  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  6496  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  6497                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  6498  *
; ..\EAS\BSW\Com\Com.c	  6499  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6500  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6501  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6502  FUNC(uint8, COM_CODE) Com_ReceiveSignalGroup
; Function Com_ReceiveSignalGroup
.L444:
Com_ReceiveSignalGroup:	.type	func

; ..\EAS\BSW\Com\Com.c	  6503  (
; ..\EAS\BSW\Com\Com.c	  6504      Com_SignalGroupIdType SignalGroupId
; ..\EAS\BSW\Com\Com.c	  6505  )
; ..\EAS\BSW\Com\Com.c	  6506  {
; ..\EAS\BSW\Com\Com.c	  6507      uint8 result = COM_SERVICE_NOT_AVAILABLE;/* return not available when det err*/
	mov	d10,#128
.L1338:

; ..\EAS\BSW\Com\Com.c	  6508  #if(STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6509      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  6510      Com_SignalIdType GrpSigIndex = (Com_SignalIdType)0;
; ..\EAS\BSW\Com\Com.c	  6511      P2VAR(void, AUTOMATIC, COM_VAR) destDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  6512      PduLengthType length = (PduLengthType)0;
; ..\EAS\BSW\Com\Com.c	  6513  #endif
; ..\EAS\BSW\Com\Com.c	  6514  
; ..\EAS\BSW\Com\Com.c	  6515      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1701:
	jeq	d15,#1,.L306
.L1702:

; ..\EAS\BSW\Com\Com.c	  6516      {
; ..\EAS\BSW\Com\Com.c	  6517          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroup, COM_E_UNINIT);
	mov	d4,#50
.L1337:
	mov	d5,#0
	mov	d6,#14
	mov	d7,#2
	call	Det_ReportError
.L1703:
	j	.L307
.L306:

; ..\EAS\BSW\Com\Com.c	  6518      }
; ..\EAS\BSW\Com\Com.c	  6519  #if(STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6520      else if(SignalGroupId >= COM_RXSIG_GROUP_NUM)
	mov	d15,#19
.L1704:
	jge.u	d4,d15,.L308
.L1705:

; ..\EAS\BSW\Com\Com.c	  6521      {
; ..\EAS\BSW\Com\Com.c	  6522          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroup, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6523      }
; ..\EAS\BSW\Com\Com.c	  6524      else if(COM_CFG_RXSIGGRP_SUPPORT_ARRAY(SignalGroupId) == TRUE)
	mul	d15,d4,#12
	movh.a	a15,#@his(ComCfgRxSignalGroup)
	lea	a15,[a15]@los(ComCfgRxSignalGroup)
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]2
.L1706:
	jne	d15,#1,.L309
.L308:

; ..\EAS\BSW\Com\Com.c	  6525      {
; ..\EAS\BSW\Com\Com.c	  6526          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroup, COM_E_PARAM);
	mov	d4,#50
.L1339:
	mov	d5,#0
	mov	d6,#14
	mov	d7,#1
	call	Det_ReportError
.L1707:
	j	.L310
.L309:

; ..\EAS\BSW\Com\Com.c	  6527      }
; ..\EAS\BSW\Com\Com.c	  6528      else
; ..\EAS\BSW\Com\Com.c	  6529      {
; ..\EAS\BSW\Com\Com.c	  6530          RxIpduId = COM_CFG_RXSIGGRP_PDUID(SignalGroupId);
	mul	d15,d4,#12
	movh.a	a15,#@his(ComCfgRxSignalGroup)
	lea	a15,[a15]@los(ComCfgRxSignalGroup)
	addsc.a	a15,a15,d15,#0
	ld.bu	d12,[a15]
.L1340:

; ..\EAS\BSW\Com\Com.c	  6531          /* dont need report busy , as copy process is protected by Area2
; ..\EAS\BSW\Com\Com.c	  6532             and always read old data
; ..\EAS\BSW\Com\Com.c	  6533          */
; ..\EAS\BSW\Com\Com.c	  6534  
; ..\EAS\BSW\Com\Com.c	  6535          SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  6536          for(GrpSigIndex = COM_CFG_RXSIGGRP_SIGSTART(SignalGroupId); GrpSigIndex <= COM_CFG_RXSIGGRP_SIGSTOP(SignalGroupId); GrpSigIndex++)
	movh.a	a15,#@his(ComCfgRxSignalGroup)
	lea	a15,[a15]@los(ComCfgRxSignalGroup)
	addsc.a	a15,a15,d15,#0
	ld.hu	d8,[a15]4
.L1341:

; ..\EAS\BSW\Com\Com.c	  6537          {
; ..\EAS\BSW\Com\Com.c	  6538              destDataPtr = COM_CFG_RXSIG_GROUP_TEMP_BUF(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6539              length = COM_CFG_RXSIG_LENGTH(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6540  
; ..\EAS\BSW\Com\Com.c	  6541  #if(STD_ON == COM_RX_DYN_PDU_SUPPORT)
; ..\EAS\BSW\Com\Com.c	  6542              if(COM_SIG_DYN == COM_CFG_RXSIG_TYPE(GrpSigIndex))
; ..\EAS\BSW\Com\Com.c	  6543              {
; ..\EAS\BSW\Com\Com.c	  6544                  length = COM_RXPDU_DYN_LENGTH(RxIpduId) - COM_CFG_RXSIG_START_BYTE_INDEX(GrpSigIndex);
; ..\EAS\BSW\Com\Com.c	  6545                  *COM_CFG_RXSIG_GROUP_TEMPLENGTH_PTR(GrpSigIndex) = length;
; ..\EAS\BSW\Com\Com.c	  6546              }
; ..\EAS\BSW\Com\Com.c	  6547  #endif
; ..\EAS\BSW\Com\Com.c	  6548  
; ..\EAS\BSW\Com\Com.c	  6549              COM_CFG_RXSIG_READ_SIG_FUN(GrpSigIndex)(destDataPtr, COM_CFG_RXPDU_DATA_PTR(RxIpduId), length);
	sha	d9,d12,#5
.L1708:
	mov	d11,d15
.L1709:
	j	.L311
.L312:
	mul	d15,d8,#48
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a4,[a15]16
.L1343:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.hu	d4,[a15]10
.L1345:
	movh.a	a15,#@his(ComRxSigCfgTable)
	lea	a15,[a15]@los(ComRxSigCfgTable)
	addsc.a	a15,a15,d15,#0
	ld.a	a2,[a15]32
.L1710:
	movh.a	a15,#@his(ComRxPduCfgTable)
	lea	a15,[a15]@los(ComRxPduCfgTable)
	addsc.a	a15,a15,d9,#0
	ld.a	a5,[a15]24
.L1711:
	calli	a2
.L1344:
	add	d8,#1
.L1342:
	extr.u	d8,d8,#0,#16
.L311:
	movh.a	a15,#@his(ComCfgRxSignalGroup)
	lea	a15,[a15]@los(ComCfgRxSignalGroup)
	addsc.a	a15,a15,d11,#0
	ld.hu	d15,[a15]6
.L1712:
	jge.u	d15,d8,.L312
.L1713:

; ..\EAS\BSW\Com\Com.c	  6550          }
; ..\EAS\BSW\Com\Com.c	  6551          SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  6552  
; ..\EAS\BSW\Com\Com.c	  6553          /*
; ..\EAS\BSW\Com\Com.c	  6554             when stop , read old data but return COM_SERVICE_NOT_AVAILABLE, no det err
; ..\EAS\BSW\Com\Com.c	  6555             See Page54 Table3
; ..\EAS\BSW\Com\Com.c	  6556          */
; ..\EAS\BSW\Com\Com.c	  6557  
; ..\EAS\BSW\Com\Com.c	  6558          if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1714:
	addsc.a	a15,a15,d12,#0
	ld.bu	d15,[a15]
.L1715:
	jeq	d15,#0,.L313
.L1716:

; ..\EAS\BSW\Com\Com.c	  6559          {
; ..\EAS\BSW\Com\Com.c	  6560              result = E_OK;
	mov	d10,#0
.L313:
.L310:
.L307:

; ..\EAS\BSW\Com\Com.c	  6561          }
; ..\EAS\BSW\Com\Com.c	  6562  
; ..\EAS\BSW\Com\Com.c	  6563      }
; ..\EAS\BSW\Com\Com.c	  6564  #endif
; ..\EAS\BSW\Com\Com.c	  6565      return result;
	mov	d2,d10
.L1346:

; ..\EAS\BSW\Com\Com.c	  6566  
; ..\EAS\BSW\Com\Com.c	  6567  }
	ret
.L857:
	
__Com_ReceiveSignalGroup_function_end:
	.size	Com_ReceiveSignalGroup,__Com_ReceiveSignalGroup_function_end-Com_ReceiveSignalGroup
.L577:
	; End of function
	
	.sdecl	'.text.Com.Com_GetTxIpduState',code,cluster('Com_GetTxIpduState')
	.sect	'.text.Com.Com_GetTxIpduState'
	.align	2
	
	.global	Com_GetTxIpduState

; ..\EAS\BSW\Com\Com.c	  6568  
; ..\EAS\BSW\Com\Com.c	  6569  
; ..\EAS\BSW\Com\Com.c	  6570  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6571  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6572  * Function Name: Com_ReceiveSignalGroupArray SWS_Com_00854
; ..\EAS\BSW\Com\Com.c	  6573  *
; ..\EAS\BSW\Com\Com.c	  6574  * Description:   This service copy signal group data in array type
; ..\EAS\BSW\Com\Com.c	  6575  *
; ..\EAS\BSW\Com\Com.c	  6576  * Inputs:        SignalGroupId: Signal group handle
; ..\EAS\BSW\Com\Com.c	  6577  *                SignalGroupArrayPtr: Reference to the Signal data to be read
; ..\EAS\BSW\Com\Com.c	  6578  *
; ..\EAS\BSW\Com\Com.c	  6579  * Outputs:       E_OK:                      service has been accepted
; ..\EAS\BSW\Com\Com.c	  6580  *                COM_SERVICE_NOT_AVAILABLE: corresponding I-PDU group was
; ..\EAS\BSW\Com\Com.c	  6581  *                                           stopped
; ..\EAS\BSW\Com\Com.c	  6582  *                COM_BUSY:                  in case the TP-Buffer is lock for
; ..\EAS\BSW\Com\Com.c	  6583                                              large data type handling
; ..\EAS\BSW\Com\Com.c	  6584  *
; ..\EAS\BSW\Com\Com.c	  6585  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6586  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6587  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6588  #if((STD_ON == COM_Enable_SignalGroupArrayApi) && (STD_ON == COM_RX_SIGNAL_GROUP_SUPPORT))
; ..\EAS\BSW\Com\Com.c	  6589  FUNC(uint8, COM_CODE) Com_ReceiveSignalGroupArray
; ..\EAS\BSW\Com\Com.c	  6590  (
; ..\EAS\BSW\Com\Com.c	  6591      Com_SignalGroupIdType SignalGroupId,
; ..\EAS\BSW\Com\Com.c	  6592      P2VAR(uint8, AUTOMATIC, COM_APPL_DATA)  SignalGroupArrayPtr
; ..\EAS\BSW\Com\Com.c	  6593  )
; ..\EAS\BSW\Com\Com.c	  6594  {
; ..\EAS\BSW\Com\Com.c	  6595      uint8 result = COM_SERVICE_NOT_AVAILABLE;/* return not available when det err*/
; ..\EAS\BSW\Com\Com.c	  6596      P2VAR(uint8, AUTOMATIC, COM_VAR) srcDataPtr = NULL_PTR;
; ..\EAS\BSW\Com\Com.c	  6597      PduIdType RxIpduId = (PduIdType)0;
; ..\EAS\BSW\Com\Com.c	  6598  
; ..\EAS\BSW\Com\Com.c	  6599  
; ..\EAS\BSW\Com\Com.c	  6600  
; ..\EAS\BSW\Com\Com.c	  6601      if(COM_INIT != Com_InitStateFlag)
; ..\EAS\BSW\Com\Com.c	  6602      {
; ..\EAS\BSW\Com\Com.c	  6603          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroupArray, COM_E_UNINIT);
; ..\EAS\BSW\Com\Com.c	  6604      }
; ..\EAS\BSW\Com\Com.c	  6605      else if(SignalGroupId >= COM_RXSIG_GROUP_NUM)
; ..\EAS\BSW\Com\Com.c	  6606      {
; ..\EAS\BSW\Com\Com.c	  6607          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroupArray, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6608      }
; ..\EAS\BSW\Com\Com.c	  6609      else if(SignalGroupArrayPtr == NULL_PTR)
; ..\EAS\BSW\Com\Com.c	  6610      {
; ..\EAS\BSW\Com\Com.c	  6611          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroupArray, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6612      }
; ..\EAS\BSW\Com\Com.c	  6613      else if(COM_CFG_RXSIGGRP_SUPPORT_ARRAY(SignalGroupId) == FALSE)
; ..\EAS\BSW\Com\Com.c	  6614      {
; ..\EAS\BSW\Com\Com.c	  6615          COM_DET_REPORT_ERROR(COMServiceId_ReceiveSignalGroupArray, COM_E_PARAM);
; ..\EAS\BSW\Com\Com.c	  6616      }
; ..\EAS\BSW\Com\Com.c	  6617      else
; ..\EAS\BSW\Com\Com.c	  6618      {
; ..\EAS\BSW\Com\Com.c	  6619          /* dont need report busy , as copy process is protected by Area2
; ..\EAS\BSW\Com\Com.c	  6620             and always read old data
; ..\EAS\BSW\Com\Com.c	  6621          */
; ..\EAS\BSW\Com\Com.c	  6622  
; ..\EAS\BSW\Com\Com.c	  6623          RxIpduId = COM_CFG_RXSIGGRP_PDUID(SignalGroupId);
; ..\EAS\BSW\Com\Com.c	  6624          srcDataPtr = &((uint8 *)COM_CFG_RXPDU_DATA_PTR(RxIpduId))[COM_CFG_RXSIGGRP_STARTBYTE(SignalGroupId)];
; ..\EAS\BSW\Com\Com.c	  6625  
; ..\EAS\BSW\Com\Com.c	  6626          SchM_Enter_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  6627          Bsw_MemCpy(SignalGroupArrayPtr, srcDataPtr, (uint32)COM_CFG_RXSIGGRP_SIZE(SignalGroupId));
; ..\EAS\BSW\Com\Com.c	  6628          SchM_Exit_Com_COM_EXCLUSIVE_AREA_2();
; ..\EAS\BSW\Com\Com.c	  6629  
; ..\EAS\BSW\Com\Com.c	  6630          /*
; ..\EAS\BSW\Com\Com.c	  6631             when stop , read old data but return COM_SERVICE_NOT_AVAILABLE, no det err
; ..\EAS\BSW\Com\Com.c	  6632             See Page54 Table3
; ..\EAS\BSW\Com\Com.c	  6633          */
; ..\EAS\BSW\Com\Com.c	  6634  
; ..\EAS\BSW\Com\Com.c	  6635          if(COM_RXPDU_STOP != Com_RxPduState[RxIpduId])
; ..\EAS\BSW\Com\Com.c	  6636          {
; ..\EAS\BSW\Com\Com.c	  6637              result = E_OK;
; ..\EAS\BSW\Com\Com.c	  6638          }
; ..\EAS\BSW\Com\Com.c	  6639  
; ..\EAS\BSW\Com\Com.c	  6640      }
; ..\EAS\BSW\Com\Com.c	  6641  
; ..\EAS\BSW\Com\Com.c	  6642      return result;
; ..\EAS\BSW\Com\Com.c	  6643  }
; ..\EAS\BSW\Com\Com.c	  6644  
; ..\EAS\BSW\Com\Com.c	  6645  #endif
; ..\EAS\BSW\Com\Com.c	  6646  
; ..\EAS\BSW\Com\Com.c	  6647  
; ..\EAS\BSW\Com\Com.c	  6648  
; ..\EAS\BSW\Com\Com.c	  6649  #if(STD_ON == COM_TXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  6650  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6651  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6652  * Function Name: Com_GetTxIpduState 
; ..\EAS\BSW\Com\Com.c	  6653  *
; ..\EAS\BSW\Com\Com.c	  6654  * Description:   return start or stop state of PDU
; ..\EAS\BSW\Com\Com.c	  6655  *
; ..\EAS\BSW\Com\Com.c	  6656  * Inputs:        TxPduId
; ..\EAS\BSW\Com\Com.c	  6657  *
; ..\EAS\BSW\Com\Com.c	  6658  *
; ..\EAS\BSW\Com\Com.c	  6659  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	  6660  *
; ..\EAS\BSW\Com\Com.c	  6661  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6662  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6663  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6664  FUNC(boolean, COM_CODE) Com_GetTxIpduState
; Function Com_GetTxIpduState
.L446:
Com_GetTxIpduState:	.type	func

; ..\EAS\BSW\Com\Com.c	  6665  (
; ..\EAS\BSW\Com\Com.c	  6666       PduIdType TxPduId
; ..\EAS\BSW\Com\Com.c	  6667  )
; ..\EAS\BSW\Com\Com.c	  6668  {
; ..\EAS\BSW\Com\Com.c	  6669      boolean flag = FALSE;
	mov	d8,#0
.L1348:

; ..\EAS\BSW\Com\Com.c	  6670  
; ..\EAS\BSW\Com\Com.c	  6671  
; ..\EAS\BSW\Com\Com.c	  6672      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1737:
	jeq	d15,#1,.L315
.L1738:

; ..\EAS\BSW\Com\Com.c	  6673      {
; ..\EAS\BSW\Com\Com.c	  6674          COM_DET_REPORT_ERROR(COMServiceId_GetTxIpduState, COM_E_UNINIT);
	mov	d4,#50
.L1347:
	mov	d5,d8
.L1349:
	mov	d6,#241
	mov	d7,#2
	call	Det_ReportError
.L1350:
	j	.L316
.L315:

; ..\EAS\BSW\Com\Com.c	  6675      }
; ..\EAS\BSW\Com\Com.c	  6676      else if(TxPduId >= COM_TXPDU_NUM)
	mov	d15,#46
.L1739:
	jlt.u	d4,d15,.L317
.L1740:

; ..\EAS\BSW\Com\Com.c	  6677      {
; ..\EAS\BSW\Com\Com.c	  6678          COM_DET_REPORT_ERROR(COMServiceId_GetTxIpduState, COM_E_PARAM);
	mov	d4,#50
.L1351:
	mov	d5,#0
	mov	d6,#241
	mov	d7,#1
	call	Det_ReportError
.L1741:
	j	.L318
.L317:

; ..\EAS\BSW\Com\Com.c	  6679      }
; ..\EAS\BSW\Com\Com.c	  6680      else
; ..\EAS\BSW\Com\Com.c	  6681      {
; ..\EAS\BSW\Com\Com.c	  6682          if(COM_TXPDU_STOP != Com_TxPduState[TxPduId])
	movh.a	a15,#@his(Com_TxPduState)
	lea	a15,[a15]@los(Com_TxPduState)
.L1742:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1743:
	jeq	d15,#0,.L319
.L1744:

; ..\EAS\BSW\Com\Com.c	  6683          {
; ..\EAS\BSW\Com\Com.c	  6684              flag = TRUE;
	mov	d8,#1
.L319:
.L318:
.L316:

; ..\EAS\BSW\Com\Com.c	  6685          }
; ..\EAS\BSW\Com\Com.c	  6686      }
; ..\EAS\BSW\Com\Com.c	  6687  
; ..\EAS\BSW\Com\Com.c	  6688      return flag;
	mov	d2,d8
.L1352:

; ..\EAS\BSW\Com\Com.c	  6689  }
	ret
.L871:
	
__Com_GetTxIpduState_function_end:
	.size	Com_GetTxIpduState,__Com_GetTxIpduState_function_end-Com_GetTxIpduState
.L587:
	; End of function
	
	.sdecl	'.text.Com.Com_GetRxIpduState',code,cluster('Com_GetRxIpduState')
	.sect	'.text.Com.Com_GetRxIpduState'
	.align	2
	
	.global	Com_GetRxIpduState

; ..\EAS\BSW\Com\Com.c	  6690  #endif
; ..\EAS\BSW\Com\Com.c	  6691  
; ..\EAS\BSW\Com\Com.c	  6692  
; ..\EAS\BSW\Com\Com.c	  6693  #if(STD_ON == COM_RXPDU_FUN)
; ..\EAS\BSW\Com\Com.c	  6694  /* BEGIN_FUNCTION_HDR
; ..\EAS\BSW\Com\Com.c	  6695  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6696  * Function Name: Com_GetRxIpduState 
; ..\EAS\BSW\Com\Com.c	  6697  *
; ..\EAS\BSW\Com\Com.c	  6698  * Description:   return start or stop state of PDU
; ..\EAS\BSW\Com\Com.c	  6699  *
; ..\EAS\BSW\Com\Com.c	  6700  * Inputs:        RxPduId
; ..\EAS\BSW\Com\Com.c	  6701  *
; ..\EAS\BSW\Com\Com.c	  6702  *
; ..\EAS\BSW\Com\Com.c	  6703  * Outputs:       boolean
; ..\EAS\BSW\Com\Com.c	  6704  *
; ..\EAS\BSW\Com\Com.c	  6705  * Limitations:   None
; ..\EAS\BSW\Com\Com.c	  6706  ********************************************************************************
; ..\EAS\BSW\Com\Com.c	  6707  END_FUNCTION_HDR*/
; ..\EAS\BSW\Com\Com.c	  6708  FUNC(boolean, COM_CODE) Com_GetRxIpduState
; Function Com_GetRxIpduState
.L448:
Com_GetRxIpduState:	.type	func

; ..\EAS\BSW\Com\Com.c	  6709  (
; ..\EAS\BSW\Com\Com.c	  6710       PduIdType RxPduId
; ..\EAS\BSW\Com\Com.c	  6711  )
; ..\EAS\BSW\Com\Com.c	  6712  {
; ..\EAS\BSW\Com\Com.c	  6713      boolean flag = FALSE;
	mov	d8,#0
.L1354:

; ..\EAS\BSW\Com\Com.c	  6714  
; ..\EAS\BSW\Com\Com.c	  6715  
; ..\EAS\BSW\Com\Com.c	  6716      if(COM_INIT != Com_InitStateFlag)
	movh.a	a15,#@his(Com_InitStateFlag)
	ld.bu	d15,[a15]@los(Com_InitStateFlag)
.L1749:
	jeq	d15,#1,.L321
.L1750:

; ..\EAS\BSW\Com\Com.c	  6717      {
; ..\EAS\BSW\Com\Com.c	  6718          COM_DET_REPORT_ERROR(COMServiceId_GetRxIpduState, COM_E_UNINIT);
	mov	d4,#50
.L1353:
	mov	d5,d8
.L1355:
	mov	d6,#242
	mov	d7,#2
	call	Det_ReportError
.L1356:
	j	.L322
.L321:

; ..\EAS\BSW\Com\Com.c	  6719      }
; ..\EAS\BSW\Com\Com.c	  6720      else if(RxPduId >= COM_RXPDU_NUM)
	mov	d15,#58
.L1751:
	jlt.u	d4,d15,.L323
.L1752:

; ..\EAS\BSW\Com\Com.c	  6721      {
; ..\EAS\BSW\Com\Com.c	  6722          COM_DET_REPORT_ERROR(COMServiceId_GetRxIpduState, COM_E_PARAM);
	mov	d4,#50
.L1357:
	mov	d5,#0
	mov	d6,#242
	mov	d7,#1
	call	Det_ReportError
.L1753:
	j	.L324
.L323:

; ..\EAS\BSW\Com\Com.c	  6723      }
; ..\EAS\BSW\Com\Com.c	  6724      else
; ..\EAS\BSW\Com\Com.c	  6725      {
; ..\EAS\BSW\Com\Com.c	  6726          if(COM_RXPDU_STOP != Com_RxPduState[RxPduId])
	movh.a	a15,#@his(Com_RxPduState)
	lea	a15,[a15]@los(Com_RxPduState)
.L1754:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L1755:
	jeq	d15,#0,.L325
.L1756:

; ..\EAS\BSW\Com\Com.c	  6727          {
; ..\EAS\BSW\Com\Com.c	  6728              flag = TRUE;
	mov	d8,#1
.L325:
.L324:
.L322:

; ..\EAS\BSW\Com\Com.c	  6729          }
; ..\EAS\BSW\Com\Com.c	  6730      }
; ..\EAS\BSW\Com\Com.c	  6731  
; ..\EAS\BSW\Com\Com.c	  6732      return flag;
	mov	d2,d8
.L1358:

; ..\EAS\BSW\Com\Com.c	  6733  }
	ret
.L874:
	
__Com_GetRxIpduState_function_end:
	.size	Com_GetRxIpduState,__Com_GetRxIpduState_function_end-Com_GetRxIpduState
.L592:
	; End of function
	
	.sdecl	'.data.Com.Com_InitStateFlag',data,cluster('Com_InitStateFlag')
	.sect	'.data.Com.Com_InitStateFlag'
Com_InitStateFlag:	.type	object
	.size	Com_InitStateFlag,1
	.space	1
	.calls	'Com_IpduGroupStart_Internal','Com_SwitchTxPduMode'
	.calls	'Com_IpduGroupStart_Internal','Com_SwitchRxPduMode'
	.calls	'Com_IpduGroupStop_Internal','Com_IsPduStart'
	.calls	'Com_IpduGroupStop_Internal','Com_SwitchTxPduMode'
	.calls	'Com_IpduGroupStop_Internal','Com_CbkTxErrAck_PDU'
	.calls	'Com_IpduGroupStop_Internal','Com_SwitchRxPduMode'
	.calls	'Com_WriteSignal_Internal','__INDIRECT__'
	.calls	'Com_WriteSignal_Internal','Com_SetIpduTrigRepFlag'
	.calls	'Com_InitTxPduValue','__INDIRECT__'
	.calls	'Com_InitTxPdu','Com_InitTxPduValue'
	.calls	'Com_SwitchTxPduMode','Com_InitTxPduValue'
	.calls	'Com_CbkTxErrAck_PDU','__INDIRECT__'
	.calls	'Com_TxInit','Com_InitTxPdu'
	.calls	'Com_TxModeProcess','Com_HandleDirect'
	.calls	'Com_TxModeProcess','Com_HandlePeriod'
	.calls	'Com_TxModeProcess','Com_HandleNone'
	.calls	'Com_TransmitPdu','__INDIRECT__'
	.calls	'Com_TransmitPdu','PduR_ComTransmit'
	.calls	'Com_TransmitPdu','Com_ProcessTxConf'
	.calls	'Com_CbkTxAck_PDU','__INDIRECT__'
	.calls	'Com_ProcessTxConf','Com_CbkTxAck_PDU'
	.calls	'Com_ProcessTxConf','Com_CbkTxErrAck_PDU'
	.calls	'Com_InitRxPduValue','Com_ReplaceRxSignalWithInit'
	.calls	'Com_InitRxPdu','Com_InitRxPduValue'
	.calls	'Com_SwitchRxPduMode','Com_InitRxPduValue'
	.calls	'Com_RxInit','Com_InitRxPdu'
	.calls	'Com_ReplaceRxSignalWithInit','__INDIRECT__'
	.calls	'Com_HandleRxPdu_DirectCopy','__INDIRECT__'
	.calls	'Com_RxTimerOutMonitor','Com_ReplaceRxSignalWithInit'
	.calls	'Com_RxTimerOutMonitor','__INDIRECT__'
	.calls	'Com_Init','Com_RxInit'
	.calls	'Com_Init','Com_TxInit'
	.calls	'Com_DeInit','Com_InitRxPdu'
	.calls	'Com_DeInit','Com_InitTxPdu'
	.calls	'Com_SendSignal','Det_ReportError'
	.calls	'Com_SendSignal','Com_WriteSignal_Internal'
	.calls	'Com_SendDynSignal','Det_ReportError'
	.calls	'Com_TxConfirmation','Det_ReportError'
	.calls	'Com_TxConfirmation','Com_ProcessTxConf'
	.calls	'Com_MainFunctionTx','Det_ReportError'
	.calls	'Com_MainFunctionTx','Com_ProcessTxConf'
	.calls	'Com_MainFunctionTx','Com_TxModeProcess'
	.calls	'Com_MainFunctionTx','Com_TransmitPdu'
	.calls	'Com_RxIndication','Det_ReportError'
	.calls	'Com_RxIndication','Com_CheckRxLength'
	.calls	'Com_RxIndication','__INDIRECT__'
	.calls	'Com_RxIndication','Bsw_MemCpy'
	.calls	'Com_RxIndication','Com_HandleRxPdu_DirectCopy'
	.calls	'Com_MainFunctionRx','Det_ReportError'
	.calls	'Com_MainFunctionRx','Com_HandleRxPdu_DirectCopy'
	.calls	'Com_MainFunctionRx','Com_RxTimerOutMonitor'
	.calls	'Com_ReceiveSignal','Det_ReportError'
	.calls	'Com_ReceiveSignal','__INDIRECT__'
	.calls	'Com_ReceiveDynSignal','Det_ReportError'
	.calls	'Com_SwitchIpduTxMode','Det_ReportError'
	.calls	'Com_TriggerIPDUSend','Det_ReportError'
	.calls	'Com_TriggerTransmit','Det_ReportError'
	.calls	'Com_TriggerTransmit','Bsw_MemCpy'
	.calls	'Com_TpTxConfirmation','Det_ReportError'
	.calls	'Com_CopyTxData','Det_ReportError'
	.calls	'Com_StartOfReception','Det_ReportError'
	.calls	'Com_CopyRxData','Det_ReportError'
	.calls	'Com_TpRxIndication','Det_ReportError'
	.calls	'Com_ClearIpduGroupVector','Det_ReportError'
	.calls	'Com_SetIpduGroup','Det_ReportError'
	.calls	'Com_ReceptionDMControl','Det_ReportError'
	.calls	'Com_ReceptionDMControl','Com_IsPduDMEnable_Internal'
	.calls	'Com_IpduGroupControl','Det_ReportError'
	.calls	'Com_IpduGroupControl','Com_IpduGroupStart_Internal'
	.calls	'Com_IpduGroupControl','Com_IpduGroupStop_Internal'
	.calls	'Com_IpduGroupStart','Det_ReportError'
	.calls	'Com_IpduGroupStart','Com_IpduGroupStart_Internal'
	.calls	'Com_IpduGroupStop','Det_ReportError'
	.calls	'Com_IpduGroupStop','Com_IpduGroupStop_Internal'
	.calls	'Com_GetIpduGroupState','Det_ReportError'
	.calls	'Com_EnableReceptionDM','Det_ReportError'
	.calls	'Com_DisableReceptionDM','Det_ReportError'
	.calls	'Com_DisableReceptionDM','Com_IsPduDMEnable_Internal'
	.calls	'Com_MainFunctionRouteSignals','Det_ReportError'
	.calls	'Com_SendSignalGroup','Det_ReportError'
	.calls	'Com_InvalidateSignalGroup','Det_ReportError'
	.calls	'Com_ReceiveSignalGroup','Det_ReportError'
	.calls	'Com_ReceiveSignalGroup','__INDIRECT__'
	.calls	'Com_GetTxIpduState','Det_ReportError'
	.calls	'Com_GetRxIpduState','Det_ReportError'
	.calls	'Com_IsPduStart','',0
	.calls	'Com_IpduGroupStart_Internal','',0
	.calls	'Com_IpduGroupStop_Internal','',0
	.calls	'Com_WriteSignal_Internal','',0
	.calls	'Com_InitTxPduValue','',0
	.calls	'Com_InitTxPdu','',0
	.calls	'Com_SwitchTxPduMode','',0
	.calls	'Com_CbkTxErrAck_PDU','',0
	.calls	'Com_TxInit','',0
	.calls	'Com_HandleDirect','',0
	.calls	'Com_HandlePeriod','',0
	.calls	'Com_HandleNone','',0
	.calls	'Com_TxModeProcess','',0
	.calls	'Com_TransmitPdu','',8
	.calls	'Com_CbkTxAck_PDU','',0
	.calls	'Com_ProcessTxConf','',0
	.calls	'Com_CheckRxLength','',0
	.calls	'Com_InitRxPduValue','',0
	.calls	'Com_InitRxPdu','',0
	.calls	'Com_SwitchRxPduMode','',0
	.calls	'Com_RxInit','',0
	.calls	'Com_ReplaceRxSignalWithInit','',0
	.calls	'Com_HandleRxPdu_DirectCopy','',0
	.calls	'Com_RxTimerOutMonitor','',0
	.calls	'Com_SetIpduTrigRepFlag','',0
	.calls	'Com_Init','',0
	.calls	'Com_DeInit','',0
	.calls	'Com_GetStatus','',0
	.calls	'Com_SendSignal','',0
	.calls	'Com_InvalidateSignal','',0
	.calls	'Com_SendDynSignal','',0
	.calls	'Com_TxConfirmation','',0
	.calls	'Com_MainFunctionTx','',0
	.calls	'Com_RxIndication','',0
	.calls	'Com_MainFunctionRx','',0
	.calls	'Com_ReceiveSignal','',0
	.calls	'Com_ReceiveDynSignal','',0
	.calls	'Com_SwitchIpduTxMode','',0
	.calls	'Com_TriggerIPDUSend','',0
	.calls	'Com_TriggerTransmit','',0
	.calls	'Com_TpTxConfirmation','',0
	.calls	'Com_CopyTxData','',0
	.calls	'Com_StartOfReception','',0
	.calls	'Com_CopyRxData','',0
	.calls	'Com_TpRxIndication','',0
	.calls	'Com_ClearIpduGroupVector','',0
	.calls	'Com_SetIpduGroup','',0
	.calls	'Com_IsPduDMEnable_Internal','',0
	.calls	'Com_ReceptionDMControl','',0
	.calls	'Com_IpduGroupControl','',0
	.calls	'Com_IpduGroupStart','',0
	.calls	'Com_IpduGroupStop','',0
	.calls	'Com_GetIpduGroupState','',0
	.calls	'Com_EnableReceptionDM','',0
	.calls	'Com_DisableReceptionDM','',0
	.calls	'Com_MainFunctionRouteSignals','',0
	.calls	'Com_SendSignalGroup','',0
	.calls	'Com_InvalidateSignalGroup','',0
	.calls	'Com_ReceiveSignalGroup','',0
	.calls	'Com_GetTxIpduState','',0
	.extern	Bsw_MemCpy
	.extern	Com_RxPduTable
	.extern	Com_TxPduTable
	.extern	Com_TxPduState
	.extern	Com_PDUTrigRepFlag
	.extern	Com_TriggerPDUSendFlag
	.extern	Com_RxPduState
	.extern	Com_IpduGroupStartFlag
	.extern	Com_IpduGroupDMEnableFlag
	.extern	ComTxPduCfgTable
	.extern	ComTxSigCfgTable
	.extern	ComRxPduCfgTable
	.extern	ComRxSigCfgTable
	.extern	ComPduGroupCfgTable
	.extern	ComCfgRxSignalGroup
	.extern	PduR_ComTransmit
	.extern	Det_ReportError
	.extern	__INDIRECT__
	.calls	'Com_GetRxIpduState','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L450:
	.word	107500
	.half	3
	.word	.L451
	.byte	4
.L449:
	.byte	1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L452
.L766:
	.byte	2
	.byte	'unsigned char',0,1,8,2
	.byte	'unsigned int',0,4,7,3
	.byte	'OsIntc_InISR2',0,3,1,227,1,31,1,1,4
	.byte	'CoreID',0,1,229,1,16
	.word	144
	.byte	4
	.byte	'ISRID',0,1,230,1,13
	.word	144
	.byte	4
	.byte	'val',0,1,231,1,15
	.word	161
	.byte	4
	.byte	'fcx',0,1,232,1,15
	.word	161
	.byte	5,0,6
	.word	177
	.byte	7
	.word	199
	.byte	7
	.word	215
	.byte	7
	.word	230
	.byte	7
	.word	243
	.byte	5,0,8
	.word	144
	.byte	9
	.word	285
	.byte	9
	.word	144
	.byte	8
	.word	295
	.byte	9
	.word	300
	.byte	2
	.byte	'unsigned long int',0,4,7,9
	.word	310
	.byte	10
	.byte	'Bsw_MemCpy',0,2,57,29,1,1,1,1,4
	.byte	'dest',0,2,59,49
	.word	290
	.byte	4
	.byte	'src',0,2,60,51
	.word	305
	.byte	4
	.byte	'size',0,2,61,18
	.word	331
	.byte	0,11
	.byte	'SduDataPtrType',0,4,189,1,40
	.word	285
.L763:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L947:
	.byte	12,4,190,1,9,8,13
	.byte	'SduDataPtr',0
	.word	394
	.byte	4,2,35,0,13
	.byte	'SduLength',0
	.word	418
	.byte	2,2,35,4,0,9
	.word	440
.L885:
	.byte	8
	.word	486
	.byte	14
	.byte	'PduR_ComTransmit',0,3,44,40
	.word	144
	.byte	1,1,1,1,4
	.byte	'id',0,3,46,15
	.word	144
	.byte	4
	.byte	'info',0,3,47,49
	.word	491
	.byte	0,8
	.word	144
	.byte	9
	.word	144
.L1008:
	.byte	8
	.word	555
	.byte	15
	.byte	'void',0
.L791:
	.byte	8
	.word	565
	.byte	16,5,99,9,1,17
	.byte	'COM_DIRECT',0,0,17
	.byte	'COM_MIXED',0,1,17
	.byte	'COM_PDU_NONE',0,2,17
	.byte	'COM_PERIODIC',0,3,17
	.byte	'COM_IFACTIVE_PDU',0,4,0,12,5,136,2,9,8,13
	.byte	'TxModeMode',0
	.word	576
	.byte	1,2,35,0,13
	.byte	'TxModeNumberOfRepetitions',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'TxModeRepetitionPeriod',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'TxModeTimeOffset',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'TxModeTimePeriod',0
	.word	418
	.byte	2,2,35,6,0,9
	.word	656
	.byte	8
	.word	802
	.byte	8
	.word	440
	.byte	18
	.word	144
	.byte	1,1,19
	.word	144
	.byte	19
	.word	812
	.byte	0,8
	.word	817
	.byte	11
	.byte	'Com_TxIpduCalloutType',0,5,186,1,9
	.word	835
	.byte	12,5,198,2,9,44,13
	.byte	'isImmProcess',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'MinimumDelayTime',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'SignalStartNum',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'SignalStopNum',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'TxIPDUGroupFlag',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'numOfPduGrp',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'PduGrpPtr',0
	.word	560
	.byte	4,2,35,12,13
	.byte	'IpduMapPdur',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'SduDataPtr',0
	.word	571
	.byte	4,2,35,20,13
	.byte	'SduLength',0
	.word	418
	.byte	2,2,35,24,13
	.byte	'TxModeTrueCfgTablePtr',0
	.word	807
	.byte	4,2,35,28,13
	.byte	'TxModeFalseCfgTablePtr',0
	.word	807
	.byte	4,2,35,32,13
	.byte	'Callout',0
	.word	840
	.byte	4,2,35,36,13
	.byte	'TxCancelTransmitSupportFlag',0
	.word	144
	.byte	1,2,35,40,13
	.byte	'isTpPdu',0
	.word	144
	.byte	1,2,35,41,13
	.byte	'unusedAreaByte',0
	.word	144
	.byte	1,2,35,42,0,9
	.word	871
	.byte	8
	.word	1256
	.byte	9
	.word	1261
.L955:
	.byte	16,5,77,9,1,17
	.byte	'COM_PENDING',0,0,17
	.byte	'COM_TRIGGERED',0,1,17
	.byte	'COM_TRIGGERED_WITHOUT_REPETITION',0,2,17
	.byte	'COM_TRIGGERED_ON_CHANGE',0,3,17
	.byte	'COM_TRIGGERED_ON_CHANGE_WITHOUT_REPETITION',0,4,17
	.byte	'COM_IFACTIVE_SIG',0,5,0,16,5,118,9,1,17
	.byte	'COM_SIG_U8',0,0,17
	.byte	'COM_SIG_U16',0,1,17
	.byte	'COM_SIG_U32',0,2,17
	.byte	'COM_SIG_BOOLEAN',0,3,17
	.byte	'COM_SIG_S8',0,4,17
	.byte	'COM_SIG_S16',0,5,17
	.byte	'COM_SIG_S32',0,6,17
	.byte	'COM_SIG_F32',0,7,17
	.byte	'COM_SIG_DYN',0,8,17
	.byte	'COM_SIG_U8N',0,9,17
	.byte	'COM_SIG_U64',0,10,17
	.byte	'COM_SIG_S64',0,11,17
	.byte	'COM_SIG_F64',0,12,0,9
	.word	565
.L772:
	.byte	8
	.word	1622
	.byte	20,1,1,8
	.word	1632
	.byte	11
	.byte	'Com_TxSigCbkTxAckType',0,5,180,1,9
	.word	1635
	.byte	9
	.word	1640
	.byte	11
	.byte	'Com_TOIndicationType',0,5,179,1,9
	.word	1635
	.byte	9
	.word	1676
	.byte	11
	.byte	'Com_TxSigTxErrType',0,5,178,1,9
	.word	1635
	.byte	9
	.word	1711
	.byte	21,1,1,19
	.word	1627
	.byte	19
	.word	571
	.byte	19
	.word	418
	.byte	0,8
	.word	1744
	.byte	11
	.byte	'Com_CopySignalType',0,5,218,1,9
	.word	1763
	.byte	9
	.word	1768
	.byte	21,1,1,19
	.word	571
	.byte	19
	.word	571
	.byte	19
	.word	418
	.byte	0,8
	.word	1801
	.byte	11
	.byte	'Com_ReadSignalType',0,5,210,1,9
	.word	1820
	.byte	9
	.word	1825
	.byte	11
	.byte	'Com_WriteSignalType',0,5,202,1,9
	.word	1763
	.byte	9
	.word	1858
	.byte	18
	.word	144
	.byte	1,1,19
	.word	144
	.byte	19
	.word	418
	.byte	19
	.word	1627
	.byte	19
	.word	418
	.byte	0,8
	.word	1892
	.byte	11
	.byte	'Com_CheckTxChangeFunPtrType',0,5,232,1,9
	.word	1920
	.byte	9
	.word	1925
	.byte	12,5,252,2,9,40,13
	.byte	'TxPduId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'SigTransferProperty',0
	.word	1271
	.byte	1,2,35,1,13
	.byte	'SigType',0
	.word	1432
	.byte	1,2,35,2,13
	.byte	'InitValPtr',0
	.word	1627
	.byte	4,2,35,4,13
	.byte	'SigStartByteIndex',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'SigLen',0
	.word	418
	.byte	2,2,35,10,13
	.byte	'SigCbkTxAckFun',0
	.word	1671
	.byte	4,2,35,12,13
	.byte	'SigTxTOIndicationFun',0
	.word	1706
	.byte	4,2,35,16,13
	.byte	'CbkTxErrFun',0
	.word	1739
	.byte	4,2,35,20,13
	.byte	'CopySignalFun',0
	.word	1796
	.byte	4,2,35,24,13
	.byte	'ReadSignalFun',0
	.word	1853
	.byte	4,2,35,28,13
	.byte	'WriteSignalFun',0
	.word	1887
	.byte	4,2,35,32,13
	.byte	'CheckChangeSignalFun',0
	.word	1962
	.byte	4,2,35,36,0,9
	.word	1967
	.byte	8
	.word	2275
	.byte	9
	.word	2280
	.byte	11
	.byte	'Com_RxIpduCalloutType',0,5,194,1,9
	.word	835
	.byte	12,5,204,3,9,32,13
	.byte	'isImmProcess',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'SignalStartNum',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'SignalStopNum',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'RxIPDUGroupFlag',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'numOfPduGrp',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'PduGrpPtr',0
	.word	560
	.byte	4,2,35,8,13
	.byte	'RxIpduTimeoutMonitorFlag',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'RxFirstTimeOut',0
	.word	418
	.byte	2,2,35,14,13
	.byte	'RxPeriodTimeOut',0
	.word	418
	.byte	2,2,35,16,13
	.byte	'Callout',0
	.word	2290
	.byte	4,2,35,20,13
	.byte	'SduDataPtr',0
	.word	571
	.byte	4,2,35,24,13
	.byte	'SduLength',0
	.word	418
	.byte	2,2,35,28,13
	.byte	'isTpPdu',0
	.word	144
	.byte	1,2,35,30,0,9
	.word	2321
	.byte	8
	.word	2618
	.byte	9
	.word	2623
	.byte	11
	.byte	'Com_RxSigCbkRxAckType',0,5,175,1,9
	.word	1635
	.byte	9
	.word	2633
	.byte	11
	.byte	'Com_RxSigCbkInvType',0,5,176,1,9
	.word	1635
	.byte	9
	.word	2669
	.byte	11
	.byte	'Com_RxSigCbkRxTOutType',0,5,177,1,9
	.word	1635
	.byte	9
	.word	2703
	.byte	9
	.word	1825
	.byte	9
	.word	1858
	.byte	11
	.byte	'Com_MoveSignalType',0,5,226,1,9
	.word	1635
	.byte	9
	.word	2750
	.byte	9
	.word	1768
	.byte	12,5,247,3,9,48,13
	.byte	'RxPduId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'SigType',0
	.word	1432
	.byte	1,2,35,1,13
	.byte	'InitValPtr',0
	.word	1627
	.byte	4,2,35,4,13
	.byte	'SigStartByteIndex',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'SigLen',0
	.word	418
	.byte	2,2,35,10,13
	.byte	'isTimeoutReplace',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'isGroupSignal',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'groupId',0
	.word	418
	.byte	2,2,35,14,13
	.byte	'GroupSigTempBuf',0
	.word	571
	.byte	4,2,35,16,13
	.byte	'RxSigCbkRxAckFun',0
	.word	2664
	.byte	4,2,35,20,13
	.byte	'RxSigCbkInvFun',0
	.word	2698
	.byte	4,2,35,24,13
	.byte	'RxSigCbkRxTOutFun',0
	.word	2735
	.byte	4,2,35,28,13
	.byte	'ReadSignalFun',0
	.word	2740
	.byte	4,2,35,32,13
	.byte	'WriteSignalFun',0
	.word	2745
	.byte	4,2,35,36,13
	.byte	'MoveSignalFun',0
	.word	2778
	.byte	4,2,35,40,13
	.byte	'CopySignalFun',0
	.word	2783
	.byte	4,2,35,44,0,9
	.word	2788
	.byte	8
	.word	3153
	.byte	9
	.word	3158
	.byte	12,5,192,4,9,16,13
	.byte	'TxIpduGroupPtr',0
	.word	560
	.byte	4,2,35,0,13
	.byte	'TxIpduGroupNum',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'RxIpduGroupPtr',0
	.word	560
	.byte	4,2,35,8,13
	.byte	'RxIpduGroupNum',0
	.word	144
	.byte	1,2,35,12,0,9
	.word	3168
	.byte	8
	.word	3271
	.byte	9
	.word	3276
	.byte	12,5,205,4,9,12,13
	.byte	'PduId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'SigGrpTransferProperty',0
	.word	1271
	.byte	1,2,35,1,13
	.byte	'isArrayAccessSupport',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'SignalStartNum',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'SignalStopNum',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'updateBitIndex',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'hasInValidVal',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'hasFilter',0
	.word	144
	.byte	1,2,35,11,0,9
	.word	3286
	.byte	8
	.word	3483
	.byte	9
	.word	3488
	.byte	9
	.word	3488
	.byte	11
	.byte	'Com_Gw_CopySigType',0,5,228,1,9
	.word	1635
	.byte	9
	.word	3503
	.byte	8
	.word	3531
	.byte	9
	.word	3536
	.byte	12,5,225,4,9,52,13
	.byte	'PBConfigId',0
	.word	310
	.byte	4,2,35,0,13
	.byte	'RxPduNum',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'RxSigNum',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'TxPduNum',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'TxSigNum',0
	.word	418
	.byte	2,2,35,10,13
	.byte	'TxSigGrpNum',0
	.word	418
	.byte	2,2,35,12,13
	.byte	'RxSigGrpNum',0
	.word	418
	.byte	2,2,35,14,13
	.byte	'PduGroupNum',0
	.word	418
	.byte	2,2,35,16,13
	.byte	'GWSigNum',0
	.word	144
	.byte	1,2,35,18,13
	.byte	'TxPduCfg',0
	.word	1266
	.byte	4,2,35,20,13
	.byte	'TxSigCfg',0
	.word	2285
	.byte	4,2,35,24,13
	.byte	'RxPduCfg',0
	.word	2628
	.byte	4,2,35,28,13
	.byte	'RxSigCfg',0
	.word	3163
	.byte	4,2,35,32,13
	.byte	'PduGroupCfg',0
	.word	3281
	.byte	4,2,35,36,13
	.byte	'RxSignalGroupCfg',0
	.word	3493
	.byte	4,2,35,40,13
	.byte	'TxSignalGroupCfg',0
	.word	3498
	.byte	4,2,35,44,13
	.byte	'GWSigCfg',0
	.word	3541
	.byte	4,2,35,48,0,9
	.word	3546
.L761:
	.byte	8
	.word	3889
	.byte	8
	.word	817
	.byte	8
	.word	1632
	.byte	8
	.word	1632
	.byte	8
	.word	1632
	.byte	8
	.word	1744
	.byte	8
	.word	1801
	.byte	8
	.word	1744
	.byte	8
	.word	1892
	.byte	8
	.word	817
	.byte	8
	.word	1632
	.byte	8
	.word	1632
	.byte	8
	.word	1632
	.byte	8
	.word	1632
	.byte	8
	.word	1632
.L768:
	.byte	16,5,57,9,1,17
	.byte	'COM_UNINIT',0,0,17
	.byte	'COM_INIT',0,1,0
.L798:
	.byte	8
	.word	418
.L808:
	.byte	8
	.word	144
.L879:
	.byte	8
	.word	440
.L894:
	.byte	16,4,101,9,1,17
	.byte	'BUFREQ_OK',0,0,17
	.byte	'BUFREQ_E_NOT_OK',0,1,17
	.byte	'BUFREQ_E_BUSY',0,2,17
	.byte	'BUFREQ_E_OVFL',0,3,0,16,4,204,1,9,1,17
	.byte	'TP_DATACONF',0,0,17
	.byte	'TP_DATARETRY',0,1,17
	.byte	'TP_CONFPENDING',0,2,0,12,4,218,1,9,4,13
	.byte	'TpDataState',0
	.word	4082
	.byte	1,2,35,0,13
	.byte	'TxTpDataCnt',0
	.word	418
	.byte	2,2,35,2,0
.L898:
	.byte	8
	.word	4135
.L900:
	.byte	8
	.word	418
	.byte	14
	.byte	'Det_ReportError',0,6,96,39
	.word	144
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,6,98,12
	.word	418
	.byte	4
	.byte	'InstanceId',0,6,99,11
	.word	144
	.byte	4
	.byte	'ApiId',0,6,100,11
	.word	144
	.byte	4
	.byte	'ErrorId',0,6,101,11
	.word	144
	.byte	0
.L961:
	.byte	16,5,136,1,9,1,17
	.byte	'COM_TXPDU_STOP',0,0,17
	.byte	'COM_TXPDU_START_IDLE',0,1,17
	.byte	'COM_TXPDU_START_BUSY',0,2,17
	.byte	'COM_TXPDU_START_RETX',0,3,17
	.byte	'COM_TXPDU_START_TXOK',0,4,17
	.byte	'COM_TXPDU_START_TXNOTOK',0,5,0,22
	.byte	'__INDIRECT__',0,7,1,1,1,1,1,23,1,8
	.word	4451
	.byte	11
	.byte	'__codeptr',0,7,1,1
	.word	4453
	.byte	11
	.byte	'boolean',0,8,102,29
	.word	144
	.byte	11
	.byte	'uint8',0,8,106,29
	.word	144
	.byte	11
	.byte	'uint16',0,8,110,29
	.word	418
	.byte	11
	.byte	'uint32',0,8,114,29
	.word	310
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,8,119,29
	.word	4536
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,8,123,29
	.word	4577
	.byte	2
	.byte	'short int',0,2,5,11
	.byte	'sint16',0,8,127,29
	.word	4599
	.byte	2
	.byte	'long int',0,4,5,11
	.byte	'sint32',0,8,132,1,29
	.word	4627
	.byte	2
	.byte	'long long int',0,8,5,11
	.byte	'sint64',0,8,139,1,29
	.word	4655
	.byte	2
	.byte	'float',0,4,4,11
	.byte	'float32',0,8,168,1,29
	.word	4688
	.byte	11
	.byte	'StatusType',0,9,70,25
	.word	144
	.byte	11
	.byte	'Std_ReturnType',0,9,109,16
	.word	144
	.byte	11
	.byte	'PduIdType',0,10,37,21
	.word	144
	.byte	11
	.byte	'PduLengthType',0,10,41,22
	.word	418
	.byte	11
	.byte	'BufReq_ReturnType',0,4,107,3
	.word	4014
	.byte	11
	.byte	'PduInfoType',0,4,194,1,3
	.word	440
	.byte	11
	.byte	'TpDataStateType',0,4,216,1,3
	.word	4082
	.byte	11
	.byte	'RetryInfoType',0,4,222,1,3
	.word	4135
	.byte	11
	.byte	'Os_uint8',0,11,45,29
	.word	144
	.byte	11
	.byte	'Os_uint16',0,11,46,29
	.word	418
	.byte	11
	.byte	'Os_uint32',0,11,47,29
	.word	161
	.byte	11
	.byte	'Os_boolean',0,11,55,29
	.word	144
	.byte	11
	.byte	'Os_AddrType',0,11,60,20
	.word	161
	.byte	11
	.byte	'Os_TpTickType',0,12,40,19
	.word	161
	.byte	11
	.byte	'Os_SysTickType',0,12,41,19
	.word	161
	.byte	11
	.byte	'Os_Pl_SpinlockType',0,12,44,19
	.word	161
	.byte	16,12,47,9,1,17
	.byte	'ACCESSMODE_USER_0',0,0,17
	.byte	'ACCESSMODE_USER_1',0,1,17
	.byte	'ACCESSMODE_PRIVILEGED',0,2,0,11
	.byte	'Os_Pl_AccessModeType',0,12,52,3
	.word	5055
	.byte	11
	.byte	'ApplicationType',0,13,49,18
	.word	144
	.byte	16,13,53,9,1,17
	.byte	'APPLICATION_ACCESSIBLE',0,0,17
	.byte	'APPLICATION_RESTARTING',0,1,17
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,13,58,3
	.word	5178
	.byte	11
	.byte	'ISRType',0,13,108,18
	.word	144
	.byte	16,13,136,1,9,1,17
	.byte	'SCHEDULETABLE_STOPPED',0,0,17
	.byte	'SCHEDULETABLE_NEXT',0,1,17
	.byte	'SCHEDULETABLE_WAITING',0,2,17
	.byte	'SCHEDULETABLE_RUNNING',0,3,17
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,13,143,1,3
	.word	5304
	.byte	11
	.byte	'CounterType',0,13,152,1,19
	.word	144
	.byte	11
	.byte	'CoreIdType',0,13,179,1,18
	.word	144
	.byte	11
	.byte	'TaskType',0,14,55,18
	.word	144
	.byte	16,14,72,9,1,17
	.byte	'OS_TASK_SUSPENDED',0,0,17
	.byte	'OS_TASK_NEW',0,1,17
	.byte	'OS_TASK_READY',0,2,17
	.byte	'OS_TASK_RUNNING',0,3,17
	.byte	'OS_TASK_WAITING',0,4,17
	.byte	'OS_TASK_WAITING_TO_READY',0,5,0,11
	.byte	'TaskStateType',0,14,80,3
	.word	5535
	.byte	11
	.byte	'TickType',0,14,87,19
	.word	161
	.byte	12,14,89,9,12,13
	.byte	'maxallowedvalue',0
	.word	161
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	161
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	161
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,14,94,3
	.word	5693
	.byte	11
	.byte	'AlarmType',0,14,97,18
	.word	144
	.byte	11
	.byte	'EventMaskType',0,14,112,19
	.word	161
	.byte	11
	.byte	'OSServiceIdType',0,14,120,19
	.word	418
	.byte	11
	.byte	'ResourceType',0,14,126,18
	.word	144
	.byte	24
	.byte	'_Os_SRC_SRCR_Bits',0,15,151,1,16,4,25
	.byte	'SRPN',0,1
	.word	144
	.byte	8,0,2,35,0,25
	.byte	'reserved_8',0,1
	.word	144
	.byte	2,6,2,35,1,25
	.byte	'SRE',0,1
	.word	144
	.byte	1,5,2,35,1,25
	.byte	'TOS',0,1
	.word	144
	.byte	3,2,2,35,1,25
	.byte	'reserved_14',0,1
	.word	144
	.byte	2,0,2,35,1,25
	.byte	'ECC',0,1
	.word	144
	.byte	5,3,2,35,2,25
	.byte	'reserved_21',0,1
	.word	144
	.byte	3,0,2,35,2,25
	.byte	'SRR',0,1
	.word	144
	.byte	1,7,2,35,3,25
	.byte	'CLRR',0,1
	.word	144
	.byte	1,6,2,35,3,25
	.byte	'SETR',0,1
	.word	144
	.byte	1,5,2,35,3,25
	.byte	'IOV',0,1
	.word	144
	.byte	1,4,2,35,3,25
	.byte	'IOVCLR',0,1
	.word	144
	.byte	1,3,2,35,3,25
	.byte	'SWS',0,1
	.word	144
	.byte	1,2,2,35,3,25
	.byte	'SWSCLR',0,1
	.word	144
	.byte	1,1,2,35,3,25
	.byte	'reserved_31',0,1
	.word	144
	.byte	1,0,2,35,3,0,11
	.byte	'Os_SRC_SRCR_Bits',0,15,172,1,3
	.word	5871
	.byte	11
	.byte	'Os_PrioType',0,16,178,1,19
	.word	418
	.byte	16,16,241,1,9,1,17
	.byte	'OS_ISR_SUSPENDED',0,0,17
	.byte	'OS_ISR_READY',0,1,17
	.byte	'OS_ISR_RUNNING',0,2,0,11
	.byte	'ISRStateType',0,16,246,1,3
	.word	6208
	.byte	12,16,166,2,9,4,13
	.byte	'Os_Q_front',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'Os_Q_rear',0
	.word	418
	.byte	2,2,35,2,0,11
	.byte	'Os_TaskQueueCtlType',0,16,170,2,3
	.word	6288
	.byte	11
	.byte	'Os_ApplicationMaskType',0,16,208,2,19
	.word	161
	.byte	16,16,245,2,9,1,17
	.byte	'OS_TP_NONE',0,0,17
	.byte	'OS_TP_EXECBUDGET',0,1,17
	.byte	'OS_TP_RESOURCELOCK',0,2,17
	.byte	'OS_TP_ISRLOCK',0,3,17
	.byte	'OS_TP_FRAMECHECK',0,4,0,11
	.byte	'Os_TpMonitorType',0,16,252,2,3
	.word	6395
	.byte	11
	.byte	'Os_TaskFuncType',0,16,136,3,16
	.word	1635
	.byte	8
	.word	6288
	.byte	9
	.word	6541
	.byte	8
	.word	144
	.byte	9
	.word	6551
	.byte	12,16,200,3,9,12,13
	.byte	'Q_Ctl_Ptr',0
	.word	6546
	.byte	4,2,35,0,13
	.byte	'Q_Size',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'Q_Buf',0
	.word	6556
	.byte	4,2,35,8,0,11
	.byte	'Os_TaskQueCfgType',0,16,210,3,3
	.word	6561
	.byte	8
	.word	161
	.byte	9
	.word	6645
	.byte	9
	.word	6645
	.byte	12,16,216,3,9,12,13
	.byte	'p_table_line',0
	.word	6650
	.byte	4,2,35,0,13
	.byte	'p_table',0
	.word	6655
	.byte	4,2,35,4,13
	.byte	'p_table_size',0
	.word	144
	.byte	1,2,35,8,0,11
	.byte	'Os_TaskPriReadyTblCfgType',0,16,221,3,3
	.word	6660
	.byte	21,1,1,19
	.word	571
	.byte	0,8
	.word	6763
	.byte	11
	.byte	'Os_TrustedFunctionPtrType',0,16,210,4,16
	.word	6772
	.byte	12,16,221,4,9,4,13
	.byte	'ObjId',0
	.word	161
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterTreeQueEleType',0,16,228,4,3
	.word	6812
	.byte	16,16,252,4,9,1,17
	.byte	'OS_ALARM_TASK',0,0,17
	.byte	'OS_ALARM_EVENT',0,1,17
	.byte	'OS_ALARM_CALLBACK',0,2,17
	.byte	'OS_ALARM_INCREMENTCOUNTER',0,3,0,11
	.byte	'Os_AlarmActionType',0,16,130,5,3
	.word	6868
	.byte	16,16,239,5,9,1,17
	.byte	'OS_RES_TASK_ONLY',0,0,17
	.byte	'OS_RES_ISR_ONLY',0,1,17
	.byte	'OS_RES_SHARE',0,2,0,11
	.byte	'Os_ResAccessype',0,16,244,5,3
	.word	6984
	.byte	16,16,139,6,9,1,17
	.byte	'OS_LOCK_NOTHING',0,0,17
	.byte	'OS_LOCK_ALL_INTERRUPTS',0,1,17
	.byte	'OS_LOCK_CAT2_INTERRUPTS',0,2,17
	.byte	'OS_LOCK_WITH_RES_SCHEDULER',0,3,0,11
	.byte	'Os_SpinlockMethodType',0,16,145,6,3
	.word	7068
	.byte	11
	.byte	'ABSActive_IDT',0,17,151,3,15
	.word	144
	.byte	11
	.byte	'ABSFailed_IDT',0,17,152,3,15
	.word	144
	.byte	11
	.byte	'ABS_EBDFailed_IDT',0,17,153,3,15
	.word	144
	.byte	11
	.byte	'ABS_FLWheelDirection_IDT',0,17,154,3,15
	.word	144
	.byte	11
	.byte	'ABS_FLWheelSpeedInvalid_IDT',0,17,155,3,15
	.word	144
	.byte	11
	.byte	'ABS_FLWheelSpeedKPH_IDT',0,17,156,3,16
	.word	418
	.byte	11
	.byte	'ABS_FLWheelSpeedRCSts_IDT',0,17,157,3,15
	.word	144
	.byte	11
	.byte	'ABS_FLWheelSpeedRC_IDT',0,17,158,3,16
	.word	418
	.byte	11
	.byte	'ABS_FRWheelDirection_IDT',0,17,159,3,15
	.word	144
	.byte	11
	.byte	'ABS_FRWheelSpeedInvalid_IDT',0,17,160,3,15
	.word	144
	.byte	11
	.byte	'ABS_FRWheelSpeedKPH_IDT',0,17,161,3,16
	.word	418
	.byte	11
	.byte	'ABS_FRWheelSpeedRCSts_IDT',0,17,162,3,15
	.word	144
	.byte	11
	.byte	'ABS_FRWheelSpeedRC_IDT',0,17,163,3,16
	.word	418
	.byte	11
	.byte	'ABS_FWSpeMCUKPH_AliveCounter_IDT',0,17,164,3,15
	.word	144
	.byte	11
	.byte	'ABS_FWSpeMCUKPH_CheckSum_IDT',0,17,165,3,15
	.word	144
	.byte	11
	.byte	'ABS_HAZActive_IDT',0,17,166,3,15
	.word	144
	.byte	11
	.byte	'ABS_LowBrakeFluid_IDT',0,17,167,3,15
	.word	144
	.byte	11
	.byte	'ABS_RLWheelDirection_IDT',0,17,168,3,15
	.word	144
	.byte	11
	.byte	'ABS_RLWheelSpeedInvalid_IDT',0,17,169,3,15
	.word	144
	.byte	11
	.byte	'ABS_RLWheelSpeedKPH_IDT',0,17,170,3,16
	.word	418
	.byte	11
	.byte	'ABS_RLWheelSpeedRCSts_IDT',0,17,171,3,15
	.word	144
	.byte	11
	.byte	'ABS_RLWheelSpeedRC_IDT',0,17,172,3,16
	.word	418
	.byte	11
	.byte	'ABS_RRWheelDirection_IDT',0,17,173,3,15
	.word	144
	.byte	11
	.byte	'ABS_RRWheelSpeedInvalid_IDT',0,17,174,3,15
	.word	144
	.byte	11
	.byte	'ABS_RRWheelSpeedKPH_IDT',0,17,175,3,16
	.word	418
	.byte	11
	.byte	'ABS_RRWheelSpeedRCSts_IDT',0,17,176,3,15
	.word	144
	.byte	11
	.byte	'ABS_RRWheelSpeedRC_IDT',0,17,177,3,16
	.word	418
	.byte	11
	.byte	'ABS_RWSpeMCUKPH_AliveCounter_IDT',0,17,178,3,15
	.word	144
	.byte	11
	.byte	'ABS_RWSpeMCUKPH_CheckSum_IDT',0,17,179,3,15
	.word	144
	.byte	11
	.byte	'ABS_Status_AliveCounter_IDT',0,17,180,3,15
	.word	144
	.byte	11
	.byte	'ABS_Status_CheckSum_IDT',0,17,181,3,15
	.word	144
	.byte	11
	.byte	'ABS_VehicleSpeedInvalid_IDT',0,17,182,3,15
	.word	144
	.byte	11
	.byte	'ABS_VehicleSpeed_IDT',0,17,183,3,16
	.word	418
	.byte	11
	.byte	'ABS_WheelSpeMCURC_AliveCounter_IDT',0,17,184,3,15
	.word	144
	.byte	11
	.byte	'ABS_WheelSpeMCURC_CheckSum_IDT',0,17,185,3,15
	.word	144
	.byte	11
	.byte	'ACC_ObjDispSts_IDT',0,17,197,3,15
	.word	144
	.byte	12,17,198,3,9,36,13
	.byte	'ADAS_ACC_SpdUnit',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'ADAS_ACC_TargetSpeed',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'ADAS_ACC_OperatingSts',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'ADAS_ACC_TimeGapLevel',0
	.word	144
	.byte	1,2,35,3,13
	.byte	'ADAS_ACC_DistanceLevel',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'ADAS_ACC_ObjDispSts',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'ADAS_ACC_TakeOverReq',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'ADAS_AccelerationReq',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'ADAS_MaxSoftAcceleration',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'ADAS_MinSoftAcceleration',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'ADAS_IBS_StopReq',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'ADAS_IBS_CarStarting',0
	.word	144
	.byte	1,2,35,21,13
	.byte	'ADAS_ACC_BrakePreferred',0
	.word	144
	.byte	1,2,35,22,13
	.byte	'ADAS_IBS_MinBreakReq',0
	.word	144
	.byte	1,2,35,23,13
	.byte	'ADAS_VLCShutDownReq',0
	.word	144
	.byte	1,2,35,24,13
	.byte	'ADAS_VLCModeReq',0
	.word	144
	.byte	1,2,35,25,13
	.byte	'ACC_AdtUpperJerkLimit',0
	.word	4688
	.byte	4,2,35,26,13
	.byte	'ACC_AdtLowerJerkLimit',0
	.word	4688
	.byte	4,2,35,30,13
	.byte	'ACC_TxtInfoForDriver',0
	.word	144
	.byte	1,2,35,34,13
	.byte	'ACC_DriveoffReq',0
	.word	144
	.byte	1,2,35,35,0,11
	.byte	'ACC_Output',0,17,220,3,3
	.word	8428
	.byte	11
	.byte	'ACC_TakeOverReq_IDT',0,17,222,3,15
	.word	144
	.byte	11
	.byte	'ACU_AirbagWarningStatus_IDT',0,17,224,3,15
	.word	144
	.byte	11
	.byte	'ACU_AliveCounter_IDT',0,17,225,3,15
	.word	144
	.byte	11
	.byte	'ACU_CheckSum_IDT',0,17,226,3,15
	.word	144
	.byte	11
	.byte	'ACU_CoDAirbagStatus_IDT',0,17,227,3,15
	.word	144
	.byte	11
	.byte	'ACU_CoDSeatOccupSensorStat_IDT',0,17,228,3,15
	.word	144
	.byte	11
	.byte	'ACU_CoDSeatbeltBucklestatus_IDT',0,17,229,3,15
	.word	144
	.byte	11
	.byte	'ACU_CoDSeatbletPTighten_IDT',0,17,230,3,15
	.word	144
	.byte	11
	.byte	'ACU_CrashFrontOutputSts_IDT',0,17,231,3,15
	.word	144
	.byte	11
	.byte	'ACU_CrashLeftOutputSts_IDT',0,17,232,3,15
	.word	144
	.byte	11
	.byte	'ACU_CrashRearOutputSts_IDT',0,17,233,3,15
	.word	144
	.byte	11
	.byte	'ACU_CrashRightOutputSts_IDT',0,17,234,3,15
	.word	144
	.byte	11
	.byte	'ACU_CrashSts_IDT',0,17,235,3,15
	.word	144
	.byte	11
	.byte	'ACU_DAirbagStatus_IDT',0,17,236,3,15
	.word	144
	.byte	11
	.byte	'ACU_DSeatOccupSensorStat_IDT',0,17,237,3,15
	.word	144
	.byte	11
	.byte	'ACU_DSeatbeltBucklestatus_IDT',0,17,238,3,15
	.word	144
	.byte	11
	.byte	'ACU_DSeatbletPTighten_IDT',0,17,239,3,15
	.word	144
	.byte	11
	.byte	'ACU_LCABsts_IDT',0,17,240,3,15
	.word	144
	.byte	11
	.byte	'ACU_LPSeatOccupSensorStat_IDT',0,17,241,3,15
	.word	144
	.byte	11
	.byte	'ACU_LPSeatbeltBucklestatus_IDT',0,17,242,3,15
	.word	144
	.byte	11
	.byte	'ACU_LSABsts_IDT',0,17,243,3,15
	.word	144
	.byte	11
	.byte	'ACU_MPSeatOccupSensorStat_IDT',0,17,244,3,15
	.word	144
	.byte	11
	.byte	'ACU_MPSeatbeltBucklestatus_IDT',0,17,245,3,15
	.word	144
	.byte	11
	.byte	'ACU_RCABsts_IDT',0,17,246,3,15
	.word	144
	.byte	11
	.byte	'ACU_RPSeatOccupSensorStat_IDT',0,17,247,3,15
	.word	144
	.byte	11
	.byte	'ACU_RPSeatbeltBucklestatus_IDT',0,17,248,3,15
	.word	144
	.byte	11
	.byte	'ACU_RSABsts_IDT',0,17,249,3,15
	.word	144
	.byte	11
	.byte	'ADAS_01_Checksum_IDT',0,17,250,3,15
	.word	144
	.byte	11
	.byte	'ADAS_01_RollingCounter_IDT',0,17,251,3,15
	.word	144
	.byte	11
	.byte	'ADAS_02_Checksum_IDT',0,17,252,3,15
	.word	144
	.byte	11
	.byte	'ADAS_02_RollingCounter_IDT',0,17,253,3,15
	.word	144
	.byte	11
	.byte	'ADAS_03_Checksum_IDT',0,17,254,3,15
	.word	144
	.byte	11
	.byte	'ADAS_03_RollingCounter_IDT',0,17,255,3,15
	.word	144
	.byte	11
	.byte	'ADAS_ACC_DistanceLevel_IDT',0,17,129,4,15
	.word	144
	.byte	11
	.byte	'ADAS_ACC_OperatingSts_IDT',0,17,131,4,15
	.word	144
	.byte	11
	.byte	'ADAS_ACC_SpdUnit_IDT',0,17,132,4,15
	.word	144
	.byte	11
	.byte	'ADAS_ACC_TargetSpeed_IDT',0,17,134,4,15
	.word	144
	.byte	11
	.byte	'ADAS_ACC_TimeGapLevel_IDT',0,17,135,4,15
	.word	144
	.byte	11
	.byte	'ADAS_AEB_TgtDecel_ReqValue_IDT',0,17,139,4,16
	.word	418
	.byte	11
	.byte	'ADAS_AccelerationReq_IDT',0,17,159,4,16
	.word	418
	.byte	12,17,160,4,9,20,13
	.byte	'ADAS_AEB_TgtDecel_ReqValue',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'ADAS_AEB_AbpReq',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'ADAS_IBS_EBAReq',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'AEB_AWB_Level',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'AEB_ABA_Req',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'AEB_VehHldReq',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'AEB_TgtDecel_Req',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'AEB_AWB_Req',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'ADAS_AEB_AbaLevel',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'ADAS_AEB_FuncSWResp',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'AEB_FuncSts',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'AEB_VehActive',0
	.word	144
	.byte	1,2,35,14,13
	.byte	'AEB_VRUActive',0
	.word	144
	.byte	1,2,35,15,13
	.byte	'AEB_ErrorSts',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'AEB_FCW_SnvtyResp',0
	.word	144
	.byte	1,2,35,17,13
	.byte	'AEB_FCW_Warning',0
	.word	144
	.byte	1,2,35,18,0,11
	.byte	'AEB_OutPut',0,17,178,4,3
	.word	10419
	.byte	12,17,180,4,9,24,13
	.byte	'ADAS_LSS_AssidFormResp',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'ADAS_LSS_AngCmdReqPortnValue',0
	.word	4688
	.byte	4,2,35,2,13
	.byte	'ADAS_EPS_TargetSteeringAngle',0
	.word	4688
	.byte	4,2,35,6,13
	.byte	'ADAS_EPS_Vibration_Req',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'ADAS_LSS_VoiceWarn',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'ADAS_LSS_HandsoffWarn',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'ADAS_LSS_FuncResp',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'ADAS_EPS_AngReqSts',0
	.word	144
	.byte	1,2,35,14,13
	.byte	'ADAS_LSS_LeLineTrackingSts',0
	.word	144
	.byte	1,2,35,15,13
	.byte	'ADAS_LSS_RiLineTrackingSts',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'ADAS_LSS_Available',0
	.word	144
	.byte	1,2,35,17,13
	.byte	'ADAS_LSS_FunSts',0
	.word	144
	.byte	1,2,35,18,13
	.byte	'ADAS_LSS_ErrSts',0
	.word	144
	.byte	1,2,35,19,13
	.byte	'ADAS_LSS_WarnFromResp',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'FC_CalibrationSts',0
	.word	144
	.byte	1,2,35,21,13
	.byte	'FC_BlockageSts',0
	.word	144
	.byte	1,2,35,22,0,11
	.byte	'LSS_Output',0,17,198,4,3
	.word	10843
	.byte	12,17,200,4,9,12,13
	.byte	'ADAS_TSR_SWSts',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'TSR_SLWSwtResp',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'ADAS_TSR_OperationSts',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'ADAS_TSR_SpeedLimit',0
	.word	144
	.byte	1,2,35,3,13
	.byte	'TSR_TrafSign',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'TSR_SpdAssistInfoDisp',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'TSR_Warning_offset',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'TSR_SLWVisualWarn',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'TSR_SLWVoiceWarn',0
	.word	144
	.byte	1,2,35,8,0,11
	.byte	'TSR_Output',0,17,211,4,3
	.word	11356
	.byte	11
	.byte	'ADAS_EPS_AngReqSts_IDT',0,17,223,4,15
	.word	144
	.byte	11
	.byte	'ADAS_EPS_TargetSteeringAngle_IDT',0,17,224,4,16
	.word	418
	.byte	11
	.byte	'ADAS_EPS_Vibration_Req_IDT',0,17,225,4,15
	.word	144
	.byte	11
	.byte	'ADAS_LSS_AngCmdReqPortnValue_IDT',0,17,235,4,16
	.word	418
	.byte	11
	.byte	'ADAS_LSS_AssidFormResp_IDT',0,17,236,4,15
	.word	144
	.byte	11
	.byte	'ADAS_LSS_FuncResp_IDT',0,17,240,4,15
	.word	144
	.byte	11
	.byte	'ADAS_LSS_HandsoffWarn_IDT',0,17,241,4,15
	.word	144
	.byte	11
	.byte	'ADAS_LSS_LeLineTrackingSts_IDT',0,17,242,4,15
	.word	144
	.byte	11
	.byte	'ADAS_LSS_RiLineTrackingSts_IDT',0,17,243,4,15
	.word	144
	.byte	11
	.byte	'ADAS_LSS_VoiceWarn_IDT',0,17,244,4,15
	.word	144
	.byte	11
	.byte	'ADAS_MaxSoftAcceleration_IDT',0,17,247,4,16
	.word	418
	.byte	11
	.byte	'ADAS_MinSoftAcceleration_IDT',0,17,248,4,16
	.word	418
	.byte	26,16
	.word	144
	.byte	27,15,0,11
	.byte	'serial_number_16',0,17,170,5,15
	.word	12067
	.byte	12,17,171,5,9,84,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,0,13
	.byte	'frame_index',0
	.word	310
	.byte	4,2,35,8,13
	.byte	'p0_x',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'p0_y',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'p1_x',0
	.word	4688
	.byte	4,2,35,20,13
	.byte	'p1_y',0
	.word	4688
	.byte	4,2,35,24,13
	.byte	'p2_x',0
	.word	4688
	.byte	4,2,35,28,13
	.byte	'p2_y',0
	.word	4688
	.byte	4,2,35,32,13
	.byte	'p3_x',0
	.word	4688
	.byte	4,2,35,36,13
	.byte	'p3_y',0
	.word	4688
	.byte	4,2,35,40,13
	.byte	'width',0
	.word	4688
	.byte	4,2,35,44,13
	.byte	'depth',0
	.word	4688
	.byte	4,2,35,48,13
	.byte	'direction',0
	.word	144
	.byte	1,2,35,52,13
	.byte	'slot_type',0
	.word	144
	.byte	1,2,35,53,13
	.byte	'slot_status',0
	.word	144
	.byte	1,2,35,54,13
	.byte	'slot_detection_type',0
	.word	144
	.byte	1,2,35,55,13
	.byte	'slot_occupied',0
	.word	144
	.byte	1,2,35,56,13
	.byte	'quality',0
	.word	144
	.byte	1,2,35,57,13
	.byte	'angle',0
	.word	4688
	.byte	4,2,35,58,13
	.byte	'lane_width',0
	.word	4688
	.byte	4,2,35,62,13
	.byte	'tracking_id',0
	.word	144
	.byte	1,2,35,66,13
	.byte	'serial_number',0
	.word	12076
	.byte	16,2,35,67,0,11
	.byte	'ParkingSlot',0,17,195,5,3
	.word	12102
	.byte	26,16
	.word	144
	.byte	27,15,0,12,17,197,5,9,88,13
	.byte	'replan_counter',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'planning_slot',0
	.word	12102
	.byte	84,2,35,4,0,11
	.byte	'PlanningSlotLocked',0,17,201,5,3
	.word	12529
	.byte	12,17,203,5,9,40,13
	.byte	'x',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'y',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'heading',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'arc_length_to_end',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'curve',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'steering_angle',0
	.word	4688
	.byte	4,2,35,20,13
	.byte	'maxvel',0
	.word	4688
	.byte	4,2,35,24,13
	.byte	'acc',0
	.word	4688
	.byte	4,2,35,28,13
	.byte	'speed',0
	.word	4688
	.byte	4,2,35,32,13
	.byte	'time_to_end',0
	.word	4688
	.byte	4,2,35,36,0,11
	.byte	'TrajectoryPoint',0,17,215,5,3
	.word	12611
	.byte	12,17,217,5,9,112,13
	.byte	'replan_counter',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'trajectory_id',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'trajectory_point_id',0
	.word	310
	.byte	4,2,35,2,13
	.byte	'cur_vehicle_brake',0
	.word	4688
	.byte	4,2,35,6,13
	.byte	'exp_vehicle_brake',0
	.word	4688
	.byte	4,2,35,10,13
	.byte	'cur_vehicle_throttle',0
	.word	4688
	.byte	4,2,35,14,13
	.byte	'exp_vehicle_throttle',0
	.word	4688
	.byte	4,2,35,18,13
	.byte	'cur_vehicle_lon_acc',0
	.word	4688
	.byte	4,2,35,22,13
	.byte	'exp_vehicle_lon_acc',0
	.word	4688
	.byte	4,2,35,26,13
	.byte	'cur_vehicle_gear',0
	.word	144
	.byte	1,2,35,30,13
	.byte	'exp_vehicle_gear',0
	.word	144
	.byte	1,2,35,31,13
	.byte	'exp_point',0
	.word	12611
	.byte	40,2,35,32,13
	.byte	'cur_point',0
	.word	12611
	.byte	40,2,35,72,0,11
	.byte	'TrackingPointsDebug',0,17,232,5,3
	.word	12813
	.byte	12,17,234,5,9,4,13
	.byte	'tracking_error_status',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'cur_trajectory_finish',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'points_to_end',0
	.word	144
	.byte	1,2,35,2,0,11
	.byte	'TrackingState',0,17,239,5,3
	.word	13187
	.byte	26,240,7
	.word	12102
	.byte	27,11,0,11
	.byte	'slot_set_12',0,17,241,5,21
	.word	13302
	.byte	12,17,242,5,9,136,8,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,0,13
	.byte	'time_stamp_slot',0
	.word	4536
	.byte	8,2,35,8,13
	.byte	'frame_index',0
	.word	310
	.byte	4,2,35,16,13
	.byte	'slot_cnt',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'slot_set',0
	.word	13312
	.byte	240,7,2,35,24,0,11
	.byte	'ParkingSlotSet',0,17,249,5,3
	.word	13333
	.byte	26,240,7
	.word	12102
	.byte	27,11,0,11
	.byte	'APA_EPS_TargetSteeringAngle_IDT',0,17,136,6,16
	.word	418
	.byte	11
	.byte	'APA_WCB_BrakeControlReq_IDT',0,17,154,6,15
	.word	144
	.byte	11
	.byte	'ARS_CFGSTATE_CRC16_Checksum_IDT',0,17,147,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_Mode_IDT',0,17,148,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGSTATE_MsgCounter_IDT',0,17,149,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGSTATE_SensorID_CFGflag_IDT',0,17,150,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGSTATE_SensorID_IDT',0,17,151,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGSTATE_VehParCoverDamping_IDT',0,17,152,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_VehParLatPos_IDT',0,17,153,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_VehParLongPos_IDT',0,17,154,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_VehParSteeringRatio_IDT',0,17,155,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_VehParVertPos_IDT',0,17,156,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_VehParWheelBase_IDT',0,17,157,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGSTATE_VehParYawAngle_IDT',0,17,158,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_TmeSynEnFl_IDT',0,17,159,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehParStrRatio_CFGfl_IDT',0,17,160,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrAxLdDistr0_IDT',0,17,161,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_VehPrAxLdDstr_CFGfl_IDT',0,17,162,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrCntrGrvHght_CFGfl_IDT',0,17,163,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrCntrOfGrvHght_IDT',0,17,164,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_VehPrCvrDmp_CFGfl_IDT',0,17,165,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrLatPos_CFGfl_IDT',0,17,166,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrLngPosCoG_CFGfl_IDT',0,17,167,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrLngPosCoG_IDT',0,17,168,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_VehPrLngPos_CFGfl_IDT',0,17,169,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrSnsrOri_CFGfl_IDT',0,17,170,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrSnsrOri_IDT',0,17,171,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrTrWdFrnt_CFGfl_IDT',0,17,172,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrTrWdRear_CFGfl_IDT',0,17,173,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrTrkWdthFrnt_IDT',0,17,174,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_VehPrTrkWdthRear_IDT',0,17,175,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_VehPrVehWght_CFGfl_IDT',0,17,176,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrVehWght_IDT',0,17,177,7,16
	.word	418
	.byte	11
	.byte	'ARS_CFGST_VehPrVrtPos_CFGfl_IDT',0,17,178,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrWhlBs_CFGfl_IDT',0,17,179,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFGST_VehPrYwAng_CFGfl_IDT',0,17,180,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFG_ProtoclFlag_P_IDT',0,17,181,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFG_VParPitchAngle_CFGflag_IDT',0,17,182,7,15
	.word	144
	.byte	11
	.byte	'ARS_CFG_VParPitchAngle_IDT',0,17,183,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_00_IDT',0,17,184,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_01_IDT',0,17,185,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_02_IDT',0,17,186,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_03_IDT',0,17,187,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_04_IDT',0,17,188,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_05_IDT',0,17,189,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_06_IDT',0,17,190,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_07_IDT',0,17,191,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_08_IDT',0,17,192,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_09_IDT',0,17,193,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_10_IDT',0,17,194,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_11_IDT',0,17,195,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_12_IDT',0,17,196,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_13_IDT',0,17,197,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_14_IDT',0,17,198,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_15_IDT',0,17,199,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_16_IDT',0,17,200,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_17_IDT',0,17,201,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_18_IDT',0,17,202,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_19_IDT',0,17,203,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_20_IDT',0,17,204,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_21_IDT',0,17,205,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_22_IDT',0,17,206,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_23_IDT',0,17,207,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_24_IDT',0,17,208,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_25_IDT',0,17,209,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_26_IDT',0,17,210,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_27_IDT',0,17,211,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_28_IDT',0,17,212,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_29_IDT',0,17,213,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_30_IDT',0,17,214,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_31_IDT',0,17,215,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_32_IDT',0,17,216,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_33_IDT',0,17,217,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_34_IDT',0,17,218,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_35_IDT',0,17,219,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_36_IDT',0,17,220,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_37_IDT',0,17,221,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_38_IDT',0,17,222,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_39_IDT',0,17,223,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_40_IDT',0,17,224,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_41_IDT',0,17,225,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_42_IDT',0,17,226,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_43_IDT',0,17,227,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_44_IDT',0,17,228,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_45_IDT',0,17,229,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_46_IDT',0,17,230,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_47_IDT',0,17,231,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_48_IDT',0,17,232,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_49_IDT',0,17,233,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_50_IDT',0,17,234,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_51_IDT',0,17,235,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_52_IDT',0,17,236,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_53_IDT',0,17,237,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_54_IDT',0,17,238,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_55_IDT',0,17,239,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_56_IDT',0,17,240,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_57_IDT',0,17,241,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_58_IDT',0,17,242,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsXStd_Obj_59_IDT',0,17,243,7,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_00_IDT',0,17,244,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_01_IDT',0,17,245,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_02_IDT',0,17,246,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_03_IDT',0,17,247,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_04_IDT',0,17,248,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_05_IDT',0,17,249,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_06_IDT',0,17,250,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_07_IDT',0,17,251,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_08_IDT',0,17,252,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_09_IDT',0,17,253,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_10_IDT',0,17,254,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_11_IDT',0,17,255,7,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_12_IDT',0,17,128,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_13_IDT',0,17,129,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_14_IDT',0,17,130,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_15_IDT',0,17,131,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_16_IDT',0,17,132,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_17_IDT',0,17,133,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_18_IDT',0,17,134,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_19_IDT',0,17,135,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_20_IDT',0,17,136,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_21_IDT',0,17,137,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_22_IDT',0,17,138,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_23_IDT',0,17,139,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_24_IDT',0,17,140,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_25_IDT',0,17,141,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_26_IDT',0,17,142,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_27_IDT',0,17,143,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_28_IDT',0,17,144,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_29_IDT',0,17,145,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_30_IDT',0,17,146,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_31_IDT',0,17,147,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_32_IDT',0,17,148,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_33_IDT',0,17,149,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_34_IDT',0,17,150,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_35_IDT',0,17,151,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_36_IDT',0,17,152,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_37_IDT',0,17,153,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_38_IDT',0,17,154,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_39_IDT',0,17,155,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_40_IDT',0,17,156,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_41_IDT',0,17,157,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_42_IDT',0,17,158,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_43_IDT',0,17,159,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_44_IDT',0,17,160,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_45_IDT',0,17,161,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_46_IDT',0,17,162,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_47_IDT',0,17,163,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_48_IDT',0,17,164,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_49_IDT',0,17,165,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_50_IDT',0,17,166,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_51_IDT',0,17,167,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_52_IDT',0,17,168,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_53_IDT',0,17,169,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_54_IDT',0,17,170,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_55_IDT',0,17,171,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_56_IDT',0,17,172,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_57_IDT',0,17,173,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_58_IDT',0,17,174,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsX_Obj_59_IDT',0,17,175,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_00_IDT',0,17,176,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_01_IDT',0,17,177,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_02_IDT',0,17,178,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_03_IDT',0,17,179,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_04_IDT',0,17,180,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_05_IDT',0,17,181,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_06_IDT',0,17,182,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_07_IDT',0,17,183,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_08_IDT',0,17,184,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_09_IDT',0,17,185,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_10_IDT',0,17,186,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_11_IDT',0,17,187,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_12_IDT',0,17,188,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_13_IDT',0,17,189,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_14_IDT',0,17,190,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_15_IDT',0,17,191,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_16_IDT',0,17,192,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_17_IDT',0,17,193,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_18_IDT',0,17,194,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_19_IDT',0,17,195,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_20_IDT',0,17,196,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_21_IDT',0,17,197,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_22_IDT',0,17,198,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_23_IDT',0,17,199,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_24_IDT',0,17,200,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_25_IDT',0,17,201,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_26_IDT',0,17,202,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_27_IDT',0,17,203,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_28_IDT',0,17,204,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_29_IDT',0,17,205,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_30_IDT',0,17,206,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_31_IDT',0,17,207,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_32_IDT',0,17,208,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_33_IDT',0,17,209,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_34_IDT',0,17,210,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_35_IDT',0,17,211,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_36_IDT',0,17,212,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_37_IDT',0,17,213,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_38_IDT',0,17,214,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_39_IDT',0,17,215,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_40_IDT',0,17,216,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_41_IDT',0,17,217,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_42_IDT',0,17,218,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_43_IDT',0,17,219,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_44_IDT',0,17,220,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_45_IDT',0,17,221,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_46_IDT',0,17,222,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_47_IDT',0,17,223,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_48_IDT',0,17,224,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_49_IDT',0,17,225,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_50_IDT',0,17,226,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_51_IDT',0,17,227,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_52_IDT',0,17,228,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_53_IDT',0,17,229,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_54_IDT',0,17,230,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_55_IDT',0,17,231,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_56_IDT',0,17,232,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_57_IDT',0,17,233,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_58_IDT',0,17,234,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsYStd_Obj_59_IDT',0,17,235,8,15
	.word	144
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_00_IDT',0,17,236,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_01_IDT',0,17,237,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_02_IDT',0,17,238,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_03_IDT',0,17,239,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_04_IDT',0,17,240,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_05_IDT',0,17,241,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_06_IDT',0,17,242,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_07_IDT',0,17,243,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_08_IDT',0,17,244,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_09_IDT',0,17,245,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_10_IDT',0,17,246,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_11_IDT',0,17,247,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_12_IDT',0,17,248,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_13_IDT',0,17,249,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_14_IDT',0,17,250,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_15_IDT',0,17,251,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_16_IDT',0,17,252,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_17_IDT',0,17,253,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_18_IDT',0,17,254,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_19_IDT',0,17,255,8,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_20_IDT',0,17,128,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_21_IDT',0,17,129,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_22_IDT',0,17,130,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_23_IDT',0,17,131,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_24_IDT',0,17,132,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_25_IDT',0,17,133,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_26_IDT',0,17,134,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_27_IDT',0,17,135,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_28_IDT',0,17,136,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_29_IDT',0,17,137,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_30_IDT',0,17,138,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_31_IDT',0,17,139,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_32_IDT',0,17,140,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_33_IDT',0,17,141,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_34_IDT',0,17,142,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_35_IDT',0,17,143,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_36_IDT',0,17,144,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_37_IDT',0,17,145,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_38_IDT',0,17,146,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_39_IDT',0,17,147,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_40_IDT',0,17,148,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_41_IDT',0,17,149,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_42_IDT',0,17,150,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_43_IDT',0,17,151,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_44_IDT',0,17,152,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_45_IDT',0,17,153,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_46_IDT',0,17,154,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_47_IDT',0,17,155,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_48_IDT',0,17,156,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_49_IDT',0,17,157,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_50_IDT',0,17,158,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_51_IDT',0,17,159,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_52_IDT',0,17,160,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_53_IDT',0,17,161,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_54_IDT',0,17,162,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_55_IDT',0,17,163,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_56_IDT',0,17,164,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_57_IDT',0,17,165,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_58_IDT',0,17,166,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_AabsY_Obj_59_IDT',0,17,167,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Header_IDT',0,17,168,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_00_01_IDT',0,17,169,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_02_03_IDT',0,17,170,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_04_05_IDT',0,17,171,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_06_07_IDT',0,17,172,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_08_09_IDT',0,17,173,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_10_11_IDT',0,17,174,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_12_13_IDT',0,17,175,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_14_15_IDT',0,17,176,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_16_17_IDT',0,17,177,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_18_19_IDT',0,17,178,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_20_21_IDT',0,17,179,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_22_23_IDT',0,17,180,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_24_25_IDT',0,17,181,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_26_27_IDT',0,17,182,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_28_29_IDT',0,17,183,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_30_31_IDT',0,17,184,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_32_33_IDT',0,17,185,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_34_35_IDT',0,17,186,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_36_37_IDT',0,17,187,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_38_39_IDT',0,17,188,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_40_41_IDT',0,17,189,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_42_43_IDT',0,17,190,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_44_45_IDT',0,17,191,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_46_47_IDT',0,17,192,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_48_49_IDT',0,17,193,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_50_51_IDT',0,17,194,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_52_53_IDT',0,17,195,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_54_55_IDT',0,17,196,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_56_57_IDT',0,17,197,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_CRC16_Checksum_Obj_58_59_IDT',0,17,198,9,16
	.word	418
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_00_IDT',0,17,199,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_01_IDT',0,17,200,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_02_IDT',0,17,201,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_03_IDT',0,17,202,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_04_IDT',0,17,203,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_05_IDT',0,17,204,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_06_IDT',0,17,205,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_07_IDT',0,17,206,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_08_IDT',0,17,207,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_09_IDT',0,17,208,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_10_IDT',0,17,209,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_11_IDT',0,17,210,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_12_IDT',0,17,211,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_13_IDT',0,17,212,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_14_IDT',0,17,213,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_15_IDT',0,17,214,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_16_IDT',0,17,215,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_17_IDT',0,17,216,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_18_IDT',0,17,217,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_19_IDT',0,17,218,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_20_IDT',0,17,219,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_21_IDT',0,17,220,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_22_IDT',0,17,221,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_23_IDT',0,17,222,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_24_IDT',0,17,223,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_25_IDT',0,17,224,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_26_IDT',0,17,225,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_27_IDT',0,17,226,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_28_IDT',0,17,227,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_29_IDT',0,17,228,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_30_IDT',0,17,229,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_31_IDT',0,17,230,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_32_IDT',0,17,231,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_33_IDT',0,17,232,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_34_IDT',0,17,233,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_35_IDT',0,17,234,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_36_IDT',0,17,235,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_37_IDT',0,17,236,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_38_IDT',0,17,237,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_39_IDT',0,17,238,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_40_IDT',0,17,239,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_41_IDT',0,17,240,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_42_IDT',0,17,241,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_43_IDT',0,17,242,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_44_IDT',0,17,243,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_45_IDT',0,17,244,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_46_IDT',0,17,245,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_47_IDT',0,17,246,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_48_IDT',0,17,247,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_49_IDT',0,17,248,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_50_IDT',0,17,249,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_51_IDT',0,17,250,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_52_IDT',0,17,251,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_53_IDT',0,17,252,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_54_IDT',0,17,253,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_55_IDT',0,17,254,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_56_IDT',0,17,255,9,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_57_IDT',0,17,128,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_58_IDT',0,17,129,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ClassConf_Obj_59_IDT',0,17,130,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_00_IDT',0,17,131,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_01_IDT',0,17,132,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_02_IDT',0,17,133,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_03_IDT',0,17,134,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_04_IDT',0,17,135,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_05_IDT',0,17,136,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_06_IDT',0,17,137,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_07_IDT',0,17,138,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_08_IDT',0,17,139,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_09_IDT',0,17,140,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_10_IDT',0,17,141,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_11_IDT',0,17,142,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_12_IDT',0,17,143,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_13_IDT',0,17,144,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_14_IDT',0,17,145,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_15_IDT',0,17,146,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_16_IDT',0,17,147,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_17_IDT',0,17,148,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_18_IDT',0,17,149,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_19_IDT',0,17,150,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_20_IDT',0,17,151,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_21_IDT',0,17,152,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_22_IDT',0,17,153,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_23_IDT',0,17,154,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_24_IDT',0,17,155,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_25_IDT',0,17,156,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_26_IDT',0,17,157,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_27_IDT',0,17,158,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_28_IDT',0,17,159,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_29_IDT',0,17,160,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_30_IDT',0,17,161,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_31_IDT',0,17,162,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_32_IDT',0,17,163,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_33_IDT',0,17,164,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_34_IDT',0,17,165,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_35_IDT',0,17,166,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_36_IDT',0,17,167,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_37_IDT',0,17,168,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_38_IDT',0,17,169,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_39_IDT',0,17,170,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_40_IDT',0,17,171,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_41_IDT',0,17,172,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_42_IDT',0,17,173,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_43_IDT',0,17,174,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_44_IDT',0,17,175,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_45_IDT',0,17,176,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_46_IDT',0,17,177,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_47_IDT',0,17,178,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_48_IDT',0,17,179,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_49_IDT',0,17,180,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_50_IDT',0,17,181,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_51_IDT',0,17,182,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_52_IDT',0,17,183,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_53_IDT',0,17,184,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_54_IDT',0,17,185,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_55_IDT',0,17,186,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_56_IDT',0,17,187,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_57_IDT',0,17,188,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_58_IDT',0,17,189,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Classification_Obj_59_IDT',0,17,190,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_CycleCounter_IDT',0,17,191,10,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_00_IDT',0,17,192,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_01_IDT',0,17,193,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_02_IDT',0,17,194,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_03_IDT',0,17,195,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_04_IDT',0,17,196,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_05_IDT',0,17,197,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_06_IDT',0,17,198,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_07_IDT',0,17,199,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_08_IDT',0,17,200,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_09_IDT',0,17,201,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_10_IDT',0,17,202,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_11_IDT',0,17,203,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_12_IDT',0,17,204,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_13_IDT',0,17,205,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_14_IDT',0,17,206,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_15_IDT',0,17,207,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_16_IDT',0,17,208,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_17_IDT',0,17,209,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_18_IDT',0,17,210,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_19_IDT',0,17,211,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_20_IDT',0,17,212,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_21_IDT',0,17,213,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_22_IDT',0,17,214,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_23_IDT',0,17,215,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_24_IDT',0,17,216,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_25_IDT',0,17,217,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_26_IDT',0,17,218,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_27_IDT',0,17,219,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_28_IDT',0,17,220,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_29_IDT',0,17,221,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_30_IDT',0,17,222,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_31_IDT',0,17,223,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_32_IDT',0,17,224,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_33_IDT',0,17,225,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_34_IDT',0,17,226,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_35_IDT',0,17,227,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_36_IDT',0,17,228,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_37_IDT',0,17,229,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_38_IDT',0,17,230,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_39_IDT',0,17,231,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_40_IDT',0,17,232,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_41_IDT',0,17,233,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_42_IDT',0,17,234,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_43_IDT',0,17,235,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_44_IDT',0,17,236,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_45_IDT',0,17,237,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_46_IDT',0,17,238,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_47_IDT',0,17,239,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_48_IDT',0,17,240,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_49_IDT',0,17,241,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_50_IDT',0,17,242,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_51_IDT',0,17,243,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_52_IDT',0,17,244,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_53_IDT',0,17,245,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_54_IDT',0,17,246,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_55_IDT',0,17,247,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_56_IDT',0,17,248,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_57_IDT',0,17,249,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_58_IDT',0,17,250,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistXStd_Obj_59_IDT',0,17,251,10,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistX_Obj_00_IDT',0,17,252,10,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_01_IDT',0,17,253,10,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_02_IDT',0,17,254,10,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_03_IDT',0,17,255,10,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_04_IDT',0,17,128,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_05_IDT',0,17,129,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_06_IDT',0,17,130,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_07_IDT',0,17,131,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_08_IDT',0,17,132,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_09_IDT',0,17,133,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_10_IDT',0,17,134,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_11_IDT',0,17,135,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_12_IDT',0,17,136,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_13_IDT',0,17,137,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_14_IDT',0,17,138,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_15_IDT',0,17,139,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_16_IDT',0,17,140,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_17_IDT',0,17,141,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_18_IDT',0,17,142,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_19_IDT',0,17,143,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_20_IDT',0,17,144,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_21_IDT',0,17,145,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_22_IDT',0,17,146,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_23_IDT',0,17,147,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_24_IDT',0,17,148,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_25_IDT',0,17,149,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_26_IDT',0,17,150,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_27_IDT',0,17,151,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_28_IDT',0,17,152,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_29_IDT',0,17,153,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_30_IDT',0,17,154,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_31_IDT',0,17,155,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_32_IDT',0,17,156,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_33_IDT',0,17,157,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_34_IDT',0,17,158,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_35_IDT',0,17,159,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_36_IDT',0,17,160,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_37_IDT',0,17,161,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_38_IDT',0,17,162,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_39_IDT',0,17,163,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_40_IDT',0,17,164,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_41_IDT',0,17,165,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_42_IDT',0,17,166,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_43_IDT',0,17,167,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_44_IDT',0,17,168,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_45_IDT',0,17,169,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_46_IDT',0,17,170,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_47_IDT',0,17,171,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_48_IDT',0,17,172,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_49_IDT',0,17,173,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_50_IDT',0,17,174,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_51_IDT',0,17,175,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_52_IDT',0,17,176,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_53_IDT',0,17,177,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_54_IDT',0,17,178,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_55_IDT',0,17,179,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_56_IDT',0,17,180,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_57_IDT',0,17,181,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_58_IDT',0,17,182,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistX_Obj_59_IDT',0,17,183,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_00_IDT',0,17,184,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_01_IDT',0,17,185,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_02_IDT',0,17,186,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_03_IDT',0,17,187,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_04_IDT',0,17,188,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_05_IDT',0,17,189,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_06_IDT',0,17,190,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_07_IDT',0,17,191,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_08_IDT',0,17,192,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_09_IDT',0,17,193,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_10_IDT',0,17,194,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_11_IDT',0,17,195,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_12_IDT',0,17,196,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_13_IDT',0,17,197,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_14_IDT',0,17,198,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_15_IDT',0,17,199,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_16_IDT',0,17,200,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_17_IDT',0,17,201,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_18_IDT',0,17,202,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_19_IDT',0,17,203,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_20_IDT',0,17,204,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_21_IDT',0,17,205,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_22_IDT',0,17,206,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_23_IDT',0,17,207,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_24_IDT',0,17,208,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_25_IDT',0,17,209,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_26_IDT',0,17,210,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_27_IDT',0,17,211,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_28_IDT',0,17,212,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_29_IDT',0,17,213,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_30_IDT',0,17,214,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_31_IDT',0,17,215,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_32_IDT',0,17,216,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_33_IDT',0,17,217,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_34_IDT',0,17,218,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_35_IDT',0,17,219,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_36_IDT',0,17,220,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_37_IDT',0,17,221,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_38_IDT',0,17,222,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_39_IDT',0,17,223,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_40_IDT',0,17,224,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_41_IDT',0,17,225,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_42_IDT',0,17,226,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_43_IDT',0,17,227,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_44_IDT',0,17,228,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_45_IDT',0,17,229,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_46_IDT',0,17,230,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_47_IDT',0,17,231,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_48_IDT',0,17,232,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_49_IDT',0,17,233,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_50_IDT',0,17,234,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_51_IDT',0,17,235,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_52_IDT',0,17,236,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_53_IDT',0,17,237,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_54_IDT',0,17,238,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_55_IDT',0,17,239,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_56_IDT',0,17,240,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_57_IDT',0,17,241,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_58_IDT',0,17,242,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistYStd_Obj_59_IDT',0,17,243,11,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DistY_Obj_00_IDT',0,17,244,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_01_IDT',0,17,245,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_02_IDT',0,17,246,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_03_IDT',0,17,247,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_04_IDT',0,17,248,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_05_IDT',0,17,249,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_06_IDT',0,17,250,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_07_IDT',0,17,251,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_08_IDT',0,17,252,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_09_IDT',0,17,253,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_10_IDT',0,17,254,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_11_IDT',0,17,255,11,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_12_IDT',0,17,128,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_13_IDT',0,17,129,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_14_IDT',0,17,130,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_15_IDT',0,17,131,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_16_IDT',0,17,132,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_17_IDT',0,17,133,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_18_IDT',0,17,134,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_19_IDT',0,17,135,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_20_IDT',0,17,136,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_21_IDT',0,17,137,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_22_IDT',0,17,138,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_23_IDT',0,17,139,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_24_IDT',0,17,140,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_25_IDT',0,17,141,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_26_IDT',0,17,142,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_27_IDT',0,17,143,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_28_IDT',0,17,144,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_29_IDT',0,17,145,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_30_IDT',0,17,146,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_31_IDT',0,17,147,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_32_IDT',0,17,148,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_33_IDT',0,17,149,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_34_IDT',0,17,150,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_35_IDT',0,17,151,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_36_IDT',0,17,152,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_37_IDT',0,17,153,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_38_IDT',0,17,154,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_39_IDT',0,17,155,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_40_IDT',0,17,156,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_41_IDT',0,17,157,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_42_IDT',0,17,158,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_43_IDT',0,17,159,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_44_IDT',0,17,160,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_45_IDT',0,17,161,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_46_IDT',0,17,162,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_47_IDT',0,17,163,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_48_IDT',0,17,164,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_49_IDT',0,17,165,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_50_IDT',0,17,166,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_51_IDT',0,17,167,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_52_IDT',0,17,168,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_53_IDT',0,17,169,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_54_IDT',0,17,170,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_55_IDT',0,17,171,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_56_IDT',0,17,172,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_57_IDT',0,17,173,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_58_IDT',0,17,174,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DistY_Obj_59_IDT',0,17,175,12,16
	.word	418
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_00_IDT',0,17,176,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_01_IDT',0,17,177,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_02_IDT',0,17,178,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_03_IDT',0,17,179,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_04_IDT',0,17,180,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_05_IDT',0,17,181,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_06_IDT',0,17,182,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_07_IDT',0,17,183,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_08_IDT',0,17,184,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_09_IDT',0,17,185,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_10_IDT',0,17,186,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_11_IDT',0,17,187,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_12_IDT',0,17,188,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_13_IDT',0,17,189,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_14_IDT',0,17,190,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_15_IDT',0,17,191,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_16_IDT',0,17,192,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_17_IDT',0,17,193,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_18_IDT',0,17,194,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_19_IDT',0,17,195,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_20_IDT',0,17,196,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_21_IDT',0,17,197,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_22_IDT',0,17,198,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_23_IDT',0,17,199,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_24_IDT',0,17,200,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_25_IDT',0,17,201,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_26_IDT',0,17,202,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_27_IDT',0,17,203,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_28_IDT',0,17,204,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_29_IDT',0,17,205,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_30_IDT',0,17,206,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_31_IDT',0,17,207,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_32_IDT',0,17,208,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_33_IDT',0,17,209,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_34_IDT',0,17,210,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_35_IDT',0,17,211,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_36_IDT',0,17,212,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_37_IDT',0,17,213,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_38_IDT',0,17,214,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_39_IDT',0,17,215,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_40_IDT',0,17,216,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_41_IDT',0,17,217,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_42_IDT',0,17,218,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_43_IDT',0,17,219,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_44_IDT',0,17,220,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_45_IDT',0,17,221,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_46_IDT',0,17,222,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_47_IDT',0,17,223,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_48_IDT',0,17,224,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_49_IDT',0,17,225,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_50_IDT',0,17,226,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_51_IDT',0,17,227,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_52_IDT',0,17,228,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_53_IDT',0,17,229,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_54_IDT',0,17,230,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_55_IDT',0,17,231,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_56_IDT',0,17,232,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_57_IDT',0,17,233,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_58_IDT',0,17,234,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynConf_Obj_59_IDT',0,17,235,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_00_IDT',0,17,236,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_01_IDT',0,17,237,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_02_IDT',0,17,238,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_03_IDT',0,17,239,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_04_IDT',0,17,240,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_05_IDT',0,17,241,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_06_IDT',0,17,242,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_07_IDT',0,17,243,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_08_IDT',0,17,244,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_09_IDT',0,17,245,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_10_IDT',0,17,246,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_11_IDT',0,17,247,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_12_IDT',0,17,248,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_13_IDT',0,17,249,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_14_IDT',0,17,250,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_15_IDT',0,17,251,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_16_IDT',0,17,252,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_17_IDT',0,17,253,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_18_IDT',0,17,254,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_19_IDT',0,17,255,12,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_20_IDT',0,17,128,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_21_IDT',0,17,129,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_22_IDT',0,17,130,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_23_IDT',0,17,131,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_24_IDT',0,17,132,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_25_IDT',0,17,133,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_26_IDT',0,17,134,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_27_IDT',0,17,135,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_28_IDT',0,17,136,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_29_IDT',0,17,137,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_30_IDT',0,17,138,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_31_IDT',0,17,139,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_32_IDT',0,17,140,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_33_IDT',0,17,141,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_34_IDT',0,17,142,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_35_IDT',0,17,143,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_36_IDT',0,17,144,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_37_IDT',0,17,145,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_38_IDT',0,17,146,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_39_IDT',0,17,147,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_40_IDT',0,17,148,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_41_IDT',0,17,149,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_42_IDT',0,17,150,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_43_IDT',0,17,151,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_44_IDT',0,17,152,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_45_IDT',0,17,153,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_46_IDT',0,17,154,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_47_IDT',0,17,155,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_48_IDT',0,17,156,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_49_IDT',0,17,157,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_50_IDT',0,17,158,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_51_IDT',0,17,159,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_52_IDT',0,17,160,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_53_IDT',0,17,161,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_54_IDT',0,17,162,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_55_IDT',0,17,163,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_56_IDT',0,17,164,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_57_IDT',0,17,165,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_58_IDT',0,17,166,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_DynProp_Obj_59_IDT',0,17,167,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_EgoAcceleration_IDT',0,17,168,13,16
	.word	418
	.byte	11
	.byte	'ARS_OD_EgoCurvature_IDT',0,17,169,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_EgoVelocityStd_IDT',0,17,170,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_EgoVelocity_IDT',0,17,171,13,16
	.word	418
	.byte	11
	.byte	'ARS_OD_EgoYawRate_IDT',0,17,172,13,16
	.word	418
	.byte	11
	.byte	'ARS_OD_ExtendedCycleFlag_IDT',0,17,173,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_00_IDT',0,17,174,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_01_IDT',0,17,175,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_02_IDT',0,17,176,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_03_IDT',0,17,177,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_04_IDT',0,17,178,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_05_IDT',0,17,179,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_06_IDT',0,17,180,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_07_IDT',0,17,181,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_08_IDT',0,17,182,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_09_IDT',0,17,183,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_10_IDT',0,17,184,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_11_IDT',0,17,185,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_12_IDT',0,17,186,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_13_IDT',0,17,187,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_14_IDT',0,17,188,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_15_IDT',0,17,189,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_16_IDT',0,17,190,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_17_IDT',0,17,191,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_18_IDT',0,17,192,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_19_IDT',0,17,193,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_20_IDT',0,17,194,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_21_IDT',0,17,195,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_22_IDT',0,17,196,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_23_IDT',0,17,197,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_24_IDT',0,17,198,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_25_IDT',0,17,199,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_26_IDT',0,17,200,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_27_IDT',0,17,201,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_28_IDT',0,17,202,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_29_IDT',0,17,203,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_30_IDT',0,17,204,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_31_IDT',0,17,205,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_32_IDT',0,17,206,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_33_IDT',0,17,207,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_34_IDT',0,17,208,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_35_IDT',0,17,209,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_36_IDT',0,17,210,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_37_IDT',0,17,211,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_38_IDT',0,17,212,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_39_IDT',0,17,213,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_40_IDT',0,17,214,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_41_IDT',0,17,215,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_42_IDT',0,17,216,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_43_IDT',0,17,217,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_44_IDT',0,17,218,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_45_IDT',0,17,219,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_46_IDT',0,17,220,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_47_IDT',0,17,221,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_48_IDT',0,17,222,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_49_IDT',0,17,223,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_50_IDT',0,17,224,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_51_IDT',0,17,225,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_52_IDT',0,17,226,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_53_IDT',0,17,227,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_54_IDT',0,17,228,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_55_IDT',0,17,229,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_56_IDT',0,17,230,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_57_IDT',0,17,231,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_58_IDT',0,17,232,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ID_59_IDT',0,17,233,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Latency_IDT',0,17,234,13,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Length_Obj_00_IDT',0,17,235,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_01_IDT',0,17,236,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_02_IDT',0,17,237,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_03_IDT',0,17,238,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_04_IDT',0,17,239,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_05_IDT',0,17,240,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_06_IDT',0,17,241,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_07_IDT',0,17,242,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_08_IDT',0,17,243,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_09_IDT',0,17,244,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_10_IDT',0,17,245,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_11_IDT',0,17,246,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_12_IDT',0,17,247,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_13_IDT',0,17,248,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_14_IDT',0,17,249,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_15_IDT',0,17,250,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_16_IDT',0,17,251,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_17_IDT',0,17,252,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_18_IDT',0,17,253,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_19_IDT',0,17,254,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_20_IDT',0,17,255,13,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_21_IDT',0,17,128,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_22_IDT',0,17,129,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_23_IDT',0,17,130,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_24_IDT',0,17,131,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_25_IDT',0,17,132,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_26_IDT',0,17,133,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_27_IDT',0,17,134,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_28_IDT',0,17,135,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_29_IDT',0,17,136,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_30_IDT',0,17,137,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_31_IDT',0,17,138,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_32_IDT',0,17,139,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_33_IDT',0,17,140,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_34_IDT',0,17,141,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_35_IDT',0,17,142,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_36_IDT',0,17,143,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_37_IDT',0,17,144,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_38_IDT',0,17,145,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_39_IDT',0,17,146,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_40_IDT',0,17,147,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_41_IDT',0,17,148,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_42_IDT',0,17,149,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_43_IDT',0,17,150,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_44_IDT',0,17,151,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_45_IDT',0,17,152,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_46_IDT',0,17,153,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_47_IDT',0,17,154,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_48_IDT',0,17,155,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_49_IDT',0,17,156,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_50_IDT',0,17,157,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_51_IDT',0,17,158,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_52_IDT',0,17,159,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_53_IDT',0,17,160,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_54_IDT',0,17,161,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_55_IDT',0,17,162,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_56_IDT',0,17,163,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_57_IDT',0,17,164,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_58_IDT',0,17,165,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Length_Obj_59_IDT',0,17,166,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_00_IDT',0,17,167,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_01_IDT',0,17,168,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_02_IDT',0,17,169,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_03_IDT',0,17,170,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_04_IDT',0,17,171,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_05_IDT',0,17,172,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_06_IDT',0,17,173,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_07_IDT',0,17,174,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_08_IDT',0,17,175,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_09_IDT',0,17,176,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_10_IDT',0,17,177,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_11_IDT',0,17,178,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_12_IDT',0,17,179,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_13_IDT',0,17,180,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_14_IDT',0,17,181,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_15_IDT',0,17,182,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_16_IDT',0,17,183,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_17_IDT',0,17,184,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_18_IDT',0,17,185,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_19_IDT',0,17,186,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_20_IDT',0,17,187,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_21_IDT',0,17,188,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_22_IDT',0,17,189,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_23_IDT',0,17,190,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_24_IDT',0,17,191,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_25_IDT',0,17,192,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_26_IDT',0,17,193,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_27_IDT',0,17,194,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_28_IDT',0,17,195,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_29_IDT',0,17,196,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_30_IDT',0,17,197,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_31_IDT',0,17,198,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_32_IDT',0,17,199,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_33_IDT',0,17,200,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_34_IDT',0,17,201,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_35_IDT',0,17,202,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_36_IDT',0,17,203,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_37_IDT',0,17,204,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_38_IDT',0,17,205,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_39_IDT',0,17,206,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_40_IDT',0,17,207,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_41_IDT',0,17,208,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_42_IDT',0,17,209,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_43_IDT',0,17,210,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_44_IDT',0,17,211,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_45_IDT',0,17,212,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_46_IDT',0,17,213,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_47_IDT',0,17,214,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_48_IDT',0,17,215,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_49_IDT',0,17,216,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_50_IDT',0,17,217,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_51_IDT',0,17,218,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_52_IDT',0,17,219,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_53_IDT',0,17,220,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_54_IDT',0,17,221,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_55_IDT',0,17,222,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_56_IDT',0,17,223,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_57_IDT',0,17,224,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_58_IDT',0,17,225,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_LifeCycle_Obj_59_IDT',0,17,226,14,16
	.word	418
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_00_IDT',0,17,227,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_01_IDT',0,17,228,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_02_IDT',0,17,229,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_03_IDT',0,17,230,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_04_IDT',0,17,231,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_05_IDT',0,17,232,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_06_IDT',0,17,233,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_07_IDT',0,17,234,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_08_IDT',0,17,235,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_09_IDT',0,17,236,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_10_IDT',0,17,237,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_11_IDT',0,17,238,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_12_IDT',0,17,239,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_13_IDT',0,17,240,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_14_IDT',0,17,241,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_15_IDT',0,17,242,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_16_IDT',0,17,243,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_17_IDT',0,17,244,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_18_IDT',0,17,245,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_19_IDT',0,17,246,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_20_IDT',0,17,247,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_21_IDT',0,17,248,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_22_IDT',0,17,249,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_23_IDT',0,17,250,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_24_IDT',0,17,251,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_25_IDT',0,17,252,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_26_IDT',0,17,253,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_27_IDT',0,17,254,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_28_IDT',0,17,255,14,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_29_IDT',0,17,128,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_30_IDT',0,17,129,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_31_IDT',0,17,130,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_32_IDT',0,17,131,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_33_IDT',0,17,132,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_34_IDT',0,17,133,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_35_IDT',0,17,134,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_36_IDT',0,17,135,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_37_IDT',0,17,136,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_38_IDT',0,17,137,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_39_IDT',0,17,138,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_40_IDT',0,17,139,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_41_IDT',0,17,140,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_42_IDT',0,17,141,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_43_IDT',0,17,142,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_44_IDT',0,17,143,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_45_IDT',0,17,144,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_46_IDT',0,17,145,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_47_IDT',0,17,146,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_48_IDT',0,17,147,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_49_IDT',0,17,148,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_50_IDT',0,17,149,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_51_IDT',0,17,150,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_52_IDT',0,17,151,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_53_IDT',0,17,152,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_54_IDT',0,17,153,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_55_IDT',0,17,154,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_56_IDT',0,17,155,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_57_IDT',0,17,156,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_58_IDT',0,17,157,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MaintenanceState_Obj_59_IDT',0,17,158,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MeasCounter_IDT',0,17,159,15,16
	.word	418
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_00_IDT',0,17,160,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_01_IDT',0,17,161,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_02_IDT',0,17,162,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_03_IDT',0,17,163,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_04_IDT',0,17,164,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_05_IDT',0,17,165,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_06_IDT',0,17,166,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_07_IDT',0,17,167,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_08_IDT',0,17,168,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_09_IDT',0,17,169,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_10_IDT',0,17,170,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_11_IDT',0,17,171,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_12_IDT',0,17,172,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_13_IDT',0,17,173,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_14_IDT',0,17,174,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_15_IDT',0,17,175,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_16_IDT',0,17,176,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_17_IDT',0,17,177,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_18_IDT',0,17,178,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_19_IDT',0,17,179,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_20_IDT',0,17,180,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_21_IDT',0,17,181,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_22_IDT',0,17,182,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_23_IDT',0,17,183,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_24_IDT',0,17,184,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_25_IDT',0,17,185,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_26_IDT',0,17,186,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_27_IDT',0,17,187,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_28_IDT',0,17,188,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_29_IDT',0,17,189,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_30_IDT',0,17,190,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_31_IDT',0,17,191,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_32_IDT',0,17,192,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_33_IDT',0,17,193,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_34_IDT',0,17,194,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_35_IDT',0,17,195,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_36_IDT',0,17,196,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_37_IDT',0,17,197,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_38_IDT',0,17,198,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_39_IDT',0,17,199,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_40_IDT',0,17,200,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_41_IDT',0,17,201,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_42_IDT',0,17,202,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_43_IDT',0,17,203,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_44_IDT',0,17,204,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_45_IDT',0,17,205,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_46_IDT',0,17,206,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_47_IDT',0,17,207,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_48_IDT',0,17,208,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_49_IDT',0,17,209,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_50_IDT',0,17,210,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_51_IDT',0,17,211,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_52_IDT',0,17,212,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_53_IDT',0,17,213,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_54_IDT',0,17,214,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_55_IDT',0,17,215,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_56_IDT',0,17,216,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_57_IDT',0,17,217,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_58_IDT',0,17,218,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MicroDopplerFlag_59_IDT',0,17,219,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_00_IDT',0,17,220,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_01_IDT',0,17,221,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_02_IDT',0,17,222,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_03_IDT',0,17,223,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_04_IDT',0,17,224,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_05_IDT',0,17,225,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_06_IDT',0,17,226,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_07_IDT',0,17,227,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_08_IDT',0,17,228,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_09_IDT',0,17,229,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_10_IDT',0,17,230,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_11_IDT',0,17,231,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_12_IDT',0,17,232,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_13_IDT',0,17,233,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_14_IDT',0,17,234,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_15_IDT',0,17,235,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_16_IDT',0,17,236,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_17_IDT',0,17,237,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_18_IDT',0,17,238,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_19_IDT',0,17,239,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_20_IDT',0,17,240,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_21_IDT',0,17,241,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_22_IDT',0,17,242,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_23_IDT',0,17,243,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_24_IDT',0,17,244,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_25_IDT',0,17,245,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_26_IDT',0,17,246,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_27_IDT',0,17,247,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_28_IDT',0,17,248,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_29_IDT',0,17,249,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_30_IDT',0,17,250,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_31_IDT',0,17,251,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_32_IDT',0,17,252,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_33_IDT',0,17,253,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_34_IDT',0,17,254,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_35_IDT',0,17,255,15,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_36_IDT',0,17,128,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_37_IDT',0,17,129,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_38_IDT',0,17,130,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_39_IDT',0,17,131,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_40_IDT',0,17,132,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_41_IDT',0,17,133,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_42_IDT',0,17,134,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_43_IDT',0,17,135,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_44_IDT',0,17,136,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_45_IDT',0,17,137,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_46_IDT',0,17,138,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_47_IDT',0,17,139,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_48_IDT',0,17,140,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_49_IDT',0,17,141,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_50_IDT',0,17,142,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_51_IDT',0,17,143,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_52_IDT',0,17,144,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_53_IDT',0,17,145,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_54_IDT',0,17,146,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_55_IDT',0,17,147,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_56_IDT',0,17,148,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_57_IDT',0,17,149,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_58_IDT',0,17,150,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MirrorProb_Obj_59_IDT',0,17,151,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Header_IDT',0,17,152,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_00_01_IDT',0,17,153,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_02_03_IDT',0,17,154,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_04_05_IDT',0,17,155,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_06_07_IDT',0,17,156,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_08_09_IDT',0,17,157,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_10_11_IDT',0,17,158,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_12_13_IDT',0,17,159,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_14_15_IDT',0,17,160,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_16_17_IDT',0,17,161,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_18_19_IDT',0,17,162,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_20_21_IDT',0,17,163,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_22_23_IDT',0,17,164,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_24_25_IDT',0,17,165,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_26_27_IDT',0,17,166,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_28_29_IDT',0,17,167,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_30_31_IDT',0,17,168,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_32_33_IDT',0,17,169,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_34_35_IDT',0,17,170,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_36_37_IDT',0,17,171,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_38_39_IDT',0,17,172,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_40_41_IDT',0,17,173,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_42_43_IDT',0,17,174,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_44_45_IDT',0,17,175,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_46_47_IDT',0,17,176,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_48_49_IDT',0,17,177,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_50_51_IDT',0,17,178,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_52_53_IDT',0,17,179,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_54_55_IDT',0,17,180,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_56_57_IDT',0,17,181,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_MsgCounter_Obj_58_59_IDT',0,17,182,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_NumOfObjects_IDT',0,17,183,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_00_IDT',0,17,184,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_01_IDT',0,17,185,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_02_IDT',0,17,186,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_03_IDT',0,17,187,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_04_IDT',0,17,188,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_05_IDT',0,17,189,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_06_IDT',0,17,190,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_07_IDT',0,17,191,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_08_IDT',0,17,192,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_09_IDT',0,17,193,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_10_IDT',0,17,194,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_11_IDT',0,17,195,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_12_IDT',0,17,196,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_13_IDT',0,17,197,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_14_IDT',0,17,198,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_15_IDT',0,17,199,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_16_IDT',0,17,200,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_17_IDT',0,17,201,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_18_IDT',0,17,202,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_19_IDT',0,17,203,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_20_IDT',0,17,204,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_21_IDT',0,17,205,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_22_IDT',0,17,206,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_23_IDT',0,17,207,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_24_IDT',0,17,208,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_25_IDT',0,17,209,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_26_IDT',0,17,210,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_27_IDT',0,17,211,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_28_IDT',0,17,212,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_29_IDT',0,17,213,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_30_IDT',0,17,214,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_31_IDT',0,17,215,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_32_IDT',0,17,216,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_33_IDT',0,17,217,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_34_IDT',0,17,218,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_35_IDT',0,17,219,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_36_IDT',0,17,220,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_37_IDT',0,17,221,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_38_IDT',0,17,222,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_39_IDT',0,17,223,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_40_IDT',0,17,224,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_41_IDT',0,17,225,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_42_IDT',0,17,226,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_43_IDT',0,17,227,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_44_IDT',0,17,228,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_45_IDT',0,17,229,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_46_IDT',0,17,230,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_47_IDT',0,17,231,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_48_IDT',0,17,232,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_49_IDT',0,17,233,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_50_IDT',0,17,234,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_51_IDT',0,17,235,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_52_IDT',0,17,236,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_53_IDT',0,17,237,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_54_IDT',0,17,238,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_55_IDT',0,17,239,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_56_IDT',0,17,240,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_57_IDT',0,17,241,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_58_IDT',0,17,242,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ObstacleProb_Obj_59_IDT',0,17,243,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_00_IDT',0,17,244,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_01_IDT',0,17,245,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_02_IDT',0,17,246,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_03_IDT',0,17,247,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_04_IDT',0,17,248,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_05_IDT',0,17,249,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_06_IDT',0,17,250,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_07_IDT',0,17,251,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_08_IDT',0,17,252,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_09_IDT',0,17,253,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_10_IDT',0,17,254,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_11_IDT',0,17,255,16,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_12_IDT',0,17,128,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_13_IDT',0,17,129,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_14_IDT',0,17,130,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_15_IDT',0,17,131,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_16_IDT',0,17,132,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_17_IDT',0,17,133,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_18_IDT',0,17,134,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_19_IDT',0,17,135,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_20_IDT',0,17,136,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_21_IDT',0,17,137,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_22_IDT',0,17,138,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_23_IDT',0,17,139,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_24_IDT',0,17,140,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_25_IDT',0,17,141,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_26_IDT',0,17,142,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_27_IDT',0,17,143,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_28_IDT',0,17,144,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_29_IDT',0,17,145,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_30_IDT',0,17,146,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_31_IDT',0,17,147,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_32_IDT',0,17,148,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_33_IDT',0,17,149,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_34_IDT',0,17,150,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_35_IDT',0,17,151,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_36_IDT',0,17,152,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_37_IDT',0,17,153,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_38_IDT',0,17,154,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_39_IDT',0,17,155,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_40_IDT',0,17,156,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_41_IDT',0,17,157,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_42_IDT',0,17,158,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_43_IDT',0,17,159,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_44_IDT',0,17,160,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_45_IDT',0,17,161,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_46_IDT',0,17,162,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_47_IDT',0,17,163,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_48_IDT',0,17,164,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_49_IDT',0,17,165,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_50_IDT',0,17,166,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_51_IDT',0,17,167,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_52_IDT',0,17,168,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_53_IDT',0,17,169,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_54_IDT',0,17,170,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_55_IDT',0,17,171,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_56_IDT',0,17,172,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_57_IDT',0,17,173,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_58_IDT',0,17,174,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_OrientationStd_Obj_59_IDT',0,17,175,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_00_IDT',0,17,176,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_01_IDT',0,17,177,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_02_IDT',0,17,178,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_03_IDT',0,17,179,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_04_IDT',0,17,180,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_05_IDT',0,17,181,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_06_IDT',0,17,182,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_07_IDT',0,17,183,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_08_IDT',0,17,184,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_09_IDT',0,17,185,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_10_IDT',0,17,186,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_11_IDT',0,17,187,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_12_IDT',0,17,188,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_13_IDT',0,17,189,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_14_IDT',0,17,190,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_15_IDT',0,17,191,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_16_IDT',0,17,192,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_17_IDT',0,17,193,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_18_IDT',0,17,194,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_19_IDT',0,17,195,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_20_IDT',0,17,196,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_21_IDT',0,17,197,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_22_IDT',0,17,198,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_23_IDT',0,17,199,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_24_IDT',0,17,200,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_25_IDT',0,17,201,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_26_IDT',0,17,202,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_27_IDT',0,17,203,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_28_IDT',0,17,204,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_29_IDT',0,17,205,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_30_IDT',0,17,206,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_31_IDT',0,17,207,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_32_IDT',0,17,208,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_33_IDT',0,17,209,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_34_IDT',0,17,210,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_35_IDT',0,17,211,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_36_IDT',0,17,212,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_37_IDT',0,17,213,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_38_IDT',0,17,214,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_39_IDT',0,17,215,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_40_IDT',0,17,216,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_41_IDT',0,17,217,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_42_IDT',0,17,218,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_43_IDT',0,17,219,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_44_IDT',0,17,220,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_45_IDT',0,17,221,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_46_IDT',0,17,222,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_47_IDT',0,17,223,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_48_IDT',0,17,224,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_49_IDT',0,17,225,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_50_IDT',0,17,226,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_51_IDT',0,17,227,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_52_IDT',0,17,228,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_53_IDT',0,17,229,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_54_IDT',0,17,230,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_55_IDT',0,17,231,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_56_IDT',0,17,232,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_57_IDT',0,17,233,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_58_IDT',0,17,234,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Orientation_Obj_59_IDT',0,17,235,17,16
	.word	418
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_00_IDT',0,17,236,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_01_IDT',0,17,237,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_02_IDT',0,17,238,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_03_IDT',0,17,239,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_04_IDT',0,17,240,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_05_IDT',0,17,241,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_06_IDT',0,17,242,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_07_IDT',0,17,243,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_08_IDT',0,17,244,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_09_IDT',0,17,245,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_10_IDT',0,17,246,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_11_IDT',0,17,247,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_12_IDT',0,17,248,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_13_IDT',0,17,249,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_14_IDT',0,17,250,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_15_IDT',0,17,251,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_16_IDT',0,17,252,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_17_IDT',0,17,253,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_18_IDT',0,17,254,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_19_IDT',0,17,255,17,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_20_IDT',0,17,128,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_21_IDT',0,17,129,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_22_IDT',0,17,130,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_23_IDT',0,17,131,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_24_IDT',0,17,132,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_25_IDT',0,17,133,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_26_IDT',0,17,134,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_27_IDT',0,17,135,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_28_IDT',0,17,136,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_29_IDT',0,17,137,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_30_IDT',0,17,138,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_31_IDT',0,17,139,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_32_IDT',0,17,140,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_33_IDT',0,17,141,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_34_IDT',0,17,142,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_35_IDT',0,17,143,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_36_IDT',0,17,144,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_37_IDT',0,17,145,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_38_IDT',0,17,146,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_39_IDT',0,17,147,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_40_IDT',0,17,148,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_41_IDT',0,17,149,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_42_IDT',0,17,150,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_43_IDT',0,17,151,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_44_IDT',0,17,152,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_45_IDT',0,17,153,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_46_IDT',0,17,154,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_47_IDT',0,17,155,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_48_IDT',0,17,156,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_49_IDT',0,17,157,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_50_IDT',0,17,158,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_51_IDT',0,17,159,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_52_IDT',0,17,160,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_53_IDT',0,17,161,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_54_IDT',0,17,162,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_55_IDT',0,17,163,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_56_IDT',0,17,164,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_57_IDT',0,17,165,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_58_IDT',0,17,166,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_ProbOfExist_Obj_59_IDT',0,17,167,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RCS_Obj_00_IDT',0,17,168,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_01_IDT',0,17,169,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_02_IDT',0,17,170,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_03_IDT',0,17,171,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_04_IDT',0,17,172,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_05_IDT',0,17,173,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_06_IDT',0,17,174,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_07_IDT',0,17,175,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_08_IDT',0,17,176,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_09_IDT',0,17,177,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_10_IDT',0,17,178,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_11_IDT',0,17,179,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_12_IDT',0,17,180,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_13_IDT',0,17,181,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_14_IDT',0,17,182,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_15_IDT',0,17,183,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_16_IDT',0,17,184,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_17_IDT',0,17,185,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_18_IDT',0,17,186,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_19_IDT',0,17,187,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_20_IDT',0,17,188,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_21_IDT',0,17,189,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_22_IDT',0,17,190,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_23_IDT',0,17,191,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_24_IDT',0,17,192,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_25_IDT',0,17,193,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_26_IDT',0,17,194,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_27_IDT',0,17,195,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_28_IDT',0,17,196,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_29_IDT',0,17,197,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_30_IDT',0,17,198,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_31_IDT',0,17,199,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_32_IDT',0,17,200,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_33_IDT',0,17,201,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_34_IDT',0,17,202,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_35_IDT',0,17,203,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_36_IDT',0,17,204,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_37_IDT',0,17,205,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_38_IDT',0,17,206,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_39_IDT',0,17,207,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_40_IDT',0,17,208,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_41_IDT',0,17,209,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_42_IDT',0,17,210,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_43_IDT',0,17,211,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_44_IDT',0,17,212,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_45_IDT',0,17,213,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_46_IDT',0,17,214,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_47_IDT',0,17,215,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_48_IDT',0,17,216,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_49_IDT',0,17,217,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_50_IDT',0,17,218,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_51_IDT',0,17,219,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_52_IDT',0,17,220,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_53_IDT',0,17,221,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_54_IDT',0,17,222,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_55_IDT',0,17,223,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_56_IDT',0,17,224,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_57_IDT',0,17,225,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_58_IDT',0,17,226,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RCS_Obj_59_IDT',0,17,227,18,16
	.word	418
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_00_IDT',0,17,228,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_01_IDT',0,17,229,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_02_IDT',0,17,230,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_03_IDT',0,17,231,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_04_IDT',0,17,232,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_05_IDT',0,17,233,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_06_IDT',0,17,234,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_07_IDT',0,17,235,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_08_IDT',0,17,236,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_09_IDT',0,17,237,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_10_IDT',0,17,238,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_11_IDT',0,17,239,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_12_IDT',0,17,240,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_13_IDT',0,17,241,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_14_IDT',0,17,242,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_15_IDT',0,17,243,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_16_IDT',0,17,244,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_17_IDT',0,17,245,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_18_IDT',0,17,246,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_19_IDT',0,17,247,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_20_IDT',0,17,248,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_21_IDT',0,17,249,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_22_IDT',0,17,250,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_23_IDT',0,17,251,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_24_IDT',0,17,252,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_25_IDT',0,17,253,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_26_IDT',0,17,254,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_27_IDT',0,17,255,18,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_28_IDT',0,17,128,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_29_IDT',0,17,129,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_30_IDT',0,17,130,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_31_IDT',0,17,131,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_32_IDT',0,17,132,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_33_IDT',0,17,133,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_34_IDT',0,17,134,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_35_IDT',0,17,135,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_36_IDT',0,17,136,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_37_IDT',0,17,137,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_38_IDT',0,17,138,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_39_IDT',0,17,139,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_40_IDT',0,17,140,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_41_IDT',0,17,141,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_42_IDT',0,17,142,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_43_IDT',0,17,143,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_44_IDT',0,17,144,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_45_IDT',0,17,145,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_46_IDT',0,17,146,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_47_IDT',0,17,147,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_48_IDT',0,17,148,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_49_IDT',0,17,149,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_50_IDT',0,17,150,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_51_IDT',0,17,151,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_52_IDT',0,17,152,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_53_IDT',0,17,153,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_54_IDT',0,17,154,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_55_IDT',0,17,155,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_56_IDT',0,17,156,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_57_IDT',0,17,157,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_58_IDT',0,17,158,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_RefPoint_Obj_59_IDT',0,17,159,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_TaskValidFlag_IDT',0,17,160,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_TimeStampGlobNanoSec_IDT',0,17,161,19,16
	.word	310
	.byte	11
	.byte	'ARS_OD_TimeStampGlobSec_IDT',0,17,162,19,16
	.word	310
	.byte	11
	.byte	'ARS_OD_TimeStampLocal_IDT',0,17,163,19,16
	.word	310
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_00_IDT',0,17,164,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_01_IDT',0,17,165,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_02_IDT',0,17,166,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_03_IDT',0,17,167,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_04_IDT',0,17,168,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_05_IDT',0,17,169,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_06_IDT',0,17,170,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_07_IDT',0,17,171,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_08_IDT',0,17,172,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_09_IDT',0,17,173,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_10_IDT',0,17,174,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_11_IDT',0,17,175,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_12_IDT',0,17,176,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_13_IDT',0,17,177,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_14_IDT',0,17,178,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_15_IDT',0,17,179,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_16_IDT',0,17,180,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_17_IDT',0,17,181,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_18_IDT',0,17,182,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_19_IDT',0,17,183,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_20_IDT',0,17,184,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_21_IDT',0,17,185,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_22_IDT',0,17,186,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_23_IDT',0,17,187,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_24_IDT',0,17,188,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_25_IDT',0,17,189,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_26_IDT',0,17,190,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_27_IDT',0,17,191,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_28_IDT',0,17,192,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_29_IDT',0,17,193,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_30_IDT',0,17,194,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_31_IDT',0,17,195,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_32_IDT',0,17,196,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_33_IDT',0,17,197,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_34_IDT',0,17,198,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_35_IDT',0,17,199,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_36_IDT',0,17,200,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_37_IDT',0,17,201,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_38_IDT',0,17,202,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_39_IDT',0,17,203,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_40_IDT',0,17,204,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_41_IDT',0,17,205,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_42_IDT',0,17,206,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_43_IDT',0,17,207,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_44_IDT',0,17,208,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_45_IDT',0,17,209,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_46_IDT',0,17,210,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_47_IDT',0,17,211,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_48_IDT',0,17,212,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_49_IDT',0,17,213,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_50_IDT',0,17,214,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_51_IDT',0,17,215,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_52_IDT',0,17,216,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_53_IDT',0,17,217,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_54_IDT',0,17,218,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_55_IDT',0,17,219,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_56_IDT',0,17,220,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_57_IDT',0,17,221,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_58_IDT',0,17,222,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsXStd_Obj_59_IDT',0,17,223,19,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_00_IDT',0,17,224,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_01_IDT',0,17,225,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_02_IDT',0,17,226,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_03_IDT',0,17,227,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_04_IDT',0,17,228,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_05_IDT',0,17,229,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_06_IDT',0,17,230,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_07_IDT',0,17,231,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_08_IDT',0,17,232,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_09_IDT',0,17,233,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_10_IDT',0,17,234,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_11_IDT',0,17,235,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_12_IDT',0,17,236,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_13_IDT',0,17,237,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_14_IDT',0,17,238,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_15_IDT',0,17,239,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_16_IDT',0,17,240,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_17_IDT',0,17,241,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_18_IDT',0,17,242,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_19_IDT',0,17,243,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_20_IDT',0,17,244,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_21_IDT',0,17,245,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_22_IDT',0,17,246,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_23_IDT',0,17,247,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_24_IDT',0,17,248,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_25_IDT',0,17,249,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_26_IDT',0,17,250,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_27_IDT',0,17,251,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_28_IDT',0,17,252,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_29_IDT',0,17,253,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_30_IDT',0,17,254,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_31_IDT',0,17,255,19,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_32_IDT',0,17,128,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_33_IDT',0,17,129,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_34_IDT',0,17,130,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_35_IDT',0,17,131,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_36_IDT',0,17,132,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_37_IDT',0,17,133,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_38_IDT',0,17,134,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_39_IDT',0,17,135,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_40_IDT',0,17,136,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_41_IDT',0,17,137,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_42_IDT',0,17,138,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_43_IDT',0,17,139,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_44_IDT',0,17,140,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_45_IDT',0,17,141,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_46_IDT',0,17,142,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_47_IDT',0,17,143,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_48_IDT',0,17,144,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_49_IDT',0,17,145,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_50_IDT',0,17,146,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_51_IDT',0,17,147,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_52_IDT',0,17,148,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_53_IDT',0,17,149,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_54_IDT',0,17,150,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_55_IDT',0,17,151,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_56_IDT',0,17,152,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_57_IDT',0,17,153,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_58_IDT',0,17,154,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsX_Obj_59_IDT',0,17,155,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_00_IDT',0,17,156,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_01_IDT',0,17,157,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_02_IDT',0,17,158,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_03_IDT',0,17,159,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_04_IDT',0,17,160,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_05_IDT',0,17,161,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_06_IDT',0,17,162,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_07_IDT',0,17,163,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_08_IDT',0,17,164,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_09_IDT',0,17,165,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_10_IDT',0,17,166,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_11_IDT',0,17,167,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_12_IDT',0,17,168,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_13_IDT',0,17,169,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_14_IDT',0,17,170,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_15_IDT',0,17,171,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_16_IDT',0,17,172,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_17_IDT',0,17,173,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_18_IDT',0,17,174,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_19_IDT',0,17,175,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_20_IDT',0,17,176,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_21_IDT',0,17,177,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_22_IDT',0,17,178,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_23_IDT',0,17,179,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_24_IDT',0,17,180,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_25_IDT',0,17,181,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_26_IDT',0,17,182,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_27_IDT',0,17,183,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_28_IDT',0,17,184,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_29_IDT',0,17,185,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_30_IDT',0,17,186,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_31_IDT',0,17,187,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_32_IDT',0,17,188,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_33_IDT',0,17,189,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_34_IDT',0,17,190,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_35_IDT',0,17,191,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_36_IDT',0,17,192,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_37_IDT',0,17,193,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_38_IDT',0,17,194,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_39_IDT',0,17,195,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_40_IDT',0,17,196,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_41_IDT',0,17,197,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_42_IDT',0,17,198,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_43_IDT',0,17,199,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_44_IDT',0,17,200,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_45_IDT',0,17,201,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_46_IDT',0,17,202,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_47_IDT',0,17,203,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_48_IDT',0,17,204,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_49_IDT',0,17,205,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_50_IDT',0,17,206,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_51_IDT',0,17,207,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_52_IDT',0,17,208,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_53_IDT',0,17,209,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_54_IDT',0,17,210,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_55_IDT',0,17,211,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_56_IDT',0,17,212,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_57_IDT',0,17,213,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_58_IDT',0,17,214,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsYStd_Obj_59_IDT',0,17,215,20,15
	.word	144
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_00_IDT',0,17,216,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_01_IDT',0,17,217,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_02_IDT',0,17,218,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_03_IDT',0,17,219,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_04_IDT',0,17,220,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_05_IDT',0,17,221,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_06_IDT',0,17,222,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_07_IDT',0,17,223,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_08_IDT',0,17,224,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_09_IDT',0,17,225,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_10_IDT',0,17,226,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_11_IDT',0,17,227,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_12_IDT',0,17,228,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_13_IDT',0,17,229,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_14_IDT',0,17,230,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_15_IDT',0,17,231,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_16_IDT',0,17,232,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_17_IDT',0,17,233,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_18_IDT',0,17,234,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_19_IDT',0,17,235,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_20_IDT',0,17,236,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_21_IDT',0,17,237,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_22_IDT',0,17,238,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_23_IDT',0,17,239,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_24_IDT',0,17,240,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_25_IDT',0,17,241,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_26_IDT',0,17,242,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_27_IDT',0,17,243,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_28_IDT',0,17,244,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_29_IDT',0,17,245,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_30_IDT',0,17,246,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_31_IDT',0,17,247,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_32_IDT',0,17,248,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_33_IDT',0,17,249,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_34_IDT',0,17,250,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_35_IDT',0,17,251,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_36_IDT',0,17,252,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_37_IDT',0,17,253,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_38_IDT',0,17,254,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_39_IDT',0,17,255,20,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_40_IDT',0,17,128,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_41_IDT',0,17,129,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_42_IDT',0,17,130,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_43_IDT',0,17,131,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_44_IDT',0,17,132,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_45_IDT',0,17,133,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_46_IDT',0,17,134,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_47_IDT',0,17,135,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_48_IDT',0,17,136,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_49_IDT',0,17,137,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_50_IDT',0,17,138,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_51_IDT',0,17,139,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_52_IDT',0,17,140,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_53_IDT',0,17,141,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_54_IDT',0,17,142,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_55_IDT',0,17,143,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_56_IDT',0,17,144,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_57_IDT',0,17,145,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_58_IDT',0,17,146,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_VabsY_Obj_59_IDT',0,17,147,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_Width_Obj_00_IDT',0,17,148,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_01_IDT',0,17,149,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_02_IDT',0,17,150,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_03_IDT',0,17,151,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_04_IDT',0,17,152,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_05_IDT',0,17,153,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_06_IDT',0,17,154,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_07_IDT',0,17,155,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_08_IDT',0,17,156,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_09_IDT',0,17,157,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_10_IDT',0,17,158,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_11_IDT',0,17,159,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_12_IDT',0,17,160,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_13_IDT',0,17,161,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_14_IDT',0,17,162,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_15_IDT',0,17,163,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_16_IDT',0,17,164,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_17_IDT',0,17,165,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_18_IDT',0,17,166,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_19_IDT',0,17,167,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_20_IDT',0,17,168,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_21_IDT',0,17,169,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_22_IDT',0,17,170,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_23_IDT',0,17,171,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_24_IDT',0,17,172,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_25_IDT',0,17,173,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_26_IDT',0,17,174,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_27_IDT',0,17,175,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_28_IDT',0,17,176,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_29_IDT',0,17,177,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_30_IDT',0,17,178,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_31_IDT',0,17,179,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_32_IDT',0,17,180,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_33_IDT',0,17,181,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_34_IDT',0,17,182,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_35_IDT',0,17,183,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_36_IDT',0,17,184,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_37_IDT',0,17,185,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_38_IDT',0,17,186,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_39_IDT',0,17,187,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_40_IDT',0,17,188,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_41_IDT',0,17,189,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_42_IDT',0,17,190,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_43_IDT',0,17,191,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_44_IDT',0,17,192,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_45_IDT',0,17,193,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_46_IDT',0,17,194,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_47_IDT',0,17,195,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_48_IDT',0,17,196,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_49_IDT',0,17,197,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_50_IDT',0,17,198,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_51_IDT',0,17,199,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_52_IDT',0,17,200,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_53_IDT',0,17,201,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_54_IDT',0,17,202,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_55_IDT',0,17,203,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_56_IDT',0,17,204,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_57_IDT',0,17,205,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_58_IDT',0,17,206,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_Width_Obj_59_IDT',0,17,207,21,15
	.word	144
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_00_IDT',0,17,208,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_01_IDT',0,17,209,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_02_IDT',0,17,210,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_03_IDT',0,17,211,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_04_IDT',0,17,212,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_05_IDT',0,17,213,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_06_IDT',0,17,214,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_07_IDT',0,17,215,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_08_IDT',0,17,216,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_09_IDT',0,17,217,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_10_IDT',0,17,218,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_11_IDT',0,17,219,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_12_IDT',0,17,220,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_13_IDT',0,17,221,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_14_IDT',0,17,222,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_15_IDT',0,17,223,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_16_IDT',0,17,224,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_17_IDT',0,17,225,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_18_IDT',0,17,226,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_19_IDT',0,17,227,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_20_IDT',0,17,228,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_21_IDT',0,17,229,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_22_IDT',0,17,230,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_23_IDT',0,17,231,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_24_IDT',0,17,232,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_25_IDT',0,17,233,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_26_IDT',0,17,234,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_27_IDT',0,17,235,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_28_IDT',0,17,236,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_29_IDT',0,17,237,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_30_IDT',0,17,238,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_31_IDT',0,17,239,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_32_IDT',0,17,240,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_33_IDT',0,17,241,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_34_IDT',0,17,242,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_35_IDT',0,17,243,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_36_IDT',0,17,244,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_37_IDT',0,17,245,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_38_IDT',0,17,246,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_39_IDT',0,17,247,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_40_IDT',0,17,248,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_41_IDT',0,17,249,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_42_IDT',0,17,250,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_43_IDT',0,17,251,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_44_IDT',0,17,252,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_45_IDT',0,17,253,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_46_IDT',0,17,254,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_47_IDT',0,17,255,21,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_48_IDT',0,17,128,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_49_IDT',0,17,129,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_50_IDT',0,17,130,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_51_IDT',0,17,131,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_52_IDT',0,17,132,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_53_IDT',0,17,133,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_54_IDT',0,17,134,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_55_IDT',0,17,135,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_56_IDT',0,17,136,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_57_IDT',0,17,137,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_58_IDT',0,17,138,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbsStd_Obj_59_IDT',0,17,139,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_00_IDT',0,17,140,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_01_IDT',0,17,141,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_02_IDT',0,17,142,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_03_IDT',0,17,143,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_04_IDT',0,17,144,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_05_IDT',0,17,145,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_06_IDT',0,17,146,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_07_IDT',0,17,147,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_08_IDT',0,17,148,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_09_IDT',0,17,149,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_10_IDT',0,17,150,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_11_IDT',0,17,151,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_12_IDT',0,17,152,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_13_IDT',0,17,153,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_14_IDT',0,17,154,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_15_IDT',0,17,155,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_16_IDT',0,17,156,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_17_IDT',0,17,157,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_18_IDT',0,17,158,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_19_IDT',0,17,159,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_20_IDT',0,17,160,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_21_IDT',0,17,161,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_22_IDT',0,17,162,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_23_IDT',0,17,163,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_24_IDT',0,17,164,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_25_IDT',0,17,165,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_26_IDT',0,17,166,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_27_IDT',0,17,167,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_28_IDT',0,17,168,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_29_IDT',0,17,169,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_30_IDT',0,17,170,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_31_IDT',0,17,171,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_32_IDT',0,17,172,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_33_IDT',0,17,173,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_34_IDT',0,17,174,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_35_IDT',0,17,175,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_36_IDT',0,17,176,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_37_IDT',0,17,177,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_38_IDT',0,17,178,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_39_IDT',0,17,179,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_40_IDT',0,17,180,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_41_IDT',0,17,181,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_42_IDT',0,17,182,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_43_IDT',0,17,183,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_44_IDT',0,17,184,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_45_IDT',0,17,185,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_46_IDT',0,17,186,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_47_IDT',0,17,187,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_48_IDT',0,17,188,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_49_IDT',0,17,189,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_50_IDT',0,17,190,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_51_IDT',0,17,191,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_52_IDT',0,17,192,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_53_IDT',0,17,193,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_54_IDT',0,17,194,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_55_IDT',0,17,195,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_56_IDT',0,17,196,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_57_IDT',0,17,197,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_58_IDT',0,17,198,22,16
	.word	418
	.byte	11
	.byte	'ARS_OD_YawRateAbs_Obj_59_IDT',0,17,199,22,16
	.word	418
	.byte	11
	.byte	'ARS_SP_CRC16_Checksum_IDT',0,17,201,22,16
	.word	418
	.byte	11
	.byte	'ARS_SP_ErrStateGroup_1_IDT',0,17,204,22,15
	.word	144
	.byte	11
	.byte	'ARS_SP_ErrStateGroup_2_IDT',0,17,205,22,15
	.word	144
	.byte	11
	.byte	'ARS_SP_ErrStateGroup_3_IDT',0,17,206,22,15
	.word	144
	.byte	11
	.byte	'ARS_SP_MsgCounter_IDT',0,17,208,22,15
	.word	144
	.byte	11
	.byte	'ARS_TSYNC_CRC16_Checksum_IDT',0,17,213,22,16
	.word	418
	.byte	11
	.byte	'ARS_TSYNC_LastTimeLeap_IDT',0,17,214,22,16
	.word	418
	.byte	11
	.byte	'ARS_TSYNC_MaxTimeLeap_IDT',0,17,215,22,16
	.word	418
	.byte	11
	.byte	'ARS_TSYNC_MsgCounter_IDT',0,17,216,22,15
	.word	144
	.byte	11
	.byte	'ARS_TSYNC_TimeStampGlobNSec_IDT',0,17,217,22,16
	.word	310
	.byte	11
	.byte	'ARS_TSYNC_TimeStampGlobSec_IDT',0,17,218,22,16
	.word	310
	.byte	12,17,219,22,9,20,13
	.byte	'distance',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'type',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'width',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'peak',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'counter',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,8,13
	.byte	'reserve',0
	.word	144
	.byte	1,2,35,16,0,11
	.byte	'ApaDistT',0,17,228,22,3
	.word	85843
	.byte	12,17,230,22,9,80,13
	.byte	'ARS_OD_ID',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'ARS_OD_DistX_Obj',0
	.word	4688
	.byte	4,2,35,2,13
	.byte	'ARS_OD_DistY_Obj',0
	.word	4688
	.byte	4,2,35,6,13
	.byte	'ARS_OD_VabsX_Obj',0
	.word	4688
	.byte	4,2,35,10,13
	.byte	'ARS_OD_VabsY_Obj',0
	.word	4688
	.byte	4,2,35,14,13
	.byte	'ARS_OD_AabsX_Obj',0
	.word	4688
	.byte	4,2,35,18,13
	.byte	'ARS_OD_AabsY_Obj',0
	.word	4688
	.byte	4,2,35,22,13
	.byte	'ARS_OD_DistXStd_Obj',0
	.word	144
	.byte	1,2,35,26,13
	.byte	'ARS_OD_DistYStd_Obj',0
	.word	144
	.byte	1,2,35,27,13
	.byte	'ARS_OD_VabsXStd_Obj',0
	.word	144
	.byte	1,2,35,28,13
	.byte	'ARS_OD_VabsYStd_Obj',0
	.word	144
	.byte	1,2,35,29,13
	.byte	'ARS_OD_AabsXStd_Obj',0
	.word	144
	.byte	1,2,35,30,13
	.byte	'ARS_OD_AabsYStd_Obj',0
	.word	144
	.byte	1,2,35,31,13
	.byte	'ARS_OD_RCS_Obj',0
	.word	4688
	.byte	4,2,35,32,13
	.byte	'ARS_OD_Length_Obj',0
	.word	4688
	.byte	4,2,35,36,13
	.byte	'ARS_OD_Width_Obj',0
	.word	4688
	.byte	4,2,35,40,13
	.byte	'ARS_OD_Orientation_Obj',0
	.word	4688
	.byte	4,2,35,44,13
	.byte	'ARS_OD_OrientationStd_Obj',0
	.word	4688
	.byte	4,2,35,48,13
	.byte	'ARS_OD_YawRateAbs_Obj',0
	.word	4688
	.byte	4,2,35,52,13
	.byte	'ARS_OD_YawRateAbsStd_Obj',0
	.word	4688
	.byte	4,2,35,56,13
	.byte	'ARS_OD_RefPoint',0
	.word	144
	.byte	1,2,35,60,13
	.byte	'ARS_OD_Classification_Obj',0
	.word	144
	.byte	1,2,35,61,13
	.byte	'ARS_OD_ClassConf_Obj',0
	.word	144
	.byte	1,2,35,62,13
	.byte	'ARS_OD_DynProp_Obj',0
	.word	144
	.byte	1,2,35,63,13
	.byte	'ARS_OD_DynConf_Obj',0
	.word	144
	.byte	1,2,35,64,13
	.byte	'ARS_OD_ProbOfExist_Obj',0
	.word	144
	.byte	1,2,35,65,13
	.byte	'ARS_OD_MirrorProb_Obj',0
	.word	144
	.byte	1,2,35,66,13
	.byte	'ARS_OD_ObstacleProb_Obj',0
	.word	144
	.byte	1,2,35,67,13
	.byte	'ARS_OD_MaintenanceState_Obj',0
	.word	144
	.byte	1,2,35,68,13
	.byte	'ARS_OD_LifeCycle_Obj',0
	.word	418
	.byte	2,2,35,70,13
	.byte	'ARS_OD_MicroDopplerFlag',0
	.word	144
	.byte	1,2,35,72,13
	.byte	'DistHeight_Obj',0
	.word	4688
	.byte	4,2,35,74,0,11
	.byte	'ArsObjectInfo',0,17,136,23,3
	.word	85983
	.byte	26,192,37
	.word	85983
	.byte	27,59,0,11
	.byte	'ArsObjectInfo_60',0,17,138,23,23
	.word	86937
	.byte	12,17,139,23,9,20,13
	.byte	'gear_status',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'gear_enable',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'driver_override',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,4,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,12,0,11
	.byte	'AutoGearInfo',0,17,146,23,3
	.word	86973
	.byte	11
	.byte	'BAS_CtrlActv_IDT',0,17,148,23,15
	.word	144
	.byte	11
	.byte	'BAS_FlgFlt_IDT',0,17,149,23,15
	.word	144
	.byte	11
	.byte	'BCM_AmbeLightZone1Sts_IDT',0,17,151,23,15
	.word	144
	.byte	11
	.byte	'BCM_AmbeLightZone2Sts_IDT',0,17,152,23,15
	.word	144
	.byte	11
	.byte	'BCM_BrakeLightSts_IDT',0,17,154,23,15
	.word	144
	.byte	11
	.byte	'BCM_DayRunningLampSts_IDT',0,17,157,23,15
	.word	144
	.byte	11
	.byte	'BCM_FFogLampSWSts_IDT',0,17,163,23,15
	.word	144
	.byte	11
	.byte	'BCM_Fr_domelampSts_IDT',0,17,168,23,15
	.word	144
	.byte	11
	.byte	'BCM_FrontFogLampLightSts_IDT',0,17,169,23,15
	.word	144
	.byte	11
	.byte	'BCM_HeadLight_adjustSts_IDT',0,17,174,23,15
	.word	144
	.byte	11
	.byte	'BCM_HighBeamSWSts_IDT',0,17,175,23,15
	.word	144
	.byte	11
	.byte	'BCM_HighBeamSts_IDT',0,17,176,23,15
	.word	144
	.byte	11
	.byte	'BCM_LicensePlateLightSts_IDT',0,17,177,23,15
	.word	144
	.byte	11
	.byte	'BCM_LowBeamSWSts_IDT',0,17,178,23,15
	.word	144
	.byte	11
	.byte	'BCM_LowBeamSts_IDT',0,17,179,23,15
	.word	144
	.byte	11
	.byte	'BCM_PosLmpSts_IDT',0,17,180,23,15
	.word	144
	.byte	11
	.byte	'BCM_RFogLampSWSts_IDT',0,17,181,23,15
	.word	144
	.byte	11
	.byte	'BCM_RMarkerLightSts_IDT',0,17,184,23,15
	.word	144
	.byte	11
	.byte	'BCM_RearFogLampLightSts_IDT',0,17,187,23,15
	.word	144
	.byte	11
	.byte	'BCM_ReverseLightSts_IDT',0,17,194,23,15
	.word	144
	.byte	11
	.byte	'BCM_Rr_domelampSts_IDT',0,17,195,23,15
	.word	144
	.byte	11
	.byte	'BCM_STAT_HazardWarn_IDT',0,17,196,23,15
	.word	144
	.byte	11
	.byte	'BCM_STAT_Horn_IDT',0,17,197,23,15
	.word	144
	.byte	11
	.byte	'BCM_STAT_InteriorLight_IDT',0,17,198,23,15
	.word	144
	.byte	11
	.byte	'BCM_STAT_SwLightBrightness_IDT',0,17,199,23,15
	.word	144
	.byte	11
	.byte	'BCM_Tail_MicroSW_IDT',0,17,201,23,15
	.word	144
	.byte	11
	.byte	'BCM_TurnIndicatorSts_IDT',0,17,203,23,15
	.word	144
	.byte	11
	.byte	'BCM_TurnLightSWSts_IDT',0,17,204,23,15
	.word	144
	.byte	11
	.byte	'BCM_TurnLight_FaultSts_IDT',0,17,205,23,15
	.word	144
	.byte	11
	.byte	'BCM_WPC_Off_Req_IDT',0,17,206,23,15
	.word	144
	.byte	12,17,213,23,9,36,13
	.byte	'turn_light_status',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'brake_light_status',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'high_beam',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'low_beam',0
	.word	144
	.byte	1,2,35,3,13
	.byte	'wiper',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'door_driver',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'door_passenger',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'door_left_rear',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'door_right_rear',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'hood',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'trunk',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'passenger_detect',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'driver_seat_belt',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'passenger_seat_belt',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'temperature',0
	.word	4688
	.byte	4,2,35,14,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,20,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,28,0,11
	.byte	'BodyInfo',0,17,232,23,3
	.word	88078
	.byte	12,17,234,23,9,16,13
	.byte	'x',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'y',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'width',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'height',0
	.word	4688
	.byte	4,2,35,12,0,11
	.byte	'BoxRect',0,17,240,23,3
	.word	88474
	.byte	12,17,242,23,9,12,13
	.byte	'brake_enable',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'brake_prefill',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'brake_system_mode',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'brake_command',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'dec_to_stop_flag',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'brake_control_mode',0
	.word	144
	.byte	1,2,35,9,0,11
	.byte	'BrakeCommand',0,17,250,23,3
	.word	88551
	.byte	12,17,252,23,9,32,13
	.byte	'braking_status',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'brake_pedal_output',0
	.word	4688
	.byte	4,2,35,2,13
	.byte	'master_cylinder_pressure',0
	.word	4688
	.byte	4,2,35,6,13
	.byte	'brake_control_available',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'brake_error',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'brake_enable',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'driver_override',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'abs_enable',0
	.word	144
	.byte	1,2,35,14,13
	.byte	'abs_active',0
	.word	144
	.byte	1,2,35,15,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,16,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,24,0,11
	.byte	'BrakeInfo',0,17,137,24,3
	.word	88729
	.byte	12,17,155,24,9,28,13
	.byte	'calib_status',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'yaw',0
	.word	4688
	.byte	4,2,35,2,13
	.byte	'pitch',0
	.word	4688
	.byte	4,2,35,6,13
	.byte	'roll',0
	.word	4688
	.byte	4,2,35,10,13
	.byte	'camera_x',0
	.word	4688
	.byte	4,2,35,14,13
	.byte	'camera_y',0
	.word	4688
	.byte	4,2,35,18,13
	.byte	'camera_z',0
	.word	4688
	.byte	4,2,35,22,0,11
	.byte	'Camera_Calib_Results',0,17,164,24,3
	.word	89021
	.byte	12,17,166,24,9,4,13
	.byte	'sensor_ID',0
	.word	310
	.byte	4,2,35,0,0,11
	.byte	'Camera_Intrinsic_Params',0,17,169,24,3
	.word	89176
	.byte	12,17,171,24,9,12,13
	.byte	'steer_enable',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'steer_system_mode',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'steer_clear',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'steering_command',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'steering_speed_command',0
	.word	4688
	.byte	4,2,35,8,0,11
	.byte	'SteerCommand',0,17,178,24,3
	.word	89235
	.byte	12,17,180,24,9,12,13
	.byte	'throttle_enable',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'throttle_ignore',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'throttle_system_mode',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'throttle_command',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'target_acce',0
	.word	4688
	.byte	4,2,35,8,0,11
	.byte	'ThrottleCommand',0,17,187,24,3
	.word	89392
	.byte	12,17,189,24,9,4,13
	.byte	'gear_enable',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'gear_ignore',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'gear_clear',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'gear_command',0
	.word	144
	.byte	1,2,35,3,0,11
	.byte	'GearCommand',0,17,195,24,3
	.word	89551
	.byte	12,17,197,24,9,2,13
	.byte	'epb_enable',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'epb_command',0
	.word	144
	.byte	1,2,35,1,0,11
	.byte	'EPBCommand',0,17,201,24,3
	.word	89663
	.byte	12,17,231,24,9,32,13
	.byte	'steering_angle',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'steering_enable',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'steering_column_torque',0
	.word	4688
	.byte	4,2,35,6,13
	.byte	'driver_override',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'steering_control_available',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'steering_angle_speed',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,16,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,24,0,11
	.byte	'SteeringInfo',0,17,241,24,3
	.word	89731
	.byte	12,17,243,24,9,72,13
	.byte	'wheel_speed_rear_right',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'wheel_speed_rear_left',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'wheel_speed_front_right',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'wheel_speed_front_left',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'wheel_speed_rear_right_dir',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'wheel_speed_rear_left_dir',0
	.word	144
	.byte	1,2,35,17,13
	.byte	'wheel_speed_front_right_dir',0
	.word	144
	.byte	1,2,35,18,13
	.byte	'wheel_speed_front_left_dir',0
	.word	144
	.byte	1,2,35,19,13
	.byte	'wheel_position_rear_right',0
	.word	4599
	.byte	2,2,35,20,13
	.byte	'wheel_position_rear_left',0
	.word	4599
	.byte	2,2,35,22,13
	.byte	'wheel_position_front_right',0
	.word	4599
	.byte	2,2,35,24,13
	.byte	'wheel_position_front_left',0
	.word	4599
	.byte	2,2,35,26,13
	.byte	'vehicle_speed',0
	.word	4688
	.byte	4,2,35,28,13
	.byte	'vehicle_stand_still',0
	.word	144
	.byte	1,2,35,32,13
	.byte	'longitude_acce',0
	.word	4688
	.byte	4,2,35,34,13
	.byte	'longitude_acce_valid',0
	.word	144
	.byte	1,2,35,38,13
	.byte	'lateral_acce',0
	.word	4688
	.byte	4,2,35,40,13
	.byte	'lateral_acce_valid',0
	.word	144
	.byte	1,2,35,44,13
	.byte	'roll_rate',0
	.word	4688
	.byte	4,2,35,46,13
	.byte	'yaw_rate',0
	.word	4688
	.byte	4,2,35,50,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,56,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,64,0,11
	.byte	'VehicleSpeedInfo',0,17,139,25,3
	.word	89971
	.byte	12,17,141,25,9,32,13
	.byte	'throttle_pedal_output',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'torque_output_fr',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'torque_output_rr',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'throttle_enable',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'driver_override',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'throttle_error',0
	.word	144
	.byte	1,2,35,14,13
	.byte	'throttle_control_available',0
	.word	144
	.byte	1,2,35,15,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,16,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,24,0,11
	.byte	'ThrottleInfo',0,17,152,25,3
	.word	90648
	.byte	12,17,154,25,9,20,13
	.byte	'epb_status',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'driver_override',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'epb_enable',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'can_time',0
	.word	4536
	.byte	8,2,35,4,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,12,0,11
	.byte	'EPBInfo',0,17,161,25,3
	.word	90909
	.byte	12,17,175,25,9,12,13
	.byte	'front_left_pressure',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'front_right_pressure',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'rear_left_pressure',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'rear_right_pressure',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'front_left_pressure_alarm',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'front_right_pressure_alarm',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'rear_left_pressure_alarm',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'rear_right_pressure_alarm',0
	.word	144
	.byte	1,2,35,11,0,11
	.byte	'TirePressureInfo',0,17,185,25,3
	.word	91037
	.byte	12,17,195,25,9,24,13
	.byte	'x',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'y',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'class_type',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'edge',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'id',0
	.word	418
	.byte	2,2,35,10,13
	.byte	'vehicle_x',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'vehicle_y',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'vehicle_heading',0
	.word	4688
	.byte	4,2,35,20,0,11
	.byte	'Cc_Point2f',0,17,205,25,3
	.word	91326
	.byte	11
	.byte	'CheckSum_0x106_IDT',0,17,207,25,15
	.word	144
	.byte	11
	.byte	'CheckSum_0x109_IDT',0,17,208,25,15
	.word	144
	.byte	11
	.byte	'CheckSum_0x17F_IDT',0,17,209,25,15
	.word	144
	.byte	11
	.byte	'CheckSum_0x3F1_IDT',0,17,210,25,15
	.word	144
	.byte	11
	.byte	'CheckSum_0x3F5_IDT',0,17,211,25,15
	.word	144
	.byte	11
	.byte	'CheckSum_0x3F7_IDT',0,17,212,25,15
	.word	144
	.byte	11
	.byte	'CheckSum_1F8_IDT',0,17,213,25,15
	.word	144
	.byte	11
	.byte	'Checksum_0x132_IDT',0,17,214,25,15
	.word	144
	.byte	11
	.byte	'Checksum_0x17E_IDT',0,17,215,25,15
	.word	144
	.byte	11
	.byte	'Checksum_230_IDT',0,17,217,25,15
	.word	144
	.byte	12,17,237,25,9,20,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,0,13
	.byte	'x',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'y',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'heading',0
	.word	4688
	.byte	4,2,35,16,0,11
	.byte	'LocationPoint',0,17,243,25,3
	.word	91760
	.byte	26,160,6
	.word	4688
	.byte	27,199,1,0,11
	.byte	'rt_Array_float32_200',0,17,245,25,17
	.word	91849
	.byte	12,17,246,25,9,196,37,13
	.byte	'x',0
	.word	91860
	.byte	160,6,2,35,0,13
	.byte	'y',0
	.word	91860
	.byte	160,6,3,35,160,6,13
	.byte	'heading',0
	.word	91860
	.byte	160,6,3,35,192,12,13
	.byte	'curve',0
	.word	91860
	.byte	160,6,3,35,224,18,13
	.byte	'acc',0
	.word	91860
	.byte	160,6,3,35,128,25,13
	.byte	'speed',0
	.word	91860
	.byte	160,6,3,35,160,31,13
	.byte	'gear',0
	.word	144
	.byte	1,3,35,192,37,13
	.byte	'points_cnt',0
	.word	144
	.byte	1,3,35,193,37,0,11
	.byte	'Trajectory',0,17,128,26,3
	.word	91890
	.byte	26,160,6
	.word	4688
	.byte	27,199,1,0,11
	.byte	'DistHeight_Obj_00_IDT',0,17,142,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_01_IDT',0,17,143,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_02_IDT',0,17,144,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_03_IDT',0,17,145,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_04_IDT',0,17,146,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_05_IDT',0,17,147,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_06_IDT',0,17,148,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_07_IDT',0,17,149,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_08_IDT',0,17,150,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_09_IDT',0,17,151,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_10_IDT',0,17,152,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_11_IDT',0,17,153,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_12_IDT',0,17,154,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_13_IDT',0,17,155,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_14_IDT',0,17,156,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_15_IDT',0,17,157,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_16_IDT',0,17,158,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_17_IDT',0,17,159,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_18_IDT',0,17,160,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_19_IDT',0,17,161,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_20_IDT',0,17,162,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_21_IDT',0,17,163,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_22_IDT',0,17,164,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_23_IDT',0,17,165,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_24_IDT',0,17,166,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_25_IDT',0,17,167,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_26_IDT',0,17,168,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_27_IDT',0,17,169,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_28_IDT',0,17,170,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_29_IDT',0,17,171,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_30_IDT',0,17,172,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_31_IDT',0,17,173,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_32_IDT',0,17,174,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_33_IDT',0,17,175,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_34_IDT',0,17,176,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_35_IDT',0,17,177,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_36_IDT',0,17,178,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_37_IDT',0,17,179,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_38_IDT',0,17,180,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_39_IDT',0,17,181,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_40_IDT',0,17,182,26,15
	.word	144
	.byte	11
	.byte	'DistHeight_Obj_41_IDT',0,17,183,26,15
	.word	144
	.byte	11
	.byte	'EPB_AVHFeedbackSts_IDT',0,17,188,26,15
	.word	144
	.byte	11
	.byte	'EPB_AVHStatIndReqV_IDT',0,17,189,26,15
	.word	144
	.byte	11
	.byte	'EPB_AVHStatIndReq_IDT',0,17,190,26,15
	.word	144
	.byte	11
	.byte	'EPB_AVHWrnIndReqV_IDT',0,17,191,26,15
	.word	144
	.byte	11
	.byte	'EPB_AVHWrnIndReq_IDT',0,17,192,26,15
	.word	144
	.byte	11
	.byte	'EPB_Sts_IDT',0,17,193,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysBrkLtsReq_IDT',0,17,194,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysDspMsgReqV_IDT',0,17,195,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysDspMsgReq_IDT',0,17,196,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysStatIndReqV_IDT',0,17,197,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysStatIndReq_IDT',0,17,198,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysWrnIndReqV_IDT',0,17,199,26,15
	.word	144
	.byte	11
	.byte	'EPB_SysWrnIndReq_IDT',0,17,200,26,15
	.word	144
	.byte	11
	.byte	'EPS_ADAS_CtrlAbortFeedback_IDT',0,17,201,26,15
	.word	144
	.byte	11
	.byte	'EPS_ADAS_ModActv_IDT',0,17,202,26,15
	.word	144
	.byte	11
	.byte	'EPS_ADAS_ModAvail_IDT',0,17,203,26,15
	.word	144
	.byte	11
	.byte	'EPS_DrStrTorqV_IDT',0,17,207,26,15
	.word	144
	.byte	11
	.byte	'EPS_DrStrTorqVal_IDT',0,17,208,26,15
	.word	144
	.byte	11
	.byte	'EPS_LKARespTorq_IDT',0,17,209,26,16
	.word	418
	.byte	11
	.byte	'EPS_SterFltMod_IDT',0,17,212,26,15
	.word	144
	.byte	11
	.byte	'EPS_SterModV_IDT',0,17,213,26,15
	.word	144
	.byte	11
	.byte	'EPS_SterMod_IDT',0,17,214,26,15
	.word	144
	.byte	11
	.byte	'ESC_EscCtrlActv_IDT',0,17,215,26,15
	.word	144
	.byte	11
	.byte	'ESC_EscDisableSts_IDT',0,17,216,26,15
	.word	144
	.byte	11
	.byte	'ESC_EscFlgFlt_IDT',0,17,217,26,15
	.word	144
	.byte	11
	.byte	'ESC_HBAFlgFlt_IDT',0,17,218,26,15
	.word	144
	.byte	11
	.byte	'ESC_HSA_Control_Status_IDT',0,17,219,26,15
	.word	144
	.byte	11
	.byte	'ESC_HSA_Status_Fault_IDT',0,17,220,26,15
	.word	144
	.byte	11
	.byte	'ESC_HbaCtrlActv_IDT',0,17,221,26,15
	.word	144
	.byte	11
	.byte	'ESC_MasterCylinderPressureV_IDT',0,17,226,26,15
	.word	144
	.byte	11
	.byte	'ESC_MasterCylinderPressure_IDT',0,17,227,26,16
	.word	418
	.byte	11
	.byte	'ESC_SlopeGradeAngle_IDT',0,17,228,26,15
	.word	144
	.byte	11
	.byte	'ESC_TcsCtrlActv_IDT',0,17,229,26,15
	.word	144
	.byte	11
	.byte	'ESC_TcsDisableSts_IDT',0,17,230,26,15
	.word	144
	.byte	11
	.byte	'ESC_TcsFlgFlt_IDT',0,17,231,26,15
	.word	144
	.byte	11
	.byte	'Float',0,17,242,26,17
	.word	4688
	.byte	26,128,75
	.word	91326
	.byte	27,143,3,0,11
	.byte	'vehicle_points_400',0,17,243,26,20
	.word	94448
	.byte	12,17,244,26,9,136,75,13
	.byte	'point_num',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'closed_contour',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'vehicle_points',0
	.word	94459
	.byte	128,75,2,35,4,13
	.byte	'color_type',0
	.word	144
	.byte	1,3,35,132,75,13
	.byte	'class_type',0
	.word	144
	.byte	1,3,35,133,75,0,11
	.byte	'FreespaceInfo',0,17,251,26,3
	.word	94487
	.byte	26,128,75
	.word	91326
	.byte	27,143,3,0,12,17,134,27,9,36,13
	.byte	'ARS_OD_TimeStampGlobSec',0
	.word	4536
	.byte	8,2,35,0,13
	.byte	'ARS_OD_TimeStampGlobNanoSec',0
	.word	4536
	.byte	8,2,35,8,13
	.byte	'ARS_OD_TimeStampLocal',0
	.word	4536
	.byte	8,2,35,16,13
	.byte	'ARS_OD_Latency',0
	.word	418
	.byte	2,2,35,24,13
	.byte	'ARS_OD_MeasCounter',0
	.word	418
	.byte	2,2,35,26,13
	.byte	'ARS_OD_CycleCounter',0
	.word	144
	.byte	1,2,35,28,13
	.byte	'ARS_OD_NumOfObjects',0
	.word	144
	.byte	1,2,35,29,13
	.byte	'ARS_OD_TaskValidFlag',0
	.word	144
	.byte	1,2,35,30,13
	.byte	'ARS_OD_ExtendedCycleFlag',0
	.word	144
	.byte	1,2,35,31,13
	.byte	'ARS_OD_MsgCounter_Header',0
	.word	144
	.byte	1,2,35,32,13
	.byte	'ARS_OD_CRC16_Checksum_Header',0
	.word	418
	.byte	2,2,35,34,0,11
	.byte	'RadarHeader',0,17,147,27,3
	.word	94639
	.byte	12,17,142,28,9,40,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,0,13
	.byte	'time_stamp_can',0
	.word	4536
	.byte	8,2,35,8,13
	.byte	'x',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'y',0
	.word	4688
	.byte	4,2,35,20,13
	.byte	'z',0
	.word	4688
	.byte	4,2,35,24,13
	.byte	'heading',0
	.word	4688
	.byte	4,2,35,28,13
	.byte	'pitch',0
	.word	4688
	.byte	4,2,35,32,13
	.byte	'roll',0
	.word	4688
	.byte	4,2,35,36,0,11
	.byte	'GlobalPoseEstimation',0,17,152,28,3
	.word	95014
	.byte	26,224,3
	.word	95014
	.byte	27,11,0,11
	.byte	'global_pose_10',0,17,154,28,30
	.word	95174
	.byte	11
	.byte	'IBS_ESCOFF_StsFB_IDT',0,17,174,28,15
	.word	144
	.byte	11
	.byte	'IPC_IPCTotalOdometerV_IDT',0,17,192,28,15
	.word	144
	.byte	11
	.byte	'IPC_IPCTotalOdometer_IDT',0,17,193,28,16
	.word	310
	.byte	11
	.byte	'IPC_Remain_Maintenance_IDT',0,17,194,28,16
	.word	418
	.byte	11
	.byte	'MFS_ACC_CruiseCancel_IDT',0,17,196,28,15
	.word	144
	.byte	11
	.byte	'MFS_ACC_CruiseGapSet_IDT',0,17,197,28,15
	.word	144
	.byte	11
	.byte	'MFS_ACC_CruiseOn_Off_IDT',0,17,198,28,15
	.word	144
	.byte	11
	.byte	'MFS_ACC_CruiseSpdDecrease_IDT',0,17,199,28,15
	.word	144
	.byte	11
	.byte	'MFS_ACC_CruiseSpdIncrease_IDT',0,17,200,28,15
	.word	144
	.byte	11
	.byte	'MFS_L1_Central_Control_IDT',0,17,201,28,15
	.word	144
	.byte	11
	.byte	'MFS_L1_DownControl_IDT',0,17,202,28,15
	.word	144
	.byte	11
	.byte	'MFS_L1_Failure_IDT',0,17,203,28,15
	.word	144
	.byte	11
	.byte	'MFS_L1_LeftControl_IDT',0,17,204,28,15
	.word	144
	.byte	11
	.byte	'MFS_L1_RightControl_IDT',0,17,205,28,15
	.word	144
	.byte	11
	.byte	'MFS_L1_UpControl_IDT',0,17,206,28,15
	.word	144
	.byte	11
	.byte	'MFS_L2_Failure_IDT',0,17,207,28,15
	.word	144
	.byte	12,17,239,28,9,52,13
	.byte	'distance_x',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'distance_y',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'tracking_id',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'class_id',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'angle_view',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'confidence',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'width',0
	.word	4688
	.byte	4,2,35,14,13
	.byte	'height',0
	.word	4688
	.byte	4,2,35,18,13
	.byte	'length',0
	.word	4688
	.byte	4,2,35,22,13
	.byte	'yaw',0
	.word	4688
	.byte	4,2,35,26,13
	.byte	'relative_velocity_x',0
	.word	4688
	.byte	4,2,35,30,13
	.byte	'relative_velocity_y',0
	.word	4688
	.byte	4,2,35,34,13
	.byte	'relative_acceleration_x',0
	.word	4688
	.byte	4,2,35,38,13
	.byte	'relative_acceleration_y',0
	.word	4688
	.byte	4,2,35,42,13
	.byte	'motion_status',0
	.word	144
	.byte	1,2,35,46,13
	.byte	'valid_status',0
	.word	418
	.byte	2,2,35,48,13
	.byte	'target_source',0
	.word	144
	.byte	1,2,35,50,0,11
	.byte	'ObjectInfo',0,17,130,29,3
	.word	95742
	.byte	26,128,26
	.word	95742
	.byte	27,63,0,11
	.byte	'object_set_64',0,17,132,29,20
	.word	96140
	.byte	11
	.byte	'PEPS_IGN1RelaySts_IDT',0,17,142,29,15
	.word	144
	.byte	11
	.byte	'PEPS_IGN1RelayValidity_IDT',0,17,143,29,15
	.word	144
	.byte	11
	.byte	'PEPS_Learning_Status_IDT',0,17,144,29,15
	.word	144
	.byte	11
	.byte	'PEPS_Message_Sts_AliveCounter_IDT',0,17,145,29,15
	.word	144
	.byte	11
	.byte	'PEPS_Message_Sts_CheckSum_IDT',0,17,146,29,15
	.word	144
	.byte	11
	.byte	'PEPS_PowerModeValidity_IDT',0,17,147,29,15
	.word	144
	.byte	11
	.byte	'PEPS_PowerMode_IDT',0,17,148,29,15
	.word	144
	.byte	11
	.byte	'PEPS_RemoteControlSt_IDT',0,17,149,29,15
	.word	144
	.byte	12,17,157,29,9,12,13
	.byte	'flc_info',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'flm_info',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'frm_info',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'frc_info',0
	.word	144
	.byte	1,2,35,3,13
	.byte	'rlc_info',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'rlm_info',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'rrm_info',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'rrc_info',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'fls_info',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'frs_info',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'rls_info',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'rrs_info',0
	.word	144
	.byte	1,2,35,11,0,11
	.byte	'PdcAlertInfo',0,17,171,29,3
	.word	96454
	.byte	12,17,173,29,9,24,13
	.byte	'flc_distance',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'flm_distance',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'frm_distance',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'frc_distance',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'rlc_distance',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'rlm_distance',0
	.word	418
	.byte	2,2,35,10,13
	.byte	'rrm_distance',0
	.word	418
	.byte	2,2,35,12,13
	.byte	'rrc_distance',0
	.word	418
	.byte	2,2,35,14,13
	.byte	'fls_distance',0
	.word	418
	.byte	2,2,35,16,13
	.byte	'frs_distance',0
	.word	418
	.byte	2,2,35,18,13
	.byte	'rls_distance',0
	.word	418
	.byte	2,2,35,20,13
	.byte	'rrs_distance',0
	.word	418
	.byte	2,2,35,22,0,11
	.byte	'PdcDistInfo',0,17,187,29,3
	.word	96699
	.byte	12,17,189,29,9,40,13
	.byte	'flc_distance_left',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'flc_distance_right',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'flm_distance_left',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'flm_distance_right',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'frm_distance_left',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'frm_distance_right',0
	.word	418
	.byte	2,2,35,10,13
	.byte	'frc_distance_left',0
	.word	418
	.byte	2,2,35,12,13
	.byte	'frc_distance_right',0
	.word	418
	.byte	2,2,35,14,13
	.byte	'rlc_distance_left',0
	.word	418
	.byte	2,2,35,16,13
	.byte	'rlc_distance_right',0
	.word	418
	.byte	2,2,35,18,13
	.byte	'rlm_distance_left',0
	.word	418
	.byte	2,2,35,20,13
	.byte	'rlm_distance_right',0
	.word	418
	.byte	2,2,35,22,13
	.byte	'rrm_distance_left',0
	.word	418
	.byte	2,2,35,24,13
	.byte	'rrm_distance_right',0
	.word	418
	.byte	2,2,35,26,13
	.byte	'rrc_distance_left',0
	.word	418
	.byte	2,2,35,28,13
	.byte	'rrc_distance_right',0
	.word	418
	.byte	2,2,35,30,13
	.byte	'fls_distance',0
	.word	418
	.byte	2,2,35,32,13
	.byte	'frs_distance',0
	.word	418
	.byte	2,2,35,34,13
	.byte	'rls_distance',0
	.word	418
	.byte	2,2,35,36,13
	.byte	'rrs_distance',0
	.word	418
	.byte	2,2,35,38,0,11
	.byte	'PdcDistInfoAvm',0,17,211,29,3
	.word	96991
	.byte	12,17,213,29,9,4,13
	.byte	'ls_info',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'rs_info',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'ls_distance',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'rs_distance',0
	.word	144
	.byte	1,2,35,3,0,11
	.byte	'PdcSideInfo',0,17,219,29,3
	.word	97550
	.byte	26,12
	.word	97550
	.byte	27,2,0,11
	.byte	'PdcSideInfo_3',0,17,221,29,21
	.word	97654
	.byte	12,17,235,29,9,24,13
	.byte	'camera_position',0
	.word	4627
	.byte	4,2,35,0,13
	.byte	'timestamp',0
	.word	4655
	.byte	8,2,35,4,13
	.byte	'blockage_status',0
	.word	4577
	.byte	1,2,35,12,13
	.byte	'weather_status',0
	.word	4577
	.byte	1,2,35,13,13
	.byte	'illumination_status',0
	.word	4577
	.byte	1,2,35,14,13
	.byte	'image_limited_status',0
	.word	4577
	.byte	1,2,35,15,13
	.byte	'out_of_focus',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'impacted_technologies',0
	.word	4627
	.byte	4,2,35,18,0,11
	.byte	'PerceptionFailsafe',0,17,245,29,3
	.word	97686
	.byte	26,160,2
	.word	97686
	.byte	27,11,0,11
	.byte	'PerceptionFailsafe_12',0,17,247,29,28
	.word	97926
	.byte	12,17,248,29,9,84,13
	.byte	'track_id',0
	.word	4627
	.byte	4,2,35,0,13
	.byte	'age',0
	.word	4627
	.byte	4,2,35,4,13
	.byte	'exist_probability',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'quality',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'prediction_type',0
	.word	4655
	.byte	8,2,35,16,13
	.byte	'prediction_source',0
	.word	4655
	.byte	8,2,35,24,13
	.byte	'color',0
	.word	144
	.byte	1,2,35,32,13
	.byte	'color_confidence',0
	.word	4688
	.byte	4,2,35,34,13
	.byte	'lanemark_type',0
	.word	144
	.byte	1,2,35,38,13
	.byte	'lanemark_type_confidence',0
	.word	4688
	.byte	4,2,35,40,13
	.byte	'dlm_type',0
	.word	144
	.byte	1,2,35,44,13
	.byte	'role',0
	.word	144
	.byte	1,2,35,45,13
	.byte	'marker_width',0
	.word	4688
	.byte	4,2,35,46,13
	.byte	'marker_width_std',0
	.word	4688
	.byte	4,2,35,50,13
	.byte	'line_c3',0
	.word	4688
	.byte	4,2,35,54,13
	.byte	'line_c2',0
	.word	4688
	.byte	4,2,35,58,13
	.byte	'line_c1',0
	.word	4688
	.byte	4,2,35,62,13
	.byte	'line_c0',0
	.word	4688
	.byte	4,2,35,66,13
	.byte	'view_range_start',0
	.word	4688
	.byte	4,2,35,70,13
	.byte	'view_range_end',0
	.word	4688
	.byte	4,2,35,74,13
	.byte	'measured_view_range_end',0
	.word	4688
	.byte	4,2,35,78,13
	.byte	'camera_position',0
	.word	144
	.byte	1,2,35,82,13
	.byte	'is_valid',0
	.word	144
	.byte	1,2,35,83,0,11
	.byte	'PerceptionLaneAdjacent',0,17,145,30,3
	.word	97967
	.byte	26,208,2
	.word	97967
	.byte	27,3,0,11
	.byte	'PerceptionLaneAdjacent_4',0,17,147,30,32
	.word	98505
	.byte	12,17,148,30,9,132,1,13
	.byte	'timestamp',0
	.word	4655
	.byte	8,2,35,0,13
	.byte	'track_id',0
	.word	4627
	.byte	4,2,35,8,13
	.byte	'age',0
	.word	4627
	.byte	4,2,35,12,13
	.byte	'exist_probability',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'quality',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'prediction_source',0
	.word	4655
	.byte	8,2,35,24,13
	.byte	'prediction_type',0
	.word	4655
	.byte	8,2,35,32,13
	.byte	'color',0
	.word	144
	.byte	1,2,35,40,13
	.byte	'color_confidence',0
	.word	4688
	.byte	4,2,35,42,13
	.byte	'lanemark_type',0
	.word	144
	.byte	1,2,35,46,13
	.byte	'lanemark_type_confidence',0
	.word	4688
	.byte	4,2,35,48,13
	.byte	'dlm_type',0
	.word	144
	.byte	1,2,35,52,13
	.byte	'decel_type',0
	.word	144
	.byte	1,2,35,53,13
	.byte	'side',0
	.word	144
	.byte	1,2,35,54,13
	.byte	'crossing',0
	.word	144
	.byte	1,2,35,55,13
	.byte	'marker_width',0
	.word	4688
	.byte	4,2,35,56,13
	.byte	'marker_width_std',0
	.word	4688
	.byte	4,2,35,60,13
	.byte	'dash_average_length',0
	.word	4688
	.byte	4,2,35,64,13
	.byte	'dash_average_gap',0
	.word	4688
	.byte	4,2,35,68,13
	.byte	'is_multi_clothoid',0
	.word	144
	.byte	1,2,35,72,13
	.byte	'first_line_c0',0
	.word	4688
	.byte	4,2,35,74,13
	.byte	'first_line_c1',0
	.word	4688
	.byte	4,2,35,78,13
	.byte	'first_line_c2',0
	.word	4688
	.byte	4,2,35,82,13
	.byte	'first_line_c3',0
	.word	4688
	.byte	4,2,35,86,13
	.byte	'first_view_range_start',0
	.word	4688
	.byte	4,2,35,90,13
	.byte	'first_view_range_end',0
	.word	4688
	.byte	4,2,35,94,13
	.byte	'first_measured_view_range_end',0
	.word	4688
	.byte	4,2,35,98,13
	.byte	'second_line_c0',0
	.word	4688
	.byte	4,2,35,102,13
	.byte	'second_line_c1',0
	.word	4688
	.byte	4,2,35,106,13
	.byte	'second_line_c2',0
	.word	4688
	.byte	4,2,35,110,13
	.byte	'second_line_c3',0
	.word	4688
	.byte	4,2,35,114,13
	.byte	'second_view_range_start',0
	.word	4688
	.byte	4,2,35,118,13
	.byte	'second_view_range_end',0
	.word	4688
	.byte	4,2,35,122,13
	.byte	'second_measured_view_range_end',0
	.word	4688
	.byte	4,2,35,126,13
	.byte	'camera_position',0
	.word	144
	.byte	1,3,35,130,1,13
	.byte	'is_valid',0
	.word	144
	.byte	1,3,35,131,1,0,11
	.byte	'PerceptionLaneHost',0,17,186,30,3
	.word	98549
	.byte	26,136,2
	.word	98549
	.byte	27,1,0,11
	.byte	'PerceptionLaneHost_2',0,17,188,30,28
	.word	99467
	.byte	12,17,189,30,9,216,1,13
	.byte	'timestamp',0
	.word	4536
	.byte	8,2,35,0,13
	.byte	'frame_index',0
	.word	4536
	.byte	8,2,35,8,13
	.byte	'camera_position',0
	.word	4577
	.byte	1,2,35,16,13
	.byte	'id',0
	.word	144
	.byte	1,2,35,17,13
	.byte	'class',0
	.word	4577
	.byte	1,2,35,18,13
	.byte	'subclass',0
	.word	4577
	.byte	1,2,35,19,13
	.byte	'confidence',0
	.word	4688
	.byte	4,2,35,20,13
	.byte	'bbox',0
	.word	88474
	.byte	16,2,35,24,13
	.byte	'length',0
	.word	4688
	.byte	4,2,35,40,13
	.byte	'length_std',0
	.word	4688
	.byte	4,2,35,44,13
	.byte	'width',0
	.word	4688
	.byte	4,2,35,48,13
	.byte	'width_std',0
	.word	4688
	.byte	4,2,35,52,13
	.byte	'height',0
	.word	4688
	.byte	4,2,35,56,13
	.byte	'height_std',0
	.word	4688
	.byte	4,2,35,60,13
	.byte	'age_count',0
	.word	4577
	.byte	1,2,35,64,13
	.byte	'age_seconds',0
	.word	4688
	.byte	4,2,35,66,13
	.byte	'visibility_side',0
	.word	4577
	.byte	1,2,35,70,13
	.byte	'heading',0
	.word	4688
	.byte	4,2,35,72,13
	.byte	'heading_std',0
	.word	4688
	.byte	4,2,35,76,13
	.byte	'inverse_ttc',0
	.word	4688
	.byte	4,2,35,80,13
	.byte	'inverse_ttc_std',0
	.word	4688
	.byte	4,2,35,84,13
	.byte	'angle_left',0
	.word	4688
	.byte	4,2,35,88,13
	.byte	'angle_right',0
	.word	4688
	.byte	4,2,35,92,13
	.byte	'angle_side',0
	.word	4688
	.byte	4,2,35,96,13
	.byte	'angle_rate',0
	.word	4688
	.byte	4,2,35,100,13
	.byte	'top_out_of_image',0
	.word	4577
	.byte	1,2,35,104,13
	.byte	'bottom_out_of_image',0
	.word	4577
	.byte	1,2,35,105,13
	.byte	'left_out_of_image',0
	.word	4577
	.byte	1,2,35,106,13
	.byte	'right_out_of_image',0
	.word	4577
	.byte	1,2,35,107,13
	.byte	'brake_light',0
	.word	4577
	.byte	1,2,35,108,13
	.byte	'turn_indicator_left',0
	.word	4577
	.byte	1,2,35,109,13
	.byte	'turn_indicator_right',0
	.word	4577
	.byte	1,2,35,110,13
	.byte	'measuring_status_0',0
	.word	4577
	.byte	1,2,35,111,13
	.byte	'measuring_status_1',0
	.word	4577
	.byte	1,2,35,112,13
	.byte	'measuring_status_2',0
	.word	4577
	.byte	1,2,35,113,13
	.byte	'motion_orientation',0
	.word	4577
	.byte	1,2,35,114,13
	.byte	'motion_category',0
	.word	4577
	.byte	1,2,35,115,13
	.byte	'motion_status',0
	.word	4577
	.byte	1,2,35,116,13
	.byte	'cutin_cutout',0
	.word	4577
	.byte	1,2,35,117,13
	.byte	'lat_distance',0
	.word	4688
	.byte	4,2,35,118,13
	.byte	'lat_distance_std',0
	.word	4688
	.byte	4,2,35,122,13
	.byte	'long_distance',0
	.word	4688
	.byte	4,2,35,126,13
	.byte	'long_distance_std',0
	.word	4688
	.byte	4,3,35,130,1,13
	.byte	'relative_lat_velocity',0
	.word	4688
	.byte	4,3,35,134,1,13
	.byte	'relative_lat_velocity_std',0
	.word	4688
	.byte	4,3,35,138,1,13
	.byte	'relative_long_velocity',0
	.word	4688
	.byte	4,3,35,142,1,13
	.byte	'relative_long_velocity_std',0
	.word	4688
	.byte	4,3,35,146,1,13
	.byte	'abs_lat_velocity',0
	.word	4688
	.byte	4,3,35,150,1,13
	.byte	'abs_lat_velocity_std',0
	.word	4688
	.byte	4,3,35,154,1,13
	.byte	'abs_long_velocity',0
	.word	4688
	.byte	4,3,35,158,1,13
	.byte	'abs_long_velocity_std',0
	.word	4688
	.byte	4,3,35,162,1,13
	.byte	'relative_lat_acc',0
	.word	4688
	.byte	4,3,35,166,1,13
	.byte	'relative_lat_acc_std',0
	.word	4688
	.byte	4,3,35,170,1,13
	.byte	'relative_long_acc',0
	.word	4688
	.byte	4,3,35,174,1,13
	.byte	'relative_long_acc_std',0
	.word	4688
	.byte	4,3,35,178,1,13
	.byte	'abs_lat_acc',0
	.word	4688
	.byte	4,3,35,182,1,13
	.byte	'abs_lat_acc_std',0
	.word	4688
	.byte	4,3,35,186,1,13
	.byte	'abs_long_acc',0
	.word	4688
	.byte	4,3,35,190,1,13
	.byte	'abs_long_acc_std',0
	.word	4688
	.byte	4,3,35,194,1,13
	.byte	'abs_speed',0
	.word	4688
	.byte	4,3,35,198,1,13
	.byte	'abs_speed_std',0
	.word	4688
	.byte	4,3,35,202,1,13
	.byte	'abs_acceleration',0
	.word	4688
	.byte	4,3,35,206,1,13
	.byte	'abs_acceleration_std',0
	.word	4688
	.byte	4,3,35,210,1,0,11
	.byte	'PerceptionOutObject',0,17,254,30,3
	.word	99507
	.byte	26,128,54
	.word	99507
	.byte	27,31,0,11
	.byte	'PerceptionOutObject_32',0,17,128,31,29
	.word	101069
	.byte	12,17,129,31,9,44,13
	.byte	'exist_probability',0
	.word	4688
	.byte	4,2,35,0,13
	.byte	'height',0
	.word	4688
	.byte	4,2,35,4,13
	.byte	'height_std',0
	.word	4688
	.byte	4,2,35,8,13
	.byte	'line_c3',0
	.word	4688
	.byte	4,2,35,12,13
	.byte	'line_c2',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'line_c1',0
	.word	4688
	.byte	4,2,35,20,13
	.byte	'line_c0',0
	.word	4688
	.byte	4,2,35,24,13
	.byte	'view_range_start',0
	.word	4688
	.byte	4,2,35,28,13
	.byte	'view_range_end',0
	.word	4688
	.byte	4,2,35,32,13
	.byte	'measured_view_range_end',0
	.word	4688
	.byte	4,2,35,36,13
	.byte	'camera_position',0
	.word	144
	.byte	1,2,35,40,0,11
	.byte	'PerceptionRoadEdge',0,17,142,31,3
	.word	101111
	.byte	26,88
	.word	101111
	.byte	27,1,0,11
	.byte	'PerceptionRoadEdge_2',0,17,144,31,28
	.word	101385
	.byte	12,17,145,31,9,44,13
	.byte	'bbox',0
	.word	88474
	.byte	16,2,35,0,13
	.byte	'height',0
	.word	4688
	.byte	4,2,35,16,13
	.byte	'width',0
	.word	4688
	.byte	4,2,35,20,13
	.byte	'lat_distance',0
	.word	4688
	.byte	4,2,35,24,13
	.byte	'lat_distance_std',0
	.word	4688
	.byte	4,2,35,28,13
	.byte	'long_distance',0
	.word	4688
	.byte	4,2,35,32,13
	.byte	'long_distance_std',0
	.word	4688
	.byte	4,2,35,36,13
	.byte	'relevance',0
	.word	144
	.byte	1,2,35,40,0,11
	.byte	'PerceptionTrafficSign',0,17,155,31,3
	.word	101424
	.byte	12,17,157,31,9,6,13
	.byte	'sign',0
	.word	4627
	.byte	4,2,35,0,13
	.byte	'type',0
	.word	144
	.byte	1,2,35,4,0,11
	.byte	'TrafficSignType',0,17,161,31,3
	.word	101624
	.byte	26,144,1
	.word	101624
	.byte	27,23,0,11
	.byte	'TrafficSignType_24',0,17,163,31,25
	.word	101684
	.byte	12,17,164,31,9,200,1,13
	.byte	'sign',0
	.word	101624
	.byte	6,2,35,0,13
	.byte	'derived_signs',0
	.word	101694
	.byte	144,1,2,35,6,13
	.byte	'bbox',0
	.word	88474
	.byte	16,3,35,152,1,13
	.byte	'lat_distance',0
	.word	4688
	.byte	4,3,35,168,1,13
	.byte	'long_distance',0
	.word	4688
	.byte	4,3,35,172,1,13
	.byte	'panel_width',0
	.word	4688
	.byte	4,3,35,176,1,13
	.byte	'panel_height',0
	.word	4688
	.byte	4,3,35,180,1,13
	.byte	'height',0
	.word	4688
	.byte	4,3,35,184,1,13
	.byte	'speed_limit',0
	.word	4688
	.byte	4,3,35,188,1,13
	.byte	'height_limit',0
	.word	4688
	.byte	4,3,35,192,1,13
	.byte	'weight_limit',0
	.word	4688
	.byte	4,3,35,196,1,0,11
	.byte	'PerceptionTrafficSignStatus',0,17,177,31,3
	.word	101722
	.byte	26,144,1
	.word	101624
	.byte	27,23,0,26,128,25
	.word	101722
	.byte	27,15,0,11
	.byte	'PerceptionTrafficSignStatus_16',0,17,179,31,37
	.word	102007
	.byte	26,192,5
	.word	101424
	.byte	27,15,0,11
	.byte	'PerceptionTrafficSign_16',0,17,180,31,31
	.word	102057
	.byte	11
	.byte	'RollingCounter_0x106_IDT',0,17,206,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_0x109_IDT',0,17,207,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_0x132_IDT',0,17,208,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_0x17F_IDT',0,17,209,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_0x3F1_IDT',0,17,211,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_0x3F5_IDT',0,17,212,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_0x3F7_IDT',0,17,213,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_1F8_IDT',0,17,214,31,15
	.word	144
	.byte	11
	.byte	'RollingCounter_230_IDT',0,17,215,31,15
	.word	144
	.byte	11
	.byte	'Rolling_counter_0x17E_IDT',0,17,216,31,15
	.word	144
	.byte	11
	.byte	'SAS_Calibrated_IDT',0,17,217,31,15
	.word	144
	.byte	11
	.byte	'SAS_SASFailure_IDT',0,17,218,31,15
	.word	144
	.byte	11
	.byte	'SAS_SASStsSnsr_IDT',0,17,219,31,15
	.word	144
	.byte	11
	.byte	'SAS_SteerWheelAngle_IDT',0,17,221,31,16
	.word	418
	.byte	11
	.byte	'SAS_SteerWhlRotSpdStatus_IDT',0,17,223,31,15
	.word	144
	.byte	11
	.byte	'SAS_SteerWhlRotSpd_IDT',0,17,224,31,16
	.word	418
	.byte	11
	.byte	'SAS_SteeringAngleValid_IDT',0,17,225,31,15
	.word	144
	.byte	11
	.byte	'STAT_Central_LockSts_IDT',0,17,226,31,15
	.word	144
	.byte	11
	.byte	'WCBS_Trailermode_Feedback_IDT',0,17,167,33,15
	.word	144
	.byte	11
	.byte	'VCU_ModeGearSts_IDT',0,17,128,34,15
	.word	144
	.byte	11
	.byte	'VCU_Warning_IMMO_Fail_IDT',0,17,129,34,15
	.word	144
	.byte	11
	.byte	'VCU_Ready_IDT',0,17,130,34,15
	.word	144
	.byte	11
	.byte	'VCU_RegencyLevInd_IDT',0,17,131,34,15
	.word	144
	.byte	11
	.byte	'VCU_Ctrl_AliveCounter_IDT',0,17,132,34,15
	.word	144
	.byte	11
	.byte	'VCU_LimpHomeSts_IDT',0,17,133,34,15
	.word	144
	.byte	11
	.byte	'VCU_Ctrl_CheckSum_IDT',0,17,134,34,15
	.word	144
	.byte	11
	.byte	'VCU_StsAccPedalFault_IDT',0,17,146,34,15
	.word	144
	.byte	11
	.byte	'VCU_StsSysFault_IDT',0,17,147,34,15
	.word	144
	.byte	11
	.byte	'VCU_AccPedalPosition_IDT',0,17,148,34,15
	.word	144
	.byte	11
	.byte	'VCU_AccPedal_Active_IDT',0,17,149,34,15
	.word	144
	.byte	11
	.byte	'VCU_StsEpt_AliveCounter_IDT',0,17,150,34,15
	.word	144
	.byte	11
	.byte	'VCU_StsEpt_CheckSum_IDT',0,17,151,34,15
	.word	144
	.byte	26,24
	.word	418
	.byte	27,11,0,11
	.byte	'distance_12',0,17,221,51,16
	.word	103147
	.byte	12,17,222,51,9,32,13
	.byte	'distance',0
	.word	103156
	.byte	24,2,35,0,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,24,0,11
	.byte	'UpaDistT',0,17,226,51,3
	.word	103177
	.byte	26,24
	.word	418
	.byte	27,11,0,26,24
	.word	4627
	.byte	27,5,0,11
	.byte	'x_6',0,17,228,51,16
	.word	103249
	.byte	11
	.byte	'y_6',0,17,229,51,16
	.word	103249
	.byte	26,6
	.word	144
	.byte	27,5,0,11
	.byte	'type_6',0,17,230,51,15
	.word	103284
	.byte	12,17,231,51,9,64,13
	.byte	'x',0
	.word	103258
	.byte	24,2,35,0,13
	.byte	'y',0
	.word	103271
	.byte	24,2,35,24,13
	.byte	'type',0
	.word	103293
	.byte	6,2,35,48,13
	.byte	'time_stamp',0
	.word	4536
	.byte	8,2,35,56,0,11
	.byte	'UpaObjectInfo',0,17,237,51,3
	.word	103309
	.byte	26,24
	.word	4627
	.byte	27,5,0,26,24
	.word	4627
	.byte	27,5,0,26,6
	.word	144
	.byte	27,5,0,26,192,1
	.word	103309
	.byte	27,2,0,11
	.byte	'upa_object_3',0,17,239,51,23
	.word	103422
	.byte	12,17,240,51,9,192,1,13
	.byte	'upa_object',0
	.word	103432
	.byte	192,1,2,35,0,0,11
	.byte	'UpaObjsT',0,17,243,51,3
	.word	103454
	.byte	26,192,1
	.word	103309
	.byte	27,2,0,26,80
	.word	85843
	.byte	27,3,0,11
	.byte	'apa_dist_info_4',0,17,251,51,18
	.word	103511
	.byte	26,128,3
	.word	103454
	.byte	27,1,0,11
	.byte	'upa_objs_2',0,17,252,51,18
	.word	103545
	.byte	26,64
	.word	103177
	.byte	27,1,0,11
	.byte	'upa_dist_2',0,17,253,51,18
	.word	103575
	.byte	11
	.byte	'min_distance_12',0,17,254,51,16
	.word	103147
	.byte	11
	.byte	'ring_time_uint16_array_12',0,17,136,52,16
	.word	103147
	.byte	26,56
	.word	144
	.byte	27,55,0,11
	.byte	'reserved_data_uint8_array_56',0,17,137,52,15
	.word	103664
	.byte	26,20
	.word	418
	.byte	27,9,0,11
	.byte	'distance_10',0,17,164,52,16
	.word	103711
	.byte	11
	.byte	'width_10',0,17,165,52,16
	.word	103711
	.byte	26,10
	.word	144
	.byte	27,9,0,11
	.byte	'peak_10',0,17,166,52,15
	.word	103759
	.byte	12,17,167,52,9,68,13
	.byte	'echo_num',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'distance',0
	.word	103720
	.byte	20,2,35,2,13
	.byte	'width',0
	.word	103741
	.byte	20,2,35,22,13
	.byte	'peak',0
	.word	103768
	.byte	10,2,35,42,13
	.byte	'ring_time',0
	.word	418
	.byte	2,2,35,52,13
	.byte	'valid_fram',0
	.word	144
	.byte	1,2,35,54,13
	.byte	'confidence',0
	.word	144
	.byte	1,2,35,55,13
	.byte	'status_work',0
	.word	144
	.byte	1,2,35,56,13
	.byte	'counter',0
	.word	144
	.byte	1,2,35,57,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,60,0,11
	.byte	'UssRawData',0,17,179,52,3
	.word	103785
	.byte	26,20
	.word	418
	.byte	27,9,0,26,20
	.word	418
	.byte	27,9,0,26,10
	.word	144
	.byte	27,9,0,26,176,6
	.word	103785
	.byte	27,11,0,11
	.byte	'sensor_info_12',0,17,181,52,20
	.word	104022
	.byte	12,17,189,52,9,12,13
	.byte	'diagnosis_info',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'remind_info',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'counter',0
	.word	144
	.byte	1,2,35,3,13
	.byte	'system_time',0
	.word	4536
	.byte	8,2,35,4,0,11
	.byte	'UssStatus',0,17,195,52,3
	.word	104056
	.byte	26,144,1
	.word	104056
	.byte	27,11,0,11
	.byte	'sensor_status_12',0,17,197,52,19
	.word	104165
	.byte	11
	.byte	'Com_StatusType',0,5,61,3
	.word	3969
	.byte	11
	.byte	'Com_IpduGroupIdType',0,5,64,16
	.word	418
	.byte	11
	.byte	'Com_SignalIdType',0,5,65,16
	.word	418
	.byte	11
	.byte	'Com_SignalGroupIdType',0,5,66,16
	.word	418
	.byte	11
	.byte	'Com_SignalTxPropertyType',0,5,85,3
	.word	1271
	.byte	16,5,87,9,1,17
	.byte	'COM_ALWAYS',0,0,17
	.byte	'COM_MASKED_NEW_DIFFERS_MASKED_OLD',0,1,17
	.byte	'COM_MASKED_NEW_DIFFERS_X',0,2,17
	.byte	'COM_MASKED_NEW_EQUALS_X',0,3,17
	.byte	'COM_NEVER',0,4,17
	.byte	'COM_NEW_IS_OUTSIDE',0,5,17
	.byte	'COM_NEW_IS_WITHIN',0,6,17
	.byte	'COM_ONE_EVERY_N',0,7,0,11
	.byte	'Com_FilterAlgorithmType',0,5,97,3
	.word	104340
	.byte	11
	.byte	'Com_IpduTxPropertyType',0,5,106,3
	.word	576
	.byte	11
	.byte	'Com_SigType',0,5,133,1,3
	.word	1432
	.byte	11
	.byte	'Com_TxPduStateType',0,5,144,1,3
	.word	4289
	.byte	16,5,146,1,9,1,17
	.byte	'COM_RXPDU_STOP',0,0,17
	.byte	'COM_RXPDU_START_IDLE',0,1,17
	.byte	'COM_RXPDU_START_BUSY',0,2,17
	.byte	'COM_RXPDU_START_RXOK',0,3,17
	.byte	'COM_RXPDU_START_RXNOTOK',0,4,17
	.byte	'COM_RXPDU_START_RXSTOP',0,5,0,11
	.byte	'Com_RxPduStateType',0,5,154,1,3
	.word	104631
	.byte	11
	.byte	'Com_CfgTxModeTableType',0,5,143,2,3
	.word	656
	.byte	12,5,145,2,9,12,13
	.byte	'TxModeTimePeriod',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'TxModeTimeOffset',0
	.word	418
	.byte	2,2,35,2,13
	.byte	'MininumDelayTimer',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'txMinDelayReqBackUp',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'TxModeSelectPtr',0
	.word	807
	.byte	4,2,35,8,0,11
	.byte	'Com_TxPduType',0,5,186,2,3
	.word	104835
	.byte	11
	.byte	'Com_CfgTxPduTableType',0,5,249,2,3
	.word	871
	.byte	11
	.byte	'Com_CfgTxSigTableType',0,5,178,3,3
	.word	1967
	.byte	12,5,183,3,9,6,13
	.byte	'tempLength',0
	.word	418
	.byte	2,2,35,0,13
	.byte	'RxIpduTimeoutMonitorFlag',0
	.word	144
	.byte	1,2,35,2,13
	.byte	'RxPeriodTimeOut',0
	.word	418
	.byte	2,2,35,4,0,11
	.byte	'Com_RxPduType',0,5,200,3,3
	.word	105060
	.byte	11
	.byte	'Com_CfgRxPduTableType',0,5,244,3,3
	.word	2321
	.byte	11
	.byte	'Com_CfgRxSigTableType',0,5,189,4,3
	.word	2788
	.byte	11
	.byte	'Com_CfgPduGroupTableType',0,5,198,4,3
	.word	3168
	.byte	11
	.byte	'Com_CfgSigGroupType',0,5,220,4,3
	.word	3286
	.byte	11
	.byte	'Com_ConfigType',0,5,246,4,3
	.word	3546
	.byte	28
	.word	105060
	.byte	29,0,30
	.byte	'Com_RxPduTable',0,18,38,36
	.word	105318
	.byte	1,1,28
	.word	104835
	.byte	29,0,30
	.byte	'Com_TxPduTable',0,18,39,36
	.word	105350
	.byte	1,1,28
	.word	4289
	.byte	29,0,30
	.byte	'Com_TxPduState',0,18,45,41
	.word	105382
	.byte	1,1,28
	.word	144
	.byte	29,0,30
	.byte	'Com_PDUTrigRepFlag',0,18,46,28
	.word	105414
	.byte	1,1,28
	.word	144
	.byte	29,0,30
	.byte	'Com_TriggerPDUSendFlag',0,18,47,30
	.word	105450
	.byte	1,1,28
	.word	104631
	.byte	29,0,30
	.byte	'Com_RxPduState',0,18,48,41
	.word	105490
	.byte	1,1,30
	.byte	'Com_IpduGroupStartFlag',0,18,49,30
	.word	105450
	.byte	1,1,30
	.byte	'Com_IpduGroupDMEnableFlag',0,18,50,30
	.word	105450
	.byte	1,1,26,1
	.word	144
	.byte	27,0,0,11
	.byte	'Com_IpduGroupVector',0,18,61,15
	.word	105591
	.byte	28
	.word	871
	.byte	29,0,9
	.word	105628
	.byte	30
	.byte	'ComTxPduCfgTable',0,18,228,25,61
	.word	105635
	.byte	1,1,28
	.word	1967
	.byte	29,0,9
	.word	105668
	.byte	30
	.byte	'ComTxSigCfgTable',0,18,229,25,61
	.word	105675
	.byte	1,1,28
	.word	2321
	.byte	29,0,9
	.word	105708
	.byte	30
	.byte	'ComRxPduCfgTable',0,18,231,25,61
	.word	105715
	.byte	1,1,28
	.word	2788
	.byte	29,0,9
	.word	105748
	.byte	30
	.byte	'ComRxSigCfgTable',0,18,232,25,61
	.word	105755
	.byte	1,1,28
	.word	3168
	.byte	29,0,9
	.word	105788
	.byte	30
	.byte	'ComPduGroupCfgTable',0,18,234,25,61
	.word	105795
	.byte	1,1,28
	.word	3286
	.byte	29,0,9
	.word	105831
	.byte	30
	.byte	'ComCfgRxSignalGroup',0,18,236,25,61
	.word	105838
	.byte	1,1,11
	.byte	'PduR_MulticastMaskType',0,19,217,4,15
	.word	144
	.byte	11
	.byte	'PduR_RoutingPathIdType',0,19,218,4,15
	.word	144
	.byte	11
	.byte	'PduR_PBConfigIdType',0,20,38,15
	.word	144
	.byte	11
	.byte	'PduR_RoutingPathGroupIdType',0,20,43,16
	.word	418
	.byte	16,20,56,9,1,17
	.byte	'PDUR_DIRECT',0,0,17
	.byte	'PDUR_TRIGGERTRANSMIT',0,1,0,11
	.byte	'PduR_DestProvisionType',0,20,61,3
	.word	106002
	.byte	16,20,69,9,1,17
	.byte	'MODULE_COM',0,0,17
	.byte	'MODULE_DCM',0,1,17
	.byte	'MODULE_CANIF',0,2,17
	.byte	'MODULE_CANTP',0,3,17
	.byte	'MODULE_DOIPTP',0,4,17
	.byte	'MODULE_SOADIF',0,5,17
	.byte	'MODULE_NUM',0,6,0,11
	.byte	'PduRModuleType',0,20,159,1,3
	.word	106076
	.byte	12,20,169,1,9,2,13
	.byte	'PduRSrcPduHandleId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'PduRSrcModuleType',0
	.word	106076
	.byte	1,2,35,1,0,11
	.byte	'PduRSrcPdu_Type',0,20,173,1,3
	.word	106207
	.byte	12,20,175,1,9,12,13
	.byte	'PduRDestPduId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'PduRDestModuleType',0
	.word	106076
	.byte	1,2,35,1,13
	.byte	'PduRDestPduDataProvision',0
	.word	106002
	.byte	1,2,35,2,13
	.byte	'PduRTpThreshold',0
	.word	418
	.byte	2,2,35,4,13
	.byte	'PduRTpGWTrigger',0
	.word	418
	.byte	2,2,35,6,13
	.byte	'PduRDestTxBufferId',0
	.word	418
	.byte	2,2,35,8,13
	.byte	'PduRRoutingGroup',0
	.word	418
	.byte	2,2,35,10,0,11
	.byte	'PduRDestPdu_Type',0,20,184,1,3
	.word	106294
	.byte	9
	.word	106207
	.byte	9
	.word	106294
	.byte	9
	.word	144
	.byte	12,20,203,1,9,20,13
	.byte	'PduRSrcPdu',0
	.word	106516
	.byte	2,2,35,0,13
	.byte	'PduRDestPdu',0
	.word	106521
	.byte	12,2,35,4,13
	.byte	'ConfMask',0
	.word	106526
	.byte	1,2,35,16,0,11
	.byte	'PduRRoutingPathInfoType',0,20,211,1,3
	.word	106531
	.byte	9
	.word	144
	.byte	9
	.word	144
	.byte	8
	.word	106635
	.byte	9
	.word	144
	.byte	12,20,214,1,9,12,13
	.byte	'NumPaths',0
	.word	106630
	.byte	1,2,35,0,13
	.byte	'PathIdx',0
	.word	106640
	.byte	4,2,35,4,13
	.byte	'ConfMask',0
	.word	106645
	.byte	1,2,35,8,0,11
	.byte	'PduRRoutingPduInfoType',0,20,219,1,3
	.word	106650
	.byte	12,20,222,1,9,2,13
	.byte	'PathId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'UpperPduId',0
	.word	144
	.byte	1,2,35,1,0,11
	.byte	'PduRTxConfMapping_Type',0,20,226,1,3
	.word	106742
	.byte	12,20,228,1,9,1,13
	.byte	'PathId',0
	.word	144
	.byte	1,2,35,0,0,11
	.byte	'PduRRxCancelMapping_Type',0,20,231,1,3
	.word	106817
	.byte	9
	.word	440
	.byte	8
	.word	106874
	.byte	18
	.word	144
	.byte	1,1,19
	.word	144
	.byte	19
	.word	106879
	.byte	0,8
	.word	106884
	.byte	11
	.byte	'PduR_TransmitFctPtrType',0,20,152,3,9
	.word	106902
	.byte	8
	.word	817
	.byte	11
	.byte	'PduR_TriggerTransmitFctPtrType',0,20,153,3,9
	.word	106940
	.byte	21,1,1,19
	.word	144
	.byte	19
	.word	106879
	.byte	0,8
	.word	106985
	.byte	11
	.byte	'PduR_IfRxIndicationType',0,20,154,3,9
	.word	106999
	.byte	21,1,1,19
	.word	144
	.byte	0,8
	.word	107037
	.byte	11
	.byte	'PduR_IfTxConfirmationFctPtrType',0,20,155,3,9
	.word	107046
	.byte	8
	.word	418
	.byte	18
	.word	4014
	.byte	1,1,19
	.word	144
	.byte	19
	.word	106879
	.byte	19
	.word	418
	.byte	19
	.word	107092
	.byte	0,8
	.word	107097
	.byte	11
	.byte	'PduR_StartOfReceptionFctPtrType',0,20,157,3,9
	.word	107125
	.byte	18
	.word	4014
	.byte	1,1,19
	.word	144
	.byte	19
	.word	106879
	.byte	19
	.word	107092
	.byte	0,8
	.word	107171
	.byte	11
	.byte	'PduR_CopyRxDataFctPtrType',0,20,158,3,9
	.word	107194
	.byte	8
	.word	4135
	.byte	18
	.word	4014
	.byte	1,1,19
	.word	144
	.byte	19
	.word	106879
	.byte	19
	.word	107234
	.byte	19
	.word	107092
	.byte	0,8
	.word	107239
	.byte	11
	.byte	'PduR_CopyTxDataFctPtrType',0,20,159,3,9
	.word	107267
	.byte	21,1,1,19
	.word	144
	.byte	19
	.word	144
	.byte	0,8
	.word	107307
	.byte	11
	.byte	'PduR_TpRxIndicationFctPtrType',0,20,160,3,9
	.word	107321
	.byte	11
	.byte	'PduR_TpTxConfirmationFctPtrType',0,20,161,3,9
	.word	107321
	.byte	18
	.word	144
	.byte	1,1,19
	.word	144
	.byte	0,8
	.word	107406
	.byte	11
	.byte	'PduR_CancelTransmitFctPtrType',0,20,164,3,9
	.word	107419
	.byte	11
	.byte	'PduR_TpCancelReceiveFctPtrType',0,20,168,3,9
	.word	107419
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L451:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,46,1,49,19,0,0,7,5,0,49,19,0
	.byte	0,8,15,0,73,19,0,0,9,38,0,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,11,22,0
	.byte	3,8,58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,15,59,0,3,8,0,0,16,4,1,58,15,59,15,57,15
	.byte	11,15,0,0,17,40,0,3,8,28,13,0,0,18,21,1,73,19,54,15,39,12,0,0,19,5,0,73,19,0,0,20,21,0,54,15,39,12,0,0
	.byte	21,21,1,54,15,39,12,0,0,22,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,23,21,0,54,15,0,0,24,19,1
	.byte	3,8,58,15,59,15,57,15,11,15,0,0,25,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,26,1,1,11,15,73,19,0,0,27
	.byte	33,0,47,15,0,0,28,1,1,73,19,0,0,29,33,0,0,0,30,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L452:
	.word	.L1360-.L1359
.L1359:
	.half	3
	.word	.L1362-.L1361
.L1361:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout',0,0
	.byte	'Os_Pl_Inl.h',0,1,0,0
	.byte	'Bsw_Common.h',0,2,0,0
	.byte	'PduR_Com.h',0,3,0,0
	.byte	'ComStack_Types.h',0,4,0,0
	.byte	'Com_Types.h',0,5,0,0
	.byte	'Det.h',0,6,0,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0
	.byte	'Platform_Types.h',0,7,0,0
	.byte	'Std_Types.h',0,7,0,0
	.byte	'ComStack_Types_Cfg.h',0,8,0,0
	.byte	'Os_BasicTypes.h',0,1,0,0
	.byte	'Os_Pl_Types.h',0,1,0,0
	.byte	'Os_AsrTypes.h',0,9,0,0
	.byte	'Os_OsekTypes.h',0,9,0,0
	.byte	'Os_Pl_HwDef.h',0,1,0,0
	.byte	'Os_Types.h',0,9,0,0
	.byte	'Rte_Type.h',0,10,0,0
	.byte	'Com_Lcfg.h',0,8,0,0
	.byte	'PduR_Cfg.h',0,8,0,0
	.byte	'PduR_Types.h',0,3,0,0,0
.L1362:
.L1360:
	.sdecl	'.debug_info',debug,cluster('Com_Init')
	.sect	'.debug_info'
.L453:
	.word	233
	.half	3
	.word	.L454
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L456,.L455
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_Init',0,1,167,29,22,1,1,1
	.word	.L378,.L760,.L377
	.byte	4
	.byte	'ConfigPtr',0,1,169,29,51
	.word	.L761,.L762
	.byte	5
	.word	.L378,.L760
	.byte	6
	.byte	'grpIdx',0,1,177,29,25
	.word	.L763,.L764
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_Init')
	.sect	'.debug_abbrev'
.L454:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_Init')
	.sect	'.debug_line'
.L455:
	.word	.L1364-.L1363
.L1363:
	.half	3
	.word	.L1366-.L1365
.L1365:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1366:
	.byte	5,19,7,0,5,2
	.word	.L378
	.byte	3,195,29,1,9
	.half	.L1157-.L378
	.byte	3,4,1,5,20,9
	.half	.L1367-.L1157
	.byte	3,4,1,5,46,9
	.half	.L1158-.L1367
	.byte	3,2,1,5,75,9
	.half	.L1160-.L1158
	.byte	3,126,1,5,13,9
	.half	.L104-.L1160
	.byte	3,2,1,5,35,9
	.half	.L1368-.L104
	.byte	1,5,44,9
	.half	.L1161-.L1368
	.byte	1,5,83,9
	.half	.L1162-.L1161
	.byte	3,126,1,5,75,9
	.half	.L103-.L1162
	.byte	1,5,20,7,9
	.half	.L1369-.L103
	.byte	3,8,1,5,49,9
	.half	.L1370-.L1369
	.byte	3,2,1,5,75,9
	.half	.L1371-.L1370
	.byte	3,126,1,5,13,9
	.half	.L106-.L1371
	.byte	3,2,1,5,38,9
	.half	.L1372-.L106
	.byte	1,5,47,9
	.half	.L1373-.L1372
	.byte	1,5,83,9
	.half	.L1374-.L1373
	.byte	3,126,1,5,75,9
	.half	.L105-.L1374
	.byte	1,5,9,7,9
	.half	.L1375-.L105
	.byte	3,14,1,5,29,9
	.half	.L1376-.L1375
	.byte	1,5,27,9
	.half	.L1159-.L1376
	.byte	1,5,1,9
	.half	.L1377-.L1159
	.byte	3,4,1,7,9
	.half	.L457-.L1377
	.byte	0,1,1
.L1364:
	.sdecl	'.debug_ranges',debug,cluster('Com_Init')
	.sect	'.debug_ranges'
.L456:
	.word	-1,.L378,0,.L457-.L378,0,0
	.sdecl	'.debug_info',debug,cluster('Com_DeInit')
	.sect	'.debug_info'
.L458:
	.word	215
	.half	3
	.word	.L459
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L461,.L460
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_DeInit',0,1,245,29,22,1,1,1
	.word	.L380,.L765,.L379
	.byte	4
	.word	.L380,.L765
	.byte	5
	.byte	'IpduIndex',0,1,251,29,15
	.word	.L766,.L767
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_DeInit')
	.sect	'.debug_abbrev'
.L459:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_DeInit')
	.sect	'.debug_line'
.L460:
	.word	.L1379-.L1378
.L1378:
	.half	3
	.word	.L1381-.L1380
.L1380:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1381:
	.byte	5,19,7,0,5,2
	.word	.L380
	.byte	3,137,30,1,5,47,9
	.half	.L1163-.L380
	.byte	1,5,60,9
	.half	.L1382-.L1163
	.byte	1,5,34,9
	.half	.L108-.L1382
	.byte	3,2,1,5,71,9
	.half	.L1165-.L108
	.byte	3,126,1,5,60,9
	.half	.L107-.L1165
	.byte	1,5,19,7,9
	.half	.L1383-.L107
	.byte	3,7,1,5,47,9
	.half	.L1384-.L1383
	.byte	1,5,60,9
	.half	.L1385-.L1384
	.byte	1,5,34,9
	.half	.L110-.L1385
	.byte	3,2,1,5,71,9
	.half	.L1167-.L110
	.byte	3,126,1,5,60,9
	.half	.L109-.L1167
	.byte	1,5,5,7,9
	.half	.L1386-.L109
	.byte	3,16,1,5,25,9
	.half	.L1387-.L1386
	.byte	1,5,23,9
	.half	.L1388-.L1387
	.byte	1,5,1,9
	.half	.L1389-.L1388
	.byte	3,1,1,7,9
	.half	.L462-.L1389
	.byte	0,1,1
.L1379:
	.sdecl	'.debug_ranges',debug,cluster('Com_DeInit')
	.sect	'.debug_ranges'
.L461:
	.word	-1,.L380,0,.L462-.L380,0,0
	.sdecl	'.debug_info',debug,cluster('Com_GetStatus')
	.sect	'.debug_info'
.L463:
	.word	198
	.half	3
	.word	.L464
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L466,.L465
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_GetStatus',0,1,178,30,32
	.word	.L768
	.byte	1,1,1
	.word	.L382,.L769,.L381
	.byte	4
	.word	.L382,.L769
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_GetStatus')
	.sect	'.debug_abbrev'
.L464:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_GetStatus')
	.sect	'.debug_line'
.L465:
	.word	.L1391-.L1390
.L1390:
	.half	3
	.word	.L1393-.L1392
.L1392:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1393:
	.byte	5,12,7,0,5,2
	.word	.L382
	.byte	3,182,30,1,5,1,9
	.half	.L1394-.L382
	.byte	3,1,1,7,9
	.half	.L467-.L1394
	.byte	0,1,1
.L1391:
	.sdecl	'.debug_ranges',debug,cluster('Com_GetStatus')
	.sect	'.debug_ranges'
.L466:
	.word	-1,.L382,0,.L467-.L382,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SendSignal')
	.sect	'.debug_info'
.L468:
	.word	269
	.half	3
	.word	.L469
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L471,.L470
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SendSignal',0,1,208,30,23
	.word	.L766
	.byte	1,1,1
	.word	.L384,.L770,.L383
	.byte	4
	.byte	'SignalId',0,1,210,30,22
	.word	.L763,.L771
	.byte	4
	.byte	'SignalDataPtr',0,1,211,30,45
	.word	.L772,.L773
	.byte	5
	.word	.L384,.L770
	.byte	6
	.byte	'result',0,1,214,30,11
	.word	.L766,.L774
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SendSignal')
	.sect	'.debug_abbrev'
.L469:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SendSignal')
	.sect	'.debug_line'
.L470:
	.word	.L1396-.L1395
.L1395:
	.half	3
	.word	.L1398-.L1397
.L1397:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1398:
	.byte	5,18,7,0,5,2
	.word	.L384
	.byte	3,213,30,1,5,20,9
	.half	.L1170-.L384
	.byte	3,2,1,5,5,9
	.half	.L1399-.L1170
	.byte	1,5,9,7,9
	.half	.L1400-.L1399
	.byte	3,2,1,5,68,9
	.half	.L1168-.L1400
	.byte	1,5,25,9
	.half	.L112-.L1168
	.byte	3,2,1,5,10,9
	.half	.L1401-.L112
	.byte	1,5,28,7,9
	.half	.L1402-.L1401
	.byte	3,4,1,5,13,9
	.half	.L1403-.L1402
	.byte	1,5,10,9
	.half	.L1404-.L1403
	.byte	1,5,9,7,9
	.half	.L114-.L1404
	.byte	3,2,1,5,67,9
	.half	.L1172-.L114
	.byte	1,5,13,9
	.half	.L115-.L1172
	.byte	3,2,1,5,10,9
	.half	.L1405-.L115
	.byte	1,5,9,7,9
	.half	.L1406-.L1405
	.byte	3,2,1,5,75,9
	.half	.L1174-.L1406
	.byte	1,5,68,9
	.half	.L117-.L1174
	.byte	3,5,1,5,16,9
	.half	.L1171-.L117
	.byte	1,5,5,9
	.half	.L113-.L1171
	.byte	3,7,1,5,1,9
	.half	.L1176-.L113
	.byte	3,2,1,7,9
	.half	.L472-.L1176
	.byte	0,1,1
.L1396:
	.sdecl	'.debug_ranges',debug,cluster('Com_SendSignal')
	.sect	'.debug_ranges'
.L471:
	.word	-1,.L384,0,.L472-.L384,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SendDynSignal')
	.sect	'.debug_info'
.L473:
	.word	292
	.half	3
	.word	.L474
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L476,.L475
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SendDynSignal',0,1,204,31,23
	.word	.L766
	.byte	1,1,1
	.word	.L388,.L775,.L387
	.byte	4
	.byte	'SignalId',0,1,206,31,22
	.word	.L763,.L776
	.byte	4
	.byte	'SignalDataPtr',0,1,207,31,45
	.word	.L772,.L777
	.byte	4
	.byte	'Length',0,1,208,31,12
	.word	.L763,.L778
	.byte	5
	.word	.L388,.L775
	.byte	6
	.byte	'result',0,1,211,31,11
	.word	.L766,.L779
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SendDynSignal')
	.sect	'.debug_abbrev'
.L474:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SendDynSignal')
	.sect	'.debug_line'
.L475:
	.word	.L1408-.L1407
.L1407:
	.half	3
	.word	.L1410-.L1409
.L1409:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1410:
	.byte	5,20,7,0,5,2
	.word	.L388
	.byte	3,212,31,1,5,5,9
	.half	.L1411-.L388
	.byte	1,5,9,7,9
	.half	.L1412-.L1411
	.byte	3,2,1,5,71,9
	.half	.L1413-.L1412
	.byte	1,5,9,9
	.half	.L121-.L1413
	.byte	3,35,1,5,18,9
	.half	.L1179-.L121
	.byte	3,89,1,5,1,9
	.half	.L1181-.L1179
	.byte	3,47,1,7,9
	.half	.L477-.L1181
	.byte	0,1,1
.L1408:
	.sdecl	'.debug_ranges',debug,cluster('Com_SendDynSignal')
	.sect	'.debug_ranges'
.L476:
	.word	-1,.L388,0,.L477-.L388,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_info'
.L478:
	.word	248
	.half	3
	.word	.L479
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L481,.L480
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_InvalidateSignal',0,1,134,31,23
	.word	.L766
	.byte	1,1,1
	.word	.L386,.L780,.L385
	.byte	4
	.byte	'SignalId',0,1,136,31,22
	.word	.L763,.L781
	.byte	5
	.word	.L386,.L780
	.byte	6
	.byte	'result',0,1,139,31,11
	.word	.L766,.L782
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_abbrev'
.L479:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_line'
.L480:
	.word	.L1415-.L1414
.L1414:
	.half	3
	.word	.L1417-.L1416
.L1416:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1417:
	.byte	5,18,7,0,5,2
	.word	.L386
	.byte	3,138,31,1,5,1,9
	.half	.L1177-.L386
	.byte	3,42,1,7,9
	.half	.L482-.L1177
	.byte	0,1,1
.L1415:
	.sdecl	'.debug_ranges',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_ranges'
.L481:
	.word	-1,.L386,0,.L482-.L386,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_info'
.L483:
	.word	241
	.half	3
	.word	.L484
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L486,.L485
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TriggerIPDUSend',0,1,204,37,32
	.word	.L766
	.byte	1,1,1
	.word	.L404,.L783,.L403
	.byte	4
	.byte	'PduId',0,1,206,37,15
	.word	.L766,.L784
	.byte	5
	.word	.L404,.L783
	.byte	6
	.byte	'ret',0,1,209,37,20
	.word	.L766,.L785
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_abbrev'
.L484:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_line'
.L485:
	.word	.L1419-.L1418
.L1418:
	.half	3
	.word	.L1421-.L1420
.L1420:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1421:
	.byte	5,24,7,0,5,2
	.word	.L404
	.byte	3,208,37,1,5,20,9
	.half	.L1227-.L404
	.byte	3,3,1,5,5,9
	.half	.L1422-.L1227
	.byte	1,5,9,7,9
	.half	.L1423-.L1422
	.byte	3,2,1,5,73,9
	.half	.L1424-.L1423
	.byte	1,5,22,9
	.half	.L195-.L1424
	.byte	3,2,1,5,10,9
	.half	.L1425-.L195
	.byte	1,5,9,7,9
	.half	.L1426-.L1425
	.byte	3,2,1,5,72,9
	.half	.L1427-.L1426
	.byte	1,5,30,9
	.half	.L197-.L1427
	.byte	3,5,1,5,44,9
	.half	.L1428-.L197
	.byte	1,5,9,9
	.half	.L1429-.L1428
	.byte	1,5,13,7,9
	.half	.L1430-.L1429
	.byte	3,2,1,5,35,9
	.half	.L1431-.L1430
	.byte	1,5,45,9
	.half	.L1432-.L1431
	.byte	1,5,43,9
	.half	.L1433-.L1432
	.byte	1,5,17,9
	.half	.L1434-.L1433
	.byte	3,1,1,5,5,9
	.half	.L196-.L1434
	.byte	3,5,1,5,1,9
	.half	.L1229-.L196
	.byte	3,1,1,7,9
	.half	.L487-.L1229
	.byte	0,1,1
.L1419:
	.sdecl	'.debug_ranges',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_ranges'
.L486:
	.word	-1,.L404,0,.L487-.L404,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_info'
.L488:
	.word	238
	.half	3
	.word	.L489
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L491,.L490
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SwitchIpduTxMode',0,1,146,37,22,1,1,1
	.word	.L402,.L786,.L401
	.byte	4
	.byte	'PduId',0,1,148,37,15
	.word	.L766,.L787
	.byte	4
	.byte	'Mode',0,1,149,37,13
	.word	.L766,.L788
	.byte	5
	.word	.L402,.L786
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_abbrev'
.L489:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_line'
.L490:
	.word	.L1436-.L1435
.L1435:
	.half	3
	.word	.L1438-.L1437
.L1437:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1438:
	.byte	5,20,7,0,5,2
	.word	.L402
	.byte	3,151,37,1,5,5,9
	.half	.L1439-.L402
	.byte	1,5,9,7,9
	.half	.L1440-.L1439
	.byte	3,2,1,5,74,9
	.half	.L1441-.L1440
	.byte	1,5,22,9
	.half	.L192-.L1441
	.byte	3,2,1,5,10,9
	.half	.L1442-.L192
	.byte	1,5,9,7,9
	.half	.L1443-.L1442
	.byte	3,2,1,5,1,9
	.half	.L194-.L1443
	.byte	3,29,1,7,9
	.half	.L492-.L194
	.byte	0,1,1
.L1436:
	.sdecl	'.debug_ranges',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_ranges'
.L491:
	.word	-1,.L402,0,.L492-.L402,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_info'
.L493:
	.word	294
	.half	3
	.word	.L494
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L496,.L495
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ReceiveSignal',0,1,194,35,23
	.word	.L766
	.byte	1,1,1
	.word	.L398,.L789,.L397
	.byte	4
	.byte	'SignalId',0,1,196,35,22
	.word	.L763,.L790
	.byte	4
	.byte	'SignalDataPtr',0,1,197,35,43
	.word	.L791,.L792
	.byte	5
	.word	.L398,.L789
	.byte	6
	.byte	'result',0,1,201,35,11
	.word	.L766,.L793
	.byte	6
	.byte	'RxIpduId',0,1,203,35,15
	.word	.L766,.L794
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_abbrev'
.L494:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_line'
.L495:
	.word	.L1445-.L1444
.L1444:
	.half	3
	.word	.L1447-.L1446
.L1446:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1447:
	.byte	5,23,7,0,5,2
	.word	.L398
	.byte	3,193,35,1,5,18,9
	.half	.L1206-.L398
	.byte	3,7,1,5,20,9
	.half	.L1207-.L1206
	.byte	3,6,1,5,5,9
	.half	.L1448-.L1207
	.byte	1,5,9,7,9
	.half	.L1449-.L1448
	.byte	3,2,1,5,71,9
	.half	.L1204-.L1449
	.byte	1,5,25,9
	.half	.L176-.L1204
	.byte	3,2,1,5,10,9
	.half	.L1450-.L176
	.byte	1,5,28,7,9
	.half	.L1451-.L1450
	.byte	3,5,1,5,13,9
	.half	.L1452-.L1451
	.byte	1,5,10,9
	.half	.L1453-.L1452
	.byte	1,5,9,7,9
	.half	.L178-.L1453
	.byte	3,2,1,5,70,9
	.half	.L1208-.L178
	.byte	1,5,13,9
	.half	.L179-.L1208
	.byte	3,2,1,5,10,9
	.half	.L1454-.L179
	.byte	1,5,9,7,9
	.half	.L1455-.L1454
	.byte	3,2,1,5,78,9
	.half	.L1210-.L1455
	.byte	1,5,20,9
	.half	.L181-.L1210
	.byte	3,5,1,9
	.half	.L1214-.L181
	.byte	3,7,1,5,9,9
	.half	.L1456-.L1214
	.byte	1,5,16,7,9
	.half	.L1457-.L1456
	.byte	3,2,1,5,28,9
	.half	.L1458-.L1457
	.byte	1,5,13,9
	.half	.L1459-.L1458
	.byte	1,5,17,7,9
	.half	.L1460-.L1459
	.byte	3,2,1,5,78,9
	.half	.L1212-.L1460
	.byte	1,5,17,9
	.half	.L184-.L1212
	.byte	3,4,1,5,54,9
	.half	.L1461-.L184
	.byte	1,5,109,9
	.half	.L1215-.L1461
	.byte	1,5,13,9
	.half	.L1216-.L1215
	.byte	3,126,1,9
	.half	.L183-.L1216
	.byte	3,8,1,5,65,9
	.half	.L1462-.L183
	.byte	1,5,99,9
	.half	.L1463-.L1462
	.byte	1,5,30,9
	.half	.L185-.L1463
	.byte	3,9,1,5,44,9
	.half	.L1464-.L185
	.byte	1,5,9,9
	.half	.L1465-.L1464
	.byte	1,5,20,7,9
	.half	.L1466-.L1465
	.byte	3,2,1,5,5,9
	.half	.L177-.L1466
	.byte	3,6,1,5,1,9
	.half	.L1220-.L177
	.byte	3,2,1,7,9
	.half	.L497-.L1220
	.byte	0,1,1
.L1445:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_ranges'
.L496:
	.word	-1,.L398,0,.L497-.L398,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceiveDynSignal')
	.sect	'.debug_info'
.L498:
	.word	295
	.half	3
	.word	.L499
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L501,.L500
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ReceiveDynSignal',0,1,163,36,23
	.word	.L766
	.byte	1,1,1
	.word	.L400,.L795,.L399
	.byte	4
	.byte	'SignalId',0,1,165,36,22
	.word	.L763,.L796
	.byte	4
	.byte	'SignalDataPtr',0,1,166,36,43
	.word	.L791,.L797
	.byte	4
	.byte	'Length',0,1,167,36,45
	.word	.L798,.L799
	.byte	5
	.word	.L400,.L795
	.byte	6
	.byte	'result',0,1,171,36,11
	.word	.L766,.L800
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceiveDynSignal')
	.sect	'.debug_abbrev'
.L499:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceiveDynSignal')
	.sect	'.debug_line'
.L500:
	.word	.L1468-.L1467
.L1467:
	.half	3
	.word	.L1470-.L1469
.L1469:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1470:
	.byte	5,20,7,0,5,2
	.word	.L400
	.byte	3,178,36,1,5,5,9
	.half	.L1471-.L400
	.byte	1,5,9,7,9
	.half	.L1472-.L1471
	.byte	3,2,1,5,74,9
	.half	.L1473-.L1472
	.byte	1,5,9,9
	.half	.L189-.L1473
	.byte	3,194,0,1,5,18,9
	.half	.L1221-.L189
	.byte	3,180,127,1,5,1,9
	.half	.L1223-.L1221
	.byte	3,210,0,1,7,9
	.half	.L502-.L1223
	.byte	0,1,1
.L1468:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceiveDynSignal')
	.sect	'.debug_ranges'
.L501:
	.word	-1,.L400,0,.L502-.L400,0,0
	.sdecl	'.debug_info',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_info'
.L503:
	.word	222
	.half	3
	.word	.L504
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L506,.L505
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_MainFunctionRx',0,1,220,34,22,1,1,1
	.word	.L396,.L801,.L395
	.byte	4
	.word	.L396,.L801
	.byte	5
	.byte	'RxIpduId',0,1,226,34,15
	.word	.L766,.L802
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_abbrev'
.L504:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_line'
.L505:
	.word	.L1475-.L1474
.L1474:
	.half	3
	.word	.L1477-.L1476
.L1476:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1477:
	.byte	5,20,7,0,5,2
	.word	.L396
	.byte	3,228,34,1,5,5,9
	.half	.L1478-.L396
	.byte	1,5,9,7,9
	.half	.L1479-.L1478
	.byte	3,2,1,5,22,9
	.half	.L166-.L1479
	.byte	3,5,1,5,48,9
	.half	.L1201-.L166
	.byte	3,45,1,5,49,9
	.half	.L1480-.L1201
	.byte	3,83,1,5,62,9
	.half	.L1481-.L1480
	.byte	1,5,34,9
	.half	.L169-.L1481
	.byte	3,2,1,5,48,9
	.half	.L1482-.L169
	.byte	1,5,13,9
	.half	.L1483-.L1482
	.byte	1,5,21,7,9
	.half	.L1484-.L1483
	.byte	3,4,1,5,35,9
	.half	.L1485-.L1484
	.byte	1,5,20,9
	.half	.L1486-.L1485
	.byte	1,5,17,7,9
	.half	.L1487-.L1486
	.byte	3,1,1,5,14,9
	.half	.L1488-.L1487
	.byte	1,5,32,7,9
	.half	.L1489-.L1488
	.byte	3,8,1,5,21,9
	.half	.L1490-.L1489
	.byte	1,5,25,7,9
	.half	.L1491-.L1490
	.byte	3,2,1,5,55,9
	.half	.L1492-.L1491
	.byte	1,5,53,9
	.half	.L1493-.L1492
	.byte	1,5,24,9
	.half	.L173-.L1493
	.byte	3,5,1,5,38,9
	.half	.L1494-.L173
	.byte	1,5,21,9
	.half	.L1495-.L1494
	.byte	1,5,56,7,9
	.half	.L1496-.L1495
	.byte	3,11,1,5,21,9
	.half	.L174-.L1496
	.byte	3,12,1,5,35,9
	.half	.L1497-.L174
	.byte	1,5,46,9
	.half	.L1498-.L1497
	.byte	1,5,28,9
	.half	.L171-.L1498
	.byte	3,4,1,5,17,9
	.half	.L1499-.L171
	.byte	1,5,43,7,9
	.half	.L1500-.L1499
	.byte	3,2,1,5,72,9
	.half	.L170-.L1500
	.byte	3,77,1,5,62,9
	.half	.L168-.L170
	.byte	1,5,1,7,9
	.half	.L1501-.L168
	.byte	3,192,0,1,7,9
	.half	.L507-.L1501
	.byte	0,1,1
.L1475:
	.sdecl	'.debug_ranges',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_ranges'
.L506:
	.word	-1,.L396,0,.L507-.L396,0,0
	.sdecl	'.debug_info',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_info'
.L508:
	.word	244
	.half	3
	.word	.L509
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L511,.L510
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_MainFunctionTx',0,1,224,32,22,1,1,1
	.word	.L392,.L803,.L391
	.byte	4
	.word	.L392,.L803
	.byte	5
	.byte	'TxIpduId',0,1,230,32,15
	.word	.L766,.L804
	.byte	5
	.byte	'sendFlag',0,1,231,32,13
	.word	.L766,.L805
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_abbrev'
.L509:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_line'
.L510:
	.word	.L1503-.L1502
.L1502:
	.half	3
	.word	.L1505-.L1504
.L1504:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1505:
	.byte	5,20,7,0,5,2
	.word	.L392
	.byte	3,233,32,1,5,5,9
	.half	.L1506-.L392
	.byte	1,5,9,7,9
	.half	.L1507-.L1506
	.byte	3,2,1,5,22,9
	.half	.L137-.L1507
	.byte	3,5,1,5,20,9
	.half	.L1186-.L137
	.byte	3,38,1,5,63,9
	.half	.L1508-.L1186
	.byte	3,8,1,5,74,9
	.half	.L1509-.L1508
	.byte	3,6,1,5,49,9
	.half	.L1510-.L1509
	.byte	3,76,1,5,62,9
	.half	.L1511-.L1510
	.byte	1,5,34,9
	.half	.L140-.L1511
	.byte	3,2,1,5,48,9
	.half	.L1512-.L140
	.byte	1,5,13,9
	.half	.L1513-.L1512
	.byte	1,5,20,7,9
	.half	.L1514-.L1513
	.byte	3,4,1,5,34,9
	.half	.L1515-.L1514
	.byte	1,5,17,9
	.half	.L1516-.L1515
	.byte	1,5,33,7,9
	.half	.L1517-.L1516
	.byte	3,2,1,5,21,9
	.half	.L1518-.L1517
	.byte	1,5,53,7,9
	.half	.L1519-.L1518
	.byte	3,2,1,5,67,9
	.half	.L1520-.L1519
	.byte	1,5,46,9
	.half	.L142-.L1520
	.byte	3,25,1,5,42,9
	.half	.L1189-.L142
	.byte	3,3,1,5,17,9
	.half	.L1521-.L1189
	.byte	1,5,37,7,9
	.half	.L1522-.L1521
	.byte	3,2,1,5,21,9
	.half	.L1523-.L1522
	.byte	1,5,25,7,9
	.half	.L1524-.L1523
	.byte	3,2,1,5,60,9
	.half	.L1525-.L1524
	.byte	1,5,37,9
	.half	.L145-.L1525
	.byte	3,2,1,5,21,9
	.half	.L1526-.L145
	.byte	1,5,25,7,9
	.half	.L1527-.L1526
	.byte	3,2,1,5,61,9
	.half	.L1528-.L1527
	.byte	1,5,81,9
	.half	.L1529-.L1528
	.byte	1,5,25,9
	.half	.L146-.L1529
	.byte	3,4,1,5,29,7,9
	.half	.L1530-.L146
	.byte	3,2,1,5,72,9
	.half	.L1531-.L1530
	.byte	1,5,34,9
	.half	.L148-.L1531
	.byte	3,3,1,5,17,9
	.half	.L144-.L148
	.byte	3,18,1,5,37,7,9
	.half	.L1532-.L144
	.byte	3,2,1,5,72,9
	.half	.L141-.L1532
	.byte	3,181,127,1,5,62,9
	.half	.L139-.L141
	.byte	1,5,1,7,9
	.half	.L1533-.L139
	.byte	3,212,0,1,7,9
	.half	.L512-.L1533
	.byte	0,1,1
.L1503:
	.sdecl	'.debug_ranges',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_ranges'
.L511:
	.word	-1,.L392,0,.L512-.L392,0,0
	.sdecl	'.debug_info',debug,cluster('Com_MainFunctionRouteSignals')
	.sect	'.debug_info'
.L513:
	.word	209
	.half	3
	.word	.L514
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L516,.L515
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_MainFunctionRouteSignals',0,1,149,47,22,1,1,1
	.word	.L438,.L806,.L437
	.byte	4
	.word	.L438,.L806
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_MainFunctionRouteSignals')
	.sect	'.debug_abbrev'
.L514:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_MainFunctionRouteSignals')
	.sect	'.debug_line'
.L515:
	.word	.L1535-.L1534
.L1534:
	.half	3
	.word	.L1537-.L1536
.L1536:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1537:
	.byte	5,20,7,0,5,2
	.word	.L438
	.byte	3,158,47,1,5,5,9
	.half	.L1538-.L438
	.byte	1,5,9,7,9
	.half	.L1539-.L1538
	.byte	3,2,1,5,1,9
	.half	.L301-.L1539
	.byte	3,21,1,7,9
	.half	.L517-.L301
	.byte	0,1,1
.L1535:
	.sdecl	'.debug_ranges',debug,cluster('Com_MainFunctionRouteSignals')
	.sect	'.debug_ranges'
.L516:
	.word	-1,.L438,0,.L517-.L438,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_info'
.L518:
	.word	356
	.half	3
	.word	.L519
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L521,.L520
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IpduGroupControl',0,1,179,44,22,1,1,1
	.word	.L426,.L807,.L425
	.byte	4
	.byte	'ipduGroupVector',0,1,181,44,25
	.word	.L808,.L809
	.byte	4
	.byte	'Initialize',0,1,182,44,13
	.word	.L766,.L810
	.byte	5
	.word	.L426,.L807
	.byte	6
	.byte	'GroupIDIndex',0,1,186,44,25
	.word	.L763,.L811
	.byte	6
	.byte	'Position_Bit',0,1,187,44,11
	.word	.L766,.L812
	.byte	6
	.byte	'Position_Byte',0,1,188,44,12
	.word	.L763,.L813
	.byte	6
	.byte	'tempByte',0,1,191,44,11
	.word	.L766,.L814
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_abbrev'
.L519:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_line'
.L520:
	.word	.L1541-.L1540
.L1540:
	.half	3
	.word	.L1543-.L1542
.L1542:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1543:
	.byte	5,22,7,0,5,2
	.word	.L426
	.byte	3,178,44,1,5,20,9
	.half	.L1289-.L426
	.byte	3,14,1,5,5,9
	.half	.L1544-.L1289
	.byte	1,5,9,7,9
	.half	.L1545-.L1544
	.byte	3,2,1,5,13,9
	.half	.L255-.L1545
	.byte	3,2,1,5,10,9
	.half	.L1546-.L255
	.byte	1,5,9,7,9
	.half	.L1547-.L1546
	.byte	3,2,1,5,26,9
	.half	.L257-.L1547
	.byte	3,12,1,5,33,9
	.half	.L1292-.L257
	.byte	3,4,1,5,84,9
	.half	.L1548-.L1292
	.byte	3,124,1,5,43,9
	.half	.L260-.L1548
	.byte	3,2,1,5,36,9
	.half	.L1293-.L260
	.byte	3,1,1,5,43,9
	.half	.L1295-.L1293
	.byte	3,1,1,5,52,9
	.half	.L1297-.L1295
	.byte	3,3,1,5,68,9
	.half	.L1294-.L1297
	.byte	1,5,16,9
	.half	.L1549-.L1294
	.byte	1,5,94,7,9
	.half	.L1550-.L1549
	.byte	1,5,116,9
	.half	.L1551-.L1550
	.byte	1,5,91,9
	.half	.L1296-.L1551
	.byte	1,5,59,7,9
	.half	.L1552-.L1296
	.byte	3,2,1,5,98,9
	.half	.L261-.L1552
	.byte	3,119,1,5,84,9
	.half	.L259-.L261
	.byte	1,5,26,7,9
	.half	.L1553-.L259
	.byte	3,15,1,5,33,9
	.half	.L1554-.L1553
	.byte	3,4,1,5,84,9
	.half	.L1290-.L1554
	.byte	3,124,1,5,43,9
	.half	.L264-.L1290
	.byte	3,2,1,5,36,9
	.half	.L1298-.L264
	.byte	3,1,1,5,43,9
	.half	.L1300-.L1298
	.byte	3,1,1,5,52,9
	.half	.L1301-.L1300
	.byte	3,3,1,5,68,9
	.half	.L1299-.L1301
	.byte	1,5,16,9
	.half	.L1555-.L1299
	.byte	1,5,93,7,9
	.half	.L1556-.L1555
	.byte	1,5,115,9
	.half	.L1557-.L1556
	.byte	1,5,90,9
	.half	.L1302-.L1557
	.byte	1,5,44,7,9
	.half	.L1558-.L1302
	.byte	3,2,1,5,98,9
	.half	.L265-.L1558
	.byte	3,119,1,5,84,9
	.half	.L263-.L265
	.byte	1,5,1,7,9
	.half	.L1559-.L263
	.byte	3,17,1,7,9
	.half	.L522-.L1559
	.byte	0,1,1
.L1541:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_ranges'
.L521:
	.word	-1,.L426,0,.L522-.L426,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_info'
.L523:
	.word	388
	.half	3
	.word	.L524
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L526,.L525
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ReceptionDMControl',0,1,216,43,22,1,1,1
	.word	.L424,.L815,.L423
	.byte	4
	.byte	'ipduGroupVector',0,1,218,43,25
	.word	.L808,.L816
	.byte	5
	.word	.L424,.L815
	.byte	6
	.byte	'GroupIDIndex',0,1,222,43,25
	.word	.L763,.L817
	.byte	6
	.byte	'RxIpduId',0,1,223,43,15
	.word	.L766,.L818
	.byte	6
	.byte	'Position_Bit',0,1,224,43,11
	.word	.L766,.L819
	.byte	6
	.byte	'Position_Byte',0,1,225,43,12
	.word	.L763,.L820
	.byte	6
	.byte	'tempByte',0,1,226,43,11
	.word	.L766,.L821
	.byte	6
	.byte	'tmpPduDMEnableFlag',0,1,227,43,13
	.word	.L766,.L822
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_abbrev'
.L524:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_line'
.L525:
	.word	.L1561-.L1560
.L1560:
	.half	3
	.word	.L1563-.L1562
.L1562:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1563:
	.byte	5,20,7,0,5,2
	.word	.L424
	.byte	3,228,43,1,5,5,9
	.half	.L1564-.L424
	.byte	1,5,9,7,9
	.half	.L1565-.L1564
	.byte	3,2,1,5,13,9
	.half	.L243-.L1565
	.byte	3,2,1,5,10,9
	.half	.L1566-.L243
	.byte	1,5,9,7,9
	.half	.L1567-.L1566
	.byte	3,2,1,5,26,9
	.half	.L245-.L1567
	.byte	3,5,1,5,33,9
	.half	.L1278-.L245
	.byte	3,4,1,5,84,9
	.half	.L1568-.L1278
	.byte	3,124,1,5,43,9
	.half	.L248-.L1568
	.byte	3,2,1,5,36,9
	.half	.L1279-.L248
	.byte	3,1,1,5,43,9
	.half	.L1281-.L1279
	.byte	3,1,1,5,17,9
	.half	.L1282-.L1281
	.byte	3,4,1,5,42,9
	.half	.L1569-.L1282
	.byte	1,5,51,9
	.half	.L1570-.L1569
	.byte	3,126,1,5,67,9
	.half	.L1280-.L1570
	.byte	1,5,57,9
	.half	.L1571-.L1280
	.byte	3,2,1,5,98,9
	.half	.L1572-.L1571
	.byte	3,120,1,5,84,9
	.half	.L247-.L1572
	.byte	1,5,22,7,9
	.half	.L1573-.L247
	.byte	3,16,1,5,59,9
	.half	.L1284-.L1573
	.byte	3,21,1,5,49,9
	.half	.L1574-.L1284
	.byte	3,107,1,5,66,9
	.half	.L1575-.L1574
	.byte	1,5,32,9
	.half	.L250-.L1575
	.byte	3,2,1,5,13,9
	.half	.L1576-.L250
	.byte	1,5,28,7,9
	.half	.L1577-.L1576
	.byte	3,2,1,5,17,9
	.half	.L1578-.L1577
	.byte	1,5,42,7,9
	.half	.L1579-.L1578
	.byte	3,3,1,5,56,9
	.half	.L1580-.L1579
	.byte	1,5,21,9
	.half	.L1581-.L1580
	.byte	1,5,73,7,9
	.half	.L1582-.L1581
	.byte	3,2,1,5,28,9
	.half	.L1286-.L1582
	.byte	3,2,1,5,25,9
	.half	.L1583-.L1286
	.byte	1,5,33,7,9
	.half	.L1584-.L1583
	.byte	3,4,1,5,37,9
	.half	.L1585-.L1584
	.byte	3,126,1,5,66,9
	.half	.L1586-.L1585
	.byte	3,2,1,5,29,9
	.half	.L1587-.L1586
	.byte	3,6,1,5,57,9
	.half	.L1588-.L1587
	.byte	1,5,76,9
	.half	.L251-.L1588
	.byte	3,107,1,5,66,9
	.half	.L249-.L251
	.byte	1,5,1,7,9
	.half	.L1589-.L249
	.byte	3,35,1,7,9
	.half	.L527-.L1589
	.byte	0,1,1
.L1561:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_ranges'
.L526:
	.word	-1,.L424,0,.L527-.L424,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_info'
.L528:
	.word	286
	.half	3
	.word	.L529
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L531,.L530
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ClearIpduGroupVector',0,1,201,42,22,1,1,1
	.word	.L418,.L823,.L417
	.byte	4
	.byte	'ipduGroupVector',0,1,203,42,25
	.word	.L808,.L824
	.byte	5
	.word	.L418,.L823
	.byte	6
	.byte	'Index',0,1,207,42,12
	.word	.L763,.L825
	.byte	6
	.byte	'PduGroupVectorSize',0,1,208,42,12
	.word	.L763,.L826
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_abbrev'
.L529:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_line'
.L530:
	.word	.L1591-.L1590
.L1590:
	.half	3
	.word	.L1593-.L1592
.L1592:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1593:
	.byte	5,20,7,0,5,2
	.word	.L418
	.byte	3,209,42,1,5,5,9
	.half	.L1594-.L418
	.byte	1,5,9,7,9
	.half	.L1595-.L1594
	.byte	3,2,1,5,13,9
	.half	.L224-.L1595
	.byte	3,2,1,5,10,9
	.half	.L1596-.L224
	.byte	1,5,9,7,9
	.half	.L1597-.L1596
	.byte	3,2,1,5,19,9
	.half	.L226-.L1597
	.byte	3,8,1,5,38,9
	.half	.L1255-.L226
	.byte	3,2,1,5,58,9
	.half	.L1257-.L1255
	.byte	3,126,1,5,28,9
	.half	.L229-.L1257
	.byte	3,2,1,5,36,9
	.half	.L1258-.L229
	.byte	1,5,65,9
	.half	.L1259-.L1258
	.byte	3,126,1,5,58,9
	.half	.L228-.L1259
	.byte	1,5,1,7,9
	.half	.L1598-.L228
	.byte	3,6,1,7,9
	.half	.L532-.L1598
	.byte	0,1,1
.L1591:
	.sdecl	'.debug_ranges',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_ranges'
.L531:
	.word	-1,.L418,0,.L532-.L418,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_info'
.L533:
	.word	347
	.half	3
	.word	.L534
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L536,.L535
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SetIpduGroup',0,1,248,42,22,1,1,1
	.word	.L420,.L827,.L419
	.byte	4
	.byte	'ipduGroupVector',0,1,250,42,25
	.word	.L808,.L828
	.byte	4
	.byte	'ipduGroupId',0,1,251,42,26
	.word	.L763,.L829
	.byte	4
	.byte	'bitval',0,1,252,42,13
	.word	.L766,.L830
	.byte	5
	.word	.L420,.L827
	.byte	6
	.byte	'Position_Bit',0,1,128,43,11
	.word	.L766,.L831
	.byte	6
	.byte	'Position_Byte',0,1,129,43,12
	.word	.L763,.L832
	.byte	6
	.byte	'tempByte',0,1,130,43,11
	.word	.L766,.L833
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_abbrev'
.L534:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_line'
.L535:
	.word	.L1600-.L1599
.L1599:
	.half	3
	.word	.L1602-.L1601
.L1601:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1602:
	.byte	5,20,7,0,5,2
	.word	.L420
	.byte	3,131,43,1,5,5,9
	.half	.L1603-.L420
	.byte	1,5,9,7,9
	.half	.L1604-.L1603
	.byte	3,2,1,5,13,9
	.half	.L230-.L1604
	.byte	3,2,1,5,10,9
	.half	.L1605-.L230
	.byte	1,5,9,7,9
	.half	.L1606-.L1605
	.byte	3,2,1,5,10,9
	.half	.L232-.L1606
	.byte	3,2,1,5,9,7,9
	.half	.L1607-.L232
	.byte	3,2,1,5,38,9
	.half	.L234-.L1607
	.byte	3,6,1,5,32,9
	.half	.L1266-.L234
	.byte	3,1,1,5,29,9
	.half	.L1268-.L1266
	.byte	3,2,1,5,39,9
	.half	.L1608-.L1268
	.byte	1,5,9,9
	.half	.L1270-.L1608
	.byte	3,2,1,5,31,7,9
	.half	.L1609-.L1270
	.byte	3,2,1,5,28,9
	.half	.L1269-.L1609
	.byte	3,1,1,5,44,9
	.half	.L1267-.L1269
	.byte	1,5,1,9
	.half	.L1610-.L1267
	.byte	3,10,1,5,28,7,9
	.half	.L236-.L1610
	.byte	3,122,1,5,44,9
	.half	.L1272-.L236
	.byte	1,5,1,9
	.half	.L1611-.L1272
	.byte	3,6,1,7,9
	.half	.L537-.L1611
	.byte	0,1,1
.L1600:
	.sdecl	'.debug_ranges',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_ranges'
.L536:
	.word	-1,.L420,0,.L537-.L420,0,0
	.sdecl	'.debug_info',debug,cluster('Com_GetIpduGroupState')
	.sect	'.debug_info'
.L538:
	.word	250
	.half	3
	.word	.L539
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L541,.L540
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_GetIpduGroupState',0,1,221,45,25
	.word	.L766
	.byte	1,1,1
	.word	.L432,.L834,.L431
	.byte	4
	.byte	'IpduGroupId',0,1,223,45,25
	.word	.L763,.L835
	.byte	5
	.word	.L432,.L834
	.byte	6
	.byte	'flag',0,1,226,45,13
	.word	.L766,.L836
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_GetIpduGroupState')
	.sect	'.debug_abbrev'
.L539:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_GetIpduGroupState')
	.sect	'.debug_line'
.L540:
	.word	.L1613-.L1612
.L1612:
	.half	3
	.word	.L1615-.L1614
.L1614:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1615:
	.byte	5,18,7,0,5,2
	.word	.L432
	.byte	3,225,45,1,5,20,9
	.half	.L1311-.L432
	.byte	3,3,1,5,5,9
	.half	.L1616-.L1311
	.byte	1,5,9,7,9
	.half	.L1617-.L1616
	.byte	3,2,1,5,75,9
	.half	.L1313-.L1617
	.byte	1,5,10,9
	.half	.L275-.L1313
	.byte	3,2,1,5,9,7,9
	.half	.L1618-.L275
	.byte	3,2,1,5,74,9
	.half	.L1619-.L1618
	.byte	1,5,16,9
	.half	.L277-.L1619
	.byte	3,4,1,5,38,9
	.half	.L1620-.L277
	.byte	1,5,5,9
	.half	.L276-.L1620
	.byte	3,3,1,5,1,9
	.half	.L1315-.L276
	.byte	3,1,1,7,9
	.half	.L542-.L1315
	.byte	0,1,1
.L1613:
	.sdecl	'.debug_ranges',debug,cluster('Com_GetIpduGroupState')
	.sect	'.debug_ranges'
.L541:
	.word	-1,.L432,0,.L542-.L432,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_info'
.L543:
	.word	248
	.half	3
	.word	.L544
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L546,.L545
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IpduGroupStart',0,1,139,45,22,1,1,1
	.word	.L428,.L837,.L427
	.byte	4
	.byte	'IpduGroupId',0,1,141,45,25
	.word	.L763,.L838
	.byte	4
	.byte	'Initialize',0,1,142,45,13
	.word	.L766,.L839
	.byte	5
	.word	.L428,.L837
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_abbrev'
.L544:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_line'
.L545:
	.word	.L1622-.L1621
.L1621:
	.half	3
	.word	.L1624-.L1623
.L1623:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1624:
	.byte	5,20,7,0,5,2
	.word	.L428
	.byte	3,144,45,1,5,5,9
	.half	.L1625-.L428
	.byte	1,5,9,7,9
	.half	.L1626-.L1625
	.byte	3,2,1,5,10,9
	.half	.L267-.L1626
	.byte	3,2,1,5,9,7,9
	.half	.L1627-.L267
	.byte	3,2,1,5,50,9
	.half	.L269-.L1627
	.byte	3,6,1,5,1,7,9
	.half	.L547-.L269
	.byte	3,6,0,1,1
.L1622:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_ranges'
.L546:
	.word	-1,.L428,0,.L547-.L428,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_info'
.L548:
	.word	223
	.half	3
	.word	.L549
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L551,.L550
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IpduGroupStop',0,1,181,45,22,1,1,1
	.word	.L430,.L840,.L429
	.byte	4
	.byte	'IpduGroupId',0,1,183,45,25
	.word	.L763,.L841
	.byte	5
	.word	.L430,.L840
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_abbrev'
.L549:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_line'
.L550:
	.word	.L1629-.L1628
.L1628:
	.half	3
	.word	.L1631-.L1630
.L1630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1631:
	.byte	5,20,7,0,5,2
	.word	.L430
	.byte	3,185,45,1,5,5,9
	.half	.L1632-.L430
	.byte	1,5,9,7,9
	.half	.L1633-.L1632
	.byte	3,2,1,5,10,9
	.half	.L271-.L1633
	.byte	3,2,1,5,9,7,9
	.half	.L1634-.L271
	.byte	3,2,1,5,36,9
	.half	.L273-.L1634
	.byte	3,6,1,5,1,7,9
	.half	.L552-.L273
	.byte	3,6,0,1,1
.L1629:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_ranges'
.L551:
	.word	-1,.L430,0,.L552-.L430,0,0
	.sdecl	'.debug_info',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_info'
.L553:
	.word	277
	.half	3
	.word	.L554
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L556,.L555
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_EnableReceptionDM',0,1,133,46,22,1,1,1
	.word	.L434,.L842,.L433
	.byte	4
	.byte	'IpduGroupId',0,1,135,46,25
	.word	.L763,.L843
	.byte	5
	.word	.L434,.L842
	.byte	6
	.byte	'RxIpduIdIndex',0,1,139,46,15
	.word	.L766,.L844
	.byte	6
	.byte	'RxIpduId',0,1,140,46,15
	.word	.L766,.L845
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_abbrev'
.L554:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_line'
.L555:
	.word	.L1636-.L1635
.L1635:
	.half	3
	.word	.L1638-.L1637
.L1637:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1638:
	.byte	5,20,7,0,5,2
	.word	.L434
	.byte	3,141,46,1,5,5,9
	.half	.L1639-.L434
	.byte	1,5,9,7,9
	.half	.L1640-.L1639
	.byte	3,2,1,5,10,9
	.half	.L280-.L1640
	.byte	3,2,1,5,9,7,9
	.half	.L1641-.L280
	.byte	3,2,1,5,28,9
	.half	.L282-.L1641
	.byte	3,7,1,5,9,9
	.half	.L1642-.L282
	.byte	1,5,13,7,9
	.half	.L1643-.L1642
	.byte	3,2,1,5,38,9
	.half	.L1644-.L1643
	.byte	1,5,54,9
	.half	.L1645-.L1644
	.byte	1,5,52,9
	.half	.L1646-.L1645
	.byte	1,5,31,9
	.half	.L1647-.L1646
	.byte	3,2,1,5,64,9
	.half	.L1318-.L1647
	.byte	3,14,1,5,59,9
	.half	.L1648-.L1318
	.byte	3,1,1,5,73,9
	.half	.L1649-.L1648
	.byte	3,114,1,5,28,9
	.half	.L286-.L1649
	.byte	3,3,1,5,64,9
	.half	.L1650-.L286
	.byte	1,5,28,9
	.half	.L1320-.L1650
	.byte	3,2,1,5,17,9
	.half	.L1651-.L1320
	.byte	1,5,42,7,9
	.half	.L1652-.L1651
	.byte	3,3,1,5,56,9
	.half	.L1653-.L1652
	.byte	1,5,21,9
	.half	.L1654-.L1653
	.byte	1,5,28,7,9
	.half	.L1655-.L1654
	.byte	3,3,1,5,25,9
	.half	.L1321-.L1655
	.byte	1,5,29,7,9
	.half	.L1656-.L1321
	.byte	3,2,1,5,62,9
	.half	.L1657-.L1656
	.byte	1,5,29,9
	.half	.L1658-.L1657
	.byte	3,1,1,5,57,9
	.half	.L1659-.L1658
	.byte	1,5,34,9
	.half	.L287-.L1659
	.byte	3,115,1,5,37,9
	.half	.L285-.L287
	.byte	3,127,1,5,73,9
	.half	.L1660-.L285
	.byte	1,5,1,7,9
	.half	.L284-.L1660
	.byte	3,28,1,7,9
	.half	.L557-.L284
	.byte	0,1,1
.L1636:
	.sdecl	'.debug_ranges',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_ranges'
.L556:
	.word	-1,.L434,0,.L557-.L434,0,0
	.sdecl	'.debug_info',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_info'
.L558:
	.word	310
	.half	3
	.word	.L559
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L561,.L560
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_DisableReceptionDM',0,1,203,46,22,1,1,1
	.word	.L436,.L846,.L435
	.byte	4
	.byte	'IpduGroupId',0,1,205,46,25
	.word	.L763,.L847
	.byte	5
	.word	.L436,.L846
	.byte	6
	.byte	'RxIpduIdIndex',0,1,209,46,15
	.word	.L766,.L848
	.byte	6
	.byte	'RxIpduId',0,1,210,46,15
	.word	.L766,.L849
	.byte	6
	.byte	'tmpPduDMEnableFlag',0,1,211,46,13
	.word	.L766,.L850
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_abbrev'
.L559:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_line'
.L560:
	.word	.L1662-.L1661
.L1661:
	.half	3
	.word	.L1664-.L1663
.L1663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1664:
	.byte	5,22,7,0,5,2
	.word	.L436
	.byte	3,202,46,1,5,20,9
	.half	.L1323-.L436
	.byte	3,9,1,5,5,9
	.half	.L1665-.L1323
	.byte	1,5,9,7,9
	.half	.L1666-.L1665
	.byte	3,2,1,5,10,9
	.half	.L290-.L1666
	.byte	3,2,1,5,9,7,9
	.half	.L1667-.L290
	.byte	3,2,1,5,28,9
	.half	.L292-.L1667
	.byte	3,7,1,5,9,9
	.half	.L1668-.L292
	.byte	1,5,13,7,9
	.half	.L1669-.L1668
	.byte	3,2,1,5,38,9
	.half	.L1670-.L1669
	.byte	1,5,54,9
	.half	.L1671-.L1670
	.byte	1,5,52,9
	.half	.L1325-.L1671
	.byte	1,5,64,9
	.half	.L1672-.L1325
	.byte	3,16,1,5,59,9
	.half	.L1327-.L1672
	.byte	3,1,1,5,73,9
	.half	.L1673-.L1327
	.byte	3,114,1,5,28,9
	.half	.L296-.L1673
	.byte	3,3,1,5,64,9
	.half	.L1674-.L296
	.byte	1,5,28,9
	.half	.L1328-.L1674
	.byte	3,1,1,5,17,9
	.half	.L1675-.L1328
	.byte	1,5,42,7,9
	.half	.L1676-.L1675
	.byte	3,3,1,5,56,9
	.half	.L1677-.L1676
	.byte	1,5,21,9
	.half	.L1678-.L1677
	.byte	1,5,73,7,9
	.half	.L1679-.L1678
	.byte	3,2,1,5,29,9
	.half	.L1330-.L1679
	.byte	3,2,1,5,28,9
	.half	.L1680-.L1330
	.byte	1,5,95,7,9
	.half	.L1681-.L1680
	.byte	1,5,29,7,9
	.half	.L1682-.L1681
	.byte	3,2,1,5,62,9
	.half	.L1331-.L1682
	.byte	1,5,29,9
	.half	.L1332-.L1331
	.byte	3,1,1,5,57,9
	.half	.L1683-.L1332
	.byte	1,5,34,9
	.half	.L297-.L1683
	.byte	3,115,1,5,37,9
	.half	.L295-.L297
	.byte	3,127,1,5,73,9
	.half	.L1684-.L295
	.byte	1,5,1,7,9
	.half	.L294-.L1684
	.byte	3,26,1,7,9
	.half	.L562-.L294
	.byte	0,1,1
.L1662:
	.sdecl	'.debug_ranges',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_ranges'
.L561:
	.word	-1,.L436,0,.L562-.L436,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_info'
.L563:
	.word	252
	.half	3
	.word	.L564
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L566,.L565
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SendSignalGroup',0,1,247,47,23
	.word	.L766
	.byte	1,1,1
	.word	.L440,.L851,.L439
	.byte	4
	.byte	'SignalGroupId',0,1,249,47,27
	.word	.L763,.L852
	.byte	5
	.word	.L440,.L851
	.byte	6
	.byte	'result',0,1,252,47,11
	.word	.L766,.L853
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_abbrev'
.L564:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_line'
.L565:
	.word	.L1686-.L1685
.L1685:
	.half	3
	.word	.L1688-.L1687
.L1687:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1688:
	.byte	5,20,7,0,5,2
	.word	.L440
	.byte	3,135,48,1,5,5,9
	.half	.L1689-.L440
	.byte	1,5,9,7,9
	.half	.L1690-.L1689
	.byte	3,2,1,5,18,9
	.half	.L302-.L1690
	.byte	3,114,1,5,1,9
	.half	.L1334-.L302
	.byte	3,231,0,1,7,9
	.half	.L567-.L1334
	.byte	0,1,1
.L1686:
	.sdecl	'.debug_ranges',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_ranges'
.L566:
	.word	-1,.L440,0,.L567-.L440,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_info'
.L568:
	.word	258
	.half	3
	.word	.L569
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L571,.L570
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_InvalidateSignalGroup',0,1,248,48,23
	.word	.L766
	.byte	1,1,1
	.word	.L442,.L854,.L441
	.byte	4
	.byte	'SignalGroupId',0,1,250,48,27
	.word	.L763,.L855
	.byte	5
	.word	.L442,.L854
	.byte	6
	.byte	'result',0,1,255,48,11
	.word	.L766,.L856
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_abbrev'
.L569:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_line'
.L570:
	.word	.L1692-.L1691
.L1691:
	.half	3
	.word	.L1694-.L1693
.L1693:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1694:
	.byte	5,20,7,0,5,2
	.word	.L442
	.byte	3,140,49,1,5,5,9
	.half	.L1695-.L442
	.byte	1,5,9,7,9
	.half	.L1696-.L1695
	.byte	3,2,1,5,18,9
	.half	.L304-.L1696
	.byte	3,112,1,5,1,9
	.half	.L1336-.L304
	.byte	3,236,0,1,7,9
	.half	.L572-.L1336
	.byte	0,1,1
.L1692:
	.sdecl	'.debug_ranges',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_ranges'
.L571:
	.word	-1,.L442,0,.L572-.L442,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_info'
.L573:
	.word	347
	.half	3
	.word	.L574
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L576,.L575
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ReceiveSignalGroup',0,1,230,50,23
	.word	.L766
	.byte	1,1,1
	.word	.L444,.L857,.L443
	.byte	4
	.byte	'SignalGroupId',0,1,232,50,27
	.word	.L763,.L858
	.byte	5
	.word	.L444,.L857
	.byte	6
	.byte	'result',0,1,235,50,11
	.word	.L766,.L859
	.byte	6
	.byte	'RxIpduId',0,1,237,50,15
	.word	.L766,.L860
	.byte	6
	.byte	'GrpSigIndex',0,1,238,50,22
	.word	.L763,.L861
	.byte	6
	.byte	'destDataPtr',0,1,239,50,37
	.word	.L791,.L862
	.byte	6
	.byte	'length',0,1,240,50,19
	.word	.L763,.L863
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_abbrev'
.L574:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_line'
.L575:
	.word	.L1698-.L1697
.L1697:
	.half	3
	.word	.L1700-.L1699
.L1699:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1700:
	.byte	5,18,7,0,5,2
	.word	.L444
	.byte	3,234,50,1,5,20,9
	.half	.L1338-.L444
	.byte	3,8,1,5,5,9
	.half	.L1701-.L1338
	.byte	1,5,9,7,9
	.half	.L1702-.L1701
	.byte	3,2,1,5,76,9
	.half	.L1703-.L1702
	.byte	1,5,30,9
	.half	.L306-.L1703
	.byte	3,3,1,5,10,9
	.half	.L1704-.L306
	.byte	1,5,13,7,9
	.half	.L1705-.L1704
	.byte	3,4,1,5,10,9
	.half	.L1706-.L1705
	.byte	1,5,9,7,9
	.half	.L308-.L1706
	.byte	3,2,1,5,75,9
	.half	.L1707-.L308
	.byte	1,5,20,9
	.half	.L309-.L1707
	.byte	3,4,1,5,27,9
	.half	.L1340-.L309
	.byte	3,6,1,5,66,9
	.half	.L1341-.L1340
	.byte	3,13,1,5,84,9
	.half	.L1708-.L1341
	.byte	3,115,1,5,123,9
	.half	.L1709-.L1708
	.byte	1,5,27,9
	.half	.L312-.L1709
	.byte	3,2,1,5,22,9
	.half	.L1343-.L312
	.byte	3,1,1,5,13,9
	.half	.L1345-.L1343
	.byte	3,10,1,5,66,9
	.half	.L1710-.L1345
	.byte	1,5,100,9
	.half	.L1711-.L1710
	.byte	1,5,136,1,9
	.half	.L1344-.L1711
	.byte	3,115,1,5,84,9
	.half	.L311-.L1344
	.byte	1,5,123,9
	.half	.L1712-.L311
	.byte	1,5,30,7,9
	.half	.L1713-.L1712
	.byte	3,22,1,5,44,9
	.half	.L1714-.L1713
	.byte	1,5,9,9
	.half	.L1715-.L1714
	.byte	1,5,20,7,9
	.half	.L1716-.L1715
	.byte	3,2,1,5,5,9
	.half	.L307-.L1716
	.byte	3,5,1,5,1,9
	.half	.L1346-.L307
	.byte	3,2,1,7,9
	.half	.L577-.L1346
	.byte	0,1,1
.L1698:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_ranges'
.L576:
	.word	-1,.L444,0,.L577-.L444,0,0
	.sdecl	'.debug_info',debug,cluster('Com_WriteSignal_Internal')
	.sect	'.debug_info'
.L578:
	.word	345
	.half	3
	.word	.L579
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L581,.L580
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_WriteSignal_Internal',0,1,234,6,23
	.word	.L766
	.byte	1,1,1
	.word	.L334,.L864,.L333
	.byte	4
	.byte	'SignalId',0,1,236,6,22
	.word	.L763,.L865
	.byte	4
	.byte	'SignalDataPtr',0,1,237,6,45
	.word	.L772,.L866
	.byte	4
	.byte	'length',0,1,238,6,19
	.word	.L763,.L867
	.byte	5
	.word	.L334,.L864
	.byte	6
	.byte	'TxIpduId',0,1,243,6,15
	.word	.L766,.L868
	.byte	6
	.byte	'ChangeFlag',0,1,245,6,13
	.word	.L766,.L869
	.byte	6
	.byte	'result',0,1,247,6,11
	.word	.L766,.L870
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_WriteSignal_Internal')
	.sect	'.debug_abbrev'
.L579:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_WriteSignal_Internal')
	.sect	'.debug_line'
.L580:
	.word	.L1718-.L1717
.L1717:
	.half	3
	.word	.L1720-.L1719
.L1719:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1720:
	.byte	5,23,7,0,5,2
	.word	.L334
	.byte	3,233,6,1,5,26,9
	.half	.L1047-.L334
	.byte	3,9,1,5,18,9
	.half	.L1048-.L1047
	.byte	3,4,1,5,37,9
	.half	.L1049-.L1048
	.byte	3,11,1,5,51,9
	.half	.L1721-.L1049
	.byte	1,5,12,9
	.half	.L1722-.L1721
	.byte	1,5,75,7,9
	.half	.L1723-.L1722
	.byte	1,5,72,9
	.half	.L1724-.L1723
	.byte	1,5,20,7,9
	.half	.L1725-.L1724
	.byte	3,2,1,5,30,9
	.half	.L1726-.L1725
	.byte	1,5,13,9
	.half	.L27-.L1726
	.byte	3,16,1,5,66,9
	.half	.L1727-.L27
	.byte	1,5,100,9
	.half	.L1728-.L1727
	.byte	1,5,34,9
	.half	.L1045-.L1728
	.byte	3,25,1,5,48,9
	.half	.L1729-.L1045
	.byte	1,5,13,9
	.half	.L1730-.L1729
	.byte	1,5,40,7,9
	.half	.L1731-.L1730
	.byte	3,3,1,5,89,9
	.half	.L1732-.L1731
	.byte	1,5,24,9
	.half	.L1050-.L1732
	.byte	3,69,1,5,89,9
	.half	.L1052-.L1050
	.byte	3,59,1,5,24,9
	.half	.L1051-.L1052
	.byte	3,2,1,5,5,9
	.half	.L29-.L1051
	.byte	3,31,1,5,1,9
	.half	.L1053-.L29
	.byte	3,2,1,7,9
	.half	.L582-.L1053
	.byte	0,1,1
.L1718:
	.sdecl	'.debug_ranges',debug,cluster('Com_WriteSignal_Internal')
	.sect	'.debug_ranges'
.L581:
	.word	-1,.L334,0,.L582-.L334,0,0
	.sdecl	'.debug_info',debug,cluster('Com_GetTxIpduState')
	.sect	'.debug_info'
.L583:
	.word	243
	.half	3
	.word	.L584
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L586,.L585
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_GetTxIpduState',0,1,136,52,25
	.word	.L766
	.byte	1,1,1
	.word	.L446,.L871,.L445
	.byte	4
	.byte	'TxPduId',0,1,138,52,16
	.word	.L766,.L872
	.byte	5
	.word	.L446,.L871
	.byte	6
	.byte	'flag',0,1,141,52,13
	.word	.L766,.L873
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_GetTxIpduState')
	.sect	'.debug_abbrev'
.L584:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_GetTxIpduState')
	.sect	'.debug_line'
.L585:
	.word	.L1734-.L1733
.L1733:
	.half	3
	.word	.L1736-.L1735
.L1735:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1736:
	.byte	5,18,7,0,5,2
	.word	.L446
	.byte	3,140,52,1,5,20,9
	.half	.L1348-.L446
	.byte	3,3,1,5,5,9
	.half	.L1737-.L1348
	.byte	1,5,9,7,9
	.half	.L1738-.L1737
	.byte	3,2,1,5,72,9
	.half	.L1350-.L1738
	.byte	1,5,24,9
	.half	.L315-.L1350
	.byte	3,2,1,5,10,9
	.half	.L1739-.L315
	.byte	1,5,9,7,9
	.half	.L1740-.L1739
	.byte	3,2,1,5,71,9
	.half	.L1741-.L1740
	.byte	1,5,30,9
	.half	.L317-.L1741
	.byte	3,4,1,5,44,9
	.half	.L1742-.L317
	.byte	1,5,9,9
	.half	.L1743-.L1742
	.byte	1,5,18,7,9
	.half	.L1744-.L1743
	.byte	3,2,1,5,5,9
	.half	.L316-.L1744
	.byte	3,4,1,5,1,9
	.half	.L1352-.L316
	.byte	3,1,1,7,9
	.half	.L587-.L1352
	.byte	0,1,1
.L1734:
	.sdecl	'.debug_ranges',debug,cluster('Com_GetTxIpduState')
	.sect	'.debug_ranges'
.L586:
	.word	-1,.L446,0,.L587-.L446,0,0
	.sdecl	'.debug_info',debug,cluster('Com_GetRxIpduState')
	.sect	'.debug_info'
.L588:
	.word	243
	.half	3
	.word	.L589
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L591,.L590
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_GetRxIpduState',0,1,180,52,25
	.word	.L766
	.byte	1,1,1
	.word	.L448,.L874,.L447
	.byte	4
	.byte	'RxPduId',0,1,182,52,16
	.word	.L766,.L875
	.byte	5
	.word	.L448,.L874
	.byte	6
	.byte	'flag',0,1,185,52,13
	.word	.L766,.L876
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_GetRxIpduState')
	.sect	'.debug_abbrev'
.L589:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_GetRxIpduState')
	.sect	'.debug_line'
.L590:
	.word	.L1746-.L1745
.L1745:
	.half	3
	.word	.L1748-.L1747
.L1747:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1748:
	.byte	5,18,7,0,5,2
	.word	.L448
	.byte	3,184,52,1,5,20,9
	.half	.L1354-.L448
	.byte	3,3,1,5,5,9
	.half	.L1749-.L1354
	.byte	1,5,9,7,9
	.half	.L1750-.L1749
	.byte	3,2,1,5,72,9
	.half	.L1356-.L1750
	.byte	1,5,24,9
	.half	.L321-.L1356
	.byte	3,2,1,5,10,9
	.half	.L1751-.L321
	.byte	1,5,9,7,9
	.half	.L1752-.L1751
	.byte	3,2,1,5,71,9
	.half	.L1753-.L1752
	.byte	1,5,30,9
	.half	.L323-.L1753
	.byte	3,4,1,5,44,9
	.half	.L1754-.L323
	.byte	1,5,9,9
	.half	.L1755-.L1754
	.byte	1,5,18,7,9
	.half	.L1756-.L1755
	.byte	3,2,1,5,5,9
	.half	.L322-.L1756
	.byte	3,4,1,5,1,9
	.half	.L1358-.L322
	.byte	3,1,1,7,9
	.half	.L592-.L1358
	.byte	0,1,1
.L1746:
	.sdecl	'.debug_ranges',debug,cluster('Com_GetRxIpduState')
	.sect	'.debug_ranges'
.L591:
	.word	-1,.L448,0,.L592-.L448,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TriggerTransmit')
	.sect	'.debug_info'
.L593:
	.word	290
	.half	3
	.word	.L594
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L596,.L595
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TriggerTransmit',0,1,252,37,31
	.word	.L766
	.byte	1,1,1
	.word	.L406,.L877,.L405
	.byte	4
	.byte	'TxPduId',0,1,254,37,15
	.word	.L766,.L878
	.byte	4
	.byte	'PduInfoPtr',0,1,255,37,50
	.word	.L879,.L880
	.byte	5
	.word	.L406,.L877
	.byte	6
	.byte	'result',0,1,131,38,20
	.word	.L766,.L881
	.byte	6
	.byte	'length',0,1,133,38,19
	.word	.L763,.L882
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TriggerTransmit')
	.sect	'.debug_abbrev'
.L594:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TriggerTransmit')
	.sect	'.debug_line'
.L595:
	.word	.L1758-.L1757
.L1757:
	.half	3
	.word	.L1760-.L1759
.L1759:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1760:
	.byte	5,31,7,0,5,2
	.word	.L406
	.byte	3,251,37,1,5,27,9
	.half	.L1232-.L406
	.byte	3,7,1,5,20,9
	.half	.L1233-.L1232
	.byte	3,5,1,5,5,9
	.half	.L1761-.L1233
	.byte	1,5,9,7,9
	.half	.L1762-.L1761
	.byte	3,2,1,5,73,9
	.half	.L1230-.L1762
	.byte	1,5,24,9
	.half	.L201-.L1230
	.byte	3,3,1,5,10,9
	.half	.L1763-.L201
	.byte	1,5,13,7,9
	.half	.L1764-.L1763
	.byte	3,4,1,5,10,9
	.half	.L1765-.L1764
	.byte	1,5,36,7,9
	.half	.L1766-.L1765
	.byte	3,4,1,5,10,9
	.half	.L1234-.L1766
	.byte	1,5,9,7,9
	.half	.L204-.L1234
	.byte	3,2,1,5,80,9
	.half	.L1767-.L204
	.byte	1,5,18,9
	.half	.L205-.L1767
	.byte	3,5,1,5,22,9
	.half	.L1237-.L205
	.byte	3,8,1,5,9,9
	.half	.L1768-.L1237
	.byte	1,5,13,7,9
	.half	.L203-.L1768
	.byte	3,2,1,5,76,9
	.half	.L1769-.L203
	.byte	1,5,34,9
	.half	.L207-.L1769
	.byte	3,4,1,5,48,9
	.half	.L1770-.L207
	.byte	1,5,13,9
	.half	.L1771-.L1770
	.byte	1,5,61,7,9
	.half	.L1772-.L1771
	.byte	3,5,1,5,94,9
	.half	.L1773-.L1772
	.byte	1,5,39,9
	.half	.L1239-.L1773
	.byte	3,1,1,5,24,9
	.half	.L1774-.L1239
	.byte	3,20,1,5,5,9
	.half	.L202-.L1774
	.byte	3,6,1,5,1,9
	.half	.L1240-.L202
	.byte	3,1,1,7,9
	.half	.L597-.L1240
	.byte	0,1,1
.L1758:
	.sdecl	'.debug_ranges',debug,cluster('Com_TriggerTransmit')
	.sect	'.debug_ranges'
.L596:
	.word	-1,.L406,0,.L597-.L406,0,0
	.sdecl	'.debug_info',debug,cluster('Com_RxIndication')
	.sect	'.debug_info'
.L598:
	.word	300
	.half	3
	.word	.L599
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L601,.L600
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_RxIndication',0,1,213,33,22,1,1,1
	.word	.L394,.L883,.L393
	.byte	4
	.byte	'RxPduId',0,1,215,33,15
	.word	.L766,.L884
	.byte	4
	.byte	'PduInfoPtr',0,1,216,33,52
	.word	.L885,.L886
	.byte	5
	.word	.L394,.L883
	.byte	6
	.byte	'Com_RxCalResult',0,1,221,33,13
	.word	.L766,.L887
	.byte	6
	.byte	'tempPduInfoPtr',0,1,225,33,50
	.word	.L879,.L888
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_RxIndication')
	.sect	'.debug_abbrev'
.L599:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_RxIndication')
	.sect	'.debug_line'
.L600:
	.word	.L1776-.L1775
.L1775:
	.half	3
	.word	.L1778-.L1777
.L1777:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1778:
	.byte	5,22,7,0,5,2
	.word	.L394
	.byte	3,212,33,1,5,29,9
	.half	.L1194-.L394
	.byte	3,8,1,5,20,9
	.half	.L1195-.L1194
	.byte	3,7,1,5,5,9
	.half	.L1779-.L1195
	.byte	1,5,9,7,9
	.half	.L1780-.L1779
	.byte	3,2,1,5,24,9
	.half	.L150-.L1780
	.byte	3,2,1,5,10,9
	.half	.L1781-.L150
	.byte	1,7,9
	.half	.L1782-.L1781
	.byte	3,4,1,5,23,7,9
	.half	.L1783-.L1782
	.byte	3,4,1,5,10,9
	.half	.L1784-.L1783
	.byte	1,5,9,7,9
	.half	.L153-.L1784
	.byte	3,2,1,5,21,9
	.half	.L154-.L153
	.byte	3,3,1,5,10,9
	.half	.L1785-.L154
	.byte	1,5,59,7,9
	.half	.L1786-.L1785
	.byte	3,4,1,5,10,9
	.half	.L1191-.L1786
	.byte	1,5,9,7,9
	.half	.L152-.L1191
	.byte	3,2,1,5,36,9
	.half	.L157-.L152
	.byte	3,5,1,5,50,9
	.half	.L1787-.L157
	.byte	1,5,9,9
	.half	.L1788-.L1787
	.byte	1,5,16,7,9
	.half	.L1789-.L1788
	.byte	3,4,1,5,7,9
	.half	.L1790-.L1789
	.byte	1,5,61,7,9
	.half	.L1791-.L1790
	.byte	1,5,58,9
	.half	.L1792-.L1791
	.byte	1,5,5,7,9
	.half	.L1793-.L1792
	.byte	3,2,1,5,34,9
	.half	.L1794-.L1793
	.byte	1,5,32,9
	.half	.L1795-.L1794
	.byte	1,5,16,9
	.half	.L160-.L1795
	.byte	3,4,1,5,28,9
	.half	.L1796-.L160
	.byte	1,5,13,9
	.half	.L1797-.L1796
	.byte	1,5,35,7,9
	.half	.L1798-.L1797
	.byte	3,2,1,5,75,9
	.half	.L1799-.L1798
	.byte	1,5,33,9
	.half	.L1196-.L1799
	.byte	1,5,13,9
	.half	.L162-.L1196
	.byte	3,2,1,5,43,7,9
	.half	.L1800-.L162
	.byte	3,2,1,5,65,9
	.half	.L1801-.L1800
	.byte	1,5,17,9
	.half	.L163-.L1801
	.byte	3,14,1,5,31,9
	.half	.L1802-.L163
	.byte	1,5,43,9
	.half	.L1803-.L1802
	.byte	1,5,41,9
	.half	.L1804-.L1803
	.byte	1,5,17,9
	.half	.L1805-.L1804
	.byte	3,10,1,5,61,9
	.half	.L1806-.L1805
	.byte	1,5,49,9
	.half	.L1807-.L1806
	.byte	1,5,41,9
	.half	.L1808-.L1807
	.byte	3,14,1,5,84,9
	.half	.L1809-.L1808
	.byte	1,5,116,9
	.half	.L1810-.L1809
	.byte	1,5,98,9
	.half	.L1811-.L1810
	.byte	1,5,32,9
	.half	.L1812-.L1811
	.byte	3,11,1,5,21,9
	.half	.L1813-.L1812
	.byte	1,5,52,7,9
	.half	.L1814-.L1813
	.byte	3,2,1,5,7,9
	.half	.L164-.L1814
	.byte	3,1,1,5,21,9
	.half	.L1815-.L164
	.byte	1,5,31,9
	.half	.L1816-.L1815
	.byte	1,5,1,9
	.half	.L159-.L1816
	.byte	3,9,1,7,9
	.half	.L602-.L159
	.byte	0,1,1
.L1776:
	.sdecl	'.debug_ranges',debug,cluster('Com_RxIndication')
	.sect	'.debug_ranges'
.L601:
	.word	-1,.L394,0,.L602-.L394,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_info'
.L603:
	.word	220
	.half	3
	.word	.L604
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L606,.L605
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TxConfirmation',0,1,146,32,22,1,1,1
	.word	.L390,.L889,.L389
	.byte	4
	.byte	'TxPduId',0,1,148,32,15
	.word	.L766,.L890
	.byte	5
	.word	.L390,.L889
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_abbrev'
.L604:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_line'
.L605:
	.word	.L1818-.L1817
.L1817:
	.half	3
	.word	.L1820-.L1819
.L1819:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1820:
	.byte	5,22,7,0,5,2
	.word	.L390
	.byte	3,145,32,1,5,20,9
	.half	.L1183-.L390
	.byte	3,6,1,5,5,9
	.half	.L1821-.L1183
	.byte	1,5,9,7,9
	.half	.L1822-.L1821
	.byte	3,2,1,5,24,9
	.half	.L124-.L1822
	.byte	3,3,1,5,10,9
	.half	.L1823-.L124
	.byte	1,5,21,7,9
	.half	.L1824-.L1823
	.byte	3,4,1,5,10,9
	.half	.L1825-.L1824
	.byte	1,5,9,7,9
	.half	.L126-.L1825
	.byte	3,2,1,5,37,9
	.half	.L127-.L126
	.byte	3,8,1,5,51,9
	.half	.L1826-.L127
	.byte	1,5,12,9
	.half	.L1827-.L1826
	.byte	1,5,66,7,9
	.half	.L1828-.L1827
	.byte	1,5,92,9
	.half	.L1829-.L1828
	.byte	1,5,24,7,9
	.half	.L129-.L1829
	.byte	3,4,1,5,13,9
	.half	.L1830-.L129
	.byte	1,5,44,7,9
	.half	.L1831-.L1830
	.byte	3,3,1,5,65,9
	.half	.L1185-.L1831
	.byte	1,5,17,9
	.half	.L131-.L1185
	.byte	3,5,1,5,31,9
	.half	.L1832-.L131
	.byte	1,5,43,9
	.half	.L1833-.L1832
	.byte	1,5,41,9
	.half	.L1834-.L1833
	.byte	1,5,17,9
	.half	.L132-.L1834
	.byte	3,11,1,5,16,9
	.half	.L1835-.L132
	.byte	1,5,25,7,9
	.half	.L1836-.L1835
	.byte	3,1,1,5,64,9
	.half	.L1837-.L1836
	.byte	1,5,25,7,9
	.half	.L1838-.L1837
	.byte	3,1,1,5,60,9
	.half	.L1839-.L1838
	.byte	1,5,25,7,9
	.half	.L1840-.L1839
	.byte	3,1,1,5,63,9
	.half	.L1841-.L1840
	.byte	1,5,60,9
	.half	.L1842-.L1841
	.byte	1,5,17,7,9
	.half	.L1843-.L1842
	.byte	3,3,1,5,54,9
	.half	.L1844-.L1843
	.byte	1,5,52,9
	.half	.L1845-.L1844
	.byte	1,5,1,9
	.half	.L130-.L1845
	.byte	3,8,1,7,9
	.half	.L607-.L130
	.byte	0,1,1
.L1818:
	.sdecl	'.debug_ranges',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_ranges'
.L606:
	.word	-1,.L390,0,.L607-.L390,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TpTxConfirmation')
	.sect	'.debug_info'
.L608:
	.word	242
	.half	3
	.word	.L609
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L611,.L610
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TpTxConfirmation',0,1,222,38,22,1,1,1
	.word	.L408,.L891,.L407
	.byte	4
	.byte	'TxPduId',0,1,224,38,15
	.word	.L766,.L892
	.byte	4
	.byte	'Result',0,1,225,38,20
	.word	.L766,.L893
	.byte	5
	.word	.L408,.L891
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TpTxConfirmation')
	.sect	'.debug_abbrev'
.L609:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TpTxConfirmation')
	.sect	'.debug_line'
.L610:
	.word	.L1847-.L1846
.L1846:
	.half	3
	.word	.L1849-.L1848
.L1848:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1849:
	.byte	5,20,7,0,5,2
	.word	.L408
	.byte	3,231,38,1,5,5,9
	.half	.L1850-.L408
	.byte	1,5,9,7,9
	.half	.L1851-.L1850
	.byte	3,2,1,5,74,9
	.half	.L1852-.L1851
	.byte	1,5,9,9
	.half	.L211-.L1852
	.byte	3,192,0,1,5,1,9
	.half	.L612-.L211
	.byte	3,4,0,1,1
.L1847:
	.sdecl	'.debug_ranges',debug,cluster('Com_TpTxConfirmation')
	.sect	'.debug_ranges'
.L611:
	.word	-1,.L408,0,.L612-.L408,0,0
	.sdecl	'.debug_info',debug,cluster('Com_CopyTxData')
	.sect	'.debug_info'
.L613:
	.word	315
	.half	3
	.word	.L614
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L616,.L615
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_CopyTxData',0,1,195,39,35
	.word	.L894
	.byte	1,1,1
	.word	.L410,.L895,.L409
	.byte	4
	.byte	'PduId',0,1,197,39,15
	.word	.L766,.L896
	.byte	4
	.byte	'PduInfoPtr',0,1,198,39,52
	.word	.L885,.L897
	.byte	4
	.byte	'RetryInfoPtr',0,1,199,39,52
	.word	.L898,.L899
	.byte	4
	.byte	'TxDataCntPtr',0,1,200,39,52
	.word	.L900,.L901
	.byte	5
	.word	.L410,.L895
	.byte	6
	.byte	'result',0,1,204,39,23
	.word	.L894,.L902
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_CopyTxData')
	.sect	'.debug_abbrev'
.L614:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_CopyTxData')
	.sect	'.debug_line'
.L615:
	.word	.L1854-.L1853
.L1853:
	.half	3
	.word	.L1856-.L1855
.L1855:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1856:
	.byte	5,20,7,0,5,2
	.word	.L410
	.byte	3,208,39,1,5,5,9
	.half	.L1857-.L410
	.byte	1,5,9,7,9
	.half	.L1858-.L1857
	.byte	3,2,1,5,68,9
	.half	.L1859-.L1858
	.byte	1,5,9,9
	.half	.L213-.L1859
	.byte	3,192,0,1,5,30,9
	.half	.L1244-.L213
	.byte	3,185,127,1,5,1,9
	.half	.L1245-.L1244
	.byte	3,205,0,1,7,9
	.half	.L617-.L1245
	.byte	0,1,1
.L1854:
	.sdecl	'.debug_ranges',debug,cluster('Com_CopyTxData')
	.sect	'.debug_ranges'
.L616:
	.word	-1,.L410,0,.L617-.L410,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TpRxIndication')
	.sect	'.debug_info'
.L618:
	.word	238
	.half	3
	.word	.L619
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L621,.L620
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TpRxIndication',0,1,221,41,22,1,1,1
	.word	.L416,.L903,.L415
	.byte	4
	.byte	'PduId',0,1,223,41,15
	.word	.L766,.L904
	.byte	4
	.byte	'Result',0,1,224,41,20
	.word	.L766,.L905
	.byte	5
	.word	.L416,.L903
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TpRxIndication')
	.sect	'.debug_abbrev'
.L619:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TpRxIndication')
	.sect	'.debug_line'
.L620:
	.word	.L1861-.L1860
.L1860:
	.half	3
	.word	.L1863-.L1862
.L1862:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1863:
	.byte	5,20,7,0,5,2
	.word	.L416
	.byte	3,231,41,1,5,5,9
	.half	.L1864-.L416
	.byte	1,5,9,7,9
	.half	.L1865-.L1864
	.byte	3,2,1,5,72,9
	.half	.L1866-.L1865
	.byte	1,5,9,9
	.half	.L222-.L1866
	.byte	3,203,0,1,5,1,9
	.half	.L622-.L222
	.byte	3,4,0,1,1
.L1861:
	.sdecl	'.debug_ranges',debug,cluster('Com_TpRxIndication')
	.sect	'.debug_ranges'
.L621:
	.word	-1,.L416,0,.L622-.L416,0,0
	.sdecl	'.debug_info',debug,cluster('Com_StartOfReception')
	.sect	'.debug_info'
.L623:
	.word	332
	.half	3
	.word	.L624
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L626,.L625
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_StartOfReception',0,1,170,40,35
	.word	.L894
	.byte	1,1,1
	.word	.L412,.L906,.L411
	.byte	4
	.byte	'ComRxPduId',0,1,172,40,15
	.word	.L766,.L907
	.byte	4
	.byte	'PduInfoPointer',0,1,173,40,52
	.word	.L885,.L908
	.byte	4
	.byte	'TpSduLength',0,1,174,40,19
	.word	.L763,.L909
	.byte	4
	.byte	'RxBufferSizePtr',0,1,175,40,52
	.word	.L900,.L910
	.byte	5
	.word	.L412,.L906
	.byte	6
	.byte	'result',0,1,179,40,23
	.word	.L894,.L911
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_StartOfReception')
	.sect	'.debug_abbrev'
.L624:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_StartOfReception')
	.sect	'.debug_line'
.L625:
	.word	.L1868-.L1867
.L1867:
	.half	3
	.word	.L1870-.L1869
.L1869:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1870:
	.byte	5,20,7,0,5,2
	.word	.L412
	.byte	3,180,40,1,5,5,9
	.half	.L1871-.L412
	.byte	1,5,9,7,9
	.half	.L1872-.L1871
	.byte	3,2,1,5,74,9
	.half	.L1873-.L1872
	.byte	1,5,9,9
	.half	.L216-.L1873
	.byte	3,49,1,5,30,9
	.half	.L1247-.L216
	.byte	3,75,1,5,1,9
	.half	.L1249-.L1247
	.byte	3,59,1,7,9
	.half	.L627-.L1249
	.byte	0,1,1
.L1868:
	.sdecl	'.debug_ranges',debug,cluster('Com_StartOfReception')
	.sect	'.debug_ranges'
.L626:
	.word	-1,.L412,0,.L627-.L412,0,0
	.sdecl	'.debug_info',debug,cluster('Com_CopyRxData')
	.sect	'.debug_info'
.L628:
	.word	296
	.half	3
	.word	.L629
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L631,.L630
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_CopyRxData',0,1,130,41,35
	.word	.L894
	.byte	1,1,1
	.word	.L414,.L912,.L413
	.byte	4
	.byte	'PduId',0,1,132,41,15
	.word	.L766,.L913
	.byte	4
	.byte	'PduInfoPointer',0,1,133,41,52
	.word	.L885,.L914
	.byte	4
	.byte	'RxBufferSizePtr',0,1,134,41,52
	.word	.L900,.L915
	.byte	5
	.word	.L414,.L912
	.byte	6
	.byte	'result',0,1,138,41,23
	.word	.L894,.L916
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_CopyRxData')
	.sect	'.debug_abbrev'
.L629:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_CopyRxData')
	.sect	'.debug_line'
.L630:
	.word	.L1875-.L1874
.L1874:
	.half	3
	.word	.L1877-.L1876
.L1876:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1877:
	.byte	5,20,7,0,5,2
	.word	.L414
	.byte	3,142,41,1,5,5,9
	.half	.L1878-.L414
	.byte	1,5,9,7,9
	.half	.L1879-.L1878
	.byte	3,2,1,5,68,9
	.half	.L1880-.L1879
	.byte	1,5,9,9
	.half	.L219-.L1880
	.byte	3,51,1,5,30,9
	.half	.L1251-.L219
	.byte	3,70,1,5,1,9
	.half	.L1252-.L1251
	.byte	3,192,0,1,7,9
	.half	.L632-.L1252
	.byte	0,1,1
.L1875:
	.sdecl	'.debug_ranges',debug,cluster('Com_CopyRxData')
	.sect	'.debug_ranges'
.L631:
	.word	-1,.L414,0,.L632-.L414,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InitTxPdu')
	.sect	'.debug_info'
.L633:
	.word	240
	.half	3
	.word	.L634
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L636,.L635
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_InitTxPdu',0,1,138,9,29,1,1
	.word	.L338,.L917,.L337
	.byte	4
	.byte	'TxIpduId',0,1,140,9,15
	.word	.L766,.L918
	.byte	4
	.byte	'isStartFlag',0,1,141,9,15
	.word	.L766,.L919
	.byte	5
	.word	.L338,.L917
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InitTxPdu')
	.sect	'.debug_abbrev'
.L634:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InitTxPdu')
	.sect	'.debug_line'
.L635:
	.word	.L1882-.L1881
.L1881:
	.half	3
	.word	.L1884-.L1883
.L1883:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1884:
	.byte	5,29,7,0,5,2
	.word	.L338
	.byte	3,137,9,1,5,5,9
	.half	.L1062-.L338
	.byte	3,12,1,5,38,9
	.half	.L1064-.L1062
	.byte	1,5,36,9
	.half	.L1885-.L1064
	.byte	1,5,5,9
	.half	.L1886-.L1885
	.byte	3,4,1,5,34,9
	.half	.L1887-.L1886
	.byte	1,5,32,9
	.half	.L1888-.L1887
	.byte	1,5,5,9
	.half	.L1889-.L1888
	.byte	3,1,1,5,41,9
	.half	.L1890-.L1889
	.byte	1,5,71,9
	.half	.L1891-.L1890
	.byte	1,5,39,9
	.half	.L1892-.L1891
	.byte	1,5,5,9
	.half	.L1893-.L1892
	.byte	3,3,1,5,41,9
	.half	.L1894-.L1893
	.byte	1,5,5,9
	.half	.L1895-.L1894
	.byte	3,1,1,5,50,9
	.half	.L1896-.L1895
	.byte	1,5,48,9
	.half	.L1897-.L1896
	.byte	1,5,5,9
	.half	.L1898-.L1897
	.byte	3,10,1,5,23,9
	.half	.L1066-.L1898
	.byte	1,5,34,9
	.half	.L1067-.L1066
	.byte	1,5,24,9
	.half	.L1899-.L1067
	.byte	3,18,1,5,5,9
	.half	.L1061-.L1899
	.byte	3,4,1,5,27,9
	.half	.L1068-.L1061
	.byte	1,5,38,9
	.half	.L1069-.L1068
	.byte	1,5,9,9
	.half	.L1900-.L1069
	.byte	3,5,1,5,23,9
	.half	.L1070-.L1900
	.byte	1,5,17,9
	.half	.L1071-.L1070
	.byte	3,126,1,5,34,9
	.half	.L1072-.L1071
	.byte	3,2,1,5,1,9
	.half	.L1901-.L1072
	.byte	3,9,1,7,9
	.half	.L637-.L1901
	.byte	0,1,1
.L1882:
	.sdecl	'.debug_ranges',debug,cluster('Com_InitTxPdu')
	.sect	'.debug_ranges'
.L636:
	.word	-1,.L338,0,.L637-.L338,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InitTxPduValue')
	.sect	'.debug_info'
.L638:
	.word	286
	.half	3
	.word	.L639
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L641,.L640
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_InitTxPduValue',0,1,198,8,29,1,1
	.word	.L336,.L920,.L335
	.byte	4
	.byte	'TxIpduId',0,1,200,8,15
	.word	.L766,.L921
	.byte	5
	.word	.L336,.L920
	.byte	6
	.byte	'IndexData',0,1,203,8,19
	.word	.L763,.L922
	.byte	6
	.byte	'SigIndex',0,1,204,8,22
	.word	.L763,.L923
	.byte	6
	.byte	'sigLen',0,1,205,8,19
	.word	.L763,.L924
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InitTxPduValue')
	.sect	'.debug_abbrev'
.L639:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InitTxPduValue')
	.sect	'.debug_line'
.L640:
	.word	.L1903-.L1902
.L1902:
	.half	3
	.word	.L1905-.L1904
.L1904:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1905:
	.byte	5,29,7,0,5,2
	.word	.L336
	.byte	3,197,8,1,5,19,9
	.half	.L1054-.L336
	.byte	3,10,1,5,81,9
	.half	.L1055-.L1054
	.byte	1,5,19,9
	.half	.L33-.L1055
	.byte	3,2,1,5,52,9
	.half	.L1906-.L33
	.byte	1,5,66,9
	.half	.L1907-.L1906
	.byte	1,5,64,9
	.half	.L1908-.L1907
	.byte	1,5,92,9
	.half	.L1909-.L1908
	.byte	3,126,1,5,51,9
	.half	.L32-.L1909
	.byte	1,5,81,9
	.half	.L1910-.L32
	.byte	1,5,20,7,9
	.half	.L1911-.L1910
	.byte	3,5,1,5,107,9
	.half	.L1057-.L1911
	.byte	1,5,18,9
	.half	.L35-.L1057
	.byte	3,3,1,5,9,9
	.half	.L1059-.L35
	.byte	3,11,1,5,47,9
	.half	.L1912-.L1059
	.byte	1,5,87,9
	.half	.L1913-.L1912
	.byte	1,5,122,9
	.half	.L1914-.L1913
	.byte	1,5,117,9
	.half	.L1060-.L1914
	.byte	3,114,1,5,71,9
	.half	.L34-.L1060
	.byte	1,5,107,9
	.half	.L1915-.L34
	.byte	1,5,1,7,9
	.half	.L1916-.L1915
	.byte	3,35,1,7,9
	.half	.L642-.L1916
	.byte	0,1,1
.L1903:
	.sdecl	'.debug_ranges',debug,cluster('Com_InitTxPduValue')
	.sect	'.debug_ranges'
.L641:
	.word	-1,.L336,0,.L642-.L336,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SwitchTxPduMode')
	.sect	'.debug_info'
.L643:
	.word	268
	.half	3
	.word	.L644
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L646,.L645
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SwitchTxPduMode',0,1,223,9,29,1,1
	.word	.L340,.L925,.L339
	.byte	4
	.byte	'TxIpduId',0,1,225,9,15
	.word	.L766,.L926
	.byte	4
	.byte	'isStartFlag',0,1,226,9,15
	.word	.L766,.L927
	.byte	4
	.byte	'InitFlag',0,1,227,9,15
	.word	.L766,.L928
	.byte	5
	.word	.L340,.L925
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SwitchTxPduMode')
	.sect	'.debug_abbrev'
.L644:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SwitchTxPduMode')
	.sect	'.debug_line'
.L645:
	.word	.L1918-.L1917
.L1917:
	.half	3
	.word	.L1920-.L1919
.L1919:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1920:
	.byte	5,29,7,0,5,2
	.word	.L340
	.byte	3,222,9,1,5,5,9
	.half	.L1921-.L340
	.byte	3,13,1,5,23,9
	.half	.L1073-.L1921
	.byte	1,5,36,9
	.half	.L1074-.L1073
	.byte	1,5,34,9
	.half	.L1922-.L1074
	.byte	1,5,5,9
	.half	.L1075-.L1922
	.byte	3,13,1,5,34,9
	.half	.L1923-.L1075
	.byte	1,5,32,9
	.half	.L1924-.L1923
	.byte	1,5,5,9
	.half	.L1925-.L1924
	.byte	3,2,1,5,41,9
	.half	.L1926-.L1925
	.byte	1,5,71,9
	.half	.L1927-.L1926
	.byte	1,5,39,9
	.half	.L1928-.L1927
	.byte	1,5,5,9
	.half	.L1929-.L1928
	.byte	3,3,1,5,41,9
	.half	.L1930-.L1929
	.byte	1,5,5,9
	.half	.L1931-.L1930
	.byte	3,1,1,5,48,9
	.half	.L1932-.L1931
	.byte	1,5,5,9
	.half	.L1933-.L1932
	.byte	3,17,1,5,27,9
	.half	.L1077-.L1933
	.byte	1,5,38,9
	.half	.L1078-.L1077
	.byte	1,5,8,9
	.half	.L1079-.L1078
	.byte	3,12,1,5,39,7,9
	.half	.L1080-.L1079
	.byte	1,5,9,7,9
	.half	.L1934-.L1080
	.byte	3,8,1,5,42,9
	.half	.L1081-.L1934
	.byte	1,5,40,9
	.half	.L1935-.L1081
	.byte	1,5,28,9
	.half	.L1936-.L1935
	.byte	3,3,1,5,9,9
	.half	.L36-.L1936
	.byte	3,6,1,5,23,9
	.half	.L1083-.L36
	.byte	1,5,17,9
	.half	.L1084-.L1083
	.byte	3,126,1,5,34,9
	.half	.L1085-.L1084
	.byte	3,2,1,5,1,9
	.half	.L1937-.L1085
	.byte	3,7,1,7,9
	.half	.L647-.L1937
	.byte	0,1,1
.L1918:
	.sdecl	'.debug_ranges',debug,cluster('Com_SwitchTxPduMode')
	.sect	'.debug_ranges'
.L646:
	.word	-1,.L340,0,.L647-.L340,0,0
	.sdecl	'.debug_info',debug,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.debug_info'
.L648:
	.word	243
	.half	3
	.word	.L649
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L651,.L650
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_CbkTxErrAck_PDU',0,1,195,10,29,1,1
	.word	.L342,.L929,.L341
	.byte	4
	.byte	'TxIpduId',0,1,197,10,15
	.word	.L766,.L930
	.byte	5
	.word	.L342,.L929
	.byte	6
	.byte	'TxSigId',0,1,201,10,22
	.word	.L763,.L931
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.debug_abbrev'
.L649:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.debug_line'
.L650:
	.word	.L1939-.L1938
.L1938:
	.half	3
	.word	.L1941-.L1940
.L1940:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1941:
	.byte	5,19,7,0,5,2
	.word	.L342
	.byte	3,206,10,1,5,12,9
	.half	.L1086-.L342
	.byte	3,4,1,5,24,9
	.half	.L1942-.L1086
	.byte	3,125,1,5,60,9
	.half	.L1943-.L1942
	.byte	1,5,24,9
	.half	.L39-.L1943
	.byte	3,3,1,5,9,9
	.half	.L1944-.L39
	.byte	1,5,13,7,9
	.half	.L1945-.L1944
	.byte	3,2,1,5,45,9
	.half	.L1946-.L1945
	.byte	1,5,20,9
	.half	.L40-.L1946
	.byte	3,124,1,5,24,9
	.half	.L38-.L40
	.byte	3,127,1,5,60,9
	.half	.L1947-.L38
	.byte	1,5,1,7,9
	.half	.L1948-.L1947
	.byte	3,18,1,7,9
	.half	.L652-.L1948
	.byte	0,1,1
.L1939:
	.sdecl	'.debug_ranges',debug,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.debug_ranges'
.L651:
	.word	-1,.L342,0,.L652-.L342,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TxInit')
	.sect	'.debug_info'
.L653:
	.word	214
	.half	3
	.word	.L654
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L656,.L655
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TxInit',0,1,249,10,29,1,1
	.word	.L344,.L932,.L343
	.byte	4
	.word	.L344,.L932
	.byte	5
	.byte	'IpduIndex',0,1,255,10,15
	.word	.L766,.L933
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TxInit')
	.sect	'.debug_abbrev'
.L654:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TxInit')
	.sect	'.debug_line'
.L655:
	.word	.L1950-.L1949
.L1949:
	.half	3
	.word	.L1952-.L1951
.L1951:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1952:
	.byte	5,19,7,0,5,2
	.word	.L344
	.byte	3,128,11,1,5,47,9
	.half	.L1088-.L344
	.byte	1,5,60,9
	.half	.L1953-.L1088
	.byte	1,5,20,9
	.half	.L42-.L1953
	.byte	3,3,1,5,9,9
	.half	.L1954-.L42
	.byte	1,5,38,7,9
	.half	.L1955-.L1954
	.byte	3,2,1,5,44,9
	.half	.L1956-.L1955
	.byte	1,5,38,9
	.half	.L43-.L1956
	.byte	3,5,1,5,71,9
	.half	.L1090-.L43
	.byte	3,118,1,5,60,9
	.half	.L41-.L1090
	.byte	1,5,1,7,9
	.half	.L1957-.L41
	.byte	3,13,1,7,9
	.half	.L657-.L1957
	.byte	0,1,1
.L1950:
	.sdecl	'.debug_ranges',debug,cluster('Com_TxInit')
	.sect	'.debug_ranges'
.L656:
	.word	-1,.L344,0,.L657-.L344,0,0
	.sdecl	'.debug_info',debug,cluster('Com_HandleDirect')
	.sect	'.debug_info'
.L658:
	.word	243
	.half	3
	.word	.L659
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L661,.L660
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_HandleDirect',0,1,187,12,30
	.word	.L766
	.byte	1,1
	.word	.L346,.L934,.L345
	.byte	4
	.byte	'TxIpduId',0,1,189,12,15
	.word	.L766,.L935
	.byte	5
	.word	.L346,.L934
	.byte	6
	.byte	'result',0,1,192,12,11
	.word	.L766,.L936
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_HandleDirect')
	.sect	'.debug_abbrev'
.L659:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_HandleDirect')
	.sect	'.debug_line'
.L660:
	.word	.L1959-.L1958
.L1958:
	.half	3
	.word	.L1961-.L1960
.L1960:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1961:
	.byte	5,18,7,0,5,2
	.word	.L346
	.byte	3,191,12,1,5,23,9
	.half	.L1091-.L346
	.byte	3,2,1,5,41,9
	.half	.L1962-.L1091
	.byte	1,5,5,9
	.half	.L1963-.L1962
	.byte	1,5,16,7,9
	.half	.L1964-.L1963
	.byte	3,2,1,5,5,9
	.half	.L45-.L1964
	.byte	3,202,0,1,5,23,9
	.half	.L1965-.L45
	.byte	1,5,36,9
	.half	.L1966-.L1965
	.byte	1,5,34,9
	.half	.L1967-.L1966
	.byte	1,5,1,9
	.half	.L1968-.L1967
	.byte	3,4,1,7,9
	.half	.L662-.L1968
	.byte	0,1,1
.L1959:
	.sdecl	'.debug_ranges',debug,cluster('Com_HandleDirect')
	.sect	'.debug_ranges'
.L661:
	.word	-1,.L346,0,.L662-.L346,0,0
	.sdecl	'.debug_info',debug,cluster('Com_HandlePeriod')
	.sect	'.debug_info'
.L663:
	.word	245
	.half	3
	.word	.L664
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L666,.L665
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_HandlePeriod',0,1,163,13,32
	.word	.L766
	.byte	1,1
	.word	.L348,.L937,.L347
	.byte	4
	.byte	'TxIpduId',0,1,165,13,15
	.word	.L766,.L938
	.byte	5
	.word	.L348,.L937
	.byte	6
	.byte	'sendFlag',0,1,168,13,13
	.word	.L766,.L939
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_HandlePeriod')
	.sect	'.debug_abbrev'
.L664:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_HandlePeriod')
	.sect	'.debug_line'
.L665:
	.word	.L1970-.L1969
.L1969:
	.half	3
	.word	.L1972-.L1971
.L1971:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1972:
	.byte	5,22,7,0,5,2
	.word	.L348
	.byte	3,167,13,1,5,21,9
	.half	.L1092-.L348
	.byte	3,2,1,5,5,9
	.half	.L1973-.L1092
	.byte	1,5,34,7,9
	.half	.L1974-.L1973
	.byte	3,2,1,5,12,9
	.half	.L1975-.L1974
	.byte	1,5,9,9
	.half	.L1976-.L1975
	.byte	1,5,13,7,9
	.half	.L1977-.L1976
	.byte	3,3,1,5,40,9
	.half	.L1978-.L1977
	.byte	1,5,12,9
	.half	.L48-.L1978
	.byte	3,3,1,5,9,9
	.half	.L1979-.L48
	.byte	1,5,13,7,9
	.half	.L1980-.L1979
	.byte	3,2,1,5,39,9
	.half	.L1981-.L1980
	.byte	1,5,25,9
	.half	.L49-.L1981
	.byte	3,3,1,5,9,9
	.half	.L1982-.L49
	.byte	1,5,13,7,9
	.half	.L1983-.L1982
	.byte	3,2,1,5,42,9
	.half	.L1984-.L1983
	.byte	1,5,40,9
	.half	.L1985-.L1984
	.byte	1,5,22,9
	.half	.L1986-.L1985
	.byte	3,1,1,5,8,9
	.half	.L47-.L1986
	.byte	3,7,1,5,5,9
	.half	.L1987-.L47
	.byte	1,5,9,7,9
	.half	.L1988-.L1987
	.byte	3,2,1,5,42,9
	.half	.L1989-.L1988
	.byte	1,5,1,9
	.half	.L51-.L1989
	.byte	3,4,1,7,9
	.half	.L667-.L51
	.byte	0,1,1
.L1970:
	.sdecl	'.debug_ranges',debug,cluster('Com_HandlePeriod')
	.sect	'.debug_ranges'
.L666:
	.word	-1,.L348,0,.L667-.L348,0,0
	.sdecl	'.debug_info',debug,cluster('Com_HandleNone')
	.sect	'.debug_info'
.L668:
	.word	216
	.half	3
	.word	.L669
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L671,.L670
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_HandleNone',0,1,166,14,29,1,1
	.word	.L350,.L940,.L349
	.byte	4
	.byte	'TxIpduId',0,1,168,14,15
	.word	.L766,.L941
	.byte	5
	.word	.L350,.L940
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_HandleNone')
	.sect	'.debug_abbrev'
.L669:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_HandleNone')
	.sect	'.debug_line'
.L670:
	.word	.L1991-.L1990
.L1990:
	.half	3
	.word	.L1993-.L1992
.L1992:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1993:
	.byte	5,1,7,0,5,2
	.word	.L350
	.byte	3,194,14,1,7,9
	.half	.L672-.L350
	.byte	0,1,1
.L1991:
	.sdecl	'.debug_ranges',debug,cluster('Com_HandleNone')
	.sect	'.debug_ranges'
.L671:
	.word	-1,.L350,0,.L672-.L350,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TxModeProcess')
	.sect	'.debug_info'
.L673:
	.word	246
	.half	3
	.word	.L674
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L676,.L675
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TxModeProcess',0,1,212,16,32
	.word	.L766
	.byte	1,1
	.word	.L352,.L942,.L351
	.byte	4
	.byte	'TxIpduId',0,1,214,16,15
	.word	.L766,.L943
	.byte	5
	.word	.L352,.L942
	.byte	6
	.byte	'sendFlag',0,1,218,16,13
	.word	.L766,.L944
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TxModeProcess')
	.sect	'.debug_abbrev'
.L674:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TxModeProcess')
	.sect	'.debug_line'
.L675:
	.word	.L1995-.L1994
.L1994:
	.half	3
	.word	.L1997-.L1996
.L1996:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L1997:
	.byte	5,32,7,0,5,2
	.word	.L352
	.byte	3,211,16,1,5,22,9
	.half	.L1094-.L352
	.byte	3,6,1,5,12,9
	.half	.L1095-.L1094
	.byte	3,3,1,5,10,9
	.half	.L1998-.L1095
	.byte	3,3,1,7,9
	.half	.L1999-.L1998
	.byte	3,21,1,7,9
	.half	.L2000-.L1999
	.byte	3,116,1,7,9
	.half	.L2001-.L2000
	.byte	1,5,29,9
	.half	.L53-.L2001
	.byte	3,120,1,5,9,9
	.half	.L1093-.L53
	.byte	1,5,22,7,9
	.half	.L2002-.L1093
	.byte	3,2,1,5,9,9
	.half	.L2003-.L2002
	.byte	3,2,1,5,37,9
	.half	.L55-.L2003
	.byte	3,5,1,5,18,9
	.half	.L1096-.L55
	.byte	1,5,9,9
	.half	.L1097-.L1096
	.byte	3,1,1,5,24,9
	.half	.L54-.L1097
	.byte	3,11,1,5,16,9
	.half	.L56-.L54
	.byte	3,19,1,5,38,9
	.half	.L2004-.L56
	.byte	1,5,5,9
	.half	.L2005-.L2004
	.byte	1,5,18,7,9
	.half	.L2006-.L2005
	.byte	3,2,1,5,9,9
	.half	.L2007-.L2006
	.byte	3,1,1,5,31,9
	.half	.L2008-.L2007
	.byte	1,5,44,9
	.half	.L2009-.L2008
	.byte	1,5,42,9
	.half	.L2010-.L2009
	.byte	1,5,16,9
	.half	.L60-.L2010
	.byte	3,12,1,5,5,9
	.half	.L2011-.L60
	.byte	1,5,18,7,9
	.half	.L2012-.L2011
	.byte	3,2,1,5,9,9
	.half	.L2013-.L2012
	.byte	3,1,1,5,54,9
	.half	.L2014-.L2013
	.byte	1,5,52,9
	.half	.L2015-.L2014
	.byte	1,5,5,9
	.half	.L61-.L2015
	.byte	3,4,1,5,1,9
	.half	.L1098-.L61
	.byte	3,1,1,7,9
	.half	.L677-.L1098
	.byte	0,1,1
.L1995:
	.sdecl	'.debug_ranges',debug,cluster('Com_TxModeProcess')
	.sect	'.debug_ranges'
.L676:
	.word	-1,.L352,0,.L677-.L352,0,0
	.sdecl	'.debug_info',debug,cluster('Com_TransmitPdu')
	.sect	'.debug_info'
.L678:
	.word	301
	.half	3
	.word	.L679
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L681,.L680
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_TransmitPdu',0,1,175,17,29,1,1
	.word	.L354,.L945,.L353
	.byte	4
	.byte	'TxIpduId',0,1,177,17,15
	.word	.L766,.L946
	.byte	5
	.word	.L354,.L945
	.byte	6
	.byte	'PduInfo',0,1,182,17,17
	.word	.L947,.L948
	.byte	6
	.byte	'txReqResult',0,1,183,17,20
	.word	.L766,.L949
	.byte	6
	.byte	'TxIpduCalloutResultFlag',0,1,186,17,13
	.word	.L766,.L950
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_TransmitPdu')
	.sect	'.debug_abbrev'
.L679:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_TransmitPdu')
	.sect	'.debug_line'
.L680:
	.word	.L2017-.L2016
.L2016:
	.half	3
	.word	.L2019-.L2018
.L2018:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2019:
	.byte	5,29,7,0,5,2
	.word	.L354
	.byte	3,174,17,1,5,37,9
	.half	.L1100-.L354
	.byte	3,11,1,5,42,9
	.half	.L1101-.L1100
	.byte	3,4,1,5,24,9
	.half	.L2020-.L1101
	.byte	1,5,25,9
	.half	.L2021-.L2020
	.byte	3,1,1,5,23,9
	.half	.L2022-.L2021
	.byte	1,5,8,9
	.half	.L2023-.L2022
	.byte	3,10,1,5,20,9
	.half	.L2024-.L2023
	.byte	1,5,5,9
	.half	.L2025-.L2024
	.byte	1,5,35,7,9
	.half	.L2026-.L2025
	.byte	3,2,1,5,78,9
	.half	.L2027-.L2026
	.byte	1,5,5,9
	.half	.L63-.L2027
	.byte	3,3,1,5,40,7,9
	.half	.L2028-.L63
	.byte	3,4,1,5,75,9
	.half	.L2029-.L2028
	.byte	1,5,9,9
	.half	.L1102-.L2029
	.byte	3,2,1,5,13,7,9
	.half	.L2030-.L1102
	.byte	3,9,1,5,27,9
	.half	.L2031-.L2030
	.byte	1,5,40,9
	.half	.L2032-.L2031
	.byte	1,5,38,9
	.half	.L2033-.L2032
	.byte	1,5,16,9
	.half	.L2034-.L2033
	.byte	3,6,1,5,13,9
	.half	.L2035-.L2034
	.byte	1,5,17,7,9
	.half	.L2036-.L2035
	.byte	3,2,1,5,55,9
	.half	.L2037-.L2036
	.byte	1,5,53,9
	.half	.L2038-.L2037
	.byte	1,5,1,9
	.half	.L64-.L2038
	.byte	3,20,1,5,41,7,9
	.half	.L65-.L64
	.byte	3,123,1,5,1,9
	.half	.L682-.L65
	.byte	3,5,0,1,1
.L2017:
	.sdecl	'.debug_ranges',debug,cluster('Com_TransmitPdu')
	.sect	'.debug_ranges'
.L681:
	.word	-1,.L354,0,.L682-.L354,0,0
	.sdecl	'.debug_info',debug,cluster('Com_CbkTxAck_PDU')
	.sect	'.debug_info'
.L683:
	.word	240
	.half	3
	.word	.L684
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L686,.L685
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_CbkTxAck_PDU',0,1,248,18,29,1,1
	.word	.L356,.L951,.L355
	.byte	4
	.byte	'TxIpduId',0,1,250,18,15
	.word	.L766,.L952
	.byte	5
	.word	.L356,.L951
	.byte	6
	.byte	'TxSigId',0,1,254,18,22
	.word	.L763,.L953
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_CbkTxAck_PDU')
	.sect	'.debug_abbrev'
.L684:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_CbkTxAck_PDU')
	.sect	'.debug_line'
.L685:
	.word	.L2040-.L2039
.L2039:
	.half	3
	.word	.L2042-.L2041
.L2041:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2042:
	.byte	5,19,7,0,5,2
	.word	.L356
	.byte	3,131,19,1,5,12,9
	.half	.L1104-.L356
	.byte	3,4,1,5,24,9
	.half	.L2043-.L1104
	.byte	3,125,1,5,60,9
	.half	.L2044-.L2043
	.byte	1,5,24,9
	.half	.L69-.L2044
	.byte	3,3,1,5,9,9
	.half	.L2045-.L69
	.byte	1,5,13,7,9
	.half	.L2046-.L2045
	.byte	3,2,1,5,48,9
	.half	.L2047-.L2046
	.byte	1,5,20,9
	.half	.L70-.L2047
	.byte	3,124,1,5,24,9
	.half	.L68-.L70
	.byte	3,127,1,5,60,9
	.half	.L2048-.L68
	.byte	1,5,1,7,9
	.half	.L2049-.L2048
	.byte	3,21,1,7,9
	.half	.L687-.L2049
	.byte	0,1,1
.L2040:
	.sdecl	'.debug_ranges',debug,cluster('Com_CbkTxAck_PDU')
	.sect	'.debug_ranges'
.L686:
	.word	-1,.L356,0,.L687-.L356,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.debug_info'
.L688:
	.word	272
	.half	3
	.word	.L689
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L691,.L690
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SetIpduTrigRepFlag',0,1,231,28,29,1,1
	.word	.L376,.L954,.L375
	.byte	4
	.byte	'txProperty',0,1,233,28,30
	.word	.L955,.L956
	.byte	4
	.byte	'TxIpduId',0,1,234,28,15
	.word	.L766,.L957
	.byte	4
	.byte	'changeFlag',0,1,235,28,13
	.word	.L766,.L958
	.byte	5
	.word	.L376,.L954
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.debug_abbrev'
.L689:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.debug_line'
.L690:
	.word	.L2051-.L2050
.L2050:
	.half	3
	.word	.L2053-.L2052
.L2052:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2053:
	.byte	5,10,7,0,5,2
	.word	.L376
	.byte	3,253,28,1,7,9
	.half	.L2054-.L376
	.byte	3,4,1,5,9,7,9
	.half	.L2055-.L2054
	.byte	3,1,1,5,13,7,9
	.half	.L99-.L2055
	.byte	3,2,1,5,31,9
	.half	.L2056-.L99
	.byte	1,5,44,9
	.half	.L2057-.L2056
	.byte	1,5,42,9
	.half	.L2058-.L2057
	.byte	1,5,1,9
	.half	.L101-.L2058
	.byte	3,11,1,7,9
	.half	.L692-.L101
	.byte	0,1,1
.L2051:
	.sdecl	'.debug_ranges',debug,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.debug_ranges'
.L691:
	.word	-1,.L376,0,.L692-.L376,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ProcessTxConf')
	.sect	'.debug_info'
.L693:
	.word	264
	.half	3
	.word	.L694
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L696,.L695
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ProcessTxConf',0,1,171,19,29,1,1
	.word	.L358,.L959,.L357
	.byte	4
	.byte	'TxIpduId',0,1,173,19,15
	.word	.L766,.L960
	.byte	4
	.byte	'pduState',0,1,174,19,24
	.word	.L961,.L962
	.byte	5
	.word	.L358,.L959
	.byte	6
	.byte	'tmpState',0,1,177,19,24
	.word	.L961,.L963
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ProcessTxConf')
	.sect	'.debug_abbrev'
.L694:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ProcessTxConf')
	.sect	'.debug_line'
.L695:
	.word	.L2060-.L2059
.L2059:
	.half	3
	.word	.L2062-.L2061
.L2061:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2062:
	.byte	5,29,7,0,5,2
	.word	.L358
	.byte	3,170,19,1,5,5,9
	.half	.L1107-.L358
	.byte	3,27,1,5,26,7,9
	.half	.L2063-.L1107
	.byte	3,2,1,5,35,9
	.half	.L1106-.L2063
	.byte	1,5,29,9
	.half	.L71-.L1106
	.byte	3,4,1,5,5,9
	.half	.L72-.L71
	.byte	3,12,1,5,19,9
	.half	.L2064-.L72
	.byte	1,5,32,9
	.half	.L2065-.L2064
	.byte	1,5,30,9
	.half	.L1108-.L2065
	.byte	1,5,1,9
	.half	.L2066-.L1108
	.byte	3,2,1,7,9
	.half	.L697-.L2066
	.byte	0,1,1
.L2060:
	.sdecl	'.debug_ranges',debug,cluster('Com_ProcessTxConf')
	.sect	'.debug_ranges'
.L696:
	.word	-1,.L358,0,.L697-.L358,0,0
	.sdecl	'.debug_info',debug,cluster('Com_CheckRxLength')
	.sect	'.debug_info'
.L698:
	.word	260
	.half	3
	.word	.L699
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L701,.L700
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_CheckRxLength',0,1,240,19,32
	.word	.L766
	.byte	1,1
	.word	.L360,.L964,.L359
	.byte	4
	.byte	'RxPduId',0,1,242,19,15
	.word	.L766,.L965
	.byte	4
	.byte	'length',0,1,243,19,19
	.word	.L763,.L966
	.byte	5
	.word	.L360,.L964
	.byte	6
	.byte	'ret',0,1,246,19,13
	.word	.L766,.L967
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_CheckRxLength')
	.sect	'.debug_abbrev'
.L699:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_CheckRxLength')
	.sect	'.debug_line'
.L700:
	.word	.L2068-.L2067
.L2067:
	.half	3
	.word	.L2070-.L2069
.L2069:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2070:
	.byte	5,22,7,0,5,2
	.word	.L360
	.byte	3,138,20,1,5,19,9
	.half	.L2071-.L360
	.byte	1,5,1,9
	.half	.L1110-.L2071
	.byte	3,9,1,7,9
	.half	.L702-.L1110
	.byte	0,1,1
.L2068:
	.sdecl	'.debug_ranges',debug,cluster('Com_CheckRxLength')
	.sect	'.debug_ranges'
.L701:
	.word	-1,.L360,0,.L702-.L360,0,0
	.sdecl	'.debug_info',debug,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.debug_info'
.L703:
	.word	293
	.half	3
	.word	.L704
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L706,.L705
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_ReplaceRxSignalWithInit',0,1,207,22,29,1,1
	.word	.L370,.L968,.L369
	.byte	4
	.byte	'RxPduId',0,1,209,22,15
	.word	.L766,.L969
	.byte	4
	.byte	'sigId',0,1,210,22,12
	.word	.L763,.L970
	.byte	4
	.byte	'needRoutOut',0,1,211,22,13
	.word	.L766,.L971
	.byte	5
	.word	.L370,.L968
	.byte	6
	.byte	'sigLen',0,1,214,22,19
	.word	.L763,.L972
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.debug_abbrev'
.L704:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.debug_line'
.L705:
	.word	.L2073-.L2072
.L2072:
	.half	3
	.word	.L2075-.L2074
.L2074:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2075:
	.byte	5,29,7,0,5,2
	.word	.L370
	.byte	3,206,22,1,5,14,9
	.half	.L1148-.L370
	.byte	3,9,1,5,5,9
	.half	.L1149-.L1148
	.byte	3,10,1,5,40,9
	.half	.L2076-.L1149
	.byte	1,5,77,9
	.half	.L2077-.L2076
	.byte	1,5,111,9
	.half	.L2078-.L2077
	.byte	1,5,8,9
	.half	.L1147-.L2078
	.byte	3,3,1,5,20,9
	.half	.L2079-.L1147
	.byte	1,5,5,9
	.half	.L2080-.L2079
	.byte	1,5,9,7,9
	.half	.L2081-.L2080
	.byte	3,2,1,5,43,9
	.half	.L2082-.L2081
	.byte	1,5,80,9
	.half	.L2083-.L2082
	.byte	1,5,117,9
	.half	.L2084-.L2083
	.byte	1,5,1,9
	.half	.L88-.L2084
	.byte	3,23,1,7,9
	.half	.L707-.L88
	.byte	0,1,1
.L2073:
	.sdecl	'.debug_ranges',debug,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.debug_ranges'
.L706:
	.word	-1,.L370,0,.L707-.L370,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InitRxPdu')
	.sect	'.debug_info'
.L708:
	.word	240
	.half	3
	.word	.L709
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L711,.L710
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_InitRxPdu',0,1,146,21,29,1,1
	.word	.L364,.L973,.L363
	.byte	4
	.byte	'RxIpduId',0,1,148,21,15
	.word	.L766,.L974
	.byte	4
	.byte	'isStartFlag',0,1,149,21,15
	.word	.L766,.L975
	.byte	5
	.word	.L364,.L973
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InitRxPdu')
	.sect	'.debug_abbrev'
.L709:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InitRxPdu')
	.sect	'.debug_line'
.L710:
	.word	.L2086-.L2085
.L2085:
	.half	3
	.word	.L2088-.L2087
.L2087:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2088:
	.byte	5,29,7,0,5,2
	.word	.L364
	.byte	3,145,21,1,5,5,9
	.half	.L1120-.L364
	.byte	3,15,1,5,39,9
	.half	.L2089-.L1120
	.byte	1,5,37,9
	.half	.L2090-.L2089
	.byte	1,5,5,9
	.half	.L2091-.L2090
	.byte	3,5,1,5,35,9
	.half	.L2092-.L2091
	.byte	1,5,33,9
	.half	.L2093-.L2092
	.byte	1,5,5,9
	.half	.L1122-.L2093
	.byte	3,4,1,5,9,7,9
	.half	.L1123-.L1122
	.byte	3,2,1,5,42,9
	.half	.L2094-.L1123
	.byte	1,5,49,9
	.half	.L2095-.L2094
	.byte	1,5,9,9
	.half	.L78-.L2095
	.byte	3,4,1,5,44,9
	.half	.L1125-.L78
	.byte	1,5,42,9
	.half	.L2096-.L1125
	.byte	1,5,24,9
	.half	.L79-.L2096
	.byte	3,5,1,5,9,9
	.half	.L1119-.L79
	.byte	3,5,1,5,23,9
	.half	.L1127-.L1119
	.byte	1,5,17,9
	.half	.L1128-.L1127
	.byte	3,126,1,5,34,9
	.half	.L1129-.L1128
	.byte	3,2,1,5,1,9
	.half	.L2097-.L1129
	.byte	3,7,1,7,9
	.half	.L712-.L2097
	.byte	0,1,1
.L2086:
	.sdecl	'.debug_ranges',debug,cluster('Com_InitRxPdu')
	.sect	'.debug_ranges'
.L711:
	.word	-1,.L364,0,.L712-.L364,0,0
	.sdecl	'.debug_info',debug,cluster('Com_SwitchRxPduMode')
	.sect	'.debug_info'
.L713:
	.word	268
	.half	3
	.word	.L714
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L716,.L715
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_SwitchRxPduMode',0,1,210,21,29,1,1
	.word	.L366,.L976,.L365
	.byte	4
	.byte	'RxIpduId',0,1,212,21,15
	.word	.L766,.L977
	.byte	4
	.byte	'isStartFlag',0,1,213,21,15
	.word	.L766,.L978
	.byte	4
	.byte	'InitFlag',0,1,214,21,15
	.word	.L766,.L979
	.byte	5
	.word	.L366,.L976
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_SwitchRxPduMode')
	.sect	'.debug_abbrev'
.L714:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_SwitchRxPduMode')
	.sect	'.debug_line'
.L715:
	.word	.L2099-.L2098
.L2098:
	.half	3
	.word	.L2101-.L2100
.L2100:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2101:
	.byte	5,29,7,0,5,2
	.word	.L366
	.byte	3,209,21,1,5,5,9
	.half	.L1130-.L366
	.byte	3,7,1,5,39,9
	.half	.L2102-.L1130
	.byte	1,5,37,9
	.half	.L2103-.L2102
	.byte	1,5,8,9
	.half	.L1132-.L2103
	.byte	3,13,1,5,39,7,9
	.half	.L1133-.L1132
	.byte	1,5,28,7,9
	.half	.L2104-.L1133
	.byte	3,2,1,5,5,9
	.half	.L80-.L2104
	.byte	3,11,1,5,35,9
	.half	.L2105-.L80
	.byte	1,5,33,9
	.half	.L2106-.L2105
	.byte	1,5,5,9
	.half	.L1135-.L2106
	.byte	3,2,1,5,9,7,9
	.half	.L1136-.L1135
	.byte	3,2,1,5,44,9
	.half	.L2107-.L1136
	.byte	1,5,42,9
	.half	.L2108-.L2107
	.byte	1,5,49,9
	.half	.L2109-.L2108
	.byte	1,5,9,9
	.half	.L82-.L2109
	.byte	3,5,1,5,44,9
	.half	.L1138-.L82
	.byte	1,5,42,9
	.half	.L2110-.L1138
	.byte	1,5,9,9
	.half	.L83-.L2110
	.byte	3,6,1,5,23,9
	.half	.L1140-.L83
	.byte	1,5,17,9
	.half	.L1141-.L1140
	.byte	3,126,1,5,34,9
	.half	.L1142-.L1141
	.byte	3,2,1,5,1,9
	.half	.L2111-.L1142
	.byte	3,8,1,7,9
	.half	.L717-.L2111
	.byte	0,1,1
.L2099:
	.sdecl	'.debug_ranges',debug,cluster('Com_SwitchRxPduMode')
	.sect	'.debug_ranges'
.L716:
	.word	-1,.L366,0,.L717-.L366,0,0
	.sdecl	'.debug_info',debug,cluster('Com_RxInit')
	.sect	'.debug_info'
.L718:
	.word	214
	.half	3
	.word	.L719
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L721,.L720
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_RxInit',0,1,156,22,29,1,1
	.word	.L368,.L980,.L367
	.byte	4
	.word	.L368,.L980
	.byte	5
	.byte	'IpduIndex',0,1,162,22,15
	.word	.L766,.L981
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_RxInit')
	.sect	'.debug_abbrev'
.L719:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_RxInit')
	.sect	'.debug_line'
.L720:
	.word	.L2113-.L2112
.L2112:
	.half	3
	.word	.L2115-.L2114
.L2114:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2115:
	.byte	5,19,7,0,5,2
	.word	.L368
	.byte	3,173,22,1,5,47,9
	.half	.L1143-.L368
	.byte	1,5,60,9
	.half	.L2116-.L1143
	.byte	1,5,20,9
	.half	.L85-.L2116
	.byte	3,4,1,5,9,9
	.half	.L2117-.L85
	.byte	1,5,38,7,9
	.half	.L2118-.L2117
	.byte	3,2,1,5,44,9
	.half	.L2119-.L2118
	.byte	1,5,38,9
	.half	.L86-.L2119
	.byte	3,5,1,5,71,9
	.half	.L1145-.L86
	.byte	3,117,1,5,60,9
	.half	.L84-.L1145
	.byte	1,5,1,7,9
	.half	.L2120-.L84
	.byte	3,15,1,7,9
	.half	.L722-.L2120
	.byte	0,1,1
.L2113:
	.sdecl	'.debug_ranges',debug,cluster('Com_RxInit')
	.sect	'.debug_ranges'
.L721:
	.word	-1,.L368,0,.L722-.L368,0,0
	.sdecl	'.debug_info',debug,cluster('Com_RxTimerOutMonitor')
	.sect	'.debug_info'
.L723:
	.word	245
	.half	3
	.word	.L724
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L726,.L725
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_RxTimerOutMonitor',0,1,192,27,29,1,1
	.word	.L374,.L982,.L373
	.byte	4
	.byte	'RxIpduId',0,1,194,27,15
	.word	.L766,.L983
	.byte	5
	.word	.L374,.L982
	.byte	6
	.byte	'RxSigId',0,1,198,27,22
	.word	.L763,.L984
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_RxTimerOutMonitor')
	.sect	'.debug_abbrev'
.L724:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_RxTimerOutMonitor')
	.sect	'.debug_line'
.L725:
	.word	.L2122-.L2121
.L2121:
	.half	3
	.word	.L2124-.L2123
.L2123:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2124:
	.byte	5,29,7,0,5,2
	.word	.L374
	.byte	3,191,27,1,5,30,9
	.half	.L1154-.L374
	.byte	3,13,1,5,8,9
	.half	.L2125-.L1154
	.byte	1,5,5,9
	.half	.L2126-.L2125
	.byte	1,5,9,7,9
	.half	.L2127-.L2126
	.byte	3,2,1,5,13,9
	.half	.L2128-.L2127
	.byte	3,1,1,5,37,9
	.half	.L2129-.L2128
	.byte	3,127,1,5,21,9
	.half	.L92-.L2129
	.byte	3,3,1,5,5,9
	.half	.L2130-.L92
	.byte	1,5,9,7,9
	.half	.L2131-.L2130
	.byte	3,2,1,5,36,9
	.half	.L2132-.L2131
	.byte	1,5,1,9
	.half	.L2133-.L2132
	.byte	3,59,1,5,9,7,9
	.half	.L93-.L2133
	.byte	3,75,1,5,13,9
	.half	.L2134-.L93
	.byte	3,127,1,5,36,9
	.half	.L2135-.L2134
	.byte	3,1,1,5,23,9
	.half	.L2136-.L2135
	.byte	3,3,1,5,20,9
	.half	.L1155-.L2136
	.byte	3,20,1,5,64,9
	.half	.L2137-.L1155
	.byte	3,109,1,5,28,9
	.half	.L96-.L2137
	.byte	3,13,1,5,17,9
	.half	.L2138-.L96
	.byte	1,5,68,7,9
	.half	.L2139-.L2138
	.byte	3,2,1,5,32,9
	.half	.L97-.L2139
	.byte	3,4,1,5,17,9
	.half	.L2140-.L97
	.byte	1,5,21,7,9
	.half	.L2141-.L2140
	.byte	3,2,1,5,57,9
	.half	.L2142-.L2141
	.byte	1,5,24,9
	.half	.L98-.L2142
	.byte	3,108,1,5,28,9
	.half	.L95-.L98
	.byte	3,127,1,5,64,9
	.half	.L2143-.L95
	.byte	1,5,9,7,9
	.half	.L2144-.L2143
	.byte	3,42,1,5,23,9
	.half	.L2145-.L2144
	.byte	1,5,36,9
	.half	.L2146-.L2145
	.byte	1,5,34,9
	.half	.L2147-.L2146
	.byte	1,5,9,9
	.half	.L2148-.L2147
	.byte	3,1,1,5,43,9
	.half	.L2149-.L2148
	.byte	1,5,41,9
	.half	.L2150-.L2149
	.byte	1,5,1,9
	.half	.L2151-.L2150
	.byte	3,6,1,7,9
	.half	.L727-.L2151
	.byte	0,1,1
.L2122:
	.sdecl	'.debug_ranges',debug,cluster('Com_RxTimerOutMonitor')
	.sect	'.debug_ranges'
.L726:
	.word	-1,.L374,0,.L727-.L374,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InitRxPduValue')
	.sect	'.debug_info'
.L728:
	.word	266
	.half	3
	.word	.L729
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L731,.L730
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_InitRxPduValue',0,1,238,20,29,1,1
	.word	.L362,.L985,.L361
	.byte	4
	.byte	'RxIpduId',0,1,240,20,15
	.word	.L766,.L986
	.byte	5
	.word	.L362,.L985
	.byte	6
	.byte	'IndexData',0,1,243,20,19
	.word	.L763,.L987
	.byte	6
	.byte	'SigIndex',0,1,244,20,22
	.word	.L763,.L988
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InitRxPduValue')
	.sect	'.debug_abbrev'
.L729:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_InitRxPduValue')
	.sect	'.debug_line'
.L730:
	.word	.L2153-.L2152
.L2152:
	.half	3
	.word	.L2155-.L2154
.L2154:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2155:
	.byte	5,29,7,0,5,2
	.word	.L362
	.byte	3,237,20,1,5,19,9
	.half	.L1111-.L362
	.byte	3,9,1,5,66,9
	.half	.L1112-.L1111
	.byte	3,2,1,5,81,9
	.half	.L1114-.L1112
	.byte	3,126,1,5,19,9
	.half	.L75-.L1114
	.byte	3,2,1,5,52,9
	.half	.L2156-.L75
	.byte	1,5,64,9
	.half	.L1115-.L2156
	.byte	1,5,92,9
	.half	.L1116-.L1115
	.byte	3,126,1,5,51,9
	.half	.L74-.L1116
	.byte	1,5,81,9
	.half	.L2157-.L74
	.byte	1,5,20,7,9
	.half	.L2158-.L2157
	.byte	3,5,1,5,107,9
	.half	.L1117-.L2158
	.byte	1,5,57,9
	.half	.L77-.L1117
	.byte	3,2,1,5,117,9
	.half	.L2159-.L77
	.byte	3,126,1,5,71,9
	.half	.L76-.L2159
	.byte	1,5,107,9
	.half	.L2160-.L76
	.byte	1,5,1,7,9
	.half	.L2161-.L2160
	.byte	3,5,1,7,9
	.half	.L732-.L2161
	.byte	0,1,1
.L2153:
	.sdecl	'.debug_ranges',debug,cluster('Com_InitRxPduValue')
	.sect	'.debug_ranges'
.L731:
	.word	-1,.L362,0,.L732-.L362,0,0
	.sdecl	'.debug_info',debug,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.debug_info'
.L733:
	.word	249
	.half	3
	.word	.L734
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L736,.L735
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_HandleRxPdu_DirectCopy',0,1,215,23,29,1,1
	.word	.L372,.L989,.L371
	.byte	4
	.byte	'RxPduId',0,1,217,23,15
	.word	.L766,.L990
	.byte	5
	.word	.L372,.L989
	.byte	6
	.byte	'RxSigId',0,1,220,23,22
	.word	.L763,.L991
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.debug_abbrev'
.L734:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.debug_line'
.L735:
	.word	.L2163-.L2162
.L2162:
	.half	3
	.word	.L2165-.L2164
.L2164:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2165:
	.byte	5,19,7,0,5,2
	.word	.L372
	.byte	3,221,23,1,5,16,9
	.half	.L1152-.L372
	.byte	3,15,1,5,24,9
	.half	.L2166-.L1152
	.byte	3,114,1,5,59,9
	.half	.L2167-.L2166
	.byte	1,5,28,9
	.half	.L90-.L2167
	.byte	3,14,1,5,13,9
	.half	.L2168-.L90
	.byte	1,5,17,7,9
	.half	.L2169-.L2168
	.byte	3,2,1,5,52,9
	.half	.L2170-.L2169
	.byte	1,5,20,9
	.half	.L91-.L2170
	.byte	3,113,1,5,24,9
	.half	.L89-.L91
	.byte	3,127,1,5,59,9
	.half	.L2171-.L89
	.byte	1,5,1,7,9
	.half	.L2172-.L2171
	.byte	3,21,1,7,9
	.half	.L737-.L2172
	.byte	0,1,1
.L2163:
	.sdecl	'.debug_ranges',debug,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.debug_ranges'
.L736:
	.word	-1,.L372,0,.L737-.L372,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupStart_Internal')
	.sect	'.debug_info'
.L738:
	.word	298
	.half	3
	.word	.L739
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L741,.L740
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IpduGroupStart_Internal',0,1,222,5,29,1,1
	.word	.L330,.L992,.L329
	.byte	4
	.byte	'IpduGroupId',0,1,224,5,25
	.word	.L763,.L993
	.byte	4
	.byte	'Initialize',0,1,225,5,13
	.word	.L766,.L994
	.byte	5
	.word	.L330,.L992
	.byte	6
	.byte	'pduIndex',0,1,228,5,15
	.word	.L766,.L995
	.byte	6
	.byte	'pduId',0,1,229,5,15
	.word	.L766,.L996
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupStart_Internal')
	.sect	'.debug_abbrev'
.L739:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupStart_Internal')
	.sect	'.debug_line'
.L740:
	.word	.L2174-.L2173
.L2173:
	.half	3
	.word	.L2176-.L2175
.L2175:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2176:
	.byte	5,29,7,0,5,2
	.word	.L330
	.byte	3,221,5,1,5,17,9
	.half	.L1023-.L330
	.byte	3,10,1,5,39,9
	.half	.L2177-.L1023
	.byte	1,5,5,9
	.half	.L2178-.L2177
	.byte	1,5,9,7,9
	.half	.L2179-.L2178
	.byte	3,3,1,5,31,9
	.half	.L2180-.L2179
	.byte	1,5,47,9
	.half	.L2181-.L2180
	.byte	1,5,45,9
	.half	.L2182-.L2181
	.byte	1,5,9,9
	.half	.L2183-.L2182
	.byte	3,2,1,5,34,9
	.half	.L2184-.L2183
	.byte	1,5,48,9
	.half	.L2185-.L2184
	.byte	1,5,22,9
	.half	.L2186-.L2185
	.byte	3,4,1,5,85,9
	.half	.L1024-.L2186
	.byte	1,5,21,9
	.half	.L11-.L1024
	.byte	3,2,1,5,57,9
	.half	.L2187-.L11
	.byte	1,5,16,9
	.half	.L1026-.L2187
	.byte	3,1,1,5,30,9
	.half	.L2188-.L1026
	.byte	1,5,13,9
	.half	.L2189-.L2188
	.byte	1,5,44,7,9
	.half	.L2190-.L2189
	.byte	3,2,1,5,50,9
	.half	.L2191-.L2190
	.byte	1,5,95,9
	.half	.L12-.L2191
	.byte	3,123,1,5,49,9
	.half	.L10-.L12
	.byte	1,5,85,9
	.half	.L2192-.L10
	.byte	1,5,22,7,9
	.half	.L2193-.L2192
	.byte	3,13,1,5,85,9
	.half	.L2194-.L2193
	.byte	1,5,21,9
	.half	.L14-.L2194
	.byte	3,2,1,5,57,9
	.half	.L2195-.L14
	.byte	1,5,16,9
	.half	.L1029-.L2195
	.byte	3,1,1,5,30,9
	.half	.L2196-.L1029
	.byte	1,5,13,9
	.half	.L2197-.L2196
	.byte	1,5,44,7,9
	.half	.L2198-.L2197
	.byte	3,2,1,5,50,9
	.half	.L2199-.L2198
	.byte	1,5,95,9
	.half	.L15-.L2199
	.byte	3,123,1,5,49,9
	.half	.L13-.L15
	.byte	1,5,85,9
	.half	.L2200-.L13
	.byte	1,5,1,7,9
	.half	.L9-.L2200
	.byte	3,12,1,7,9
	.half	.L742-.L9
	.byte	0,1,1
.L2174:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupStart_Internal')
	.sect	'.debug_ranges'
.L741:
	.word	-1,.L330,0,.L742-.L330,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IpduGroupStop_Internal')
	.sect	'.debug_info'
.L743:
	.word	302
	.half	3
	.word	.L744
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L746,.L745
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IpduGroupStop_Internal',0,1,154,6,29,1,1
	.word	.L332,.L997,.L331
	.byte	4
	.byte	'IpduGroupId',0,1,156,6,25
	.word	.L763,.L998
	.byte	5
	.word	.L332,.L997
	.byte	6
	.byte	'pduIndex',0,1,159,6,15
	.word	.L766,.L999
	.byte	6
	.byte	'pduId',0,1,160,6,15
	.word	.L766,.L1000
	.byte	6
	.byte	'tmpPduStartFlag',0,1,161,6,13
	.word	.L766,.L1001
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IpduGroupStop_Internal')
	.sect	'.debug_abbrev'
.L744:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IpduGroupStop_Internal')
	.sect	'.debug_line'
.L745:
	.word	.L2202-.L2201
.L2201:
	.half	3
	.word	.L2204-.L2203
.L2203:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2204:
	.byte	5,29,7,0,5,2
	.word	.L332
	.byte	3,153,6,1,5,16,9
	.half	.L1031-.L332
	.byte	3,10,1,5,38,9
	.half	.L2205-.L1031
	.byte	1,5,5,9
	.half	.L2206-.L2205
	.byte	1,5,9,7,9
	.half	.L2207-.L2206
	.byte	3,3,1,5,31,9
	.half	.L2208-.L2207
	.byte	1,5,47,9
	.half	.L2209-.L2208
	.byte	1,5,45,9
	.half	.L1032-.L2209
	.byte	1,5,9,9
	.half	.L2210-.L1032
	.byte	3,2,1,5,34,9
	.half	.L2211-.L2210
	.byte	1,5,48,9
	.half	.L2212-.L2211
	.byte	1,5,85,9
	.half	.L2213-.L2212
	.byte	3,4,1,5,21,9
	.half	.L18-.L2213
	.byte	3,2,1,5,57,9
	.half	.L2214-.L18
	.byte	1,5,53,9
	.half	.L1034-.L2214
	.byte	3,3,1,5,16,9
	.half	.L1036-.L1034
	.byte	3,2,1,5,47,7,9
	.half	.L2215-.L1036
	.byte	1,5,61,9
	.half	.L2216-.L2215
	.byte	1,5,69,9
	.half	.L2217-.L2216
	.byte	1,5,44,7,9
	.half	.L2218-.L2217
	.byte	3,2,1,5,51,9
	.half	.L2219-.L2218
	.byte	1,5,45,9
	.half	.L1037-.L2219
	.byte	3,3,1,5,59,9
	.half	.L2220-.L1037
	.byte	1,5,20,9
	.half	.L2221-.L2220
	.byte	1,5,53,7,9
	.half	.L2222-.L2221
	.byte	3,1,1,5,67,9
	.half	.L2223-.L2222
	.byte	1,5,50,9
	.half	.L2224-.L2223
	.byte	1,5,41,7,9
	.half	.L21-.L2224
	.byte	3,2,1,5,95,9
	.half	.L19-.L21
	.byte	3,113,1,5,49,9
	.half	.L17-.L19
	.byte	1,5,85,9
	.half	.L2225-.L17
	.byte	1,5,22,7,9
	.half	.L2226-.L2225
	.byte	3,26,1,5,85,9
	.half	.L1033-.L2226
	.byte	1,5,21,9
	.half	.L24-.L1033
	.byte	3,2,1,5,57,9
	.half	.L2227-.L24
	.byte	1,5,53,9
	.half	.L1041-.L2227
	.byte	3,2,1,5,16,9
	.half	.L1043-.L1041
	.byte	3,2,1,5,47,7,9
	.half	.L2228-.L1043
	.byte	1,5,61,9
	.half	.L2229-.L2228
	.byte	1,5,69,9
	.half	.L2230-.L2229
	.byte	1,5,44,7,9
	.half	.L2231-.L2230
	.byte	3,2,1,5,51,9
	.half	.L2232-.L2231
	.byte	1,5,95,9
	.half	.L25-.L2232
	.byte	3,120,1,5,49,9
	.half	.L23-.L25
	.byte	1,5,85,9
	.half	.L2233-.L23
	.byte	1,5,1,7,9
	.half	.L16-.L2233
	.byte	3,16,1,7,9
	.half	.L747-.L16
	.byte	0,1,1
.L2202:
	.sdecl	'.debug_ranges',debug,cluster('Com_IpduGroupStop_Internal')
	.sect	'.debug_ranges'
.L746:
	.word	-1,.L332,0,.L747-.L332,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IsPduStart')
	.sect	'.debug_info'
.L748:
	.word	314
	.half	3
	.word	.L749
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L751,.L750
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IsPduStart',0,1,168,5,32
	.word	.L766
	.byte	1,1
	.word	.L328,.L1002,.L327
	.byte	4
	.byte	'pduId',0,1,170,5,15
	.word	.L766,.L1003
	.byte	4
	.byte	'isTx',0,1,171,5,13
	.word	.L766,.L1004
	.byte	5
	.word	.L328,.L1002
	.byte	6
	.byte	'flag',0,1,174,5,13
	.word	.L766,.L1005
	.byte	6
	.byte	'grpIdx',0,1,175,5,25
	.word	.L763,.L1006
	.byte	6
	.byte	'tmpNum',0,1,176,5,15
	.word	.L766,.L1007
	.byte	6
	.byte	'tmpPtr',0,1,177,5,46
	.word	.L1008,.L1009
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IsPduStart')
	.sect	'.debug_abbrev'
.L749:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IsPduStart')
	.sect	'.debug_line'
.L750:
	.word	.L2235-.L2234
.L2234:
	.half	3
	.word	.L2237-.L2236
.L2236:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2237:
	.byte	5,18,7,0,5,2
	.word	.L328
	.byte	3,173,5,1,5,5,9
	.half	.L1016-.L328
	.byte	3,5,1,5,18,7,9
	.half	.L2238-.L1016
	.byte	3,3,1,9
	.half	.L1017-.L2238
	.byte	3,1,1,5,52,9
	.half	.L1018-.L1017
	.byte	3,127,1,5,18,9
	.half	.L2-.L1018
	.byte	3,7,1,9
	.half	.L1019-.L2
	.byte	3,1,1,5,16,9
	.half	.L3-.L1019
	.byte	3,5,1,5,58,9
	.half	.L1020-.L3
	.byte	1,5,49,9
	.half	.L5-.L1020
	.byte	3,2,1,5,20,9
	.half	.L2239-.L5
	.byte	1,5,42,9
	.half	.L2240-.L2239
	.byte	1,5,9,9
	.half	.L2241-.L2240
	.byte	1,5,18,7,9
	.half	.L2242-.L2241
	.byte	3,2,1,5,1,9
	.half	.L2243-.L2242
	.byte	3,7,1,5,66,7,9
	.half	.L6-.L2243
	.byte	3,117,1,5,58,9
	.half	.L4-.L6
	.byte	1,5,1,7,9
	.half	.L2244-.L4
	.byte	3,11,1,7,9
	.half	.L752-.L2244
	.byte	0,1,1
.L2235:
	.sdecl	'.debug_ranges',debug,cluster('Com_IsPduStart')
	.sect	'.debug_ranges'
.L751:
	.word	-1,.L328,0,.L752-.L328,0,0
	.sdecl	'.debug_info',debug,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.debug_info'
.L753:
	.word	311
	.half	3
	.word	.L754
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L756,.L755
	.byte	2
	.word	.L449
	.byte	3
	.byte	'Com_IsPduDMEnable_Internal',0,1,181,43,32
	.word	.L766
	.byte	1,1
	.word	.L422,.L1010,.L421
	.byte	4
	.byte	'RxIpduId',0,1,183,43,15
	.word	.L766,.L1011
	.byte	5
	.word	.L422,.L1010
	.byte	6
	.byte	'flag',0,1,186,43,13
	.word	.L766,.L1012
	.byte	6
	.byte	'grpIdx',0,1,187,43,25
	.word	.L763,.L1013
	.byte	6
	.byte	'tmpNum',0,1,188,43,15
	.word	.L766,.L1014
	.byte	6
	.byte	'tmpPtr',0,1,189,43,46
	.word	.L1008,.L1015
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.debug_abbrev'
.L754:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.debug_line'
.L755:
	.word	.L2246-.L2245
.L2245:
	.half	3
	.word	.L2248-.L2247
.L2247:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0,0,0,0,0
.L2248:
	.byte	5,18,7,0,5,2
	.word	.L422
	.byte	3,185,43,1,5,14,9
	.half	.L1273-.L422
	.byte	3,4,1,9
	.half	.L1274-.L1273
	.byte	3,1,1,5,16,9
	.half	.L1275-.L1274
	.byte	3,2,1,5,58,9
	.half	.L1276-.L1275
	.byte	1,5,52,9
	.half	.L239-.L1276
	.byte	3,2,1,5,20,9
	.half	.L2249-.L239
	.byte	1,5,45,9
	.half	.L2250-.L2249
	.byte	1,5,9,9
	.half	.L2251-.L2250
	.byte	1,5,18,7,9
	.half	.L2252-.L2251
	.byte	3,2,1,5,1,9
	.half	.L2253-.L2252
	.byte	3,5,1,5,66,7,9
	.half	.L240-.L2253
	.byte	3,119,1,5,58,9
	.half	.L238-.L240
	.byte	1,5,1,7,9
	.half	.L2254-.L238
	.byte	3,9,1,7,9
	.half	.L757-.L2254
	.byte	0,1,1
.L2246:
	.sdecl	'.debug_ranges',debug,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.debug_ranges'
.L756:
	.word	-1,.L422,0,.L757-.L422,0,0
	.sdecl	'.debug_info',debug,cluster('Com_InitStateFlag')
	.sect	'.debug_info'
.L758:
	.word	174
	.half	3
	.word	.L759
	.byte	4,1
	.byte	'..\\EAS\\BSW\\Com\\Com.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L449
	.byte	3
	.byte	'Com_InitStateFlag',0,7,81,37
	.word	.L768
	.byte	5,3
	.word	Com_InitStateFlag
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Com_InitStateFlag')
	.sect	'.debug_abbrev'
.L759:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Com_CbkTxAck_PDU')
	.sect	'.debug_loc'
.L355:
	.word	-1,.L356,0,.L951-.L356
	.half	2
	.byte	138,0
	.word	0,0
.L952:
	.word	-1,.L356,0,.L69-.L356
	.half	1
	.byte	84
	.word	0,0
.L953:
	.word	-1,.L356,.L1104-.L356,.L1105-.L356
	.half	1
	.byte	88
	.word	.L68-.L356,.L951-.L356
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.debug_loc'
.L341:
	.word	-1,.L342,0,.L929-.L342
	.half	2
	.byte	138,0
	.word	0,0
.L930:
	.word	-1,.L342,0,.L39-.L342
	.half	1
	.byte	84
	.word	0,0
.L931:
	.word	-1,.L342,.L1086-.L342,.L1087-.L342
	.half	1
	.byte	88
	.word	.L38-.L342,.L929-.L342
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_CheckRxLength')
	.sect	'.debug_loc'
.L359:
	.word	-1,.L360,0,.L964-.L360
	.half	2
	.byte	138,0
	.word	0,0
.L965:
	.word	-1,.L360,0,.L1109-.L360
	.half	1
	.byte	84
	.word	0,0
.L966:
	.word	-1,.L360,0,.L964-.L360
	.half	1
	.byte	85
	.word	0,0
.L967:
	.word	-1,.L360,.L1110-.L360,.L964-.L360
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_loc'
.L417:
	.word	-1,.L418,0,.L823-.L418
	.half	2
	.byte	138,0
	.word	0,0
.L825:
	.word	-1,.L418,.L1255-.L418,.L1256-.L418
	.half	1
	.byte	95
	.word	.L1257-.L418,.L229-.L418
	.half	5
	.byte	144,32,157,32,0
	.word	.L1258-.L418,.L1259-.L418
	.half	5
	.byte	144,32,157,32,0
	.word	.L228-.L418,.L823-.L418
	.half	1
	.byte	95
	.word	0,0
.L826:
	.word	0,0
.L824:
	.word	-1,.L418,0,.L823-.L418
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_CopyRxData')
	.sect	'.debug_loc'
.L413:
	.word	-1,.L414,0,.L912-.L414
	.half	2
	.byte	138,0
	.word	0,0
.L913:
	.word	-1,.L414,0,.L1250-.L414
	.half	1
	.byte	84
	.word	0,0
.L914:
	.word	-1,.L414,0,.L1251-.L414
	.half	1
	.byte	100
	.word	0,0
.L915:
	.word	-1,.L414,0,.L1251-.L414
	.half	1
	.byte	101
	.word	0,0
.L916:
	.word	-1,.L414,.L1252-.L414,.L912-.L414
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_CopyTxData')
	.sect	'.debug_loc'
.L409:
	.word	-1,.L410,0,.L895-.L410
	.half	2
	.byte	138,0
	.word	0,0
.L896:
	.word	-1,.L410,0,.L1243-.L410
	.half	1
	.byte	84
	.word	0,0
.L897:
	.word	-1,.L410,0,.L1244-.L410
	.half	1
	.byte	100
	.word	0,0
.L899:
	.word	-1,.L410,0,.L1244-.L410
	.half	1
	.byte	101
	.word	0,0
.L901:
	.word	-1,.L410,0,.L1244-.L410
	.half	1
	.byte	102
	.word	0,0
.L902:
	.word	-1,.L410,.L1245-.L410,.L895-.L410
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_DeInit')
	.sect	'.debug_loc'
.L379:
	.word	-1,.L380,0,.L765-.L380
	.half	2
	.byte	138,0
	.word	0,0
.L767:
	.word	-1,.L380,.L1163-.L380,.L765-.L380
	.half	1
	.byte	88
	.word	.L1164-.L380,.L1165-.L380
	.half	1
	.byte	84
	.word	.L1166-.L380,.L1167-.L380
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_loc'
.L435:
	.word	-1,.L436,0,.L846-.L436
	.half	2
	.byte	138,0
	.word	0,0
.L847:
	.word	-1,.L436,0,.L1322-.L436
	.half	1
	.byte	84
	.word	.L1323-.L436,.L846-.L436
	.half	1
	.byte	89
	.word	.L290-.L436,.L1324-.L436
	.half	1
	.byte	84
	.word	.L292-.L436,.L296-.L436
	.half	1
	.byte	84
	.word	0,0
.L849:
	.word	-1,.L436,.L1328-.L436,.L295-.L436
	.half	1
	.byte	88
	.word	.L1329-.L436,.L1330-.L436
	.half	1
	.byte	84
	.word	0,0
.L848:
	.word	-1,.L436,.L1325-.L436,.L1326-.L436
	.half	1
	.byte	90
	.word	.L1327-.L436,.L296-.L436
	.half	1
	.byte	91
	.word	.L1331-.L436,.L1332-.L436
	.half	1
	.byte	91
	.word	.L295-.L436,.L294-.L436
	.half	1
	.byte	90
	.word	0,0
.L850:
	.word	-1,.L436,.L1330-.L436,.L297-.L436
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_loc'
.L433:
	.word	-1,.L434,0,.L842-.L434
	.half	2
	.byte	138,0
	.word	0,0
.L843:
	.word	-1,.L434,0,.L1316-.L434
	.half	1
	.byte	84
	.word	.L280-.L434,.L1317-.L434
	.half	1
	.byte	84
	.word	.L282-.L434,.L842-.L434
	.half	1
	.byte	84
	.word	0,0
.L845:
	.word	-1,.L434,.L1320-.L434,.L1321-.L434
	.half	1
	.byte	83
	.word	0,0
.L844:
	.word	-1,.L434,.L1318-.L434,.L1319-.L434
	.half	5
	.byte	144,32,157,32,0
	.word	.L285-.L434,.L284-.L434
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_GetIpduGroupState')
	.sect	'.debug_loc'
.L431:
	.word	-1,.L432,0,.L834-.L432
	.half	2
	.byte	138,0
	.word	0,0
.L835:
	.word	-1,.L432,0,.L1310-.L432
	.half	1
	.byte	84
	.word	.L275-.L432,.L1314-.L432
	.half	1
	.byte	84
	.word	.L277-.L432,.L276-.L432
	.half	1
	.byte	84
	.word	0,0
.L836:
	.word	-1,.L432,.L1311-.L432,.L834-.L432
	.half	1
	.byte	88
	.word	.L1312-.L432,.L1313-.L432
	.half	1
	.byte	85
	.word	.L1315-.L432,.L834-.L432
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_GetRxIpduState')
	.sect	'.debug_loc'
.L447:
	.word	-1,.L448,0,.L874-.L448
	.half	2
	.byte	138,0
	.word	0,0
.L875:
	.word	-1,.L448,0,.L1353-.L448
	.half	1
	.byte	84
	.word	.L321-.L448,.L1357-.L448
	.half	1
	.byte	84
	.word	.L323-.L448,.L322-.L448
	.half	1
	.byte	84
	.word	0,0
.L876:
	.word	-1,.L448,.L1354-.L448,.L874-.L448
	.half	1
	.byte	88
	.word	.L1355-.L448,.L1356-.L448
	.half	1
	.byte	85
	.word	.L1358-.L448,.L874-.L448
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_GetStatus')
	.sect	'.debug_loc'
.L381:
	.word	-1,.L382,0,.L769-.L382
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_GetTxIpduState')
	.sect	'.debug_loc'
.L445:
	.word	-1,.L446,0,.L871-.L446
	.half	2
	.byte	138,0
	.word	0,0
.L872:
	.word	-1,.L446,0,.L1347-.L446
	.half	1
	.byte	84
	.word	.L315-.L446,.L1351-.L446
	.half	1
	.byte	84
	.word	.L317-.L446,.L316-.L446
	.half	1
	.byte	84
	.word	0,0
.L873:
	.word	-1,.L446,.L1348-.L446,.L871-.L446
	.half	1
	.byte	88
	.word	.L1349-.L446,.L1350-.L446
	.half	1
	.byte	85
	.word	.L1352-.L446,.L871-.L446
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_HandleDirect')
	.sect	'.debug_loc'
.L345:
	.word	-1,.L346,0,.L934-.L346
	.half	2
	.byte	138,0
	.word	0,0
.L935:
	.word	-1,.L346,0,.L934-.L346
	.half	1
	.byte	84
	.word	0,0
.L936:
	.word	-1,.L346,.L1091-.L346,.L934-.L346
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_HandleNone')
	.sect	'.debug_loc'
.L349:
	.word	-1,.L350,0,.L940-.L350
	.half	2
	.byte	138,0
	.word	0,0
.L941:
	.word	-1,.L350,0,.L940-.L350
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_HandlePeriod')
	.sect	'.debug_loc'
.L347:
	.word	-1,.L348,0,.L937-.L348
	.half	2
	.byte	138,0
	.word	0,0
.L938:
	.word	-1,.L348,0,.L937-.L348
	.half	1
	.byte	84
	.word	0,0
.L939:
	.word	-1,.L348,.L1092-.L348,.L937-.L348
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.debug_loc'
.L371:
	.word	-1,.L372,0,.L989-.L372
	.half	2
	.byte	138,0
	.word	0,0
.L990:
	.word	-1,.L372,0,.L90-.L372
	.half	1
	.byte	84
	.word	0,0
.L991:
	.word	-1,.L372,.L1152-.L372,.L1153-.L372
	.half	1
	.byte	88
	.word	.L89-.L372,.L989-.L372
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_Init')
	.sect	'.debug_loc'
.L377:
	.word	-1,.L378,0,.L760-.L378
	.half	2
	.byte	138,0
	.word	0,0
.L762:
	.word	-1,.L378,0,.L1157-.L378
	.half	1
	.byte	100
	.word	0,0
.L764:
	.word	-1,.L378,.L1158-.L378,.L1159-.L378
	.half	1
	.byte	95
	.word	.L1160-.L378,.L104-.L378
	.half	5
	.byte	144,32,157,32,0
	.word	.L1161-.L378,.L1162-.L378
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InitRxPdu')
	.sect	'.debug_loc'
.L363:
	.word	-1,.L364,0,.L973-.L364
	.half	2
	.byte	138,0
	.word	0,0
.L974:
	.word	-1,.L364,0,.L1119-.L364
	.half	1
	.byte	84
	.word	.L1120-.L364,.L1121-.L364
	.half	1
	.byte	88
	.word	.L78-.L364,.L1124-.L364
	.half	1
	.byte	88
	.word	.L1125-.L364,.L1126-.L364
	.half	1
	.byte	88
	.word	.L1127-.L364,.L1128-.L364
	.half	1
	.byte	88
	.word	0,0
.L975:
	.word	-1,.L364,0,.L1119-.L364
	.half	1
	.byte	85
	.word	.L1122-.L364,.L1123-.L364
	.half	1
	.byte	89
	.word	.L1128-.L364,.L1129-.L364
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InitRxPduValue')
	.sect	'.debug_loc'
.L361:
	.word	-1,.L362,0,.L985-.L362
	.half	2
	.byte	138,0
	.word	0,0
.L987:
	.word	-1,.L362,.L1112-.L362,.L1113-.L362
	.half	5
	.byte	144,32,157,32,0
	.word	.L1114-.L362,.L75-.L362
	.half	1
	.byte	81
	.word	.L1115-.L362,.L1116-.L362
	.half	1
	.byte	81
	.word	.L74-.L362,.L77-.L362
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L986:
	.word	-1,.L362,0,.L77-.L362
	.half	1
	.byte	84
	.word	.L1111-.L362,.L985-.L362
	.half	1
	.byte	89
	.word	0,0
.L988:
	.word	-1,.L362,.L1117-.L362,.L1118-.L362
	.half	1
	.byte	88
	.word	.L76-.L362,.L985-.L362
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InitTxPdu')
	.sect	'.debug_loc'
.L337:
	.word	-1,.L338,0,.L917-.L338
	.half	2
	.byte	138,0
	.word	0,0
.L918:
	.word	-1,.L338,0,.L1061-.L338
	.half	1
	.byte	84
	.word	.L1062-.L338,.L1063-.L338
	.half	1
	.byte	88
	.word	.L1064-.L338,.L1065-.L338
	.half	1
	.byte	88
	.word	.L1066-.L338,.L1067-.L338
	.half	1
	.byte	88
	.word	.L1068-.L338,.L1069-.L338
	.half	1
	.byte	88
	.word	.L1070-.L338,.L1071-.L338
	.half	1
	.byte	88
	.word	0,0
.L919:
	.word	-1,.L338,0,.L1061-.L338
	.half	1
	.byte	85
	.word	.L1071-.L338,.L1072-.L338
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InitTxPduValue')
	.sect	'.debug_loc'
.L335:
	.word	-1,.L336,0,.L920-.L336
	.half	2
	.byte	138,0
	.word	0,0
.L922:
	.word	-1,.L336,.L1055-.L336,.L1056-.L336
	.half	5
	.byte	144,32,157,32,0
	.word	.L32-.L336,.L35-.L336
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L923:
	.word	-1,.L336,.L1057-.L336,.L1058-.L336
	.half	1
	.byte	88
	.word	.L34-.L336,.L920-.L336
	.half	1
	.byte	88
	.word	0,0
.L921:
	.word	-1,.L336,0,.L35-.L336
	.half	1
	.byte	84
	.word	.L1054-.L336,.L920-.L336
	.half	1
	.byte	89
	.word	0,0
.L924:
	.word	-1,.L336,.L1059-.L336,.L1060-.L336
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_loc'
.L385:
	.word	-1,.L386,0,.L780-.L386
	.half	2
	.byte	138,0
	.word	0,0
.L781:
	.word	-1,.L386,0,.L780-.L386
	.half	1
	.byte	84
	.word	0,0
.L782:
	.word	-1,.L386,.L1177-.L386,.L780-.L386
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_loc'
.L441:
	.word	-1,.L442,0,.L854-.L442
	.half	2
	.byte	138,0
	.word	0,0
.L855:
	.word	-1,.L442,0,.L1335-.L442
	.half	1
	.byte	84
	.word	0,0
.L856:
	.word	-1,.L442,.L1336-.L442,.L854-.L442
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_loc'
.L425:
	.word	-1,.L426,0,.L807-.L426
	.half	2
	.byte	138,0
	.word	0,0
.L811:
	.word	-1,.L426,.L1292-.L426,.L807-.L426
	.half	1
	.byte	88
	.word	.L1303-.L426,.L265-.L426
	.half	1
	.byte	84
	.word	0,0
.L810:
	.word	-1,.L426,0,.L1287-.L426
	.half	1
	.byte	84
	.word	.L1289-.L426,.L1290-.L426
	.half	1
	.byte	89
	.word	.L255-.L426,.L1291-.L426
	.half	1
	.byte	84
	.word	.L257-.L426,.L260-.L426
	.half	1
	.byte	84
	.word	0,0
.L812:
	.word	-1,.L426,.L1295-.L426,.L1296-.L426
	.half	1
	.byte	95
	.word	.L1300-.L426,.L1301-.L426
	.half	1
	.byte	95
	.word	0,0
.L813:
	.word	-1,.L426,.L1293-.L426,.L1294-.L426
	.half	5
	.byte	144,32,157,32,0
	.word	.L1298-.L426,.L1299-.L426
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L809:
	.word	-1,.L426,0,.L260-.L426
	.half	1
	.byte	100
	.word	.L1288-.L426,.L807-.L426
	.half	1
	.byte	108
	.word	0,0
.L814:
	.word	-1,.L426,.L1297-.L426,.L261-.L426
	.half	1
	.byte	81
	.word	.L1301-.L426,.L1302-.L426
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_loc'
.L427:
	.word	-1,.L428,0,.L837-.L428
	.half	2
	.byte	138,0
	.word	0,0
.L839:
	.word	-1,.L428,0,.L1304-.L428
	.half	1
	.byte	85
	.word	.L267-.L428,.L1306-.L428
	.half	1
	.byte	85
	.word	.L269-.L428,.L837-.L428
	.half	1
	.byte	85
	.word	0,0
.L838:
	.word	-1,.L428,0,.L1305-.L428
	.half	1
	.byte	84
	.word	.L267-.L428,.L1307-.L428
	.half	1
	.byte	84
	.word	.L269-.L428,.L837-.L428
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupStart_Internal')
	.sect	'.debug_loc'
.L329:
	.word	-1,.L330,0,.L992-.L330
	.half	2
	.byte	138,0
	.word	0,0
.L994:
	.word	-1,.L330,0,.L11-.L330
	.half	1
	.byte	85
	.word	.L1023-.L330,.L992-.L330
	.half	1
	.byte	90
	.word	.L1027-.L330,.L12-.L330
	.half	1
	.byte	86
	.word	.L1030-.L330,.L15-.L330
	.half	1
	.byte	86
	.word	0,0
.L993:
	.word	-1,.L330,0,.L11-.L330
	.half	1
	.byte	84
	.word	.L1022-.L330,.L992-.L330
	.half	1
	.byte	89
	.word	0,0
.L996:
	.word	-1,.L330,.L1026-.L330,.L12-.L330
	.half	1
	.byte	84
	.word	.L1029-.L330,.L15-.L330
	.half	1
	.byte	84
	.word	0,0
.L995:
	.word	-1,.L330,.L1024-.L330,.L1025-.L330
	.half	1
	.byte	88
	.word	.L10-.L330,.L1028-.L330
	.half	1
	.byte	88
	.word	.L13-.L330,.L9-.L330
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_loc'
.L429:
	.word	-1,.L430,0,.L840-.L430
	.half	2
	.byte	138,0
	.word	0,0
.L841:
	.word	-1,.L430,0,.L1308-.L430
	.half	1
	.byte	84
	.word	.L271-.L430,.L1309-.L430
	.half	1
	.byte	84
	.word	.L273-.L430,.L840-.L430
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IpduGroupStop_Internal')
	.sect	'.debug_loc'
.L331:
	.word	-1,.L332,0,.L997-.L332
	.half	2
	.byte	138,0
	.word	0,0
.L998:
	.word	-1,.L332,0,.L18-.L332
	.half	1
	.byte	84
	.word	.L1031-.L332,.L997-.L332
	.half	1
	.byte	89
	.word	0,0
.L1000:
	.word	-1,.L332,.L1034-.L332,.L17-.L332
	.half	1
	.byte	88
	.word	.L1035-.L332,.L1036-.L332
	.half	1
	.byte	84
	.word	.L1038-.L332,.L1037-.L332
	.half	1
	.byte	84
	.word	.L1039-.L332,.L19-.L332
	.half	1
	.byte	84
	.word	.L1041-.L332,.L23-.L332
	.half	1
	.byte	90
	.word	.L1042-.L332,.L1043-.L332
	.half	1
	.byte	84
	.word	.L1044-.L332,.L25-.L332
	.half	1
	.byte	84
	.word	0,0
.L999:
	.word	-1,.L332,.L1032-.L332,.L1033-.L332
	.half	1
	.byte	90
	.word	.L1033-.L332,.L1040-.L332
	.half	1
	.byte	88
	.word	.L23-.L332,.L16-.L332
	.half	1
	.byte	88
	.word	0,0
.L1001:
	.word	-1,.L332,.L1036-.L332,.L1037-.L332
	.half	1
	.byte	82
	.word	.L1043-.L332,.L25-.L332
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.debug_loc'
.L421:
	.word	-1,.L422,0,.L1010-.L422
	.half	2
	.byte	138,0
	.word	0,0
.L1011:
	.word	-1,.L422,0,.L1010-.L422
	.half	1
	.byte	84
	.word	0,0
.L1012:
	.word	-1,.L422,.L1273-.L422,.L1010-.L422
	.half	1
	.byte	82
	.word	0,0
.L1013:
	.word	-1,.L422,.L1276-.L422,.L1277-.L422
	.half	1
	.byte	95
	.word	.L238-.L422,.L1010-.L422
	.half	1
	.byte	95
	.word	0,0
.L1014:
	.word	-1,.L422,.L1274-.L422,.L1010-.L422
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1015:
	.word	-1,.L422,.L1275-.L422,.L1010-.L422
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_IsPduStart')
	.sect	'.debug_loc'
.L327:
	.word	-1,.L328,0,.L1002-.L328
	.half	2
	.byte	138,0
	.word	0,0
.L1005:
	.word	-1,.L328,.L1016-.L328,.L1002-.L328
	.half	1
	.byte	82
	.word	0,0
.L1006:
	.word	-1,.L328,.L1020-.L328,.L1021-.L328
	.half	1
	.byte	95
	.word	.L4-.L328,.L1002-.L328
	.half	1
	.byte	95
	.word	0,0
.L1004:
	.word	-1,.L328,0,.L1002-.L328
	.half	1
	.byte	85
	.word	0,0
.L1003:
	.word	-1,.L328,0,.L1002-.L328
	.half	1
	.byte	84
	.word	0,0
.L1007:
	.word	-1,.L328,.L1017-.L328,.L2-.L328
	.half	5
	.byte	144,32,157,32,0
	.word	.L1019-.L328,.L1002-.L328
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1009:
	.word	-1,.L328,.L1018-.L328,.L2-.L328
	.half	1
	.byte	111
	.word	.L3-.L328,.L1002-.L328
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_MainFunctionRouteSignals')
	.sect	'.debug_loc'
.L437:
	.word	-1,.L438,0,.L806-.L438
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_loc'
.L395:
	.word	-1,.L396,0,.L801-.L396
	.half	2
	.byte	138,0
	.word	0,0
.L802:
	.word	-1,.L396,.L1201-.L396,.L801-.L396
	.half	1
	.byte	88
	.word	.L1202-.L396,.L174-.L396
	.half	1
	.byte	84
	.word	.L1203-.L396,.L170-.L396
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_loc'
.L391:
	.word	-1,.L392,0,.L803-.L392
	.half	2
	.byte	138,0
	.word	0,0
.L804:
	.word	-1,.L392,.L1186-.L392,.L803-.L392
	.half	1
	.byte	88
	.word	.L1187-.L392,.L142-.L392
	.half	1
	.byte	84
	.word	.L1188-.L392,.L1189-.L392
	.half	1
	.byte	84
	.word	.L1190-.L392,.L141-.L392
	.half	1
	.byte	84
	.word	0,0
.L805:
	.word	-1,.L392,.L1189-.L392,.L141-.L392
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ProcessTxConf')
	.sect	'.debug_loc'
.L357:
	.word	-1,.L358,0,.L959-.L358
	.half	2
	.byte	138,0
	.word	0,0
.L960:
	.word	-1,.L358,0,.L1106-.L358
	.half	1
	.byte	84
	.word	.L1107-.L358,.L1108-.L358
	.half	1
	.byte	95
	.word	.L71-.L358,.L72-.L358
	.half	1
	.byte	84
	.word	0,0
.L962:
	.word	-1,.L358,0,.L1106-.L358
	.half	1
	.byte	85
	.word	.L71-.L358,.L72-.L358
	.half	1
	.byte	85
	.word	0,0
.L963:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceiveDynSignal')
	.sect	'.debug_loc'
.L399:
	.word	-1,.L400,0,.L795-.L400
	.half	2
	.byte	138,0
	.word	0,0
.L799:
	.word	-1,.L400,0,.L1221-.L400
	.half	1
	.byte	101
	.word	0,0
.L797:
	.word	-1,.L400,0,.L1221-.L400
	.half	1
	.byte	100
	.word	0,0
.L796:
	.word	-1,.L400,0,.L1222-.L400
	.half	1
	.byte	84
	.word	0,0
.L800:
	.word	-1,.L400,.L1223-.L400,.L795-.L400
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_loc'
.L397:
	.word	-1,.L398,0,.L789-.L398
	.half	2
	.byte	138,0
	.word	0,0
.L794:
	.word	-1,.L398,.L1214-.L398,.L177-.L398
	.half	1
	.byte	88
	.word	0,0
.L792:
	.word	-1,.L398,0,.L1204-.L398
	.half	1
	.byte	100
	.word	.L1206-.L398,.L1204-.L398
	.half	1
	.byte	101
	.word	.L176-.L398,.L1208-.L398
	.half	1
	.byte	101
	.word	.L176-.L398,.L1208-.L398
	.half	1
	.byte	100
	.word	.L179-.L398,.L1210-.L398
	.half	1
	.byte	101
	.word	.L179-.L398,.L1210-.L398
	.half	1
	.byte	100
	.word	.L181-.L398,.L1212-.L398
	.half	1
	.byte	101
	.word	.L181-.L398,.L1212-.L398
	.half	1
	.byte	100
	.word	.L184-.L398,.L186-.L398
	.half	1
	.byte	101
	.word	.L184-.L398,.L1215-.L398
	.half	1
	.byte	100
	.word	.L183-.L398,.L1217-.L398
	.half	1
	.byte	100
	.word	.L1219-.L398,.L185-.L398
	.half	1
	.byte	100
	.word	0,0
.L790:
	.word	-1,.L398,0,.L1205-.L398
	.half	1
	.byte	84
	.word	.L176-.L398,.L1209-.L398
	.half	1
	.byte	84
	.word	.L179-.L398,.L1211-.L398
	.half	1
	.byte	84
	.word	.L181-.L398,.L1213-.L398
	.half	1
	.byte	84
	.word	.L184-.L398,.L1216-.L398
	.half	1
	.byte	84
	.word	.L183-.L398,.L1218-.L398
	.half	1
	.byte	84
	.word	0,0
.L793:
	.word	-1,.L398,.L1207-.L398,.L789-.L398
	.half	1
	.byte	89
	.word	.L1220-.L398,.L789-.L398
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_loc'
.L443:
	.word	-1,.L444,0,.L857-.L444
	.half	2
	.byte	138,0
	.word	0,0
.L861:
	.word	-1,.L444,.L1341-.L444,.L1342-.L444
	.half	1
	.byte	88
	.word	.L311-.L444,.L307-.L444
	.half	1
	.byte	88
	.word	0,0
.L860:
	.word	-1,.L444,.L1340-.L444,.L307-.L444
	.half	1
	.byte	92
	.word	0,0
.L858:
	.word	-1,.L444,0,.L1337-.L444
	.half	1
	.byte	84
	.word	.L306-.L444,.L1339-.L444
	.half	1
	.byte	84
	.word	.L309-.L444,.L312-.L444
	.half	1
	.byte	84
	.word	0,0
.L862:
	.word	-1,.L444,.L1343-.L444,.L1344-.L444
	.half	1
	.byte	100
	.word	0,0
.L863:
	.word	-1,.L444,.L1345-.L444,.L1344-.L444
	.half	1
	.byte	84
	.word	0,0
.L859:
	.word	-1,.L444,.L1338-.L444,.L857-.L444
	.half	1
	.byte	90
	.word	.L1346-.L444,.L857-.L444
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_loc'
.L423:
	.word	-1,.L424,0,.L815-.L424
	.half	2
	.byte	138,0
	.word	0,0
.L817:
	.word	-1,.L424,.L1278-.L424,.L250-.L424
	.half	1
	.byte	95
	.word	0,0
.L819:
	.word	-1,.L424,.L1281-.L424,.L1282-.L424
	.half	1
	.byte	82
	.word	0,0
.L820:
	.word	-1,.L424,.L1279-.L424,.L1280-.L424
	.half	1
	.byte	81
	.word	0,0
.L818:
	.word	-1,.L424,.L1284-.L424,.L815-.L424
	.half	1
	.byte	88
	.word	.L1285-.L424,.L1286-.L424
	.half	1
	.byte	84
	.word	0,0
.L816:
	.word	-1,.L424,0,.L250-.L424
	.half	1
	.byte	100
	.word	0,0
.L821:
	.word	-1,.L424,.L1282-.L424,.L1283-.L424
	.half	1
	.byte	82
	.word	0,0
.L822:
	.word	-1,.L424,.L1286-.L424,.L251-.L424
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.debug_loc'
.L369:
	.word	-1,.L370,0,.L968-.L370
	.half	2
	.byte	138,0
	.word	0,0
.L969:
	.word	-1,.L370,0,.L1146-.L370
	.half	1
	.byte	84
	.word	0,0
.L971:
	.word	-1,.L370,0,.L1147-.L370
	.half	1
	.byte	86
	.word	0,0
.L970:
	.word	-1,.L370,0,.L1147-.L370
	.half	1
	.byte	85
	.word	.L1148-.L370,.L968-.L370
	.half	1
	.byte	88
	.word	0,0
.L972:
	.word	-1,.L370,.L1149-.L370,.L968-.L370
	.half	1
	.byte	89
	.word	.L1150-.L370,.L1147-.L370
	.half	1
	.byte	84
	.word	.L1151-.L370,.L88-.L370
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_RxIndication')
	.sect	'.debug_loc'
.L887:
	.word	-1,.L394,.L1195-.L394,.L1196-.L394
	.half	1
	.byte	89
	.word	.L1196-.L394,.L162-.L394
	.half	1
	.byte	82
	.word	.L162-.L394,.L883-.L394
	.half	1
	.byte	89
	.word	0,0
.L393:
	.word	-1,.L394,0,.L883-.L394
	.half	2
	.byte	138,0
	.word	0,0
.L886:
	.word	-1,.L394,0,.L1191-.L394
	.half	1
	.byte	100
	.word	.L1194-.L394,.L883-.L394
	.half	1
	.byte	108
	.word	.L1199-.L394,.L1196-.L394
	.half	1
	.byte	100
	.word	0,0
.L884:
	.word	-1,.L394,0,.L1192-.L394
	.half	1
	.byte	84
	.word	.L1193-.L394,.L883-.L394
	.half	1
	.byte	88
	.word	.L150-.L394,.L1197-.L394
	.half	1
	.byte	84
	.word	.L154-.L394,.L1191-.L394
	.half	1
	.byte	84
	.word	.L1198-.L394,.L1196-.L394
	.half	1
	.byte	84
	.word	.L1200-.L394,.L164-.L394
	.half	1
	.byte	84
	.word	0,0
.L888:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_RxInit')
	.sect	'.debug_loc'
.L367:
	.word	-1,.L368,0,.L980-.L368
	.half	2
	.byte	138,0
	.word	0,0
.L981:
	.word	-1,.L368,.L1143-.L368,.L980-.L368
	.half	1
	.byte	88
	.word	.L1144-.L368,.L1145-.L368
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_RxTimerOutMonitor')
	.sect	'.debug_loc'
.L373:
	.word	-1,.L374,0,.L982-.L374
	.half	2
	.byte	138,0
	.word	0,0
.L983:
	.word	-1,.L374,0,.L96-.L374
	.half	1
	.byte	84
	.word	.L1154-.L374,.L982-.L374
	.half	1
	.byte	88
	.word	0,0
.L984:
	.word	-1,.L374,.L1155-.L374,.L1156-.L374
	.half	1
	.byte	89
	.word	.L95-.L374,.L982-.L374
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SendDynSignal')
	.sect	'.debug_loc'
.L387:
	.word	-1,.L388,0,.L775-.L388
	.half	2
	.byte	138,0
	.word	0,0
.L778:
	.word	-1,.L388,0,.L1178-.L388
	.half	1
	.byte	85
	.word	0,0
.L777:
	.word	-1,.L388,0,.L1179-.L388
	.half	1
	.byte	100
	.word	0,0
.L776:
	.word	-1,.L388,0,.L1180-.L388
	.half	1
	.byte	84
	.word	0,0
.L779:
	.word	-1,.L388,.L1181-.L388,.L775-.L388
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SendSignal')
	.sect	'.debug_loc'
.L383:
	.word	-1,.L384,0,.L770-.L384
	.half	2
	.byte	138,0
	.word	0,0
.L773:
	.word	-1,.L384,0,.L1168-.L384
	.half	1
	.byte	100
	.word	.L112-.L384,.L1172-.L384
	.half	1
	.byte	100
	.word	.L115-.L384,.L1174-.L384
	.half	1
	.byte	100
	.word	.L117-.L384,.L1171-.L384
	.half	1
	.byte	100
	.word	0,0
.L771:
	.word	-1,.L384,0,.L1169-.L384
	.half	1
	.byte	84
	.word	.L112-.L384,.L1173-.L384
	.half	1
	.byte	84
	.word	.L115-.L384,.L1175-.L384
	.half	1
	.byte	84
	.word	.L117-.L384,.L1171-.L384
	.half	1
	.byte	84
	.word	0,0
.L774:
	.word	-1,.L384,.L1170-.L384,.L1171-.L384
	.half	1
	.byte	88
	.word	.L1171-.L384,.L113-.L384
	.half	1
	.byte	82
	.word	.L113-.L384,.L770-.L384
	.half	1
	.byte	88
	.word	.L1176-.L384,.L770-.L384
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_loc'
.L439:
	.word	-1,.L440,0,.L851-.L440
	.half	2
	.byte	138,0
	.word	0,0
.L852:
	.word	-1,.L440,0,.L1333-.L440
	.half	1
	.byte	84
	.word	0,0
.L853:
	.word	-1,.L440,.L1334-.L440,.L851-.L440
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_loc'
.L419:
	.word	-1,.L420,0,.L827-.L420
	.half	2
	.byte	138,0
	.word	0,0
.L831:
	.word	-1,.L420,.L1268-.L420,.L1269-.L420
	.half	5
	.byte	144,32,157,32,0
	.word	.L236-.L420,.L827-.L420
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L832:
	.word	-1,.L420,.L1266-.L420,.L1267-.L420
	.half	1
	.byte	95
	.word	.L236-.L420,.L1272-.L420
	.half	1
	.byte	95
	.word	0,0
.L830:
	.word	-1,.L420,0,.L1260-.L420
	.half	1
	.byte	85
	.word	.L230-.L420,.L1262-.L420
	.half	1
	.byte	85
	.word	.L232-.L420,.L1264-.L420
	.half	1
	.byte	85
	.word	.L234-.L420,.L827-.L420
	.half	1
	.byte	85
	.word	0,0
.L829:
	.word	-1,.L420,0,.L1261-.L420
	.half	1
	.byte	84
	.word	.L230-.L420,.L1263-.L420
	.half	1
	.byte	84
	.word	.L232-.L420,.L1265-.L420
	.half	1
	.byte	84
	.word	.L234-.L420,.L827-.L420
	.half	1
	.byte	84
	.word	0,0
.L828:
	.word	-1,.L420,0,.L827-.L420
	.half	1
	.byte	100
	.word	0,0
.L833:
	.word	-1,.L420,.L1270-.L420,.L1269-.L420
	.half	1
	.byte	81
	.word	.L1269-.L420,.L1271-.L420
	.half	5
	.byte	144,32,157,32,0
	.word	.L236-.L420,.L827-.L420
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.debug_loc'
.L375:
	.word	-1,.L376,0,.L954-.L376
	.half	2
	.byte	138,0
	.word	0,0
.L957:
	.word	-1,.L376,0,.L954-.L376
	.half	1
	.byte	85
	.word	0,0
.L958:
	.word	-1,.L376,0,.L954-.L376
	.half	1
	.byte	86
	.word	0,0
.L956:
	.word	-1,.L376,0,.L954-.L376
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_StartOfReception')
	.sect	'.debug_loc'
.L907:
	.word	-1,.L412,0,.L1246-.L412
	.half	1
	.byte	84
	.word	0,0
.L411:
	.word	-1,.L412,0,.L906-.L412
	.half	2
	.byte	138,0
	.word	0,0
.L908:
	.word	-1,.L412,0,.L1247-.L412
	.half	1
	.byte	100
	.word	0,0
.L910:
	.word	-1,.L412,0,.L1247-.L412
	.half	1
	.byte	101
	.word	0,0
.L909:
	.word	-1,.L412,0,.L1248-.L412
	.half	1
	.byte	85
	.word	0,0
.L911:
	.word	-1,.L412,.L1249-.L412,.L906-.L412
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_loc'
.L401:
	.word	-1,.L402,0,.L786-.L402
	.half	2
	.byte	138,0
	.word	0,0
.L788:
	.word	-1,.L402,0,.L1224-.L402
	.half	1
	.byte	85
	.word	.L194-.L402,.L786-.L402
	.half	1
	.byte	85
	.word	0,0
.L787:
	.word	-1,.L402,0,.L1225-.L402
	.half	1
	.byte	84
	.word	.L194-.L402,.L786-.L402
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SwitchRxPduMode')
	.sect	'.debug_loc'
.L365:
	.word	-1,.L366,0,.L976-.L366
	.half	2
	.byte	138,0
	.word	0,0
.L979:
	.word	-1,.L366,0,.L80-.L366
	.half	1
	.byte	86
	.word	0,0
.L977:
	.word	-1,.L366,0,.L80-.L366
	.half	1
	.byte	84
	.word	.L1130-.L366,.L1131-.L366
	.half	1
	.byte	88
	.word	.L80-.L366,.L1134-.L366
	.half	1
	.byte	88
	.word	.L82-.L366,.L1137-.L366
	.half	1
	.byte	88
	.word	.L1138-.L366,.L1139-.L366
	.half	1
	.byte	88
	.word	.L1140-.L366,.L1141-.L366
	.half	1
	.byte	88
	.word	0,0
.L978:
	.word	-1,.L366,0,.L80-.L366
	.half	1
	.byte	85
	.word	.L1132-.L366,.L1133-.L366
	.half	1
	.byte	89
	.word	.L1135-.L366,.L1136-.L366
	.half	1
	.byte	89
	.word	.L1141-.L366,.L1142-.L366
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_SwitchTxPduMode')
	.sect	'.debug_loc'
.L339:
	.word	-1,.L340,0,.L925-.L340
	.half	2
	.byte	138,0
	.word	0,0
.L928:
	.word	-1,.L340,0,.L36-.L340
	.half	1
	.byte	86
	.word	0,0
.L926:
	.word	-1,.L340,0,.L36-.L340
	.half	1
	.byte	84
	.word	.L1073-.L340,.L1074-.L340
	.half	1
	.byte	88
	.word	.L1075-.L340,.L1076-.L340
	.half	1
	.byte	88
	.word	.L1077-.L340,.L1078-.L340
	.half	1
	.byte	88
	.word	.L1081-.L340,.L1082-.L340
	.half	1
	.byte	88
	.word	.L1083-.L340,.L1084-.L340
	.half	1
	.byte	88
	.word	0,0
.L927:
	.word	-1,.L340,0,.L36-.L340
	.half	1
	.byte	85
	.word	.L1079-.L340,.L1080-.L340
	.half	1
	.byte	89
	.word	.L1084-.L340,.L1085-.L340
	.half	1
	.byte	89
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TpRxIndication')
	.sect	'.debug_loc'
.L415:
	.word	-1,.L416,0,.L903-.L416
	.half	2
	.byte	138,0
	.word	0,0
.L904:
	.word	-1,.L416,0,.L1253-.L416
	.half	1
	.byte	84
	.word	0,0
.L905:
	.word	-1,.L416,0,.L1254-.L416
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TpTxConfirmation')
	.sect	'.debug_loc'
.L407:
	.word	-1,.L408,0,.L891-.L408
	.half	2
	.byte	138,0
	.word	0,0
.L893:
	.word	-1,.L408,0,.L1241-.L408
	.half	1
	.byte	85
	.word	0,0
.L892:
	.word	-1,.L408,0,.L1242-.L408
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TransmitPdu')
	.sect	'.debug_loc'
.L353:
	.word	-1,.L354,0,.L1099-.L354
	.half	2
	.byte	138,0
	.word	.L1099-.L354,.L65-.L354
	.half	2
	.byte	138,8
	.word	.L65-.L354,.L65-.L354
	.half	2
	.byte	138,0
	.word	.L65-.L354,.L945-.L354
	.half	2
	.byte	138,8
	.word	.L945-.L354,.L945-.L354
	.half	2
	.byte	138,0
	.word	0,0
.L948:
	.word	-1,.L354,0,.L945-.L354
	.half	2
	.byte	145,120
	.word	0,0
.L950:
	.word	-1,.L354,.L1101-.L354,.L1102-.L354
	.half	1
	.byte	82
	.word	0,0
.L946:
	.word	-1,.L354,0,.L63-.L354
	.half	1
	.byte	84
	.word	.L1100-.L354,.L945-.L354
	.half	1
	.byte	88
	.word	.L1103-.L354,.L945-.L354
	.half	1
	.byte	84
	.word	0,0
.L949:
	.word	-1,.L354,.L1102-.L354,.L64-.L354
	.half	1
	.byte	82
	.word	.L65-.L354,.L945-.L354
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_loc'
.L403:
	.word	-1,.L404,0,.L783-.L404
	.half	2
	.byte	138,0
	.word	0,0
.L784:
	.word	-1,.L404,0,.L1226-.L404
	.half	1
	.byte	84
	.word	.L195-.L404,.L1228-.L404
	.half	1
	.byte	84
	.word	.L197-.L404,.L196-.L404
	.half	1
	.byte	84
	.word	0,0
.L785:
	.word	-1,.L404,.L1227-.L404,.L783-.L404
	.half	1
	.byte	88
	.word	.L1229-.L404,.L783-.L404
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TriggerTransmit')
	.sect	'.debug_loc'
.L405:
	.word	-1,.L406,0,.L877-.L406
	.half	2
	.byte	138,0
	.word	0,0
.L880:
	.word	-1,.L406,0,.L1230-.L406
	.half	1
	.byte	100
	.word	.L1232-.L406,.L877-.L406
	.half	1
	.byte	108
	.word	.L201-.L406,.L1234-.L406
	.half	1
	.byte	100
	.word	0,0
.L878:
	.word	-1,.L406,0,.L1231-.L406
	.half	1
	.byte	84
	.word	.L201-.L406,.L1235-.L406
	.half	1
	.byte	84
	.word	.L205-.L406,.L1236-.L406
	.half	1
	.byte	84
	.word	.L207-.L406,.L1238-.L406
	.half	1
	.byte	84
	.word	0,0
.L882:
	.word	-1,.L406,.L1237-.L406,.L203-.L406
	.half	1
	.byte	89
	.word	.L207-.L406,.L202-.L406
	.half	1
	.byte	89
	.word	.L1238-.L406,.L1239-.L406
	.half	1
	.byte	84
	.word	0,0
.L881:
	.word	-1,.L406,.L1233-.L406,.L877-.L406
	.half	1
	.byte	88
	.word	.L1240-.L406,.L877-.L406
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_loc'
.L389:
	.word	-1,.L390,0,.L889-.L390
	.half	2
	.byte	138,0
	.word	0,0
.L890:
	.word	-1,.L390,0,.L1182-.L390
	.half	1
	.byte	84
	.word	.L1183-.L390,.L889-.L390
	.half	1
	.byte	88
	.word	.L124-.L390,.L1184-.L390
	.half	1
	.byte	84
	.word	.L127-.L390,.L1185-.L390
	.half	1
	.byte	84
	.word	.L131-.L390,.L132-.L390
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TxInit')
	.sect	'.debug_loc'
.L343:
	.word	-1,.L344,0,.L932-.L344
	.half	2
	.byte	138,0
	.word	0,0
.L933:
	.word	-1,.L344,.L1088-.L344,.L932-.L344
	.half	1
	.byte	88
	.word	.L1089-.L344,.L1090-.L344
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_TxModeProcess')
	.sect	'.debug_loc'
.L351:
	.word	-1,.L352,0,.L942-.L352
	.half	2
	.byte	138,0
	.word	0,0
.L943:
	.word	-1,.L352,0,.L1093-.L352
	.half	1
	.byte	84
	.word	.L1094-.L352,.L942-.L352
	.half	1
	.byte	88
	.word	.L55-.L352,.L1096-.L352
	.half	1
	.byte	84
	.word	.L54-.L352,.L56-.L352
	.half	1
	.byte	84
	.word	0,0
.L944:
	.word	-1,.L352,.L1095-.L352,.L1096-.L352
	.half	1
	.byte	89
	.word	.L1096-.L352,.L54-.L352
	.half	1
	.byte	82
	.word	.L1097-.L352,.L942-.L352
	.half	1
	.byte	89
	.word	.L1098-.L352,.L942-.L352
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Com_WriteSignal_Internal')
	.sect	'.debug_loc'
.L869:
	.word	-1,.L334,.L1052-.L334,.L1051-.L334
	.half	1
	.byte	86
	.word	0,0
.L333:
	.word	-1,.L334,0,.L864-.L334
	.half	2
	.byte	138,0
	.word	0,0
.L866:
	.word	-1,.L334,0,.L1045-.L334
	.half	1
	.byte	100
	.word	0,0
.L865:
	.word	-1,.L334,0,.L1046-.L334
	.half	1
	.byte	84
	.word	.L1047-.L334,.L864-.L334
	.half	1
	.byte	89
	.word	0,0
.L868:
	.word	-1,.L334,.L1048-.L334,.L864-.L334
	.half	1
	.byte	88
	.word	.L1050-.L334,.L1051-.L334
	.half	1
	.byte	85
	.word	0,0
.L867:
	.word	-1,.L334,0,.L1045-.L334
	.half	1
	.byte	85
	.word	.L1046-.L334,.L1045-.L334
	.half	1
	.byte	84
	.word	0,0
.L870:
	.word	-1,.L334,.L1049-.L334,.L864-.L334
	.half	1
	.byte	90
	.word	.L1053-.L334,.L864-.L334
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2255:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Com_IsPduStart')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L328,.L1002-.L328
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupStart_Internal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L330,.L992-.L330
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupStop_Internal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L332,.L997-.L332
	.sdecl	'.debug_frame',debug,cluster('Com_WriteSignal_Internal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L334,.L864-.L334
	.sdecl	'.debug_frame',debug,cluster('Com_InitTxPduValue')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L336,.L920-.L336
	.sdecl	'.debug_frame',debug,cluster('Com_InitTxPdu')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L338,.L917-.L338
	.sdecl	'.debug_frame',debug,cluster('Com_SwitchTxPduMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L340,.L925-.L340
	.sdecl	'.debug_frame',debug,cluster('Com_CbkTxErrAck_PDU')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L342,.L929-.L342
	.sdecl	'.debug_frame',debug,cluster('Com_TxInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L344,.L932-.L344
	.sdecl	'.debug_frame',debug,cluster('Com_HandleDirect')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L346,.L934-.L346
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_HandlePeriod')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L348,.L937-.L348
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Com_HandleNone')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L350,.L940-.L350
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_TxModeProcess')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L352,.L942-.L352
	.sdecl	'.debug_frame',debug,cluster('Com_TransmitPdu')
	.sect	'.debug_frame'
	.word	52
	.word	.L2255,.L354,.L945-.L354
	.byte	4
	.word	(.L1099-.L354)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L65-.L1099)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L945-.L65)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Com_CbkTxAck_PDU')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L356,.L951-.L356
	.sdecl	'.debug_frame',debug,cluster('Com_ProcessTxConf')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L358,.L959-.L358
	.sdecl	'.debug_frame',debug,cluster('Com_CheckRxLength')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L360,.L964-.L360
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_InitRxPduValue')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L362,.L985-.L362
	.sdecl	'.debug_frame',debug,cluster('Com_InitRxPdu')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L364,.L973-.L364
	.sdecl	'.debug_frame',debug,cluster('Com_SwitchRxPduMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L366,.L976-.L366
	.sdecl	'.debug_frame',debug,cluster('Com_RxInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L368,.L980-.L368
	.sdecl	'.debug_frame',debug,cluster('Com_ReplaceRxSignalWithInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L370,.L968-.L370
	.sdecl	'.debug_frame',debug,cluster('Com_HandleRxPdu_DirectCopy')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L372,.L989-.L372
	.sdecl	'.debug_frame',debug,cluster('Com_RxTimerOutMonitor')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L374,.L982-.L374
	.sdecl	'.debug_frame',debug,cluster('Com_SetIpduTrigRepFlag')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L376,.L954-.L376
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L378,.L760-.L378
	.sdecl	'.debug_frame',debug,cluster('Com_DeInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L380,.L765-.L380
	.sdecl	'.debug_frame',debug,cluster('Com_GetStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L382,.L769-.L382
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_SendSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L384,.L770-.L384
	.sdecl	'.debug_frame',debug,cluster('Com_InvalidateSignal')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L386,.L780-.L386
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Com_SendDynSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L388,.L775-.L388
	.sdecl	'.debug_frame',debug,cluster('Com_TxConfirmation')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L390,.L889-.L390
	.sdecl	'.debug_frame',debug,cluster('Com_MainFunctionTx')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L392,.L803-.L392
	.sdecl	'.debug_frame',debug,cluster('Com_RxIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L394,.L883-.L394
	.sdecl	'.debug_frame',debug,cluster('Com_MainFunctionRx')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L396,.L801-.L396
	.sdecl	'.debug_frame',debug,cluster('Com_ReceiveSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L398,.L789-.L398
	.sdecl	'.debug_frame',debug,cluster('Com_ReceiveDynSignal')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L400,.L795-.L400
	.sdecl	'.debug_frame',debug,cluster('Com_SwitchIpduTxMode')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L402,.L786-.L402
	.sdecl	'.debug_frame',debug,cluster('Com_TriggerIPDUSend')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L404,.L783-.L404
	.sdecl	'.debug_frame',debug,cluster('Com_TriggerTransmit')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L406,.L877-.L406
	.sdecl	'.debug_frame',debug,cluster('Com_TpTxConfirmation')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L408,.L891-.L408
	.sdecl	'.debug_frame',debug,cluster('Com_CopyTxData')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L410,.L895-.L410
	.sdecl	'.debug_frame',debug,cluster('Com_StartOfReception')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L412,.L906-.L412
	.sdecl	'.debug_frame',debug,cluster('Com_CopyRxData')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L414,.L912-.L414
	.sdecl	'.debug_frame',debug,cluster('Com_TpRxIndication')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L416,.L903-.L416
	.sdecl	'.debug_frame',debug,cluster('Com_ClearIpduGroupVector')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L418,.L823-.L418
	.sdecl	'.debug_frame',debug,cluster('Com_SetIpduGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L420,.L827-.L420
	.sdecl	'.debug_frame',debug,cluster('Com_IsPduDMEnable_Internal')
	.sect	'.debug_frame'
	.word	24
	.word	.L2255,.L422,.L1010-.L422
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Com_ReceptionDMControl')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L424,.L815-.L424
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupControl')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L426,.L807-.L426
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupStart')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L428,.L837-.L428
	.sdecl	'.debug_frame',debug,cluster('Com_IpduGroupStop')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L430,.L840-.L430
	.sdecl	'.debug_frame',debug,cluster('Com_GetIpduGroupState')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L432,.L834-.L432
	.sdecl	'.debug_frame',debug,cluster('Com_EnableReceptionDM')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L434,.L842-.L434
	.sdecl	'.debug_frame',debug,cluster('Com_DisableReceptionDM')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L436,.L846-.L436
	.sdecl	'.debug_frame',debug,cluster('Com_MainFunctionRouteSignals')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L438,.L806-.L438
	.sdecl	'.debug_frame',debug,cluster('Com_SendSignalGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L440,.L851-.L440
	.sdecl	'.debug_frame',debug,cluster('Com_InvalidateSignalGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L442,.L854-.L442
	.sdecl	'.debug_frame',debug,cluster('Com_ReceiveSignalGroup')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L444,.L857-.L444
	.sdecl	'.debug_frame',debug,cluster('Com_GetTxIpduState')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L446,.L871-.L446
	.sdecl	'.debug_frame',debug,cluster('Com_GetRxIpduState')
	.sect	'.debug_frame'
	.word	12
	.word	.L2255,.L448,.L874-.L448

; ..\EAS\BSW\Com\Com.c	  6734  #endif
; ..\EAS\BSW\Com\Com.c	  6735  
; ..\EAS\BSW\Com\Com.c	  6736  
; ..\EAS\BSW\Com\Com.c	  6737  
; ..\EAS\BSW\Com\Com.c	  6738  
; ..\EAS\BSW\Com\Com.c	  6739  #define COM_STOP_SEC_CODE
; ..\EAS\BSW\Com\Com.c	  6740  #include "MemMap.h"
; ..\EAS\BSW\Com\Com.c	  6741  

	; Module end
