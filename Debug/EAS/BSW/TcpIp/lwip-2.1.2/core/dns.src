	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc34220a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\.dns.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\dns.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\dns.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\dns.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\dns.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4541
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\dns.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	162
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	164
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	187
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	187
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	234
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	271
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	187
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	187
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	234
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	370
	.byte	3
	.word	187
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	464
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	493
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	187
	.byte	8,4
	.word	271
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	598
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	607
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	234
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	234
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	598
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	680
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	187
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	187
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	187
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	187
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	187
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	607
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	607
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	922
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	187
	.byte	8,3
	.word	187
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	187
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1079
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1088
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	234
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1222
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	187
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	187
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	187
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	187
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	187
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	187
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1333
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	187
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	187
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	187
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	187
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	187
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	187
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	234
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	234
	.byte	8,1
	.word	187
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1787
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1787
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1796
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1872
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	680
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2008
	.byte	12
	.word	187
	.byte	3
	.word	2122
	.byte	12
	.word	187
	.byte	3
	.word	2132
	.byte	12
	.word	187
	.byte	3
	.word	2142
	.byte	12
	.word	1872
	.byte	3
	.word	2152
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	234
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	234
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	234
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	187
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	187
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	187
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	187
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	680
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2127
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2137
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2147
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2157
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2162
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	271
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	271
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	271
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2514
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	234
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	271
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2664
	.byte	12
	.word	2514
	.byte	3
	.word	2801
	.byte	12
	.word	2664
	.byte	3
	.word	2811
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	187
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	187
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	187
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	187
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	187
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	234
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2157
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2806
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2816
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2821
	.byte	12
	.word	187
	.byte	3
	.word	3106
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	187
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3111
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3111
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3116
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1872
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	187
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	187
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	187
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	187
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3280
	.byte	3
	.word	1796
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	271
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	187
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	187
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	187
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	187
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	234
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3425
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	464
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3430
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	271
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	187
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1872
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	187
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	187
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	187
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3425
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3645
	.byte	12
	.word	3430
	.byte	3
	.word	3815
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	234
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	234
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	464
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	234
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	234
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3111
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3820
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3825
	.byte	12
	.word	3645
	.byte	3
	.word	4049
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	234
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4054
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4059
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	234
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	234
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	464
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4159
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	234
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	234
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	464
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4256
	.byte	8,8
	.word	187
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	187
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	187
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4350
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4059
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4059
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4256
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4159
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4359
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	187
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\dns.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     3   * DNS - host name to IP address resolver.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     4   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     5   * @defgroup dns DNS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     6   * @ingroup callbackstyle_api
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     7   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     8   * Implements a DNS host name to IP address resolver.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    10   * The lwIP DNS resolver functions are used to lookup a host name and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    11   * map it to a numerical IP address. It maintains a list of resolved
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    12   * hostnames that can be queried with the dns_lookup() function.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    13   * New hostnames can be resolved using the dns_query() function.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    14   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    15   * The lwIP version of the resolver also adds a non-blocking version of
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    16   * gethostbyname() that will work with a raw API application. This function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    17   * checks for an IP address string first and converts it if it is valid.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    18   * gethostbyname() then does a dns_lookup() to see if the name is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    19   * already in the table. If so, the IP is returned. If not, a query is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    20   * issued and the function returns with a ERR_INPROGRESS status. The app
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    21   * using the dns client must then go into a waiting state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    22   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    23   * Once a hostname has been resolved (or found to be non-existent),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    24   * the resolver code calls a specified callback function (which
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    25   * must be implemented by the module that uses the resolver).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    26   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    27   * Multicast DNS queries are supported for names ending on ".local".
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    28   * However, only "One-Shot Multicast DNS Queries" are supported (RFC 6762
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    29   * chapter 5.1), this is not a fully compliant implementation of continuous
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    30   * mDNS querying!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    31   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    32   * All functions must be called from TCPIP thread.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    34   * @see DNS_MAX_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    35   * @see LWIP_DHCP_MAX_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    36   * @see @ref netconn_common for thread-safe access.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    37   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    38  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    39  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    40   * Port to lwIP from uIP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    41   * by Jim Pettinato April 2007
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    42   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    43   * security fixes and more by Simon Goldschmidt
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    44   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    45   * uIP version Copyright (c) 2002-2003, Adam Dunkels.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    46   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    47   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    48   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    49   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    50   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    51   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    52   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    53   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    54   *    notice, this list of conditions and the following disclaimer in the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    55   *    documentation and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    56   * 3. The name of the author may not be used to endorse or promote
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    57   *    products derived from this software without specific prior
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    58   *    written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    59   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    60   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    61   * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    62   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    63   * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    64   * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    65   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    66   * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    67   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    68   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    69   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    70   * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    71   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    72  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    73  /*-----------------------------------------------------------------------------
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    74   * RFC 1035 - Domain names - implementation and specification
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    75   * RFC 2181 - Clarifications to the DNS Specification
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    76   *----------------------------------------------------------------------------*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    77  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    78  /** @todo: define good default values (rfc compliance) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    79  /** @todo: improve answer parsing, more checkings... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    80  /** @todo: check RFC1035 - 7.3. Processing responses */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    81  /** @todo: one-shot mDNS: dual-stack fallback to another IP version */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    82  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    83  /*-----------------------------------------------------------------------------
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    84   * Includes
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    85   *----------------------------------------------------------------------------*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    86  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    87  #include "lwip/opt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    88  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    89  #if LWIP_DNS /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    90  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    91  #include "lwip/def.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    92  #include "lwip/udp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    93  #include "lwip/mem.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    94  #include "lwip/memp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    95  #include "lwip/dns.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    96  #include "lwip/prot/dns.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    97  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    98  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	    99  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   100  /** Random generator function to create random TXIDs and source ports for queries */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   101  #ifndef DNS_RAND_TXID
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   102  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_XID) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   103  #define DNS_RAND_TXID LWIP_RAND
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   104  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   105  static u16_t dns_txid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   106  #define DNS_RAND_TXID() (++dns_txid)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   107  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   108  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   109  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   110  /** Limits the source port to be >= 1024 by default */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   111  #ifndef DNS_PORT_ALLOWED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   112  #define DNS_PORT_ALLOWED(port) ((port) >= 1024)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   113  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   114  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   115  /** DNS resource record max. TTL (one week as default) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   116  #ifndef DNS_MAX_TTL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   117  #define DNS_MAX_TTL               604800
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   118  #elif DNS_MAX_TTL > 0x7FFFFFFF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   119  #error DNS_MAX_TTL must be a positive 32-bit value
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   120  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   121  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   122  #if DNS_TABLE_SIZE > 255
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   123  #error DNS_TABLE_SIZE must fit into an u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   124  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   125  #if DNS_MAX_SERVERS > 255
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   126  #error DNS_MAX_SERVERS must fit into an u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   127  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   128  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   129  /* The number of parallel requests (i.e. calls to dns_gethostbyname
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   130   * that cannot be answered from the DNS table.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   131   * This is set to the table size by default.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   132   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   133  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   134  #ifndef DNS_MAX_REQUESTS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   135  #define DNS_MAX_REQUESTS          DNS_TABLE_SIZE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   136  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   137  #if DNS_MAX_REQUESTS > 255
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   138  #error DNS_MAX_REQUESTS must fit into an u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   139  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   140  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   141  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   142  /* In this configuration, both arrays have to have the same size and are used
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   143   * like one entry (used/free) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   144  #define DNS_MAX_REQUESTS          DNS_TABLE_SIZE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   145  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   146  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   147  /* The number of UDP source ports used in parallel */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   148  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   149  #ifndef DNS_MAX_SOURCE_PORTS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   150  #define DNS_MAX_SOURCE_PORTS      DNS_MAX_REQUESTS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   151  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   152  #if DNS_MAX_SOURCE_PORTS > 255
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   153  #error DNS_MAX_SOURCE_PORTS must fit into an u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   154  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   155  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   156  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   157  #ifdef DNS_MAX_SOURCE_PORTS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   158  #undef DNS_MAX_SOURCE_PORTS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   159  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   160  #define DNS_MAX_SOURCE_PORTS      1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   161  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   162  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   163  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   164  #define LWIP_DNS_ADDRTYPE_IS_IPV6(t) (((t) == LWIP_DNS_ADDRTYPE_IPV6_IPV4) || ((t) == LWIP_DNS_ADDRTYPE_IPV6))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   165  #define LWIP_DNS_ADDRTYPE_MATCH_IP(t, ip) (IP_IS_V6_VAL(ip) ? LWIP_DNS_ADDRTYPE_IS_IPV6(t) : (!LWIP_DNS_ADDRTYPE_IS_IPV6(t)))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   166  #define LWIP_DNS_ADDRTYPE_ARG(x) , x
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   167  #define LWIP_DNS_ADDRTYPE_ARG_OR_ZERO(x) x
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   168  #define LWIP_DNS_SET_ADDRTYPE(x, y) do { x = y; } while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   169  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   170  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   171  #define LWIP_DNS_ADDRTYPE_IS_IPV6(t) 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   172  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   173  #define LWIP_DNS_ADDRTYPE_IS_IPV6(t) 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   174  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   175  #define LWIP_DNS_ADDRTYPE_MATCH_IP(t, ip) 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   176  #define LWIP_DNS_ADDRTYPE_ARG(x)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   177  #define LWIP_DNS_ADDRTYPE_ARG_OR_ZERO(x) 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   178  #define LWIP_DNS_SET_ADDRTYPE(x, y)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   179  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   181  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   182  #define LWIP_DNS_ISMDNS_ARG(x) , x
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   183  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   184  #define LWIP_DNS_ISMDNS_ARG(x)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   185  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   186  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   187  /** DNS query message structure.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   188      No packing needed: only used locally on the stack. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   189  struct dns_query {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   190    /* DNS query record starts with either a domain name or a pointer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   191       to a name already present somewhere in the packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   192    u16_t type;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   193    u16_t cls;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   194  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   195  #define SIZEOF_DNS_QUERY 4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   196  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   197  /** DNS answer message structure.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   198      No packing needed: only used locally on the stack. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   199  struct dns_answer {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   200    /* DNS answer record starts with either a domain name or a pointer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   201       to a name already present somewhere in the packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   202    u16_t type;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   203    u16_t cls;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   204    u32_t ttl;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   205    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   206  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   207  #define SIZEOF_DNS_ANSWER 10
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   208  /* maximum allowed size for the struct due to non-packed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   209  #define SIZEOF_DNS_ANSWER_ASSERT 12
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   210  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   211  /* DNS table entry states */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   212  typedef enum {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   213    DNS_STATE_UNUSED           = 0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   214    DNS_STATE_NEW              = 1,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   215    DNS_STATE_ASKING           = 2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   216    DNS_STATE_DONE             = 3
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   217  } dns_state_enum_t;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   218  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   219  /** DNS table entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   220  struct dns_table_entry {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   221    u32_t ttl;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   222    ip_addr_t ipaddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   223    u16_t txid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   224    u8_t  state;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   225    u8_t  server_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   226    u8_t  tmr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   227    u8_t  retries;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   228    u8_t  seqno;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   229  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   230    u8_t pcb_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   231  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   232    char name[DNS_MAX_NAME_LENGTH];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   233  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   234    u8_t reqaddrtype;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   235  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   236  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   237    u8_t is_mdns;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   238  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   239  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   240  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   241  /** DNS request table entry: used when dns_gehostbyname cannot answer the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   242   * request from the DNS table */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   243  struct dns_req_entry {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   244    /* pointer to callback on DNS query done */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   245    dns_found_callback found;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   246    /* argument passed to the callback function */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   247    void *arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   248  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   249    u8_t dns_table_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   250  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   251  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   252    u8_t reqaddrtype;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   253  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   254  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   255  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   256  #if DNS_LOCAL_HOSTLIST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   257  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   258  #if DNS_LOCAL_HOSTLIST_IS_DYNAMIC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   259  /** Local host-list. For hostnames in this list, no
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   260   *  external name resolution is performed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   261  static struct local_hostlist_entry *local_hostlist_dynamic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   262  #else /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   263  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   264  /** Defining this allows the local_hostlist_static to be placed in a different
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   265   * linker section (e.g. FLASH) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   266  #ifndef DNS_LOCAL_HOSTLIST_STORAGE_PRE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   267  #define DNS_LOCAL_HOSTLIST_STORAGE_PRE static
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   268  #endif /* DNS_LOCAL_HOSTLIST_STORAGE_PRE */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   269  /** Defining this allows the local_hostlist_static to be placed in a different
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   270   * linker section (e.g. FLASH) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   271  #ifndef DNS_LOCAL_HOSTLIST_STORAGE_POST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   272  #define DNS_LOCAL_HOSTLIST_STORAGE_POST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   273  #endif /* DNS_LOCAL_HOSTLIST_STORAGE_POST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   274  DNS_LOCAL_HOSTLIST_STORAGE_PRE struct local_hostlist_entry local_hostlist_static[]
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   275    DNS_LOCAL_HOSTLIST_STORAGE_POST = DNS_LOCAL_HOSTLIST_INIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   276  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   277  #endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   278  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   279  static void dns_init_local(void);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   280  static err_t dns_lookup_local(const char *hostname, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   281  #endif /* DNS_LOCAL_HOSTLIST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   282  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   283  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   284  /* forward declarations */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   285  static void dns_recv(void *s, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   286  static void dns_check_entries(void);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   287  static void dns_call_found(u8_t idx, ip_addr_t *addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   288  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   289  /*-----------------------------------------------------------------------------
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   290   * Globals
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   291   *----------------------------------------------------------------------------*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   292  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   293  /* DNS variables */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   294  static struct udp_pcb        *dns_pcbs[DNS_MAX_SOURCE_PORTS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   295  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   296  static u8_t                   dns_last_pcb_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   297  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   298  static u8_t                   dns_seqno;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   299  static struct dns_table_entry dns_table[DNS_TABLE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   300  static struct dns_req_entry   dns_requests[DNS_MAX_REQUESTS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   301  static ip_addr_t              dns_servers[DNS_MAX_SERVERS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   302  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   303  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   304  const ip_addr_t dns_mquery_v4group = DNS_MQUERY_IPV4_GROUP_INIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   305  #endif /* LWIP_IPV4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   306  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   307  const ip_addr_t dns_mquery_v6group = DNS_MQUERY_IPV6_GROUP_INIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   308  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   309  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   310  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   311   * Initialize the resolver: set up the UDP pcb and configure the default server
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   312   * (if DNS_SERVER_ADDRESS is set).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   313   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   314  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   315  dns_init(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   316  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   317  #ifdef DNS_SERVER_ADDRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   318    /* initialize default DNS server address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   319    ip_addr_t dnsserver;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   320    DNS_SERVER_ADDRESS(&dnsserver);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   321    dns_setserver(0, &dnsserver);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   322  #endif /* DNS_SERVER_ADDRESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   323  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   324    LWIP_ASSERT("sanity check SIZEOF_DNS_QUERY",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   325                sizeof(struct dns_query) == SIZEOF_DNS_QUERY);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   326    LWIP_ASSERT("sanity check SIZEOF_DNS_ANSWER",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   327                sizeof(struct dns_answer) <= SIZEOF_DNS_ANSWER_ASSERT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   328  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   329    LWIP_DEBUGF(DNS_DEBUG, ("dns_init: initializing\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   330  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   331    /* if dns client not yet initialized... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   332  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   333    if (dns_pcbs[0] == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   334      dns_pcbs[0] = udp_new_ip_type(IPADDR_TYPE_ANY);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   335      LWIP_ASSERT("dns_pcbs[0] != NULL", dns_pcbs[0] != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   336  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   337      /* initialize DNS table not needed (initialized to zero since it is a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   338       * global variable) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   339      LWIP_ASSERT("For implicit initialization to work, DNS_STATE_UNUSED needs to be 0",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   340                  DNS_STATE_UNUSED == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   341  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   342      /* initialize DNS client */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   343      udp_bind(dns_pcbs[0], IP_ANY_TYPE, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   344      udp_recv(dns_pcbs[0], dns_recv, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   345    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   346  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   347  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   348  #if DNS_LOCAL_HOSTLIST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   349    dns_init_local();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   350  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   351  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   352  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   353  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   354   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   355   * Initialize one of the DNS servers.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   356   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   357   * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   358   * @param dnsserver IP address of the DNS server to set
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   359   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   360  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   361  dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   362  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   363    if (numdns < DNS_MAX_SERVERS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   364      if (dnsserver != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   365        dns_servers[numdns] = (*dnsserver);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   366      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   367        dns_servers[numdns] = *IP_ADDR_ANY;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   368      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   369    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   370  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   371  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   372  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   373   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   374   * Obtain one of the currently configured DNS server.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   375   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   376   * @param numdns the index of the DNS server
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   377   * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   378   *         server has not been configured.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   379   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   380  const ip_addr_t *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   381  dns_getserver(u8_t numdns)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   382  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   383    if (numdns < DNS_MAX_SERVERS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   384      return &dns_servers[numdns];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   385    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   386      return IP_ADDR_ANY;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   387    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   388  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   389  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   390  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   391   * The DNS resolver client timer - handle retries and timeouts and should
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   392   * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   393   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   394  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   395  dns_tmr(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   396  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   397    LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   398    dns_check_entries();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   399  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   400  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   401  #if DNS_LOCAL_HOSTLIST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   402  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   403  dns_init_local(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   404  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   405  #if DNS_LOCAL_HOSTLIST_IS_DYNAMIC && defined(DNS_LOCAL_HOSTLIST_INIT)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   406    size_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   407    struct local_hostlist_entry *entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   408    /* Dynamic: copy entries from DNS_LOCAL_HOSTLIST_INIT to list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   409    struct local_hostlist_entry local_hostlist_init[] = DNS_LOCAL_HOSTLIST_INIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   410    size_t namelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   411    for (i = 0; i < LWIP_ARRAYSIZE(local_hostlist_init); i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   412      struct local_hostlist_entry *init_entry = &local_hostlist_init[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   413      LWIP_ASSERT("invalid host name (NULL)", init_entry->name != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   414      namelen = strlen(init_entry->name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   415      LWIP_ASSERT("namelen <= DNS_LOCAL_HOSTLIST_MAX_NAMELEN", namelen <= DNS_LOCAL_HOSTLIST_MAX_NAMELEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   416      entry = (struct local_hostlist_entry *)memp_malloc(MEMP_LOCALHOSTLIST);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   417      LWIP_ASSERT("mem-error in dns_init_local", entry != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   418      if (entry != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   419        char *entry_name = (char *)entry + sizeof(struct local_hostlist_entry);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   420        MEMCPY(entry_name, init_entry->name, namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   421        entry_name[namelen] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   422        entry->name = entry_name;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   423        entry->addr = init_entry->addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   424        entry->next = local_hostlist_dynamic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   425        local_hostlist_dynamic = entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   426      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   427    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   428  #endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC && defined(DNS_LOCAL_HOSTLIST_INIT) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   429  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   430  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   431  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   432   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   433   * Iterate the local host-list for a hostname.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   434   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   435   * @param iterator_fn a function that is called for every entry in the local host-list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   436   * @param iterator_arg 3rd argument passed to iterator_fn
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   437   * @return the number of entries in the local host-list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   438   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   439  size_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   440  dns_local_iterate(dns_found_callback iterator_fn, void *iterator_arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   441  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   442    size_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   443  #if DNS_LOCAL_HOSTLIST_IS_DYNAMIC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   444    struct local_hostlist_entry *entry = local_hostlist_dynamic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   445    i = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   446    while (entry != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   447      if (iterator_fn != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   448        iterator_fn(entry->name, &entry->addr, iterator_arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   449      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   450      i++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   451      entry = entry->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   452    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   453  #else /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   454    for (i = 0; i < LWIP_ARRAYSIZE(local_hostlist_static); i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   455      if (iterator_fn != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   456        iterator_fn(local_hostlist_static[i].name, &local_hostlist_static[i].addr, iterator_arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   457      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   458    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   459  #endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   460    return i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   461  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   462  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   463  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   464   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   465   * Scans the local host-list for a hostname.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   466   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   467   * @param hostname Hostname to look for in the local host-list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   468   * @param addr the first IP address for the hostname in the local host-list or
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   469   *         IPADDR_NONE if not found.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   470   * @param dns_addrtype - LWIP_DNS_ADDRTYPE_IPV4_IPV6: try to resolve IPv4 (ATTENTION: no fallback here!)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   471   *                     - LWIP_DNS_ADDRTYPE_IPV6_IPV4: try to resolve IPv6 (ATTENTION: no fallback here!)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   472   *                     - LWIP_DNS_ADDRTYPE_IPV4: try to resolve IPv4 only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   473   *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   474   * @return ERR_OK if found, ERR_ARG if not found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   475   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   476  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   477  dns_local_lookup(const char *hostname, ip_addr_t *addr, u8_t dns_addrtype)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   478  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   479    LWIP_UNUSED_ARG(dns_addrtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   480    return dns_lookup_local(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   481  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   482  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   483  /* Internal implementation for dns_local_lookup and dns_lookup */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   484  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   485  dns_lookup_local(const char *hostname, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   486  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   487  #if DNS_LOCAL_HOSTLIST_IS_DYNAMIC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   488    struct local_hostlist_entry *entry = local_hostlist_dynamic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   489    while (entry != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   490      if ((lwip_stricmp(entry->name, hostname) == 0) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   491          LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, entry->addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   492        if (addr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   493          ip_addr_copy(*addr, entry->addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   494        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   495        return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   496      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   497      entry = entry->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   498    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   499  #else /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   500    size_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   501    for (i = 0; i < LWIP_ARRAYSIZE(local_hostlist_static); i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   502      if ((lwip_stricmp(local_hostlist_static[i].name, hostname) == 0) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   503          LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, local_hostlist_static[i].addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   504        if (addr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   505          ip_addr_copy(*addr, local_hostlist_static[i].addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   506        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   507        return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   508      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   509    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   510  #endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   511    return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   512  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   513  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   514  #if DNS_LOCAL_HOSTLIST_IS_DYNAMIC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   515  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   516   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   517   * Remove all entries from the local host-list for a specific hostname
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   518   * and/or IP address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   519   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   520   * @param hostname hostname for which entries shall be removed from the local
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   521   *                 host-list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   522   * @param addr address for which entries shall be removed from the local host-list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   523   * @return the number of removed entries
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   524   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   525  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   526  dns_local_removehost(const char *hostname, const ip_addr_t *addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   527  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   528    int removed = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   529    struct local_hostlist_entry *entry = local_hostlist_dynamic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   530    struct local_hostlist_entry *last_entry = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   531    while (entry != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   532      if (((hostname == NULL) || !lwip_stricmp(entry->name, hostname)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   533          ((addr == NULL) || ip_addr_cmp(&entry->addr, addr))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   534        struct local_hostlist_entry *free_entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   535        if (last_entry != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   536          last_entry->next = entry->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   537        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   538          local_hostlist_dynamic = entry->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   539        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   540        free_entry = entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   541        entry = entry->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   542        memp_free(MEMP_LOCALHOSTLIST, free_entry);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   543        removed++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   544      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   545        last_entry = entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   546        entry = entry->next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   547      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   548    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   549    return removed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   550  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   551  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   552  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   553   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   554   * Add a hostname/IP address pair to the local host-list.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   555   * Duplicates are not checked.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   556   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   557   * @param hostname hostname of the new entry
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   558   * @param addr IP address of the new entry
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   559   * @return ERR_OK if succeeded or ERR_MEM on memory error
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   560   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   561  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   562  dns_local_addhost(const char *hostname, const ip_addr_t *addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   563  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   564    struct local_hostlist_entry *entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   565    size_t namelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   566    char *entry_name;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   567    LWIP_ASSERT("invalid host name (NULL)", hostname != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   568    namelen = strlen(hostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   569    LWIP_ASSERT("namelen <= DNS_LOCAL_HOSTLIST_MAX_NAMELEN", namelen <= DNS_LOCAL_HOSTLIST_MAX_NAMELEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   570    entry = (struct local_hostlist_entry *)memp_malloc(MEMP_LOCALHOSTLIST);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   571    if (entry == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   572      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   573    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   574    entry_name = (char *)entry + sizeof(struct local_hostlist_entry);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   575    MEMCPY(entry_name, hostname, namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   576    entry_name[namelen] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   577    entry->name = entry_name;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   578    ip_addr_copy(entry->addr, *addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   579    entry->next = local_hostlist_dynamic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   580    local_hostlist_dynamic = entry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   581    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   582  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   583  #endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   584  #endif /* DNS_LOCAL_HOSTLIST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   585  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   586  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   587   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   588   * Look up a hostname in the array of known hostnames.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   589   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   590   * @note This function only looks in the internal array of known
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   591   * hostnames, it does not send out a query for the hostname if none
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   592   * was found. The function dns_enqueue() can be used to send a query
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   593   * for a hostname.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   594   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   595   * @param name the hostname to look up
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   596   * @param addr the hostname's IP address, as u32_t (instead of ip_addr_t to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   597   *         better check for failure: != IPADDR_NONE) or IPADDR_NONE if the hostname
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   598   *         was not found in the cached dns_table.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   599   * @return ERR_OK if found, ERR_ARG if not found
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   600   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   601  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   602  dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   603  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   604    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   605  #if DNS_LOCAL_HOSTLIST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   606    if (dns_lookup_local(name, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   607      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   608    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   609  #endif /* DNS_LOCAL_HOSTLIST */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   610  #ifdef DNS_LOOKUP_LOCAL_EXTERN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   611    if (DNS_LOOKUP_LOCAL_EXTERN(name, addr, LWIP_DNS_ADDRTYPE_ARG_OR_ZERO(dns_addrtype)) == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   612      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   613    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   614  #endif /* DNS_LOOKUP_LOCAL_EXTERN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   615  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   616    /* Walk through name list, return entry if found. If not, return NULL. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   617    for (i = 0; i < DNS_TABLE_SIZE; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   618      if ((dns_table[i].state == DNS_STATE_DONE) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   619          (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   620          LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   621        LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   622        ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   623        LWIP_DEBUGF(DNS_DEBUG, ("\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   624        if (addr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   625          ip_addr_copy(*addr, dns_table[i].ipaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   626        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   627        return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   628      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   629    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   630  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   631    return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   632  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   633  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   634  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   635   * Compare the "dotted" name "query" with the encoded name "response"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   636   * to make sure an answer from the DNS server matches the current dns_table
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   637   * entry (otherwise, answers might arrive late for hostname not on the list
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   638   * any more).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   639   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   640   * For now, this function compares case-insensitive to cope with all kinds of
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   641   * servers. This also means that "dns 0x20 bit encoding" must be checked
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   642   * externally, if we want to implement it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   643   * Currently, the request is sent exactly as passed in by he user request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   644   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   645   * @param query hostname (not encoded) from the dns_table
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   646   * @param p pbuf containing the encoded hostname in the DNS response
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   647   * @param start_offset offset into p where the name starts
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   648   * @return 0xFFFF: names differ, other: names equal -> offset behind name
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   649   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   650  static u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   651  dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   652  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   653    int n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   654    u16_t response_offset = start_offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   655  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   656    do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   657      n = pbuf_try_get_at(p, response_offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   658      if ((n < 0) || (response_offset == 0xFFFF)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   659        /* error or overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   660        return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   661      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   662      response_offset++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   663      /** @see RFC 1035 - 4.1.4. Message compression */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   664      if ((n & 0xc0) == 0xc0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   665        /* Compressed name: cannot be equal since we don't send them */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   666        return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   667      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   668        /* Not compressed name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   669        while (n > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   670          int c = pbuf_try_get_at(p, response_offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   671          if (c < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   672            return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   673          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   674          if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   675            return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   676          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   677          if (response_offset == 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   678            /* would overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   679            return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   680          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   681          response_offset++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   682          ++query;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   683          --n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   684        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   685        ++query;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   686      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   687      n = pbuf_try_get_at(p, response_offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   688      if (n < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   689        return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   690      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   691    } while (n != 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   692  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   693    if (response_offset == 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   694      /* would overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   695      return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   696    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   697    return (u16_t)(response_offset + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   698  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   699  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   700  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   701   * Walk through a compact encoded DNS name and return the end of the name.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   702   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   703   * @param p pbuf containing the name
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   704   * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   705   * @return index to end of the name
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   706   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   707  static u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   708  dns_skip_name(struct pbuf *p, u16_t query_idx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   709  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   710    int n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   711    u16_t offset = query_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   712  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   713    do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   714      n = pbuf_try_get_at(p, offset++);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   715      if ((n < 0) || (offset == 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   716        return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   717      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   718      /** @see RFC 1035 - 4.1.4. Message compression */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   719      if ((n & 0xc0) == 0xc0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   720        /* Compressed name: since we only want to skip it (not check it), stop here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   721        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   722      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   723        /* Not compressed name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   724        if (offset + n >= p->tot_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   725          return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   726        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   727        offset = (u16_t)(offset + n);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   728      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   729      n = pbuf_try_get_at(p, offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   730      if (n < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   731        return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   732      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   733    } while (n != 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   734  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   735    if (offset == 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   736      return 0xFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   737    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   738    return (u16_t)(offset + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   739  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   740  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   741  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   742   * Send a DNS query packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   743   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   744   * @param idx the DNS table entry index for which to send a request
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   745   * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   746   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   747  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   748  dns_send(u8_t idx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   749  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   750    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   751    struct dns_hdr hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   752    struct dns_query qry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   753    struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   754    u16_t query_idx, copy_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   755    const char *hostname, *hostname_part;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   756    u8_t n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   757    u8_t pcb_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   758    struct dns_table_entry *entry = &dns_table[idx];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   759  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   760    LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   761                            (u16_t)(entry->server_idx), entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   762    LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   763    if (ip_addr_isany_val(dns_servers[entry->server_idx])
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   764  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   765        && !entry->is_mdns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   766  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   767       ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   768      /* DNS server not valid anymore, e.g. PPP netif has been shut down */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   769      /* call specified callback function if provided */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   770      dns_call_found(idx, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   771      /* flush this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   772      entry->state = DNS_STATE_UNUSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   773      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   774    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   775  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   776    /* if here, we have either a new query or a retry on a previous query to process */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   777    p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   778                                           SIZEOF_DNS_QUERY), PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   779    if (p != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   780      const ip_addr_t *dst;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   781      u16_t dst_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   782      /* fill dns header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   783      memset(&hdr, 0, SIZEOF_DNS_HDR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   784      hdr.id = lwip_htons(entry->txid);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   785      hdr.flags1 = DNS_FLAG1_RD;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   786      hdr.numquestions = PP_HTONS(1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   787      pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   788      hostname = entry->name;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   789      --hostname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   790  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   791      /* convert hostname into suitable query format. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   792      query_idx = SIZEOF_DNS_HDR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   793      do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   794        ++hostname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   795        hostname_part = hostname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   796        for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   797          ++n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   798        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   799        copy_len = (u16_t)(hostname - hostname_part);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   800        if (query_idx + n + 1 > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   801          /* u16_t overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   802          goto overflow_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   803        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   804        pbuf_put_at(p, query_idx, n);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   805        pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   806        query_idx = (u16_t)(query_idx + n + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   807      } while (*hostname != 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   808      pbuf_put_at(p, query_idx, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   809      query_idx++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   810  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   811      /* fill dns query */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   812      if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   813        qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   814      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   815        qry.type = PP_HTONS(DNS_RRTYPE_A);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   816      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   817      qry.cls = PP_HTONS(DNS_RRCLASS_IN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   818      pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   819  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   820  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   821      pcb_idx = entry->pcb_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   822  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   823      pcb_idx = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   824  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   825      /* send dns packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   826      LWIP_DEBUGF(DNS_DEBUG, ("sending DNS request ID %d for name \"%s\" to server %d\r\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   827                              entry->txid, entry->name, entry->server_idx));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   828  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   829      if (entry->is_mdns) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   830        dst_port = DNS_MQUERY_PORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   831  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   832        if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   833          dst = &dns_mquery_v6group;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   834        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   835  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   836  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   837        else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   838  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   839  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   840        {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   841          dst = &dns_mquery_v4group;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   842        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   843  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   844      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   845  #endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   846      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   847        dst_port = DNS_SERVER_PORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   848        dst = &dns_servers[entry->server_idx];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   849      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   850      err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   851  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   852      /* free pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   853      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   854    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   855      err = ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   856    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   857  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   858    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   859  overflow_return:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   860    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   861    return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   862  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   863  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   864  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   865  static struct udp_pcb *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   866  dns_alloc_random_port(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   867  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   868    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   869    struct udp_pcb *pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   870  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   871    pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   872    if (pcb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   873      /* out of memory, have to reuse an existing pcb */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   874      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   875    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   876    do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   877      u16_t port = (u16_t)DNS_RAND_TXID();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   878      if (DNS_PORT_ALLOWED(port)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   879        err = udp_bind(pcb, IP_ANY_TYPE, port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   880      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   881        /* this port is not allowed, try again */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   882        err = ERR_USE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   883      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   884    } while (err == ERR_USE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   885    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   886      udp_remove(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   887      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   888    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   889    udp_recv(pcb, dns_recv, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   890    return pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   891  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   892  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   893  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   894   * dns_alloc_pcb() - allocates a new pcb (or reuses an existing one) to be used
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   895   * for sending a request
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   896   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   897   * @return an index into dns_pcbs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   898   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   899  static u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   900  dns_alloc_pcb(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   901  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   902    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   903    u8_t idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   904  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   905    for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   906      if (dns_pcbs[i] == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   907        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   908      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   909    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   910    if (i < DNS_MAX_SOURCE_PORTS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   911      dns_pcbs[i] = dns_alloc_random_port();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   912      if (dns_pcbs[i] != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   913        /* succeeded */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   914        dns_last_pcb_idx = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   915        return i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   916      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   917    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   918    /* if we come here, creating a new UDP pcb failed, so we have to use
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   919       an already existing one (so overflow is no issue) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   920    for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   921      if (idx >= DNS_MAX_SOURCE_PORTS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   922        idx = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   923      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   924      if (dns_pcbs[idx] != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   925        dns_last_pcb_idx = idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   926        return idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   927      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   928    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   929    return DNS_MAX_SOURCE_PORTS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   930  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   931  #endif /* ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   932  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   933  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   934   * dns_call_found() - call the found callback and check if there are duplicate
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   935   * entries for the given hostname. If there are any, their found callback will
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   936   * be called and they will be removed.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   937   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   938   * @param idx dns table index of the entry that is resolved or removed
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   939   * @param addr IP address for the hostname (or NULL on error or memory shortage)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   940   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   941  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   942  dns_call_found(u8_t idx, ip_addr_t *addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   943  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   944  #if ((LWIP_DNS_SECURE & (LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING | LWIP_DNS_SECURE_RAND_SRC_PORT)) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   945    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   946  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   947  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   948  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   949    if (addr != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   950      /* check that address type matches the request and adapt the table entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   951      if (IP_IS_V6_VAL(*addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   952        LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   953        dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   954      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   955        LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   956        dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   957      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   958    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   959  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   960  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   961  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   962    for (i = 0; i < DNS_MAX_REQUESTS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   963      if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   964        (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   965        /* flush this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   966        dns_requests[i].found = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   967      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   968    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   969  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   970    if (dns_requests[idx].found) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   971      (*dns_requests[idx].found)(dns_table[idx].name, addr, dns_requests[idx].arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   972    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   973    dns_requests[idx].found = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   974  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   975  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   976    /* close the pcb used unless other request are using it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   977    for (i = 0; i < DNS_MAX_REQUESTS; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   978      if (i == idx) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   979        continue; /* only check other requests */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   980      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   981      if (dns_table[i].state == DNS_STATE_ASKING) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   982        if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   983          /* another request is still using the same pcb */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   984          dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   985          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   986        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   987      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   988    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   989    if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   990      /* if we come here, the pcb is not used any more and can be removed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   991      udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   992      dns_pcbs[dns_table[idx].pcb_idx] = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   993      dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   994    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   995  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   996  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   997  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   998  /* Create a query transmission ID that is unique for all outstanding queries */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	   999  static u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1000  dns_create_txid(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1001  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1002    u16_t txid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1003    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1004  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1005  again:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1006    txid = (u16_t)DNS_RAND_TXID();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1007  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1008    /* check whether the ID is unique */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1009    for (i = 0; i < DNS_TABLE_SIZE; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1010      if ((dns_table[i].state == DNS_STATE_ASKING) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1011          (dns_table[i].txid == txid)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1012        /* ID already used by another pending query */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1013        goto again;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1014      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1015    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1016  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1017    return txid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1018  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1019  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1020  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1021   * Check whether there are other backup DNS servers available to try
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1022   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1023  static u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1024  dns_backupserver_available(struct dns_table_entry *pentry)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1025  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1026    u8_t ret = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1027  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1028    if (pentry) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1029      if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1030        ret = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1031      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1032    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1033  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1034    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1035  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1036  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1037  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1038   * dns_check_entry() - see if entry has not yet been queried and, if so, sends out a query.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1039   * Check an entry in the dns_table:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1040   * - send out query for new entries
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1041   * - retry old pending entries on timeout (also with different servers)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1042   * - remove completed entries from the table if their TTL has expired
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1043   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1044   * @param i index of the dns_table entry to check
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1045   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1046  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1047  dns_check_entry(u8_t i)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1048  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1049    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1050    struct dns_table_entry *entry = &dns_table[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1051  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1052    LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1053  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1054    switch (entry->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1055      case DNS_STATE_NEW:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1056        /* initialize new entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1057        entry->txid = dns_create_txid();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1058        entry->state = DNS_STATE_ASKING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1059        entry->server_idx = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1060        entry->tmr = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1061        entry->retries = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1062  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1063        /* send DNS packet for this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1064        err = dns_send(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1065        if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1066          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1067                      ("dns_send returned error: %s\n", lwip_strerr(err)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1068        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1069        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1070      case DNS_STATE_ASKING:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1071        if (--entry->tmr == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1072          if (++entry->retries == DNS_MAX_RETRIES) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1073            if (dns_backupserver_available(entry)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1074  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1075                && !entry->is_mdns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1076  #endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1077               ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1078              /* change of server */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1079              entry->server_idx++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1080              entry->tmr = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1081              entry->retries = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1082            } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1083              LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1084              /* call specified callback function if provided */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1085              dns_call_found(i, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1086              /* flush this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1087              entry->state = DNS_STATE_UNUSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1088              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1089            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1090          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1091            /* wait longer for the next retry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1092            entry->tmr = entry->retries;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1093          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1094  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1095          /* send DNS packet for this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1096          err = dns_send(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1097          if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1098            LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1099                        ("dns_send returned error: %s\n", lwip_strerr(err)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1100          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1101        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1102        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1103      case DNS_STATE_DONE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1104        /* if the time to live is nul */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1105        if ((entry->ttl == 0) || (--entry->ttl == 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1106          LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1107          /* flush this entry, there cannot be any related pending entries in this state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1108          entry->state = DNS_STATE_UNUSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1109        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1110        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1111      case DNS_STATE_UNUSED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1112        /* nothing to do */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1113        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1114      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1115        LWIP_ASSERT("unknown dns_table entry state:", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1116        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1117    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1118  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1119  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1120  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1121   * Call dns_check_entry for each entry in dns_table - check all entries.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1122   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1123  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1124  dns_check_entries(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1125  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1126    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1127  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1128    for (i = 0; i < DNS_TABLE_SIZE; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1129      dns_check_entry(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1130    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1131  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1132  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1133  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1134   * Save TTL and call dns_call_found for correct response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1135   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1136  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1137  dns_correct_response(u8_t idx, u32_t ttl)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1138  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1139    struct dns_table_entry *entry = &dns_table[idx];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1140  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1141    entry->state = DNS_STATE_DONE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1142  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1143    LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1144    ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1145    LWIP_DEBUGF(DNS_DEBUG, ("\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1146  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1147    /* read the answer resource record's TTL, and maximize it if needed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1148    entry->ttl = ttl;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1149    if (entry->ttl > DNS_MAX_TTL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1150      entry->ttl = DNS_MAX_TTL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1151    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1152    dns_call_found(idx, &entry->ipaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1153  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1154    if (entry->ttl == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1155      /* RFC 883, page 29: "Zero values are
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1156         interpreted to mean that the RR can only be used for the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1157         transaction in progress, and should not be cached."
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1158         -> flush this entry now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1159      /* entry reused during callback? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1160      if (entry->state == DNS_STATE_DONE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1161        entry->state = DNS_STATE_UNUSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1162      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1163    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1164  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1165  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1166  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1167   * Receive input function for DNS response packets arriving for the dns UDP pcb.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1168   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1169  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1170  dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1171  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1172    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1173    u16_t txid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1174    u16_t res_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1175    struct dns_hdr hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1176    struct dns_answer ans;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1177    struct dns_query qry;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1178    u16_t nquestions, nanswers;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1179  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1180    LWIP_UNUSED_ARG(arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1181    LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1182    LWIP_UNUSED_ARG(port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1183  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1184    /* is the dns message big enough ? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1185    if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1186      LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: pbuf too small\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1187      /* free pbuf and return */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1188      goto ignore_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1189    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1190  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1191    /* copy dns payload inside static buffer for processing */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1192    if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1193      /* Match the ID in the DNS header with the name table. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1194      txid = lwip_htons(hdr.id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1195      for (i = 0; i < DNS_TABLE_SIZE; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1196        struct dns_table_entry *entry = &dns_table[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1197        if ((entry->state == DNS_STATE_ASKING) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1198            (entry->txid == txid)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1199  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1200          /* We only care about the question(s) and the answers. The authrr
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1201             and the extrarr are simply discarded. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1202          nquestions = lwip_htons(hdr.numquestions);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1203          nanswers   = lwip_htons(hdr.numanswers);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1204  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1205          /* Check for correct response. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1206          if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1207            LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1208            goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1209          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1210          if (nquestions != 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1211            LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1212            goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1213          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1214  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1215  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1216          if (!entry->is_mdns)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1217  #endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1218          {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1219            /* Check whether response comes from the same network address to which the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1220               question was sent. (RFC 5452) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1221            if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1222              goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1223            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1224          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1225  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1226          /* Check if the name in the "question" part match with the name in the entry and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1227             skip it if equal. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1228          res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1229          if (res_idx == 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1230            LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1231            goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1232          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1233  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1234          /* check if "question" part matches the request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1235          if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1236            goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1237          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1238          if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1239              (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1240              (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1241            LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1242            goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1243          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1244          /* skip the rest of the "question" part */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1245          if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1246            goto ignore_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1247          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1248          res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1249  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1250          /* Check for error. If so, call callback to inform. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1251          if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1252            LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1253  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1254            /* if there is another backup DNS server to try
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1255             * then don't stop the DNS request
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1256             */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1257            if (dns_backupserver_available(entry)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1258              /* avoid retrying the same server */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1259              entry->retries = DNS_MAX_RETRIES-1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1260              entry->tmr     = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1261  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1262              /* contact next available server for this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1263              dns_check_entry(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1264  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1265              goto ignore_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1266            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1267          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1268            while ((nanswers > 0) && (res_idx < p->tot_len)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1269              /* skip answer resource record's host name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1270              res_idx = dns_skip_name(p, res_idx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1271              if (res_idx == 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1272                goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1273              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1274  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1275              /* Check for IP address type and Internet class. Others are discarded. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1276              if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1277                goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1278              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1279              if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1280                goto ignore_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1281              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1282              res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1283  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1284              if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1285  #if LWIP_IPV4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1286                if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1287  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1288                  if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1289  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1290                  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1291                    ip4_addr_t ip4addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1292                    /* read the IP address after answer resource record's header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1293                    if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1294                      goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1295                    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1296                    ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1297                    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1298                    /* handle correct response */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1299                    dns_correct_response(i, lwip_ntohl(ans.ttl));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1300                    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1301                  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1302                }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1303  #endif /* LWIP_IPV4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1304  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1305                if ((ans.type == PP_HTONS(DNS_RRTYPE_AAAA)) && (ans.len == PP_HTONS(sizeof(ip6_addr_p_t)))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1306  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1307                  if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1308  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1309                  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1310                    ip6_addr_p_t ip6addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1311                    /* read the IP address after answer resource record's header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1312                    if (pbuf_copy_partial(p, &ip6addr, sizeof(ip6_addr_p_t), res_idx) != sizeof(ip6_addr_p_t)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1313                      goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1314                    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1315                    /* @todo: scope ip6addr? Might be required for link-local addresses at least? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1316                    ip_addr_copy_from_ip6_packed(dns_table[i].ipaddr, ip6addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1317                    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1318                    /* handle correct response */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1319                    dns_correct_response(i, lwip_ntohl(ans.ttl));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1320                    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1321                  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1322                }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1323  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1324              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1325              /* skip this answer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1326              if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1327                goto ignore_packet; /* ignore this packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1328              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1329              res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1330              --nanswers;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1331            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1332  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1333            if ((entry->reqaddrtype == LWIP_DNS_ADDRTYPE_IPV4_IPV6) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1334                (entry->reqaddrtype == LWIP_DNS_ADDRTYPE_IPV6_IPV4)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1335              if (entry->reqaddrtype == LWIP_DNS_ADDRTYPE_IPV4_IPV6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1336                /* IPv4 failed, try IPv6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1337                dns_table[i].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1338              } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1339                /* IPv6 failed, try IPv4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1340                dns_table[i].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1341              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1342              pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1343              dns_table[i].state = DNS_STATE_NEW;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1344              dns_check_entry(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1345              return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1346            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1347  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1348            LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1349          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1350          /* call callback to indicate error, clean up memory and return */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1351          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1352          dns_call_found(i, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1353          dns_table[i].state = DNS_STATE_UNUSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1354          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1355        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1356      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1357    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1358  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1359  ignore_packet:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1360    /* deallocate memory and return */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1361    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1362    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1363  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1364  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1365  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1366   * Queues a new hostname to resolve and sends out a DNS query for that hostname
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1367   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1368   * @param name the hostname that is to be queried
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1369   * @param hostnamelen length of the hostname
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1370   * @param found a callback function to be called on success, failure or timeout
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1371   * @param callback_arg argument to pass to the callback function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1372   * @return err_t return code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1373   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1374  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1375  dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1376              void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1377  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1378    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1379    u8_t lseq, lseqi;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1380    struct dns_table_entry *entry = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1381    size_t namelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1382    struct dns_req_entry *req;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1383  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1384  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1385    u8_t r;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1386    /* check for duplicate entries */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1387    for (i = 0; i < DNS_TABLE_SIZE; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1388      if ((dns_table[i].state == DNS_STATE_ASKING) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1389          (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1390  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1391        if (dns_table[i].reqaddrtype != dns_addrtype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1392          /* requested address types don't match
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1393             this can lead to 2 concurrent requests, but mixing the address types
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1394             for the same host should not be that common */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1395          continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1396        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1397  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1398        /* this is a duplicate entry, find a free request entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1399        for (r = 0; r < DNS_MAX_REQUESTS; r++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1400          if (dns_requests[r].found == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1401            dns_requests[r].found = found;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1402            dns_requests[r].arg = callback_arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1403            dns_requests[r].dns_table_idx = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1404            LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1405            LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1406            return ERR_INPROGRESS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1407          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1408        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1409      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1410    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1411    /* no duplicate entries found */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1412  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1413  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1414    /* search an unused entry, or the oldest one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1415    lseq = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1416    lseqi = DNS_TABLE_SIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1417    for (i = 0; i < DNS_TABLE_SIZE; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1418      entry = &dns_table[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1419      /* is it an unused entry ? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1420      if (entry->state == DNS_STATE_UNUSED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1421        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1422      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1423      /* check if this is the oldest completed entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1424      if (entry->state == DNS_STATE_DONE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1425        u8_t age = (u8_t)(dns_seqno - entry->seqno);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1426        if (age > lseq) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1427          lseq = age;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1428          lseqi = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1429        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1430      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1431    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1432  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1433    /* if we don't have found an unused entry, use the oldest completed one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1434    if (i == DNS_TABLE_SIZE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1435      if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1436        /* no entry can be used now, table is full */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1437        LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1438        return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1439      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1440        /* use the oldest completed one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1441        i = lseqi;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1442        entry = &dns_table[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1443      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1444    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1445  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1446  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1447    /* find a free request entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1448    req = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1449    for (r = 0; r < DNS_MAX_REQUESTS; r++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1450      if (dns_requests[r].found == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1451        req = &dns_requests[r];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1452        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1453      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1454    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1455    if (req == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1456      /* no request entry can be used now, table is full */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1457      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1458      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1459    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1460    req->dns_table_idx = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1461  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1462    /* in this configuration, the entry index is the same as the request index */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1463    req = &dns_requests[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1464  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1465  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1466    /* use this entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1467    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1468  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1469    /* fill the entry */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1470    entry->state = DNS_STATE_NEW;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1471    entry->seqno = dns_seqno;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1472    LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1473    LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1474    req->found = found;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1475    req->arg   = callback_arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1476    namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1477    MEMCPY(entry->name, name, namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1478    entry->name[namelen] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1479  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1480  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1481    entry->pcb_idx = dns_alloc_pcb();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1482    if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1483      /* failed to get a UDP pcb */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1484      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1485      entry->state = DNS_STATE_UNUSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1486      req->found = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1487      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1488    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1489    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS pcb %"U16_F"\n", name, (u16_t)(entry->pcb_idx)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1490  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1491  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1492  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1493    entry->is_mdns = is_mdns;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1494  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1495  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1496    dns_seqno++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1497  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1498    /* force to send query without waiting timer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1499    dns_check_entry(i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1500  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1501    /* dns query is enqueued */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1502    return ERR_INPROGRESS;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1503  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1504  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1505  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1506   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1507   * Resolve a hostname (string) into an IP address.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1508   * NON-BLOCKING callback version for use with raw API!!!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1509   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1510   * Returns immediately with one of err_t return codes:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1511   * - ERR_OK if hostname is a valid IP address string or the host
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1512   *   name is already in the local names table.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1513   * - ERR_INPROGRESS enqueue a request to be sent to the DNS server
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1514   *   for resolution if no errors are present.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1515   * - ERR_ARG: dns client not initialized or invalid hostname
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1516   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1517   * @param hostname the hostname that is to be queried
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1518   * @param addr pointer to a ip_addr_t where to store the address if it is already
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1519   *             cached in the dns_table (only valid if ERR_OK is returned!)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1520   * @param found a callback function to be called on success, failure or timeout (only if
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1521   *              ERR_INPROGRESS is returned!)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1522   * @param callback_arg argument to pass to the callback function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1523   * @return a err_t return code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1524   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1525  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1526  dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1527                    void *callback_arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1528  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1529    return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1530  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1531  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1532  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1533   * @ingroup dns
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1534   * Like dns_gethostbyname, but returned address type can be controlled:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1535   * @param hostname the hostname that is to be queried
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1536   * @param addr pointer to a ip_addr_t where to store the address if it is already
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1537   *             cached in the dns_table (only valid if ERR_OK is returned!)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1538   * @param found a callback function to be called on success, failure or timeout (only if
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1539   *              ERR_INPROGRESS is returned!)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1540   * @param callback_arg argument to pass to the callback function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1541   * @param dns_addrtype - LWIP_DNS_ADDRTYPE_IPV4_IPV6: try to resolve IPv4 first, try IPv6 if IPv4 fails only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1542   *                     - LWIP_DNS_ADDRTYPE_IPV6_IPV4: try to resolve IPv6 first, try IPv4 if IPv6 fails only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1543   *                     - LWIP_DNS_ADDRTYPE_IPV4: try to resolve IPv4 only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1544   *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1545   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1546  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1547  dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1548                             void *callback_arg, u8_t dns_addrtype)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1549  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1550    size_t hostnamelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1551  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1552    u8_t is_mdns;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1553  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1554    /* not initialized or no valid server yet, or invalid addr pointer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1555     * or invalid hostname or invalid hostname length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1556    if ((addr == NULL) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1557        (!hostname) || (!hostname[0])) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1558      return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1559    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1560  #if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1561    if (dns_pcbs[0] == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1562      return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1563    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1564  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1565    hostnamelen = strlen(hostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1566    if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1567      LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1568      return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1569    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1570  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1571  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1572  #if LWIP_HAVE_LOOPIF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1573    if (strcmp(hostname, "localhost") == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1574      ip_addr_set_loopback(LWIP_DNS_ADDRTYPE_IS_IPV6(dns_addrtype), addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1575      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1576    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1577  #endif /* LWIP_HAVE_LOOPIF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1578  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1579    /* host name already in octet notation? set ip addr and return ERR_OK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1580    if (ipaddr_aton(hostname, addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1581  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1582      if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1583          (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1584  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1585      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1586        return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1587      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1588    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1589    /* already have this address cached? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1590    if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1591      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1592    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1593  #if LWIP_IPV4 && LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1594    if ((dns_addrtype == LWIP_DNS_ADDRTYPE_IPV4_IPV6) || (dns_addrtype == LWIP_DNS_ADDRTYPE_IPV6_IPV4)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1595      /* fallback to 2nd IP type and try again to lookup */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1596      u8_t fallback;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1597      if (dns_addrtype == LWIP_DNS_ADDRTYPE_IPV4_IPV6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1598        fallback = LWIP_DNS_ADDRTYPE_IPV6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1599      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1600        fallback = LWIP_DNS_ADDRTYPE_IPV4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1601      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1602      if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(fallback)) == ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1603        return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1604      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1605    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1606  #else /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1607    LWIP_UNUSED_ARG(dns_addrtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1608  #endif /* LWIP_IPV4 && LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1609  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1610  #if LWIP_DNS_SUPPORT_MDNS_QUERIES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1611    if (strstr(hostname, ".local") == &hostname[hostnamelen] - 6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1612      is_mdns = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1613    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1614      is_mdns = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1615    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1616  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1617    if (!is_mdns)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1618  #endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1619    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1620      /* prevent calling found callback if no server is set, return error instead */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1621      if (ip_addr_isany_val(dns_servers[0])) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1622        return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1623      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1624    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1625  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1626    /* queue query with specified callback */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1627    return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1628                       LWIP_DNS_ISMDNS_ARG(is_mdns));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1629  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1630  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\dns.c	  1631  #endif /* LWIP_DNS */

	; Module end
