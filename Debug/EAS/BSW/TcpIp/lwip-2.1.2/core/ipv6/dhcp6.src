	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc23128a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\.dhcp6.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\dhcp6.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\dhcp6.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\dhcp6.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\dhcp6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4548
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\dhcp6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	169
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	171
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	194
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	194
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	241
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	278
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	194
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	194
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	241
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	377
	.byte	3
	.word	194
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	471
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	500
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	194
	.byte	8,4
	.word	278
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	605
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	614
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	241
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	605
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	687
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	194
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	194
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	614
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	614
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	929
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	194
	.byte	8,3
	.word	194
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1086
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1095
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	241
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1229
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	194
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	194
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	194
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1340
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	194
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	194
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	194
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	194
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	194
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	194
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	241
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	241
	.byte	8,1
	.word	194
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1794
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1794
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1803
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1879
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	687
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2015
	.byte	12
	.word	194
	.byte	3
	.word	2129
	.byte	12
	.word	194
	.byte	3
	.word	2139
	.byte	12
	.word	194
	.byte	3
	.word	2149
	.byte	12
	.word	1879
	.byte	3
	.word	2159
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	241
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	194
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	194
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	194
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	194
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	687
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2134
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2144
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2154
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2164
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2169
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	278
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	278
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	278
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2521
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	278
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2671
	.byte	12
	.word	2521
	.byte	3
	.word	2808
	.byte	12
	.word	2671
	.byte	3
	.word	2818
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	194
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	194
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	241
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2164
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2813
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2823
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2828
	.byte	12
	.word	194
	.byte	3
	.word	3113
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3118
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3118
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3123
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1879
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	194
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	194
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	194
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3287
	.byte	3
	.word	1803
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	278
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	194
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	194
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	241
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3432
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	471
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3437
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	278
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	194
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1879
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	194
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	194
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	194
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3432
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3652
	.byte	12
	.word	3437
	.byte	3
	.word	3822
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	241
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	471
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	241
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	241
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3118
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3827
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3832
	.byte	12
	.word	3652
	.byte	3
	.word	4056
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4061
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4066
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	241
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	471
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4166
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	241
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	241
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	471
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4263
	.byte	8,8
	.word	194
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	194
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	194
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4357
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4066
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4066
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4263
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4166
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4366
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	194
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6\\dhcp6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     4   * @defgroup dhcp6 DHCPv6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     5   * @ingroup ip6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     6   * DHCPv6 client: IPv6 address autoconfiguration as per
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     7   * RFC 3315 (stateful DHCPv6) and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     8   * RFC 3736 (stateless DHCPv6).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    10   * For now, only stateless DHCPv6 is implemented!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    11   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    12   * TODO:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    13   * - enable/disable API to not always start when RA is received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    14   * - stateful DHCPv6 (for now, only stateless DHCPv6 for DNS and NTP servers works)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    15   * - create Client Identifier?
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    16   * - only start requests if a valid local address is available on the netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    17   * - only start information requests if required (not for every RA)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    18   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    19   * dhcp6_enable_stateful() enables stateful DHCPv6 for a netif (stateless disabled)\n
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    20   * dhcp6_enable_stateless() enables stateless DHCPv6 for a netif (stateful disabled)\n
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    21   * dhcp6_disable() disable DHCPv6 for a netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    22   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    23   * When enabled, requests are only issued after receipt of RA with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    24   * corresponding bits set.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    25   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    26  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    27  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    28   * Copyright (c) 2018 Simon Goldschmidt
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    29   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    30   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    31   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    32   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    34   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    35   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    36   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    37   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    38   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    39   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    40   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    41   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    42   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    43   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    44   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    45   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    46   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    47   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    48   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    49   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    50   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    51   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    52   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    53   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    54   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    55   * Author: Simon Goldschmidt <goldsimon@gmx.de>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    56   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    57  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    58  #include "lwip/opt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    59  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    60  #if LWIP_IPV6 && LWIP_IPV6_DHCP6 /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    61  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    62  #include "lwip/dhcp6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    63  #include "lwip/prot/dhcp6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    64  #include "lwip/def.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    65  #include "lwip/udp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    66  #include "lwip/dns.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    67  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    68  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    69  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    70  #ifdef LWIP_HOOK_FILENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    71  #include LWIP_HOOK_FILENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    72  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    73  #ifndef LWIP_HOOK_DHCP6_APPEND_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    74  #define LWIP_HOOK_DHCP6_APPEND_OPTIONS(netif, dhcp6, state, msg, msg_type, options_len_ptr, max_len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    75  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    76  #ifndef LWIP_HOOK_DHCP6_PARSE_OPTION
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    77  #define LWIP_HOOK_DHCP6_PARSE_OPTION(netif, dhcp6, state, msg, msg_type, option, len, pbuf, offset) do { LWIP_UNUSED_ARG(msg); } while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    78  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    79  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    80  #if LWIP_DNS && LWIP_DHCP6_MAX_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    81  #if DNS_MAX_SERVERS > LWIP_DHCP6_MAX_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    82  #define LWIP_DHCP6_PROVIDE_DNS_SERVERS LWIP_DHCP6_MAX_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    83  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    84  #define LWIP_DHCP6_PROVIDE_DNS_SERVERS DNS_MAX_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    85  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    86  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    87  #define LWIP_DHCP6_PROVIDE_DNS_SERVERS 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    88  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    89  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    90  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    91  /** Option handling: options are parsed in dhcp6_parse_reply
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    92   * and saved in an array where other functions can load them from.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    93   * This might be moved into the struct dhcp6 (not necessarily since
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    94   * lwIP is single-threaded and the array is only used while in recv
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    95   * callback). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    96  enum dhcp6_option_idx {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    97    DHCP6_OPTION_IDX_CLI_ID = 0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    98    DHCP6_OPTION_IDX_SERVER_ID,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	    99  #if LWIP_DHCP6_PROVIDE_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   100    DHCP6_OPTION_IDX_DNS_SERVER,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   101    DHCP6_OPTION_IDX_DOMAIN_LIST,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   102  #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   103  #if LWIP_DHCP6_GET_NTP_SRV
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   104    DHCP6_OPTION_IDX_NTP_SERVER,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   105  #endif /* LWIP_DHCP_GET_NTP_SRV */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   106    DHCP6_OPTION_IDX_MAX
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   107  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   108  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   109  struct dhcp6_option_info {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   110    u8_t option_given;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   111    u16_t val_start;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   112    u16_t val_length;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   113  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   114  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   115  /** Holds the decoded option info, only valid while in dhcp6_recv. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   116  struct dhcp6_option_info dhcp6_rx_options[DHCP6_OPTION_IDX_MAX];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   117  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   118  #define dhcp6_option_given(dhcp6, idx)           (dhcp6_rx_options[idx].option_given != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   119  #define dhcp6_got_option(dhcp6, idx)             (dhcp6_rx_options[idx].option_given = 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   120  #define dhcp6_clear_option(dhcp6, idx)           (dhcp6_rx_options[idx].option_given = 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   121  #define dhcp6_clear_all_options(dhcp6)           (memset(dhcp6_rx_options, 0, sizeof(dhcp6_rx_options)))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   122  #define dhcp6_get_option_start(dhcp6, idx)       (dhcp6_rx_options[idx].val_start)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   123  #define dhcp6_get_option_length(dhcp6, idx)      (dhcp6_rx_options[idx].val_length)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   124  #define dhcp6_set_option(dhcp6, idx, start, len) do { dhcp6_rx_options[idx].val_start = (start); dhcp6_rx_options[idx].val_length = (len); }while(0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   125  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   126  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   127  const ip_addr_t dhcp6_All_DHCP6_Relay_Agents_and_Servers = IPADDR6_INIT_HOST(0xFF020000, 0, 0, 0x00010002);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   128  const ip_addr_t dhcp6_All_DHCP6_Servers = IPADDR6_INIT_HOST(0xFF020000, 0, 0, 0x00010003);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   129  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   130  static struct udp_pcb *dhcp6_pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   131  static u8_t dhcp6_pcb_refcount;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   132  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   133  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   134  /* receive, unfold, parse and free incoming messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   135  static void dhcp6_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   136  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   137  /** Ensure DHCP PCB is allocated and bound */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   138  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   139  dhcp6_inc_pcb_refcount(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   140  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   141    if (dhcp6_pcb_refcount == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   142      LWIP_ASSERT("dhcp6_inc_pcb_refcount(): memory leak", dhcp6_pcb == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   143  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   144      /* allocate UDP PCB */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   145      dhcp6_pcb = udp_new_ip6();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   146  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   147      if (dhcp6_pcb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   148        return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   149      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   150  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   151      ip_set_option(dhcp6_pcb, SOF_BROADCAST);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   152  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   153      /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   154      udp_bind(dhcp6_pcb, IP6_ADDR_ANY, DHCP6_CLIENT_PORT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   155      udp_recv(dhcp6_pcb, dhcp6_recv, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   156    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   157  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   158    dhcp6_pcb_refcount++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   159  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   160    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   161  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   162  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   163  /** Free DHCP PCB if the last netif stops using it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   164  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   165  dhcp6_dec_pcb_refcount(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   166  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   167    LWIP_ASSERT("dhcp6_pcb_refcount(): refcount error", (dhcp6_pcb_refcount > 0));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   168    dhcp6_pcb_refcount--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   169  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   170    if (dhcp6_pcb_refcount == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   171      udp_remove(dhcp6_pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   172      dhcp6_pcb = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   173    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   174  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   175  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   176  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   177   * @ingroup dhcp6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   178   * Set a statically allocated struct dhcp6 to work with.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   179   * Using this prevents dhcp6_start to allocate it using mem_malloc.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   180   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   181   * @param netif the netif for which to set the struct dhcp
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   182   * @param dhcp6 (uninitialised) dhcp6 struct allocated by the application
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   183   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   184  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   185  dhcp6_set_struct(struct netif *netif, struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   186  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   187    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   188    LWIP_ASSERT("dhcp6 != NULL", dhcp6 != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   189    LWIP_ASSERT("netif already has a struct dhcp6 set", netif_dhcp6_data(netif) == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   190  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   191    /* clear data structure */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   192    memset(dhcp6, 0, sizeof(struct dhcp6));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   193    /* dhcp6_set_state(&dhcp, DHCP6_STATE_OFF); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   194    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP6, dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   195  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   196  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   197  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   198   * @ingroup dhcp6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   199   * Removes a struct dhcp6 from a netif.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   200   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   201   * ATTENTION: Only use this when not using dhcp6_set_struct() to allocate the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   202   *            struct dhcp6 since the memory is passed back to the heap.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   203   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   204   * @param netif the netif from which to remove the struct dhcp
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   205   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   206  void dhcp6_cleanup(struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   207  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   208    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   209  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   210    if (netif_dhcp6_data(netif) != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   211      mem_free(netif_dhcp6_data(netif));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   212      netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP6, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   213    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   214  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   215  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   216  static struct dhcp6*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   217  dhcp6_get_struct(struct netif *netif, const char *dbg_requester)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   218  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   219    struct dhcp6 *dhcp6 = netif_dhcp6_data(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   220    if (dhcp6 == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   221      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("%s: mallocing new DHCPv6 client\n", dbg_requester));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   222      dhcp6 = (struct dhcp6 *)mem_malloc(sizeof(struct dhcp6));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   223      if (dhcp6 == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   224        LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("%s: could not allocate dhcp6\n", dbg_requester));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   225        return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   226      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   227  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   228      /* clear data structure, this implies DHCP6_STATE_OFF */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   229      memset(dhcp6, 0, sizeof(struct dhcp6));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   230      /* store this dhcp6 client in the netif */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   231      netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP6, dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   232    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   233      /* already has DHCP6 client attached */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   234      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("%s: using existing DHCPv6 client\n", dbg_requester));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   235    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   236  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   237    if (!dhcp6->pcb_allocated) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   238      if (dhcp6_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP6 PCB is allocated */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   239        mem_free(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   240        netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP6, NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   241        return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   242      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   243      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("%s: allocated dhcp6", dbg_requester));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   244      dhcp6->pcb_allocated = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   245    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   246    return dhcp6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   247  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   248  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   249  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   250   * Set the DHCPv6 state
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   251   * If the state changed, reset the number of tries.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   252   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   253  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   254  dhcp6_set_state(struct dhcp6 *dhcp6, u8_t new_state, const char *dbg_caller)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   255  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   256    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("DHCPv6 state: %d -> %d (%s)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   257      dhcp6->state, new_state, dbg_caller));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   258    if (new_state != dhcp6->state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   259      dhcp6->state = new_state;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   260      dhcp6->tries = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   261      dhcp6->request_timeout = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   262    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   263  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   264  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   265  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   266  dhcp6_stateless_enabled(struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   267  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   268    if ((dhcp6->state == DHCP6_STATE_STATELESS_IDLE) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   269        (dhcp6->state == DHCP6_STATE_REQUESTING_CONFIG)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   270      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   271    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   272    return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   273  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   274  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   275  /*static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   276  dhcp6_stateful_enabled(struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   277  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   278    if (dhcp6->state == DHCP6_STATE_OFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   279      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   280    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   281    if (dhcp6_stateless_enabled(dhcp6)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   282      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   283    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   284    return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   285  }*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   287  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   288   * @ingroup dhcp6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   289   * Enable stateful DHCPv6 on this netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   290   * Requests are sent on receipt of an RA message with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   291   * ND6_RA_FLAG_MANAGED_ADDR_CONFIG flag set.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   292   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   293   * A struct dhcp6 will be allocated for this netif if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   294   * set via @ref dhcp6_set_struct before.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   295   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   296   * @todo: stateful DHCPv6 not supported, yet
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   297   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   298  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   299  dhcp6_enable_stateful(struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   300  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   301    LWIP_UNUSED_ARG(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   302    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("stateful dhcp6 not implemented yet"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   303    return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   304  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   305  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   306  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   307   * @ingroup dhcp6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   308   * Enable stateless DHCPv6 on this netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   309   * Requests are sent on receipt of an RA message with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   310   * ND6_RA_FLAG_OTHER_CONFIG flag set.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   311   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   312   * A struct dhcp6 will be allocated for this netif if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   313   * set via @ref dhcp6_set_struct before.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   314   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   315  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   316  dhcp6_enable_stateless(struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   317  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   318    struct dhcp6 *dhcp6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   319  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   320    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp6_enable_stateless(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   321  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   322    dhcp6 = dhcp6_get_struct(netif, "dhcp6_enable_stateless()");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   323    if (dhcp6 == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   324      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   325    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   326    if (dhcp6_stateless_enabled(dhcp6)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   327      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp6_enable_stateless(): stateless DHCPv6 already enabled"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   328      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   329    } else if (dhcp6->state != DHCP6_STATE_OFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   330      /* stateful running */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   331      /* @todo: stop stateful once it is implemented */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   332      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp6_enable_stateless(): switching from stateful to stateless DHCPv6"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   333    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   334    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp6_enable_stateless(): stateless DHCPv6 enabled\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   335    dhcp6_set_state(dhcp6, DHCP6_STATE_STATELESS_IDLE, "dhcp6_enable_stateless");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   336    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   337  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   338  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   339  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   340   * @ingroup dhcp6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   341   * Disable stateful or stateless DHCPv6 on this netif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   342   * Requests are sent on receipt of an RA message with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   343   * ND6_RA_FLAG_OTHER_CONFIG flag set.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   344   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   345  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   346  dhcp6_disable(struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   347  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   348    struct dhcp6 *dhcp6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   349  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   350    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp6_disable(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   351  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   352    dhcp6 = netif_dhcp6_data(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   353    if (dhcp6 != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   354      if (dhcp6->state != DHCP6_STATE_OFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   355        LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("dhcp6_disable(): DHCPv6 disabled (old state: %s)\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   356          (dhcp6_stateless_enabled(dhcp6) ? "stateless" : "stateful")));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   357        dhcp6_set_state(dhcp6, DHCP6_STATE_OFF, "dhcp6_disable");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   358        if (dhcp6->pcb_allocated != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   359          dhcp6_dec_pcb_refcount(); /* free DHCPv6 PCB if not needed any more */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   360          dhcp6->pcb_allocated = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   361        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   362      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   363    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   364  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   365  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   366  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   367   * Create a DHCPv6 request, fill in common headers
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   368   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   369   * @param netif the netif under DHCPv6 control
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   370   * @param dhcp6 dhcp6 control struct
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   371   * @param message_type message type of the request
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   372   * @param opt_len_alloc option length to allocate
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   373   * @param options_out_len option length on exit
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   374   * @return a pbuf for the message
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   375   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   376  static struct pbuf *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   377  dhcp6_create_msg(struct netif *netif, struct dhcp6 *dhcp6, u8_t message_type,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   378                   u16_t opt_len_alloc, u16_t *options_out_len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   379  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   380    struct pbuf *p_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   381    struct dhcp6_msg *msg_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   383    LWIP_ERROR("dhcp6_create_msg: netif != NULL", (netif != NULL), return NULL;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   384    LWIP_ERROR("dhcp6_create_msg: dhcp6 != NULL", (dhcp6 != NULL), return NULL;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   385    p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp6_msg) + opt_len_alloc, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   386    if (p_out == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   387      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   388                  ("dhcp6_create_msg(): could not allocate pbuf\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   389      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   390    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   391    LWIP_ASSERT("dhcp6_create_msg: check that first pbuf can hold struct dhcp6_msg",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   392                (p_out->len >= sizeof(struct dhcp6_msg) + opt_len_alloc));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   393  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   394    /* @todo: limit new xid for certain message types? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   395    /* reuse transaction identifier in retransmissions */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   396    if (dhcp6->tries == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   397      dhcp6->xid = LWIP_RAND() & 0xFFFFFF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   398    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   399  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   400    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   401                ("transaction id xid(%"X32_F")\n", dhcp6->xid));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   403    msg_out = (struct dhcp6_msg *)p_out->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   404    memset(msg_out, 0, sizeof(struct dhcp6_msg) + opt_len_alloc);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   405  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   406    msg_out->msgtype = message_type;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   407    msg_out->transaction_id[0] = (u8_t)(dhcp6->xid >> 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   408    msg_out->transaction_id[1] = (u8_t)(dhcp6->xid >> 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   409    msg_out->transaction_id[2] = (u8_t)dhcp6->xid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   410    *options_out_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   411    return p_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   412  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   413  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   414  static u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   415  dhcp6_option_short(u16_t options_out_len, u8_t *options, u16_t value)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   416  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   417    options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   418    options[options_out_len++] = (u8_t) (value & 0x00ffU);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   419    return options_out_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   420  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   421  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   422  static u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   423  dhcp6_option_optionrequest(u16_t options_out_len, u8_t *options, const u16_t *req_options,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   424                             u16_t num_req_options, u16_t max_len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   425  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   426    size_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   427    u16_t ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   428  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   429    LWIP_ASSERT("dhcp6_option_optionrequest: options_out_len + sizeof(struct dhcp6_msg) + addlen <= max_len",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   430      sizeof(struct dhcp6_msg) + options_out_len + 4U + (2U * num_req_options) <= max_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   431    LWIP_UNUSED_ARG(max_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   432  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   433    ret = dhcp6_option_short(options_out_len, options, DHCP6_OPTION_ORO);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   434    ret = dhcp6_option_short(ret, options, 2 * num_req_options);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   435    for (i = 0; i < num_req_options; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   436      ret = dhcp6_option_short(ret, options, req_options[i]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   437    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   438    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   439  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   440  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   441  /* All options are added, shrink the pbuf to the required size */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   442  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   443  dhcp6_msg_finalize(u16_t options_out_len, struct pbuf *p_out)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   444  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   445    /* shrink the pbuf to the actual content length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   446    pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp6_msg) + options_out_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   447  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   448  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   449  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   450  #if LWIP_IPV6_DHCP6_STATELESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   451  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   452  dhcp6_information_request(struct netif *netif, struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   453  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   454    const u16_t requested_options[] = {DHCP6_OPTION_DNS_SERVERS, DHCP6_OPTION_DOMAIN_LIST, DHCP6_OPTION_SNTP_SERVERS};
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   455    u16_t msecs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   456    struct pbuf *p_out;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   457    u16_t options_out_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   458    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("dhcp6_information_request()\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   459    /* create and initialize the DHCP message header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   460    p_out = dhcp6_create_msg(netif, dhcp6, DHCP6_INFOREQUEST, 4 + sizeof(requested_options), &options_out_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   461    if (p_out != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   462      err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   463      struct dhcp6_msg *msg_out = (struct dhcp6_msg *)p_out->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   464      u8_t *options = (u8_t *)(msg_out + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   465      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("dhcp6_information_request: making request\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   466  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   467      options_out_len = dhcp6_option_optionrequest(options_out_len, options, requested_options,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   468        LWIP_ARRAYSIZE(requested_options), p_out->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   469      LWIP_HOOK_DHCP6_APPEND_OPTIONS(netif, dhcp6, DHCP6_STATE_REQUESTING_CONFIG, msg_out,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   470        DHCP6_INFOREQUEST, options_out_len, p_out->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   471      dhcp6_msg_finalize(options_out_len, p_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   472  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   473      err = udp_sendto_if(dhcp6_pcb, p_out, &dhcp6_All_DHCP6_Relay_Agents_and_Servers, DHCP6_SERVER_PORT, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   474      pbuf_free(p_out);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   475      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp6_information_request: INFOREQUESTING -> %d\n", (int)err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   476      LWIP_UNUSED_ARG(err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   477    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   478      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp6_information_request: could not allocate DHCP6 request\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   479    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   480    dhcp6_set_state(dhcp6, DHCP6_STATE_REQUESTING_CONFIG, "dhcp6_information_request");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   481    if (dhcp6->tries < 255) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   482      dhcp6->tries++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   483    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   484    msecs = (u16_t)((dhcp6->tries < 6 ? 1 << dhcp6->tries : 60) * 1000);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   485    dhcp6->request_timeout = (u16_t)((msecs + DHCP6_TIMER_MSECS - 1) / DHCP6_TIMER_MSECS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   486    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp6_information_request(): set request timeout %"U16_F" msecs\n", msecs));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   487  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   488  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   489  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   490  dhcp6_request_config(struct netif *netif, struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   491  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   492    /* stateless mode enabled and no request running? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   493    if (dhcp6->state == DHCP6_STATE_STATELESS_IDLE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   494      /* send Information-request and wait for answer; setup receive timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   495      dhcp6_information_request(netif, dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   496    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   497  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   498    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   499  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   500  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   501  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   502  dhcp6_abort_config_request(struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   503  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   504    if (dhcp6->state == DHCP6_STATE_REQUESTING_CONFIG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   505      /* abort running request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   506      dhcp6_set_state(dhcp6, DHCP6_STATE_STATELESS_IDLE, "dhcp6_abort_config_request");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   507    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   508  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   509  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   510  /* Handle a REPLY to INFOREQUEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   511   * This parses DNS and NTP server addresses from the reply.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   512   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   513  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   514  dhcp6_handle_config_reply(struct netif *netif, struct pbuf *p_msg_in)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   515  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   516    struct dhcp6 *dhcp6 = netif_dhcp6_data(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   517  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   518    LWIP_UNUSED_ARG(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   519    LWIP_UNUSED_ARG(p_msg_in);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   520  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   521  #if LWIP_DHCP6_PROVIDE_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   522    if (dhcp6_option_given(dhcp6, DHCP6_OPTION_IDX_DNS_SERVER)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   523      ip_addr_t dns_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   524      ip6_addr_t *dns_addr6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   525      u16_t op_start = dhcp6_get_option_start(dhcp6, DHCP6_OPTION_IDX_DNS_SERVER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   526      u16_t op_len = dhcp6_get_option_length(dhcp6, DHCP6_OPTION_IDX_DNS_SERVER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   527      u16_t idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   528      u8_t n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   529  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   530      memset(&dns_addr, 0, sizeof(dns_addr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   531      dns_addr6 = ip_2_ip6(&dns_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   532      for (n = 0, idx = op_start; (idx < op_start + op_len) && (n < LWIP_DHCP6_PROVIDE_DNS_SERVERS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   533           n++, idx += sizeof(struct ip6_addr_packed)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   534        u16_t copied = pbuf_copy_partial(p_msg_in, dns_addr6, sizeof(struct ip6_addr_packed), idx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   535        if (copied != sizeof(struct ip6_addr_packed)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   536          /* pbuf length mismatch */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   537          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   538        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   539        ip6_addr_assign_zone(dns_addr6, IP6_UNKNOWN, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   540        /* @todo: do we need a different offset than DHCP(v4)? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   541        dns_setserver(n, &dns_addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   542      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   543    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   544    /* @ todo: parse and set Domain Search List */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   545  #endif /* LWIP_DHCP6_PROVIDE_DNS_SERVERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   546  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   547  #if LWIP_DHCP6_GET_NTP_SRV
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   548    if (dhcp6_option_given(dhcp6, DHCP6_OPTION_IDX_NTP_SERVER)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   549      ip_addr_t ntp_server_addrs[LWIP_DHCP6_MAX_NTP_SERVERS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   550      u16_t op_start = dhcp6_get_option_start(dhcp6, DHCP6_OPTION_IDX_NTP_SERVER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   551      u16_t op_len = dhcp6_get_option_length(dhcp6, DHCP6_OPTION_IDX_NTP_SERVER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   552      u16_t idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   553      u8_t n;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   554  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   555      for (n = 0, idx = op_start; (idx < op_start + op_len) && (n < LWIP_DHCP6_MAX_NTP_SERVERS);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   556           n++, idx += sizeof(struct ip6_addr_packed)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   557        u16_t copied;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   558        ip6_addr_t *ntp_addr6 = ip_2_ip6(&ntp_server_addrs[n]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   559        ip_addr_set_zero_ip6(&ntp_server_addrs[n]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   560        copied = pbuf_copy_partial(p_msg_in, ntp_addr6, sizeof(struct ip6_addr_packed), idx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   561        if (copied != sizeof(struct ip6_addr_packed)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   562          /* pbuf length mismatch */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   563          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   564        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   565        ip6_addr_assign_zone(ntp_addr6, IP6_UNKNOWN, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   566      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   567      dhcp6_set_ntp_servers(n, ntp_server_addrs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   568    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   569  #endif /* LWIP_DHCP6_GET_NTP_SRV */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   570  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   571  #endif /* LWIP_IPV6_DHCP6_STATELESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   572  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   573  /** This function is called from nd6 module when an RA messsage is received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   574   * It triggers DHCPv6 requests (if enabled).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   575   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   576  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   577  dhcp6_nd6_ra_trigger(struct netif *netif, u8_t managed_addr_config, u8_t other_config)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   578  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   579    struct dhcp6 *dhcp6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   580  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   581    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   582    dhcp6 = netif_dhcp6_data(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   584    LWIP_UNUSED_ARG(managed_addr_config);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   585    LWIP_UNUSED_ARG(other_config);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   586    LWIP_UNUSED_ARG(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   587  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   588  #if LWIP_IPV6_DHCP6_STATELESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   589    if (dhcp6 != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   590      if (dhcp6_stateless_enabled(dhcp6)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   591        if (other_config) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   592          dhcp6_request_config(netif, dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   593        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   594          dhcp6_abort_config_request(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   595        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   596      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   597    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   598  #endif /* LWIP_IPV6_DHCP6_STATELESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   599  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   600  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   601  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   602   * Parse the DHCPv6 message and extract the DHCPv6 options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   603   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   604   * Extract the DHCPv6 options (offset + length) so that we can later easily
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   605   * check for them or extract the contents.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   606   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   607  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   608  dhcp6_parse_reply(struct pbuf *p, struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   609  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   610    u16_t offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   611    u16_t offset_max;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   612    u16_t options_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   613    struct dhcp6_msg *msg_in;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   614  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   615    LWIP_UNUSED_ARG(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   616  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   617    /* clear received options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   618    dhcp6_clear_all_options(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   619    msg_in = (struct dhcp6_msg *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   620  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   621    /* parse options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   622  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   623    options_idx = sizeof(struct dhcp6_msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   624    /* parse options to the end of the received packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   625    offset_max = p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   626  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   627    offset = options_idx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   628    /* at least 4 byte to read? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   629    while ((offset + 4 <= offset_max)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   630      u8_t op_len_buf[4];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   631      u8_t *op_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   632      u16_t op;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   633      u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   634      u16_t val_offset = (u16_t)(offset + 4);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   635      if (val_offset < offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   636        /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   637        return ERR_BUF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   638      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   639      /* copy option + length, might be split accross pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   640      op_len = (u8_t *)pbuf_get_contiguous(p, op_len_buf, 4, 4, offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   641      if (op_len == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   642        /* failed to get option and length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   643        return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   644      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   645      op = (op_len[0] << 8) | op_len[1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   646      len = (op_len[2] << 8) | op_len[3];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   647      offset = val_offset + len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   648      if (offset < val_offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   649        /* overflow */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   650        return ERR_BUF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   651      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   652  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   653      switch (op) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   654        case (DHCP6_OPTION_CLIENTID):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   655          dhcp6_got_option(dhcp6, DHCP6_OPTION_IDX_CLI_ID);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   656          dhcp6_set_option(dhcp6, DHCP6_OPTION_IDX_CLI_ID, val_offset, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   657          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   658        case (DHCP6_OPTION_SERVERID):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   659          dhcp6_got_option(dhcp6, DHCP6_OPTION_IDX_SERVER_ID);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   660          dhcp6_set_option(dhcp6, DHCP6_OPTION_IDX_SERVER_ID, val_offset, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   661          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   662  #if LWIP_DHCP6_PROVIDE_DNS_SERVERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   663        case (DHCP6_OPTION_DNS_SERVERS):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   664          dhcp6_got_option(dhcp6, DHCP6_OPTION_IDX_DNS_SERVER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   665          dhcp6_set_option(dhcp6, DHCP6_OPTION_IDX_DNS_SERVER, val_offset, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   666          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   667        case (DHCP6_OPTION_DOMAIN_LIST):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   668          dhcp6_got_option(dhcp6, DHCP6_OPTION_IDX_DOMAIN_LIST);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   669          dhcp6_set_option(dhcp6, DHCP6_OPTION_IDX_DOMAIN_LIST, val_offset, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   670          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   671  #endif /* LWIP_DHCP6_PROVIDE_DNS_SERVERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   672  #if LWIP_DHCP6_GET_NTP_SRV
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   673        case (DHCP6_OPTION_SNTP_SERVERS):
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   674          dhcp6_got_option(dhcp6, DHCP6_OPTION_IDX_NTP_SERVER);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   675          dhcp6_set_option(dhcp6, DHCP6_OPTION_IDX_NTP_SERVER, val_offset, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   676          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   677  #endif /* LWIP_DHCP6_GET_NTP_SRV*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   678        default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   679          LWIP_DEBUGF(DHCP6_DEBUG, ("skipping option %"U16_F" in options\n", op));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   680          LWIP_HOOK_DHCP6_PARSE_OPTION(ip_current_netif(), dhcp6, dhcp6->state, msg_in,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   681            msg_in->msgtype, op, len, q, val_offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   682          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   683      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   684    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   685    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   686  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   687  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   688  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   689  dhcp6_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   690  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   691    struct netif *netif = ip_current_input_netif();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   692    struct dhcp6 *dhcp6 = netif_dhcp6_data(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   693    struct dhcp6_msg *reply_msg = (struct dhcp6_msg *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   694    u8_t msg_type;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   695    u32_t xid;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   696  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   697    LWIP_UNUSED_ARG(arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   698  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   699    /* Caught DHCPv6 message from netif that does not have DHCPv6 enabled? -> not interested */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   700    if ((dhcp6 == NULL) || (dhcp6->pcb_allocated == 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   701      goto free_pbuf_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   702    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   703  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   704    LWIP_ERROR("invalid server address type", IP_IS_V6(addr), goto free_pbuf_and_return;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   705  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   706    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("dhcp6_recv(pbuf = %p) from DHCPv6 server %s port %"U16_F"\n", (void *)p,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   707      ipaddr_ntoa(addr), port));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   708    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   709    LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   710    /* prevent warnings about unused arguments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   711    LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   712    LWIP_UNUSED_ARG(addr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   713    LWIP_UNUSED_ARG(port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   714  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   715    if (p->len < sizeof(struct dhcp6_msg)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   716      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCPv6 reply message or pbuf too short\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   717      goto free_pbuf_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   718    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   719  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   720    /* match transaction ID against what we expected */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   721    xid = reply_msg->transaction_id[0] << 16;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   722    xid |= reply_msg->transaction_id[1] << 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   723    xid |= reply_msg->transaction_id[2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   724    if (xid != dhcp6->xid) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   725      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   726                  ("transaction id mismatch reply_msg->xid(%"X32_F")!= dhcp6->xid(%"X32_F")\n", xid, dhcp6->xid));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   727      goto free_pbuf_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   728    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   729    /* option fields could be unfold? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   730    if (dhcp6_parse_reply(p, dhcp6) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   731      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   732                  ("problem unfolding DHCPv6 message - too short on memory?\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   733      goto free_pbuf_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   734    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   735  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   736    /* read DHCP message type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   737    msg_type = reply_msg->msgtype;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   738    /* message type is DHCP6 REPLY? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   739    if (msg_type == DHCP6_REPLY) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   740      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("DHCP6_REPLY received\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   741  #if LWIP_IPV6_DHCP6_STATELESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   742      /* in info-requesting state? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   743      if (dhcp6->state == DHCP6_STATE_REQUESTING_CONFIG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   744        dhcp6_set_state(dhcp6, DHCP6_STATE_STATELESS_IDLE, "dhcp6_recv");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   745        dhcp6_handle_config_reply(netif, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   746      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   747  #endif /* LWIP_IPV6_DHCP6_STATELESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   748      {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   749        /* @todo: handle reply in other states? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   750      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   751    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   752      /* @todo: handle other message types */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   753    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   754  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   755  free_pbuf_and_return:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   756    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   757  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   758  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   759  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   760   * A DHCPv6 request has timed out.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   761   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   762   * The timer that was started with the DHCPv6 request has
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   763   * timed out, indicating no response was received in time.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   764   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   765  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   766  dhcp6_timeout(struct netif *netif, struct dhcp6 *dhcp6)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   767  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   768    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp6_timeout()\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   769  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   770    LWIP_UNUSED_ARG(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   771    LWIP_UNUSED_ARG(dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   772  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   773  #if LWIP_IPV6_DHCP6_STATELESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   774    /* back-off period has passed, or server selection timed out */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   775    if (dhcp6->state == DHCP6_STATE_REQUESTING_CONFIG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   776      LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE, ("dhcp6_timeout(): retrying information request\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   777      dhcp6_information_request(netif, dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   778    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   779  #endif /* LWIP_IPV6_DHCP6_STATELESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   780  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   781  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   782  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   783   * DHCPv6 timeout handling (this function must be called every 500ms,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   784   * see @ref DHCP6_TIMER_MSECS).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   785   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   786   * A DHCPv6 server is expected to respond within a short period of time.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   787   * This timer checks whether an outstanding DHCPv6 request is timed out.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   788   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   789  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   790  dhcp6_tmr(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   791  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   792    struct netif *netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   793    /* loop through netif's */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   794    NETIF_FOREACH(netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   795      struct dhcp6 *dhcp6 = netif_dhcp6_data(netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   796      /* only act on DHCPv6 configured interfaces */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   797      if (dhcp6 != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   798        /* timer is active (non zero), and is about to trigger now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   799        if (dhcp6->request_timeout > 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   800          dhcp6->request_timeout--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   801        } else if (dhcp6->request_timeout == 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   802          dhcp6->request_timeout--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   803          /* { dhcp6->request_timeout == 0 } */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   804          LWIP_DEBUGF(DHCP6_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp6_tmr(): request timeout\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   805          /* this client's request timeout triggered */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   806          dhcp6_timeout(netif, dhcp6);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   807        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   808      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   809    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   810  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   811  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\core\ipv6\dhcp6.c	   812  #endif /* LWIP_IPV6 && LWIP_IPV6_DHCP6 */

	; Module end
