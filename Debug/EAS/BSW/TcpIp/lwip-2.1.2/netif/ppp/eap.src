	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc34052a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.eap.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\eap.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\eap.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\eap.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\eap.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4546
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\eap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	167
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	169
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	192
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	192
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	239
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	276
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	192
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	192
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	239
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	375
	.byte	3
	.word	192
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	469
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	498
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	192
	.byte	8,4
	.word	276
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	612
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	239
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	685
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	192
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	612
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	612
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	927
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	192
	.byte	8,3
	.word	192
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1084
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1093
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	239
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1227
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	192
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1338
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	192
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	192
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	239
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	239
	.byte	8,1
	.word	192
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1792
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1792
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1801
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1877
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	685
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2013
	.byte	12
	.word	192
	.byte	3
	.word	2127
	.byte	12
	.word	192
	.byte	3
	.word	2137
	.byte	12
	.word	192
	.byte	3
	.word	2147
	.byte	12
	.word	1877
	.byte	3
	.word	2157
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	192
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	192
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	685
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2132
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2142
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2152
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2162
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2167
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	276
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	276
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	276
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2519
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	276
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2669
	.byte	12
	.word	2519
	.byte	3
	.word	2806
	.byte	12
	.word	2669
	.byte	3
	.word	2816
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2162
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2811
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2821
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2826
	.byte	12
	.word	192
	.byte	3
	.word	3111
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3116
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3116
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3121
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	192
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3285
	.byte	3
	.word	1801
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	469
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3435
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3650
	.byte	12
	.word	3435
	.byte	3
	.word	3820
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	469
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	239
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	239
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3116
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3825
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3830
	.byte	12
	.word	3650
	.byte	3
	.word	4054
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4059
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4064
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4164
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4261
	.byte	8,8
	.word	192
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4355
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4064
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4064
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4261
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4164
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4364
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	192
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\eap.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     1  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     2   * eap.c - Extensible Authentication Protocol for PPP (RFC 2284)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     4   * Copyright (c) 2001 by Sun Microsystems, Inc.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     5   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     6   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     7   * Non-exclusive rights to redistribute, modify, translate, and use
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     8   * this software in source and binary forms, in whole or in part, is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	     9   * hereby granted, provided that the above copyright notice is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    10   * duplicated in any source form, and that neither the name of the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    11   * copyright holder nor the author is used to endorse or promote
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    12   * products derived from this software.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    13   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    14   * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    15   * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    16   * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    17   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    18   * Original version by James Carlson
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    19   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    20   * This implementation of EAP supports MD5-Challenge and SRP-SHA1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    21   * authentication styles.  Note that support of MD5-Challenge is a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    22   * requirement of RFC 2284, and that it's essentially just a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    23   * reimplementation of regular RFC 1994 CHAP using EAP messages.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    24   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    25   * As an authenticator ("server"), there are multiple phases for each
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    26   * style.  In the first phase of each style, the unauthenticated peer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    27   * name is queried using the EAP Identity request type.  If the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    28   * "remotename" option is used, then this phase is skipped, because
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    29   * the peer's name is presumed to be known.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    30   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    31   * For MD5-Challenge, there are two phases, and the second phase
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    32   * consists of sending the challenge itself and handling the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    33   * associated response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    34   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    35   * For SRP-SHA1, there are four phases.  The second sends 's', 'N',
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    36   * and 'g'.  The reply contains 'A'.  The third sends 'B', and the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    37   * reply contains 'M1'.  The forth sends the 'M2' value.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    38   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    39   * As an authenticatee ("client"), there's just a single phase --
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    40   * responding to the queries generated by the peer.  EAP is an
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    41   * authenticator-driven protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    42   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    43   * Based on draft-ietf-pppext-eap-srp-03.txt.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    44   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    45  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    46  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    47  #if PPP_SUPPORT && EAP_SUPPORT  /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    48  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    49  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    50  #include "netif/ppp/eap.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    51  #include "netif/ppp/magic.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    52  #include "netif/ppp/pppcrypt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    53  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    54  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    55  #include <t_pwd.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    56  #include <t_server.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    57  #include <t_client.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    58  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    59  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    60  #ifndef SHA_DIGESTSIZE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    61  #define	SHA_DIGESTSIZE 20
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    62  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    63  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    64  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    65  static char *pn_secret = NULL;		/* Pseudonym generating secret */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    66  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    67  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    68  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    69  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    70   * Command-line options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    71   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    72  static option_t eap_option_list[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    73      { "eap-restart", o_int, &eap_states[0].es_server.ea_timeout,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    74        "Set retransmit timeout for EAP Requests (server)" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    75      { "eap-max-sreq", o_int, &eap_states[0].es_server.ea_maxrequests,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    76        "Set max number of EAP Requests sent (server)" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    77      { "eap-timeout", o_int, &eap_states[0].es_client.ea_timeout,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    78        "Set time limit for peer EAP authentication" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    79      { "eap-max-rreq", o_int, &eap_states[0].es_client.ea_maxrequests,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    80        "Set max number of EAP Requests allows (client)" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    81      { "eap-interval", o_int, &eap_states[0].es_rechallenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    82        "Set interval for EAP rechallenge" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    83  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    84      { "srp-interval", o_int, &eap_states[0].es_lwrechallenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    85        "Set interval for SRP lightweight rechallenge" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    86      { "srp-pn-secret", o_string, &pn_secret,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    87        "Long term pseudonym generation secret" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    88      { "srp-use-pseudonym", o_bool, &eap_states[0].es_usepseudo,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    89        "Use pseudonym if offered one by server", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    90  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    91      { NULL }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    92  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    93  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    94  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    95  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    96   * Protocol entry points.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    97   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    98  static void eap_init(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	    99  static void eap_input(ppp_pcb *pcb, u_char *inp, int inlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   100  static void eap_protrej(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   101  static void eap_lowerup(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   102  static void eap_lowerdown(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   103  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   104  static int  eap_printpkt(const u_char *inp, int inlen,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   105      void (*)(void *arg, const char *fmt, ...), void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   106  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   107  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   108  const struct protent eap_protent = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   109  	PPP_EAP,		/* protocol number */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   110  	eap_init,		/* initialization procedure */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   111  	eap_input,		/* process a received packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   112  	eap_protrej,		/* process a received protocol-reject */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   113  	eap_lowerup,		/* lower layer has gone up */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   114  	eap_lowerdown,		/* lower layer has gone down */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   115  	NULL,			/* open the protocol */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   116  	NULL,			/* close the protocol */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   117  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   118  	eap_printpkt,		/* print a packet in readable form */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   119  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   120  #if PPP_DATAINPUT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   121  	NULL,			/* process a received data packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   122  #endif /* PPP_DATAINPUT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   123  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   124  	"EAP",			/* text name of protocol */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   125  	NULL,			/* text name of corresponding data protocol */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   126  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   127  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   128  	eap_option_list,	/* list of command-line options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   129  	NULL,			/* check requested options; assign defaults */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   130  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   131  #if DEMAND_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   132  	NULL,			/* configure interface for demand-dial */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   133  	NULL			/* say whether to bring up link for this pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   134  #endif /* DEMAND_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   135  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   136  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   137  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   138  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   139   * A well-known 2048 bit modulus.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   140   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   141  static const u_char wkmodulus[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   142  	0xAC, 0x6B, 0xDB, 0x41, 0x32, 0x4A, 0x9A, 0x9B,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   143  	0xF1, 0x66, 0xDE, 0x5E, 0x13, 0x89, 0x58, 0x2F,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   144  	0xAF, 0x72, 0xB6, 0x65, 0x19, 0x87, 0xEE, 0x07,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   145  	0xFC, 0x31, 0x92, 0x94, 0x3D, 0xB5, 0x60, 0x50,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   146  	0xA3, 0x73, 0x29, 0xCB, 0xB4, 0xA0, 0x99, 0xED,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   147  	0x81, 0x93, 0xE0, 0x75, 0x77, 0x67, 0xA1, 0x3D,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   148  	0xD5, 0x23, 0x12, 0xAB, 0x4B, 0x03, 0x31, 0x0D,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   149  	0xCD, 0x7F, 0x48, 0xA9, 0xDA, 0x04, 0xFD, 0x50,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   150  	0xE8, 0x08, 0x39, 0x69, 0xED, 0xB7, 0x67, 0xB0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   151  	0xCF, 0x60, 0x95, 0x17, 0x9A, 0x16, 0x3A, 0xB3,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   152  	0x66, 0x1A, 0x05, 0xFB, 0xD5, 0xFA, 0xAA, 0xE8,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   153  	0x29, 0x18, 0xA9, 0x96, 0x2F, 0x0B, 0x93, 0xB8,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   154  	0x55, 0xF9, 0x79, 0x93, 0xEC, 0x97, 0x5E, 0xEA,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   155  	0xA8, 0x0D, 0x74, 0x0A, 0xDB, 0xF4, 0xFF, 0x74,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   156  	0x73, 0x59, 0xD0, 0x41, 0xD5, 0xC3, 0x3E, 0xA7,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   157  	0x1D, 0x28, 0x1E, 0x44, 0x6B, 0x14, 0x77, 0x3B,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   158  	0xCA, 0x97, 0xB4, 0x3A, 0x23, 0xFB, 0x80, 0x16,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   159  	0x76, 0xBD, 0x20, 0x7A, 0x43, 0x6C, 0x64, 0x81,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   160  	0xF1, 0xD2, 0xB9, 0x07, 0x87, 0x17, 0x46, 0x1A,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   161  	0x5B, 0x9D, 0x32, 0xE6, 0x88, 0xF8, 0x77, 0x48,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   162  	0x54, 0x45, 0x23, 0xB5, 0x24, 0xB0, 0xD5, 0x7D,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   163  	0x5E, 0xA7, 0x7A, 0x27, 0x75, 0xD2, 0xEC, 0xFA,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   164  	0x03, 0x2C, 0xFB, 0xDB, 0xF5, 0x2F, 0xB3, 0x78,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   165  	0x61, 0x60, 0x27, 0x90, 0x04, 0xE5, 0x7A, 0xE6,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   166  	0xAF, 0x87, 0x4E, 0x73, 0x03, 0xCE, 0x53, 0x29,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   167  	0x9C, 0xCC, 0x04, 0x1C, 0x7B, 0xC3, 0x08, 0xD8,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   168  	0x2A, 0x56, 0x98, 0xF3, 0xA8, 0xD0, 0xC3, 0x82,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   169  	0x71, 0xAE, 0x35, 0xF8, 0xE9, 0xDB, 0xFB, 0xB6,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   170  	0x94, 0xB5, 0xC8, 0x03, 0xD8, 0x9F, 0x7A, 0xE4,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   171  	0x35, 0xDE, 0x23, 0x6D, 0x52, 0x5F, 0x54, 0x75,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   172  	0x9B, 0x65, 0xE3, 0x72, 0xFC, 0xD6, 0x8E, 0xF2,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   173  	0x0F, 0xA7, 0x11, 0x1F, 0x9E, 0x4A, 0xFF, 0x73
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   174  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   175  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   176  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   177  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   178  /* Local forward declarations. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   179  static void eap_server_timeout(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   180  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   181  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   182  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   183   * Convert EAP state code to printable string for debug.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   184   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   185  static const char * eap_state_name(enum eap_state_code esc)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   186  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   187  	static const char *state_names[] = { EAP_STATES };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   188  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   189  	return (state_names[(int)esc]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   190  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   191  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   192  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   193   * eap_init - Initialize state for an EAP user.  This is currently
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   194   * called once by main() during start-up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   195   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   196  static void eap_init(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   197  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   198  	BZERO(&pcb->eap, sizeof(eap_state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   199  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   200  	pcb->eap.es_server.ea_id = magic();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   201  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   202  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   203  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   204  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   205   * eap_client_timeout - Give up waiting for the peer to send any
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   206   * Request messages.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   207   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   208  static void eap_client_timeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   209  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   210  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   211  	if (!eap_client_active(pcb))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   212  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   213  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   214  	ppp_error("EAP: timeout waiting for Request from peer");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   215  	auth_withpeer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   216  	pcb->eap.es_client.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   217  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   218  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   219  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   220   * eap_authwithpeer - Authenticate to our peer (behave as client).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   221   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   222   * Start client state and wait for requests.  This is called only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   223   * after eap_lowerup.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   224   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   225  void eap_authwithpeer(ppp_pcb *pcb, const char *localname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   226  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   227  	if(NULL == localname)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   228  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   229  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   230  	/* Save the peer name we're given */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   231  	pcb->eap.es_client.ea_name = localname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   232  	pcb->eap.es_client.ea_namelen = strlen(localname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   233  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   234  	pcb->eap.es_client.ea_state = eapListen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   235  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   236  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   237  	 * Start a timer so that if the other end just goes
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   238  	 * silent, we don't sit here waiting forever.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   239  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   240  	if (pcb->settings.eap_req_time > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   241  		TIMEOUT(eap_client_timeout, pcb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   242  		    pcb->settings.eap_req_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   243  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   244  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   245  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   246  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   247   * Format a standard EAP Failure message and send it to the peer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   248   * (Server operation)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   249   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   250  static void eap_send_failure(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   251  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   252  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   253  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   254  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + EAP_HEADERLEN), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   255  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   256  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   257  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   258  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   259  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   260  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   261  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   262  	outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   263  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   264  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   265  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   266  	PUTCHAR(EAP_FAILURE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   267  	pcb->eap.es_server.ea_id++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   268  	PUTCHAR(pcb->eap.es_server.ea_id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   269  	PUTSHORT(EAP_HEADERLEN, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   270  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   271  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   272  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   273  	pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   274  	auth_peer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   275  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   276  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   277  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   278   * Format a standard EAP Success message and send it to the peer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   279   * (Server operation)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   280   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   281  static void eap_send_success(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   282  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   283  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   284  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   285  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + EAP_HEADERLEN), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   286  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   287  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   288  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   289  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   290  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   291  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   292  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   293  	outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   294      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   295  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   296  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   297  	PUTCHAR(EAP_SUCCESS, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   298  	pcb->eap.es_server.ea_id++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   299  	PUTCHAR(pcb->eap.es_server.ea_id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   300  	PUTSHORT(EAP_HEADERLEN, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   301  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   302  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   303  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   304  	auth_peer_success(pcb, PPP_EAP, 0,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   305  	    pcb->eap.es_server.ea_peer, pcb->eap.es_server.ea_peerlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   306  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   307  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   308  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   309  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   310  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   311   * Set DES key according to pseudonym-generating secret and current
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   312   * date.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   313   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   314  static bool
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   315  pncrypt_setkey(int timeoffs)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   316  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   317  	struct tm *tp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   318  	char tbuf[9];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   319  	SHA1_CTX ctxt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   320  	u_char dig[SHA_DIGESTSIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   321  	time_t reftime;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   322  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   323  	if (pn_secret == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   324  		return (0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   325  	reftime = time(NULL) + timeoffs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   326  	tp = localtime(&reftime);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   327  	SHA1Init(&ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   328  	SHA1Update(&ctxt, pn_secret, strlen(pn_secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   329  	strftime(tbuf, sizeof (tbuf), "%Y%m%d", tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   330  	SHA1Update(&ctxt, tbuf, strlen(tbuf));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   331  	SHA1Final(dig, &ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   332  	/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   333  	return (DesSetkey(dig));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   334  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   335  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   336  static char base64[] =
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   337  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   338  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   339  struct b64state {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   340  	u32_t bs_bits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   341  	int bs_offs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   342  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   343  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   344  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   345  b64enc(bs, inp, inlen, outp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   346  struct b64state *bs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   347  u_char *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   348  int inlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   349  u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   350  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   351  	int outlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   352  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   353  	while (inlen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   354  		bs->bs_bits = (bs->bs_bits << 8) | *inp++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   355  		inlen--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   356  		bs->bs_offs += 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   357  		if (bs->bs_offs >= 24) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   358  			*outp++ = base64[(bs->bs_bits >> 18) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   359  			*outp++ = base64[(bs->bs_bits >> 12) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   360  			*outp++ = base64[(bs->bs_bits >> 6) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   361  			*outp++ = base64[bs->bs_bits & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   362  			outlen += 4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   363  			bs->bs_offs = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   364  			bs->bs_bits = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   365  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   366  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   367  	return (outlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   368  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   369  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   370  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   371  b64flush(bs, outp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   372  struct b64state *bs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   373  u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   374  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   375  	int outlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   376  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   377  	if (bs->bs_offs == 8) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   378  		*outp++ = base64[(bs->bs_bits >> 2) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   379  		*outp++ = base64[(bs->bs_bits << 4) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   380  		outlen = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   381  	} else if (bs->bs_offs == 16) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   382  		*outp++ = base64[(bs->bs_bits >> 10) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   383  		*outp++ = base64[(bs->bs_bits >> 4) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   384  		*outp++ = base64[(bs->bs_bits << 2) & 0x3F];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   385  		outlen = 3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   386  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   387  	bs->bs_offs = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   388  	bs->bs_bits = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   389  	return (outlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   390  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   391  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   392  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   393  b64dec(bs, inp, inlen, outp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   394  struct b64state *bs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   395  u_char *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   396  int inlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   397  u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   398  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   399  	int outlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   400  	char *cp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   401  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   402  	while (inlen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   403  		if ((cp = strchr(base64, *inp++)) == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   404  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   405  		bs->bs_bits = (bs->bs_bits << 6) | (cp - base64);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   406  		inlen--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   407  		bs->bs_offs += 6;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   408  		if (bs->bs_offs >= 8) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   409  			*outp++ = bs->bs_bits >> (bs->bs_offs - 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   410  			outlen++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   411  			bs->bs_offs -= 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   412  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   413  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   414  	return (outlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   415  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   416  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   417  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   418  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   419  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   420   * Assume that current waiting server state is complete and figure
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   421   * next state to use based on available authentication data.  'status'
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   422   * indicates if there was an error in handling the last query.  It is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   423   * 0 for success and non-zero for failure.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   424   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   425  static void eap_figure_next_state(ppp_pcb *pcb, int status) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   426  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   427  	unsigned char secbuf[MAXSECRETLEN], clear[8], *sp, *dp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   428  	struct t_pw tpw;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   429  	struct t_confent *tce, mytce;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   430  	char *cp, *cp2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   431  	struct t_server *ts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   432  	int id, i, plen, toffs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   433  	u_char vals[2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   434  	struct b64state bs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   435  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   436  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   437  	pcb->settings.eap_timeout_time = pcb->eap.es_savedtime;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   438  	switch (pcb->eap.es_server.ea_state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   439  	case eapBadAuth:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   440  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   441  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   442  	case eapIdentify:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   443  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   444  		/* Discard any previous session. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   445  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   446  		if (ts != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   447  			t_serverclose(ts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   448  			pcb->eap.es_server.ea_session = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   449  			pcb->eap.es_server.ea_skey = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   450  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   451  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   452  		if (status != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   453  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   454  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   455  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   456  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   457  		/* If we've got a pseudonym, try to decode to real name. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   458  		if (pcb->eap.es_server.ea_peerlen > SRP_PSEUDO_LEN &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   459  		    strncmp(pcb->eap.es_server.ea_peer, SRP_PSEUDO_ID,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   460  			SRP_PSEUDO_LEN) == 0 &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   461  		    (pcb->eap.es_server.ea_peerlen - SRP_PSEUDO_LEN) * 3 / 4 <
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   462  		    sizeof (secbuf)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   463  			BZERO(&bs, sizeof (bs));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   464  			plen = b64dec(&bs,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   465  			    pcb->eap.es_server.ea_peer + SRP_PSEUDO_LEN,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   466  			    pcb->eap.es_server.ea_peerlen - SRP_PSEUDO_LEN,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   467  			    secbuf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   468  			toffs = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   469  			for (i = 0; i < 5; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   470  				pncrypt_setkey(toffs);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   471  				toffs -= 86400;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   472  				/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   473  				if (!DesDecrypt(secbuf, clear)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   474  					ppp_dbglog("no DES here; cannot decode "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   475  					    "pseudonym");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   476  					return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   477  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   478  				id = *(unsigned char *)clear;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   479  				if (id + 1 <= plen && id + 9 > plen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   480  					break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   481  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   482  			if (plen % 8 == 0 && i < 5) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   483  				/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   484  				 * Note that this is always shorter than the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   485  				 * original stored string, so there's no need
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   486  				 * to realloc.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   487  				 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   488  				if ((i = plen = *(unsigned char *)clear) > 7)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   489  					i = 7;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   490  				pcb->eap.es_server.ea_peerlen = plen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   491  				dp = (unsigned char *)pcb->eap.es_server.ea_peer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   492  				MEMCPY(dp, clear + 1, i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   493  				plen -= i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   494  				dp += i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   495  				sp = secbuf + 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   496  				while (plen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   497  					/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   498  					(void) DesDecrypt(sp, dp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   499  					sp += 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   500  					dp += 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   501  					plen -= 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   502  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   503  				pcb->eap.es_server.ea_peer[
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   504  					pcb->eap.es_server.ea_peerlen] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   505  				ppp_dbglog("decoded pseudonym to \"%.*q\"",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   506  				    pcb->eap.es_server.ea_peerlen,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   507  				    pcb->eap.es_server.ea_peer);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   508  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   509  				ppp_dbglog("failed to decode real name");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   510  				/* Stay in eapIdentfy state; requery */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   511  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   512  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   513  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   514  		/* Look up user in secrets database. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   515  		if (get_srp_secret(pcb->eap.es_unit, pcb->eap.es_server.ea_peer,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   516  		    pcb->eap.es_server.ea_name, (char *)secbuf, 1) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   517  			/* Set up default in case SRP entry is bad */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   518  			pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   519  			/* Get t_confent based on index in srp-secrets */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   520  			id = strtol((char *)secbuf, &cp, 10);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   521  			if (*cp++ != ':' || id < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   522  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   523  			if (id == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   524  				mytce.index = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   525  				mytce.modulus.data = (u_char *)wkmodulus;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   526  				mytce.modulus.len = sizeof (wkmodulus);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   527  				mytce.generator.data = (u_char *)"\002";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   528  				mytce.generator.len = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   529  				tce = &mytce;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   530  			} else if ((tce = gettcid(id)) != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   531  				/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   532  				 * Client will have to verify this modulus/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   533  				 * generator combination, and that will take
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   534  				 * a while.  Lengthen the timeout here.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   535  				 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   536  				if (pcb->settings.eap_timeout_time > 0 &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   537  				    pcb->settings.eap_timeout_time < 30)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   538  					pcb->settings.eap_timeout_time = 30;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   539  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   540  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   541  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   542  			if ((cp2 = strchr(cp, ':')) == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   543  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   544  			*cp2++ = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   545  			tpw.pebuf.name = pcb->eap.es_server.ea_peer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   546  			tpw.pebuf.password.len = t_fromb64((char *)tpw.pwbuf,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   547  			    cp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   548  			tpw.pebuf.password.data = tpw.pwbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   549  			tpw.pebuf.salt.len = t_fromb64((char *)tpw.saltbuf,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   550  			    cp2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   551  			tpw.pebuf.salt.data = tpw.saltbuf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   552  			if ((ts = t_serveropenraw(&tpw.pebuf, tce)) == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   553  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   554  			pcb->eap.es_server.ea_session = (void *)ts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   555  			pcb->eap.es_server.ea_state = eapSRP1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   556  			vals[0] = pcb->eap.es_server.ea_id + 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   557  			vals[1] = EAPT_SRP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   558  			t_serveraddexdata(ts, vals, 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   559  			/* Generate B; must call before t_servergetkey() */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   560  			t_servergenexp(ts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   561  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   562  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   563  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   564  		pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   565  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   566  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   567  	case eapSRP1:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   568  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   569  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   570  		if (ts != NULL && status != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   571  			t_serverclose(ts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   572  			pcb->eap.es_server.ea_session = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   573  			pcb->eap.es_server.ea_skey = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   574  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   575  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   576  		if (status == 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   577  			pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   578  		} else if (status != 0 || pcb->eap.es_server.ea_session == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   579  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   580  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   581  			pcb->eap.es_server.ea_state = eapSRP2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   582  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   583  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   584  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   585  	case eapSRP2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   586  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   587  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   588  		if (ts != NULL && status != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   589  			t_serverclose(ts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   590  			pcb->eap.es_server.ea_session = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   591  			pcb->eap.es_server.ea_skey = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   592  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   593  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   594  		if (status != 0 || pcb->eap.es_server.ea_session == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   595  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   596  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   597  			pcb->eap.es_server.ea_state = eapSRP3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   598  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   599  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   600  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   601  	case eapSRP3:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   602  	case eapSRP4:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   603  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   604  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   605  		if (ts != NULL && status != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   606  			t_serverclose(ts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   607  			pcb->eap.es_server.ea_session = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   608  			pcb->eap.es_server.ea_skey = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   609  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   610  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   611  		if (status != 0 || pcb->eap.es_server.ea_session == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   612  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   613  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   614  			pcb->eap.es_server.ea_state = eapOpen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   615  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   616  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   617  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   618  	case eapMD5Chall:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   619  		if (status != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   620  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   621  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   622  			pcb->eap.es_server.ea_state = eapOpen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   623  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   624  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   625  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   626  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   627  		pcb->eap.es_server.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   628  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   629  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   630  	if (pcb->eap.es_server.ea_state == eapBadAuth)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   631  		eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   632  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   633  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   634  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   635   * Format an EAP Request message and send it to the peer.  Message
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   636   * type depends on current state.  (Server operation)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   637   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   638  static void eap_send_request(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   639  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   640  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   641  	u_char *lenloc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   642  	int outlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   643  	int len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   644  	const char *str;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   645  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   646  	struct t_server *ts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   647  	u_char clear[8], cipher[8], dig[SHA_DIGESTSIZE], *optr, *cp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   648  	int i, j;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   649  	struct b64state b64;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   650  	SHA1_CTX ctxt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   651  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   652  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   653  	/* Handle both initial auth and restart */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   654  	if (pcb->eap.es_server.ea_state < eapIdentify &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   655  	    pcb->eap.es_server.ea_state != eapInitial) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   656  		pcb->eap.es_server.ea_state = eapIdentify;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   657  #if PPP_REMOTENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   658  		if (pcb->settings.explicit_remote && pcb->remote_name) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   659  			/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   660  			 * If we already know the peer's
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   661  			 * unauthenticated name, then there's no
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   662  			 * reason to ask.  Go to next state instead.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   663  			 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   664  			int len = (int)strlen(pcb->remote_name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   665  			if (len > MAXNAMELEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   666  				len = MAXNAMELEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   667  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   668  			MEMCPY(pcb->eap.es_server.ea_peer, pcb->remote_name, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   669  			pcb->eap.es_server.ea_peer[len] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   670  			pcb->eap.es_server.ea_peerlen = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   671  			eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   672  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   673  #endif /* PPP_REMOTENAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   674  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   675  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   676  	if (pcb->settings.eap_max_transmits > 0 &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   677  	    pcb->eap.es_server.ea_requests >= pcb->settings.eap_max_transmits) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   678  		if (pcb->eap.es_server.ea_responses > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   679  			ppp_error("EAP: too many Requests sent");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   680  		else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   681  			ppp_error("EAP: no response to Requests");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   682  		eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   683  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   684  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   685  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   686  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_MAX_SIZE), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   687  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   688  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   689  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   690  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   691  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   692  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   693  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   694  	outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   695      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   696  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   697  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   698  	PUTCHAR(EAP_REQUEST, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   699  	PUTCHAR(pcb->eap.es_server.ea_id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   700  	lenloc = outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   701  	INCPTR(2, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   702  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   703  	switch (pcb->eap.es_server.ea_state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   704  	case eapIdentify:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   705  		PUTCHAR(EAPT_IDENTITY, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   706  		str = "Name";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   707  		len = strlen(str);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   708  		MEMCPY(outp, str, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   709  		INCPTR(len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   710  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   711  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   712  	case eapMD5Chall:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   713  		PUTCHAR(EAPT_MD5CHAP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   714  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   715  		 * pick a random challenge length between
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   716  		 * EAP_MIN_CHALLENGE_LENGTH and EAP_MAX_CHALLENGE_LENGTH
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   717  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   718  		pcb->eap.es_challen = EAP_MIN_CHALLENGE_LENGTH +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   719  		    magic_pow(EAP_MIN_MAX_POWER_OF_TWO_CHALLENGE_LENGTH);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   720  		PUTCHAR(pcb->eap.es_challen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   721  		magic_random_bytes(pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   722  		MEMCPY(outp, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   723  		INCPTR(pcb->eap.es_challen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   724  		MEMCPY(outp, pcb->eap.es_server.ea_name, pcb->eap.es_server.ea_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   725  		INCPTR(pcb->eap.es_server.ea_namelen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   726  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   727  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   728  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   729  	case eapSRP1:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   730  		PUTCHAR(EAPT_SRP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   731  		PUTCHAR(EAPSRP_CHALLENGE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   732  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   733  		PUTCHAR(pcb->eap.es_server.ea_namelen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   734  		MEMCPY(outp, pcb->eap.es_server.ea_name, pcb->eap.es_server.ea_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   735  		INCPTR(pcb->eap.es_server.ea_namelen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   736  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   737  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   738  		assert(ts != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   739  		PUTCHAR(ts->s.len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   740  		MEMCPY(outp, ts->s.data, ts->s.len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   741  		INCPTR(ts->s.len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   742  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   743  		if (ts->g.len == 1 && ts->g.data[0] == 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   744  			PUTCHAR(0, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   745  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   746  			PUTCHAR(ts->g.len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   747  			MEMCPY(outp, ts->g.data, ts->g.len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   748  			INCPTR(ts->g.len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   749  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   750  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   751  		if (ts->n.len != sizeof (wkmodulus) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   752  		    BCMP(ts->n.data, wkmodulus, sizeof (wkmodulus)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   753  			MEMCPY(outp, ts->n.data, ts->n.len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   754  			INCPTR(ts->n.len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   755  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   756  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   757  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   758  	case eapSRP2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   759  		PUTCHAR(EAPT_SRP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   760  		PUTCHAR(EAPSRP_SKEY, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   761  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   762  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   763  		assert(ts != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   764  		MEMCPY(outp, ts->B.data, ts->B.len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   765  		INCPTR(ts->B.len, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   766  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   767  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   768  	case eapSRP3:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   769  		PUTCHAR(EAPT_SRP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   770  		PUTCHAR(EAPSRP_SVALIDATOR, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   771  		PUTLONG(SRPVAL_EBIT, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   772  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   773  		assert(ts != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   774  		MEMCPY(outp, t_serverresponse(ts), SHA_DIGESTSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   775  		INCPTR(SHA_DIGESTSIZE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   776  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   777  		if (pncrypt_setkey(0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   778  			/* Generate pseudonym */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   779  			optr = outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   780  			cp = (unsigned char *)pcb->eap.es_server.ea_peer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   781  			if ((j = i = pcb->eap.es_server.ea_peerlen) > 7)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   782  				j = 7;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   783  			clear[0] = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   784  			MEMCPY(clear + 1, cp, j);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   785  			i -= j;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   786  			cp += j;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   787  			/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   788  			if (!DesEncrypt(clear, cipher)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   789  				ppp_dbglog("no DES here; not generating pseudonym");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   790  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   791  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   792  			BZERO(&b64, sizeof (b64));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   793  			outp++;		/* space for pseudonym length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   794  			outp += b64enc(&b64, cipher, 8, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   795  			while (i >= 8) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   796  				/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   797  				(void) DesEncrypt(cp, cipher);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   798  				outp += b64enc(&b64, cipher, 8, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   799  				cp += 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   800  				i -= 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   801  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   802  			if (i > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   803  				MEMCPY(clear, cp, i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   804  				cp += i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   805  				magic_random_bytes(cp, 8-i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   806  				/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   807  				(void) DesEncrypt(clear, cipher);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   808  				outp += b64enc(&b64, cipher, 8, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   809  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   810  			outp += b64flush(&b64, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   811  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   812  			/* Set length and pad out to next 20 octet boundary */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   813  			i = outp - optr - 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   814  			*optr = i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   815  			i %= SHA_DIGESTSIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   816  			if (i != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   817  				magic_random_bytes(outp, SHA_DIGESTSIZE-i);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   818  				INCPTR(SHA_DIGESTSIZE-i, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   819  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   820  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   821  			/* Obscure the pseudonym with SHA1 hash */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   822  			SHA1Init(&ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   823  			SHA1Update(&ctxt, &pcb->eap.es_server.ea_id, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   824  			SHA1Update(&ctxt, pcb->eap.es_server.ea_skey,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   825  			    SESSION_KEY_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   826  			SHA1Update(&ctxt, pcb->eap.es_server.ea_peer,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   827  			    pcb->eap.es_server.ea_peerlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   828  			while (optr < outp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   829  				SHA1Final(dig, &ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   830  				cp = dig;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   831  				while (cp < dig + SHA_DIGESTSIZE)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   832  					*optr++ ^= *cp++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   833  				SHA1Init(&ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   834  				SHA1Update(&ctxt, &pcb->eap.es_server.ea_id, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   835  				SHA1Update(&ctxt, pcb->eap.es_server.ea_skey,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   836  				    SESSION_KEY_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   837  				SHA1Update(&ctxt, optr - SHA_DIGESTSIZE,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   838  				    SHA_DIGESTSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   839  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   840  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   841  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   842  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   843  	case eapSRP4:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   844  		PUTCHAR(EAPT_SRP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   845  		PUTCHAR(EAPSRP_LWRECHALLENGE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   846  		pcb->eap.es_challen = EAP_MIN_CHALLENGE_LENGTH +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   847  		    magic_pow(EAP_MIN_MAX_POWER_OF_TWO_CHALLENGE_LENGTH);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   848  		magic_random_bytes(pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   849  		MEMCPY(outp, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   850  		INCPTR(pcb->eap.es_challen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   851  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   852  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   853  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   854  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   855  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   856  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   857  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   858  	outlen = (outp - (unsigned char*)p->payload) - PPP_HDRLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   859  	PUTSHORT(outlen, lenloc);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   860  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   861  	pbuf_realloc(p, outlen + PPP_HDRLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   862  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   863  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   864  	pcb->eap.es_server.ea_requests++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   865  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   866  	if (pcb->settings.eap_timeout_time > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   867  		TIMEOUT(eap_server_timeout, pcb, pcb->settings.eap_timeout_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   868  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   869  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   870  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   871   * eap_authpeer - Authenticate our peer (behave as server).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   872   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   873   * Start server state and send first request.  This is called only
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   874   * after eap_lowerup.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   875   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   876  void eap_authpeer(ppp_pcb *pcb, const char *localname) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   877  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   878  	/* Save the name we're given. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   879  	pcb->eap.es_server.ea_name = localname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   880  	pcb->eap.es_server.ea_namelen = strlen(localname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   881  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   882  	pcb->eap.es_savedtime = pcb->settings.eap_timeout_time;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   883  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   884  	/* Lower layer up yet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   885  	if (pcb->eap.es_server.ea_state == eapInitial ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   886  	    pcb->eap.es_server.ea_state == eapPending) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   887  		pcb->eap.es_server.ea_state = eapPending;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   888  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   889  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   890  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   891  	pcb->eap.es_server.ea_state = eapPending;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   892  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   893  	/* ID number not updated here intentionally; hashed into M1 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   894  	eap_send_request(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   895  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   896  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   897  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   898   * eap_server_timeout - Retransmission timer for sending Requests
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   899   * expired.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   900   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   901  static void eap_server_timeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   902  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   903  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   904  	if (!eap_server_active(pcb))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   905  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   906  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   907  	/* EAP ID number must not change on timeout. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   908  	eap_send_request(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   909  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   910  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   911  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   912   * When it's time to send rechallenge the peer, this timeout is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   913   * called.  Once the rechallenge is successful, the response handler
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   914   * will restart the timer.  If it fails, then the link is dropped.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   915   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   916  static void eap_rechallenge(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   917  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   918  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   919  	if (pcb->eap.es_server.ea_state != eapOpen &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   920  	    pcb->eap.es_server.ea_state != eapSRP4)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   921  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   922  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   923  	pcb->eap.es_server.ea_requests = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   924  	pcb->eap.es_server.ea_state = eapIdentify;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   925  	eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   926  	pcb->eap.es_server.ea_id++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   927  	eap_send_request(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   928  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   929  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   930  static void srp_lwrechallenge(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   931  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   932  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   933  	if (pcb->eap.es_server.ea_state != eapOpen ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   934  	    pcb->eap.es_server.ea_type != EAPT_SRP)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   935  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   936  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   937  	pcb->eap.es_server.ea_requests = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   938  	pcb->eap.es_server.ea_state = eapSRP4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   939  	pcb->eap.es_server.ea_id++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   940  	eap_send_request(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   941  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   942  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   943  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   944  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   945   * eap_lowerup - The lower layer is now up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   946   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   947   * This is called before either eap_authpeer or eap_authwithpeer.  See
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   948   * link_established() in auth.c.  All that's necessary here is to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   949   * return to closed state so that those two routines will do the right
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   950   * thing.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   951   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   952  static void eap_lowerup(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   953  	pcb->eap.es_client.ea_state = eapClosed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   954  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   955  	pcb->eap.es_server.ea_state = eapClosed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   956  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   957  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   958  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   959  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   960   * eap_lowerdown - The lower layer is now down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   961   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   962   * Cancel all timeouts and return to initial state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   963   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   964  static void eap_lowerdown(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   965  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   966  	if (eap_client_active(pcb) && pcb->settings.eap_req_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   967  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   968  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   969  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   970  	if (eap_server_active(pcb)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   971  		if (pcb->settings.eap_timeout_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   972  			UNTIMEOUT(eap_server_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   973  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   974  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   975  		if ((pcb->eap.es_server.ea_state == eapOpen ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   976  		    pcb->eap.es_server.ea_state == eapSRP4) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   977  		    pcb->eap.es_rechallenge > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   978  			UNTIMEOUT(eap_rechallenge, (void *)pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   979  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   980  		if (pcb->eap.es_server.ea_state == eapOpen &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   981  		    pcb->eap.es_lwrechallenge > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   982  			UNTIMEOUT(srp_lwrechallenge, (void *)pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   983  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   984  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   985  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   986  	pcb->eap.es_client.ea_state = pcb->eap.es_server.ea_state = eapInitial;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   987  	pcb->eap.es_client.ea_requests = pcb->eap.es_server.ea_requests = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   988  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   989  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   990  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   991  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   992   * eap_protrej - Peer doesn't speak this protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   993   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   994   * This shouldn't happen.  If it does, it represents authentication
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   995   * failure.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   996   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   997  static void eap_protrej(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   998  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	   999  	if (eap_client_active(pcb)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1000  		ppp_error("EAP authentication failed due to Protocol-Reject");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1001  		auth_withpeer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1002  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1003  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1004  	if (eap_server_active(pcb)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1005  		ppp_error("EAP authentication of peer failed on Protocol-Reject");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1006  		auth_peer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1007  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1008  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1009  	eap_lowerdown(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1010  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1011  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1012  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1013   * Format and send a regular EAP Response message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1014   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1015  static void eap_send_response(ppp_pcb *pcb, u_char id, u_char typenum, const u_char *str, int lenstr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1016  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1017  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1018  	int msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1019  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1020  	msglen = EAP_HEADERLEN + sizeof (u_char) + lenstr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1021  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1022  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1023  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1024  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1025  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1026  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1027  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1028  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1029  	outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1030  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1031  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1032  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1033  	PUTCHAR(EAP_RESPONSE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1034  	PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1035  	pcb->eap.es_client.ea_id = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1036  	PUTSHORT(msglen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1037  	PUTCHAR(typenum, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1038  	if (lenstr > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1039  		MEMCPY(outp, str, lenstr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1040  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1041  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1042  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1043  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1044  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1045  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1046   * Format and send an MD5-Challenge EAP Response message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1047   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1048  static void eap_chap_response(ppp_pcb *pcb, u_char id, u_char *hash, const char *name, int namelen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1049  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1050  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1051  	int msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1052  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1053  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char) + MD5_SIGNATURE_SIZE +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1054  	    namelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1055  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1056  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1057  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1058  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1059  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1060  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1061  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1062  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1063  	outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1064      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1065  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1066  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1067  	PUTCHAR(EAP_RESPONSE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1068  	PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1069  	pcb->eap.es_client.ea_id = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1070  	PUTSHORT(msglen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1071  	PUTCHAR(EAPT_MD5CHAP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1072  	PUTCHAR(MD5_SIGNATURE_SIZE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1073  	MEMCPY(outp, hash, MD5_SIGNATURE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1074  	INCPTR(MD5_SIGNATURE_SIZE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1075  	if (namelen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1076  		MEMCPY(outp, name, namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1077  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1078  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1079  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1080  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1081  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1082  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1083  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1084   * Format and send a SRP EAP Response message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1085   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1086  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1087  eap_srp_response(esp, id, subtypenum, str, lenstr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1088  eap_state *esp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1089  u_char id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1090  u_char subtypenum;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1091  u_char *str;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1092  int lenstr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1093  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1094  	ppp_pcb *pcb = &ppp_pcb_list[pcb->eap.es_unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1095  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1096  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1097  	int msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1098  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1099  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char) + lenstr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1100  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1101  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1102  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1103  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1104  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1105  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1106  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1107  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1108  	outp = p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1109  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1110  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1111  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1112  	PUTCHAR(EAP_RESPONSE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1113  	PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1114  	pcb->eap.es_client.ea_id = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1115  	PUTSHORT(msglen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1116  	PUTCHAR(EAPT_SRP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1117  	PUTCHAR(subtypenum, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1118  	if (lenstr > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1119  		MEMCPY(outp, str, lenstr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1120  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1121  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1122  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1123  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1124  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1125  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1126   * Format and send a SRP EAP Client Validator Response message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1127   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1128  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1129  eap_srpval_response(esp, id, flags, str)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1130  eap_state *esp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1131  u_char id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1132  u32_t flags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1133  u_char *str;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1134  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1135  	ppp_pcb *pcb = &ppp_pcb_list[pcb->eap.es_unit];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1136  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1137  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1138  	int msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1140  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char) + sizeof (u32_t) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1141  	    SHA_DIGESTSIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1142  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1143  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1144  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1145  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1146  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1147  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1148  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1149  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1150  	outp = p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1151  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1152  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1153  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1154  	PUTCHAR(EAP_RESPONSE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1155  	PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1156  	pcb->eap.es_client.ea_id = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1157  	PUTSHORT(msglen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1158  	PUTCHAR(EAPT_SRP, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1159  	PUTCHAR(EAPSRP_CVALIDATOR, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1160  	PUTLONG(flags, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1161  	MEMCPY(outp, str, SHA_DIGESTSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1162  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1163  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1164  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1165  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1166  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1167  static void eap_send_nak(ppp_pcb *pcb, u_char id, u_char type) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1168  	struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1169  	u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1170  	int msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1171  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1172  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1173  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1174  	if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1175  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1176  	if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1177  		pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1178  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1179  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1181  	outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1182  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1183  	MAKEHEADER(outp, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1184  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1185  	PUTCHAR(EAP_RESPONSE, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1186  	PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1187  	pcb->eap.es_client.ea_id = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1188  	PUTSHORT(msglen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1189  	PUTCHAR(EAPT_NAK, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1190  	PUTCHAR(type, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1191  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1192  	ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1193  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1194  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1195  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1196  static char *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1197  name_of_pn_file()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1198  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1199  	char *user, *path, *file;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1200  	struct passwd *pw;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1201  	size_t pl;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1202  	static bool pnlogged = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1203  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1204  	pw = getpwuid(getuid());
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1205  	if (pw == NULL || (user = pw->pw_dir) == NULL || user[0] == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1206  		errno = EINVAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1207  		return (NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1208  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1209  	file = _PATH_PSEUDONYM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1210  	pl = strlen(user) + strlen(file) + 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1211  	path = malloc(pl);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1212  	if (path == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1213  		return (NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1214  	(void) slprintf(path, pl, "%s/%s", user, file);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1215  	if (!pnlogged) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1216  		ppp_dbglog("pseudonym file: %s", path);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1217  		pnlogged = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1218  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1219  	return (path);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1220  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1221  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1222  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1223  open_pn_file(modebits)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1224  mode_t modebits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1225  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1226  	char *path;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1227  	int fd, err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1228  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1229  	if ((path = name_of_pn_file()) == NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1230  		return (-1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1231  	fd = open(path, modebits, S_IRUSR | S_IWUSR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1232  	err = errno;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1233  	free(path);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1234  	errno = err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1235  	return (fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1236  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1237  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1238  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1239  remove_pn_file()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1240  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1241  	char *path;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1242  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1243  	if ((path = name_of_pn_file()) != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1244  		(void) unlink(path);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1245  		(void) free(path);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1246  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1247  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1248  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1249  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1250  write_pseudonym(esp, inp, len, id)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1251  eap_state *esp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1252  u_char *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1253  int len, id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1254  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1255  	u_char val;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1256  	u_char *datp, *digp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1257  	SHA1_CTX ctxt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1258  	u_char dig[SHA_DIGESTSIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1259  	int dsize, fd, olen = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1260  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1261  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1262  	 * Do the decoding by working backwards.  This eliminates the need
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1263  	 * to save the decoded output in a separate buffer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1264  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1265  	val = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1266  	while (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1267  		if ((dsize = len % SHA_DIGESTSIZE) == 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1268  			dsize = SHA_DIGESTSIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1269  		len -= dsize;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1270  		datp = inp + len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1271  		SHA1Init(&ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1272  		SHA1Update(&ctxt, &val, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1273  		SHA1Update(&ctxt, pcb->eap.es_client.ea_skey, SESSION_KEY_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1274  		if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1275  			SHA1Update(&ctxt, datp, SHA_DIGESTSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1276  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1277  			SHA1Update(&ctxt, pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1278  			    pcb->eap.es_client.ea_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1279  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1280  		SHA1Final(dig, &ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1281  		for (digp = dig; digp < dig + SHA_DIGESTSIZE; digp++)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1282  			*datp++ ^= *digp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1283  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1284  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1285  	/* Now check that the result is sane */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1286  	if (olen <= 0 || *inp + 1 > olen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1287  		ppp_dbglog("EAP: decoded pseudonym is unusable <%.*B>", olen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1288  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1289  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1290  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1291  	/* Save it away */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1292  	fd = open_pn_file(O_WRONLY | O_CREAT | O_TRUNC);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1293  	if (fd < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1294  		ppp_dbglog("EAP: error saving pseudonym: %m");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1295  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1296  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1297  	len = write(fd, inp + 1, *inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1298  	if (close(fd) != -1 && len == *inp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1299  		ppp_dbglog("EAP: saved pseudonym");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1300  		pcb->eap.es_usedpseudo = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1301  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1302  		ppp_dbglog("EAP: failed to save pseudonym");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1303  		remove_pn_file();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1304  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1305  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1306  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1307  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1308  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1309   * eap_request - Receive EAP Request message (client mode).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1310   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1311  static void eap_request(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1312  	u_char typenum;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1313  	u_char vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1314  	int secret_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1315  	char secret[MAXSECRETLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1316  	char rhostname[MAXNAMELEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1317  	lwip_md5_context mdContext;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1318  	u_char hash[MD5_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1319  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1320  	struct t_client *tc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1321  	struct t_num sval, gval, Nval, *Ap, Bval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1322  	u_char vals[2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1323  	SHA1_CTX ctxt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1324  	u_char dig[SHA_DIGESTSIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1325  	int fd;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1326  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1327  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1328  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1329  	 * Note: we update es_client.ea_id *only if* a Response
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1330  	 * message is being generated.  Otherwise, we leave it the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1331  	 * same for duplicate detection purposes.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1332  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1333  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1334  	pcb->eap.es_client.ea_requests++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1335  	if (pcb->settings.eap_allow_req != 0 &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1336  	    pcb->eap.es_client.ea_requests > pcb->settings.eap_allow_req) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1337  		ppp_info("EAP: received too many Request messages");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1338  		if (pcb->settings.eap_req_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1339  			UNTIMEOUT(eap_client_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1340  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1341  		auth_withpeer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1342  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1343  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1344  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1345  	if (len <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1346  		ppp_error("EAP: empty Request message discarded");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1347  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1348  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1349  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1350  	GETCHAR(typenum, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1351  	len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1352  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1353  	switch (typenum) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1354  	case EAPT_IDENTITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1355  		if (len > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1356  			ppp_info("EAP: Identity prompt \"%.*q\"", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1357  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1358  		if (pcb->eap.es_usepseudo &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1359  		    (pcb->eap.es_usedpseudo == 0 ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1360  			(pcb->eap.es_usedpseudo == 1 &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1361  			    id == pcb->eap.es_client.ea_id))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1362  			pcb->eap.es_usedpseudo = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1363  			/* Try to get a pseudonym */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1364  			if ((fd = open_pn_file(O_RDONLY)) >= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1365  				strcpy(rhostname, SRP_PSEUDO_ID);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1366  				len = read(fd, rhostname + SRP_PSEUDO_LEN,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1367  				    sizeof (rhostname) - SRP_PSEUDO_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1368  				/* XXX NAI unsupported */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1369  				if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1370  					eap_send_response(pcb, id, typenum,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1371  					    rhostname, len + SRP_PSEUDO_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1372  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1373  				(void) close(fd);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1374  				if (len > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1375  					break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1376  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1377  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1378  		/* Stop using pseudonym now. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1379  		if (pcb->eap.es_usepseudo && pcb->eap.es_usedpseudo != 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1380  			remove_pn_file();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1381  			pcb->eap.es_usedpseudo = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1382  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1383  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1384  		eap_send_response(pcb, id, typenum, (const u_char*)pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1385  		    pcb->eap.es_client.ea_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1386  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1387  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1388  	case EAPT_NOTIFICATION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1389  		if (len > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1390  			ppp_info("EAP: Notification \"%.*q\"", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1391  		eap_send_response(pcb, id, typenum, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1392  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1393  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1394  	case EAPT_NAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1395  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1396  		 * Avoid the temptation to send Response Nak in reply
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1397  		 * to Request Nak here.  It can only lead to trouble.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1398  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1399  		ppp_warn("EAP: unexpected Nak in Request; ignored");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1400  		/* Return because we're waiting for something real. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1401  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1403  	case EAPT_MD5CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1404  		if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1405  			ppp_error("EAP: received MD5-Challenge with no data");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1406  			/* Bogus request; wait for something real. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1407  			return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1408  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1409  		GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1410  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1411  		if (vallen < 8 || vallen > len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1412  			ppp_error("EAP: MD5-Challenge with bad length %d (8..%d)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1413  			    vallen, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1414  			/* Try something better. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1415  			eap_send_nak(pcb, id, EAPT_SRP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1416  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1417  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1418  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1419  		/* Not so likely to happen. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1420  		if (vallen >= len + sizeof (rhostname)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1421  			ppp_dbglog("EAP: trimming really long peer name down");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1422  			MEMCPY(rhostname, inp + vallen, sizeof (rhostname) - 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1423  			rhostname[sizeof (rhostname) - 1] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1424  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1425  			MEMCPY(rhostname, inp + vallen, len - vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1426  			rhostname[len - vallen] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1427  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1428  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1429  #if PPP_REMOTENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1430  		/* In case the remote doesn't give us his name. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1431  		if (pcb->settings.explicit_remote ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1432  		    (pcb->settings.remote_name[0] != '\0' && vallen == len))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1433  			strlcpy(rhostname, pcb->settings.remote_name, sizeof (rhostname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1434  #endif /* PPP_REMOTENAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1435  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1436  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1437  		 * Get the secret for authenticating ourselves with
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1438  		 * the specified host.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1439  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1440  		if (!get_secret(pcb, pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1441  		    rhostname, secret, &secret_len, 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1442  			ppp_dbglog("EAP: no MD5 secret for auth to %q", rhostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1443  			eap_send_nak(pcb, id, EAPT_SRP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1444  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1445  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1446  		lwip_md5_init(&mdContext);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1447  		lwip_md5_starts(&mdContext);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1448  		typenum = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1449  		lwip_md5_update(&mdContext, &typenum, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1450  		lwip_md5_update(&mdContext, (u_char *)secret, secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1451  		BZERO(secret, sizeof (secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1452  		lwip_md5_update(&mdContext, inp, vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1453  		lwip_md5_finish(&mdContext, hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1454  		lwip_md5_free(&mdContext);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1455  		eap_chap_response(pcb, id, hash, pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1456  		    pcb->eap.es_client.ea_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1457  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1458  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1459  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1460  	case EAPT_SRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1461  		if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1462  			ppp_error("EAP: received empty SRP Request");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1463  			/* Bogus request; wait for something real. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1464  			return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1465  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1466  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1467  		/* Get subtype */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1468  		GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1469  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1470  		switch (vallen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1471  		case EAPSRP_CHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1472  			tc = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1473  			if (pcb->eap.es_client.ea_session != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1474  				tc = (struct t_client *)pcb->eap.es_client.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1475  				    ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1476  				/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1477  				 * If this is a new challenge, then start
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1478  				 * over with a new client session context.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1479  				 * Otherwise, just resend last response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1480  				 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1481  				if (id != pcb->eap.es_client.ea_id) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1482  					t_clientclose(tc);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1483  					pcb->eap.es_client.ea_session = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1484  					tc = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1485  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1486  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1487  			/* No session key just yet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1488  			pcb->eap.es_client.ea_skey = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1489  			if (tc == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1490  				int rhostnamelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1491  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1492  				GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1493  				len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1494  				if (vallen >= len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1495  					ppp_error("EAP: badly-formed SRP Challenge"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1496  					    " (name)");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1497  					/* Ignore badly-formed messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1498  					return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1499  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1500  				MEMCPY(rhostname, inp, vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1501  				rhostname[vallen] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1502  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1503  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1504  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1505  				/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1506  				 * In case the remote doesn't give us his name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1507  				 * use configured name.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1508  				 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1509  				if (explicit_remote ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1510  				    (remote_name[0] != '\0' && vallen == 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1511  					strlcpy(rhostname, remote_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1512  					    sizeof (rhostname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1513  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1514  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1515  				rhostnamelen = (int)strlen(rhostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1516  				if (rhostnamelen > MAXNAMELEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1517  					rhostnamelen = MAXNAMELEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1518  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1519  				MEMCPY(pcb->eap.es_client.ea_peer, rhostname, rhostnamelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1520  				pcb->eap.es_client.ea_peer[rhostnamelen] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1521  				pcb->eap.es_client.ea_peerlen = rhostnamelen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1522  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1523  				GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1524  				len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1525  				if (vallen >= len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1526  					ppp_error("EAP: badly-formed SRP Challenge"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1527  					    " (s)");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1528  					/* Ignore badly-formed messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1529  					return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1530  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1531  				sval.data = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1532  				sval.len = vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1533  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1534  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1535  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1536  				GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1537  				len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1538  				if (vallen > len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1539  					ppp_error("EAP: badly-formed SRP Challenge"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1540  					    " (g)");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1541  					/* Ignore badly-formed messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1542  					return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1543  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1544  				/* If no generator present, then use value 2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1545  				if (vallen == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1546  					gval.data = (u_char *)"\002";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1547  					gval.len = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1548  				} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1549  					gval.data = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1550  					gval.len = vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1551  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1552  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1553  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1554  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1555  				/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1556  				 * If no modulus present, then use well-known
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1557  				 * value.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1558  				 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1559  				if (len == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1560  					Nval.data = (u_char *)wkmodulus;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1561  					Nval.len = sizeof (wkmodulus);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1562  				} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1563  					Nval.data = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1564  					Nval.len = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1565  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1566  				tc = t_clientopen(pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1567  				    &Nval, &gval, &sval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1568  				if (tc == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1569  					eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1570  					break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1571  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1572  				pcb->eap.es_client.ea_session = (void *)tc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1573  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1574  				/* Add Challenge ID & type to verifier */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1575  				vals[0] = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1576  				vals[1] = EAPT_SRP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1577  				t_clientaddexdata(tc, vals, 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1578  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1579  			Ap = t_clientgenexp(tc);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1580  			eap_srp_response(esp, id, EAPSRP_CKEY, Ap->data,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1581  			    Ap->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1582  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1584  		case EAPSRP_SKEY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1585  			tc = (struct t_client *)pcb->eap.es_client.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1586  			if (tc == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1587  				ppp_warn("EAP: peer sent Subtype 2 without 1");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1588  				eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1589  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1590  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1591  			if (pcb->eap.es_client.ea_skey != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1592  				/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1593  				 * ID number should not change here.  Warn
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1594  				 * if it does (but otherwise ignore).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1595  				 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1596  				if (id != pcb->eap.es_client.ea_id) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1597  					ppp_warn("EAP: ID changed from %d to %d "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1598  					    "in SRP Subtype 2 rexmit",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1599  					    pcb->eap.es_client.ea_id, id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1600  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1601  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1602  				if (get_srp_secret(pcb->eap.es_unit,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1603  				    pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1604  				    pcb->eap.es_client.ea_peer, secret, 0) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1605  					/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1606  					 * Can't work with this peer because
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1607  					 * the secret is missing.  Just give
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1608  					 * up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1609  					 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1610  					eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1611  					break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1612  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1613  				Bval.data = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1614  				Bval.len = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1615  				t_clientpasswd(tc, secret);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1616  				BZERO(secret, sizeof (secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1617  				pcb->eap.es_client.ea_skey =
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1618  				    t_clientgetkey(tc, &Bval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1619  				if (pcb->eap.es_client.ea_skey == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1620  					/* Server is rogue; stop now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1621  					ppp_error("EAP: SRP server is rogue");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1622  					goto client_failure;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1623  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1624  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1625  			eap_srpval_response(esp, id, SRPVAL_EBIT,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1626  			    t_clientresponse(tc));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1627  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1628  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1629  		case EAPSRP_SVALIDATOR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1630  			tc = (struct t_client *)pcb->eap.es_client.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1631  			if (tc == NULL || pcb->eap.es_client.ea_skey == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1632  				ppp_warn("EAP: peer sent Subtype 3 without 1/2");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1633  				eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1634  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1635  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1636  			/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1637  			 * If we're already open, then this ought to be a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1638  			 * duplicate.  Otherwise, check that the server is
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1639  			 * who we think it is.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1640  			 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1641  			if (pcb->eap.es_client.ea_state == eapOpen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1642  				if (id != pcb->eap.es_client.ea_id) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1643  					ppp_warn("EAP: ID changed from %d to %d "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1644  					    "in SRP Subtype 3 rexmit",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1645  					    pcb->eap.es_client.ea_id, id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1646  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1647  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1648  				len -= sizeof (u32_t) + SHA_DIGESTSIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1649  				if (len < 0 || t_clientverify(tc, inp +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1650  					sizeof (u32_t)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1651  					ppp_error("EAP: SRP server verification "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1652  					    "failed");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1653  					goto client_failure;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1654  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1655  				GETLONG(pcb->eap.es_client.ea_keyflags, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1656  				/* Save pseudonym if user wants it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1657  				if (len > 0 && pcb->eap.es_usepseudo) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1658  					INCPTR(SHA_DIGESTSIZE, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1659  					write_pseudonym(esp, inp, len, id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1660  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1661  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1662  			/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1663  			 * We've verified our peer.  We're now mostly done,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1664  			 * except for waiting on the regular EAP Success
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1665  			 * message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1666  			 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1667  			eap_srp_response(esp, id, EAPSRP_ACK, NULL, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1668  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1669  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1670  		case EAPSRP_LWRECHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1671  			if (len < 4) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1672  				ppp_warn("EAP: malformed Lightweight rechallenge");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1673  				return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1674  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1675  			SHA1Init(&ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1676  			vals[0] = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1677  			SHA1Update(&ctxt, vals, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1678  			SHA1Update(&ctxt, pcb->eap.es_client.ea_skey,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1679  			    SESSION_KEY_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1680  			SHA1Update(&ctxt, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1681  			SHA1Update(&ctxt, pcb->eap.es_client.ea_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1682  			    pcb->eap.es_client.ea_namelen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1683  			SHA1Final(dig, &ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1684  			eap_srp_response(esp, id, EAPSRP_LWRECHALLENGE, dig,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1685  			    SHA_DIGESTSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1686  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1687  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1688  		default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1689  			ppp_error("EAP: unknown SRP Subtype %d", vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1690  			eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1691  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1692  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1693  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1694  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1695  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1696  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1697  		ppp_info("EAP: unknown authentication type %d; Naking", typenum);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1698  		eap_send_nak(pcb, id, EAPT_SRP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1699  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1700  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1701  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1702  	if (pcb->settings.eap_req_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1703  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1704  		TIMEOUT(eap_client_timeout, pcb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1705  		    pcb->settings.eap_req_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1706  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1707  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1708  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1709  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1710  client_failure:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1711  	pcb->eap.es_client.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1712  	if (pcb->settings.eap_req_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1713  		UNTIMEOUT(eap_client_timeout, (void *)esp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1714  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1715  	pcb->eap.es_client.ea_session = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1716  	t_clientclose(tc);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1717  	auth_withpeer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1718  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1719  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1720  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1721  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1722  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1723   * eap_response - Receive EAP Response message (server mode).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1724   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1725  static void eap_response(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1726  	u_char typenum;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1727  	u_char vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1728  	int secret_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1729  	char secret[MAXSECRETLEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1730  	char rhostname[MAXNAMELEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1731  	lwip_md5_context mdContext;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1732  	u_char hash[MD5_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1733  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1734  	struct t_server *ts;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1735  	struct t_num A;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1736  	SHA1_CTX ctxt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1737  	u_char dig[SHA_DIGESTSIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1738  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1739  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1740  	if (pcb->eap.es_server.ea_id != id) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1741  		ppp_dbglog("EAP: discarding Response %d; expected ID %d", id,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1742  		    pcb->eap.es_server.ea_id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1743  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1744  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1745  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1746  	pcb->eap.es_server.ea_responses++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1747  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1748  	if (len <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1749  		ppp_error("EAP: empty Response message discarded");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1750  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1751  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1752  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1753  	GETCHAR(typenum, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1754  	len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1755  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1756  	switch (typenum) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1757  	case EAPT_IDENTITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1758  		if (pcb->eap.es_server.ea_state != eapIdentify) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1759  			ppp_dbglog("EAP discarding unwanted Identify \"%.q\"", len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1760  			    inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1761  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1762  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1763  		ppp_info("EAP: unauthenticated peer name \"%.*q\"", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1764  		if (len > MAXNAMELEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1765  		  len = MAXNAMELEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1766  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1767  		MEMCPY(pcb->eap.es_server.ea_peer, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1768  		pcb->eap.es_server.ea_peer[len] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1769  		pcb->eap.es_server.ea_peerlen = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1770  		eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1771  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1772  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1773  	case EAPT_NOTIFICATION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1774  		ppp_dbglog("EAP unexpected Notification; response discarded");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1775  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1776  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1777  	case EAPT_NAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1778  		if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1779  			ppp_info("EAP: Nak Response with no suggested protocol");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1780  			eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1781  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1782  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1783  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1784  		GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1785  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1786  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1787  		if (
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1788  #if PPP_REMOTENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1789  		!pcb->explicit_remote &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1790  #endif /* PPP_REMOTENAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1791  		pcb->eap.es_server.ea_state == eapIdentify){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1792  			/* Peer cannot Nak Identify Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1793  			eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1794  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1795  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1796  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1797  		switch (vallen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1798  		case EAPT_SRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1799  			/* Run through SRP validator selection again. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1800  			pcb->eap.es_server.ea_state = eapIdentify;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1801  			eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1802  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1803  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1804  		case EAPT_MD5CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1805  			pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1806  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1807  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1808  		default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1809  			ppp_dbglog("EAP: peer requesting unknown Type %d", vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1810  			switch (pcb->eap.es_server.ea_state) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1811  			case eapSRP1:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1812  			case eapSRP2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1813  			case eapSRP3:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1814  				pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1815  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1816  			case eapMD5Chall:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1817  			case eapSRP4:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1818  				pcb->eap.es_server.ea_state = eapIdentify;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1819  				eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1820  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1821  			default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1822  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1823  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1824  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1825  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1826  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1827  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1828  	case EAPT_MD5CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1829  		if (pcb->eap.es_server.ea_state != eapMD5Chall) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1830  			ppp_error("EAP: unexpected MD5-Response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1831  			eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1832  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1833  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1834  		if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1835  			ppp_error("EAP: received MD5-Response with no data");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1836  			eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1837  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1838  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1839  		GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1840  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1841  		if (vallen != 16 || vallen > len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1842  			ppp_error("EAP: MD5-Response with bad length %d", vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1843  			eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1844  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1845  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1846  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1847  		/* Not so likely to happen. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1848  		if (vallen >= len + sizeof (rhostname)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1849  			ppp_dbglog("EAP: trimming really long peer name down");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1850  			MEMCPY(rhostname, inp + vallen, sizeof (rhostname) - 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1851  			rhostname[sizeof (rhostname) - 1] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1852  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1853  			MEMCPY(rhostname, inp + vallen, len - vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1854  			rhostname[len - vallen] = '\0';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1855  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1856  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1857  #if PPP_REMOTENAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1858  		/* In case the remote doesn't give us his name. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1859  		if (explicit_remote ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1860  		    (remote_name[0] != '\0' && vallen == len))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1861  			strlcpy(rhostname, remote_name, sizeof (rhostname));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1862  #endif /* PPP_REMOTENAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1863  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1864  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1865  		 * Get the secret for authenticating the specified
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1866  		 * host.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1867  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1868  		if (!get_secret(pcb, rhostname,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1869  		    pcb->eap.es_server.ea_name, secret, &secret_len, 1)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1870  			ppp_dbglog("EAP: no MD5 secret for auth of %q", rhostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1871  			eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1872  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1873  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1874  		lwip_md5_init(&mdContext);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1875  		lwip_md5_starts(&mdContext);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1876  		lwip_md5_update(&mdContext, &pcb->eap.es_server.ea_id, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1877  		lwip_md5_update(&mdContext, (u_char *)secret, secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1878  		BZERO(secret, sizeof (secret));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1879  		lwip_md5_update(&mdContext, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1880  		lwip_md5_finish(&mdContext, hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1881  		lwip_md5_free(&mdContext);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1882  		if (BCMP(hash, inp, MD5_SIGNATURE_SIZE) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1883  			eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1884  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1885  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1886  		pcb->eap.es_server.ea_type = EAPT_MD5CHAP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1887  		eap_send_success(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1888  		eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1889  		if (pcb->eap.es_rechallenge != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1890  			TIMEOUT(eap_rechallenge, pcb, pcb->eap.es_rechallenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1891  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1892  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1893  #ifdef USE_SRP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1894  	case EAPT_SRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1895  		if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1896  			ppp_error("EAP: empty SRP Response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1897  			eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1898  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1899  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1900  		GETCHAR(typenum, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1901  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1902  		switch (typenum) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1903  		case EAPSRP_CKEY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1904  			if (pcb->eap.es_server.ea_state != eapSRP1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1905  				ppp_error("EAP: unexpected SRP Subtype 1 Response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1906  				eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1907  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1908  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1909  			A.data = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1910  			A.len = len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1911  			ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1912  			assert(ts != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1913  			pcb->eap.es_server.ea_skey = t_servergetkey(ts, &A);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1914  			if (pcb->eap.es_server.ea_skey == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1915  				/* Client's A value is bogus; terminate now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1916  				ppp_error("EAP: bogus A value from client");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1917  				eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1918  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1919  				eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1920  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1921  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1922  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1923  		case EAPSRP_CVALIDATOR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1924  			if (pcb->eap.es_server.ea_state != eapSRP2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1925  				ppp_error("EAP: unexpected SRP Subtype 2 Response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1926  				eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1927  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1928  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1929  			if (len < sizeof (u32_t) + SHA_DIGESTSIZE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1930  				ppp_error("EAP: M1 length %d < %d", len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1931  				    sizeof (u32_t) + SHA_DIGESTSIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1932  				eap_figure_next_state(pcb, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1933  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1934  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1935  			GETLONG(pcb->eap.es_server.ea_keyflags, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1936  			ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1937  			assert(ts != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1938  			if (t_serververify(ts, inp)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1939  				ppp_info("EAP: unable to validate client identity");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1940  				eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1941  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1942  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1943  			eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1944  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1945  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1946  		case EAPSRP_ACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1947  			if (pcb->eap.es_server.ea_state != eapSRP3) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1948  				ppp_error("EAP: unexpected SRP Subtype 3 Response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1949  				eap_send_failure(esp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1950  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1951  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1952  			pcb->eap.es_server.ea_type = EAPT_SRP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1953  			eap_send_success(pcb, esp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1954  			eap_figure_next_state(pcb, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1955  			if (pcb->eap.es_rechallenge != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1956  				TIMEOUT(eap_rechallenge, pcb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1957  				    pcb->eap.es_rechallenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1958  			if (pcb->eap.es_lwrechallenge != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1959  				TIMEOUT(srp_lwrechallenge, pcb,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1960  				    pcb->eap.es_lwrechallenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1961  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1962  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1963  		case EAPSRP_LWRECHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1964  			if (pcb->eap.es_server.ea_state != eapSRP4) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1965  				ppp_info("EAP: unexpected SRP Subtype 4 Response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1966  				return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1967  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1968  			if (len != SHA_DIGESTSIZE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1969  				ppp_error("EAP: bad Lightweight rechallenge "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1970  				    "response");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1971  				return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1972  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1973  			SHA1Init(&ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1974  			vallen = id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1975  			SHA1Update(&ctxt, &vallen, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1976  			SHA1Update(&ctxt, pcb->eap.es_server.ea_skey,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1977  			    SESSION_KEY_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1978  			SHA1Update(&ctxt, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1979  			SHA1Update(&ctxt, pcb->eap.es_server.ea_peer,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1980  			    pcb->eap.es_server.ea_peerlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1981  			SHA1Final(dig, &ctxt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1982  			if (BCMP(dig, inp, SHA_DIGESTSIZE) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1983  				ppp_error("EAP: failed Lightweight rechallenge");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1984  				eap_send_failure(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1985  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1986  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1987  			pcb->eap.es_server.ea_state = eapOpen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1988  			if (pcb->eap.es_lwrechallenge != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1989  				TIMEOUT(srp_lwrechallenge, esp,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1990  				    pcb->eap.es_lwrechallenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1991  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1992  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1993  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1994  #endif /* USE_SRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1995  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1996  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1997  		/* This can't happen. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1998  		ppp_error("EAP: unknown Response type %d; ignored", typenum);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  1999  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2000  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2001  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2002  	if (pcb->settings.eap_timeout_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2003  		UNTIMEOUT(eap_server_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2004  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2005  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2006  	if (pcb->eap.es_server.ea_state != eapBadAuth &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2007  	    pcb->eap.es_server.ea_state != eapOpen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2008  		pcb->eap.es_server.ea_id++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2009  		eap_send_request(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2010  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2011  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2012  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2013  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2014  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2015   * eap_success - Receive EAP Success message (client mode).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2016   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2017  static void eap_success(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2018  	LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2019  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2020  	if (pcb->eap.es_client.ea_state != eapOpen && !eap_client_active(pcb)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2021  		ppp_dbglog("EAP unexpected success message in state %s (%d)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2022  		    eap_state_name(pcb->eap.es_client.ea_state),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2023  		    pcb->eap.es_client.ea_state);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2024  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2025  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2026  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2027  	if (pcb->settings.eap_req_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2028  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2029  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2030  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2031  	if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2032  		/* This is odd.  The spec doesn't allow for this. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2033  		PRINTMSG(inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2034  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2035  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2036  	pcb->eap.es_client.ea_state = eapOpen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2037  	auth_withpeer_success(pcb, PPP_EAP, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2038  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2039  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2040  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2041   * eap_failure - Receive EAP Failure message (client mode).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2042   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2043  static void eap_failure(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2044  	LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2045  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2046  	if (!eap_client_active(pcb)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2047  		ppp_dbglog("EAP unexpected failure message in state %s (%d)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2048  		    eap_state_name(pcb->eap.es_client.ea_state),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2049  		    pcb->eap.es_client.ea_state);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2050  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2051  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2052  	if (pcb->settings.eap_req_time > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2053  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2054  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2055  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2056  	if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2057  		/* This is odd.  The spec doesn't allow for this. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2058  		PRINTMSG(inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2059  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2060  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2061  	pcb->eap.es_client.ea_state = eapBadAuth;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2062  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2063  	ppp_error("EAP: peer reports authentication failure");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2064  	auth_withpeer_fail(pcb, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2065  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2066  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2067  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2068   * eap_input - Handle received EAP message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2069   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2070  static void eap_input(ppp_pcb *pcb, u_char *inp, int inlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2071  	u_char code, id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2072  	int len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2073  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2074  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2075  	 * Parse header (code, id and length).  If packet too short,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2076  	 * drop it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2077  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2078  	if (inlen < EAP_HEADERLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2079  		ppp_error("EAP: packet too short: %d < %d", inlen, EAP_HEADERLEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2080  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2081  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2082  	GETCHAR(code, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2083  	GETCHAR(id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2084  	GETSHORT(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2085  	if (len < EAP_HEADERLEN || len > inlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2086  		ppp_error("EAP: packet has illegal length field %d (%d..%d)", len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2087  		    EAP_HEADERLEN, inlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2088  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2089  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2090  	len -= EAP_HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2091  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2092  	/* Dispatch based on message code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2093  	switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2094  	case EAP_REQUEST:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2095  		eap_request(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2096  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2097  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2098  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2099  	case EAP_RESPONSE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2100  		eap_response(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2101  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2102  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2103  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2104  	case EAP_SUCCESS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2105  		eap_success(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2106  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2107  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2108  	case EAP_FAILURE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2109  		eap_failure(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2110  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2111  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2112  	default:				/* XXX Need code reject */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2113  		/* Note: it's not legal to send EAP Nak here. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2114  		ppp_warn("EAP: unknown code %d received", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2115  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2116  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2117  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2118  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2119  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2120  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2121   * eap_printpkt - print the contents of an EAP packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2122   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2123  static const char* const eap_codenames[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2124  	"Request", "Response", "Success", "Failure"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2125  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2126  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2127  static const char* const eap_typenames[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2128  	"Identity", "Notification", "Nak", "MD5-Challenge",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2129  	"OTP", "Generic-Token", NULL, NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2130  	"RSA", "DSS", "KEA", "KEA-Validate",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2131  	"TLS", "Defender", "Windows 2000", "Arcot",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2132  	"Cisco", "Nokia", "SRP"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2133  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2134  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2135  static int eap_printpkt(const u_char *inp, int inlen, void (*printer) (void *, const char *, ...), void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2136  	int code, id, len, rtype, vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2137  	const u_char *pstart;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2138  	u32_t uval;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2140  	if (inlen < EAP_HEADERLEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2141  		return (0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2142  	pstart = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2143  	GETCHAR(code, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2144  	GETCHAR(id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2145  	GETSHORT(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2146  	if (len < EAP_HEADERLEN || len > inlen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2147  		return (0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2148  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2149  	if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(eap_codenames))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2150  		printer(arg, " %s", eap_codenames[code-1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2151  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2152  		printer(arg, " code=0x%x", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2153  	printer(arg, " id=0x%x", id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2154  	len -= EAP_HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2155  	switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2156  	case EAP_REQUEST:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2157  		if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2158  			printer(arg, " <missing type>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2159  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2160  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2161  		GETCHAR(rtype, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2162  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2163  		if (rtype >= 1 && rtype <= (int)LWIP_ARRAYSIZE(eap_typenames))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2164  			printer(arg, " %s", eap_typenames[rtype-1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2165  		else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2166  			printer(arg, " type=0x%x", rtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2167  		switch (rtype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2168  		case EAPT_IDENTITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2169  		case EAPT_NOTIFICATION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2170  			if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2171  				printer(arg, " <Message ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2172  				ppp_print_string(inp, len, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2173  				printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2174  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2175  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2176  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2177  				printer(arg, " <No message>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2178  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2179  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2181  		case EAPT_MD5CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2182  			if (len <= 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2183  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2184  			GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2185  			len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2186  			if (vallen > len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2187  				goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2188  			printer(arg, " <Value%.*B>", vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2189  			INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2190  			len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2191  			if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2192  				printer(arg, " <Name ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2193  				ppp_print_string(inp, len, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2194  				printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2195  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2196  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2197  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2198  				printer(arg, " <No name>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2199  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2200  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2201  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2202  		case EAPT_SRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2203  			if (len < 3)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2204  				goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2205  			GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2206  			len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2207  			printer(arg, "-%d", vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2208  			switch (vallen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2209  			case EAPSRP_CHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2210  				GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2211  				len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2212  				if (vallen >= len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2213  					goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2214  				if (vallen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2215  					printer(arg, " <Name ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2216  					ppp_print_string(inp, vallen, printer,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2217  					    arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2218  					printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2219  				} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2220  					printer(arg, " <No name>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2221  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2222  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2223  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2224  				GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2225  				len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2226  				if (vallen >= len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2227  					goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2228  				printer(arg, " <s%.*B>", vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2229  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2230  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2231  				GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2232  				len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2233  				if (vallen > len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2234  					goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2235  				if (vallen == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2236  					printer(arg, " <Default g=2>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2237  				} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2238  					printer(arg, " <g%.*B>", vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2239  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2240  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2241  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2242  				if (len == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2243  					printer(arg, " <Default N>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2244  				} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2245  					printer(arg, " <N%.*B>", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2246  					INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2247  					len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2248  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2249  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2250  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2251  			case EAPSRP_SKEY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2252  				printer(arg, " <B%.*B>", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2253  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2254  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2255  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2256  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2257  			case EAPSRP_SVALIDATOR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2258  				if (len < (int)sizeof (u32_t))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2259  					break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2260  				GETLONG(uval, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2261  				len -= sizeof (u32_t);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2262  				if (uval & SRPVAL_EBIT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2263  					printer(arg, " E");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2264  					uval &= ~SRPVAL_EBIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2265  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2266  				if (uval != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2267  					printer(arg, " f<%X>", uval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2268  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2269  				if ((vallen = len) > SHA_DIGESTSIZE)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2270  					vallen = SHA_DIGESTSIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2271  				printer(arg, " <M2%.*B%s>", len, inp,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2272  				    len < SHA_DIGESTSIZE ? "?" : "");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2273  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2274  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2275  				if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2276  					printer(arg, " <PN%.*B>", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2277  					INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2278  					len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2279  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2280  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2281  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2282  			case EAPSRP_LWRECHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2283  				printer(arg, " <Challenge%.*B>", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2284  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2285  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2286  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2287  			default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2288  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2289  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2290  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2291  		default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2292  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2293  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2294  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2295  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2296  	case EAP_RESPONSE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2297  		if (len < 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2298  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2299  		GETCHAR(rtype, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2300  		len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2301  		if (rtype >= 1 && rtype <= (int)LWIP_ARRAYSIZE(eap_typenames))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2302  			printer(arg, " %s", eap_typenames[rtype-1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2303  		else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2304  			printer(arg, " type=0x%x", rtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2305  		switch (rtype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2306  		case EAPT_IDENTITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2307  			if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2308  				printer(arg, " <Name ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2309  				ppp_print_string(inp, len, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2310  				printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2311  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2312  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2313  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2314  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2315  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2316  		case EAPT_NAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2317  			if (len <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2318  				printer(arg, " <missing hint>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2319  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2320  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2321  			GETCHAR(rtype, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2322  			len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2323  			printer(arg, " <Suggested-type %02X", rtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2324  			if (rtype >= 1 && rtype < (int)LWIP_ARRAYSIZE(eap_typenames))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2325  				printer(arg, " (%s)", eap_typenames[rtype-1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2326  			printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2327  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2328  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2329  		case EAPT_MD5CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2330  			if (len <= 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2331  				printer(arg, " <missing length>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2332  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2333  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2334  			GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2335  			len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2336  			if (vallen > len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2337  				goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2338  			printer(arg, " <Value%.*B>", vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2339  			INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2340  			len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2341  			if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2342  				printer(arg, " <Name ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2343  				ppp_print_string(inp, len, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2344  				printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2345  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2346  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2347  			} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2348  				printer(arg, " <No name>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2349  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2350  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2351  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2352  		case EAPT_SRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2353  			if (len < 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2354  				goto truncated;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2355  			GETCHAR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2356  			len--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2357  			printer(arg, "-%d", vallen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2358  			switch (vallen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2359  			case EAPSRP_CKEY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2360  				printer(arg, " <A%.*B>", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2361  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2362  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2363  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2364  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2365  			case EAPSRP_CVALIDATOR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2366  				if (len < (int)sizeof (u32_t))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2367  					break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2368  				GETLONG(uval, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2369  				len -= sizeof (u32_t);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2370  				if (uval & SRPVAL_EBIT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2371  					printer(arg, " E");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2372  					uval &= ~SRPVAL_EBIT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2373  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2374  				if (uval != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2375  					printer(arg, " f<%X>", uval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2376  				}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2377  				printer(arg, " <M1%.*B%s>", len, inp,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2378  				    len == SHA_DIGESTSIZE ? "" : "?");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2379  				INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2380  				len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2381  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2383  			case EAPSRP_ACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2384  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2385  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2386  			case EAPSRP_LWRECHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2387  				printer(arg, " <Response%.*B%s>", len, inp,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2388  				    len == SHA_DIGESTSIZE ? "" : "?");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2389  				if ((vallen = len) > SHA_DIGESTSIZE)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2390  					vallen = SHA_DIGESTSIZE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2391  				INCPTR(vallen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2392  				len -= vallen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2393  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2394  			default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2395  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2396  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2397  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2398  		default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2399  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2400  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2401  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2403  	case EAP_SUCCESS:	/* No payload expected for these! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2404  	case EAP_FAILURE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2405  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2406  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2407  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2408  	truncated:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2409  		printer(arg, " <truncated>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2410  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2411  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2412  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2413  	if (len > 8)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2414  		printer(arg, "%8B...", inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2415  	else if (len > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2416  		printer(arg, "%.*B", len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2417  	INCPTR(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2418  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2419  	return (inp - pstart);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2420  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2421  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2422  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\eap.c	  2423  #endif /* PPP_SUPPORT && EAP_SUPPORT */

	; Module end
