	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc34824a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.chap_ms.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\chap_ms.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\chap_ms.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\chap_ms.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\chap_ms.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4550
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\chap_ms.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	171
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	173
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	196
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	196
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	243
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	280
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	196
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	196
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	243
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	379
	.byte	3
	.word	196
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	473
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	502
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	196
	.byte	8,4
	.word	280
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	607
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	616
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	243
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	243
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	607
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	689
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	196
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	196
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	196
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	196
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	196
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	616
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	616
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	931
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	196
	.byte	8,3
	.word	196
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	196
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1088
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1097
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	243
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1231
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	196
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	196
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	196
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	196
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	196
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	196
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1342
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	196
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	196
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	196
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	196
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	196
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	196
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	243
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	243
	.byte	8,1
	.word	196
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1796
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1796
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1805
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1881
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	689
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2017
	.byte	12
	.word	196
	.byte	3
	.word	2131
	.byte	12
	.word	196
	.byte	3
	.word	2141
	.byte	12
	.word	196
	.byte	3
	.word	2151
	.byte	12
	.word	1881
	.byte	3
	.word	2161
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	243
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	243
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	243
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	196
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	196
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	196
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	196
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	689
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2136
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2146
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2156
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2166
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2171
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	280
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	280
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	280
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2523
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	243
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	280
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2673
	.byte	12
	.word	2523
	.byte	3
	.word	2810
	.byte	12
	.word	2673
	.byte	3
	.word	2820
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	196
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	196
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	196
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	196
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	196
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	243
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2166
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2815
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2825
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2830
	.byte	12
	.word	196
	.byte	3
	.word	3115
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	196
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3120
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3120
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3125
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1881
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	196
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	196
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	196
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	196
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3289
	.byte	3
	.word	1805
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	280
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	196
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	196
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	196
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	196
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	243
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3434
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	473
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3439
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	280
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	196
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1881
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	196
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	196
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	196
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3434
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3654
	.byte	12
	.word	3439
	.byte	3
	.word	3824
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	243
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	243
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	473
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	243
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	243
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3120
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3829
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3834
	.byte	12
	.word	3654
	.byte	3
	.word	4058
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	243
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4063
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4068
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	243
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	243
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	473
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4168
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	243
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	243
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	473
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4265
	.byte	8,8
	.word	196
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	196
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	196
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4359
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4068
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4068
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4265
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4168
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4368
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	196
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\chap_ms.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     1  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     2   * chap_ms.c - Microsoft MS-CHAP compatible implementation.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     4   * Copyright (c) 1995 Eric Rosenquist.  All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     5   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     7   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     8   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    12   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    15   *    the documentation and/or other materials provided with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    16   *    distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    17   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    18   * 3. The name(s) of the authors of this software must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    19   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    20   *    prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    21   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    22   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    23   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    24   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    25   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    26   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    27   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    28   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    29   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    30  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    31  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    32   * Modifications by Lauri Pesonen / lpesonen@clinet.fi, april 1997
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    34   *   Implemented LANManager type password response to MS-CHAP challenges.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    35   *   Now pppd provides both NT style and LANMan style blocks, and the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    36   *   prefered is set by option "ms-lanman". Default is to use NT.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    37   *   The hash text (StdText) was taken from Win95 RASAPI32.DLL.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    38   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    39   *   You should also use DOMAIN\\USERNAME as described in README.MSCHAP80
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    40   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    41  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    42  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    43   * Modifications by Frank Cusack, frank@google.com, March 2002.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    44   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    45   *   Implemented MS-CHAPv2 functionality, heavily based on sample
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    46   *   implementation in RFC 2759.  Implemented MPPE functionality,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    47   *   heavily based on sample implementation in RFC 3079.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    48   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    49   * Copyright (c) 2002 Google, Inc.  All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    50   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    51   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    52   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    53   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    54   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    55   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    56   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    57   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    58   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    59   *    notice, this list of conditions and the following disclaimer in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    60   *    the documentation and/or other materials provided with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    61   *    distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    62   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    63   * 3. The name(s) of the authors of this software must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    64   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    65   *    prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    66   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    67   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    68   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    69   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    70   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    71   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    72   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    73   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    74   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    75   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    76  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    77  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    78  #if PPP_SUPPORT && MSCHAP_SUPPORT  /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    79  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    80  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    81  #include <stdio.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    82  #include <stdlib.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    83  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    84  #include <ctype.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    85  #include <sys/types.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    86  #include <sys/time.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    87  #include <unistd.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    88  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    89  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    90  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    91  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    92  #include "netif/ppp/chap-new.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    93  #include "netif/ppp/chap_ms.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    94  #include "netif/ppp/pppcrypt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    95  #include "netif/ppp/magic.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    96  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    97  #include "netif/ppp/mppe.h" /* For mppe_sha1_pad*, mppe_set_key() */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    98  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	    99  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   100  #define SHA1_SIGNATURE_SIZE	20
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   101  #define MD4_SIGNATURE_SIZE	16	/* 16 bytes in a MD4 message digest */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   102  #define MAX_NT_PASSWORD		256	/* Max (Unicode) chars in an NT pass */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   103  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   104  #define MS_CHAP_RESPONSE_LEN	49	/* Response length for MS-CHAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   105  #define MS_CHAP2_RESPONSE_LEN	49	/* Response length for MS-CHAPv2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   106  #define MS_AUTH_RESPONSE_LENGTH	40	/* MS-CHAPv2 authenticator response, */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   107  					/* as ASCII */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   108  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   109  /* Error codes for MS-CHAP failure messages. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   110  #define MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS	646
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   111  #define MS_CHAP_ERROR_ACCT_DISABLED		647
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   112  #define MS_CHAP_ERROR_PASSWD_EXPIRED		648
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   113  #define MS_CHAP_ERROR_NO_DIALIN_PERMISSION	649
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   114  #define MS_CHAP_ERROR_AUTHENTICATION_FAILURE	691
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   115  #define MS_CHAP_ERROR_CHANGING_PASSWORD		709
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   116  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   117  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   118   * Offsets within the response field for MS-CHAP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   119   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   120  #define MS_CHAP_LANMANRESP	0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   121  #define MS_CHAP_LANMANRESP_LEN	24
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   122  #define MS_CHAP_NTRESP		24
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   123  #define MS_CHAP_NTRESP_LEN	24
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   124  #define MS_CHAP_USENT		48
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   125  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   126  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   127   * Offsets within the response field for MS-CHAP2
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   128   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   129  #define MS_CHAP2_PEER_CHALLENGE	0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   130  #define MS_CHAP2_PEER_CHAL_LEN	16
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   131  #define MS_CHAP2_RESERVED_LEN	8
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   132  #define MS_CHAP2_NTRESP		24
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   133  #define MS_CHAP2_NTRESP_LEN	24
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   134  #define MS_CHAP2_FLAGS		48
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   135  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   136  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   137  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   138  /* These values are the RADIUS attribute values--see RFC 2548. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   139  #define MPPE_ENC_POL_ENC_ALLOWED 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   140  #define MPPE_ENC_POL_ENC_REQUIRED 2
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   141  #define MPPE_ENC_TYPES_RC4_40 2
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   142  #define MPPE_ENC_TYPES_RC4_128 4
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   143  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   144  /* used by plugins (using above values) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   145  extern void set_mppe_enc_types(int, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   146  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   147  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   148  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   149  /* Are we the authenticator or authenticatee?  For MS-CHAPv2 key derivation. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   150  #define MS_CHAP2_AUTHENTICATEE 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   151  #define MS_CHAP2_AUTHENTICATOR 1
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   152  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   153  static void	ascii2unicode (const char[], int, u_char[]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   154  static void	NTPasswordHash (u_char *, int, u_char[MD4_SIGNATURE_SIZE]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   155  static void	ChallengeResponse (const u_char *, const u_char *, u_char[24]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   156  static void	ChallengeHash (const u_char[16], const u_char *, const char *, u_char[8]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   157  static void	ChapMS_NT (const u_char *, const char *, int, u_char[24]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   158  static void	ChapMS2_NT (const u_char *, const u_char[16], const char *, const char *, int,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   159  				u_char[24]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   160  static void	GenerateAuthenticatorResponsePlain
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   161  			(const char*, int, u_char[24], const u_char[16], const u_char *,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   162  			     const char *, u_char[41]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   163  #ifdef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   164  static void	ChapMS_LANMan (u_char *, char *, int, u_char *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   165  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   166  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   167  static void GenerateAuthenticatorResponse(const u_char PasswordHashHash[MD4_SIGNATURE_SIZE],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   168  			u_char NTResponse[24], const u_char PeerChallenge[16],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   169  			const u_char *rchallenge, const char *username,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   170  			u_char authResponse[MS_AUTH_RESPONSE_LENGTH+1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   171  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   172  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   173  static void	Set_Start_Key (ppp_pcb *pcb, const u_char *, const char *, int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   174  static void	SetMasterKeys (ppp_pcb *pcb, const char *, int, u_char[24], int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   175  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   176  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   177  static void ChapMS (ppp_pcb *pcb, const u_char *, const char *, int, u_char *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   178  static void ChapMS2 (ppp_pcb *pcb, const u_char *, const u_char *, const char *, const char *, int,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   179  		  u_char *, u_char[MS_AUTH_RESPONSE_LENGTH+1], int);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   181  #ifdef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   182  bool	ms_lanman = 0;    	/* Use LanMan password instead of NT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   183  			  	/* Has meaning only with MS-CHAP challenges */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   184  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   185  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   186  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   187  #ifdef DEBUGMPPEKEY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   188  /* For MPPE debug */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   189  /* Use "[]|}{?/><,`!2&&(" (sans quotes) for RFC 3079 MS-CHAPv2 test value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   190  static char *mschap_challenge = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   191  /* Use "!@\#$%^&*()_+:3|~" (sans quotes, backslash is to escape #) for ... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   192  static char *mschap2_peer_challenge = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   193  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   194  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   195  #include "netif/ppp/fsm.h"		/* Need to poke MPPE options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   196  #include "netif/ppp/ccp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   197  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   198  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   199  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   200  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   201   * Command-line options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   202   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   203  static option_t chapms_option_list[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   204  #ifdef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   205  	{ "ms-lanman", o_bool, &ms_lanman,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   206  	  "Use LanMan passwd when using MS-CHAP", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   207  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   208  #ifdef DEBUGMPPEKEY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   209  	{ "mschap-challenge", o_string, &mschap_challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   210  	  "specify CHAP challenge" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   211  	{ "mschap2-peer-challenge", o_string, &mschap2_peer_challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   212  	  "specify CHAP peer challenge" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   213  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   214  	{ NULL }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   215  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   216  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   217  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   218  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   219  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   220   * chapms_generate_challenge - generate a challenge for MS-CHAP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   221   * For MS-CHAP the challenge length is fixed at 8 bytes.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   222   * The length goes in challenge[0] and the actual challenge starts
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   223   * at challenge[1].
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   224   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   225  static void chapms_generate_challenge(ppp_pcb *pcb, unsigned char *challenge) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   226  	LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   227  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   228  	*challenge++ = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   229  #ifdef DEBUGMPPEKEY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   230  	if (mschap_challenge && strlen(mschap_challenge) == 8)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   231  		memcpy(challenge, mschap_challenge, 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   232  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   233  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   234  		magic_random_bytes(challenge, 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   235  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   236  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   237  static void chapms2_generate_challenge(ppp_pcb *pcb, unsigned char *challenge) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   238  	LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   239  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   240  	*challenge++ = 16;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   241  #ifdef DEBUGMPPEKEY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   242  	if (mschap_challenge && strlen(mschap_challenge) == 16)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   243  		memcpy(challenge, mschap_challenge, 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   244  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   245  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   246  		magic_random_bytes(challenge, 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   247  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   248  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   249  static int chapms_verify_response(ppp_pcb *pcb, int id, const char *name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   250  		       const unsigned char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   251  		       const unsigned char *challenge, const unsigned char *response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   252  		       char *message, int message_space) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   253  	unsigned char md[MS_CHAP_RESPONSE_LEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   254  	int diff;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   255  	int challenge_len, response_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   256  	LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   257  	LWIP_UNUSED_ARG(name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   258  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   259  	challenge_len = *challenge++;	/* skip length, is 8 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   260  	response_len = *response++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   261  	if (response_len != MS_CHAP_RESPONSE_LEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   262  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   263  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   264  #ifndef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   265  	if (!response[MS_CHAP_USENT]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   266  		/* Should really propagate this into the error packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   267  		ppp_notice("Peer request for LANMAN auth not supported");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   268  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   269  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   270  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   271  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   272  	/* Generate the expected response. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   273  	ChapMS(pcb, (const u_char *)challenge, (const char *)secret, secret_len, md);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   274  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   275  #ifdef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   276  	/* Determine which part of response to verify against */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   277  	if (!response[MS_CHAP_USENT])
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   278  		diff = memcmp(&response[MS_CHAP_LANMANRESP],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   279  			      &md[MS_CHAP_LANMANRESP], MS_CHAP_LANMANRESP_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   280  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   281  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   282  		diff = memcmp(&response[MS_CHAP_NTRESP], &md[MS_CHAP_NTRESP],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   283  			      MS_CHAP_NTRESP_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   284  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   285  	if (diff == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   286  		ppp_slprintf(message, message_space, "Access granted");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   287  		return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   288  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   289  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   290   bad:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   291  	/* See comments below for MS-CHAP V2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   292  	ppp_slprintf(message, message_space, "E=691 R=1 C=%0.*B V=0",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   293  		 challenge_len, challenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   294  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   295  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   296  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   297  static int chapms2_verify_response(ppp_pcb *pcb, int id, const char *name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   298  			const unsigned char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   299  			const unsigned char *challenge, const unsigned char *response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   300  			char *message, int message_space) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   301  	unsigned char md[MS_CHAP2_RESPONSE_LEN];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   302  	char saresponse[MS_AUTH_RESPONSE_LENGTH+1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   303  	int challenge_len, response_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   304  	LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   305  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   306  	challenge_len = *challenge++;	/* skip length, is 16 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   307  	response_len = *response++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   308  	if (response_len != MS_CHAP2_RESPONSE_LEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   309  		goto bad;	/* not even the right length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   310  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   311  	/* Generate the expected response and our mutual auth. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   312  	ChapMS2(pcb, (const u_char*)challenge, (const u_char*)&response[MS_CHAP2_PEER_CHALLENGE], name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   313  		(const char *)secret, secret_len, md,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   314  		(unsigned char *)saresponse, MS_CHAP2_AUTHENTICATOR);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   315  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   316  	/* compare MDs and send the appropriate status */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   317  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   318  	 * Per RFC 2759, success message must be formatted as
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   319  	 *     "S=<auth_string> M=<message>"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   320  	 * where
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   321  	 *     <auth_string> is the Authenticator Response (mutual auth)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   322  	 *     <message> is a text message
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   323  	 *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   324  	 * However, some versions of Windows (win98 tested) do not know
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   325  	 * about the M=<message> part (required per RFC 2759) and flag
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   326  	 * it as an error (reported incorrectly as an encryption error
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   327  	 * to the user).  Since the RFC requires it, and it can be
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   328  	 * useful information, we supply it if the peer is a conforming
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   329  	 * system.  Luckily (?), win98 sets the Flags field to 0x04
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   330  	 * (contrary to RFC requirements) so we can use that to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   331  	 * distinguish between conforming and non-conforming systems.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   332  	 *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   333  	 * Special thanks to Alex Swiridov <say@real.kharkov.ua> for
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   334  	 * help debugging this.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   335  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   336  	if (memcmp(&md[MS_CHAP2_NTRESP], &response[MS_CHAP2_NTRESP],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   337  		   MS_CHAP2_NTRESP_LEN) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   338  		if (response[MS_CHAP2_FLAGS])
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   339  			ppp_slprintf(message, message_space, "S=%s", saresponse);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   340  		else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   341  			ppp_slprintf(message, message_space, "S=%s M=%s",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   342  				 saresponse, "Access granted");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   343  		return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   344  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   345  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   346   bad:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   347  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   348  	 * Failure message must be formatted as
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   349  	 *     "E=e R=r C=c V=v M=m"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   350  	 * where
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   351  	 *     e = error code (we use 691, ERROR_AUTHENTICATION_FAILURE)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   352  	 *     r = retry (we use 1, ok to retry)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   353  	 *     c = challenge to use for next response, we reuse previous
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   354  	 *     v = Change Password version supported, we use 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   355  	 *     m = text message
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   356  	 *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   357  	 * The M=m part is only for MS-CHAPv2.  Neither win2k nor
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   358  	 * win98 (others untested) display the message to the user anyway.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   359  	 * They also both ignore the E=e code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   360  	 *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   361  	 * Note that it's safe to reuse the same challenge as we don't
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   362  	 * actually accept another response based on the error message
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   363  	 * (and no clients try to resend a response anyway).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   364  	 *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   365  	 * Basically, this whole bit is useless code, even the small
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   366  	 * implementation here is only because of overspecification.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   367  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   368  	ppp_slprintf(message, message_space, "E=691 R=1 C=%0.*B V=0 M=%s",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   369  		 challenge_len, challenge, "Access denied");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   370  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   371  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   372  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   373  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   374  static void chapms_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   375  		     const unsigned char *challenge, const char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   376  		     unsigned char *private_) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   377  	LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   378  	LWIP_UNUSED_ARG(our_name);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   379  	LWIP_UNUSED_ARG(private_);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   380  	challenge++;	/* skip length, should be 8 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   381  	*response++ = MS_CHAP_RESPONSE_LEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   382  	ChapMS(pcb, challenge, secret, secret_len, response);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   383  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   384  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   385  static void chapms2_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_name,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   386  		      const unsigned char *challenge, const char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   387  		      unsigned char *private_) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   388  	LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   389  	challenge++;	/* skip length, should be 16 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   390  	*response++ = MS_CHAP2_RESPONSE_LEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   391  	ChapMS2(pcb, challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   392  #ifdef DEBUGMPPEKEY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   393  		mschap2_peer_challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   394  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   395  		NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   396  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   397  		our_name, secret, secret_len, response, private_,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   398  		MS_CHAP2_AUTHENTICATEE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   399  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   400  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   401  static int chapms2_check_success(ppp_pcb *pcb, unsigned char *msg, int len, unsigned char *private_) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   402  	LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   403  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   404  	if ((len < MS_AUTH_RESPONSE_LENGTH + 2) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   405  	    strncmp((char *)msg, "S=", 2) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   406  		/* Packet does not start with "S=" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   407  		ppp_error("MS-CHAPv2 Success packet is badly formed.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   408  		return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   409  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   410  	msg += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   411  	len -= 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   412  	if (len < MS_AUTH_RESPONSE_LENGTH
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   413  	    || memcmp(msg, private_, MS_AUTH_RESPONSE_LENGTH)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   414  		/* Authenticator Response did not match expected. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   415  		ppp_error("MS-CHAPv2 mutual authentication failed.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   416  		return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   417  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   418  	/* Authenticator Response matches. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   419  	msg += MS_AUTH_RESPONSE_LENGTH; /* Eat it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   420  	len -= MS_AUTH_RESPONSE_LENGTH;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   421  	if ((len >= 3) && !strncmp((char *)msg, " M=", 3)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   422  		msg += 3; /* Eat the delimiter */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   423  	} else if (len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   424  		/* Packet has extra text which does not begin " M=" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   425  		ppp_error("MS-CHAPv2 Success packet is badly formed.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   426  		return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   427  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   428  	return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   429  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   430  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   431  static void chapms_handle_failure(ppp_pcb *pcb, unsigned char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   432  	int err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   433  	const char *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   434  	char msg[64];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   435  	LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   436  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   437  	/* We want a null-terminated string for strxxx(). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   438  	len = LWIP_MIN(len, 63);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   439  	MEMCPY(msg, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   440  	msg[len] = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   441  	p = msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   442  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   443  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   444  	 * Deal with MS-CHAP formatted failure messages; just print the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   445  	 * M=<message> part (if any).  For MS-CHAP we're not really supposed
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   446  	 * to use M=<message>, but it shouldn't hurt.  See
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   447  	 * chapms[2]_verify_response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   448  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   449  	if (!strncmp(p, "E=", 2))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   450  		err = strtol(p+2, NULL, 10); /* Remember the error code. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   451  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   452  		goto print_msg; /* Message is badly formatted. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   453  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   454  	if (len && ((p = strstr(p, " M=")) != NULL)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   455  		/* M=<message> field found. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   456  		p += 3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   457  	} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   458  		/* No M=<message>; use the error code. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   459  		switch (err) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   460  		case MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   461  			p = "E=646 Restricted logon hours";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   462  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   463  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   464  		case MS_CHAP_ERROR_ACCT_DISABLED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   465  			p = "E=647 Account disabled";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   466  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   467  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   468  		case MS_CHAP_ERROR_PASSWD_EXPIRED:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   469  			p = "E=648 Password expired";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   470  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   471  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   472  		case MS_CHAP_ERROR_NO_DIALIN_PERMISSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   473  			p = "E=649 No dialin permission";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   474  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   475  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   476  		case MS_CHAP_ERROR_AUTHENTICATION_FAILURE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   477  			p = "E=691 Authentication failure";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   478  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   479  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   480  		case MS_CHAP_ERROR_CHANGING_PASSWORD:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   481  			/* Should never see this, we don't support Change Password. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   482  			p = "E=709 Error changing password";
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   483  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   484  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   485  		default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   486  			ppp_error("Unknown MS-CHAP authentication failure: %.*v",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   487  			      len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   488  			return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   489  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   490  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   491  print_msg:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   492  	if (p != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   493  		ppp_error("MS-CHAP authentication failed: %v", p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   494  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   495  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   496  static void ChallengeResponse(const u_char *challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   497  		  const u_char PasswordHash[MD4_SIGNATURE_SIZE],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   498  		  u_char response[24]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   499      u_char    ZPasswordHash[21];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   500      lwip_des_context des;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   501      u_char des_key[8];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   502  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   503      BZERO(ZPasswordHash, sizeof(ZPasswordHash));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   504      MEMCPY(ZPasswordHash, PasswordHash, MD4_SIGNATURE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   505  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   506  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   507      dbglog("ChallengeResponse - ZPasswordHash %.*B",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   508  	   sizeof(ZPasswordHash), ZPasswordHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   509  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   510  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   511      pppcrypt_56_to_64_bit_key(ZPasswordHash + 0, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   512      lwip_des_init(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   513      lwip_des_setkey_enc(&des, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   514      lwip_des_crypt_ecb(&des, challenge, response +0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   515      lwip_des_free(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   516  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   517      pppcrypt_56_to_64_bit_key(ZPasswordHash + 7, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   518      lwip_des_init(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   519      lwip_des_setkey_enc(&des, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   520      lwip_des_crypt_ecb(&des, challenge, response +8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   521      lwip_des_free(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   522  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   523      pppcrypt_56_to_64_bit_key(ZPasswordHash + 14, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   524      lwip_des_init(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   525      lwip_des_setkey_enc(&des, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   526      lwip_des_crypt_ecb(&des, challenge, response +16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   527      lwip_des_free(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   528  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   529  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   530      dbglog("ChallengeResponse - response %.24B", response);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   531  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   532  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   533  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   534  static void ChallengeHash(const u_char PeerChallenge[16], const u_char *rchallenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   535  	      const char *username, u_char Challenge[8]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   536      lwip_sha1_context	sha1Context;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   537      u_char	sha1Hash[SHA1_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   538      const char	*user;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   539  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   540      /* remove domain from "domain\username" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   541      if ((user = strrchr(username, '\\')) != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   542  	++user;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   543      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   544  	user = username;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   545  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   546      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   547      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   548      lwip_sha1_update(&sha1Context, PeerChallenge, 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   549      lwip_sha1_update(&sha1Context, rchallenge, 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   550      lwip_sha1_update(&sha1Context, (const unsigned char*)user, strlen(user));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   551      lwip_sha1_finish(&sha1Context, sha1Hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   552      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   553  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   554      MEMCPY(Challenge, sha1Hash, 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   555  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   556  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   557  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   558   * Convert the ASCII version of the password to Unicode.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   559   * This implicitly supports 8-bit ISO8859/1 characters.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   560   * This gives us the little-endian representation, which
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   561   * is assumed by all M$ CHAP RFCs.  (Unicode byte ordering
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   562   * is machine-dependent.)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   563   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   564  static void ascii2unicode(const char ascii[], int ascii_len, u_char unicode[]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   565      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   566  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   567      BZERO(unicode, ascii_len * 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   568      for (i = 0; i < ascii_len; i++)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   569  	unicode[i * 2] = (u_char) ascii[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   570  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   571  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   572  static void NTPasswordHash(u_char *secret, int secret_len, u_char hash[MD4_SIGNATURE_SIZE]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   573      lwip_md4_context		md4Context;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   574  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   575      lwip_md4_init(&md4Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   576      lwip_md4_starts(&md4Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   577      lwip_md4_update(&md4Context, secret, secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   578      lwip_md4_finish(&md4Context, hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   579      lwip_md4_free(&md4Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   580  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   581  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   582  static void ChapMS_NT(const u_char *rchallenge, const char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   583  	  u_char NTResponse[24]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   584      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   585      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   586  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   587      /* Hash the Unicode version of the secret (== password). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   588      ascii2unicode(secret, secret_len, unicodePassword);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   589      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   590  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   591      ChallengeResponse(rchallenge, PasswordHash, NTResponse);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   592  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   593  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   594  static void ChapMS2_NT(const u_char *rchallenge, const u_char PeerChallenge[16], const char *username,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   595  	   const char *secret, int secret_len, u_char NTResponse[24]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   596      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   597      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   598      u_char	Challenge[8];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   599  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   600      ChallengeHash(PeerChallenge, rchallenge, username, Challenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   601  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   602      /* Hash the Unicode version of the secret (== password). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   603      ascii2unicode(secret, secret_len, unicodePassword);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   604      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   605  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   606      ChallengeResponse(Challenge, PasswordHash, NTResponse);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   607  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   608  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   609  #ifdef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   610  static u_char *StdText = (u_char *)"KGS!@#$%"; /* key from rasapi32.dll */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   611  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   612  static void ChapMS_LANMan(u_char *rchallenge, char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   613  	      unsigned char *response) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   614      int			i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   615      u_char		UcasePassword[MAX_NT_PASSWORD]; /* max is actually 14 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   616      u_char		PasswordHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   617      lwip_des_context des;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   618      u_char des_key[8];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   619  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   620      /* LANMan password is case insensitive */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   621      BZERO(UcasePassword, sizeof(UcasePassword));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   622      for (i = 0; i < secret_len; i++)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   623         UcasePassword[i] = (u_char)toupper(secret[i]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   624  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   625      pppcrypt_56_to_64_bit_key(UcasePassword +0, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   626      lwip_des_init(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   627      lwip_des_setkey_enc(&des, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   628      lwip_des_crypt_ecb(&des, StdText, PasswordHash +0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   629      lwip_des_free(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   630  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   631      pppcrypt_56_to_64_bit_key(UcasePassword +7, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   632      lwip_des_init(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   633      lwip_des_setkey_enc(&des, des_key);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   634      lwip_des_crypt_ecb(&des, StdText, PasswordHash +8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   635      lwip_des_free(&des);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   636  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   637      ChallengeResponse(rchallenge, PasswordHash, &response[MS_CHAP_LANMANRESP]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   638  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   639  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   640  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   641  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   642  static void GenerateAuthenticatorResponse(const u_char PasswordHashHash[MD4_SIGNATURE_SIZE],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   643  			      u_char NTResponse[24], const u_char PeerChallenge[16],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   644  			      const u_char *rchallenge, const char *username,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   645  			      u_char authResponse[MS_AUTH_RESPONSE_LENGTH+1]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   646      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   647       * "Magic" constants used in response generation, from RFC 2759.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   648       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   649      static const u_char Magic1[39] = /* "Magic server to client signing constant" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   650  	{ 0x4D, 0x61, 0x67, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   651  	  0x65, 0x72, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x69, 0x65,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   652  	  0x6E, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   653  	  0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74 };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   654      static const u_char Magic2[41] = /* "Pad to make it do more than one iteration" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   655  	{ 0x50, 0x61, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x61, 0x6B,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   656  	  0x65, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x6D, 0x6F,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   657  	  0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x6F, 0x6E,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   658  	  0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   659  	  0x6E };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   660  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   661      int		i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   662      lwip_sha1_context	sha1Context;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   663      u_char	Digest[SHA1_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   664      u_char	Challenge[8];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   665  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   666      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   667      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   668      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   669      lwip_sha1_update(&sha1Context, NTResponse, 24);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   670      lwip_sha1_update(&sha1Context, Magic1, sizeof(Magic1));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   671      lwip_sha1_finish(&sha1Context, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   672      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   673  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   674      ChallengeHash(PeerChallenge, rchallenge, username, Challenge);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   675  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   676      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   677      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   678      lwip_sha1_update(&sha1Context, Digest, sizeof(Digest));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   679      lwip_sha1_update(&sha1Context, Challenge, sizeof(Challenge));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   680      lwip_sha1_update(&sha1Context, Magic2, sizeof(Magic2));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   681      lwip_sha1_finish(&sha1Context, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   682      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   683  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   684      /* Convert to ASCII hex string. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   685      for (i = 0; i < LWIP_MAX((MS_AUTH_RESPONSE_LENGTH / 2), (int)sizeof(Digest)); i++)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   686  	sprintf((char *)&authResponse[i * 2], "%02X", Digest[i]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   687  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   688  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   689  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   690  static void GenerateAuthenticatorResponsePlain(
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   691  		 const char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   692  		 u_char NTResponse[24], const u_char PeerChallenge[16],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   693  		 const u_char *rchallenge, const char *username,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   694  		 u_char authResponse[MS_AUTH_RESPONSE_LENGTH+1]) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   695      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   696      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   697      u_char	PasswordHashHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   698  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   699      /* Hash (x2) the Unicode version of the secret (== password). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   700      ascii2unicode(secret, secret_len, unicodePassword);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   701      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   702      NTPasswordHash(PasswordHash, sizeof(PasswordHash),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   703  		   PasswordHashHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   704  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   705      GenerateAuthenticatorResponse(PasswordHashHash, NTResponse, PeerChallenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   706  				  rchallenge, username, authResponse);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   707  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   708  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   709  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   710  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   711  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   712   * Set mppe_xxxx_key from MS-CHAP credentials. (see RFC 3079)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   713   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   714  static void Set_Start_Key(ppp_pcb *pcb, const u_char *rchallenge, const char *secret, int secret_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   715      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   716      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   717      u_char	PasswordHashHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   718      lwip_sha1_context	sha1Context;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   719      u_char	Digest[SHA1_SIGNATURE_SIZE];	/* >= MPPE_MAX_KEY_LEN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   720  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   721      /* Hash (x2) the Unicode version of the secret (== password). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   722      ascii2unicode(secret, secret_len, unicodePassword);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   723      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   724      NTPasswordHash(PasswordHash, sizeof(PasswordHash), PasswordHashHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   725  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   726      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   727      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   728      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   729      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   730      lwip_sha1_update(&sha1Context, rchallenge, 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   731      lwip_sha1_finish(&sha1Context, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   732      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   733  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   734      /* Same key in both directions. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   735      mppe_set_key(pcb, &pcb->mppe_comp, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   736      mppe_set_key(pcb, &pcb->mppe_decomp, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   737  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   738      pcb->mppe_keys_set = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   739  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   740  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   741  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   742   * Set mppe_xxxx_key from MS-CHAPv2 credentials. (see RFC 3079)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   743   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   744  static void SetMasterKeys(ppp_pcb *pcb, const char *secret, int secret_len, u_char NTResponse[24], int IsServer) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   745      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   746      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   747      u_char	PasswordHashHash[MD4_SIGNATURE_SIZE];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   748      lwip_sha1_context	sha1Context;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   749      u_char	MasterKey[SHA1_SIGNATURE_SIZE];	/* >= MPPE_MAX_KEY_LEN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   750      u_char	Digest[SHA1_SIGNATURE_SIZE];	/* >= MPPE_MAX_KEY_LEN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   751      const u_char *s;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   752  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   753      /* "This is the MPPE Master Key" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   754      static const u_char Magic1[27] =
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   755  	{ 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   756  	  0x68, 0x65, 0x20, 0x4d, 0x50, 0x50, 0x45, 0x20, 0x4d,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   757  	  0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x4b, 0x65, 0x79 };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   758      /* "On the client side, this is the send key; "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   759         "on the server side, it is the receive key." */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   760      static const u_char Magic2[84] =
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   761  	{ 0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   762  	  0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   763  	  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   764  	  0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   765  	  0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   766  	  0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   767  	  0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   768  	  0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   769  	  0x6b, 0x65, 0x79, 0x2e };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   770      /* "On the client side, this is the receive key; "
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   771         "on the server side, it is the send key." */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   772      static const u_char Magic3[84] =
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   773  	{ 0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   774  	  0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   775  	  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   776  	  0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   777  	  0x6b, 0x65, 0x79, 0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   778  	  0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   779  	  0x69, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   780  	  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   781  	  0x6b, 0x65, 0x79, 0x2e };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   782  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   783      /* Hash (x2) the Unicode version of the secret (== password). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   784      ascii2unicode(secret, secret_len, unicodePassword);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   785      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   786      NTPasswordHash(PasswordHash, sizeof(PasswordHash), PasswordHashHash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   787  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   788      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   789      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   790      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   791      lwip_sha1_update(&sha1Context, NTResponse, 24);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   792      lwip_sha1_update(&sha1Context, Magic1, sizeof(Magic1));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   793      lwip_sha1_finish(&sha1Context, MasterKey);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   794      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   795  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   796      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   797       * generate send key
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   798       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   799      if (IsServer)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   800  	s = Magic3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   801      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   802  	s = Magic2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   803      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   804      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   805      lwip_sha1_update(&sha1Context, MasterKey, 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   806      lwip_sha1_update(&sha1Context, mppe_sha1_pad1, SHA1_PAD_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   807      lwip_sha1_update(&sha1Context, s, 84);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   808      lwip_sha1_update(&sha1Context, mppe_sha1_pad2, SHA1_PAD_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   809      lwip_sha1_finish(&sha1Context, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   810      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   811  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   812      mppe_set_key(pcb, &pcb->mppe_comp, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   813  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   814      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   815       * generate recv key
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   816       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   817      if (IsServer)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   818  	s = Magic2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   819      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   820  	s = Magic3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   821      lwip_sha1_init(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   822      lwip_sha1_starts(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   823      lwip_sha1_update(&sha1Context, MasterKey, 16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   824      lwip_sha1_update(&sha1Context, mppe_sha1_pad1, SHA1_PAD_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   825      lwip_sha1_update(&sha1Context, s, 84);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   826      lwip_sha1_update(&sha1Context, mppe_sha1_pad2, SHA1_PAD_SIZE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   827      lwip_sha1_finish(&sha1Context, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   828      lwip_sha1_free(&sha1Context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   829  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   830      mppe_set_key(pcb, &pcb->mppe_decomp, Digest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   831  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   832      pcb->mppe_keys_set = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   833  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   834  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   835  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   836  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   837  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   838  static void ChapMS(ppp_pcb *pcb, const u_char *rchallenge, const char *secret, int secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   839         unsigned char *response) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   840  #if !MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   841      LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   842  #endif /* !MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   843      BZERO(response, MS_CHAP_RESPONSE_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   844  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   845      ChapMS_NT(rchallenge, secret, secret_len, &response[MS_CHAP_NTRESP]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   846  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   847  #ifdef MSLANMAN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   848      ChapMS_LANMan(rchallenge, secret, secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   849  		  &response[MS_CHAP_LANMANRESP]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   850  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   851      /* preferred method is set by option  */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   852      response[MS_CHAP_USENT] = !ms_lanman;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   853  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   854      response[MS_CHAP_USENT] = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   855  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   856  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   857  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   858      Set_Start_Key(pcb, rchallenge, secret, secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   859  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   860  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   861  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   862  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   863  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   864   * If PeerChallenge is NULL, one is generated and the PeerChallenge
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   865   * field of response is filled in.  Call this way when generating a response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   866   * If PeerChallenge is supplied, it is copied into the PeerChallenge field.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   867   * Call this way when verifying a response (or debugging).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   868   * Do not call with PeerChallenge = response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   869   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   870   * The PeerChallenge field of response is then used for calculation of the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   871   * Authenticator Response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   872   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   873  static void ChapMS2(ppp_pcb *pcb, const u_char *rchallenge, const u_char *PeerChallenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   874  	const char *user, const char *secret, int secret_len, unsigned char *response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   875  	u_char authResponse[], int authenticator) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   876      /* ARGSUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   877      LWIP_UNUSED_ARG(authenticator);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   878  #if !MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   879      LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   880  #endif /* !MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   881  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   882      BZERO(response, MS_CHAP2_RESPONSE_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   883  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   884      /* Generate the Peer-Challenge if requested, or copy it if supplied. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   885      if (!PeerChallenge)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   886  	magic_random_bytes(&response[MS_CHAP2_PEER_CHALLENGE], MS_CHAP2_PEER_CHAL_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   887      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   888  	MEMCPY(&response[MS_CHAP2_PEER_CHALLENGE], PeerChallenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   889  	      MS_CHAP2_PEER_CHAL_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   890  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   891      /* Generate the NT-Response */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   892      ChapMS2_NT(rchallenge, &response[MS_CHAP2_PEER_CHALLENGE], user,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   893  	       secret, secret_len, &response[MS_CHAP2_NTRESP]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   894  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   895      /* Generate the Authenticator Response. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   896      GenerateAuthenticatorResponsePlain(secret, secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   897  				       &response[MS_CHAP2_NTRESP],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   898  				       &response[MS_CHAP2_PEER_CHALLENGE],
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   899  				       rchallenge, user, authResponse);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   900  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   901  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   902      SetMasterKeys(pcb, secret, secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   903  		  &response[MS_CHAP2_NTRESP], authenticator);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   904  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   905  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   906  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   907  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   908  #if MPPE_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   909  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   910   * Set MPPE options from plugins.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   911   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   912  void set_mppe_enc_types(int policy, int types) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   913      /* Early exit for unknown policies. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   914      if (policy != MPPE_ENC_POL_ENC_ALLOWED ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   915  	policy != MPPE_ENC_POL_ENC_REQUIRED)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   916  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   917  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   918      /* Don't modify MPPE if it's optional and wasn't already configured. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   919      if (policy == MPPE_ENC_POL_ENC_ALLOWED && !ccp_wantoptions[0].mppe)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   920  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   921  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   922      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   923       * Disable undesirable encryption types.  Note that we don't ENABLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   924       * any encryption types, to avoid overriding manual configuration.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   925       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   926      switch(types) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   927  	case MPPE_ENC_TYPES_RC4_40:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   928  	    ccp_wantoptions[0].mppe &= ~MPPE_OPT_128;	/* disable 128-bit */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   929  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   930  	case MPPE_ENC_TYPES_RC4_128:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   931  	    ccp_wantoptions[0].mppe &= ~MPPE_OPT_40;	/* disable 40-bit */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   932  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   933  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   934  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   935      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   936  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   937  #endif /* MPPE_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   938  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   939  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   940  const struct chap_digest_type chapms_digest = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   941  	CHAP_MICROSOFT,		/* code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   942  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   943  	chapms_generate_challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   944  	chapms_verify_response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   945  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   946  	chapms_make_response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   947  	NULL,			/* check_success */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   948  	chapms_handle_failure,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   949  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   950  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   951  const struct chap_digest_type chapms2_digest = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   952  	CHAP_MICROSOFT_V2,	/* code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   953  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   954  	chapms2_generate_challenge,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   955  	chapms2_verify_response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   956  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   957  	chapms2_make_response,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   958  	chapms2_check_success,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   959  	chapms_handle_failure,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   960  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   961  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\chap_ms.c	   962  #endif /* PPP_SUPPORT && MSCHAP_SUPPORT */

	; Module end
