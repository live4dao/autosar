	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc31828a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.lcp.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\lcp.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\lcp.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\lcp.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\lcp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4546
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\lcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	167
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	169
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	192
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	192
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	239
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	276
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	192
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	192
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	239
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	375
	.byte	3
	.word	192
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	469
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	498
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	192
	.byte	8,4
	.word	276
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	612
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	239
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	685
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	192
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	612
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	612
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	927
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	192
	.byte	8,3
	.word	192
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1084
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1093
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	239
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1227
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	192
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1338
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	192
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	192
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	239
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	239
	.byte	8,1
	.word	192
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1792
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1792
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1801
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1877
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	685
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2013
	.byte	12
	.word	192
	.byte	3
	.word	2127
	.byte	12
	.word	192
	.byte	3
	.word	2137
	.byte	12
	.word	192
	.byte	3
	.word	2147
	.byte	12
	.word	1877
	.byte	3
	.word	2157
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	192
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	192
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	685
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2132
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2142
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2152
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2162
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2167
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	276
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	276
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	276
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2519
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	276
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2669
	.byte	12
	.word	2519
	.byte	3
	.word	2806
	.byte	12
	.word	2669
	.byte	3
	.word	2816
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2162
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2811
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2821
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2826
	.byte	12
	.word	192
	.byte	3
	.word	3111
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3116
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3116
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3121
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	192
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3285
	.byte	3
	.word	1801
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	469
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3435
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3650
	.byte	12
	.word	3435
	.byte	3
	.word	3820
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	469
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	239
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	239
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3116
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3825
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3830
	.byte	12
	.word	3650
	.byte	3
	.word	4054
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4059
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4064
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4164
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4261
	.byte	8,8
	.word	192
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4355
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4064
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4064
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4261
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4164
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4364
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	192
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\lcp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     1  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     2   * lcp.c - PPP Link Control Protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     4   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     5   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     7   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     8   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    12   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    15   *    the documentation and/or other materials provided with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    16   *    distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    17   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    18   * 3. The name "Carnegie Mellon University" must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    19   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    20   *    prior written permission. For permission or any legal
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    21   *    details, please contact
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    22   *      Office of Technology Transfer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    23   *      Carnegie Mellon University
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    24   *      5000 Forbes Avenue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    25   *      Pittsburgh, PA  15213-3890
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    26   *      (412) 268-4387, fax: (412) 268-7395
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    27   *      tech-transfer@andrew.cmu.edu
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    28   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    29   * 4. Redistributions of any form whatsoever must retain the following
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    30   *    acknowledgment:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    31   *    "This product includes software developed by Computing Services
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    32   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    34   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    35   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    36   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    37   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    38   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    39   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    40   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    41   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    42  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    43  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    44  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    45  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    46  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    47   * @todo:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    48   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    49  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    50  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    51  #include <stdio.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    52  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    53  #include <stdlib.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    54  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    55  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    56  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    57  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    58  #include "netif/ppp/fsm.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    59  #include "netif/ppp/lcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    60  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    61  #include "netif/ppp/chap-new.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    62  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    63  #include "netif/ppp/magic.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    64  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    65  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    66   * When the link comes up we want to be able to wait for a short while,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    67   * or until seeing some input from the peer, before starting to send
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    68   * configure-requests.  We do this by delaying the fsm_lowerup call.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    69   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    70  /* steal a bit in fsm flags word */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    71  #define DELAYED_UP	0x80
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    72  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    73  static void lcp_delayed_up(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    74  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    75  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    76   * LCP-related command-line options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    77   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    78  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    79  int	lcp_echo_interval = 0; 	/* Interval between LCP echo-requests */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    80  int	lcp_echo_fails = 0;	/* Tolerance to unanswered echo-requests */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    81  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    82  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    83  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    84  /* options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    85  static u_int lcp_echo_interval      = LCP_ECHOINTERVAL; /* Interval between LCP echo-requests */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    86  static u_int lcp_echo_fails         = LCP_MAXECHOFAILS; /* Tolerance to unanswered echo-requests */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    87  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    88  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    89  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    90  #if PPP_LCP_ADAPTIVE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    91  bool	lcp_echo_adaptive = 0;	/* request echo only if the link was idle */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    92  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    93  bool	lax_recv = 0;		/* accept control chars in asyncmap */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    94  bool	noendpoint = 0;		/* don't send/accept endpoint discriminator */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    95  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    96  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    97  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    98  static int noopt (char **);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	    99  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   100  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   101  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   102  static int setendpoint (char **);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   103  static void printendpoint (option_t *, void (*)(void *, char *, ...),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   104  			       void *);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   105  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   106  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   107  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   108  static option_t lcp_option_list[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   109      /* LCP options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   110      { "-all", o_special_noarg, (void *)noopt,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   111        "Don't request/allow any LCP options" },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   112  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   113      { "noaccomp", o_bool, &lcp_wantoptions[0].neg_accompression,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   114        "Disable address/control compression",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   115        OPT_A2CLR, &lcp_allowoptions[0].neg_accompression },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   116      { "-ac", o_bool, &lcp_wantoptions[0].neg_accompression,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   117        "Disable address/control compression",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   118        OPT_ALIAS | OPT_A2CLR, &lcp_allowoptions[0].neg_accompression },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   119  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   120      { "asyncmap", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   121        "Set asyncmap (for received packets)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   122        OPT_OR, &lcp_wantoptions[0].neg_asyncmap },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   123      { "-as", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   124        "Set asyncmap (for received packets)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   125        OPT_ALIAS | OPT_OR, &lcp_wantoptions[0].neg_asyncmap },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   126      { "default-asyncmap", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   127        "Disable asyncmap negotiation",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   128        OPT_OR | OPT_NOARG | OPT_VAL(~0U) | OPT_A2CLR,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   129        &lcp_allowoptions[0].neg_asyncmap },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   130      { "-am", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   131        "Disable asyncmap negotiation",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   132        OPT_ALIAS | OPT_OR | OPT_NOARG | OPT_VAL(~0U) | OPT_A2CLR,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   133        &lcp_allowoptions[0].neg_asyncmap },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   134  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   135      { "nomagic", o_bool, &lcp_wantoptions[0].neg_magicnumber,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   136        "Disable magic number negotiation (looped-back line detection)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   137        OPT_A2CLR, &lcp_allowoptions[0].neg_magicnumber },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   138      { "-mn", o_bool, &lcp_wantoptions[0].neg_magicnumber,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   139        "Disable magic number negotiation (looped-back line detection)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   140        OPT_ALIAS | OPT_A2CLR, &lcp_allowoptions[0].neg_magicnumber },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   141  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   142      { "mru", o_int, &lcp_wantoptions[0].mru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   143        "Set MRU (maximum received packet size) for negotiation",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   144        OPT_PRIO, &lcp_wantoptions[0].neg_mru },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   145      { "default-mru", o_bool, &lcp_wantoptions[0].neg_mru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   146        "Disable MRU negotiation (use default 1500)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   147        OPT_PRIOSUB | OPT_A2CLR, &lcp_allowoptions[0].neg_mru },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   148      { "-mru", o_bool, &lcp_wantoptions[0].neg_mru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   149        "Disable MRU negotiation (use default 1500)",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   150        OPT_ALIAS | OPT_PRIOSUB | OPT_A2CLR, &lcp_allowoptions[0].neg_mru },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   151  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   152      { "mtu", o_int, &lcp_allowoptions[0].mru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   153        "Set our MTU", OPT_LIMITS, NULL, MAXMRU, MINMRU },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   154  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   155      { "nopcomp", o_bool, &lcp_wantoptions[0].neg_pcompression,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   156        "Disable protocol field compression",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   157        OPT_A2CLR, &lcp_allowoptions[0].neg_pcompression },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   158      { "-pc", o_bool, &lcp_wantoptions[0].neg_pcompression,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   159        "Disable protocol field compression",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   160        OPT_ALIAS | OPT_A2CLR, &lcp_allowoptions[0].neg_pcompression },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   161  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   162      { "passive", o_bool, &lcp_wantoptions[0].passive,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   163        "Set passive mode", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   164      { "-p", o_bool, &lcp_wantoptions[0].passive,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   165        "Set passive mode", OPT_ALIAS | 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   166  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   167      { "silent", o_bool, &lcp_wantoptions[0].silent,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   168        "Set silent mode", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   169  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   170      { "lcp-echo-failure", o_int, &lcp_echo_fails,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   171        "Set number of consecutive echo failures to indicate link failure",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   172        OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   173      { "lcp-echo-interval", o_int, &lcp_echo_interval,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   174        "Set time in seconds between LCP echo requests", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   175  #if PPP_LCP_ADAPTIVE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   176      { "lcp-echo-adaptive", o_bool, &lcp_echo_adaptive,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   177        "Suppress LCP echo requests if traffic was received", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   178  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   179      { "lcp-restart", o_int, &lcp_fsm[0].timeouttime,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   180        "Set time in seconds between LCP retransmissions", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   181      { "lcp-max-terminate", o_int, &lcp_fsm[0].maxtermtransmits,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   182        "Set maximum number of LCP terminate-request transmissions", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   183      { "lcp-max-configure", o_int, &lcp_fsm[0].maxconfreqtransmits,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   184        "Set maximum number of LCP configure-request transmissions", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   185      { "lcp-max-failure", o_int, &lcp_fsm[0].maxnakloops,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   186        "Set limit on number of LCP configure-naks", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   187  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   188      { "receive-all", o_bool, &lax_recv,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   189        "Accept all received control characters", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   190  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   191  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   192      { "mrru", o_int, &lcp_wantoptions[0].mrru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   193        "Maximum received packet size for multilink bundle",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   194        OPT_PRIO, &lcp_wantoptions[0].neg_mrru },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   195  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   196      { "mpshortseq", o_bool, &lcp_wantoptions[0].neg_ssnhf,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   197        "Use short sequence numbers in multilink headers",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   198        OPT_PRIO | 1, &lcp_allowoptions[0].neg_ssnhf },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   199      { "nompshortseq", o_bool, &lcp_wantoptions[0].neg_ssnhf,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   200        "Don't use short sequence numbers in multilink headers",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   201        OPT_PRIOSUB | OPT_A2CLR, &lcp_allowoptions[0].neg_ssnhf },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   202  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   203      { "endpoint", o_special, (void *) setendpoint,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   204        "Endpoint discriminator for multilink",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   205        OPT_PRIO | OPT_A2PRINTER, (void *) printendpoint },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   206  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   207  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   208      { "noendpoint", o_bool, &noendpoint,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   209        "Don't send or accept multilink endpoint discriminator", 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   210  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   211      {NULL}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   212  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   213  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   214  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   215  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   216   * Callbacks for fsm code.  (CI = Configuration Information)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   217   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   218  static void lcp_resetci(fsm *f);	/* Reset our CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   219  static int  lcp_cilen(fsm *f);		/* Return length of our CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   220  static void lcp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI to pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   221  static int  lcp_ackci(fsm *f, u_char *p, int len); /* Peer ack'd our CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   222  static int  lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject); /* Peer nak'd our CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   223  static int  lcp_rejci(fsm *f, u_char *p, int len); /* Peer rej'd our CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   224  static int  lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree); /* Rcv peer CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   225  static void lcp_up(fsm *f);		/* We're UP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   226  static void lcp_down(fsm *f);		/* We're DOWN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   227  static void lcp_starting (fsm *);	/* We need lower layer up */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   228  static void lcp_finished (fsm *);	/* We need lower layer down */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   229  static int  lcp_extcode(fsm *f, int code, int id, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   230  static void lcp_rprotrej(fsm *f, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   231  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   232  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   233   * routines to send LCP echos to peer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   234   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   235  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   236  static void lcp_echo_lowerup(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   237  static void lcp_echo_lowerdown(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   238  static void LcpEchoTimeout(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   239  static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   240  static void LcpSendEchoRequest(fsm *f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   241  static void LcpLinkFailure(fsm *f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   242  static void LcpEchoCheck(fsm *f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   243  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   244  static const fsm_callbacks lcp_callbacks = {	/* LCP callback routines */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   245      lcp_resetci,		/* Reset our Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   246      lcp_cilen,			/* Length of our Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   247      lcp_addci,			/* Add our Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   248      lcp_ackci,			/* ACK our Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   249      lcp_nakci,			/* NAK our Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   250      lcp_rejci,			/* Reject our Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   251      lcp_reqci,			/* Request peer's Configuration Information */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   252      lcp_up,			/* Called when fsm reaches OPENED state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   253      lcp_down,			/* Called when fsm leaves OPENED state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   254      lcp_starting,		/* Called when we want the lower layer up */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   255      lcp_finished,		/* Called when we want the lower layer down */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   256      NULL,			/* Called when Protocol-Reject received */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   257      NULL,			/* Retransmission is necessary */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   258      lcp_extcode,		/* Called to handle LCP-specific codes */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   259      "LCP"			/* String name of protocol */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   260  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   261  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   262  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   263   * Protocol entry points.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   264   * Some of these are called directly.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   265   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   266  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   267  static void lcp_init(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   268  static void lcp_input(ppp_pcb *pcb, u_char *p, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   269  static void lcp_protrej(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   270  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   271  static int lcp_printpkt(const u_char *p, int plen,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   272  		void (*printer) (void *, const char *, ...), void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   273  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   274  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   275  const struct protent lcp_protent = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   276      PPP_LCP,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   277      lcp_init,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   278      lcp_input,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   279      lcp_protrej,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   280      lcp_lowerup,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   281      lcp_lowerdown,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   282      lcp_open,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   283      lcp_close,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   284  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   285      lcp_printpkt,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   286  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   287  #if PPP_DATAINPUT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   288      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   289  #endif /* PPP_DATAINPUT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   290  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   291      "LCP",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   292      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   293  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   294  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   295      lcp_option_list,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   296      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   297  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   298  #if DEMAND_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   299      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   300      NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   301  #endif /* DEMAND_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   302  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   303  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   304  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   305   * Length of each type of configuration option (in octets)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   306   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   307  #define CILEN_VOID	2
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   308  #define CILEN_CHAR	3
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   309  #define CILEN_SHORT	4	/* CILEN_VOID + 2 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   310  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   311  #define CILEN_CHAP	5	/* CILEN_VOID + 2 + 1 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   312  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   313  #define CILEN_LONG	6	/* CILEN_VOID + 4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   314  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   315  #define CILEN_LQR	8	/* CILEN_VOID + 2 + 4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   316  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   317  #define CILEN_CBCP	3
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   318  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   319  #define CODENAME(x)	((x) == CONFACK ? "ACK" : \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   320  			 (x) == CONFNAK ? "NAK" : "REJ")
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   321  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   322  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   323  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   324   * noopt - Disable all options (why?).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   325   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   326  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   327  noopt(argv)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   328      char **argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   329  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   330      BZERO((char *) &lcp_wantoptions[0], sizeof (struct lcp_options));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   331      BZERO((char *) &lcp_allowoptions[0], sizeof (struct lcp_options));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   332  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   333      return (1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   334  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   335  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   336  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   337  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   338  static int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   339  setendpoint(argv)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   340      char **argv;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   341  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   342      if (str_to_epdisc(&lcp_wantoptions[0].endpoint, *argv)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   343  	lcp_wantoptions[0].neg_endpoint = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   344  	return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   345      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   346      option_error("Can't parse '%s' as an endpoint discriminator", *argv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   347      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   348  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   349  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   350  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   351  printendpoint(opt, printer, arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   352      option_t *opt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   353      void (*printer) (void *, char *, ...);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   354      void *arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   355  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   356  	printer(arg, "%s", epdisc_to_str(&lcp_wantoptions[0].endpoint));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   357  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   358  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   359  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   360  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   361   * lcp_init - Initialize LCP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   362   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   363  static void lcp_init(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   364      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   365      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   366      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   367  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   368      f->pcb = pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   369      f->protocol = PPP_LCP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   370      f->callbacks = &lcp_callbacks;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   371  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   372      fsm_init(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   373  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   374      BZERO(wo, sizeof(*wo));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   375      wo->neg_mru = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   376      wo->mru = PPP_DEFMRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   377      wo->neg_asyncmap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   378      wo->neg_magicnumber = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   379      wo->neg_pcompression = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   380      wo->neg_accompression = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   381  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   382      BZERO(ao, sizeof(*ao));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   383      ao->neg_mru = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   384      ao->mru = PPP_MAXMRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   385      ao->neg_asyncmap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   386  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   387      ao->neg_chap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   388      ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   389  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   390  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   391      ao->neg_upap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   392  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   393  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   394      ao->neg_eap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   395  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   396      ao->neg_magicnumber = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   397      ao->neg_pcompression = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   398      ao->neg_accompression = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   399      ao->neg_endpoint = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   400  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   401  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   402  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   403  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   404   * lcp_open - LCP is allowed to come up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   405   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   406  void lcp_open(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   407      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   408      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   409  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   410      f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   411      if (wo->passive)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   412  	f->flags |= OPT_PASSIVE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   413      if (wo->silent)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   414  	f->flags |= OPT_SILENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   415      fsm_open(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   416  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   417  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   418  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   419  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   420   * lcp_close - Take LCP down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   421   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   422  void lcp_close(ppp_pcb *pcb, const char *reason) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   423      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   424      int oldstate;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   425  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   426      if (pcb->phase != PPP_PHASE_DEAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   427  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   428      && pcb->phase != PPP_PHASE_MASTER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   429  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   430      )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   431  	new_phase(pcb, PPP_PHASE_TERMINATE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   432  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   433      if (f->flags & DELAYED_UP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   434  	UNTIMEOUT(lcp_delayed_up, f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   435  	f->state = PPP_FSM_STOPPED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   436      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   437      oldstate = f->state;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   438  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   439      fsm_close(f, reason);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   440      if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   441  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   442  	 * This action is not strictly according to the FSM in RFC1548,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   443  	 * but it does mean that the program terminates if you do a
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   444  	 * lcp_close() when a connection hasn't been established
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   445  	 * because we are in passive/silent mode or because we have
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   446  	 * delayed the fsm_lowerup() call and it hasn't happened yet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   447  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   448  	f->flags &= ~DELAYED_UP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   449  	lcp_finished(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   450      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   451  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   452  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   453  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   454  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   455   * lcp_lowerup - The lower layer is up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   456   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   457  void lcp_lowerup(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   458      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   459      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   460      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   461       * Don't use A/C or protocol compression on transmission,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   462       * but accept A/C and protocol compressed packets
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   463       * if we are going to ask for A/C and protocol compression.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   464       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   465      if (ppp_send_config(pcb, PPP_MRU, 0xffffffff, 0, 0) < 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   466  	|| ppp_recv_config(pcb, PPP_MRU, (pcb->settings.lax_recv? 0: 0xffffffff),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   467  			   wo->neg_pcompression, wo->neg_accompression) < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   468  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   469      pcb->peer_mru = PPP_MRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   470  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   471      if (pcb->settings.listen_time != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   472  	f->flags |= DELAYED_UP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   473  	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   474      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   475  	fsm_lowerup(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   476  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   477  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   478  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   479  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   480   * lcp_lowerdown - The lower layer is down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   481   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   482  void lcp_lowerdown(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   483      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   484  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   485      if (f->flags & DELAYED_UP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   486  	f->flags &= ~DELAYED_UP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   487  	UNTIMEOUT(lcp_delayed_up, f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   488      } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   489  	fsm_lowerdown(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   490  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   491  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   492  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   493  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   494   * lcp_delayed_up - Bring the lower layer up now.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   495   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   496  static void lcp_delayed_up(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   497      fsm *f = (fsm*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   498  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   499      if (f->flags & DELAYED_UP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   500  	f->flags &= ~DELAYED_UP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   501  	fsm_lowerup(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   502      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   503  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   504  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   505  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   506  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   507   * lcp_input - Input LCP packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   508   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   509  static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   510      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   511  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   512      if (f->flags & DELAYED_UP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   513  	f->flags &= ~DELAYED_UP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   514  	UNTIMEOUT(lcp_delayed_up, f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   515  	fsm_lowerup(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   516      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   517      fsm_input(f, p, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   518  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   519  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   520  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   521   * lcp_extcode - Handle a LCP-specific code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   522   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   523  static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   524      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   525      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   526      u_char *magp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   527  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   528      switch( code ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   529      case PROTREJ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   530  	lcp_rprotrej(f, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   531  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   532      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   533      case ECHOREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   534  	if (f->state != PPP_FSM_OPENED)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   535  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   536  	magp = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   537  	PUTLONG(go->magicnumber, magp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   538  	fsm_sdata(f, ECHOREP, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   539  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   540      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   541      case ECHOREP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   542  	lcp_received_echo_reply(f, id, inp, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   543  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   544  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   545      case DISCREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   546      case IDENTIF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   547      case TIMEREM:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   548  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   549  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   550      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   551  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   552      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   553      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   554  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   555  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   556      
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   557  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   558   * lcp_rprotrej - Receive an Protocol-Reject.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   559   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   560   * Figure out which protocol is rejected and inform it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   561   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   562  static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   563      int i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   564      const struct protent *protp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   565      u_short prot;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   566  #if PPP_PROTOCOLNAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   567      const char *pname;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   568  #endif /* PPP_PROTOCOLNAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   569  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   570      if (len < 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   571  	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   572  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   573      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   574  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   575      GETSHORT(prot, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   576  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   577      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   578       * Protocol-Reject packets received in any state other than the LCP
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   579       * OPENED state SHOULD be silently discarded.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   580       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   581      if( f->state != PPP_FSM_OPENED ){
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   582  	LCPDEBUG(("Protocol-Reject discarded: LCP in state %d", f->state));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   583  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   584      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   585  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   586  #if PPP_PROTOCOLNAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   587      pname = protocol_name(prot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   588  #endif /* PPP_PROTOCOLNAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   589  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   590      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   591       * Upcall the proper Protocol-Reject routine.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   592       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   593      for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   594  	if (protp->protocol == prot) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   595  #if PPP_PROTOCOLNAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   596  	    if (pname != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   597  		ppp_dbglog("Protocol-Reject for '%s' (0x%x) received", pname,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   598  		       prot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   599  	    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   600  #endif /* PPP_PROTOCOLNAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   601  		ppp_dbglog("Protocol-Reject for 0x%x received", prot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   602  	    (*protp->protrej)(f->pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   603  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   604  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   605  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   606  #if PPP_PROTOCOLNAME
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   607      if (pname != NULL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   608  	ppp_warn("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   609  	     prot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   610      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   611  #endif /* #if PPP_PROTOCOLNAME */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   612  	ppp_warn("Protocol-Reject for unsupported protocol 0x%x", prot);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   613  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   614  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   615  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   616  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   617   * lcp_protrej - A Protocol-Reject was received.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   618   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   619  /*ARGSUSED*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   620  static void lcp_protrej(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   621      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   622       * Can't reject LCP!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   623       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   624      ppp_error("Received Protocol-Reject for LCP!");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   625      fsm_protreject(&pcb->lcp_fsm);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   626  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   627  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   628  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   629  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   630   * lcp_sprotrej - Send a Protocol-Reject for some protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   631   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   632  void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   633      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   634      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   635       * Send back the protocol and the information field of the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   636       * rejected packet.  We only get here if LCP is in the OPENED state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   637       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   638  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   639      p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   640      len -= 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   641  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   642  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   643      fsm_sdata(f, PROTREJ, ++f->id,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   644  	      p, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   645  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   646  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   647  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   648  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   649   * lcp_resetci - Reset our CI.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   650   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   651  static void lcp_resetci(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   652      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   653      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   654      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   655      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   656  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   657  #if PPP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   658  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   659      /* note: default value is true for allow options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   660      if (pcb->settings.user && pcb->settings.passwd) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   661  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   662        if (pcb->settings.refuse_pap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   663          ao->neg_upap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   664        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   665  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   666  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   667        if (pcb->settings.refuse_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   668          ao->chap_mdtype &= ~MDTYPE_MD5;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   669        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   670  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   671        if (pcb->settings.refuse_mschap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   672          ao->chap_mdtype &= ~MDTYPE_MICROSOFT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   673        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   674        if (pcb->settings.refuse_mschap_v2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   675          ao->chap_mdtype &= ~MDTYPE_MICROSOFT_V2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   676        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   677  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   678        ao->neg_chap = (ao->chap_mdtype != MDTYPE_NONE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   679  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   680  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   681        if (pcb->settings.refuse_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   682          ao->neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   683        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   684  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   685  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   686  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   687        /* note: default value is false for wanted options */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   688        if (pcb->settings.auth_required) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   689  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   690          if (!pcb->settings.refuse_pap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   691            wo->neg_upap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   692          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   693  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   694  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   695          if (!pcb->settings.refuse_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   696            wo->chap_mdtype |= MDTYPE_MD5;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   697          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   698  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   699          if (!pcb->settings.refuse_mschap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   700            wo->chap_mdtype |= MDTYPE_MICROSOFT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   701          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   702          if (!pcb->settings.refuse_mschap_v2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   703            wo->chap_mdtype |= MDTYPE_MICROSOFT_V2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   704          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   705  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   706          wo->neg_chap = (wo->chap_mdtype != MDTYPE_NONE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   707  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   708  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   709          if (!pcb->settings.refuse_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   710            wo->neg_eap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   711          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   712  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   713        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   714  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   715  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   716      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   717  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   718        ao->neg_upap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   719  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   720  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   721        ao->neg_chap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   722        ao->chap_mdtype = MDTYPE_NONE;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   723  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   724  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   725        ao->neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   726  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   727      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   728  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   729      PPPDEBUG(LOG_DEBUG, ("ppp: auth protocols:"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   730  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   731      PPPDEBUG(LOG_DEBUG, (" PAP=%d", ao->neg_upap));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   732  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   733  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   734      PPPDEBUG(LOG_DEBUG, (" CHAP=%d CHAP_MD5=%d", ao->neg_chap, !!(ao->chap_mdtype&MDTYPE_MD5)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   735  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   736      PPPDEBUG(LOG_DEBUG, (" CHAP_MS=%d CHAP_MS2=%d", !!(ao->chap_mdtype&MDTYPE_MICROSOFT), !!(ao->chap_mdtype&MDTYPE_MICROSOFT_V2)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   737  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   738  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   739  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   740      PPPDEBUG(LOG_DEBUG, (" EAP=%d", ao->neg_eap));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   741  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   742      PPPDEBUG(LOG_DEBUG, ("\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   743  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   744  #endif /* PPP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   745  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   746      wo->magicnumber = magic();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   747      wo->numloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   748      *go = *wo;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   749  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   750      if (!multilink) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   751  	go->neg_mrru = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   752  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   753  	go->neg_ssnhf = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   754  	go->neg_endpoint = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   755  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   756      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   757  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   758      if (pcb->settings.noendpoint)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   759  	ao->neg_endpoint = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   760      pcb->peer_mru = PPP_MRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   761  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   762      auth_reset(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   763  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   764  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   765  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   766  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   767  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   768   * lcp_cilen - Return length of our CI.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   769   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   770  static int lcp_cilen(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   771      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   772      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   773  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   774  #define LENCIVOID(neg)	((neg) ? CILEN_VOID : 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   775  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   776  #define LENCICHAP(neg)	((neg) ? CILEN_CHAP : 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   777  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   778  #define LENCISHORT(neg)	((neg) ? CILEN_SHORT : 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   779  #define LENCILONG(neg)	((neg) ? CILEN_LONG : 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   780  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   781  #define LENCILQR(neg)	((neg) ? CILEN_LQR: 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   782  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   783  #define LENCICBCP(neg)	((neg) ? CILEN_CBCP: 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   784      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   785       * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   786       * accept more than one.  We prefer EAP first, then CHAP, then
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   787       * PAP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   788       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   789      return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   790  	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   791  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   792  	    LENCISHORT(go->neg_eap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   793  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   794  #if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   795  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   796  	    LENCICHAP(!go->neg_eap && go->neg_chap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   797  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   798  #if !EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   799  	    LENCICHAP(go->neg_chap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   800  #endif /* !EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   801  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   802  #if PAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   803  #if EAP_SUPPORT && CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   804  	    LENCISHORT(!go->neg_eap && !go->neg_chap && go->neg_upap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   805  #endif /* EAP_SUPPORT && CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   806  #if EAP_SUPPORT && !CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   807  	    LENCISHORT(!go->neg_eap && go->neg_upap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   808  #endif /* EAP_SUPPORT && !CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   809  #if !EAP_SUPPORT && CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   810  	    LENCISHORT(!go->neg_chap && go->neg_upap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   811  #endif /* !EAP_SUPPORT && CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   812  #if !EAP_SUPPORT && !CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   813  	    LENCISHORT(go->neg_upap) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   814  #endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   815  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   816  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   817  	    LENCILQR(go->neg_lqr) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   818  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   819  	    LENCICBCP(go->neg_cbcp) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   820  	    LENCILONG(go->neg_magicnumber) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   821  	    LENCIVOID(go->neg_pcompression) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   822  	    LENCIVOID(go->neg_accompression) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   823  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   824  	    LENCISHORT(go->neg_mrru) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   825  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   826  	    LENCIVOID(go->neg_ssnhf) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   827  	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   828  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   829  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   830  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   831  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   832   * lcp_addci - Add our desired CIs to a packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   833   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   834  static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   835      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   836      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   837      u_char *start_ucp = ucp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   838  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   839  #define ADDCIVOID(opt, neg) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   840      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   841  	PUTCHAR(opt, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   842  	PUTCHAR(CILEN_VOID, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   843      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   844  #define ADDCISHORT(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   845      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   846  	PUTCHAR(opt, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   847  	PUTCHAR(CILEN_SHORT, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   848  	PUTSHORT(val, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   849      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   850  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   851  #define ADDCICHAP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   852      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   853  	PUTCHAR((opt), ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   854  	PUTCHAR(CILEN_CHAP, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   855  	PUTSHORT(PPP_CHAP, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   856  	PUTCHAR((CHAP_DIGEST(val)), ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   857      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   858  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   859  #define ADDCILONG(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   860      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   861  	PUTCHAR(opt, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   862  	PUTCHAR(CILEN_LONG, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   863  	PUTLONG(val, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   864      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   865  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   866  #define ADDCILQR(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   867      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   868  	PUTCHAR(opt, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   869  	PUTCHAR(CILEN_LQR, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   870  	PUTSHORT(PPP_LQR, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   871  	PUTLONG(val, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   872      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   873  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   874  #define ADDCICHAR(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   875      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   876  	PUTCHAR(opt, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   877  	PUTCHAR(CILEN_CHAR, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   878  	PUTCHAR(val, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   879      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   880  #define ADDCIENDP(opt, neg, class, val, len) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   881      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   882  	int i; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   883  	PUTCHAR(opt, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   884  	PUTCHAR(CILEN_CHAR + len, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   885  	PUTCHAR(class, ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   886  	for (i = 0; i < len; ++i) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   887  	    PUTCHAR(val[i], ucp); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   888      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   889  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   890      ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   891      ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   892  	      go->asyncmap);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   893  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   894      ADDCISHORT(CI_AUTHTYPE, go->neg_eap, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   895  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   896  #if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   897  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   898      ADDCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   899  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   900  #if !EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   901      ADDCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   902  #endif /* !EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   903  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   904  #if PAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   905  #if EAP_SUPPORT && CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   906      ADDCISHORT(CI_AUTHTYPE, !go->neg_eap && !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   907  #endif /* EAP_SUPPORT && CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   908  #if EAP_SUPPORT && !CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   909      ADDCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   910  #endif /* EAP_SUPPORT && !CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   911  #if !EAP_SUPPORT && CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   912      ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   913  #endif /* !EAP_SUPPORT && CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   914  #if !EAP_SUPPORT && !CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   915      ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   916  #endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   917  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   918  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   919      ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   920  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   921      ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   922      ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   923      ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   924      ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   925  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   926      ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   927  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   928      ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   929      ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   930  	      go->endpoint.value, go->endpoint.length);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   931  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   932      if (ucp - start_ucp != *lenp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   933  	/* this should never happen, because peer_mtu should be 1500 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   934  	ppp_error("Bug in lcp_addci: wrong length");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   935      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   936  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   937  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   938  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   939  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   940   * lcp_ackci - Ack our CIs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   941   * This should not modify any state if the Ack is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   942   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   943   * Returns:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   944   *	0 - Ack was bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   945   *	1 - Ack was good.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   946   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   947  static int lcp_ackci(fsm *f, u_char *p, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   948      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   949      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   950      u_char cilen, citype, cichar;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   951      u_short cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   952      u32_t cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   953  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   954      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   955       * CIs must be in exactly the same order that we sent.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   956       * Check packet length and CI length at each step.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   957       * If we find any deviations, then this packet is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   958       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   959  #define ACKCIVOID(opt, neg) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   960      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   961  	if ((len -= CILEN_VOID) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   962  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   963  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   964  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   965  	if (cilen != CILEN_VOID || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   966  	    citype != opt) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   967  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   968      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   969  #define ACKCISHORT(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   970      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   971  	if ((len -= CILEN_SHORT) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   972  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   973  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   974  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   975  	if (cilen != CILEN_SHORT || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   976  	    citype != opt) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   977  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   978  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   979  	if (cishort != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   980  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   981      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   982  #define ACKCICHAR(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   983      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   984  	if ((len -= CILEN_CHAR) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   985  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   986  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   987  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   988  	if (cilen != CILEN_CHAR || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   989  	    citype != opt) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   990  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   991  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   992  	if (cichar != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   993  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   994      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   995  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   996  #define ACKCICHAP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   997      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   998  	if ((len -= CILEN_CHAP) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	   999  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1000  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1001  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1002  	if (cilen != CILEN_CHAP || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1003  	    citype != (opt)) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1004  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1005  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1006  	if (cishort != PPP_CHAP) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1007  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1008  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1009  	if (cichar != (CHAP_DIGEST(val))) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1010  	  goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1011      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1012  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1013  #define ACKCILONG(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1014      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1015  	if ((len -= CILEN_LONG) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1016  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1017  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1018  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1019  	if (cilen != CILEN_LONG || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1020  	    citype != opt) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1021  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1022  	GETLONG(cilong, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1023  	if (cilong != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1024  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1025      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1026  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1027  #define ACKCILQR(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1028      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1029  	if ((len -= CILEN_LQR) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1030  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1031  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1032  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1033  	if (cilen != CILEN_LQR || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1034  	    citype != opt) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1035  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1036  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1037  	if (cishort != PPP_LQR) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1038  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1039  	GETLONG(cilong, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1040  	if (cilong != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1041  	  goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1042      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1043  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1044  #define ACKCIENDP(opt, neg, class, val, vlen) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1045      if (neg) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1046  	int i; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1047  	if ((len -= CILEN_CHAR + vlen) < 0) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1048  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1049  	GETCHAR(citype, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1050  	GETCHAR(cilen, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1051  	if (cilen != CILEN_CHAR + vlen || \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1052  	    citype != opt) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1053  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1054  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1055  	if (cichar != class) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1056  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1057  	for (i = 0; i < vlen; ++i) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1058  	    GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1059  	    if (cichar != val[i]) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1060  		goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1061  	} \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1062      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1063  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1064      ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1065      ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1066  	      go->asyncmap);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1067  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1068      ACKCISHORT(CI_AUTHTYPE, go->neg_eap, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1069  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1070  #if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1071  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1072      ACKCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1073  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1074  #if !EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1075      ACKCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1076  #endif /* !EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1077  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1078  #if PAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1079  #if EAP_SUPPORT && CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1080      ACKCISHORT(CI_AUTHTYPE, !go->neg_eap && !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1081  #endif /* EAP_SUPPORT && CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1082  #if EAP_SUPPORT && !CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1083      ACKCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1084  #endif /* EAP_SUPPORT && !CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1085  #if !EAP_SUPPORT && CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1086      ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1087  #endif /* !EAP_SUPPORT && CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1088  #if !EAP_SUPPORT && !CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1089      ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1090  #endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1091  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1092  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1093      ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1094  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1095      ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1096      ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1097      ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1098      ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1099  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1100      ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1101  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1102      ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1103      ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1104  	      go->endpoint.value, go->endpoint.length);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1105  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1106      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1107       * If there are any remaining CIs, then this packet is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1108       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1109      if (len != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1110  	goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1111      return (1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1112  bad:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1113      LCPDEBUG(("lcp_acki: received bad Ack!"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1114      return (0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1115  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1116  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1117  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1118  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1119   * lcp_nakci - Peer has sent a NAK for some of our CIs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1120   * This should not modify any state if the Nak is bad
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1121   * or if LCP is in the OPENED state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1122   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1123   * Returns:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1124   *	0 - Nak was bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1125   *	1 - Nak was good.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1126   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1127  static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1128      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1129      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1130      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1131      u_char citype, cichar, *next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1132      u_short cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1133      u32_t cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1134      lcp_options no;		/* options we've seen Naks for */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1135      lcp_options try_;		/* options to request next time */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1136      int looped_back = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1137      int cilen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1138  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1139      BZERO(&no, sizeof(no));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1140      try_ = *go;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1141  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1142      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1143       * Any Nak'd CIs must be in exactly the same order that we sent.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1144       * Check packet length and CI length at each step.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1145       * If we find any deviations, then this packet is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1146       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1147  #define NAKCIVOID(opt, neg) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1148      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1149  	len >= CILEN_VOID && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1150  	p[1] == CILEN_VOID && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1151  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1152  	len -= CILEN_VOID; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1153  	INCPTR(CILEN_VOID, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1154  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1155  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1156      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1157  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1158  #define NAKCICHAP(opt, neg, code) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1159      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1160  	len >= CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1161  	p[1] == CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1162  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1163  	len -= CILEN_CHAP; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1164  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1165  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1166  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1167  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1168  	code \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1169      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1170  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1171  #define NAKCICHAR(opt, neg, code) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1172      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1173  	len >= CILEN_CHAR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1174  	p[1] == CILEN_CHAR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1175  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1176  	len -= CILEN_CHAR; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1177  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1178  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1179  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1180  	code \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1181      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1182  #define NAKCISHORT(opt, neg, code) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1183      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1184  	len >= CILEN_SHORT && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1185  	p[1] == CILEN_SHORT && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1186  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1187  	len -= CILEN_SHORT; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1188  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1189  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1190  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1191  	code \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1192      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1193  #define NAKCILONG(opt, neg, code) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1194      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1195  	len >= CILEN_LONG && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1196  	p[1] == CILEN_LONG && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1197  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1198  	len -= CILEN_LONG; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1199  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1200  	GETLONG(cilong, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1201  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1202  	code \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1203      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1204  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1205  #define NAKCILQR(opt, neg, code) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1206      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1207  	len >= CILEN_LQR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1208  	p[1] == CILEN_LQR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1209  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1210  	len -= CILEN_LQR; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1211  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1212  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1213  	GETLONG(cilong, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1214  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1215  	code \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1216      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1217  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1218  #define NAKCIENDP(opt, neg) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1219      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1220  	len >= CILEN_CHAR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1221  	p[0] == opt && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1222  	p[1] >= CILEN_CHAR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1223  	p[1] <= len) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1224  	len -= p[1]; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1225  	INCPTR(p[1], p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1226  	no.neg = 1; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1227  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1228      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1229  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1230      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1231       * NOTE!  There must be no assignments to individual fields of *go in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1232       * the code below.  Any such assignment is a BUG!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1233       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1234      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1235       * We don't care if they want to send us smaller packets than
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1236       * we want.  Therefore, accept any MRU less than what we asked for,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1237       * but then ignore the new value when setting the MRU in the kernel.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1238       * If they send us a bigger MRU than what we asked, accept it, up to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1239       * the limit of the default MRU we'd get if we didn't negotiate.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1240       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1241      if (go->neg_mru && go->mru != PPP_DEFMRU) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1242  	NAKCISHORT(CI_MRU, neg_mru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1243  		   if (cishort <= wo->mru || cishort <= PPP_DEFMRU)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1244  		       try_.mru = cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1245  		   );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1246      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1247  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1248      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1249       * Add any characters they want to our (receive-side) asyncmap.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1250       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1251      if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1252  	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1253  		  try_.asyncmap = go->asyncmap | cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1254  		  );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1255      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1256  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1257      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1258       * If they've nak'd our authentication-protocol, check whether
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1259       * they are proposing a different protocol, or a different
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1260       * hash algorithm for CHAP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1261       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1262      if ((0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1263  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1264          || go->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1265  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1266  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1267          || go->neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1268  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1269  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1270          || go->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1271  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1272          )
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1273  	&& len >= CILEN_SHORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1274  	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1275  	cilen = p[1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1276  	len -= cilen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1277  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1278  	no.neg_chap = go->neg_chap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1279  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1280  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1281  	no.neg_upap = go->neg_upap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1282  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1283  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1284  	no.neg_eap = go->neg_eap;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1285  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1286  	INCPTR(2, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1287  	GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1288  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1289  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1290  	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1291  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1292  	    /* If we were asking for EAP, then we need to stop that. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1293  	    if (go->neg_eap)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1294  		try_.neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1295  	    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1296  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1297  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1298  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1299  	    /* If we were asking for CHAP, then we need to stop that. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1300  	    if (go->neg_chap)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1301  		try_.neg_chap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1302  	    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1303  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1304  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1305  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1306  	     * If we weren't asking for CHAP or EAP, then we were asking for
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1307  	     * PAP, in which case this Nak is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1308  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1309  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1310  	} else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1311  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1312  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1313  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1314  	if (cishort == PPP_CHAP && cilen == CILEN_CHAP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1315  	    GETCHAR(cichar, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1316  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1317  	    /* Stop asking for EAP, if we were. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1318  	    if (go->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1319  		try_.neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1320  		/* Try to set up to use their suggestion, if possible */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1321  		if (CHAP_CANDIGEST(go->chap_mdtype, cichar))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1322  		    try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1323  	    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1324  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1325  	    if (go->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1326  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1327  		 * We were asking for our preferred algorithm, they must
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1328  		 * want something different.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1329  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1330  		if (cichar != CHAP_DIGEST(go->chap_mdtype)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1331  		    if (CHAP_CANDIGEST(go->chap_mdtype, cichar)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1332  			/* Use their suggestion if we support it ... */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1333  			try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1334  		    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1335  			/* ... otherwise, try our next-preferred algorithm. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1336  			try_.chap_mdtype &= ~(CHAP_MDTYPE(try_.chap_mdtype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1337  			if (try_.chap_mdtype == MDTYPE_NONE) /* out of algos */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1338  			    try_.neg_chap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1339  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1340  		} else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1341  		    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1342  		     * Whoops, they Nak'd our algorithm of choice
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1343  		     * but then suggested it back to us.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1344  		     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1345  		    goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1346  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1347  	    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1348  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1349  		 * Stop asking for PAP if we were asking for it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1350  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1351  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1352  		try_.neg_upap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1353  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1354  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1355  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1356  	} else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1357  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1358  	{
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1359  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1360  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1361  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1362  	     * If we were asking for EAP, and they're Conf-Naking EAP,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1363  	     * well, that's just strange.  Nobody should do that.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1364  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1365  	    if (cishort == PPP_EAP && cilen == CILEN_SHORT && go->neg_eap)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1366  		ppp_dbglog("Unexpected Conf-Nak for EAP");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1367  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1368  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1369  	     * We don't recognize what they're suggesting.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1370  	     * Stop asking for what we were asking for.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1371  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1372  	    if (go->neg_eap)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1373  		try_.neg_eap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1374  	    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1375  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1376  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1377  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1378  	    if (go->neg_chap)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1379  		try_.neg_chap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1380  	    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1381  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1383  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1384  	    if(1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1385  		try_.neg_upap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1386  	    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1387  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1388  	    {}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1389  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1390  	    p += cilen - CILEN_SHORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1391  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1392      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1393  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1394  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1395      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1396       * If they can't cope with our link quality protocol, we'll have
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1397       * to stop asking for LQR.  We haven't got any other protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1398       * If they Nak the reporting period, take their value XXX ?
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1399       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1400      NAKCILQR(CI_QUALITY, neg_lqr,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1401  	     if (cishort != PPP_LQR)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1402  		 try_.neg_lqr = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1403  	     else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1404  		 try_.lqr_period = cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1405  	     );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1406  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1407  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1408      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1409       * Only implementing CBCP...not the rest of the callback options
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1410       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1411      NAKCICHAR(CI_CALLBACK, neg_cbcp,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1412                try_.neg_cbcp = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1413                (void)cichar; /* if CHAP support is not compiled, cichar is set but not used, which makes some compilers complaining */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1414                );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1415  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1416      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1417       * Check for a looped-back line.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1418       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1419      NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1420  	      try_.magicnumber = magic();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1421  	      looped_back = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1422  	      );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1423  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1424      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1425       * Peer shouldn't send Nak for protocol compression or
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1426       * address/control compression requests; they should send
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1427       * a Reject instead.  If they send a Nak, treat it as a Reject.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1428       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1429      NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1430      NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1431  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1432  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1433      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1434       * Nak for MRRU option - accept their value if it is smaller
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1435       * than the one we want.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1436       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1437      if (go->neg_mrru) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1438  	NAKCISHORT(CI_MRRU, neg_mrru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1439  		   if (treat_as_reject)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1440  		       try_.neg_mrru = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1441  		   else if (cishort <= wo->mrru)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1442  		       try_.mrru = cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1443  		   );
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1444      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1445  #else /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1446      LWIP_UNUSED_ARG(treat_as_reject);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1447  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1448  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1449      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1450       * Nak for short sequence numbers shouldn't be sent, treat it
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1451       * like a reject.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1452       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1453      NAKCIVOID(CI_SSNHF, neg_ssnhf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1455      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1456       * Nak of the endpoint discriminator option is not permitted,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1457       * treat it like a reject.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1458       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1459      NAKCIENDP(CI_EPDISC, neg_endpoint);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1460  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1461      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1462       * There may be remaining CIs, if the peer is requesting negotiation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1463       * on an option that we didn't include in our request packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1464       * If we see an option that we requested, or one we've already seen
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1465       * in this packet, then this packet is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1466       * If we wanted to respond by starting to negotiate on the requested
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1467       * option(s), we could, but we don't, because except for the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1468       * authentication type and quality protocol, if we are not negotiating
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1469       * an option, it is because we were told not to.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1470       * For the authentication type, the Nak from the peer means
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1471       * `let me authenticate myself with you' which is a bit pointless.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1472       * For the quality protocol, the Nak means `ask me to send you quality
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1473       * reports', but if we didn't ask for them, we don't want them.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1474       * An option we don't recognize represents the peer asking to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1475       * negotiate some option we don't support, so ignore it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1476       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1477      while (len >= CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1478  	GETCHAR(citype, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1479  	GETCHAR(cilen, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1480  	if (cilen < CILEN_VOID || (len -= cilen) < 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1481  	    goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1482  	next = p + cilen - 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1483  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1484  	switch (citype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1485  	case CI_MRU:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1486  	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1487  		|| no.neg_mru || cilen != CILEN_SHORT)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1488  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1489  	    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1490  	    if (cishort < PPP_DEFMRU) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1491  		try_.neg_mru = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1492  		try_.mru = cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1493  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1494  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1495  	case CI_ASYNCMAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1496  	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1497  		|| no.neg_asyncmap || cilen != CILEN_LONG)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1498  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1499  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1500  	case CI_AUTHTYPE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1501  	    if (0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1502  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1503                  || go->neg_chap || no.neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1504  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1505  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1506                  || go->neg_upap || no.neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1507  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1508  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1509  		|| go->neg_eap || no.neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1510  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1511  		)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1512  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1513  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1514  	case CI_MAGICNUMBER:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1515  	    if (go->neg_magicnumber || no.neg_magicnumber ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1516  		cilen != CILEN_LONG)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1517  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1518  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1519  	case CI_PCOMPRESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1520  	    if (go->neg_pcompression || no.neg_pcompression
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1521  		|| cilen != CILEN_VOID)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1522  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1523  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1524  	case CI_ACCOMPRESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1525  	    if (go->neg_accompression || no.neg_accompression
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1526  		|| cilen != CILEN_VOID)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1527  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1528  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1529  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1530  	case CI_QUALITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1531  	    if (go->neg_lqr || no.neg_lqr || cilen != CILEN_LQR)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1532  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1533  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1534  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1535  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1536  	case CI_MRRU:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1537  	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1538  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1539  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1540  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1541  	case CI_SSNHF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1542  	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1543  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1544  	    try_.neg_ssnhf = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1545  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1546  	case CI_EPDISC:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1547  	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1548  		goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1549  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1550  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1551  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1552  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1553  	p = next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1554      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1555  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1556      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1557       * OK, the Nak is good.  Now we can update state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1558       * If there are any options left we ignore them.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1559       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1560      if (f->state != PPP_FSM_OPENED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1561  	if (looped_back) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1562  	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1563  		ppp_notice("Serial line is looped back.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1564  		pcb->err_code = PPPERR_LOOPBACK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1565  		lcp_close(f->pcb, "Loopback detected");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1566  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1567  	} else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1568  	    try_.numloops = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1569  	*go = try_;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1570      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1571  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1572      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1573  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1574  bad:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1575      LCPDEBUG(("lcp_nakci: received bad Nak!"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1576      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1577  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1578  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1579  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1580  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1581   * lcp_rejci - Peer has Rejected some of our CIs.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1582   * This should not modify any state if the Reject is bad
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1583   * or if LCP is in the OPENED state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1584   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1585   * Returns:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1586   *	0 - Reject was bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1587   *	1 - Reject was good.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1588   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1589  static int lcp_rejci(fsm *f, u_char *p, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1590      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1591      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1592      u_char cichar;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1593      u_short cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1594      u32_t cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1595      lcp_options try_;		/* options to request next time */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1596  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1597      try_ = *go;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1598  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1599      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1600       * Any Rejected CIs must be in exactly the same order that we sent.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1601       * Check packet length and CI length at each step.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1602       * If we find any deviations, then this packet is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1603       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1604  #define REJCIVOID(opt, neg) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1605      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1606  	len >= CILEN_VOID && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1607  	p[1] == CILEN_VOID && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1608  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1609  	len -= CILEN_VOID; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1610  	INCPTR(CILEN_VOID, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1611  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1612      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1613  #define REJCISHORT(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1614      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1615  	len >= CILEN_SHORT && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1616  	p[1] == CILEN_SHORT && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1617  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1618  	len -= CILEN_SHORT; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1619  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1620  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1621  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1622  	if (cishort != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1623  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1624  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1625      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1626  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1627  #if CHAP_SUPPORT && EAP_SUPPORT && PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1628  #define REJCICHAP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1629      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1630  	len >= CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1631  	p[1] == CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1632  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1633  	len -= CILEN_CHAP; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1634  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1635  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1636  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1637  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1638  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1639  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1640  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1641  	try_.neg_eap = try_.neg_upap = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1642      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1643  #endif /* CHAP_SUPPORT && EAP_SUPPORT && PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1644  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1645  #if CHAP_SUPPORT && !EAP_SUPPORT && PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1646  #define REJCICHAP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1647      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1648  	len >= CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1649  	p[1] == CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1650  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1651  	len -= CILEN_CHAP; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1652  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1653  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1654  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1655  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1656  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1657  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1658  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1659  	try_.neg_upap = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1660      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1661  #endif /* CHAP_SUPPORT && !EAP_SUPPORT && PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1662  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1663  #if CHAP_SUPPORT && EAP_SUPPORT && !PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1664  #define REJCICHAP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1665      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1666  	len >= CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1667  	p[1] == CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1668  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1669  	len -= CILEN_CHAP; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1670  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1671  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1672  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1673  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1674  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1675  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1676  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1677  	try_.neg_eap = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1678      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1679  #endif /* CHAP_SUPPORT && EAP_SUPPORT && !PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1680  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1681  #if CHAP_SUPPORT && !EAP_SUPPORT && !PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1682  #define REJCICHAP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1683      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1684  	len >= CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1685  	p[1] == CILEN_CHAP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1686  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1687  	len -= CILEN_CHAP; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1688  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1689  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1690  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1691  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1692  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1693  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1694  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1695      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1696  #endif /* CHAP_SUPPORT && !EAP_SUPPORT && !PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1697  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1698  #define REJCILONG(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1699      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1700  	len >= CILEN_LONG && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1701  	p[1] == CILEN_LONG && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1702  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1703  	len -= CILEN_LONG; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1704  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1705  	GETLONG(cilong, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1706  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1707  	if (cilong != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1708  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1709  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1710      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1711  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1712  #define REJCILQR(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1713      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1714  	len >= CILEN_LQR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1715  	p[1] == CILEN_LQR && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1716  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1717  	len -= CILEN_LQR; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1718  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1719  	GETSHORT(cishort, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1720  	GETLONG(cilong, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1721  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1722  	if (cishort != PPP_LQR || cilong != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1723  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1724  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1725      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1726  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1727  #define REJCICBCP(opt, neg, val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1728      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1729  	len >= CILEN_CBCP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1730  	p[1] == CILEN_CBCP && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1731  	p[0] == opt) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1732  	len -= CILEN_CBCP; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1733  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1734  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1735  	/* Check rejected value. */ \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1736  	if (cichar != val) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1737  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1738  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1739      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1740  #define REJCIENDP(opt, neg, class, val, vlen) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1741      if (go->neg && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1742  	len >= CILEN_CHAR + vlen && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1743  	p[0] == opt && \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1744  	p[1] == CILEN_CHAR + vlen) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1745  	int i; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1746  	len -= CILEN_CHAR + vlen; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1747  	INCPTR(2, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1748  	GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1749  	if (cichar != class) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1750  	    goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1751  	for (i = 0; i < vlen; ++i) { \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1752  	    GETCHAR(cichar, p); \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1753  	    if (cichar != val[i]) \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1754  		goto bad; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1755  	} \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1756  	try_.neg = 0; \ 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1757      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1758  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1759      REJCISHORT(CI_MRU, neg_mru, go->mru);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1760      REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1761  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1762      REJCISHORT(CI_AUTHTYPE, neg_eap, PPP_EAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1763      if (!go->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1764  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1765  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1766  	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1767  	if (!go->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1768  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1769  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1770  	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1771  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1772  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1773  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1774  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1775  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1776      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1777  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1778  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1779      REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1780  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1781      REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1782      REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1783      REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1784      REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1785  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1786      REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1787  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1788      REJCIVOID(CI_SSNHF, neg_ssnhf);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1789      REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1790  	      go->endpoint.value, go->endpoint.length);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1791  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1792      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1793       * If there are any remaining CIs, then this packet is bad.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1794       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1795      if (len != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1796  	goto bad;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1797      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1798       * Now we can update state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1799       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1800      if (f->state != PPP_FSM_OPENED)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1801  	*go = try_;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1802      return 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1803  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1804  bad:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1805      LCPDEBUG(("lcp_rejci: received bad Reject!"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1806      return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1807  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1808  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1809  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1810  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1811   * lcp_reqci - Check the peer's requested CIs and send appropriate response.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1812   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1813   * Returns: CONFACK, CONFNAK or CONFREJ and input packet modified
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1814   * appropriately.  If reject_if_disagree is non-zero, doesn't return
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1815   * CONFNAK; returns CONFREJ if it can't return CONFACK.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1816   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1817   * inp = Requested CIs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1818   * lenp = Length of requested CIs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1819   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1820  static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1821      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1822      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1823      lcp_options *ho = &pcb->lcp_hisoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1824      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1825      u_char *cip, *next;		/* Pointer to current and next CIs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1826      int cilen, citype, cichar;	/* Parsed len, type, char value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1827      u_short cishort;		/* Parsed short value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1828      u32_t cilong;		/* Parse long value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1829      int rc = CONFACK;		/* Final packet return code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1830      int orc;			/* Individual option return code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1831      u_char *p;			/* Pointer to next char to parse */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1832      u_char *rejp;		/* Pointer to next char in reject frame */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1833      struct pbuf *nakp;          /* Nak buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1834      u_char *nakoutp;		/* Pointer to next char in Nak frame */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1835      int l = *lenp;		/* Length left */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1836  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1837      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1838       * Reset all his options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1839       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1840      BZERO(ho, sizeof(*ho));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1841  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1842      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1843       * Process all his options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1844       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1845      next = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1846      nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_MAX_SIZE), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1847      if(NULL == nakp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1848          return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1849      if(nakp->tot_len != nakp->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1850          pbuf_free(nakp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1851          return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1852      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1853  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1854      nakoutp = (u_char*)nakp->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1855      rejp = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1856      while (l) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1857  	orc = CONFACK;			/* Assume success */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1858  	cip = p = next;			/* Remember begining of CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1859  	if (l < 2 ||			/* Not enough data for CI header or */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1860  	    p[1] < 2 ||			/*  CI length too small or */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1861  	    p[1] > l) {			/*  CI length too big? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1862  	    LCPDEBUG(("lcp_reqci: bad CI length!"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1863  	    orc = CONFREJ;		/* Reject bad CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1864  	    cilen = l;			/* Reject till end of packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1865  	    l = 0;			/* Don't loop again */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1866  	    citype = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1867  	    goto endswitch;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1868  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1869  	GETCHAR(citype, p);		/* Parse CI type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1870  	GETCHAR(cilen, p);		/* Parse CI length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1871  	l -= cilen;			/* Adjust remaining length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1872  	next += cilen;			/* Step to next CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1873  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1874  	switch (citype) {		/* Check CI type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1875  	case CI_MRU:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1876  	    if (!ao->neg_mru ||		/* Allow option? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1877  		cilen != CILEN_SHORT) {	/* Check CI length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1878  		orc = CONFREJ;		/* Reject CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1879  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1880  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1881  	    GETSHORT(cishort, p);	/* Parse MRU */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1882  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1883  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1884  	     * He must be able to receive at least our minimum.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1885  	     * No need to check a maximum.  If he sends a large number,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1886  	     * we'll just ignore it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1887  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1888  	    if (cishort < PPP_MINMRU) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1889  		orc = CONFNAK;		/* Nak CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1890  		PUTCHAR(CI_MRU, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1891  		PUTCHAR(CILEN_SHORT, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1892  		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1893  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1894  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1895  	    ho->neg_mru = 1;		/* Remember he sent MRU */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1896  	    ho->mru = cishort;		/* And remember value */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1897  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1898  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1899  	case CI_ASYNCMAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1900  	    if (!ao->neg_asyncmap ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1901  		cilen != CILEN_LONG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1902  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1903  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1904  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1905  	    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1906  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1907  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1908  	     * Asyncmap must have set at least the bits
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1909  	     * which are set in lcp_allowoptions[unit].asyncmap.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1910  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1911  	    if ((ao->asyncmap & ~cilong) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1912  		orc = CONFNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1913  		PUTCHAR(CI_ASYNCMAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1914  		PUTCHAR(CILEN_LONG, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1915  		PUTLONG(ao->asyncmap | cilong, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1916  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1917  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1918  	    ho->neg_asyncmap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1919  	    ho->asyncmap = cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1920  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1921  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1922  	case CI_AUTHTYPE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1923  	    if (cilen < CILEN_SHORT ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1924  		!(0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1925  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1926  		|| ao->neg_upap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1927  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1928  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1929  		|| ao->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1930  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1931  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1932  		|| ao->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1933  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1934  		)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1935  		/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1936  		 * Reject the option if we're not willing to authenticate.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1937  		 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1938  		ppp_dbglog("No auth is possible");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1939  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1940  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1941  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1942  	    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1943  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1944  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1945  	     * Authtype must be PAP, CHAP, or EAP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1946  	     *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1947  	     * Note: if more than one of ao->neg_upap, ao->neg_chap, and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1948  	     * ao->neg_eap are set, and the peer sends a Configure-Request
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1949  	     * with two or more authenticate-protocol requests, then we will
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1950  	     * reject the second request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1951  	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1952  	     * the ordering of the CIs in the peer's Configure-Request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1953               */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1954  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1955  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1956  	    if (cishort == PPP_PAP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1957  		/* we've already accepted CHAP or EAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1958  		if (0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1959  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1960  		    || ho->neg_chap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1961  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1962  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1963  		    || ho->neg_eap
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1964  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1965  		    || cilen != CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1966  		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1967  		    orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1968  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1969  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1970  		if (!ao->neg_upap) {	/* we don't want to do PAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1971  		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1972  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1973  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1974  		    if (ao->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1975  			PUTCHAR(CILEN_SHORT, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1976  			PUTSHORT(PPP_EAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1977  		    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1978  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1979  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1980  			PUTCHAR(CILEN_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1981  			PUTSHORT(PPP_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1982  			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1983  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1984  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1985  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1986  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1987  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1988  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1989  		ho->neg_upap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1990  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1991  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1992  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1993  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1994  	    if (cishort == PPP_CHAP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1995  		/* we've already accepted PAP or EAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1996  		if (
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1997  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1998  		    ho->neg_upap ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  1999  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2000  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2001  		    ho->neg_eap ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2002  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2003  		    cilen != CILEN_CHAP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2004  		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE CHAP, rejecting..."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2005  		    orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2006  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2007  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2008  		if (!ao->neg_chap) {	/* we don't want to do CHAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2009  		    orc = CONFNAK;	/* NAK it and suggest EAP or PAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2010  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2011  		    PUTCHAR(CILEN_SHORT, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2012  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2013  		    if (ao->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2014  			PUTSHORT(PPP_EAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2015  		    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2016  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2017  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2018  		    if(1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2019  			PUTSHORT(PPP_PAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2020  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2021  		    else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2022  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2023  		    {}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2024  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2025  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2026  		GETCHAR(cichar, p);	/* get digest type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2027  		if (!(CHAP_CANDIGEST(ao->chap_mdtype, cichar))) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2028  		    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2029  		     * We can't/won't do the requested type,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2030  		     * suggest something else.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2031  		     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2032  		    orc = CONFNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2033  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2034  		    PUTCHAR(CILEN_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2035  		    PUTSHORT(PPP_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2036  		    PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2037  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2038  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2039  		ho->chap_mdtype = CHAP_MDTYPE_D(cichar); /* save md type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2040  		ho->neg_chap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2041  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2042  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2043  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2044  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2045  	    if (cishort == PPP_EAP) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2046  		/* we've already accepted CHAP or PAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2047  		if (
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2048  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2049  		    ho->neg_chap ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2050  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2051  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2052  		    ho->neg_upap ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2053  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2054  		    cilen != CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2055  		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE EAP, rejecting..."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2056  		    orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2057  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2058  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2059  		if (!ao->neg_eap) {	/* we don't want to do EAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2060  		    orc = CONFNAK;	/* NAK it and suggest CHAP or PAP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2061  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2062  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2063  		    if (ao->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2064  			PUTCHAR(CILEN_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2065  			PUTSHORT(PPP_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2066  			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2067  		    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2068  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2069  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2070  		    if(1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2071  			PUTCHAR(CILEN_SHORT, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2072  			PUTSHORT(PPP_PAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2073  		    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2074  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2075  		    {}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2076  		    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2077  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2078  		ho->neg_eap = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2079  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2080  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2081  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2082  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2083  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2084  	     * We don't recognize the protocol they're asking for.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2085  	     * Nak it with something we're willing to do.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2086  	     * (At this point we know ao->neg_upap || ao->neg_chap ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2087  	     * ao->neg_eap.)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2088  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2089  	    orc = CONFNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2090  	    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2091  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2092  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2093  	    if (ao->neg_eap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2094  		PUTCHAR(CILEN_SHORT, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2095  		PUTSHORT(PPP_EAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2096  	    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2097  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2098  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2099  	    if (ao->neg_chap) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2100  		PUTCHAR(CILEN_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2101  		PUTSHORT(PPP_CHAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2102  		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2103  	    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2104  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2105  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2106  	    if(1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2107  		PUTCHAR(CILEN_SHORT, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2108  		PUTSHORT(PPP_PAP, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2109  	    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2110  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2111  	    {}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2112  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2113  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2114  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2115  	case CI_QUALITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2116  	    if (!ao->neg_lqr ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2117  		cilen != CILEN_LQR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2118  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2119  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2120  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2121  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2122  	    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2123  	    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2124  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2125  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2126  	     * Check the protocol and the reporting period.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2127  	     * XXX When should we Nak this, and what with?
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2128  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2129  	    if (cishort != PPP_LQR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2130  		orc = CONFNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2131  		PUTCHAR(CI_QUALITY, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2132  		PUTCHAR(CILEN_LQR, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2133  		PUTSHORT(PPP_LQR, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2134  		PUTLONG(ao->lqr_period, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2135  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2136  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2137  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2138  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2140  	case CI_MAGICNUMBER:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2141  	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2142  		cilen != CILEN_LONG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2143  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2144  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2145  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2146  	    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2147  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2148  	    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2149  	     * He must have a different magic number.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2150  	     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2151  	    if (go->neg_magicnumber &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2152  		cilong == go->magicnumber) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2153  		cilong = magic();	/* Don't put magic() inside macro! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2154  		orc = CONFNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2155  		PUTCHAR(CI_MAGICNUMBER, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2156  		PUTCHAR(CILEN_LONG, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2157  		PUTLONG(cilong, nakoutp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2158  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2159  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2160  	    ho->neg_magicnumber = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2161  	    ho->magicnumber = cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2162  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2163  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2164  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2165  	case CI_PCOMPRESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2166  	    if (!ao->neg_pcompression ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2167  		cilen != CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2168  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2169  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2170  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2171  	    ho->neg_pcompression = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2172  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2173  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2174  	case CI_ACCOMPRESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2175  	    if (!ao->neg_accompression ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2176  		cilen != CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2177  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2178  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2179  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2180  	    ho->neg_accompression = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2181  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2182  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2183  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2184  	case CI_MRRU:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2185  	    if (!ao->neg_mrru
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2186  		|| !multilink
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2187  		|| cilen != CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2188  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2189  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2190  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2191  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2192  	    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2193  	    /* possibly should insist on a minimum/maximum MRRU here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2194  	    ho->neg_mrru = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2195  	    ho->mrru = cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2196  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2197  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2198  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2199  	case CI_SSNHF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2200  	    if (!ao->neg_ssnhf
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2201  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2202  		|| !multilink
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2203  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2204  		|| cilen != CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2205  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2206  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2207  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2208  	    ho->neg_ssnhf = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2209  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2210  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2211  	case CI_EPDISC:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2212  	    if (!ao->neg_endpoint ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2213  		cilen < CILEN_CHAR ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2214  		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2215  		orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2216  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2217  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2218  	    GETCHAR(cichar, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2219  	    cilen -= CILEN_CHAR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2220  	    ho->neg_endpoint = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2221  	    ho->endpoint.class_ = cichar;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2222  	    ho->endpoint.length = cilen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2223  	    MEMCPY(ho->endpoint.value, p, cilen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2224  	    INCPTR(cilen, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2225  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2226  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2227  	default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2228  	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2229  	    orc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2230  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2231  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2232  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2233  endswitch:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2234  	if (orc == CONFACK &&		/* Good CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2235  	    rc != CONFACK)		/*  but prior CI wasnt? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2236  	    continue;			/* Don't send this one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2237  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2238  	if (orc == CONFNAK) {		/* Nak this CI? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2239  	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2240  		&& citype != CI_MAGICNUMBER) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2241  		orc = CONFREJ;		/* Get tough if so */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2242  	    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2243  		if (rc == CONFREJ)	/* Rejecting prior CI? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2244  		    continue;		/* Don't send this one */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2245  		rc = CONFNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2246  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2247  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2248  	if (orc == CONFREJ) {		/* Reject this CI */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2249  	    rc = CONFREJ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2250  	    if (cip != rejp)		/* Need to move rejected CI? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2251  		MEMCPY(rejp, cip, cilen); /* Move it */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2252  	    INCPTR(cilen, rejp);	/* Update output pointer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2253  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2254      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2255  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2256      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2257       * If we wanted to send additional NAKs (for unsent CIs), the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2258       * code would go here.  The extra NAKs would go at *nakoutp.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2259       * At present there are no cases where we want to ask the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2260       * peer to negotiate an option.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2261       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2262  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2263      switch (rc) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2264      case CONFACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2265  	*lenp = next - inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2266  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2267      case CONFNAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2268  	/*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2269  	 * Copy the Nak'd options from the nak buffer to the caller's buffer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2270  	 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2271  	*lenp = nakoutp - (u_char*)nakp->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2272  	MEMCPY(inp, nakp->payload, *lenp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2273  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2274      case CONFREJ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2275  	*lenp = rejp - inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2276  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2277      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2278  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2279      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2280  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2281      pbuf_free(nakp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2282      LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2283      return (rc);			/* Return final code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2284  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2285  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2287  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2288   * lcp_up - LCP has come UP.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2289   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2290  static void lcp_up(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2291      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2292      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2293      lcp_options *ho = &pcb->lcp_hisoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2294      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2295      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2296      int mtu, mru;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2297  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2298      if (!go->neg_magicnumber)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2299  	go->magicnumber = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2300      if (!ho->neg_magicnumber)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2301  	ho->magicnumber = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2302  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2303      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2304       * Set our MTU to the smaller of the MTU we wanted and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2305       * the MRU our peer wanted.  If we negotiated an MRU,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2306       * set our MRU to the larger of value we wanted and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2307       * the value we got in the negotiation.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2308       * Note on the MTU: the link MTU can be the MRU the peer wanted,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2309       * the interface MTU is set to the lowest of that, the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2310       * MTU we want to use, and our link MRU.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2311       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2312      mtu = ho->neg_mru? ho->mru: PPP_MRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2313      mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_MRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2314  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2315      if (!(multilink && go->neg_mrru && ho->neg_mrru))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2316  #endif /* HAVE_MULTILINK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2317  	netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2318      ppp_send_config(pcb, mtu,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2319  		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2320  		    ho->neg_pcompression, ho->neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2321      ppp_recv_config(pcb, mru,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2322  		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2323  		    go->neg_pcompression, go->neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2324  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2325      if (ho->neg_mru)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2326  	pcb->peer_mru = ho->mru;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2327  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2328      lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2329  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2330      link_established(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2331  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2332  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2333  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2334  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2335   * lcp_down - LCP has gone DOWN.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2336   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2337   * Alert other protocols.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2338   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2339  static void lcp_down(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2340      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2341      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2342  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2343      lcp_echo_lowerdown(f->pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2344  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2345      link_down(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2346  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2347      ppp_send_config(pcb, PPP_MRU, 0xffffffff, 0, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2348      ppp_recv_config(pcb, PPP_MRU,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2349  		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2350  		    go->neg_pcompression, go->neg_accompression);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2351      pcb->peer_mru = PPP_MRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2352  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2353  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2355  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2356   * lcp_starting - LCP needs the lower layer up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2357   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2358  static void lcp_starting(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2359      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2360      link_required(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2361  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2362  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2363  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2364  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2365   * lcp_finished - LCP has finished with the lower layer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2366   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2367  static void lcp_finished(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2368      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2369      link_terminated(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2370  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2371  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2372  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2373  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2374  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2375   * lcp_printpkt - print the contents of an LCP packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2376   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2377  static const char* const lcp_codenames[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2378      "ConfReq", "ConfAck", "ConfNak", "ConfRej",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2379      "TermReq", "TermAck", "CodeRej", "ProtRej",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2380      "EchoReq", "EchoRep", "DiscReq", "Ident",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2381      "TimeRem"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2382  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2383  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2384  static int lcp_printpkt(const u_char *p, int plen,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2385  		void (*printer) (void *, const char *, ...), void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2386      int code, id, len, olen, i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2387      const u_char *pstart, *optend;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2388      u_short cishort;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2389      u32_t cilong;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2390  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2391      if (plen < HEADERLEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2392  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2393      pstart = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2394      GETCHAR(code, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2395      GETCHAR(id, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2396      GETSHORT(len, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2397      if (len < HEADERLEN || len > plen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2398  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2399  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2400     if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(lcp_codenames))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2401  	printer(arg, " %s", lcp_codenames[code-1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2402      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2403  	printer(arg, " code=0x%x", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2404      printer(arg, " id=0x%x", id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2405      len -= HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2406      switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2407      case CONFREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2408      case CONFACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2409      case CONFNAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2410      case CONFREJ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2411  	/* print option list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2412  	while (len >= 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2413  	    GETCHAR(code, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2414  	    GETCHAR(olen, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2415  	    p -= 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2416  	    if (olen < 2 || olen > len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2417  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2418  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2419  	    printer(arg, " <");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2420  	    len -= olen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2421  	    optend = p + olen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2422  	    switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2423  	    case CI_MRU:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2424  		if (olen == CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2425  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2426  		    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2427  		    printer(arg, "mru %d", cishort);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2428  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2429  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2430  	    case CI_ASYNCMAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2431  		if (olen == CILEN_LONG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2432  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2433  		    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2434  		    printer(arg, "asyncmap 0x%x", cilong);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2435  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2436  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2437  	    case CI_AUTHTYPE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2438  		if (olen >= CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2439  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2440  		    printer(arg, "auth ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2441  		    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2442  		    switch (cishort) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2443  #if PAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2444  		    case PPP_PAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2445  			printer(arg, "pap");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2446  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2447  #endif /* PAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2448  #if CHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2449  		    case PPP_CHAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2450  			printer(arg, "chap");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2451  			if (p < optend) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2452  			    switch (*p) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2453  			    case CHAP_MD5:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2454  				printer(arg, " MD5");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2455  				++p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2456  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2457  #if MSCHAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2458  			    case CHAP_MICROSOFT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2459  				printer(arg, " MS");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2460  				++p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2461  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2462  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2463  			    case CHAP_MICROSOFT_V2:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2464  				printer(arg, " MS-v2");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2465  				++p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2466  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2467  #endif /* MSCHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2468  			    default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2469  				break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2470  			    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2471  			}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2472  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2473  #endif /* CHAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2474  #if EAP_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2475  		    case PPP_EAP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2476  			printer(arg, "eap");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2477  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2478  #endif /* EAP_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2479  		    default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2480  			printer(arg, "0x%x", cishort);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2481  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2482  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2483  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2484  #if LQR_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2485  	    case CI_QUALITY:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2486  		if (olen >= CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2487  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2488  		    printer(arg, "quality ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2489  		    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2490  		    switch (cishort) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2491  		    case PPP_LQR:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2492  			printer(arg, "lqr");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2493  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2494  		    default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2495  			printer(arg, "0x%x", cishort);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2496  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2497  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2498  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2499  #endif /* LQR_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2500  	    case CI_CALLBACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2501  		if (olen >= CILEN_CHAR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2502  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2503  		    printer(arg, "callback ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2504  		    GETCHAR(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2505  		    switch (cishort) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2506  		    case CBCP_OPT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2507  			printer(arg, "CBCP");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2508  			break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2509  		    default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2510  			printer(arg, "0x%x", cishort);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2511  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2512  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2513  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2514  	    case CI_MAGICNUMBER:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2515  		if (olen == CILEN_LONG) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2516  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2517  		    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2518  		    printer(arg, "magic 0x%x", cilong);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2519  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2520  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2521  	    case CI_PCOMPRESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2522  		if (olen == CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2523  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2524  		    printer(arg, "pcomp");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2525  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2526  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2527  	    case CI_ACCOMPRESSION:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2528  		if (olen == CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2529  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2530  		    printer(arg, "accomp");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2531  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2532  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2533  	    case CI_MRRU:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2534  		if (olen == CILEN_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2535  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2536  		    GETSHORT(cishort, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2537  		    printer(arg, "mrru %d", cishort);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2538  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2539  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2540  	    case CI_SSNHF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2541  		if (olen == CILEN_VOID) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2542  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2543  		    printer(arg, "ssnhf");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2544  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2545  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2546  	    case CI_EPDISC:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2547  #ifdef HAVE_MULTILINK
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2548  		if (olen >= CILEN_CHAR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2549  		    struct epdisc epd;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2550  		    p += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2551  		    GETCHAR(epd.class, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2552  		    epd.length = olen - CILEN_CHAR;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2553  		    if (epd.length > MAX_ENDP_LEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2554  			epd.length = MAX_ENDP_LEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2555  		    if (epd.length > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2556  			MEMCPY(epd.value, p, epd.length);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2557  			p += epd.length;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2558  		    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2559  		    printer(arg, "endpoint [%s]", epdisc_to_str(&epd));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2560  		}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2561  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2562  		printer(arg, "endpoint");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2563  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2564  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2565  	    default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2566  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2567  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2568  	    while (p < optend) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2569  		GETCHAR(code, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2570  		printer(arg, " %.2x", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2571  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2572  	    printer(arg, ">");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2573  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2574  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2575  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2576      case TERMACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2577      case TERMREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2578  	if (len > 0 && *p >= ' ' && *p < 0x7f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2579  	    printer(arg, " ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2580  	    ppp_print_string(p, len, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2581  	    p += len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2582  	    len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2583  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2584  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2585  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2586      case ECHOREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2587      case ECHOREP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2588      case DISCREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2589  	if (len >= 4) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2590  	    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2591  	    printer(arg, " magic=0x%x", cilong);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2592  	    len -= 4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2593  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2594  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2595  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2596      case IDENTIF:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2597      case TIMEREM:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2598  	if (len >= 4) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2599  	    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2600  	    printer(arg, " magic=0x%x", cilong);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2601  	    len -= 4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2602  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2603  	if (code == TIMEREM) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2604  	    if (len < 4)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2605  		break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2606  	    GETLONG(cilong, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2607  	    printer(arg, " seconds=%u", cilong);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2608  	    len -= 4;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2609  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2610  	if (len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2611  	    printer(arg, " ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2612  	    ppp_print_string(p, len, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2613  	    p += len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2614  	    len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2615  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2616  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2617      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2618  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2619      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2620  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2621      /* print the rest of the bytes in the packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2622      for (i = 0; i < len && i < 32; ++i) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2623  	GETCHAR(code, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2624  	printer(arg, " %.2x", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2625      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2626      if (i < len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2627  	printer(arg, " ...");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2628  	p += len - i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2629      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2630  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2631      return p - pstart;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2632  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2633  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2634  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2635  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2636   * Time to shut down the link because there is nothing out there.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2637   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2638  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2639  static void LcpLinkFailure(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2640      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2641      if (f->state == PPP_FSM_OPENED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2642  	ppp_info("No response to %d echo-requests", pcb->lcp_echos_pending);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2643          ppp_notice("Serial link appears to be disconnected.");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2644  	pcb->err_code = PPPERR_PEERDEAD;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2645  	lcp_close(pcb, "Peer not responding");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2646      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2647  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2648  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2649  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2650   * Timer expired for the LCP echo requests from this process.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2651   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2652  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2653  static void LcpEchoCheck(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2654      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2655  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2656      LcpSendEchoRequest (f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2657      if (f->state != PPP_FSM_OPENED)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2658  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2659  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2660      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2661       * Start the timer for the next interval.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2662       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2663      if (pcb->lcp_echo_timer_running)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2664  	ppp_warn("assertion lcp_echo_timer_running==0 failed");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2665      TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2666      pcb->lcp_echo_timer_running = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2667  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2668  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2669  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2670   * LcpEchoTimeout - Timer expired on the LCP echo
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2671   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2672  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2673  static void LcpEchoTimeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2674      fsm *f = (fsm*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2675      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2676      if (pcb->lcp_echo_timer_running != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2677          pcb->lcp_echo_timer_running = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2678          LcpEchoCheck ((fsm *) arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2679      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2680  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2681  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2682  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2683   * LcpEchoReply - LCP has received a reply to the echo
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2684   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2685  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2686  static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2687      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2688      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2689      u32_t magic_val;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2690      LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2691  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2692      /* Check the magic number - don't count replies from ourselves. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2693      if (len < 4) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2694  	ppp_dbglog("lcp: received short Echo-Reply, length %d", len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2695  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2696      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2697      GETLONG(magic_val, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2698      if (go->neg_magicnumber
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2699  	&& magic_val == go->magicnumber) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2700  	ppp_warn("appear to have received our own echo-reply!");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2701  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2702      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2703  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2704      /* Reset the number of outstanding echo frames */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2705      pcb->lcp_echos_pending = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2706  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2707  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2708  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2709   * LcpSendEchoRequest - Send an echo request frame to the peer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2710   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2711  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2712  static void LcpSendEchoRequest(fsm *f) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2713      ppp_pcb *pcb = f->pcb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2714      lcp_options *go = &pcb->lcp_gotoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2715      u32_t lcp_magic;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2716      u_char pkt[4], *pktp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2717  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2718      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2719       * Detect the failure of the peer at this point.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2720       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2721      if (pcb->settings.lcp_echo_fails != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2722          if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2723              LcpLinkFailure(f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2724              pcb->lcp_echos_pending = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2725  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2726      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2727  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2728  #if PPP_LCP_ADAPTIVE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2729      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2730       * If adaptive echos have been enabled, only send the echo request if
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2731       * no traffic was received since the last one.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2732       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2733      if (pcb->settings.lcp_echo_adaptive) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2734  	static unsigned int last_pkts_in = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2735  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2736  #if PPP_STATS_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2737  	update_link_stats(f->unit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2738  	link_stats_valid = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2739  #endif /* PPP_STATS_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2740  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2741  	if (link_stats.pkts_in != last_pkts_in) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2742  	    last_pkts_in = link_stats.pkts_in;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2743  	    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2744  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2745      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2746  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2747  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2748      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2749       * Make and send the echo request frame.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2750       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2751      if (f->state == PPP_FSM_OPENED) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2752          lcp_magic = go->magicnumber;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2753  	pktp = pkt;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2754  	PUTLONG(lcp_magic, pktp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2755          fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2756  	++pcb->lcp_echos_pending;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2757      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2758  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2759  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2760  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2761   * lcp_echo_lowerup - Start the timer for the LCP frame
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2762   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2763  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2764  static void lcp_echo_lowerup(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2765      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2766  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2767      /* Clear the parameters for generating echo frames */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2768      pcb->lcp_echos_pending      = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2769      pcb->lcp_echo_number        = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2770      pcb->lcp_echo_timer_running = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2771    
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2772      /* If a timeout interval is specified then start the timer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2773      if (pcb->settings.lcp_echo_interval != 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2774          LcpEchoCheck (f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2775  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2776  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2777  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2778   * lcp_echo_lowerdown - Stop the timer for the LCP frame
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2779   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2780  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2781  static void lcp_echo_lowerdown(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2782      fsm *f = &pcb->lcp_fsm;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2783  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2784      if (pcb->lcp_echo_timer_running != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2785          UNTIMEOUT (LcpEchoTimeout, f);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2786          pcb->lcp_echo_timer_running = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2787      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2788  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2789  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\lcp.c	  2790  #endif /* PPP_SUPPORT */

	; Module end
