	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc11276a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.upap.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\upap.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\upap.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\upap.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\upap.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4547
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\upap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	168
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	170
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	193
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	193
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	240
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	277
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	193
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	193
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	240
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	376
	.byte	3
	.word	193
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	470
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	499
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	193
	.byte	8,4
	.word	277
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	604
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	613
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	240
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	604
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	686
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	193
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	193
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	613
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	613
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	928
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	193
	.byte	8,3
	.word	193
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1085
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1094
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	240
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1228
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	193
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	193
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	193
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1339
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	193
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	193
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	193
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	193
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	193
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	193
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	240
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	240
	.byte	8,1
	.word	193
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1793
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1793
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1802
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1878
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	686
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2014
	.byte	12
	.word	193
	.byte	3
	.word	2128
	.byte	12
	.word	193
	.byte	3
	.word	2138
	.byte	12
	.word	193
	.byte	3
	.word	2148
	.byte	12
	.word	1878
	.byte	3
	.word	2158
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	240
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	193
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	193
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	193
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	193
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	686
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2133
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2143
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2153
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2163
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2168
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	277
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	277
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	277
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2520
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	277
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2670
	.byte	12
	.word	2520
	.byte	3
	.word	2807
	.byte	12
	.word	2670
	.byte	3
	.word	2817
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	193
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	193
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	240
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2163
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2812
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2822
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2827
	.byte	12
	.word	193
	.byte	3
	.word	3112
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3117
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3117
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3122
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1878
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	193
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	193
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	193
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3286
	.byte	3
	.word	1802
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	277
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	193
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	193
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	240
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3431
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	470
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3436
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	277
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	193
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1878
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	193
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	193
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	193
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3431
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3651
	.byte	12
	.word	3436
	.byte	3
	.word	3821
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	240
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	470
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	240
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	240
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3117
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3826
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3831
	.byte	12
	.word	3651
	.byte	3
	.word	4055
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4060
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4065
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	240
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	470
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4165
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	240
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	240
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	470
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4262
	.byte	8,8
	.word	193
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	193
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	193
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4356
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4065
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4065
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4262
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4165
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4365
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	193
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\upap.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     1  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     2   * upap.c - User/Password Authentication Protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     4   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     5   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     7   * modification, are permitted provided that the following conditions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     8   * are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	     9   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    12   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    15   *    the documentation and/or other materials provided with the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    16   *    distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    17   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    18   * 3. The name "Carnegie Mellon University" must not be used to
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    19   *    endorse or promote products derived from this software without
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    20   *    prior written permission. For permission or any legal
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    21   *    details, please contact
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    22   *      Office of Technology Transfer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    23   *      Carnegie Mellon University
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    24   *      5000 Forbes Avenue
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    25   *      Pittsburgh, PA  15213-3890
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    26   *      (412) 268-4387, fax: (412) 268-7395
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    27   *      tech-transfer@andrew.cmu.edu
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    28   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    29   * 4. Redistributions of any form whatsoever must retain the following
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    30   *    acknowledgment:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    31   *    "This product includes software developed by Computing Services
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    32   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    33   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    34   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    35   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    36   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    37   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    38   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    39   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    40   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    41   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    42  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    43  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    44  #if PPP_SUPPORT && PAP_SUPPORT  /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    45  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    46  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    47   * @todo:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    48   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    49  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    50  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    51  #include <stdio.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    52  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    53  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    54  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    55  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    56  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    57  #include "netif/ppp/upap.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    58  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    59  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    60  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    61   * Command-line options.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    62   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    63  static option_t pap_option_list[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    64      { "hide-password", o_bool, &hide_password,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    65        "Don't output passwords to log", OPT_PRIO | 1 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    66      { "show-password", o_bool, &hide_password,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    67        "Show password string in debug log messages", OPT_PRIOSUB | 0 },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    68  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    69      { "pap-restart", o_int, &upap[0].us_timeouttime,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    70        "Set retransmit timeout for PAP", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    71      { "pap-max-authreq", o_int, &upap[0].us_maxtransmits,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    72        "Set max number of transmissions for auth-reqs", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    73      { "pap-timeout", o_int, &upap[0].us_reqtimeout,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    74        "Set time limit for peer PAP authentication", OPT_PRIO },
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    75  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    76      { NULL }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    77  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    78  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    79  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    80  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    81   * Protocol entry points.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    82   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    83  static void upap_init(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    84  static void upap_lowerup(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    85  static void upap_lowerdown(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    86  static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    87  static void upap_protrej(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    88  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    89  static int upap_printpkt(const u_char *p, int plen, void (*printer) (void *, const char *, ...), void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    90  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    91  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    92  const struct protent pap_protent = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    93      PPP_PAP,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    94      upap_init,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    95      upap_input,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    96      upap_protrej,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    97      upap_lowerup,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    98      upap_lowerdown,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	    99      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   100      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   101  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   102      upap_printpkt,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   103  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   104  #if PPP_DATAINPUT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   105      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   106  #endif /* PPP_DATAINPUT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   107  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   108      "PAP",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   109      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   110  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   111  #if PPP_OPTIONS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   112      pap_option_list,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   113      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   114  #endif /* PPP_OPTIONS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   115  #if DEMAND_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   116      NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   117      NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   118  #endif /* DEMAND_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   119  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   120  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   121  static void upap_timeout(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   122  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   123  static void upap_reqtimeout(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   124  static void upap_rauthreq(ppp_pcb *pcb, u_char *inp, int id, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   125  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   126  static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   127  static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   128  static void upap_sauthreq(ppp_pcb *pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   129  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   130  static void upap_sresp(ppp_pcb *pcb, u_char code, u_char id, const char *msg, int msglen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   131  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   132  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   133  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   134  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   135   * upap_init - Initialize a UPAP unit.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   136   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   137  static void upap_init(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   138      pcb->upap.us_user = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   139      pcb->upap.us_userlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   140      pcb->upap.us_passwd = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   141      pcb->upap.us_passwdlen = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   142      pcb->upap.us_clientstate = UPAPCS_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   143  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   144      pcb->upap.us_serverstate = UPAPSS_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   145  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   146      pcb->upap.us_id = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   147  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   148  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   149  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   150  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   151   * upap_authwithpeer - Authenticate us with our peer (start client).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   152   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   153   * Set new state and send authenticate's.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   154   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   155  void upap_authwithpeer(ppp_pcb *pcb, const char *user, const char *password) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   156  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   157      if(!user || !password)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   158          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   159  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   160      /* Save the username and password we're given */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   161      pcb->upap.us_user = user;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   162      pcb->upap.us_userlen = (u8_t)LWIP_MIN(strlen(user), 0xff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   163      pcb->upap.us_passwd = password;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   164      pcb->upap.us_passwdlen = (u8_t)LWIP_MIN(strlen(password), 0xff);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   165      pcb->upap.us_transmits = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   166  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   167      /* Lower layer up yet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   168      if (pcb->upap.us_clientstate == UPAPCS_INITIAL ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   169  	pcb->upap.us_clientstate == UPAPCS_PENDING) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   170  	pcb->upap.us_clientstate = UPAPCS_PENDING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   171  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   172      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   173  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   174      upap_sauthreq(pcb);		/* Start protocol */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   175  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   176  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   177  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   178  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   179   * upap_authpeer - Authenticate our peer (start server).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   180   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   181   * Set new state.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   182   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   183  void upap_authpeer(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   184  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   185      /* Lower layer up yet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   186      if (pcb->upap.us_serverstate == UPAPSS_INITIAL ||
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   187  	pcb->upap.us_serverstate == UPAPSS_PENDING) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   188  	pcb->upap.us_serverstate = UPAPSS_PENDING;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   189  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   190      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   191  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   192      pcb->upap.us_serverstate = UPAPSS_LISTEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   193      if (pcb->settings.pap_req_timeout > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   194  	TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   195  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   196  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   197  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   198  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   199   * upap_timeout - Retransmission timer for sending auth-reqs expired.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   200   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   201  static void upap_timeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   202      ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   203  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   204      if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   205  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   206  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   207      if (pcb->upap.us_transmits >= pcb->settings.pap_max_transmits) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   208  	/* give up in disgust */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   209  	ppp_error("No response to PAP authenticate-requests");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   210  	pcb->upap.us_clientstate = UPAPCS_BADAUTH;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   211  	auth_withpeer_fail(pcb, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   212  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   213      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   214  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   215      upap_sauthreq(pcb);		/* Send Authenticate-Request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   216  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   217  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   218  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   219  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   220  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   221   * upap_reqtimeout - Give up waiting for the peer to send an auth-req.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   222   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   223  static void upap_reqtimeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   224      ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   225  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   226      if (pcb->upap.us_serverstate != UPAPSS_LISTEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   227  	return;			/* huh?? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   228  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   229      auth_peer_fail(pcb, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   230      pcb->upap.us_serverstate = UPAPSS_BADAUTH;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   231  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   232  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   233  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   234  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   235  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   236   * upap_lowerup - The lower layer is up.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   237   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   238   * Start authenticating if pending.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   239   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   240  static void upap_lowerup(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   241  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   242      if (pcb->upap.us_clientstate == UPAPCS_INITIAL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   243  	pcb->upap.us_clientstate = UPAPCS_CLOSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   244      else if (pcb->upap.us_clientstate == UPAPCS_PENDING) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   245  	upap_sauthreq(pcb);	/* send an auth-request */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   246      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   247  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   248  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   249      if (pcb->upap.us_serverstate == UPAPSS_INITIAL)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   250  	pcb->upap.us_serverstate = UPAPSS_CLOSED;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   251      else if (pcb->upap.us_serverstate == UPAPSS_PENDING) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   252  	pcb->upap.us_serverstate = UPAPSS_LISTEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   253  	if (pcb->settings.pap_req_timeout > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   254  	    TIMEOUT(upap_reqtimeout, pcb, pcb->settings.pap_req_timeout);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   255      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   256  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   257  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   258  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   259  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   260  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   261   * upap_lowerdown - The lower layer is down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   262   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   263   * Cancel all timeouts.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   264   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   265  static void upap_lowerdown(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   266  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   267      if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ)	/* Timeout pending? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   268  	UNTIMEOUT(upap_timeout, pcb);		/* Cancel timeout */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   269  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   270      if (pcb->upap.us_serverstate == UPAPSS_LISTEN && pcb->settings.pap_req_timeout > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   271  	UNTIMEOUT(upap_reqtimeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   272  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   273  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   274      pcb->upap.us_clientstate = UPAPCS_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   275  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   276      pcb->upap.us_serverstate = UPAPSS_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   277  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   278  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   279  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   280  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   281  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   282   * upap_protrej - Peer doesn't speak this protocol.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   283   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   284   * This shouldn't happen.  In any case, pretend lower layer went down.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   285   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   286  static void upap_protrej(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   287  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   288      if (pcb->upap.us_clientstate == UPAPCS_AUTHREQ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   289  	ppp_error("PAP authentication failed due to protocol-reject");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   290  	auth_withpeer_fail(pcb, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   291      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   292  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   293      if (pcb->upap.us_serverstate == UPAPSS_LISTEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   294  	ppp_error("PAP authentication of peer failed (protocol-reject)");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   295  	auth_peer_fail(pcb, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   296      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   297  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   298      upap_lowerdown(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   299  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   300  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   301  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   302  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   303   * upap_input - Input UPAP packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   304   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   305  static void upap_input(ppp_pcb *pcb, u_char *inpacket, int l) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   306      u_char *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   307      u_char code, id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   308      int len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   309  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   310      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   311       * Parse header (code, id and length).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   312       * If packet too short, drop it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   313       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   314      inp = inpacket;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   315      if (l < UPAP_HEADERLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   316  	UPAPDEBUG(("pap_input: rcvd short header."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   317  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   318      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   319      GETCHAR(code, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   320      GETCHAR(id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   321      GETSHORT(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   322      if (len < UPAP_HEADERLEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   323  	UPAPDEBUG(("pap_input: rcvd illegal length."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   324  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   325      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   326      if (len > l) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   327  	UPAPDEBUG(("pap_input: rcvd short packet."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   328  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   329      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   330      len -= UPAP_HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   331  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   332      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   333       * Action depends on code.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   334       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   335      switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   336      case UPAP_AUTHREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   337  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   338  	upap_rauthreq(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   339  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   340  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   341  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   342      case UPAP_AUTHACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   343  	upap_rauthack(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   344  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   345  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   346      case UPAP_AUTHNAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   347  	upap_rauthnak(pcb, inp, id, len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   348  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   349  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   350      default:				/* XXX Need code reject */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   351  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   352      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   353  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   355  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   356  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   357   * upap_rauth - Receive Authenticate.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   358   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   359  static void upap_rauthreq(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   360      u_char ruserlen, rpasswdlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   361      char *ruser;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   362      char *rpasswd;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   363      char rhostname[256];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   364      int retcode;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   365      const char *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   366      int msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   367  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   368      if (pcb->upap.us_serverstate < UPAPSS_LISTEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   369  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   370  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   371      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   372       * If we receive a duplicate authenticate-request, we are
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   373       * supposed to return the same status as for the first request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   374       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   375      if (pcb->upap.us_serverstate == UPAPSS_OPEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   376  	upap_sresp(pcb, UPAP_AUTHACK, id, "", 0);	/* return auth-ack */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   377  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   378      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   379      if (pcb->upap.us_serverstate == UPAPSS_BADAUTH) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   380  	upap_sresp(pcb, UPAP_AUTHNAK, id, "", 0);	/* return auth-nak */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   381  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   382      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   383  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   384      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   385       * Parse user/passwd.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   386       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   387      if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   388  	UPAPDEBUG(("pap_rauth: rcvd short packet."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   389  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   390      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   391      GETCHAR(ruserlen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   392      len -= sizeof (u_char) + ruserlen + sizeof (u_char);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   393      if (len < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   394  	UPAPDEBUG(("pap_rauth: rcvd short packet."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   395  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   396      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   397      ruser = (char *) inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   398      INCPTR(ruserlen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   399      GETCHAR(rpasswdlen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   400      if (len < rpasswdlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   401  	UPAPDEBUG(("pap_rauth: rcvd short packet."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   402  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   403      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   404  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   405      rpasswd = (char *) inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   406  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   407      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   408       * Check the username and password given.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   409       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   410      retcode = UPAP_AUTHNAK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   411      if (auth_check_passwd(pcb, ruser, ruserlen, rpasswd, rpasswdlen, &msg, &msglen)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   412        retcode = UPAP_AUTHACK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   413      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   414      BZERO(rpasswd, rpasswdlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   415  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   416  #if 0 /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   417      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   418       * Check remote number authorization.  A plugin may have filled in
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   419       * the remote number or added an allowed number, and rather than
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   420       * return an authenticate failure, is leaving it for us to verify.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   421       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   422      if (retcode == UPAP_AUTHACK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   423  	if (!auth_number()) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   424  	    /* We do not want to leak info about the pap result. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   425  	    retcode = UPAP_AUTHNAK; /* XXX exit value will be "wrong" */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   426  	    warn("calling number %q is not authorized", remote_number);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   427  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   428      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   429  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   430      msglen = strlen(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   431      if (msglen > 255)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   432  	msglen = 255;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   433  #endif /* UNUSED */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   434  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   435      upap_sresp(pcb, retcode, id, msg, msglen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   436  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   437      /* Null terminate and clean remote name. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   438      ppp_slprintf(rhostname, sizeof(rhostname), "%.*v", ruserlen, ruser);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   439  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   440      if (retcode == UPAP_AUTHACK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   441  	pcb->upap.us_serverstate = UPAPSS_OPEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   442  	ppp_notice("PAP peer authentication succeeded for %q", rhostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   443  	auth_peer_success(pcb, PPP_PAP, 0, ruser, ruserlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   444      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   445  	pcb->upap.us_serverstate = UPAPSS_BADAUTH;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   446  	ppp_warn("PAP peer authentication failed for %q", rhostname);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   447  	auth_peer_fail(pcb, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   448      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   449  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   450      if (pcb->settings.pap_req_timeout > 0)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   451  	UNTIMEOUT(upap_reqtimeout, pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   452  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   453  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   455  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   456   * upap_rauthack - Receive Authenticate-Ack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   457   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   458  static void upap_rauthack(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   459      u_char msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   460      char *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   461      LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   462  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   463      if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   464  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   465  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   466      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   467       * Parse message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   468       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   469      if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   470  	UPAPDEBUG(("pap_rauthack: ignoring missing msg-length."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   471      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   472  	GETCHAR(msglen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   473  	if (msglen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   474  	    len -= sizeof (u_char);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   475  	    if (len < msglen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   476  		UPAPDEBUG(("pap_rauthack: rcvd short packet."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   477  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   478  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   479  	    msg = (char *) inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   480  	    PRINTMSG(msg, msglen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   481  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   482      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   483  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   484      pcb->upap.us_clientstate = UPAPCS_OPEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   485  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   486      auth_withpeer_success(pcb, PPP_PAP, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   487  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   488  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   489  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   490  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   491   * upap_rauthnak - Receive Authenticate-Nak.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   492   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   493  static void upap_rauthnak(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   494      u_char msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   495      char *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   496      LWIP_UNUSED_ARG(id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   497  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   498      if (pcb->upap.us_clientstate != UPAPCS_AUTHREQ) /* XXX */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   499  	return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   500  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   501      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   502       * Parse message.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   503       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   504      if (len < 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   505  	UPAPDEBUG(("pap_rauthnak: ignoring missing msg-length."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   506      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   507  	GETCHAR(msglen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   508  	if (msglen > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   509  	    len -= sizeof (u_char);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   510  	    if (len < msglen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   511  		UPAPDEBUG(("pap_rauthnak: rcvd short packet."));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   512  		return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   513  	    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   514  	    msg = (char *) inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   515  	    PRINTMSG(msg, msglen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   516  	}
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   517      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   518  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   519      pcb->upap.us_clientstate = UPAPCS_BADAUTH;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   520  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   521      ppp_error("PAP authentication failed");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   522      auth_withpeer_fail(pcb, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   523  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   524  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   525  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   526  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   527   * upap_sauthreq - Send an Authenticate-Request.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   528   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   529  static void upap_sauthreq(ppp_pcb *pcb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   530      struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   531      u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   532      int outlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   533  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   534      outlen = UPAP_HEADERLEN + 2 * sizeof (u_char) +
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   535  	pcb->upap.us_userlen + pcb->upap.us_passwdlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   536      p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   537      if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   538          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   539      if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   540          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   541          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   542      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   543  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   544      outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   545      MAKEHEADER(outp, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   546  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   547      PUTCHAR(UPAP_AUTHREQ, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   548      PUTCHAR(++pcb->upap.us_id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   549      PUTSHORT(outlen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   550      PUTCHAR(pcb->upap.us_userlen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   551      MEMCPY(outp, pcb->upap.us_user, pcb->upap.us_userlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   552      INCPTR(pcb->upap.us_userlen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   553      PUTCHAR(pcb->upap.us_passwdlen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   554      MEMCPY(outp, pcb->upap.us_passwd, pcb->upap.us_passwdlen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   555  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   556      ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   557  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   558      TIMEOUT(upap_timeout, pcb, pcb->settings.pap_timeout_time);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   559      ++pcb->upap.us_transmits;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   560      pcb->upap.us_clientstate = UPAPCS_AUTHREQ;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   561  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   562  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   563  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   564  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   565   * upap_sresp - Send a response (ack or nak).
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   566   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   567  static void upap_sresp(ppp_pcb *pcb, u_char code, u_char id, const char *msg, int msglen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   568      struct pbuf *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   569      u_char *outp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   570      int outlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   571  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   572      outlen = UPAP_HEADERLEN + sizeof (u_char) + msglen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   573      p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN +outlen), PPP_CTRL_PBUF_TYPE);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   574      if(NULL == p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   575          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   576      if(p->tot_len != p->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   577          pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   578          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   579      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   580  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   581      outp = (u_char*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   582      MAKEHEADER(outp, PPP_PAP);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   583  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   584      PUTCHAR(code, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   585      PUTCHAR(id, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   586      PUTSHORT(outlen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   587      PUTCHAR(msglen, outp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   588      MEMCPY(outp, msg, msglen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   589  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   590      ppp_write(pcb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   591  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   592  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   593  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   594  #if PRINTPKT_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   595  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   596   * upap_printpkt - print the contents of a PAP packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   597   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   598  static const char* const upap_codenames[] = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   599      "AuthReq", "AuthAck", "AuthNak"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   600  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   601  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   602  static int upap_printpkt(const u_char *p, int plen, void (*printer) (void *, const char *, ...), void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   603      int code, id, len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   604      int mlen, ulen, wlen;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   605      const u_char *user, *pwd, *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   606      const u_char *pstart;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   607  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   608      if (plen < UPAP_HEADERLEN)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   609  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   610      pstart = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   611      GETCHAR(code, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   612      GETCHAR(id, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   613      GETSHORT(len, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   614      if (len < UPAP_HEADERLEN || len > plen)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   615  	return 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   616  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   617      if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(upap_codenames))
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   618  	printer(arg, " %s", upap_codenames[code-1]);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   619      else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   620  	printer(arg, " code=0x%x", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   621      printer(arg, " id=0x%x", id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   622      len -= UPAP_HEADERLEN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   623      switch (code) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   624      case UPAP_AUTHREQ:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   625  	if (len < 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   626  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   627  	ulen = p[0];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   628  	if (len < ulen + 2)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   629  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   630  	wlen = p[ulen + 1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   631  	if (len < ulen + wlen + 2)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   632  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   633  	user = (const u_char *) (p + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   634  	pwd = (const u_char *) (p + ulen + 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   635  	p += ulen + wlen + 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   636  	len -= ulen + wlen + 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   637  	printer(arg, " user=");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   638  	ppp_print_string(user, ulen, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   639  	printer(arg, " password=");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   640  /* FIXME: require ppp_pcb struct as printpkt() argument */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   641  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   642  	if (!pcb->settings.hide_password)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   643  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   644  	    ppp_print_string(pwd, wlen, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   645  #if 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   646  	else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   647  	    printer(arg, "<hidden>");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   648  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   649  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   650      case UPAP_AUTHACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   651      case UPAP_AUTHNAK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   652  	if (len < 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   653  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   654  	mlen = p[0];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   655  	if (len < mlen + 1)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   656  	    break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   657  	msg = (const u_char *) (p + 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   658  	p += mlen + 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   659  	len -= mlen + 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   660  	printer(arg, " ");
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   661  	ppp_print_string(msg, mlen, printer, arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   662  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   663      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   664  	break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   665      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   666  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   667      /* print the rest of the bytes in the packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   668      for (; len > 0; --len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   669  	GETCHAR(code, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   670  	printer(arg, " %.2x", code);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   671      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   672  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   673      return p - pstart;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   674  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   675  #endif /* PRINTPKT_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   676  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\upap.c	   677  #endif /* PPP_SUPPORT && PAP_SUPPORT */

	; Module end
