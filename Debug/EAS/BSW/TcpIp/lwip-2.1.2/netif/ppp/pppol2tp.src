	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc25016a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\.pppol2tp.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppol2tp.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppol2tp.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppol2tp.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppol2tp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4551
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppol2tp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	172
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	174
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	197
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	197
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	244
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	281
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	197
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	197
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	244
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	380
	.byte	3
	.word	197
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	474
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	503
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	197
	.byte	8,4
	.word	281
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	608
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	617
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	244
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	608
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	690
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	197
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	197
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	617
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	617
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	932
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	197
	.byte	8,3
	.word	197
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1089
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1098
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	244
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1232
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	197
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	197
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	197
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1343
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	197
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	197
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	197
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	197
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	197
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	197
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	244
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	244
	.byte	8,1
	.word	197
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1797
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1797
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1806
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1882
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	690
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2018
	.byte	12
	.word	197
	.byte	3
	.word	2132
	.byte	12
	.word	197
	.byte	3
	.word	2142
	.byte	12
	.word	197
	.byte	3
	.word	2152
	.byte	12
	.word	1882
	.byte	3
	.word	2162
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	244
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	197
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	197
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	197
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	197
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	690
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2137
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2147
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2157
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2167
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2172
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	281
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	281
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	281
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2524
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	281
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2674
	.byte	12
	.word	2524
	.byte	3
	.word	2811
	.byte	12
	.word	2674
	.byte	3
	.word	2821
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	197
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	197
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	244
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2167
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2816
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2826
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2831
	.byte	12
	.word	197
	.byte	3
	.word	3116
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3121
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3121
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3126
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1882
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	197
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	197
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	197
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3290
	.byte	3
	.word	1806
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	281
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	197
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	197
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	244
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3435
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	474
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3440
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	281
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	197
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1882
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	197
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	197
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	197
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3435
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3655
	.byte	12
	.word	3440
	.byte	3
	.word	3825
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	244
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	474
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	244
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	244
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3121
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3830
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3835
	.byte	12
	.word	3655
	.byte	3
	.word	4059
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4064
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4069
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	244
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	474
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4169
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	244
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	244
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	474
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4266
	.byte	8,8
	.word	197
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	197
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	197
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4360
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4069
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4069
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4266
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4169
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4369
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	197
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\pppol2tp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     3   * Network Point to Point Protocol over Layer 2 Tunneling Protocol program file.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     4   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     5   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     6  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     7  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     8   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	     9   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    10   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    11   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    12   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    13   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    14   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    15   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    16   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    17   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    18   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    19   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    20   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    21   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    22   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    23   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    24   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    25   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    26   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    27   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    28   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    29   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    30   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    31   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    32   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    33  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    34  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    35   * L2TP Support status:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    36   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    37   * Supported:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    38   * - L2TPv2 (PPP over L2TP, a.k.a. UDP tunnels)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    39   * - LAC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    40   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    41   * Not supported:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    42   * - LNS (require PPP server support)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    43   * - L2TPv3 ethernet pseudowires
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    44   * - L2TPv3 VLAN pseudowire
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    45   * - L2TPv3 PPP pseudowires
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    46   * - L2TPv3 IP encapsulation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    47   * - L2TPv3 IP pseudowire
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    48   * - L2TP tunnel switching - http://tools.ietf.org/html/draft-ietf-l2tpext-tunnel-switching-08
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    49   * - Multiple tunnels per UDP socket, as well as multiple sessions per tunnel
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    50   * - Hidden AVPs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    51   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    52  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    53  #include "netif/ppp/ppp_opts.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    54  #if PPP_SUPPORT && PPPOL2TP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    55  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    56  #include "lwip/err.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    57  #include "lwip/memp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    58  #include "lwip/netif.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    59  #include "lwip/udp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    60  #include "lwip/snmp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    61  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    62  #include "netif/ppp/ppp_impl.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    63  #include "netif/ppp/lcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    64  #include "netif/ppp/ipcp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    65  #include "netif/ppp/pppol2tp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    66  #include "netif/ppp/pppcrypt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    67  #include "netif/ppp/magic.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    68  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    69  /* Memory pool */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    70  LWIP_MEMPOOL_DECLARE(PPPOL2TP_PCB, MEMP_NUM_PPPOL2TP_INTERFACES, sizeof(pppol2tp_pcb), "PPPOL2TP_PCB")
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    71  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    72  /* callbacks called from PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    73  static err_t pppol2tp_write(ppp_pcb *ppp, void *ctx, struct pbuf *p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    74  static err_t pppol2tp_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    75  static err_t pppol2tp_destroy(ppp_pcb *ppp, void *ctx);    /* Destroy a L2TP control block */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    76  static void pppol2tp_connect(ppp_pcb *ppp, void *ctx);    /* Be a LAC, connect to a LNS. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    77  static void pppol2tp_disconnect(ppp_pcb *ppp, void *ctx);  /* Disconnect */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    78  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    79   /* Prototypes for procedures local to this file. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    80  static void pppol2tp_input(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    81  static void pppol2tp_dispatch_control_packet(pppol2tp_pcb *l2tp, u16_t port, struct pbuf *p, u16_t ns, u16_t nr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    82  static void pppol2tp_timeout(void *arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    83  static void pppol2tp_abort_connect(pppol2tp_pcb *l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    84  static err_t pppol2tp_send_sccrq(pppol2tp_pcb *l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    85  static err_t pppol2tp_send_scccn(pppol2tp_pcb *l2tp, u16_t ns);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    86  static err_t pppol2tp_send_icrq(pppol2tp_pcb *l2tp, u16_t ns);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    87  static err_t pppol2tp_send_iccn(pppol2tp_pcb *l2tp, u16_t ns);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    88  static err_t pppol2tp_send_zlb(pppol2tp_pcb *l2tp, u16_t ns, u16_t nr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    89  static err_t pppol2tp_send_stopccn(pppol2tp_pcb *l2tp, u16_t ns);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    90  static err_t pppol2tp_xmit(pppol2tp_pcb *l2tp, struct pbuf *pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    91  static err_t pppol2tp_udp_send(pppol2tp_pcb *l2tp, struct pbuf *pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    92  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    93  /* Callbacks structure for PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    94  static const struct link_callbacks pppol2tp_callbacks = {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    95    pppol2tp_connect,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    96  #if PPP_SERVER
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    97    NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    98  #endif /* PPP_SERVER */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	    99    pppol2tp_disconnect,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   100    pppol2tp_destroy,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   101    pppol2tp_write,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   102    pppol2tp_netif_output,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   103    NULL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   104    NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   105  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   106  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   107  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   108  /* Create a new L2TP session. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   109  ppp_pcb *pppol2tp_create(struct netif *pppif,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   110         struct netif *netif, const ip_addr_t *ipaddr, u16_t port,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   111         const u8_t *secret, u8_t secret_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   112         ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   113    ppp_pcb *ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   114    pppol2tp_pcb *l2tp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   115    struct udp_pcb *udp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   116  #if !PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   117    LWIP_UNUSED_ARG(secret);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   118    LWIP_UNUSED_ARG(secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   119  #endif /* !PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   120  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   121    if (ipaddr == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   122      goto ipaddr_check_failed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   123    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   124  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   125    l2tp = (pppol2tp_pcb *)LWIP_MEMPOOL_ALLOC(PPPOL2TP_PCB);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   126    if (l2tp == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   127      goto memp_malloc_l2tp_failed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   128    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   129  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   130    udp = udp_new_ip_type(IP_GET_TYPE(ipaddr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   131    if (udp == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   132      goto udp_new_failed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   133    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   134    udp_recv(udp, pppol2tp_input, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   135  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   136    ppp = ppp_new(pppif, &pppol2tp_callbacks, l2tp, link_status_cb, ctx_cb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   137    if (ppp == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   138      goto ppp_new_failed;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   139    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   140  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   141    memset(l2tp, 0, sizeof(pppol2tp_pcb));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   142    l2tp->phase = PPPOL2TP_STATE_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   143    l2tp->ppp = ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   144    l2tp->udp = udp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   145    l2tp->netif = netif;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   146    ip_addr_copy(l2tp->remote_ip, *ipaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   147    l2tp->remote_port = port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   148  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   149    l2tp->secret = secret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   150    l2tp->secret_len = secret_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   151  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   152  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   153    return ppp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   154  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   155  ppp_new_failed:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   156    udp_remove(udp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   157  udp_new_failed:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   158    LWIP_MEMPOOL_FREE(PPPOL2TP_PCB, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   159  memp_malloc_l2tp_failed:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   160  ipaddr_check_failed:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   161    return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   162  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   163  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   164  /* Called by PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   165  static err_t pppol2tp_write(ppp_pcb *ppp, void *ctx, struct pbuf *p) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   166    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   167    struct pbuf *ph; /* UDP + L2TP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   168    err_t ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   169  #if MIB2_STATS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   170    u16_t tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   171  #else /* MIB2_STATS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   172    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   173  #endif /* MIB2_STATS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   174  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   175    ph = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(PPPOL2TP_OUTPUT_DATA_HEADER_LEN), PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   176    if(!ph) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   177      LINK_STATS_INC(link.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   178      LINK_STATS_INC(link.proterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   179      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   180      pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   181      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   182    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   183  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   184    pbuf_remove_header(ph, PPPOL2TP_OUTPUT_DATA_HEADER_LEN); /* hide L2TP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   185    pbuf_cat(ph, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   186  #if MIB2_STATS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   187    tot_len = ph->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   188  #endif /* MIB2_STATS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   189  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   190    ret = pppol2tp_xmit(l2tp, ph);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   191    if (ret != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   192      LINK_STATS_INC(link.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   193      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   194      return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   195    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   196  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   197    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, (u16_t)tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   198    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   199    LINK_STATS_INC(link.xmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   200    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   201  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   202  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   203  /* Called by PPP core */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   204  static err_t pppol2tp_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   205    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   206    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   207    u8_t *pl;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   208    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   209  #if MIB2_STATS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   210    u16_t tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   211  #else /* MIB2_STATS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   212    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   213  #endif /* MIB2_STATS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   214  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   215    /* @todo: try to use pbuf_header() here! */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   216    pb = pbuf_alloc(PBUF_TRANSPORT, PPPOL2TP_OUTPUT_DATA_HEADER_LEN + sizeof(protocol), PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   217    if(!pb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   218      LINK_STATS_INC(link.memerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   219      LINK_STATS_INC(link.proterr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   220      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   221      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   222    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   223  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   224    pbuf_remove_header(pb, PPPOL2TP_OUTPUT_DATA_HEADER_LEN);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   225  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   226    pl = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   227    PUTSHORT(protocol, pl);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   228  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   229    pbuf_chain(pb, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   230  #if MIB2_STATS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   231    tot_len = pb->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   232  #endif /* MIB2_STATS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   233  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   234    if( (err = pppol2tp_xmit(l2tp, pb)) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   235      LINK_STATS_INC(link.err);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   236      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   237      return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   238    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   239  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   240    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   241    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   242    LINK_STATS_INC(link.xmit);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   243    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   244  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   245  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   246  /* Destroy a L2TP control block */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   247  static err_t pppol2tp_destroy(ppp_pcb *ppp, void *ctx) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   248    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   249    LWIP_UNUSED_ARG(ppp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   250  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   251    sys_untimeout(pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   252    udp_remove(l2tp->udp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   253    LWIP_MEMPOOL_FREE(PPPOL2TP_PCB, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   254    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   255  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   256  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   257  /* Be a LAC, connect to a LNS. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   258  static void pppol2tp_connect(ppp_pcb *ppp, void *ctx) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   259    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   260    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   261    lcp_options *lcp_wo;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   262    lcp_options *lcp_ao;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   263  #if PPP_IPV4_SUPPORT && VJ_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   264    ipcp_options *ipcp_wo;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   265    ipcp_options *ipcp_ao;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   266  #endif /* PPP_IPV4_SUPPORT && VJ_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   267  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   268    l2tp->tunnel_port = l2tp->remote_port;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   269    l2tp->our_ns = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   270    l2tp->peer_nr = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   271    l2tp->peer_ns = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   272    l2tp->source_tunnel_id = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   273    l2tp->remote_tunnel_id = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   274    l2tp->source_session_id = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   275    l2tp->remote_session_id = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   276    /* l2tp->*_retried are cleared when used */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   277  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   278    lcp_wo = &ppp->lcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   279    lcp_wo->mru = PPPOL2TP_DEFMRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   280    lcp_wo->neg_asyncmap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   281    lcp_wo->neg_pcompression = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   282    lcp_wo->neg_accompression = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   283    lcp_wo->passive = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   284    lcp_wo->silent = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   285  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   286    lcp_ao = &ppp->lcp_allowoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   287    lcp_ao->mru = PPPOL2TP_DEFMRU;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   288    lcp_ao->neg_asyncmap = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   289    lcp_ao->neg_pcompression = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   290    lcp_ao->neg_accompression = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   291  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   292  #if PPP_IPV4_SUPPORT && VJ_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   293    ipcp_wo = &ppp->ipcp_wantoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   294    ipcp_wo->neg_vj = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   295    ipcp_wo->old_vj = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   296  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   297    ipcp_ao = &ppp->ipcp_allowoptions;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   298    ipcp_ao->neg_vj = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   299    ipcp_ao->old_vj = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   300  #endif /* PPP_IPV4_SUPPORT && VJ_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   301  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   302    /* Listen to a random source port, we need to do that instead of using udp_connect()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   303     * because the L2TP LNS might answer with its own random source port (!= 1701)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   304     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   305  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   306    if (IP_IS_V6_VAL(l2tp->udp->local_ip)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   307      udp_bind(l2tp->udp, IP6_ADDR_ANY, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   308    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   309  #endif /* LWIP_IPV6 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   310    udp_bind(l2tp->udp, IP_ADDR_ANY, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   311  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   312  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   313    /* Generate random vector */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   314    if (l2tp->secret != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   315      magic_random_bytes(l2tp->secret_rv, sizeof(l2tp->secret_rv));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   316    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   317  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   318  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   319    do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   320      l2tp->remote_tunnel_id = magic();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   321    } while(l2tp->remote_tunnel_id == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   322    /* save state, in case we fail to send SCCRQ */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   323    l2tp->sccrq_retried = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   324    l2tp->phase = PPPOL2TP_STATE_SCCRQ_SENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   325    if ((err = pppol2tp_send_sccrq(l2tp)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   326      PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   327    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   328    sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   329  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   330  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   331  /* Disconnect */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   332  static void pppol2tp_disconnect(ppp_pcb *ppp, void *ctx) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   333    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   334  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   335    l2tp->our_ns++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   336    pppol2tp_send_stopccn(l2tp, l2tp->our_ns);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   337  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   338    /* stop any timer, disconnect can be called while initiating is in progress */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   339    sys_untimeout(pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   340    l2tp->phase = PPPOL2TP_STATE_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   341    ppp_link_end(ppp); /* notify upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   342  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   343  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   344  /* UDP Callback for incoming IPv4 L2TP frames */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   345  static void pppol2tp_input(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   346    pppol2tp_pcb *l2tp = (pppol2tp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   347    u16_t hflags, hlen, len=0, tunnel_id=0, session_id=0, ns=0, nr=0, offset=0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   348    u8_t *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   349    LWIP_UNUSED_ARG(pcb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   350  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   351    /* we can't unbound a UDP pcb, thus we can still receive UDP frames after the link is closed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   352    if (l2tp->phase < PPPOL2TP_STATE_SCCRQ_SENT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   353      goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   354    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   355  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   356    if (!ip_addr_cmp(&l2tp->remote_ip, addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   357      goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   358    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   359  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   360    /* discard packet if port mismatch, but only if we received a SCCRP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   361    if (l2tp->phase > PPPOL2TP_STATE_SCCRQ_SENT && l2tp->tunnel_port != port) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   362      goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   363    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   364  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   365    /* printf("-----------\nL2TP INPUT, %d\n", p->len); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   366  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   367    /* L2TP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   368    if (p->len < sizeof(hflags) + sizeof(tunnel_id) + sizeof(session_id) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   369      goto packet_too_short;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   370    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   371  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   372    inp = (u8_t*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   373    GETSHORT(hflags, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   374  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   375    if (hflags & PPPOL2TP_HEADERFLAG_CONTROL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   376      /* check mandatory flags for a control packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   377      if ( (hflags & PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY) != PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   378        PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for control packet not set\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   379        goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   380      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   381      /* check forbidden flags for a control packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   382      if (hflags & PPPOL2TP_HEADERFLAG_CONTROL_FORBIDDEN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   383        PPPDEBUG(LOG_DEBUG, ("pppol2tp: forbidden header flags for control packet found\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   384        goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   385      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   386    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   387      /* check mandatory flags for a data packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   388      if ( (hflags & PPPOL2TP_HEADERFLAG_DATA_MANDATORY) != PPPOL2TP_HEADERFLAG_DATA_MANDATORY) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   389        PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for data packet not set\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   390        goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   391      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   392    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   393  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   394    /* Expected header size  */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   395    hlen = sizeof(hflags) + sizeof(tunnel_id) + sizeof(session_id);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   396    if (hflags & PPPOL2TP_HEADERFLAG_LENGTH) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   397      hlen += sizeof(len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   398    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   399    if (hflags & PPPOL2TP_HEADERFLAG_SEQUENCE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   400      hlen += sizeof(ns) + sizeof(nr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   401    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   402    if (hflags & PPPOL2TP_HEADERFLAG_OFFSET) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   403      hlen += sizeof(offset);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   404    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   405    if (p->len < hlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   406      goto packet_too_short;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   407    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   408  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   409    if (hflags & PPPOL2TP_HEADERFLAG_LENGTH) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   410      GETSHORT(len, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   411      if (p->len < len || len < hlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   412        goto packet_too_short;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   413      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   414    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   415    GETSHORT(tunnel_id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   416    GETSHORT(session_id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   417    if (hflags & PPPOL2TP_HEADERFLAG_SEQUENCE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   418      GETSHORT(ns, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   419      GETSHORT(nr, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   420    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   421    if (hflags & PPPOL2TP_HEADERFLAG_OFFSET) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   422      GETSHORT(offset, inp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   423      if (offset > 4096) { /* don't be fooled with large offset which might overflow hlen */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   424        PPPDEBUG(LOG_DEBUG, ("pppol2tp: strange packet received, offset=%d\n", offset));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   425        goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   426      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   427      hlen += offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   428      if (p->len < hlen) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   429        goto packet_too_short;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   430      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   431      INCPTR(offset, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   432    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   433  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   434    /* printf("HLEN = %d\n", hlen); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   435  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   436    /* skip L2TP header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   437    if (pbuf_remove_header(p, hlen) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   438      goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   439    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   440  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   441    /* printf("LEN=%d, TUNNEL_ID=%d, SESSION_ID=%d, NS=%d, NR=%d, OFFSET=%d\n", len, tunnel_id, session_id, ns, nr, offset); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   442    PPPDEBUG(LOG_DEBUG, ("pppol2tp: input packet, len=%"U16_F", tunnel=%"U16_F", session=%"U16_F", ns=%"U16_F", nr=%"U16_F"\n",
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   443      len, tunnel_id, session_id, ns, nr));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   444  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   445    /* Control packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   446    if (hflags & PPPOL2TP_HEADERFLAG_CONTROL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   447      pppol2tp_dispatch_control_packet(l2tp, port, p, ns, nr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   448      goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   449    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   450  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   451    /* Data packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   452    if(l2tp->phase != PPPOL2TP_STATE_DATA) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   453      goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   454    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   455    if(tunnel_id != l2tp->remote_tunnel_id) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   456       PPPDEBUG(LOG_DEBUG, ("pppol2tp: tunnel ID mismatch, assigned=%d, received=%d\n", l2tp->remote_tunnel_id, tunnel_id));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   457       goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   458    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   459    if(session_id != l2tp->remote_session_id) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   460       PPPDEBUG(LOG_DEBUG, ("pppol2tp: session ID mismatch, assigned=%d, received=%d\n", l2tp->remote_session_id, session_id));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   461       goto free_and_return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   462    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   463    /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   464     * skip address & flags if necessary
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   465     *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   466     * RFC 2661 does not specify whether the PPP frame in the L2TP payload should
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   467     * have a HDLC header or not. We handle both cases for compatibility.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   468     */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   469    if (p->len >= 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   470      GETSHORT(hflags, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   471      if (hflags == 0xff03) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   472        pbuf_remove_header(p, 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   473      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   474    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   475    /* Dispatch the packet thereby consuming it. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   476    ppp_input(l2tp->ppp, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   477    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   478  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   479  packet_too_short:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   480    PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   481  free_and_return:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   482    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   483  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   484  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   485  /* L2TP Control packet entry point */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   486  static void pppol2tp_dispatch_control_packet(pppol2tp_pcb *l2tp, u16_t port, struct pbuf *p, u16_t ns, u16_t nr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   487    u8_t *inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   488    u16_t avplen, avpflags, vendorid, attributetype, messagetype=0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   489    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   490  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   491    lwip_md5_context md5_ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   492    u8_t md5_hash[16];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   493    u8_t challenge_id = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   494  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   495  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   496    /* printf("L2TP CTRL INPUT, ns=%d, nr=%d, len=%d\n", ns, nr, p->len); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   497  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   498    /* Drop unexpected packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   499    if (ns != l2tp->peer_ns) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   500      PPPDEBUG(LOG_DEBUG, ("pppol2tp: drop unexpected packet: received NS=%d, expected NS=%d\n", ns, l2tp->peer_ns));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   501      /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   502       * In order to ensure that all messages are acknowledged properly
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   503       * (particularly in the case of a lost ZLB ACK message), receipt
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   504       * of duplicate messages MUST be acknowledged.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   505       *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   506       * In this very special case we Ack a packet we previously received.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   507       * Therefore our NS is the NR we just received. And our NR is the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   508       * NS we just received plus one.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   509       */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   510      if ((s16_t)(ns - l2tp->peer_ns) < 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   511        pppol2tp_send_zlb(l2tp, nr, ns+1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   512      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   513      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   514    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   515  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   516    l2tp->peer_nr = nr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   517  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   518    /* Handle the special case of the ICCN acknowledge */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   519    if (l2tp->phase == PPPOL2TP_STATE_ICCN_SENT && (s16_t)(l2tp->peer_nr - l2tp->our_ns) > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   520      l2tp->phase = PPPOL2TP_STATE_DATA;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   521      sys_untimeout(pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   522      ppp_start(l2tp->ppp); /* notify upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   523    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   524  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   525    /* ZLB packets */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   526    if (p->tot_len == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   527      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   528    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   529    /* A ZLB packet does not consume a NS slot thus we don't record the NS value for ZLB packets */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   530    l2tp->peer_ns = ns+1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   531  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   532    p = pbuf_coalesce(p, PBUF_RAW);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   533    inp = (u8_t*)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   534    /* Decode AVPs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   535    while (p->len > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   536      if (p->len < sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   537        goto packet_too_short;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   538      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   539      GETSHORT(avpflags, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   540      avplen = avpflags & PPPOL2TP_AVPHEADERFLAG_LENGTHMASK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   541      /* printf("AVPLEN = %d\n", avplen); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   542      if (p->len < avplen || avplen < sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   543        goto packet_too_short;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   544      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   545      GETSHORT(vendorid, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   546      GETSHORT(attributetype, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   547      avplen -= sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   548  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   549      /* Message type must be the first AVP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   550      if (messagetype == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   551        if (attributetype != 0 || vendorid != 0 || avplen != sizeof(messagetype) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   552          PPPDEBUG(LOG_DEBUG, ("pppol2tp: message type must be the first AVP\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   553          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   554        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   555        GETSHORT(messagetype, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   556        /* printf("Message type = %d\n", messagetype); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   557        switch(messagetype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   558          /* Start Control Connection Reply */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   559          case PPPOL2TP_MESSAGETYPE_SCCRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   560            /* Only accept SCCRP packet if we sent a SCCRQ */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   561            if (l2tp->phase != PPPOL2TP_STATE_SCCRQ_SENT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   562              goto send_zlb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   563            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   564            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   565          /* Incoming Call Reply */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   566          case PPPOL2TP_MESSAGETYPE_ICRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   567            /* Only accept ICRP packet if we sent a IRCQ */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   568            if (l2tp->phase != PPPOL2TP_STATE_ICRQ_SENT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   569              goto send_zlb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   570            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   571            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   572          /* Stop Control Connection Notification */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   573          case PPPOL2TP_MESSAGETYPE_STOPCCN:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   574            pppol2tp_send_zlb(l2tp, l2tp->our_ns+1, l2tp->peer_ns); /* Ack the StopCCN before we switch to down state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   575            if (l2tp->phase < PPPOL2TP_STATE_DATA) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   576              pppol2tp_abort_connect(l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   577            } else if (l2tp->phase == PPPOL2TP_STATE_DATA) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   578              /* Don't disconnect here, we let the LCP Echo/Reply find the fact
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   579               * that PPP session is down. Asking the PPP stack to end the session
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   580               * require strict checking about the PPP phase to prevent endless
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   581               * disconnection loops.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   582               */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   583            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   584            return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   585          default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   586            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   587        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   588        goto nextavp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   589      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   590  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   591      /* Skip proprietary L2TP extensions */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   592      if (vendorid != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   593        goto skipavp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   594      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   595  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   596      switch (messagetype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   597        /* Start Control Connection Reply */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   598        case PPPOL2TP_MESSAGETYPE_SCCRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   599         switch (attributetype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   600            case PPPOL2TP_AVPTYPE_TUNNELID:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   601              if (avplen != sizeof(l2tp->source_tunnel_id) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   602                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign tunnel ID length check failed\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   603                 return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   604              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   605              GETSHORT(l2tp->source_tunnel_id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   606              PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned tunnel ID %"U16_F"\n", l2tp->source_tunnel_id));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   607              goto nextavp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   608  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   609            case PPPOL2TP_AVPTYPE_CHALLENGE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   610              if (avplen == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   611                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: Challenge length check failed\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   612                 return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   613              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   614              if (l2tp->secret == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   615                PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge from peer and no secret key available\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   616                pppol2tp_abort_connect(l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   617                return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   618              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   619              /* Generate hash of ID, secret, challenge */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   620              lwip_md5_init(&md5_ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   621              lwip_md5_starts(&md5_ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   622              challenge_id = PPPOL2TP_MESSAGETYPE_SCCCN;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   623              lwip_md5_update(&md5_ctx, &challenge_id, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   624              lwip_md5_update(&md5_ctx, l2tp->secret, l2tp->secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   625              lwip_md5_update(&md5_ctx, inp, avplen);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   626              lwip_md5_finish(&md5_ctx, l2tp->challenge_hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   627              lwip_md5_free(&md5_ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   628              l2tp->send_challenge = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   629              goto skipavp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   630            case PPPOL2TP_AVPTYPE_CHALLENGERESPONSE:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   631              if (avplen != PPPOL2TP_AVPTYPE_CHALLENGERESPONSE_SIZE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   632                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Challenge Response length check failed\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   633                 return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   634              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   635              /* Generate hash of ID, secret, challenge */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   636              lwip_md5_init(&md5_ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   637              lwip_md5_starts(&md5_ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   638              challenge_id = PPPOL2TP_MESSAGETYPE_SCCRP;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   639              lwip_md5_update(&md5_ctx, &challenge_id, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   640              lwip_md5_update(&md5_ctx, l2tp->secret, l2tp->secret_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   641              lwip_md5_update(&md5_ctx, l2tp->secret_rv, sizeof(l2tp->secret_rv));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   642              lwip_md5_finish(&md5_ctx, md5_hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   643              lwip_md5_free(&md5_ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   644              if ( memcmp(inp, md5_hash, sizeof(md5_hash)) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   645                PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge response from peer and secret key do not match\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   646                pppol2tp_abort_connect(l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   647                return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   648              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   649              goto skipavp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   650  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   651            default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   652              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   653          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   654          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   655        /* Incoming Call Reply */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   656        case PPPOL2TP_MESSAGETYPE_ICRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   657          switch (attributetype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   658           case PPPOL2TP_AVPTYPE_SESSIONID:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   659              if (avplen != sizeof(l2tp->source_session_id) ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   660                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign session ID length check failed\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   661                 return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   662              }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   663              GETSHORT(l2tp->source_session_id, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   664              PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned session ID %"U16_F"\n", l2tp->source_session_id));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   665              goto nextavp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   666            default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   667              break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   668          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   669          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   670        default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   671          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   672      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   673  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   674  skipavp:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   675      INCPTR(avplen, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   676  nextavp:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   677      /* printf("AVP Found, vendor=%d, attribute=%d, len=%d\n", vendorid, attributetype, avplen); */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   678      /* next AVP */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   679      if (pbuf_remove_header(p, avplen + sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   680        return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   681      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   682    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   683  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   684    switch(messagetype) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   685      /* Start Control Connection Reply */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   686      case PPPOL2TP_MESSAGETYPE_SCCRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   687        do {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   688          l2tp->remote_session_id = magic();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   689        } while(l2tp->remote_session_id == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   690        l2tp->tunnel_port = port; /* LNS server might have chosen its own local port */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   691        l2tp->icrq_retried = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   692        l2tp->phase = PPPOL2TP_STATE_ICRQ_SENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   693        l2tp->our_ns++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   694        if ((err = pppol2tp_send_scccn(l2tp, l2tp->our_ns)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   695          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   696          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   697        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   698        l2tp->our_ns++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   699        if ((err = pppol2tp_send_icrq(l2tp, l2tp->our_ns)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   700          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   701          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   702        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   703        sys_untimeout(pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   704        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   705        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   706      /* Incoming Call Reply */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   707      case PPPOL2TP_MESSAGETYPE_ICRP:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   708        l2tp->iccn_retried = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   709        l2tp->phase = PPPOL2TP_STATE_ICCN_SENT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   710        l2tp->our_ns++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   711        if ((err = pppol2tp_send_iccn(l2tp, l2tp->our_ns)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   712          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   713          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   714        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   715        sys_untimeout(pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   716        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   717        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   718      /* Unhandled packet, send ZLB ACK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   719      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   720        goto send_zlb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   721    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   722    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   723  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   724  send_zlb:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   725    pppol2tp_send_zlb(l2tp, l2tp->our_ns+1, l2tp->peer_ns);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   726    return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   727  packet_too_short:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   728    PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   729  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   730  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   731  /* L2TP Timeout handler */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   732  static void pppol2tp_timeout(void *arg) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   733    pppol2tp_pcb *l2tp = (pppol2tp_pcb*)arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   734    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   735    u32_t retry_wait;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   736  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   737    PPPDEBUG(LOG_DEBUG, ("pppol2tp: timeout\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   738  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   739    switch (l2tp->phase) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   740      case PPPOL2TP_STATE_SCCRQ_SENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   741        /* backoff wait */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   742        if (l2tp->sccrq_retried < 0xff) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   743          l2tp->sccrq_retried++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   744        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   745        if (!l2tp->ppp->settings.persist && l2tp->sccrq_retried >= PPPOL2TP_MAXSCCRQ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   746          pppol2tp_abort_connect(l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   747          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   748        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   749        retry_wait = LWIP_MIN(PPPOL2TP_CONTROL_TIMEOUT * l2tp->sccrq_retried, PPPOL2TP_SLOW_RETRY);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   750        PPPDEBUG(LOG_DEBUG, ("pppol2tp: sccrq_retried=%d\n", l2tp->sccrq_retried));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   751        if ((err = pppol2tp_send_sccrq(l2tp)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   752          l2tp->sccrq_retried--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   753          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   754          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   755        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   756        sys_timeout(retry_wait, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   757        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   758  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   759      case PPPOL2TP_STATE_ICRQ_SENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   760        l2tp->icrq_retried++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   761        if (l2tp->icrq_retried >= PPPOL2TP_MAXICRQ) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   762          pppol2tp_abort_connect(l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   763          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   764        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   765        PPPDEBUG(LOG_DEBUG, ("pppol2tp: icrq_retried=%d\n", l2tp->icrq_retried));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   766        if ((s16_t)(l2tp->peer_nr - l2tp->our_ns) < 0) { /* the SCCCN was not acknowledged */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   767          if ((err = pppol2tp_send_scccn(l2tp, l2tp->our_ns -1)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   768            l2tp->icrq_retried--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   769            PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   770            LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   771            sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   772            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   773          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   774        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   775        if ((err = pppol2tp_send_icrq(l2tp, l2tp->our_ns)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   776          l2tp->icrq_retried--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   777          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   778          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   779        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   780        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   781        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   782  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   783      case PPPOL2TP_STATE_ICCN_SENT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   784        l2tp->iccn_retried++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   785        if (l2tp->iccn_retried >= PPPOL2TP_MAXICCN) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   786          pppol2tp_abort_connect(l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   787          return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   788        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   789        PPPDEBUG(LOG_DEBUG, ("pppol2tp: iccn_retried=%d\n", l2tp->iccn_retried));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   790        if ((err = pppol2tp_send_iccn(l2tp, l2tp->our_ns)) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   791          l2tp->iccn_retried--;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   792          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   793          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   794        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   795        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   796        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   797  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   798      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   799        return;  /* all done, work in peace */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   800    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   801  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   802  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   803  /* Connection attempt aborted */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   804  static void pppol2tp_abort_connect(pppol2tp_pcb *l2tp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   805    PPPDEBUG(LOG_DEBUG, ("pppol2tp: could not establish connection\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   806    l2tp->phase = PPPOL2TP_STATE_INITIAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   807    ppp_link_failed(l2tp->ppp); /* notify upper layers */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   808  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   809  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   810  /* Initiate a new tunnel */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   811  static err_t pppol2tp_send_sccrq(pppol2tp_pcb *l2tp) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   812    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   813    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   814    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   815  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   816    /* calculate UDP packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   817    len = 12 +8 +8 +10 +10 +6+sizeof(PPPOL2TP_HOSTNAME)-1 +6+sizeof(PPPOL2TP_VENDORNAME)-1 +8 +8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   818  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   819    if (l2tp->secret != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   820      len += 6 + sizeof(l2tp->secret_rv);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   821    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   822  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   823  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   824    /* allocate a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   825    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   826    if (pb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   827      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   828    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   829    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   830  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   831    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   832    /* fill in pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   833    /* L2TP control header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   834    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   835    PUTSHORT(len, p); /* Length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   836    PUTSHORT(0, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   837    PUTSHORT(0, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   838    PUTSHORT(0, p); /* NS Sequence number - to peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   839    PUTSHORT(0, p); /* NR Sequence number - expected for peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   840  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   841    /* AVP - Message type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   842    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   843    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   844    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   845    PUTSHORT(PPPOL2TP_MESSAGETYPE_SCCRQ, p); /* Attribute value: Message type: SCCRQ */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   846  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   847    /* AVP - L2TP Version */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   848    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   849    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   850    PUTSHORT(PPPOL2TP_AVPTYPE_VERSION, p); /* Attribute type: Version */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   851    PUTSHORT(PPPOL2TP_VERSION, p); /* Attribute value: L2TP Version */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   852  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   853    /* AVP - Framing capabilities */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   854    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   855    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   856    PUTSHORT(PPPOL2TP_AVPTYPE_FRAMINGCAPABILITIES, p); /* Attribute type: Framing capabilities */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   857    PUTLONG(PPPOL2TP_FRAMINGCAPABILITIES, p); /* Attribute value: Framing capabilities */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   858  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   859    /* AVP - Bearer capabilities */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   860    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   861    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   862    PUTSHORT(PPPOL2TP_AVPTYPE_BEARERCAPABILITIES, p); /* Attribute type: Bearer capabilities */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   863    PUTLONG(PPPOL2TP_BEARERCAPABILITIES, p); /* Attribute value: Bearer capabilities */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   864  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   865    /* AVP - Host name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   866    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 6+sizeof(PPPOL2TP_HOSTNAME)-1, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   867    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   868    PUTSHORT(PPPOL2TP_AVPTYPE_HOSTNAME, p); /* Attribute type: Hostname */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   869    MEMCPY(p, PPPOL2TP_HOSTNAME, sizeof(PPPOL2TP_HOSTNAME)-1); /* Attribute value: Hostname */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   870    INCPTR(sizeof(PPPOL2TP_HOSTNAME)-1, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   871  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   872    /* AVP - Vendor name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   873    PUTSHORT(6+sizeof(PPPOL2TP_VENDORNAME)-1, p); /* len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   874    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   875    PUTSHORT(PPPOL2TP_AVPTYPE_VENDORNAME, p); /* Attribute type: Vendor name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   876    MEMCPY(p, PPPOL2TP_VENDORNAME, sizeof(PPPOL2TP_VENDORNAME)-1); /* Attribute value: Vendor name */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   877    INCPTR(sizeof(PPPOL2TP_VENDORNAME)-1, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   878  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   879    /* AVP - Assign tunnel ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   880    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   881    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   882    PUTSHORT(PPPOL2TP_AVPTYPE_TUNNELID, p); /* Attribute type: Tunnel ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   883    PUTSHORT(l2tp->remote_tunnel_id, p); /* Attribute value: Tunnel ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   884  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   885    /* AVP - Receive window size */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   886    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   887    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   888    PUTSHORT(PPPOL2TP_AVPTYPE_RECEIVEWINDOWSIZE, p); /* Attribute type: Receive window size */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   889    PUTSHORT(PPPOL2TP_RECEIVEWINDOWSIZE, p); /* Attribute value: Receive window size */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   890  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   891  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   892    /* AVP - Challenge */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   893    if (l2tp->secret != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   894      PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 6 + sizeof(l2tp->secret_rv), p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   895      PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   896      PUTSHORT(PPPOL2TP_AVPTYPE_CHALLENGE, p); /* Attribute type: Challenge */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   897      MEMCPY(p, l2tp->secret_rv, sizeof(l2tp->secret_rv)); /* Attribute value: Random vector */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   898      INCPTR(sizeof(l2tp->secret_rv), p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   899    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   900  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   901  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   902    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   903  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   904  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   905  /* Complete tunnel establishment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   906  static err_t pppol2tp_send_scccn(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   907    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   908    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   909    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   910  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   911    /* calculate UDP packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   912    len = 12 +8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   913  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   914    if (l2tp->send_challenge) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   915      len += 6 + sizeof(l2tp->challenge_hash);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   916    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   917  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   918  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   919    /* allocate a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   920    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   921    if (pb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   922      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   923    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   924    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   925  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   926    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   927    /* fill in pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   928    /* L2TP control header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   929    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   930    PUTSHORT(len, p); /* Length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   931    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   932    PUTSHORT(0, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   933    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   934    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   935  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   936    /* AVP - Message type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   937    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   938    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   939    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   940    PUTSHORT(PPPOL2TP_MESSAGETYPE_SCCCN, p); /* Attribute value: Message type: SCCCN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   941  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   942  #if PPPOL2TP_AUTH_SUPPORT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   943    /* AVP - Challenge response */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   944    if (l2tp->send_challenge) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   945      PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 6 + sizeof(l2tp->challenge_hash), p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   946      PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   947      PUTSHORT(PPPOL2TP_AVPTYPE_CHALLENGERESPONSE, p); /* Attribute type: Challenge response */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   948      MEMCPY(p, l2tp->challenge_hash, sizeof(l2tp->challenge_hash)); /* Attribute value: Computed challenge */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   949      INCPTR(sizeof(l2tp->challenge_hash), p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   950    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   951  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   952  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   953    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   954  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   955  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   956  /* Initiate a new session */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   957  static err_t pppol2tp_send_icrq(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   958    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   959    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   960    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   961    u32_t serialnumber;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   962  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   963    /* calculate UDP packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   964    len = 12 +8 +8 +10;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   965  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   966    /* allocate a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   967    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   968    if (pb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   969      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   970    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   971    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   972  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   973    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   974    /* fill in pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   975    /* L2TP control header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   976    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   977    PUTSHORT(len, p); /* Length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   978    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   979    PUTSHORT(0, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   980    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   981    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   982  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   983    /* AVP - Message type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   984    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   985    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   986    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   987    PUTSHORT(PPPOL2TP_MESSAGETYPE_ICRQ, p); /* Attribute value: Message type: ICRQ */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   988  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   989    /* AVP - Assign session ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   990    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   991    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   992    PUTSHORT(PPPOL2TP_AVPTYPE_SESSIONID, p); /* Attribute type: Session ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   993    PUTSHORT(l2tp->remote_session_id, p); /* Attribute value: Session ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   994  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   995    /* AVP - Call Serial Number */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   996    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   997    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   998    PUTSHORT(PPPOL2TP_AVPTYPE_CALLSERIALNUMBER, p); /* Attribute type: Serial number */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	   999    serialnumber = magic();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1000    PUTLONG(serialnumber, p); /* Attribute value: Serial number */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1001  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1002    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1003  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1004  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1005  /* Complete tunnel establishment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1006  static err_t pppol2tp_send_iccn(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1007    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1008    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1009    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1010  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1011    /* calculate UDP packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1012    len = 12 +8 +10 +10;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1013  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1014    /* allocate a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1015    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1016    if (pb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1017      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1018    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1019    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1020  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1021    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1022    /* fill in pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1023    /* L2TP control header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1024    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1025    PUTSHORT(len, p); /* Length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1026    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1027    PUTSHORT(l2tp->source_session_id, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1028    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1029    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1030  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1031    /* AVP - Message type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1032    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1033    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1034    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1035    PUTSHORT(PPPOL2TP_MESSAGETYPE_ICCN, p); /* Attribute value: Message type: ICCN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1036  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1037    /* AVP - Framing type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1038    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1039    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1040    PUTSHORT(PPPOL2TP_AVPTYPE_FRAMINGTYPE, p); /* Attribute type: Framing type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1041    PUTLONG(PPPOL2TP_FRAMINGTYPE, p); /* Attribute value: Framing type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1042  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1043    /* AVP - TX Connect speed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1044    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1045    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1046    PUTSHORT(PPPOL2TP_AVPTYPE_TXCONNECTSPEED, p); /* Attribute type: TX Connect speed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1047    PUTLONG(PPPOL2TP_TXCONNECTSPEED, p); /* Attribute value: TX Connect speed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1048  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1049    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1050  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1051  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1052  /* Send a ZLB ACK packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1053  static err_t pppol2tp_send_zlb(pppol2tp_pcb *l2tp, u16_t ns, u16_t nr) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1054    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1055    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1056    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1057  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1058    /* calculate UDP packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1059    len = 12;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1060  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1061    /* allocate a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1062    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1063    if (pb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1064      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1065    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1066    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1067  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1068    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1069    /* fill in pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1070    /* L2TP control header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1071    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1072    PUTSHORT(len, p); /* Length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1073    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1074    PUTSHORT(0, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1075    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1076    PUTSHORT(nr, p); /* NR Sequence number - expected for peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1077  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1078    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1079  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1080  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1081  /* Send a StopCCN packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1082  static err_t pppol2tp_send_stopccn(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1083    struct pbuf *pb;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1084    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1085    u16_t len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1086  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1087    /* calculate UDP packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1088    len = 12 +8 +8 +8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1089  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1090    /* allocate a buffer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1091    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1092    if (pb == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1093      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1094    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1095    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1096  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1097    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1098    /* fill in pkt */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1099    /* L2TP control header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1100    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1101    PUTSHORT(len, p); /* Length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1102    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1103    PUTSHORT(0, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1104    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1105    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1106  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1107    /* AVP - Message type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1108    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1109    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1110    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1111    PUTSHORT(PPPOL2TP_MESSAGETYPE_STOPCCN, p); /* Attribute value: Message type: StopCCN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1112  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1113    /* AVP - Assign tunnel ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1114    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1115    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1116    PUTSHORT(PPPOL2TP_AVPTYPE_TUNNELID, p); /* Attribute type: Tunnel ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1117    PUTSHORT(l2tp->remote_tunnel_id, p); /* Attribute value: Tunnel ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1118  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1119    /* AVP - Result code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1120    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1121    PUTSHORT(0, p); /* Vendor ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1122    PUTSHORT(PPPOL2TP_AVPTYPE_RESULTCODE, p); /* Attribute type: Result code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1123    PUTSHORT(PPPOL2TP_RESULTCODE, p); /* Attribute value: Result code */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1124  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1125    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1126  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1127  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1128  static err_t pppol2tp_xmit(pppol2tp_pcb *l2tp, struct pbuf *pb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1129    u8_t *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1130  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1131    /* make room for L2TP header - should not fail */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1132    if (pbuf_add_header(pb, PPPOL2TP_OUTPUT_DATA_HEADER_LEN) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1133      /* bail out */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1134      PPPDEBUG(LOG_ERR, ("pppol2tp: pppol2tp_pcb: could not allocate room for L2TP header\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1135      LINK_STATS_INC(link.lenerr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1136      pbuf_free(pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1137      return ERR_BUF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1138    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1139  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1140    p = (u8_t*)pb->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1141    PUTSHORT(PPPOL2TP_HEADERFLAG_DATA_MANDATORY, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1142    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1143    PUTSHORT(l2tp->source_session_id, p); /* Session Id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1144  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1145    return pppol2tp_udp_send(l2tp, pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1146  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1147  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1148  static err_t pppol2tp_udp_send(pppol2tp_pcb *l2tp, struct pbuf *pb) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1149    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1150    if (l2tp->netif) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1151      err = udp_sendto_if(l2tp->udp, pb, &l2tp->remote_ip, l2tp->tunnel_port, l2tp->netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1152    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1153      err = udp_sendto(l2tp->udp, pb, &l2tp->remote_ip, l2tp->tunnel_port);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1154    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1155    pbuf_free(pb);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1156    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1157  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1158  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\ppp\pppol2tp.c	  1159  #endif /* PPP_SUPPORT && PPPOL2TP_SUPPORT */

	; Module end
