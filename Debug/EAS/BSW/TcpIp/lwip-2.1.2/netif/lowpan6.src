	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc7620a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\.lowpan6.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\lowpan6.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\lowpan6.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\lowpan6.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\lowpan6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4546
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\lowpan6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	167
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	169
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	192
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	192
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	239
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	276
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	192
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	192
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	239
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	375
	.byte	3
	.word	192
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	469
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	498
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	192
	.byte	8,4
	.word	276
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	612
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	239
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	603
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	685
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	192
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	192
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	612
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	612
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	927
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	192
	.byte	8,3
	.word	192
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1084
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1093
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	239
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1227
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	192
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1338
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	192
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	192
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	192
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	192
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	239
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	239
	.byte	8,1
	.word	192
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1792
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1792
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1801
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1877
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	685
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2013
	.byte	12
	.word	192
	.byte	3
	.word	2127
	.byte	12
	.word	192
	.byte	3
	.word	2137
	.byte	12
	.word	192
	.byte	3
	.word	2147
	.byte	12
	.word	1877
	.byte	3
	.word	2157
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	192
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	192
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	685
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2132
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2142
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2152
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2162
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2167
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	276
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	276
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	276
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2519
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	276
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2669
	.byte	12
	.word	2519
	.byte	3
	.word	2806
	.byte	12
	.word	2669
	.byte	3
	.word	2816
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2162
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2811
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2821
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2826
	.byte	12
	.word	192
	.byte	3
	.word	3111
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3116
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3116
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3121
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	192
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	192
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	192
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3285
	.byte	3
	.word	1801
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	239
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	469
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3435
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	276
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	192
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1877
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	192
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	192
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	192
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3430
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3650
	.byte	12
	.word	3435
	.byte	3
	.word	3820
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	239
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	469
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	239
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	239
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3116
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3825
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3830
	.byte	12
	.word	3650
	.byte	3
	.word	4054
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4059
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4064
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	239
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4164
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	239
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	239
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	469
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4261
	.byte	8,8
	.word	192
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	192
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	192
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4355
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4064
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4064
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4261
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4164
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4364
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	192
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\lowpan6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     3   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     4   * 6LowPAN output for IPv6. Uses ND tables for link-layer addressing. Fragments packets to 6LowPAN units.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     5   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     6   * This implementation aims to conform to IEEE 802.15.4(-2015), RFC 4944 and RFC 6282.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     7   * @todo: RFC 6775.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     8   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	     9  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    10  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    11   * Copyright (c) 2015 Inico Technologies Ltd.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    12   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    13   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    14   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    15   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    16   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    17   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    18   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    19   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    20   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    21   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    22   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    23   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    24   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    25   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    26   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    27   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    28   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    29   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    30   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    31   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    32   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    33   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    34   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    35   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    36   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    37   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    38   * Author: Ivan Delamer <delamer@inicotech.com>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    39   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    40   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    41   * Please coordinate changes and requests with Ivan Delamer
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    42   * <delamer@inicotech.com>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    43   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    44  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    45  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    46   * @defgroup sixlowpan 6LoWPAN (RFC4944)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    47   * @ingroup netifs
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    48   * 6LowPAN netif implementation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    49   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    50  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    51  #include "netif/lowpan6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    52  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    53  #if LWIP_IPV6
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    54  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    55  #include "lwip/ip.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    56  #include "lwip/pbuf.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    57  #include "lwip/ip_addr.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    58  #include "lwip/netif.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    59  #include "lwip/nd6.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    60  #include "lwip/mem.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    61  #include "lwip/udp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    62  #include "lwip/tcpip.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    63  #include "lwip/snmp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    64  #include "netif/ieee802154.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    65  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    66  #include <string.h>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    67  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    68  #if LWIP_6LOWPAN_802154_HW_CRC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    69  #define LWIP_6LOWPAN_DO_CALC_CRC(buf, len) 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    70  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    71  #define LWIP_6LOWPAN_DO_CALC_CRC(buf, len) LWIP_6LOWPAN_CALC_CRC(buf, len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    72  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    73  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    74  /** This is a helper struct for reassembly of fragments
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    75   * (IEEE 802.15.4 limits to 127 bytes)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    76   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    77  struct lowpan6_reass_helper {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    78    struct lowpan6_reass_helper *next_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    79    struct pbuf *reass;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    80    struct pbuf *frags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    81    u8_t timer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    82    struct lowpan6_link_addr sender_addr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    83    u16_t datagram_size;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    84    u16_t datagram_tag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    85  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    86  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    87  /** This struct keeps track of per-netif state */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    88  struct lowpan6_ieee802154_data {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    89    /** fragment reassembly list */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    90    struct lowpan6_reass_helper *reass_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    91  #if LWIP_6LOWPAN_NUM_CONTEXTS > 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    92    /** address context for compression */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    93    ip6_addr_t lowpan6_context[LWIP_6LOWPAN_NUM_CONTEXTS];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    94  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    95    /** Datagram Tag for fragmentation */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    96    u16_t tx_datagram_tag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    97    /** local PAN ID for IEEE 802.15.4 header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    98    u16_t ieee_802154_pan_id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	    99    /** Sequence Number for IEEE 802.15.4 transmission */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   100    u8_t tx_frame_seq_num;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   101  };
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   102  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   103  /* Maximum frame size is 127 bytes minus CRC size */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   104  #define LOWPAN6_MAX_PAYLOAD (127 - 2)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   105  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   106  /** Currently, this state is global, since there's only one 6LoWPAN netif */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   107  static struct lowpan6_ieee802154_data lowpan6_data;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   108  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   109  #if LWIP_6LOWPAN_NUM_CONTEXTS > 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   110  #define LWIP_6LOWPAN_CONTEXTS(netif) lowpan6_data.lowpan6_context
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   111  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   112  #define LWIP_6LOWPAN_CONTEXTS(netif) NULL
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   113  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   114  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   115  static const struct lowpan6_link_addr ieee_802154_broadcast = {2, {0xff, 0xff}};
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   116  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   117  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   118  static struct lowpan6_link_addr short_mac_addr = {2, {0, 0}};
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   119  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   120  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   121  /* IEEE 802.15.4 specific functions: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   122  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   123  /** Write the IEEE 802.15.4 header that encapsulates the 6LoWPAN frame.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   124   * Src and dst PAN IDs are filled with the ID set by @ref lowpan6_set_pan_id.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   125   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   126   * Since the length is variable:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   127   * @returns the header length
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   128   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   129  static u8_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   130  lowpan6_write_iee802154_header(struct ieee_802154_hdr *hdr, const struct lowpan6_link_addr *src,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   131                                 const struct lowpan6_link_addr *dst)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   132  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   133    u8_t ieee_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   134    u8_t *buffer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   135    u8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   136    u16_t fc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   137  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   138    fc = IEEE_802154_FC_FT_DATA; /* send data packet (2003 frame version) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   139    fc |= IEEE_802154_FC_PANID_COMPR; /* set PAN ID compression, for now src and dst PANs are equal */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   140    if (dst != &ieee_802154_broadcast) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   141      fc |= IEEE_802154_FC_ACK_REQ; /* data packet, no broadcast: ack required. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   142    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   143    if (dst->addr_len == 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   144      fc |= IEEE_802154_FC_DST_ADDR_MODE_SHORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   145    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   146      LWIP_ASSERT("invalid dst address length", dst->addr_len == 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   147      fc |= IEEE_802154_FC_DST_ADDR_MODE_EXT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   148    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   149    if (src->addr_len == 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   150      fc |= IEEE_802154_FC_SRC_ADDR_MODE_SHORT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   151    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   152      LWIP_ASSERT("invalid src address length", src->addr_len == 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   153      fc |= IEEE_802154_FC_SRC_ADDR_MODE_EXT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   154    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   155    hdr->frame_control = fc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   156    hdr->sequence_number = lowpan6_data.tx_frame_seq_num++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   157    hdr->destination_pan_id = lowpan6_data.ieee_802154_pan_id; /* pan id */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   158  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   159    buffer = (u8_t *)hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   160    ieee_header_len = 5;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   161    i = dst->addr_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   162    /* reverse memcpy of dst addr */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   163    while (i-- > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   164      buffer[ieee_header_len++] = dst->addr[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   165    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   166    /* Source PAN ID skipped due to PAN ID Compression */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   167    i = src->addr_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   168    /* reverse memcpy of src addr */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   169    while (i-- > 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   170      buffer[ieee_header_len++] = src->addr[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   171    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   172    return ieee_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   173  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   174  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   175  /** Parse the IEEE 802.15.4 header from a pbuf.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   176   * If successful, the header is hidden from the pbuf.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   177   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   178   * PAN IDs and seuqence number are not checked
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   179   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   180   * @param p input pbuf, p->payload pointing at the IEEE 802.15.4 header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   181   * @param src pointer to source address filled from the header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   182   * @param dest pointer to destination address filled from the header
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   183   * @returns ERR_OK if successful
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   184   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   185  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   186  lowpan6_parse_iee802154_header(struct pbuf *p, struct lowpan6_link_addr *src,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   187                                 struct lowpan6_link_addr *dest)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   188  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   189    u8_t *puc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   190    s8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   191    u16_t frame_control, addr_mode;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   192    u16_t datagram_offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   193  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   194    /* Parse IEEE 802.15.4 header */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   195    puc = (u8_t *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   196    frame_control = puc[0] | (puc[1] << 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   197    datagram_offset = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   198    if (frame_control & IEEE_802154_FC_SEQNO_SUPPR) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   199      if (IEEE_802154_FC_FRAME_VERSION_GET(frame_control) <= 1) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   200        /* sequence number suppressed, this is not valid for versions 0/1 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   201        return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   202      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   203    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   204      datagram_offset++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   205    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   206    datagram_offset += 2; /* Skip destination PAN ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   207    addr_mode = frame_control & IEEE_802154_FC_DST_ADDR_MODE_MASK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   208    if (addr_mode == IEEE_802154_FC_DST_ADDR_MODE_EXT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   209      /* extended address (64 bit) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   210      dest->addr_len = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   211      /* reverse memcpy: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   212      for (i = 0; i < 8; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   213        dest->addr[i] = puc[datagram_offset + 7 - i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   214      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   215      datagram_offset += 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   216    } else if (addr_mode == IEEE_802154_FC_DST_ADDR_MODE_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   217      /* short address (16 bit) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   218      dest->addr_len = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   219      /* reverse memcpy: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   220      dest->addr[0] = puc[datagram_offset + 1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   221      dest->addr[1] = puc[datagram_offset];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   222      datagram_offset += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   223    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   224      /* unsupported address mode (do we need "no address"?) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   225      return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   226    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   227  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   228    if (!(frame_control & IEEE_802154_FC_PANID_COMPR)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   229      /* No PAN ID compression, skip source PAN ID */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   230      datagram_offset += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   231    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   232  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   233    addr_mode = frame_control & IEEE_802154_FC_SRC_ADDR_MODE_MASK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   234    if (addr_mode == IEEE_802154_FC_SRC_ADDR_MODE_EXT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   235      /* extended address (64 bit) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   236      src->addr_len = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   237      /* reverse memcpy: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   238      for (i = 0; i < 8; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   239        src->addr[i] = puc[datagram_offset + 7 - i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   240      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   241      datagram_offset += 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   242    } else if (addr_mode == IEEE_802154_FC_DST_ADDR_MODE_SHORT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   243      /* short address (16 bit) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   244      src->addr_len = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   245      src->addr[0] = puc[datagram_offset + 1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   246      src->addr[1] = puc[datagram_offset];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   247      datagram_offset += 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   248    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   249      /* unsupported address mode (do we need "no address"?) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   250      return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   251    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   252  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   253    /* hide IEEE802.15.4 header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   254    if (pbuf_remove_header(p, datagram_offset)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   255      return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   256    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   257    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   258  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   259  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   260  /** Calculate the 16-bit CRC as required by IEEE 802.15.4 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   261  u16_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   262  lowpan6_calc_crc(const void* buf, u16_t len)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   263  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   264  #define CCITT_POLY_16 0x8408U
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   265    u16_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   266    u8_t b;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   267    u16_t crc = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   268    const u8_t* p = (const u8_t*)buf;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   269  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   270    for (i = 0; i < len; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   271      u8_t data = *p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   272      for (b = 0U; b < 8U; b++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   273        if (((data ^ crc) & 1) != 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   274          crc = (u16_t)((crc >> 1) ^ CCITT_POLY_16);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   275        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   276          crc = (u16_t)(crc >> 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   277        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   278        data = (u8_t)(data >> 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   279      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   280      p++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   281    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   282    return crc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   283  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   284  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   285  /* Fragmentation specific functions: */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   286  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   287  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   288  free_reass_datagram(struct lowpan6_reass_helper *lrh)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   289  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   290    if (lrh->reass) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   291      pbuf_free(lrh->reass);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   292    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   293    if (lrh->frags) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   294      pbuf_free(lrh->frags);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   295    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   296    mem_free(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   297  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   298  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   299  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   300   * Removes a datagram from the reassembly queue.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   301   **/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   302  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   303  dequeue_datagram(struct lowpan6_reass_helper *lrh, struct lowpan6_reass_helper *prev)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   304  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   305    if (lowpan6_data.reass_list == lrh) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   306      lowpan6_data.reass_list = lowpan6_data.reass_list->next_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   307    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   308      /* it wasn't the first, so it must have a valid 'prev' */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   309      LWIP_ASSERT("sanity check linked list", prev != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   310      prev->next_packet = lrh->next_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   311    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   312  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   313  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   314  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   315   * Periodic timer for 6LowPAN functions:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   316   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   317   * - Remove incomplete/old packets
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   318   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   319  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   320  lowpan6_tmr(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   321  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   322    struct lowpan6_reass_helper *lrh, *lrh_next, *lrh_prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   323  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   324    lrh = lowpan6_data.reass_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   325    while (lrh != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   326      lrh_next = lrh->next_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   327      if ((--lrh->timer) == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   328        dequeue_datagram(lrh, lrh_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   329        free_reass_datagram(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   330      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   331        lrh_prev = lrh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   332      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   333      lrh = lrh_next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   334    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   335  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   336  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   337  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   338   * Encapsulates data into IEEE 802.15.4 frames.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   339   * Fragments an IPv6 datagram into 6LowPAN units, which fit into IEEE 802.15.4 frames.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   340   * If configured, will compress IPv6 and or UDP headers.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   341   * */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   342  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   343  lowpan6_frag(struct netif *netif, struct pbuf *p, const struct lowpan6_link_addr *src, const struct lowpan6_link_addr *dst)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   344  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   345    struct pbuf *p_frag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   346    u16_t frag_len, remaining_len, max_data_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   347    u8_t *buffer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   348    u8_t ieee_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   349    u8_t lowpan6_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   350    u8_t hidden_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   351    u16_t crc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   352    u16_t datagram_offset;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   353    err_t err = ERR_IF;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   354  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   355    LWIP_ASSERT("lowpan6_frag: netif->linkoutput not set", netif->linkoutput != NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   356  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   357    /* We'll use a dedicated pbuf for building 6LowPAN fragments. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   358    p_frag = pbuf_alloc(PBUF_RAW, 127, PBUF_RAM);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   359    if (p_frag == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   360      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   361      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   362    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   363    LWIP_ASSERT("this needs a pbuf in one piece", p_frag->len == p_frag->tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   364  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   365    /* Write IEEE 802.15.4 header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   366    buffer = (u8_t *)p_frag->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   367    ieee_header_len = lowpan6_write_iee802154_header((struct ieee_802154_hdr *)buffer, src, dst);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   368    LWIP_ASSERT("ieee_header_len < p_frag->len", ieee_header_len < p_frag->len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   369  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   370  #if LWIP_6LOWPAN_IPHC
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   371    /* Perform 6LowPAN IPv6 header compression according to RFC 6282 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   372    /* do the header compression (this does NOT copy any non-compressed data) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   373    err = lowpan6_compress_headers(netif, (u8_t *)p->payload, p->len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   374      &buffer[ieee_header_len], p_frag->len - ieee_header_len, &lowpan6_header_len,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   375      &hidden_header_len, LWIP_6LOWPAN_CONTEXTS(netif), src, dst);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   376    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   377      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   378      pbuf_free(p_frag);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   379      return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   380    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   381    pbuf_remove_header(p, hidden_header_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   383  #else /* LWIP_6LOWPAN_IPHC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   384    /* Send uncompressed IPv6 header with appropriate dispatch byte. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   385    lowpan6_header_len = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   386    buffer[ieee_header_len] = 0x41; /* IPv6 dispatch */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   387  #endif /* LWIP_6LOWPAN_IPHC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   388  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   389    /* Calculate remaining packet length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   390    remaining_len = p->tot_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   391  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   392    if (remaining_len > 0x7FF) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   393      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   394      /* datagram_size must fit into 11 bit */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   395      pbuf_free(p_frag);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   396      return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   397    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   398  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   399    /* Fragment, or 1 packet? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   400    max_data_len = LOWPAN6_MAX_PAYLOAD - ieee_header_len - lowpan6_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   401    if (remaining_len > max_data_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   402      u16_t data_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   403      /* We must move the 6LowPAN header to make room for the FRAG header. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   404      memmove(&buffer[ieee_header_len + 4], &buffer[ieee_header_len], lowpan6_header_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   405  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   406      /* Now we need to fragment the packet. FRAG1 header first */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   407      buffer[ieee_header_len] = 0xc0 | (((p->tot_len + hidden_header_len) >> 8) & 0x7);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   408      buffer[ieee_header_len + 1] = (p->tot_len + hidden_header_len) & 0xff;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   409  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   410      lowpan6_data.tx_datagram_tag++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   411      buffer[ieee_header_len + 2] = (lowpan6_data.tx_datagram_tag >> 8) & 0xff;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   412      buffer[ieee_header_len + 3] = lowpan6_data.tx_datagram_tag & 0xff;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   413  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   414      /* Fragment follows. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   415      data_len = (max_data_len - 4) & 0xf8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   416      frag_len = data_len + lowpan6_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   417  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   418      pbuf_copy_partial(p, buffer + ieee_header_len + lowpan6_header_len + 4, frag_len - lowpan6_header_len, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   419      remaining_len -= frag_len - lowpan6_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   420      /* datagram offset holds the offset before compression */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   421      datagram_offset = frag_len - lowpan6_header_len + hidden_header_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   422      LWIP_ASSERT("datagram offset must be a multiple of 8", (datagram_offset & 7) == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   423  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   424      /* Calculate frame length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   425      p_frag->len = p_frag->tot_len = ieee_header_len + 4 + frag_len + 2; /* add 2 bytes for crc*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   426  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   427      /* 2 bytes CRC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   428      crc = LWIP_6LOWPAN_DO_CALC_CRC(p_frag->payload, p_frag->len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   429      pbuf_take_at(p_frag, &crc, 2, p_frag->len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   430  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   431      /* send the packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   432      MIB2_STATS_NETIF_ADD(netif, ifoutoctets, p_frag->tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   433      LWIP_DEBUGF(LWIP_LOWPAN6_DEBUG | LWIP_DBG_TRACE, ("lowpan6_send: sending packet %p\n", (void *)p));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   434      err = netif->linkoutput(netif, p_frag);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   435  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   436      while ((remaining_len > 0) && (err == ERR_OK)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   437        struct ieee_802154_hdr *hdr = (struct ieee_802154_hdr *)buffer;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   438        /* new frame, new seq num for ACK */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   439        hdr->sequence_number = lowpan6_data.tx_frame_seq_num++;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   440  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   441        buffer[ieee_header_len] |= 0x20; /* Change FRAG1 to FRAGN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   442  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   443        LWIP_ASSERT("datagram offset must be a multiple of 8", (datagram_offset & 7) == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   444        buffer[ieee_header_len + 4] = (u8_t)(datagram_offset >> 3); /* datagram offset in FRAGN header (datagram_offset is max. 11 bit) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   445  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   446        frag_len = (127 - ieee_header_len - 5 - 2) & 0xf8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   447        if (frag_len > remaining_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   448          frag_len = remaining_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   449        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   450  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   451        pbuf_copy_partial(p, buffer + ieee_header_len + 5, frag_len, p->tot_len - remaining_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   452        remaining_len -= frag_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   453        datagram_offset += frag_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   454  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   455        /* Calculate frame length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   456        p_frag->len = p_frag->tot_len = frag_len + 5 + ieee_header_len + 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   457  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   458        /* 2 bytes CRC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   459        crc = LWIP_6LOWPAN_DO_CALC_CRC(p_frag->payload, p_frag->len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   460        pbuf_take_at(p_frag, &crc, 2, p_frag->len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   461  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   462        /* send the packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   463        MIB2_STATS_NETIF_ADD(netif, ifoutoctets, p_frag->tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   464        LWIP_DEBUGF(LWIP_LOWPAN6_DEBUG | LWIP_DBG_TRACE, ("lowpan6_send: sending packet %p\n", (void *)p));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   465        err = netif->linkoutput(netif, p_frag);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   466      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   467    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   468      /* It fits in one frame. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   469      frag_len = remaining_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   470  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   471      /* Copy IPv6 packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   472      pbuf_copy_partial(p, buffer + ieee_header_len + lowpan6_header_len, frag_len, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   473      remaining_len = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   474  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   475      /* Calculate frame length */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   476      p_frag->len = p_frag->tot_len = frag_len + lowpan6_header_len + ieee_header_len + 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   477      LWIP_ASSERT("", p_frag->len <= 127);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   478  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   479      /* 2 bytes CRC */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   480      crc = LWIP_6LOWPAN_DO_CALC_CRC(p_frag->payload, p_frag->len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   481      pbuf_take_at(p_frag, &crc, 2, p_frag->len - 2);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   482  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   483      /* send the packet */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   484      MIB2_STATS_NETIF_ADD(netif, ifoutoctets, p_frag->tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   485      LWIP_DEBUGF(LWIP_LOWPAN6_DEBUG | LWIP_DBG_TRACE, ("lowpan6_send: sending packet %p\n", (void *)p));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   486      err = netif->linkoutput(netif, p_frag);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   487    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   488  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   489    pbuf_free(p_frag);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   490  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   491    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   492  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   493  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   494  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   495   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   496   * Set context
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   497   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   498  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   499  lowpan6_set_context(u8_t idx, const ip6_addr_t *context)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   500  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   501  #if LWIP_6LOWPAN_NUM_CONTEXTS > 0
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   502    if (idx >= LWIP_6LOWPAN_NUM_CONTEXTS) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   503      return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   504    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   505  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   506    IP6_ADDR_ZONECHECK(context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   507  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   508    ip6_addr_set(&lowpan6_data.lowpan6_context[idx], context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   509  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   510    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   511  #else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   512    LWIP_UNUSED_ARG(idx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   513    LWIP_UNUSED_ARG(context);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   514    return ERR_ARG;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   515  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   516  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   517  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   518  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   519  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   520   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   521   * Set short address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   522   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   523  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   524  lowpan6_set_short_addr(u8_t addr_high, u8_t addr_low)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   525  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   526    short_mac_addr.addr[0] = addr_high;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   527    short_mac_addr.addr[1] = addr_low;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   528  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   529    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   530  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   531  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   532  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   533  /* Create IEEE 802.15.4 address from netif address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   534  static err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   535  lowpan6_hwaddr_to_addr(struct netif *netif, struct lowpan6_link_addr *addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   536  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   537    addr->addr_len = 8;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   538    if (netif->hwaddr_len == 8) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   539      LWIP_ERROR("NETIF_MAX_HWADDR_LEN >= 8 required", sizeof(netif->hwaddr) >= 8, return ERR_VAL;);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   540      SMEMCPY(addr->addr, netif->hwaddr, 8);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   541    } else if (netif->hwaddr_len == 6) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   542      /* Copy from MAC-48 */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   543      SMEMCPY(addr->addr, netif->hwaddr, 3);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   544      addr->addr[3] = addr->addr[4] = 0xff;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   545      SMEMCPY(&addr->addr[5], &netif->hwaddr[3], 3);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   546    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   547      /* Invalid address length, don't know how to convert this */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   548      return ERR_VAL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   549    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   550    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   551  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   552  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   553  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   554   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   555   * Resolve and fill-in IEEE 802.15.4 address header for outgoing IPv6 packet.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   556   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   557   * Perform Header Compression and fragment if necessary.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   558   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   559   * @param netif The lwIP network interface which the IP packet will be sent on.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   560   * @param q The pbuf(s) containing the IP packet to be sent.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   561   * @param ip6addr The IP address of the packet destination.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   562   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   563   * @return err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   564   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   565  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   566  lowpan6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   567  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   568    err_t result;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   569    const u8_t *hwaddr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   570    struct lowpan6_link_addr src, dest;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   571  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   572    ip6_addr_t ip6_src;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   573    struct ip6_hdr *ip6_hdr;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   574  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   575  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   576  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   577    /* Check if we can compress source address (use aligned copy) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   578    ip6_hdr = (struct ip6_hdr *)q->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   579    ip6_addr_copy_from_packed(ip6_src, ip6_hdr->src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   580    ip6_addr_assign_zone(&ip6_src, IP6_UNICAST, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   581    if (lowpan6_get_address_mode(&ip6_src, &short_mac_addr) == 3) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   582      src.addr_len = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   583      src.addr[0] = short_mac_addr.addr[0];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   584      src.addr[1] = short_mac_addr.addr[1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   585    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   586  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   587    {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   588      result = lowpan6_hwaddr_to_addr(netif, &src);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   589      if (result != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   590        MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   591        return result;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   592      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   593    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   594  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   595    /* multicast destination IP address? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   596    if (ip6_addr_ismulticast(ip6addr)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   597      MIB2_STATS_NETIF_INC(netif, ifoutnucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   598      /* We need to send to the broadcast address.*/
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   599      return lowpan6_frag(netif, q, &src, &ieee_802154_broadcast);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   600    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   601  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   602    /* We have a unicast destination IP address */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   603    /* @todo anycast? */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   604  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   605  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   606    if (src.addr_len == 2) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   607      /* If source address was compressable to short_mac_addr, and dest has same subnet and
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   608       * is also compressable to 2-bytes, assume we can infer dest as a short address too. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   609      dest.addr_len = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   610      dest.addr[0] = ((u8_t *)q->payload)[38];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   611      dest.addr[1] = ((u8_t *)q->payload)[39];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   612      if ((src.addr_len == 2) && (ip6_addr_netcmp_zoneless(&ip6_hdr->src, &ip6_hdr->dest)) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   613          (lowpan6_get_address_mode(ip6addr, &dest) == 3)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   614        MIB2_STATS_NETIF_INC(netif, ifoutucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   615        return lowpan6_frag(netif, q, &src, &dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   616      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   617    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   618  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   619  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   620    /* Ask ND6 what to do with the packet. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   621    result = nd6_get_next_hop_addr_or_queue(netif, q, ip6addr, &hwaddr);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   622    if (result != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   623      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   624      return result;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   625    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   626  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   627    /* If no hardware address is returned, nd6 has queued the packet for later. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   628    if (hwaddr == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   629      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   630    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   631  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   632    /* Send out the packet using the returned hardware address. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   633    dest.addr_len = netif->hwaddr_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   634    /* XXX: Inferring the length of the source address from the destination address
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   635     * is not correct for IEEE 802.15.4, but currently we don't get this information
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   636     * from the neighbor cache */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   637    SMEMCPY(dest.addr, hwaddr, netif->hwaddr_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   638    MIB2_STATS_NETIF_INC(netif, ifoutucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   639    return lowpan6_frag(netif, q, &src, &dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   640  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   641  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   642   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   643   * NETIF input function: don't free the input pbuf when returning != ERR_OK!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   644   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   645  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   646  lowpan6_input(struct pbuf *p, struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   647  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   648    u8_t *puc, b;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   649    s8_t i;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   650    struct lowpan6_link_addr src, dest;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   651    u16_t datagram_size = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   652    u16_t datagram_offset, datagram_tag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   653    struct lowpan6_reass_helper *lrh, *lrh_next, *lrh_prev = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   654  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   655    if (p == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   656      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   657    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   658  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   659    MIB2_STATS_NETIF_ADD(netif, ifinoctets, p->tot_len);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   660  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   661    if (p->len != p->tot_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   662      /* for now, this needs a pbuf in one piece */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   663      goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   664    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   665  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   666    if (lowpan6_parse_iee802154_header(p, &src, &dest) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   667      goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   668    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   669  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   670    /* Check dispatch. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   671    puc = (u8_t *)p->payload;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   672  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   673    b = *puc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   674    if ((b & 0xf8) == 0xc0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   675      /* FRAG1 dispatch. add this packet to reassembly list. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   676      datagram_size = ((u16_t)(puc[0] & 0x07) << 8) | (u16_t)puc[1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   677      datagram_tag = ((u16_t)puc[2] << 8) | (u16_t)puc[3];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   678  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   679      /* check for duplicate */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   680      lrh = lowpan6_data.reass_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   681      while (lrh != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   682        uint8_t discard = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   683        lrh_next = lrh->next_packet;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   684        if ((lrh->sender_addr.addr_len == src.addr_len) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   685            (memcmp(lrh->sender_addr.addr, src.addr, src.addr_len) == 0)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   686          /* address match with packet in reassembly. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   687          if ((datagram_tag == lrh->datagram_tag) && (datagram_size == lrh->datagram_size)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   688            /* duplicate fragment. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   689            goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   690          } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   691            /* We are receiving the start of a new datagram. Discard old one (incomplete). */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   692            discard = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   693          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   694        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   695        if (discard) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   696          dequeue_datagram(lrh, lrh_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   697          free_reass_datagram(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   698        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   699          lrh_prev = lrh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   700        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   701        /* Check next datagram in queue. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   702        lrh = lrh_next;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   703      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   704  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   705      pbuf_remove_header(p, 4); /* hide frag1 dispatch */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   706  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   707      lrh = (struct lowpan6_reass_helper *) mem_malloc(sizeof(struct lowpan6_reass_helper));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   708      if (lrh == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   709        goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   710      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   711  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   712      lrh->sender_addr.addr_len = src.addr_len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   713      for (i = 0; i < src.addr_len; i++) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   714        lrh->sender_addr.addr[i] = src.addr[i];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   715      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   716      lrh->datagram_size = datagram_size;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   717      lrh->datagram_tag = datagram_tag;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   718      lrh->frags = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   719      if (*(u8_t *)p->payload == 0x41) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   720        /* This is a complete IPv6 packet, just skip dispatch byte. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   721        pbuf_remove_header(p, 1); /* hide dispatch byte. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   722        lrh->reass = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   723      } else if ((*(u8_t *)p->payload & 0xe0 ) == 0x60) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   724        lrh->reass = lowpan6_decompress(p, datagram_size, LWIP_6LOWPAN_CONTEXTS(netif), &src, &dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   725        if (lrh->reass == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   726          /* decompression failed */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   727          mem_free(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   728          goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   729        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   730      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   731      /* TODO: handle the case where we already have FRAGN received */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   732      lrh->next_packet = lowpan6_data.reass_list;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   733      lrh->timer = 2;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   734      lowpan6_data.reass_list = lrh;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   735  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   736      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   737    } else if ((b & 0xf8) == 0xe0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   738      /* FRAGN dispatch, find packet being reassembled. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   739      datagram_size = ((u16_t)(puc[0] & 0x07) << 8) | (u16_t)puc[1];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   740      datagram_tag = ((u16_t)puc[2] << 8) | (u16_t)puc[3];
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   741      datagram_offset = (u16_t)puc[4] << 3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   742      pbuf_remove_header(p, 4); /* hide frag1 dispatch but keep datagram offset for reassembly */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   743  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   744      for (lrh = lowpan6_data.reass_list; lrh != NULL; lrh_prev = lrh, lrh = lrh->next_packet) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   745        if ((lrh->sender_addr.addr_len == src.addr_len) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   746            (memcmp(lrh->sender_addr.addr, src.addr, src.addr_len) == 0) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   747            (datagram_tag == lrh->datagram_tag) &&
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   748            (datagram_size == lrh->datagram_size)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   749          break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   750        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   751      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   752      if (lrh == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   753        /* rogue fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   754        goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   755      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   756      /* Insert new pbuf into list of fragments. Each fragment is a pbuf,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   757         this only works for unchained pbufs. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   758      LWIP_ASSERT("p->next == NULL", p->next == NULL);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   759      if (lrh->reass != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   760        /* FRAG1 already received, check this offset against first len */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   761        if (datagram_offset < lrh->reass->len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   762          /* fragment overlap, discard old fragments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   763          dequeue_datagram(lrh, lrh_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   764          free_reass_datagram(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   765          goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   766        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   767      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   768      if (lrh->frags == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   769        /* first FRAGN */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   770        lrh->frags = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   771      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   772        /* find the correct place to insert */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   773        struct pbuf *q, *last;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   774        u16_t new_frag_len = p->len - 1; /* p->len includes datagram_offset byte */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   775        for (q = lrh->frags, last = NULL; q != NULL; last = q, q = q->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   776          u16_t q_datagram_offset = ((u8_t *)q->payload)[0] << 3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   777          u16_t q_frag_len = q->len - 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   778          if (datagram_offset < q_datagram_offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   779            if (datagram_offset + new_frag_len > q_datagram_offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   780              /* overlap, discard old fragments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   781              dequeue_datagram(lrh, lrh_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   782              free_reass_datagram(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   783              goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   784            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   785            /* insert here */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   786            break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   787          } else if (datagram_offset == q_datagram_offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   788            if (q_frag_len != new_frag_len) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   789              /* fragment mismatch, discard old fragments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   790              dequeue_datagram(lrh, lrh_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   791              free_reass_datagram(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   792              goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   793            }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   794            /* duplicate, ignore */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   795            pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   796            return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   797          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   798        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   799        /* insert fragment */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   800        if (last == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   801          lrh->frags = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   802        } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   803          last->next = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   804          p->next = q;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   805        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   806      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   807      /* check if all fragments were received */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   808      if (lrh->reass) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   809        u16_t offset = lrh->reass->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   810        struct pbuf *q;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   811        for (q = lrh->frags; q != NULL; q = q->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   812          u16_t q_datagram_offset = ((u8_t *)q->payload)[0] << 3;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   813          if (q_datagram_offset != offset) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   814            /* not complete, wait for more fragments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   815            return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   816          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   817          offset += q->len - 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   818        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   819        if (offset == datagram_size) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   820          /* all fragments received, combine pbufs */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   821          u16_t datagram_left = datagram_size - lrh->reass->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   822          for (q = lrh->frags; q != NULL; q = q->next) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   823            /* hide datagram_offset byte now */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   824            pbuf_remove_header(q, 1);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   825            q->tot_len = datagram_left;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   826            datagram_left -= q->len;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   827          }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   828          LWIP_ASSERT("datagram_left == 0", datagram_left == 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   829          q = lrh->reass;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   830          q->tot_len = datagram_size;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   831          q->next = lrh->frags;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   832          lrh->frags = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   833          lrh->reass = NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   834          dequeue_datagram(lrh, lrh_prev);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   835          mem_free(lrh);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   836  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   837          /* @todo: distinguish unicast/multicast */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   838          MIB2_STATS_NETIF_INC(netif, ifinucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   839          return ip6_input(q, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   840        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   841      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   842      /* pbuf enqueued, waiting for more fragments */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   843      return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   844    } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   845      if (b == 0x41) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   846        /* This is a complete IPv6 packet, just skip dispatch byte. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   847        pbuf_remove_header(p, 1); /* hide dispatch byte. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   848      } else if ((b & 0xe0 ) == 0x60) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   849        /* IPv6 headers are compressed using IPHC. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   850        p = lowpan6_decompress(p, datagram_size, LWIP_6LOWPAN_CONTEXTS(netif), &src, &dest);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   851        if (p == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   852          MIB2_STATS_NETIF_INC(netif, ifindiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   853          return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   854        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   855      } else {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   856        goto lowpan6_input_discard;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   857      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   858  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   859      /* @todo: distinguish unicast/multicast */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   860      MIB2_STATS_NETIF_INC(netif, ifinucastpkts);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   861  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   862      return ip6_input(p, netif);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   863    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   864  lowpan6_input_discard:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   865    MIB2_STATS_NETIF_INC(netif, ifindiscards);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   866    pbuf_free(p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   867    /* always return ERR_OK here to prevent the caller freeing the pbuf */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   868    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   869  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   870  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   871  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   872   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   873   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   874  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   875  lowpan6_if_init(struct netif *netif)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   876  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   877    netif->name[0] = 'L';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   878    netif->name[1] = '6';
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   879    netif->output_ip6 = lowpan6_output;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   880  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   881    MIB2_INIT_NETIF(netif, snmp_ifType_other, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   882  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   883    /* maximum transfer unit */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   884    netif->mtu = 1280;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   885  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   886    /* broadcast capability */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   887    netif->flags = NETIF_FLAG_BROADCAST /* | NETIF_FLAG_LOWPAN6 */;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   888  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   889    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   890  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   891  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   892  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   893   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   894   * Set PAN ID
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   895   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   896  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   897  lowpan6_set_pan_id(u16_t pan_id)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   898  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   899    lowpan6_data.ieee_802154_pan_id = pan_id;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   900  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   901    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   902  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   903  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   904  #if !NO_SYS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   905  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   906   * @ingroup sixlowpan
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   907   * Pass a received packet to tcpip_thread for input processing
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   908   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   909   * @param p the received packet, p->payload pointing to the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   910   *          IEEE 802.15.4 header.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   911   * @param inp the network interface on which the packet was received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   912   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   913  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   914  tcpip_6lowpan_input(struct pbuf *p, struct netif *inp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   915  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   916    return tcpip_inpkt(p, inp, lowpan6_input);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   917  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   918  #endif /* !NO_SYS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   919  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\netif\lowpan6.c	   920  #endif /* LWIP_IPV6 */

	; Module end
