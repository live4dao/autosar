	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc35556a --dep-file=EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\.tcpip.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\tcpip.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\tcpip.src ..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\tcpip.c"
	.compiler_name		"ctc"
	;source	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\tcpip.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	4542
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\tcpip.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L5
	.byte	2,1,3
	.word	163
	.byte	4
	.byte	'__codeptr',0,1,1,1
	.word	165
	.byte	5
	.byte	'unsigned char',0,1,8,4
	.byte	'boolean',0,2,102,29
	.word	188
	.byte	4
	.byte	'uint8',0,2,106,29
	.word	188
	.byte	5
	.byte	'unsigned short int',0,2,7,4
	.byte	'uint16',0,2,110,29
	.word	235
	.byte	5
	.byte	'unsigned long int',0,4,7,4
	.byte	'uint32',0,2,114,29
	.word	272
	.byte	4
	.byte	'Std_ReturnType',0,3,109,16
	.word	188
	.byte	4
	.byte	'PduIdType',0,4,37,21
	.word	188
	.byte	4
	.byte	'PduLengthType',0,4,41,22
	.word	235
	.byte	6,5,101,9,1,7
	.byte	'BUFREQ_OK',0,0,7
	.byte	'BUFREQ_E_NOT_OK',0,1,7
	.byte	'BUFREQ_E_BUSY',0,2,7
	.byte	'BUFREQ_E_OVFL',0,3,0,4
	.byte	'BufReq_ReturnType',0,5,107,3
	.word	371
	.byte	3
	.word	188
	.byte	4
	.byte	'SduDataPtrType',0,5,189,1,40
	.word	465
	.byte	6,5,204,1,9,1,7
	.byte	'TP_DATACONF',0,0,7
	.byte	'TP_DATARETRY',0,1,7
	.byte	'TP_CONFPENDING',0,2,0,4
	.byte	'TpDataStateType',0,5,216,1,3
	.word	494
	.byte	4
	.byte	'TcpIp_SocketIdType',0,6,50,16
	.word	188
	.byte	8,4
	.word	272
	.byte	9,0,0,10,6,52,9,4,11
	.byte	'Addr',0
	.word	599
	.byte	4,2,35,0,0,4
	.byte	'TcpIp_IpAddressType',0,6,55,3
	.word	608
	.byte	4
	.byte	'TcpIp_DomainType',0,6,61,16
	.word	235
	.byte	10,6,68,9,8,11
	.byte	'Domain',0
	.word	235
	.byte	2,2,35,0,11
	.byte	'Port',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'Addr',0
	.word	599
	.byte	4,2,35,4,0,4
	.byte	'TcpIp_SockAddrInetType',0,6,73,3
	.word	681
	.byte	4
	.byte	'TcpIp_AddressType',0,7,128,1,15
	.word	188
	.byte	4
	.byte	'TcpIp_CtrlIdType',0,7,142,1,15
	.word	188
	.byte	4
	.byte	'TcpIp_IpAddrStateType',0,7,144,1,15
	.word	188
	.byte	4
	.byte	'TcpIp_LocalAddrAssignmentConfigType',0,7,149,1,15
	.word	188
	.byte	4
	.byte	'TcpIp_StaticAddrIdType',0,7,151,1,15
	.word	188
	.byte	10,7,152,1,9,12,11
	.byte	'State',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'Netmask',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'IpAddr',0
	.word	608
	.byte	4,2,35,4,11
	.byte	'DefaultRouter',0
	.word	608
	.byte	4,2,35,8,0,4
	.byte	'TcpIp_StaticIpAddrType',0,7,162,1,3
	.word	923
	.byte	4
	.byte	'TcpIp_LocalAddrIdType',0,7,173,1,15
	.word	188
	.byte	8,3
	.word	188
	.byte	9,2,0,10,7,231,1,9,8,11
	.byte	'CtrlId',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'Address',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'Domain',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'StaticAddrId',0
	.word	188
	.byte	1,2,35,4,11
	.byte	'Assignments',0
	.word	1080
	.byte	3,2,35,5,0,4
	.byte	'TcpIp_LocalAddrConfigType',0,7,243,1,3
	.word	1089
	.byte	10,7,245,1,9,4,11
	.byte	'ArpConfigId',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'DHCPConfigId',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'AutoIpInitTimeout',0
	.word	235
	.byte	2,2,35,2,0,4
	.byte	'TcpIp_IpV4CtrlConfigType',0,7,130,2,3
	.word	1223
	.byte	10,7,133,2,9,8,11
	.byte	'CtrlIdx',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'FramePrio',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'UnicastAddrId',0
	.word	188
	.byte	1,2,35,2,11
	.byte	'UnicastAddrLimit',0
	.word	188
	.byte	1,2,35,3,11
	.byte	'MulticastAddrId',0
	.word	188
	.byte	1,2,35,4,11
	.byte	'LocalAddrLimit',0
	.word	188
	.byte	1,2,35,5,11
	.byte	'IpV4CtrlId',0
	.word	188
	.byte	1,2,35,6,11
	.byte	'IpV6CtrlId',0
	.word	188
	.byte	1,2,35,7,0,4
	.byte	'TcpIp_NetIfCtrlConfigType',0,7,148,2,3
	.word	1334
	.byte	4
	.byte	'SoAd_RoutingGroupIdType',0,8,43,15
	.word	188
	.byte	4
	.byte	'SoAd_SoConIdType',0,8,44,15
	.word	188
	.byte	4
	.byte	'SoAd_SoConGroupIdType',0,8,45,15
	.word	188
	.byte	4
	.byte	'SoAd_PduRouteIdType',0,8,46,15
	.word	188
	.byte	4
	.byte	'SoAd_PduRouteDestIdType',0,8,47,15
	.word	188
	.byte	4
	.byte	'SoAd_SocketRouteIdType',0,8,48,15
	.word	188
	.byte	4
	.byte	'SoAd_IfTxUnconfirmedType',0,8,49,16
	.word	235
	.byte	4
	.byte	'SoAd_IfTxTimerType',0,8,51,16
	.word	235
	.byte	8,1
	.word	188
	.byte	9,0,0,10,8,53,9,2,11
	.byte	'Mask',0
	.word	1788
	.byte	1,2,35,0,11
	.byte	'RoutingState',0
	.word	1788
	.byte	1,2,35,1,0,4
	.byte	'SoAd_RoutingGroupCtrlType',0,8,57,3
	.word	1797
	.byte	6,8,63,9,1,7
	.byte	'SOAD_UL_DOIP',0,0,7
	.byte	'SOAD_UL_UDPNM',0,1,7
	.byte	'SOAD_UL_PDUR',0,2,7
	.byte	'SOAD_UL_XCP',0,3,7
	.byte	'SOAD_UL_MAX',0,4,0,4
	.byte	'SoAd_ULIndexType',0,8,71,3
	.word	1873
	.byte	4
	.byte	'SoAd_RemoteAddressType',0,9,113,32
	.word	681
	.byte	6,9,115,9,1,7
	.byte	'SOAD_SOCON_UNINIT',0,0,7
	.byte	'SOAD_SOCON_OFFLINE',0,1,7
	.byte	'SOAD_SOCON_RECONN',0,2,7
	.byte	'SOAD_SOCON_ONLINE',0,3,0,4
	.byte	'SoAd_SoConModeType',0,9,121,3
	.word	2009
	.byte	12
	.word	188
	.byte	3
	.word	2123
	.byte	12
	.word	188
	.byte	3
	.word	2133
	.byte	12
	.word	188
	.byte	3
	.word	2143
	.byte	12
	.word	1873
	.byte	3
	.word	2153
	.byte	10,9,129,1,9,36,11
	.byte	'IfBufferLength',0
	.word	235
	.byte	2,2,35,0,11
	.byte	'IfBufferOffset',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'TpBufferLength',0
	.word	235
	.byte	2,2,35,4,11
	.byte	'TpBufferOffset',0
	.word	235
	.byte	2,2,35,6,11
	.byte	'PduRouteNum',0
	.word	188
	.byte	1,2,35,8,11
	.byte	'SocketRouteNum',0
	.word	188
	.byte	1,2,35,9,11
	.byte	'PduRouteDestNum',0
	.word	188
	.byte	1,2,35,10,11
	.byte	'RemoteAddrState',0
	.word	188
	.byte	1,2,35,11,11
	.byte	'RemoteAddr',0
	.word	681
	.byte	8,2,35,12,11
	.byte	'PduRouteDestList',0
	.word	2128
	.byte	4,2,35,20,11
	.byte	'PduRouteList',0
	.word	2138
	.byte	4,2,35,24,11
	.byte	'SocketRouteList',0
	.word	2148
	.byte	4,2,35,28,11
	.byte	'SoConModeChgList',0
	.word	2158
	.byte	4,2,35,32,0,4
	.byte	'SoAd_SocketConnectionType',0,9,146,1,3
	.word	2163
	.byte	10,9,148,1,9,16,11
	.byte	'CtrlFlag',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'KeepAliveProbesMax',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'KeepAliveInterval',0
	.word	272
	.byte	4,2,35,4,11
	.byte	'KeepAliveTime',0
	.word	272
	.byte	4,2,35,8,11
	.byte	'TxQuota',0
	.word	272
	.byte	4,2,35,12,0,4
	.byte	'SoAd_TcpProtocolType',0,9,155,1,3
	.word	2515
	.byte	10,9,157,1,9,12,11
	.byte	'CtrlFlag',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'nPduTxBufferMin',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'TriggerTimeout',0
	.word	235
	.byte	2,2,35,4,11
	.byte	'AliveSupervisionTimeout',0
	.word	272
	.byte	4,2,35,6,0,4
	.byte	'SoAd_UdpProtocolType',0,9,163,1,3
	.word	2665
	.byte	12
	.word	2515
	.byte	3
	.word	2802
	.byte	12
	.word	2665
	.byte	3
	.word	2812
	.byte	10,9,165,1,9,24,11
	.byte	'GroupId',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'CtrlFlag',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'FramePriority',0
	.word	188
	.byte	1,2,35,2,11
	.byte	'SoConNum',0
	.word	188
	.byte	1,2,35,3,11
	.byte	'SoConId',0
	.word	188
	.byte	1,2,35,4,11
	.byte	'IpAddrAssignChgNum',0
	.word	188
	.byte	1,2,35,5,11
	.byte	'LocalAddrId',0
	.word	188
	.byte	1,2,35,6,11
	.byte	'LocalPort',0
	.word	235
	.byte	2,2,35,8,11
	.byte	'IpAddrAssignChgList',0
	.word	2158
	.byte	4,2,35,12,11
	.byte	'TcpProtocolPtr',0
	.word	2807
	.byte	4,2,35,16,11
	.byte	'UdpProtocolPtr',0
	.word	2817
	.byte	4,2,35,20,0,4
	.byte	'SoAd_SocketConnectionGroupType',0,9,178,1,3
	.word	2822
	.byte	12
	.word	188
	.byte	3
	.word	3107
	.byte	10,9,180,1,9,12,11
	.byte	'CtrlFlag',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'PduRouteDestNum',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'SocketRouteDestNum',0
	.word	188
	.byte	1,2,35,2,11
	.byte	'PduRouteDestList',0
	.word	3112
	.byte	4,2,35,4,11
	.byte	'SocketRouteDestList',0
	.word	3112
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RoutingGroupType',0,9,187,1,3
	.word	3117
	.byte	10,9,189,1,9,6,11
	.byte	'ULType',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'ULIndex',0
	.word	1873
	.byte	1,2,35,1,11
	.byte	'CtrlFlag',0
	.word	188
	.byte	1,2,35,2,11
	.byte	'RouteDestNum',0
	.word	188
	.byte	1,2,35,3,11
	.byte	'RouteDestId',0
	.word	188
	.byte	1,2,35,4,11
	.byte	'TxPduId',0
	.word	188
	.byte	1,2,35,5,0,4
	.byte	'SoAd_PduRouteType',0,9,204,1,3
	.word	3281
	.byte	3
	.word	1797
	.byte	10,9,206,1,9,20,11
	.byte	'TxPduHeaderId',0
	.word	272
	.byte	4,2,35,0,11
	.byte	'SoConNum',0
	.word	188
	.byte	1,2,35,4,11
	.byte	'SoConId',0
	.word	188
	.byte	1,2,35,5,11
	.byte	'PduRouteId',0
	.word	188
	.byte	1,2,35,6,11
	.byte	'UdpTriggerMode',0
	.word	188
	.byte	1,2,35,7,11
	.byte	'UdpTriggerTimeout',0
	.word	235
	.byte	2,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3426
	.byte	4,2,35,12,11
	.byte	'IfTriggerList',0
	.word	465
	.byte	4,2,35,16,0,4
	.byte	'SoAd_PduRouteDestType',0,9,217,1,3
	.word	3431
	.byte	10,9,219,1,9,16,11
	.byte	'RxPduHeaderId',0
	.word	272
	.byte	4,2,35,0,11
	.byte	'ULType',0
	.word	188
	.byte	1,2,35,4,11
	.byte	'ULIndex',0
	.word	1873
	.byte	1,2,35,5,11
	.byte	'SoConNum',0
	.word	188
	.byte	1,2,35,6,11
	.byte	'SoConId',0
	.word	188
	.byte	1,2,35,7,11
	.byte	'RxPduId',0
	.word	188
	.byte	1,2,35,8,11
	.byte	'RoutingCtrlList',0
	.word	3426
	.byte	4,2,35,12,0,4
	.byte	'SoAd_SocketRouteType',0,9,236,1,3
	.word	3646
	.byte	12
	.word	3431
	.byte	3
	.word	3816
	.byte	10,9,155,2,9,24,11
	.byte	'State',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'Timer',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'BufferLength',0
	.word	235
	.byte	2,2,35,4,11
	.byte	'BufferOffset',0
	.word	235
	.byte	2,2,35,6,11
	.byte	'UdpTxBuffer',0
	.word	465
	.byte	4,2,35,8,11
	.byte	'TotalTxLength',0
	.word	235
	.byte	2,2,35,12,11
	.byte	'UsedTxLength',0
	.word	235
	.byte	2,2,35,14,11
	.byte	'IfTxDataBuffer',0
	.word	3112
	.byte	4,2,35,16,11
	.byte	'PduRouteDestPtr',0
	.word	3821
	.byte	4,2,35,20,0,4
	.byte	'SoAd_TxSessionType',0,9,177,2,3
	.word	3826
	.byte	12
	.word	3646
	.byte	3
	.word	4050
	.byte	10,9,180,2,9,8,11
	.byte	'PduLength',0
	.word	235
	.byte	2,2,35,0,11
	.byte	'RemainLength',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'SocketRoutePtr',0
	.word	4055
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxPduInfoType',0,9,185,2,3
	.word	4060
	.byte	10,9,187,2,9,12,11
	.byte	'TotalLength',0
	.word	235
	.byte	2,2,35,0,11
	.byte	'In',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'Out',0
	.word	235
	.byte	2,2,35,4,11
	.byte	'BufferPtr',0
	.word	465
	.byte	4,2,35,8,0,4
	.byte	'SoAd_RxFifoType',0,9,193,2,3
	.word	4160
	.byte	10,9,195,2,9,8,11
	.byte	'TotalLength',0
	.word	235
	.byte	2,2,35,0,11
	.byte	'UsedLength',0
	.word	235
	.byte	2,2,35,2,11
	.byte	'BufferPtr',0
	.word	465
	.byte	4,2,35,4,0,4
	.byte	'SoAd_RxBufferType',0,9,200,2,3
	.word	4257
	.byte	8,8
	.word	188
	.byte	9,7,0,10,9,202,2,9,48,11
	.byte	'State',0
	.word	188
	.byte	1,2,35,0,11
	.byte	'ValidHeaderLen',0
	.word	188
	.byte	1,2,35,1,11
	.byte	'PduHeader',0
	.word	4351
	.byte	8,2,35,2,11
	.byte	'RxPduInfo',0
	.word	4060
	.byte	8,2,35,12,11
	.byte	'ProcessPduInfo',0
	.word	4060
	.byte	8,2,35,20,11
	.byte	'IfBuffer',0
	.word	4257
	.byte	8,2,35,28,11
	.byte	'TpBuffer',0
	.word	4160
	.byte	12,2,35,36,0,4
	.byte	'SoAd_RxSessionType',0,9,216,2,3
	.word	4360
	.byte	4
	.byte	'u8_t',0,10,61,25
	.word	188
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,0,0,3,15,0,73,19,0,0,4,22,0,3,8,58,15,59,15
	.byte	57,15,73,19,0,0,5,36,0,3,8,11,15,62,15,0,0,6,4,1,58,15,59,15,57,15,11,15,0,0,7,40,0,3,8,28,13,0,0,8,1
	.byte	1,11,15,73,19,0,0,9,33,0,47,15,0,0,10,19,1,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0
	.byte	0,12,38,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch',0,0
	.byte	'..\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api\\tcpip.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Std_Types.h',0,1,0,0
	.byte	'ComStack_Types_Cfg.h',0,2,0,0
	.byte	'ComStack_Types.h',0,3,0,0
	.byte	'TcpIp_GeneratedTypes.h',0,2,0,0
	.byte	'TcpIp_Types.h',0,4,0,0
	.byte	'SoAd_GeneratedTypes.h',0,2,0,0
	.byte	'SoAd_Types.h',0,5,0,0
	.byte	'cc.h',0,6,0,0,0
.L9:
.L7:

; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     1  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     2   * @file
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     3   * Sequential API Main thread module
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     4   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     5   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     6  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     7  /*
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     8   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	     9   * All rights reserved.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    10   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    11   * Redistribution and use in source and binary forms, with or without modification,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    12   * are permitted provided that the following conditions are met:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    13   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    14   * 1. Redistributions of source code must retain the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    15   *    this list of conditions and the following disclaimer.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    16   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    17   *    this list of conditions and the following disclaimer in the documentation
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    18   *    and/or other materials provided with the distribution.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    19   * 3. The name of the author may not be used to endorse or promote products
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    20   *    derived from this software without specific prior written permission.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    21   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    22   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    23   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    24   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    25   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    26   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    27   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    28   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    29   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    30   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    31   * OF SUCH DAMAGE.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    32   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    33   * This file is part of the lwIP TCP/IP stack.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    34   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    35   * Author: Adam Dunkels <adam@sics.se>
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    36   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    37   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    38  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    39  #include "lwip/opt.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    40  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    41  #if !NO_SYS /* don't build if not configured for use in lwipopts.h */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    42  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    43  #include "lwip/priv/tcpip_priv.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    44  #include "lwip/sys.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    45  #include "lwip/memp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    46  #include "lwip/mem.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    47  #include "lwip/init.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    48  #include "lwip/ip.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    49  #include "lwip/pbuf.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    50  #include "lwip/etharp.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    51  #include "netif/ethernet.h"
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    52  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    53  #define TCPIP_MSG_VAR_REF(name)     API_VAR_REF(name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    54  #define TCPIP_MSG_VAR_DECLARE(name) API_VAR_DECLARE(struct tcpip_msg, name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    55  #define TCPIP_MSG_VAR_ALLOC(name)   API_VAR_ALLOC(struct tcpip_msg, MEMP_TCPIP_MSG_API, name, ERR_MEM)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    56  #define TCPIP_MSG_VAR_FREE(name)    API_VAR_FREE(MEMP_TCPIP_MSG_API, name)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    57  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    58  /* global variables */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    59  static tcpip_init_done_fn tcpip_init_done;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    60  static void *tcpip_init_done_arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    61  static sys_mbox_t tcpip_mbox;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    62  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    63  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    64  /** The global semaphore to lock the stack. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    65  sys_mutex_t lock_tcpip_core;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    66  #endif /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    67  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    68  static void tcpip_thread_handle_msg(struct tcpip_msg *msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    69  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    70  #if !LWIP_TIMERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    71  /* wait for a message with timers disabled (e.g. pass a timer-check trigger into tcpip_thread) */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    72  #define TCPIP_MBOX_FETCH(mbox, msg) sys_mbox_fetch(mbox, msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    73  #else /* !LWIP_TIMERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    74  /* wait for a message, timeouts are processed while waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    75  #define TCPIP_MBOX_FETCH(mbox, msg) tcpip_timeouts_mbox_fetch(mbox, msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    76  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    77   * Wait (forever) for a message to arrive in an mbox.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    78   * While waiting, timeouts are processed.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    79   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    80   * @param mbox the mbox to fetch the message from
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    81   * @param msg the place to store the message
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    82   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    83  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    84  tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    85  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    86    u32_t sleeptime, res;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    87  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    88  again:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    89    LWIP_ASSERT_CORE_LOCKED();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    90  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    91    sleeptime = sys_timeouts_sleeptime();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    92    if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    93      UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    94      sys_arch_mbox_fetch(mbox, msg, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    95      LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    96      return;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    97    } else if (sleeptime == 0) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    98      sys_check_timeouts();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	    99      /* We try again to fetch a message from the mbox. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   100      goto again;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   101    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   102  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   103    UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   104    res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   105    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   106    if (res == SYS_ARCH_TIMEOUT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   107      /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   108         before a message could be fetched. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   109      sys_check_timeouts();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   110      /* We try again to fetch a message from the mbox. */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   111      goto again;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   112    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   113  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   114  #endif /* !LWIP_TIMERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   115  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   116  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   117   * The main lwIP thread. This thread has exclusive access to lwIP core functions
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   118   * (unless access to them is not locked). Other threads communicate with this
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   119   * thread using message boxes.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   120   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   121   * It also starts all the timers to make sure they are running in the right
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   122   * thread context.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   123   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   124   * @param arg unused argument
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   125   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   126  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   127  tcpip_thread(void *arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   128  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   129    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   130    LWIP_UNUSED_ARG(arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   131  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   132    LWIP_MARK_TCPIP_THREAD();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   133  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   134    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   135    if (tcpip_init_done != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   136      tcpip_init_done(tcpip_init_done_arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   137    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   138  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   139    while (1) {                          /* MAIN Loop */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   140      LWIP_TCPIP_THREAD_ALIVE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   141      /* wait for a message, timeouts are processed while waiting */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   142      TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   143      if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   144        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   145        LWIP_ASSERT("tcpip_thread: invalid message", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   146        continue;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   147      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   148      tcpip_thread_handle_msg(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   149    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   150  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   151  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   152  /* Handle a single tcpip_msg
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   153   * This is in its own function for access by tests only.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   154   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   155  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   156  tcpip_thread_handle_msg(struct tcpip_msg *msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   157  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   158    switch (msg->type) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   159  #if !LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   160      case TCPIP_MSG_API:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   161        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   162        msg->msg.api_msg.function(msg->msg.api_msg.msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   163        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   164      case TCPIP_MSG_API_CALL:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   165        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API CALL message %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   166        msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   167        sys_sem_signal(msg->msg.api_call.sem);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   168        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   169  #endif /* !LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   170  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   171  #if !LWIP_TCPIP_CORE_LOCKING_INPUT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   172      case TCPIP_MSG_INPKT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   173        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   174        if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   175          pbuf_free(msg->msg.inp.p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   176        }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   177        memp_free(MEMP_TCPIP_MSG_INPKT, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   178        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   179  #endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   180  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   181  #if LWIP_TCPIP_TIMEOUT && LWIP_TIMERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   182      case TCPIP_MSG_TIMEOUT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   183        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   184        sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   185        memp_free(MEMP_TCPIP_MSG_API, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   186        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   187      case TCPIP_MSG_UNTIMEOUT:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   188        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   189        sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   190        memp_free(MEMP_TCPIP_MSG_API, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   191        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   192  #endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   193  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   194      case TCPIP_MSG_CALLBACK:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   195        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   196        msg->msg.cb.function(msg->msg.cb.ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   197        memp_free(MEMP_TCPIP_MSG_API, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   198        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   199  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   200      case TCPIP_MSG_CALLBACK_STATIC:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   201        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   202        msg->msg.cb.function(msg->msg.cb.ctx);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   203        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   204  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   205      default:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   206        LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   207        LWIP_ASSERT("tcpip_thread: invalid message", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   208        break;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   209    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   210  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   211  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   212  #ifdef TCPIP_THREAD_TEST
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   213  /** Work on queued items in single-threaded test mode */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   214  int
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   215  tcpip_thread_poll_one(void)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   216  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   217    int ret = 0;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   218    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   219  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   220    if (sys_arch_mbox_tryfetch(&tcpip_mbox, (void **)&msg) != SYS_ARCH_TIMEOUT) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   221      LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   222      if (msg != NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   223        tcpip_thread_handle_msg(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   224        ret = 1;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   225      }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   226      UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   227    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   228    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   229  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   230  #endif
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   231  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   232  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   233   * Pass a received packet to tcpip_thread for input processing
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   234   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   235   * @param p the received packet
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   236   * @param inp the network interface on which the packet was received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   237   * @param input_fn input function to call
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   238   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   239  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   240  tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   241  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   242  #if LWIP_TCPIP_CORE_LOCKING_INPUT
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   243    err_t ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   244    LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_inpkt: PACKET %p/%p\n", (void *)p, (void *)inp));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   245    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   246    ret = input_fn(p, inp);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   247    UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   248    return ret;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   249  #else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   250    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   251  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   252    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   253  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   254    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   255    if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   256      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   257    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   258  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   259    msg->type = TCPIP_MSG_INPKT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   260    msg->msg.inp.p = p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   261    msg->msg.inp.netif = inp;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   262    msg->msg.inp.input_fn = input_fn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   263    if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   264      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   265      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   266    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   267    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   268  #endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   269  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   270  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   271  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   272   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   273   * Pass a received packet to tcpip_thread for input processing with
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   274   * ethernet_input or ip_input. Don't call directly, pass to netif_add()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   275   * and call netif->input().
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   276   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   277   * @param p the received packet, p->payload pointing to the Ethernet header or
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   278   *          to an IP header (if inp doesn't have NETIF_FLAG_ETHARP or
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   279   *          NETIF_FLAG_ETHERNET flags)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   280   * @param inp the network interface on which the packet was received
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   281   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   282  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   283  tcpip_input(struct pbuf *p, struct netif *inp)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   284  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   285  #if LWIP_ETHERNET
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   286    if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   287      return tcpip_inpkt(p, inp, ethernet_input);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   288    } else
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   289  #endif /* LWIP_ETHERNET */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   290      return tcpip_inpkt(p, inp, ip_input);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   291  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   292  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   293  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   294   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   295   * Call a specific function in the thread context of
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   296   * tcpip_thread for easy access synchronization.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   297   * A function called in that way may access lwIP core code
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   298   * without fearing concurrent access.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   299   * Blocks until the request is posted.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   300   * Must not be called from interrupt context!
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   301   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   302   * @param function the function to call
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   303   * @param ctx parameter passed to f
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   304   * @return ERR_OK if the function was called, another err_t if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   305   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   306   * @see tcpip_try_callback
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   307   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   308  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   309  tcpip_callback(tcpip_callback_fn function, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   310  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   311    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   312  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   313    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   314  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   315    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   316    if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   317      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   318    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   319  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   320    msg->type = TCPIP_MSG_CALLBACK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   321    msg->msg.cb.function = function;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   322    msg->msg.cb.ctx = ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   323  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   324    sys_mbox_post(&tcpip_mbox, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   325    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   326  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   327  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   328  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   329   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   330   * Call a specific function in the thread context of
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   331   * tcpip_thread for easy access synchronization.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   332   * A function called in that way may access lwIP core code
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   333   * without fearing concurrent access.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   334   * Does NOT block when the request cannot be posted because the
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   335   * tcpip_mbox is full, but returns ERR_MEM instead.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   336   * Can be called from interrupt context.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   337   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   338   * @param function the function to call
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   339   * @param ctx parameter passed to f
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   340   * @return ERR_OK if the function was called, another err_t if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   341   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   342   * @see tcpip_callback
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   343   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   344  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   345  tcpip_try_callback(tcpip_callback_fn function, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   346  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   347    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   348  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   349    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   350  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   351    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   352    if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   353      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   354    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   355  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   356    msg->type = TCPIP_MSG_CALLBACK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   357    msg->msg.cb.function = function;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   358    msg->msg.cb.ctx = ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   359  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   360    if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   361      memp_free(MEMP_TCPIP_MSG_API, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   362      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   363    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   364    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   365  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   366  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   367  #if LWIP_TCPIP_TIMEOUT && LWIP_TIMERS
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   368  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   369   * call sys_timeout in tcpip_thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   370   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   371   * @param msecs time in milliseconds for timeout
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   372   * @param h function to be called on timeout
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   373   * @param arg argument to pass to timeout function h
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   374   * @return ERR_MEM on memory error, ERR_OK otherwise
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   375   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   376  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   377  tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   378  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   379    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   380  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   381    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   382  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   383    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   384    if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   385      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   386    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   387  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   388    msg->type = TCPIP_MSG_TIMEOUT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   389    msg->msg.tmo.msecs = msecs;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   390    msg->msg.tmo.h = h;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   391    msg->msg.tmo.arg = arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   392    sys_mbox_post(&tcpip_mbox, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   393    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   394  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   395  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   396  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   397   * call sys_untimeout in tcpip_thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   398   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   399   * @param h function to be called on timeout
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   400   * @param arg argument to pass to timeout function h
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   401   * @return ERR_MEM on memory error, ERR_OK otherwise
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   402   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   403  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   404  tcpip_untimeout(sys_timeout_handler h, void *arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   405  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   406    struct tcpip_msg *msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   407  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   408    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   409  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   410    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   411    if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   412      return ERR_MEM;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   413    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   414  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   415    msg->type = TCPIP_MSG_UNTIMEOUT;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   416    msg->msg.tmo.h = h;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   417    msg->msg.tmo.arg = arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   418    sys_mbox_post(&tcpip_mbox, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   419    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   420  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   421  #endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   422  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   423  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   424  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   425   * Sends a message to TCPIP thread to call a function. Caller thread blocks on
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   426   * on a provided semaphore, which ist NOT automatically signalled by TCPIP thread,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   427   * this has to be done by the user.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   428   * It is recommended to use LWIP_TCPIP_CORE_LOCKING since this is the way
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   429   * with least runtime overhead.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   430   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   431   * @param fn function to be called from TCPIP thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   432   * @param apimsg argument to API function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   433   * @param sem semaphore to wait on
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   434   * @return ERR_OK if the function was called, another err_t if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   435   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   436  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   437  tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   438  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   439  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   440    LWIP_UNUSED_ARG(sem);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   441    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   442    fn(apimsg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   443    UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   444    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   445  #else /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   446    TCPIP_MSG_VAR_DECLARE(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   447  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   448    LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   449    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   450  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   451    TCPIP_MSG_VAR_ALLOC(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   452    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   453    TCPIP_MSG_VAR_REF(msg).msg.api_msg.function = fn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   454    TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   455    sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   456    sys_arch_sem_wait(sem, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   457    TCPIP_MSG_VAR_FREE(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   458    return ERR_OK;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   459  #endif /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   460  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   461  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   462  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   463   * Synchronously calls function in TCPIP thread and waits for its completion.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   464   * It is recommended to use LWIP_TCPIP_CORE_LOCKING (preferred) or
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   465   * LWIP_NETCONN_SEM_PER_THREAD.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   466   * If not, a semaphore is created and destroyed on every call which is usually
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   467   * an expensive/slow operation.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   468   * @param fn Function to call
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   469   * @param call Call parameters
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   470   * @return Return value from tcpip_api_call_fn
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   471   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   472  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   473  tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   474  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   475  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   476    err_t err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   477    LOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   478    err = fn(call);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   479    UNLOCK_TCPIP_CORE();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   480    return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   481  #else /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   482    TCPIP_MSG_VAR_DECLARE(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   483  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   484  #if !LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   485    err_t err = sys_sem_new(&call->sem, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   486    if (err != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   487      return err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   488    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   489  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   490  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   491    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   492  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   493    TCPIP_MSG_VAR_ALLOC(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   494    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API_CALL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   495    TCPIP_MSG_VAR_REF(msg).msg.api_call.arg = call;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   496    TCPIP_MSG_VAR_REF(msg).msg.api_call.function = fn;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   497  #if LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   498    TCPIP_MSG_VAR_REF(msg).msg.api_call.sem = LWIP_NETCONN_THREAD_SEM_GET();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   499  #else /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   500    TCPIP_MSG_VAR_REF(msg).msg.api_call.sem = &call->sem;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   501  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   502    sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   503    sys_arch_sem_wait(TCPIP_MSG_VAR_REF(msg).msg.api_call.sem, 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   504    TCPIP_MSG_VAR_FREE(msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   505  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   506  #if !LWIP_NETCONN_SEM_PER_THREAD
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   507    sys_sem_free(&call->sem);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   508  #endif /* LWIP_NETCONN_SEM_PER_THREAD */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   509  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   510    return call->err;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   511  #endif /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   512  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   513  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   514  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   515   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   516   * Allocate a structure for a static callback message and initialize it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   517   * The message has a special type such that lwIP never frees it.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   518   * This is intended to be used to send "static" messages from interrupt context,
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   519   * e.g. the message is allocated once and posted several times from an IRQ
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   520   * using tcpip_callbackmsg_trycallback().
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   521   * Example usage: Trigger execution of an ethernet IRQ DPC routine in lwIP thread context.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   522   * 
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   523   * @param function the function to call
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   524   * @param ctx parameter passed to function
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   525   * @return a struct pointer to pass to tcpip_callbackmsg_trycallback().
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   526   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   527   * @see tcpip_callbackmsg_trycallback()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   528   * @see tcpip_callbackmsg_delete()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   529   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   530  struct tcpip_callback_msg *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   531  tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   532  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   533    struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   534    if (msg == NULL) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   535      return NULL;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   536    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   537    msg->type = TCPIP_MSG_CALLBACK_STATIC;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   538    msg->msg.cb.function = function;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   539    msg->msg.cb.ctx = ctx;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   540    return (struct tcpip_callback_msg *)msg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   541  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   542  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   543  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   544   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   545   * Free a callback message allocated by tcpip_callbackmsg_new().
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   546   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   547   * @param msg the message to free
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   548   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   549   * @see tcpip_callbackmsg_new()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   550   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   551  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   552  tcpip_callbackmsg_delete(struct tcpip_callback_msg *msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   553  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   554    memp_free(MEMP_TCPIP_MSG_API, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   555  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   556  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   557  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   558   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   559   * Try to post a callback-message to the tcpip_thread tcpip_mbox.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   560   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   561   * @param msg pointer to the message to post
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   562   * @return sys_mbox_trypost() return code
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   563   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   564   * @see tcpip_callbackmsg_new()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   565   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   566  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   567  tcpip_callbackmsg_trycallback(struct tcpip_callback_msg *msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   568  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   569    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   570    return sys_mbox_trypost(&tcpip_mbox, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   571  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   572  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   573  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   574   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   575   * Try to post a callback-message to the tcpip_thread mbox.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   576   * Same as @ref tcpip_callbackmsg_trycallback but calls sys_mbox_trypost_fromisr(),
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   577   * mainly to help FreeRTOS, where calls differ between task level and ISR level.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   578   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   579   * @param msg pointer to the message to post
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   580   * @return sys_mbox_trypost_fromisr() return code (without change, so this
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   581   *         knowledge can be used to e.g. propagate "bool needs_scheduling")
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   582   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   583   * @see tcpip_callbackmsg_new()
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   584   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   585  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   586  tcpip_callbackmsg_trycallback_fromisr(struct tcpip_callback_msg *msg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   587  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   588    LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   589    return sys_mbox_trypost_fromisr(&tcpip_mbox, msg);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   590  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   591  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   592  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   593   * @ingroup lwip_os
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   594   * Initialize this module:
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   595   * - initialize all sub modules
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   596   * - start the tcpip_thread
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   597   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   598   * @param initfunc a function to call when tcpip_thread is running and finished initializing
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   599   * @param arg argument to pass to initfunc
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   600   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   601  void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   602  tcpip_init(tcpip_init_done_fn initfunc, void *arg)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   603  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   604    lwip_init();
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   605  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   606    tcpip_init_done = initfunc;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   607    tcpip_init_done_arg = arg;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   608    if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   609      LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   610    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   611  #if LWIP_TCPIP_CORE_LOCKING
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   612    if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   613      LWIP_ASSERT("failed to create lock_tcpip_core", 0);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   614    }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   615  #endif /* LWIP_TCPIP_CORE_LOCKING */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   616  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   617    sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   618  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   619  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   620  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   621   * Simple callback function used with tcpip_callback to free a pbuf
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   622   * (pbuf_free has a wrong signature for tcpip_callback)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   623   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   624   * @param p The pbuf (chain) to be dereferenced.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   625   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   626  static void
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   627  pbuf_free_int(void *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   628  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   629    struct pbuf *q = (struct pbuf *)p;
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   630    pbuf_free(q);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   631  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   632  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   633  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   634   * A simple wrapper function that allows you to free a pbuf from interrupt context.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   635   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   636   * @param p The pbuf (chain) to be dereferenced.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   637   * @return ERR_OK if callback could be enqueued, an err_t if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   638   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   639  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   640  pbuf_free_callback(struct pbuf *p)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   641  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   642    return tcpip_try_callback(pbuf_free_int, p);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   643  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   644  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   645  /**
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   646   * A simple wrapper function that allows you to free heap memory from
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   647   * interrupt context.
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   648   *
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   649   * @param m the heap memory to free
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   650   * @return ERR_OK if callback could be enqueued, an err_t if not
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   651   */
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   652  err_t
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   653  mem_free_callback(void *m)
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   654  {
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   655    return tcpip_try_callback(mem_free, m);
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   656  }
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   657  
; ..\EAS\BSW\TcpIp\lwip-2.1.2\api\tcpip.c	   658  #endif /* !NO_SYS */

	; Module end
