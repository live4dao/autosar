	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc3572a --dep-file=Mcal\\Tricore\\Stm\\ssc\\src\\.Stm.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=Mcal\\Tricore\\Stm\\ssc\\src\\Stm.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Mcal\\Tricore\\Stm\\ssc\\src\\Stm.src ..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c"
	.compiler_name		"ctc"
	;source	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c'

	
$TC162
	
	.sdecl	'.text.Stm_EnableModule.Code.Cpu0',code,cluster('Stm_EnableModule')
	.sect	'.text.Stm_EnableModule.Code.Cpu0'
	.align	2
	
	.global	Stm_EnableModule

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     1  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     2  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     3  ** Copyright (C) Infineon Technologies (2023)                                 **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     4  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     5  ** All rights reserved.                                                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     6  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    10  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    11  ********************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    12  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    13  **  FILENAME     : Stm.c                                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    14  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    15  **  VERSION      : 21.0.0                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    16  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    17  **  DATE         : 2023-05-22                                                 **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    18  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    19  **  VARIANT      : Variant Precompile                                         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    20  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    21  **  PLATFORM     : Infineon AURIX2G                                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    22  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    23  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    24  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    25  **  VENDOR       : Infineon Technologies                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    26  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    27  **  DESCRIPTION  : STM Driver source file                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    28  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    29  **  SPECIFICATION(S) : Specification of Stm Driver                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    30  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    31  **  MAY BE CHANGED BY USER : no                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    32  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    33  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    34  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    35  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    36  **                      Includes                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    37  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    38  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    39  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    40  /* Inclusion of Stm header file */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    41  #include "Stm.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    42  #include "Stm_Cbk.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    43  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    44  /* Inclusion of Stm reg file */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    45  #include "IfxStm_reg.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    46  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    47  /* Global functions like Set/Reset END INIT protection bit,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    48  Enable/Disable interrupts, Automic write function */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    49  #include "McalLib.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    50  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    51  /* Conditional Inclusion of Production Error */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    52  #if (STM_E_CLC_ENABLE_ERR_DEM_REPORT == STM_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    53  #include "Mcal_Wrapper.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    54  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    55  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    56  /* Conditional Inclusion of Developement Error Tracer File */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    57  #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    58  #include "Det.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    59  #endif /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    60  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    61  /* McalLib OsStub inclusion for the user mode */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    62  #if(STM_RUN_TIME_API_MODE != STM_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    63  #include "McalLib_OsStub.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    64  #endif /* McalLib OsStub inclusion for the user mode */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    65  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    66  **                      Imported Compiler Switch Check                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    67  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    68  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    69  #ifndef STM_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    70  #error "STM_AR_RELEASE_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    71  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    72  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    73  #ifndef STM_AR_RELEASE_MINOR_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    74  #error "STM_AR_RELEASE_MINOR_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    75  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    76  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    77  #ifndef STM_AR_RELEASE_REVISION_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    78  #error "STM_AR_RELEASE_REVISION_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    79  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    80  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    81  #ifndef STM_SW_MAJOR_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    82  #error "STM_SW_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    83  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    84  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    85  #ifndef STM_SW_MINOR_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    86  #error "STM_SW_MINOR_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    87  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    88  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    89  #ifndef STM_SW_PATCH_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    90  #error "STM_SW_PATCH_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    91  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    92  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    93  /* Check for Correct inclusion of headers */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    94  #if ( STM_SW_MAJOR_VERSION != 20U )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    95  #error "STM_SW_MAJOR_VERSION does not match. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    96  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    97  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    98  #if ( STM_SW_MINOR_VERSION != 25U )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	    99  #error "STM_SW_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   100  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   101  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   102  #if ( STM_SW_PATCH_VERSION != 0U )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   103  #error "STM_SW_PATCH_VERSION does not match. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   104  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   105  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   106  #if ( STM_AR_RELEASE_MAJOR_VERSION != MCAL_AR_RELEASE_MAJOR_VERSION )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   107  #error "STM_AR_RELEASE_MAJOR_VERSION does not match. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   108  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   109  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   110  #if ( STM_AR_RELEASE_MINOR_VERSION != MCAL_AR_RELEASE_MINOR_VERSION )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   111  #error "STM_AR_RELEASE_MINOR_VERSION does not match. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   112  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   113  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   114  #if ( STM_AR_RELEASE_REVISION_VERSION != MCAL_AR_RELEASE_REVISION_VERSION )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   115  #error "STM_AR_RELEASE_REVISION_VERSION does not match. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   116  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   117  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   118  #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   119  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   120  #ifndef DET_AR_RELEASE_MAJOR_VERSION
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   121  #error "DET_AR_RELEASE_MAJOR_VERSION is not defined. "
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   122  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   123  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   124  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   125  #if ( DET_AR_RELEASE_MAJOR_VERSION != 4U )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   126  #error "DET_AR_RELEASE_MAJOR_VERSION does not match."
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   127  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   128  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   129  #endif /*#if (STM_DEV_ERROR_DETECT == STD_ON)*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   130  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   131  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   132  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   133  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   134  **                      Private Macro Definitions                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   135  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   136  #define STM_REGISTER_OFFSET                (0x100U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   137  #define STM_SET_MASK                       (0xFFFFFFFFU)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   138  #define STM_REG_CLR_MASK                   (0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   139  #define STM_TIM_ONESHOT_MODE               (0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   140  #define STM_INTR_NOD_NUM                   (0x2U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   141  #define STM_MAX_TIMER_VAL_ONE              (0x1U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   142  #define STM_MAX_TIMER_VAL_TWO              (0x2U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   143  #define STM_MAX_TIMER_VAL_THREE            (0x3U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   144  #define STM_MAX_TIMER_VAL_FOUR             (0x4U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   145  #define STM_MAX_TIMER_VAL_FIVE             (0x5U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   146  #define STM_COMPARE_VAL                    (0x1U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   147  #define STM_MAX_SHIFT_VALUE                ((uint8)32)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   148  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   149  #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   150  #define STM_MAX_TIMER_NUMBER               (0x6U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   151  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   152  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   153  #if(STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   154  #define STM_CMCON_MSTART_MAX_SIZE          (0x1FU)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   155  #define STM_CMCON_MSIZE_MAX_VAL            (0x1FU)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   156  #define STM_MAX_VALID_TIMER_MODE_VAL       (0x1U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   157  #define STM_MAX_CMP_REG_NUM                (0x1U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   158  #endif /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   159  #define STM_MODULE_ENABLE                  (0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   160  #define STM_CLC_EDIS_SLEEP_CTRL            (0x3U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   161  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   162  /* Offset for STM_CMCON_Bits.MSIZE0 */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   163  #define STM_CMCON_MSIZE0_OFF     0
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   164  /* Offset for STM_CMCON_Bits.MSTART0 */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   165  #define STM_CMCON_MSTART0_OFF    8
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   166  /* Offset for STM_CMCON_Bits.MSIZE1 */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   167  #define STM_CMCON_MSIZE1_OFF     16
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   168  /* Offset for STM_CMCON_Bits.MSTART1 */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   169  #define STM_CMCON_MSTART1_OFF    24
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   170  /*  STM_CMCON number of bits required to enable CMP interrupt in
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   171      Mcal_SetBitAtomic  function call  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   172  #define STM_CMCON_MSIZE_ENABLE_BIT_POS_COUNT   5
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   173  /*  STM_CMCON MSTART total bit position count used in
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   174      Mcal_SetBitAtomic  function call  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   175  #define STM_CMCON_MSTART_TOTAL_BIT_POS_COUNT   5
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   176  /*  STM_CMCON value to enable CMP interrupt  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   177  #define STM_CMCON_MSIZE_MAX_ENABLE_VAL        31
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   178  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   179  /* Offset for STM_ICR_Bits.CMP0EN */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   180  #define STM_ICR_CMP0EN_OFF       0
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   181  /* Offset for STM_ICR_Bits.CMP1EN */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   182  #define STM_ICR_CMP1EN_OFF       4
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   183  /*  STM_ICR number of bits required to enable CMP interrupt in
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   184      Mcal_SetBitAtomic function call */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   185  #define STM_ICR_ENABLE_BIT_POS_COUNT    3
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   186  /*  STM_ICR value to enable CMP1 interrupt  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   187  #define STM_ICR_CMP1_INTR_ENABLE_VAL     5
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   188  /*  STM_ICR value to enable CMP0 interrupt  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   189  #define STM_ICR_CMP0_INTR_ENABLE_VAL    1
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   190  /* Mask for STM_ICR_Bits.CMP0EN disable */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   191  #define STM_ICR_CMP0_DISABLE_MSK    1
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   192  /* Mask for STM_ICR_Bits.CMP1EN disable */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   193  #define STM_ICR_CMP1_DISABLE_MSK    1
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   194  /* Value for STM_ICR_Bits.CMP0EN disable */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   195  #define STM_ICR_CMP0_DISABLE_VAL    0
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   196  /* Value for STM_ICR_Bits.CMP1EN disable */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   197  #define STM_ICR_CMP1_DISABLE_VAL    0
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   198  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   199  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   200  /* User1 Mode / Supervisor Mode */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   201  #if (STM_RUN_TIME_API_MODE  == STM_MCAL_SUPERVISOR)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   202  /* Library APIs  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   203  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   204   * 'STM_LIB_RUNTIME_WRITEPERIPENDINITPROTREG'
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   205   * defined for User mode support in code.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   206   * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   207  #define STM_LIB_RUNTIME_WRITEPERIPENDINITPROTREG(RegAdd,Data) \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   208                                 Mcal_WritePeripEndInitProtReg(RegAdd,Data)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   209  #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   210  /* Library APIs  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   211  /* MISRA2012_RULE_4_9_JUSTIFICATION: Function like macro
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   212   * 'STM_LIB_RUNTIME_WRITEPERIPENDINITPROTREG'
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   213   * defined for User mode support in code.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   214   * No side effects foreseen by violating this MISRA rule. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   215  #define STM_LIB_RUNTIME_WRITEPERIPENDINITPROTREG(RegAdd,Data) \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   216                                MCAL_LIB_WRITEPERIPENDINITPROTREG(RegAdd,Data)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   217  #endif   /* #if (STM_RUN_TIME_API_MODE  == MCAL_SUPERVISOR) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   218  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   219  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   220  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   221  **                   Function like macro definitions                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   222  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   223  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   224  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   225  **                      Private Type Definitions                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   226  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   227  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   228  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   229  **                      Global Constant Definitions                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   230  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   231  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   232  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   233  **                      Global Variable Definitions                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   234  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   235  #define STM_START_SEC_CONFIG_DATA_QM_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   236  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   237     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   238  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   239     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   240  /* Declaration of Stm Pre Build Configuration */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   241  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   242  extern const Stm_ModuleType Stm_ModuleMap[STM_MAX_TIMERS];
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   243  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   244  #define STM_STOP_SEC_CONFIG_DATA_QM_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   245  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   246     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   247  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   248     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   249  /* Declaration of Stm Pre Build Configuration */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   250  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   251  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   252  /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   253  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   254  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   255  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   256  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   257  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   258  /* MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   259  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   260  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   261  #define STM_START_SEC_VAR_INIT_QM_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   262  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   263  guideline.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   264  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   265  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   266  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   267  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   268  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   269  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   270  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   271    /*MISRA2012_RULE_5_1_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   272  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   273  /*MISRA2012_RULE_5_2_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   274  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   275  /*MISRA2012_RULE_5_4_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   276  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   277  /* MISRA2012_RULE_5_5_JUSTIFICATION:Memmap macros are defined as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   278  naming convention, hence it goes beyond 32 characters.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   279  #define STM_STOP_SEC_VAR_INIT_QM_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   280  /*MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   281  guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   282  /*MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   283  without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   284  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   285  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   286  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   287  **                      Private Constant Definitions                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   288  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   289  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   290  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   291  **                      Private Variable Definitions                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   292  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   293  #if (STM_MAX_TIMERS > 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   294  #if (STM_CORE0_MAX_TIMERS != 0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   295  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   296  #define STM_START_SEC_VAR_CLEARED_QM_CORE0_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   297  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   298     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   299  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   300     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   301  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   302  static Stm_ModuleParameterType Stm_TimerAllocation_Core0;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   303  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   304  #define STM_STOP_SEC_VAR_CLEARED_QM_CORE0_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   305  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   306     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   307  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   308     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   309  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   310  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   311  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   312  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   313  #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_ONE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   314  #if (STM_CORE1_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   315  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   316    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   317  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   318    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   319  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   320    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   321  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   322    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   323  #define STM_START_SEC_VAR_CLEARED_QM_CORE1_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   324  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   325     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   326  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   327     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   328  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   329  static Stm_ModuleParameterType Stm_TimerAllocation_Core1;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   330  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   331    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   332  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   333    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   334  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   335    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   336  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   337    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   338  #define STM_STOP_SEC_VAR_CLEARED_QM_CORE1_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   339  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   340     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   341  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   342     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   343  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   344  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   345  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   346  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   347  #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_TWO)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   348  #if (STM_CORE2_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   349  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   350    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   351  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   352    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   353  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   354    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   355  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   356    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   357  #define STM_START_SEC_VAR_CLEARED_QM_CORE2_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   358  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   359     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   360  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   361     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   362  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   363  static Stm_ModuleParameterType Stm_TimerAllocation_Core2;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   364  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   365    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   366  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   367    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   368  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   369    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   370  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   371    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   372  #define STM_STOP_SEC_VAR_CLEARED_QM_CORE2_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   373  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   374     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   375  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   376     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   377  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   378  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   379  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   380  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   381  #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_THREE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   382  #if (STM_CORE3_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   383  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   384    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   385  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   386    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   387  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   388    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   389  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   390    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   391  #define STM_START_SEC_VAR_CLEARED_QM_CORE3_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   392  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   393     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   394  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   395     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   396  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   397  static Stm_ModuleParameterType Stm_TimerAllocation_Core3;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   398  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   399    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   400  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   401    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   402  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   403    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   404  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   405    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   406  #define STM_STOP_SEC_VAR_CLEARED_QM_CORE3_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   407  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   408     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   409  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   410     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   411  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   412  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   413  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   414  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   415  #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_FOUR)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   416  #if (STM_CORE4_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   417  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   418    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   419  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   420    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   421  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   422    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   423  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   424    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   425  #define STM_START_SEC_VAR_CLEARED_QM_CORE4_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   426  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   427     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   428  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   429     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   430  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   431  static Stm_ModuleParameterType Stm_TimerAllocation_Core4;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   432  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   433    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   434  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   435    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   436  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   437    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   438  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   439    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   440  #define STM_STOP_SEC_VAR_CLEARED_QM_CORE4_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   441  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   442     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   443  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   444     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   445  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   446  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   447  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   448  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   449  #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_FIVE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   450  #if (STM_CORE5_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   451  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   452    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   453  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   454    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   455  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   456    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   457  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   458    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   459  #define STM_START_SEC_VAR_CLEARED_QM_CORE5_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   460  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   461     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   462  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   463     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   464  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   465  static Stm_ModuleParameterType Stm_TimerAllocation_Core5;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   466  /* MISRA2012_RULE_5_1_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   467    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   468  /* MISRA2012_RULE_5_2_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   469    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   470  /* MISRA2012_RULE_5_4_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   471    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   472  /* MISRA2012_RULE_5_5_JUSTIFICATION: External identifiers going beyond 32 chars.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   473    in generated code due to Autosar Naming constraints.*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   474  #define STM_STOP_SEC_VAR_CLEARED_QM_CORE5_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   475  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   476     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   477  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   478     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   479  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   480  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   481  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   482  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   483  /*MISRA2012_RULE_2_5_JUSTIFICATION: Used in multiple configuration combination*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   484  #define STM_START_SEC_CONST_QM_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   485  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   486     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   487  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   488     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   489  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   490  /* MISRA2012_RULE_8_9_JUSTIFICATION: Global Constants not declared within block
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   491     scope used in all API's. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   492  static Stm_ModuleParameterType* const Stm_TimerCoreAllocation[STM_MAX_TIMERS] =
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   493  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   494    #if (STM_MAX_TIMERS > 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   495    #if (STM_CORE0_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   496    (Stm_ModuleParameterType*)&Stm_TimerAllocation_Core0,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   497    #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   498    NULL_PTR,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   499    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   500    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   501    #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_ONE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   502    #if (STM_CORE1_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   503    (Stm_ModuleParameterType*)&Stm_TimerAllocation_Core1,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   504    #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   505    NULL_PTR,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   506    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   507    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   508    #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_TWO)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   509    #if (STM_CORE2_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   510    (Stm_ModuleParameterType*)&Stm_TimerAllocation_Core2,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   511    #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   512    NULL_PTR,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   513    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   514    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   515    #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_THREE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   516    #if (STM_CORE3_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   517    (Stm_ModuleParameterType*)&Stm_TimerAllocation_Core3,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   518    #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   519    NULL_PTR,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   520    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   521    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   522    #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_FOUR)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   523    #if (STM_CORE4_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   524    (Stm_ModuleParameterType*)&Stm_TimerAllocation_Core4,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   525    #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   526    NULL_PTR,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   527    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   528    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   529    #if (STM_MAX_TIMERS > STM_MAX_TIMER_VAL_FIVE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   530    #if (STM_CORE5_MAX_TIMERS != 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   531    (Stm_ModuleParameterType*)&Stm_TimerAllocation_Core5,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   532    #else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   533    NULL_PTR,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   534    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   535    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   536  };
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   537  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   538  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   539  /*MISRA2012_RULE_2_5_JUSTIFICATION: Used in multiple configuration combination*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   540  #define STM_STOP_SEC_CONST_QM_GLOBAL_UNSPECIFIED
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   541  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   542     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   543  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   544     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   545  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   546  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   547  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   548  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   549  **                      Private Function Declarations                         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   550  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   551  /* Mapping the code */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   552  #define STM_START_SEC_CODE_QM_GLOBAL
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   553  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   554     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   555  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   556     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   557  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   558  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   559  LOCAL_INLINE void Stm_lSetBit(uint8* Data, const uint8 BitPn);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   560  LOCAL_INLINE void Stm_lClrBit(uint8* Data, const uint8 BitPn);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   561  LOCAL_INLINE uint8 Stm_lGetBit(const uint8 Data, const uint8 BitPn);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   562  LOCAL_INLINE void Stm_lCopyBit(const uint8 Source, uint8* DestinationData,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   563                                 uint8 DestinationPosition);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   564  LOCAL_INLINE Stm_ModuleParameterType* Stm_lGetModNumStatusPtr(void);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   565  LOCAL_INLINE Stm_TotalTimerCaptureType Stm_lReadTotalTimer(const uint8
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   566  ModuleNumber);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   567  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   568  #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   569  LOCAL_INLINE Std_ReturnType
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   570  Stm_lModnumAndCmpregDetCheck(const uint8 ModuleNumber,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   571      const uint8 CompareRegisterId, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   572  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   573  LOCAL_INLINE Std_ReturnType Stm_lModnumberDetCheck
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   574  (const uint8 ModuleNumber, const uint8 ServiceId, const uint32 CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   575  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   576  LOCAL_INLINE void Stm_lReportError(const uint8 ApiId, const uint8 ErrorId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   577  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   578  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   579  #if(STM_E_CLC_ENABLE_ERR_DEM_REPORT == STM_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   580  static void Stm_lReportDemError(const Dem_EventIdType EventId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   581  const Dem_EventStatusType EventStatus);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   582  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   583  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   584  #define STM_STOP_SEC_CODE_QM_GLOBAL
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   585  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   586     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   587  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   588     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   589  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   590  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   591  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   592  **                      Global Function Definitions                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   593  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   594  /* Mapping the code */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   595  #define STM_START_SEC_CODE_QM_GLOBAL
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   596  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   597     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   598  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   599     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   600  #include "Stm_MemMap.h"
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   601  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   602  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   603  ** Traceability      : [cover parentID=DS_NAS_STM_PR1730_PR1731]              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   604  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   605  ** Syntax           : void Stm_EnableModule(const uint8 ModuleNumber)         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   606  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   607  ** Service ID       : 0xC7                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   608  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   609  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   610  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   611  ** Reentrancy       : Non reentrant                                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   612  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   613  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   614  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   615  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   616  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   617  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   618  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   619  ** Description      : This function enables the STM interrupts and interrupt  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   620  **                     node mapping                                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   621  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   622  void Stm_EnableModule(const uint8 ModuleNumber)
; Function Stm_EnableModule
.L27:
Stm_EnableModule:	.type	func
	mov	d8,d4
.L249:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   623  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   624    Stm_ModuleParameterType        *StmkernelStatusPtr;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   625    uint32                             CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   626    CoreId = Mcal_GetCpuIndex();
	call	Mcal_GetCpuIndex
.L248:
	mov	d9,d2
.L251:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   627    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   628    Std_ReturnType                     ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   629  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   630    /* Check for the validity of Module number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   631    ErrStatus = Stm_lModnumberDetCheck(ModuleNumber, STM_SID_ENABLEMODULE, CoreId)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   632  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   633  ;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   634  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   635    /* Check No DET Present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   636    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   637    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   638      /*(STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   639    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   640      /* Enable the STM module clock, by default STM clock is enabled */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   641      /* MISRA2012_RULE_11_3_JUSTIFICATION: casting of register address to
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   642         corresponding structure pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   643      /* MISRA2012_RULE_11_8_JUSTIFICATION: A cast shall not remove any const
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   644       or volatile qualification from the type pointed to by a pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   645      STM_LIB_RUNTIME_WRITEPERIPENDINITPROTREG((uint32*) \ 
	lea	a15,0xf0001000
	sha	d15,d8,#8
	addsc.a	a4,a15,d15,#0
	mov	d4,#0
	call	Mcal_WritePeripEndInitProtReg
.L250:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   646          (&STM_BASE[ModuleNumber].CLC.U), STM_REG_CLR_MASK);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   647  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   648      if(STM_MODULE_ENABLE == STM_BASE[ModuleNumber].CLC.B.DISS)
	lea	a15,0xf0001000
.L311:
	sha	d15,d8,#8
.L312:
	addsc.a	a15,a15,d15,#0
.L313:
	ld.bu	d0,[a15]
.L314:
	jnz.t	d0:1,.L2
.L108:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   649      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   650        #if(STM_E_CLC_ENABLE_ERR_DEM_REPORT == STM_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   651        /*Report Production Error for STM enable passed*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   652        Stm_lReportDemError(STM_E_CLC_ENABLE_ERR, DEM_EVENT_STATUS_PASSED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   653        #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   654  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   655        /* Get the STM peripheral core allocation pointer */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   656        /* MISRA2012_RULE_11_3_JUSTIFICATION: casting of register address to
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   657         corresponding structure pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   658        StmkernelStatusPtr = Stm_lGetModNumStatusPtr();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   659  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   660        /* CMP0 used or CMP0 and CMP1 both are used */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   661        if((Stm_ModuleMap[CoreId].CmpRegId == STM_CMP0_USED) || \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   662            (Stm_ModuleMap[CoreId].CmpRegId == STM_CMP0_CMP1_USED))
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   663        {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   664          /* Compare register value is assigned its reset value */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   665          STM_BASE[ModuleNumber].CMP[0].U = STM_REG_CLR_MASK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   666  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   667          /* Configure the compare match control register in such a way
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   668          that all the 32 bits of CMP registers are used to compare
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   669          with first 32 bit values of 64 bit STM */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   670          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].CMCON.U), \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   671                     STM_CMCON_MSIZE0_OFF, STM_CMCON_MSIZE_ENABLE_BIT_POS_COUNT, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   672                     STM_CMCON_MSIZE_MAX_ENABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   673  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   674          /* Configure the interrupt system to handle interrupts from STM */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   675          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP0EN_OFF, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   676                      STM_ICR_ENABLE_BIT_POS_COUNT, STM_ICR_CMP0_INTR_ENABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   677  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   678          /* Initialise the compare register value holding RAM variable
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   679             corresponding to the STM module number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   680          StmkernelStatusPtr->CompareRegValue[0] = 0x0U;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   681  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   682        }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   683        /* CMP1 used or CMP0 and CMP1 both are used */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   684        if((Stm_ModuleMap[CoreId].CmpRegId == STM_CMP1_USED) || \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   685            (Stm_ModuleMap[CoreId].CmpRegId == STM_CMP0_CMP1_USED))
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   686        {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   687          /* Compare register value is assigned its reset value */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   688          STM_BASE[ModuleNumber].CMP[STM_COMPARE_VAL].U = STM_REG_CLR_MASK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   689          /* Configure the compare match control register in such a way
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   690          that all the 32 bits of CMP registers are used to compare
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   691          with first 32 bit values of 64 bit STM */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   692          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].CMCON.U), \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   693                    STM_CMCON_MSIZE1_OFF, STM_CMCON_MSIZE_ENABLE_BIT_POS_COUNT, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   694                    STM_CMCON_MSIZE_MAX_ENABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   695          /* Configure the interrupt system to handle interrupts from STM */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   696          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP1EN_OFF, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   697                      STM_ICR_ENABLE_BIT_POS_COUNT, STM_ICR_CMP1_INTR_ENABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   698          /* Initialise the compare register value holding RAM variable
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   699             corresponding to the STM module number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   700          StmkernelStatusPtr->CompareRegValue[STM_COMPARE_VAL] = 0x0U;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   701  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   702        }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   703        /* Initialize the timermode value with one shot mode */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   704        StmkernelStatusPtr->TimerMode = STM_TIM_ONESHOT_MODE;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   705        /* Initialize the Interrupt Node RAM variable */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   706        StmkernelStatusPtr->InterruptNodeMap = STM_INTR_NOD_NUM;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   707      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   708      else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   709      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   710        #if(STM_E_CLC_ENABLE_ERR_DEM_REPORT == STM_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   711        /*Report Production Error for STM CLC enable error*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   712        Stm_lReportDemError(STM_E_CLC_ENABLE_ERR, DEM_EVENT_STATUS_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   713        #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   714      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   715    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   716  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   717  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   718  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   719  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   720  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   721  ** Syntax           : void Stm_EnableAlarm(const uint8 ModuleNumber,          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   722  **                    const uint8 CompareRegisterId,const uint8 TimerMode,    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   723  **    const uint32 Ticks, const Stm_CallbackFnPtrType Stm_Applicationfunction)**
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   724  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   725  ** Service ID       : 0xC8                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   726  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   727  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   728  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   729  ** Reentrancy       : Reentrant for different STM timer                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   730  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   731  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   732  **                    CompareRegisterId - Compare register number             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   733  **                    TimerMode - One shot(0) or continuous(1)                **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   734  **                    Ticks - Timer ticks with respect to selected timer      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   735  **                    void (*Stm_Applicationfunction)(void)) -                **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   736  **                    Functon pointer used for Call-back function             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   737  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   738  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   739  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   740  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   741  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   742  ** Description      : This function provides service to invoke a Call-back    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   743                        function after the elapse of configured                 **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   744                        amount of time(scheduling a function)                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   745  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   746  void Stm_EnableAlarm(const uint8 ModuleNumber,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   747         const uint8 CompareRegisterId, const uint8 TimerMode, const uint32 Ticks,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   748         const Stm_CallbackFnPtrType Stm_Applicationfunction)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   749  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   750    Stm_ModuleParameterType        *StmkernelStatusPtr;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   751    uint8 MatchStartBit;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   752    uint32 Cmpval;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   753    Stm_TotalTimerCaptureType Stm_64Bit_Timer_Value;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   754    uint8 shiftval;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   755  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   756    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   757    uint32                             CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   758    Std_ReturnType                     ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   759  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   760    /* Get the core id */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   761    CoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   762  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   763    /* Check for the validity of Module number and cmp register */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   764    ErrStatus = Stm_lModnumAndCmpregDetCheck(ModuleNumber,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   765                CompareRegisterId, STM_SID_ENABLEALARM, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   766  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   767    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   768    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   769    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   770      /* Check Timer mode is one shot mode or continuos */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   771      if(TimerMode > STM_MAX_VALID_TIMER_MODE_VAL)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   772      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   773        /* Call local function to report timer mode passed is invalid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   774        Stm_lReportError(STM_SID_ENABLEALARM, STM_E_TIMER_MODE_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   775        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   776        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   777      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   778      else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   779      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   780        /* Check notification function is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   781        if(Stm_Applicationfunction == NULL_PTR)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   782        {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   783          /*  Call local function to DET if passed function is NULL_PTR */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   784          Stm_lReportError(STM_SID_ENABLEALARM, STM_E_PARAM_POINTER);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   785          /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   786          ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   787        }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   788      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   789    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   790  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   791    /* Check No DET Present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   792    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   793    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   794    /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   795    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   796      /* Get the STM peripheral core allocation pointer */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   797      /* MISRA2012_RULE_11_3_JUSTIFICATION: casting of register address to
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   798         corresponding structure pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   799      StmkernelStatusPtr = Stm_lGetModNumStatusPtr();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   800  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   801      /* TimerMode can be one shot/continuous copy the same to RAM variable */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   802      Stm_lCopyBit(TimerMode, &StmkernelStatusPtr->TimerMode, CompareRegisterId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   803      /* Update the RAM variable with requested timer ticks */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   804      StmkernelStatusPtr->CompareRegValue[CompareRegisterId] = Ticks;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   805  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   806      /* Copy the Call-back function to be invoked */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   807      StmkernelStatusPtr->Stm_ArrayFunctionPtr[CompareRegisterId]
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   808        = Stm_Applicationfunction;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   809  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   810     /* Checking  CompareRegisterId and slecting MSTART value */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   811     MatchStartBit = (CompareRegisterId == 0x0U) ?(STM_BASE[ModuleNumber].CMCON.B.
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   812     MSTART0):(STM_BASE[ModuleNumber].CMCON.B.MSTART1);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   813  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   814     /* load 64 bits timer value */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   815     Stm_64Bit_Timer_Value= Stm_lReadTotalTimer(ModuleNumber);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   816  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   817     shiftval = STM_MAX_SHIFT_VALUE - MatchStartBit;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   818  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   819     /* Load the compare register with given ticks */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   820     Cmpval = StmkernelStatusPtr->CompareRegValue[CompareRegisterId]
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   821               + (((Stm_64Bit_Timer_Value.LowerPart) >> MatchStartBit) |
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   822               ((Stm_64Bit_Timer_Value.UpperPart) << shiftval));
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   823  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   824     STM_BASE[ModuleNumber].CMP[CompareRegisterId].U  = (Cmpval & STM_SET_MASK);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   825  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   826      if(CompareRegisterId == 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   827      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   828        /* Configure the interrupt system to handle interrupts from STM */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   829        Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP0EN_OFF, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   830                      STM_ICR_ENABLE_BIT_POS_COUNT, STM_ICR_CMP0_INTR_ENABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   831      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   832      else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   833      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   834        /* Configure the interrupt system to handle interrupts from STM */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   835        Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP1EN_OFF, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   836                      STM_ICR_ENABLE_BIT_POS_COUNT, STM_ICR_CMP1_INTR_ENABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   837      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   838    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   839  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   840  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   841  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   842  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   843  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   844  ** Syntax           : void Stm_DisableAlarm(const uint8 ModuleNumber,         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   845  **                                              const uint8 CompareRegisterId)**
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   846  ** Service ID       : 0xC9                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   847  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   848  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   849  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   850  ** Reentrancy       : Reentrant for different STM timer                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   851  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   852  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   853  **                    CompareRegisterId - Compare register number             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   854  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   855  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   856  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   857  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   858  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   859  ** Description      : This function stops the invoke of a Call-back function  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   860  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   861  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   862  void Stm_DisableAlarm(const uint8 ModuleNumber, const uint8 CompareRegisterId)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   863  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   864    Stm_ModuleParameterType        *StmkernelStatusPtr;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   865    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   866    uint32                              CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   867    Std_ReturnType                      ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   868  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   869    CoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   870  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   871    /* Check for the validity of Module number and cmp register */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   872    ErrStatus = Stm_lModnumAndCmpregDetCheck(ModuleNumber, CompareRegisterId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   873                STM_SID_DISABLEALARM, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   874    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   875    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   876    #endif /*(STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   877    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   878      /* Get the STM peripheral core allocation pointer */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   879      /* MISRA2012_RULE_11_3_JUSTIFICATION: casting of register address to
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   880         corresponding structure pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   881      StmkernelStatusPtr = Stm_lGetModNumStatusPtr();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   882  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   883      if(CompareRegisterId == 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   884      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   885        /* Disable the  requested STM service request  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   886        Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP0EN_OFF, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   887                          STM_ICR_ENABLE_BIT_POS_COUNT, 0);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   888      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   889      else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   890      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   891        /* Disable the  requested STM service request  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   892        Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP1EN_OFF, \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   893                          STM_ICR_ENABLE_BIT_POS_COUNT, 0);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   894      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   895      /* Stm_ArrayFunction pointer is updated to NULL_PTR */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   896      StmkernelStatusPtr->Stm_ArrayFunctionPtr[CompareRegisterId] = NULL_PTR;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   897      /* Unused ModuleNumber */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   898      UNUSED_PARAMETER(ModuleNumber);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   899    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   900  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   901  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   902  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   903  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   904  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   905  ** Syntax           : void Stm_SetCompareMatchControl(const uint8 ModuleNumber**
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   906  **   const uint8 CompareRegisterId,const uint8 Mstart,const uint8 MSize)      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   907  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   908  ** Service ID       : 0xCA                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   909  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   910  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   911  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   912  ** Reentrancy       : Reentrant for different STM timer                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   913  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   914  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   915  **                    CompareRegisterId - Compare register number             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   916  **                    Mstart - The lowest bit number of the 64-bit STM        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   917  **                    MSize - Number of bits in register CMPx                 **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   918  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   919  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   920  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   921  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   922  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   923  ** Description      : This function provides service to write into the        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   924  **                    CMPx register.                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   925  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   926  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   927  void Stm_SetCompareMatchControl(const uint8 ModuleNumber,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   928            const uint8 CompareRegisterId, const uint8 Mstart, const uint8 MSize)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   929  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   930    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   931    uint32                              CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   932    Std_ReturnType                      ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   933  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   934    CoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   935  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   936    /* Check for the validity of Module number and cmp register */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   937    ErrStatus = Stm_lModnumAndCmpregDetCheck(ModuleNumber, CompareRegisterId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   938                STM_SID_SETCOMPAREMATCH_CTRL, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   939  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   940    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   941    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   942    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   943      /* Check MStart input value is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   944      if(Mstart > STM_CMCON_MSTART_MAX_SIZE)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   945      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   946        /* Call local function to report DET invalid MStart is passed */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   947        Stm_lReportError(STM_SID_SETCOMPAREMATCH_CTRL, STM_E_MSTART_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   948        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   949        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   950      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   951    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   952  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   953    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   954    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   955    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   956      /* Check MSize value is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   957      if(MSize > STM_CMCON_MSIZE_MAX_VAL)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   958      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   959        /* Call local function to report DET invalid MSize is passed */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   960        Stm_lReportError(STM_SID_SETCOMPAREMATCH_CTRL, STM_E_MSIZE_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   961        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   962        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   963  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   964      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   965    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   966  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   967    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   968    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   969    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   970    /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   971    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   972  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   973  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   974        if (CompareRegisterId == 0x0U)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   975        {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   976          /* CMCON register Mstart updates */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   977          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].CMCON.U), \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   978             STM_CMCON_MSTART0_OFF, STM_CMCON_MSTART_TOTAL_BIT_POS_COUNT, Mstart);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   979  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   980          /* CMCON register CMP0 Msize updates */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   981          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].CMCON.U), \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   982             STM_CMCON_MSIZE0_OFF, STM_CMCON_MSIZE_ENABLE_BIT_POS_COUNT, MSize);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   983        }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   984        else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   985        {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   986          /* CMCON register Mstart updates */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   987          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].CMCON.U), \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   988             STM_CMCON_MSTART1_OFF, STM_CMCON_MSTART_TOTAL_BIT_POS_COUNT, Mstart);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   989  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   990          /* CMCON register CMP1 Msize updates */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   991          Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].CMCON.U), \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   992             STM_CMCON_MSIZE1_OFF, STM_CMCON_MSIZE_ENABLE_BIT_POS_COUNT, MSize);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   993        }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   994        /* Unused parameters */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   995        UNUSED_PARAMETER(MSize);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   996        UNUSED_PARAMETER(Mstart);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   997        UNUSED_PARAMETER(ModuleNumber);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   998  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	   999    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1000  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1001  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1002  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1003  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1004  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1005  ** Syntax           : uint32 Stm_ReadTimerValue(constuint8 ModuleNumber,      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1006  **                                              constuint8 TimerNumber)       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1007  ** Service ID       : 0xCB                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1008  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1009  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1010  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1011  ** Reentrancy       : Reentrant for different STM timer                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1012  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1013  ** Parameters(in)   : ModuleNumber - stm periheral number                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1014  **                    TimerNumber - The TimerNumber values shall be           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1015  **                                  0,1,2,3,4,5 and 6                         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1016  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1017  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1018  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1019  ** Return value     : uint32 - Current running timer value in ticks           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1020  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1021  ** Description      : This function returns individual TIM value of a         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1022  **                    particular STM module                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1023  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1024  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1025  uint32 Stm_ReadTimerValue(const uint8 ModuleNumber, const uint8 TimerNumber)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1026  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1027    /* MISRA2012_RULE_19_2_JUSTIFICATION:
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1028    Union used for register type definition */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1029    const Ifx_STM_TIM0 *Timer0BaseaddressPtr;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1030    uint32 Timvalue = E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1031    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1032    uint32                              CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1033    Std_ReturnType                      ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1034  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1035    CoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1036  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1037    /* Check for the validity of Module number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1038    ErrStatus = \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1039               Stm_lModnumberDetCheck(ModuleNumber, STM_SID_READTIMERVAL, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1040  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1041    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1042    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1043    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1044      /* Check TimerNumber is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1045      if(TimerNumber > STM_MAX_TIMER_NUMBER)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1046      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1047        /* Call local function to report DET invalid Timer number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1048        Stm_lReportError(STM_SID_READTIMERVAL, STM_E_INV_TIMER_NUMBER);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1049        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1050        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1051      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1052    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1053  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1054    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1055    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1056    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1057    /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1058    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1059      /*Returns TIMx register value based on requested TimerNumber & Mod num */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1060      /* MISRA2012_RULE_18_4_JUSTIFICATION:Agreed only for SFR access with
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1061         Pointer arithmetic */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1062      Timer0BaseaddressPtr = (Ifx_STM_TIM0*) (&STM0_TIM0 + \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1063                             ((STM_REGISTER_OFFSET * (uint32)ModuleNumber)/ \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1064                             STM_MAX_TIMER_VAL_FOUR));
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1065  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1066      /* MISRA2012_RULE_18_4_JUSTIFICATION:
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1067         Agreed for SFR access with Pointer arithmetic */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1068      Timvalue = (Timer0BaseaddressPtr + TimerNumber)->U;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1069    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1070    return Timvalue;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1071  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1072  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1073  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1074  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1075  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1076  ** Syntax           : Stm_TotalTimerCaptureType                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1077  **                     Stm_ReadTotalTimerValue(const uint8 ModuleNumber)      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1078  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1079  ** Service ID       : 0xCC                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1080  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1081  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1082  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1083  ** Reentrancy       : Reentrant for different STM timer                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1084  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1085  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1086  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1087  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1088  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1089  ** Return value     : Stm_TotalTimerCaptureType : Holds the lower and upper   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1090  **                    32-bit values of a 64-bit STM timer                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1091  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1092  ** Description      : This function returns complete 64 bit STM Timer value   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1093  **                    of a particular STM module                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1094  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1095  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1096  Stm_TotalTimerCaptureType Stm_ReadTotalTimerValue(const uint8 ModuleNumber)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1097  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1098    Stm_TotalTimerCaptureType TotalTimerCapture;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1099  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1100    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1101    uint32                              CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1102    Std_ReturnType                      ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1103    TotalTimerCapture.LowerPart = 0x0U;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1104    TotalTimerCapture.UpperPart = 0x0U;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1105    CoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1106  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1107    /* Check for the validity of Module number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1108    ErrStatus = \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1109          Stm_lModnumberDetCheck(ModuleNumber, STM_SID_READTOTALTIMERVAL, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1110  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1111    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1112    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1113    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1114      /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1115    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1116       /* Returns the total timer value */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1117       TotalTimerCapture = Stm_lReadTotalTimer(ModuleNumber);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1118    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1119    return TotalTimerCapture;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1120  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1121  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1122  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1123  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1124  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1125  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1126  ** Syntax           : void Stm_SleepModeHandle(constuint8 ModuleNumber,       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1127                                         constuint8 SleepmodeControl)           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1128  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1129  ** Service ID       : 0xCD                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1130  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1131  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1132  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1133  ** Reentrancy       : Non reentrant                                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1134  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1135  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1136  **                    SleepmodeControl - 0 or 1                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1137  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1138  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1139  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1140  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1141  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1142  ** Description      : This function:                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1143  **                    To enable/disable of STM during controller sleep mode   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1144  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1145  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1146  void Stm_SleepModeHandle(const uint8 ModuleNumber, const uint8 SleepmodeControl)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1147  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1148    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1149    uint32                              CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1150    Std_ReturnType                      ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1151  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1152    CoreId = Mcal_GetCpuIndex();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1153  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1154    /* Check for the validity of Module number */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1155    ErrStatus = \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1156             Stm_lModnumberDetCheck(ModuleNumber, STM_SID_SLEEPMODHANDLE, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1157  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1158    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1159    if(ErrStatus == E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1160    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1161      /* Check Sleepmodecontrol is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1162      if(SleepmodeControl > STM_COMPARE_VAL)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1163      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1164        /* Call local function to report DET invalid sleep mode control */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1165        Stm_lReportError(STM_SID_SLEEPMODHANDLE, STM_E_SLEEP_MODE_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1166        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1167        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1168      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1169    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1170    /* Check No DET Present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1171    if(ErrStatus == (Std_ReturnType)E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1172    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1173    /* (STM_DEV_ERROR_DETECT == STD_ON)  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1174    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1175      /* Enable/disable the requested STM during Controller sleep mode */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1176      /* MISRA2012_RULE_11_3_JUSTIFICATION: casting of register address to
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1177         corresponding structure pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1178      /* MISRA2012_RULE_11_8_JUSTIFICATION: A cast shall not remove any const
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1179         or volatile qualification from the type pointed to by a pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1180      STM_LIB_RUNTIME_WRITEPERIPENDINITPROTREG((uint32*) \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1181          &STM_BASE[ModuleNumber].CLC.U, ((uint32)SleepmodeControl << \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1182                                          STM_CLC_EDIS_SLEEP_CTRL));
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1183    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1184  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1185  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1186  /* Enable / Disable the use of the function */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1187  #if (STM_VERSION_INFO_API == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1188  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1189  ** Traceability:                                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1190  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1191  ** Syntax :void Stm_GetVersionInfo                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1192  **                    (                                                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1193  **                      Std_VersionInfoType *versioninfo                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1194  **                    )                                                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1195  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1196  ** Description :  This Api:                                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1197  **   - This function returns the version information of this module           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1198  **     The version information include : Module ID, Vendor ID,                **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1199  **     Vendor specific version numbers                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1200  **   - This function is available if the STM_VERSION_INFO_API is              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1201  **     set ON                                                                 **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1202  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1203  ** Service ID:  0xCE                                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1204  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1205  ** Sync/Async:  Synchronous                                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1206  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1207  ** Reentrancy:  Reentrant                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1208  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1209  ** Parameters (in) :  None                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1210  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1211  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1212  ** Parameters (out):  versioninfo - Pointer to store the                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1213  **                    version information of this module.                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1214  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1215  ** Return value    :  None                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1216  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1217  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1218  void Stm_GetVersionInfo(Std_VersionInfoType *versioninfo)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1219  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1220  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1221    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1222    /* Check for DET: versioninfo is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1223    if (versioninfo == NULL_PTR)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1224    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1225      /* Call local function to report DET if service called with NULL_PTR */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1226      Stm_lReportError(STM_SID_GETVERSIONINFO, STM_E_PARAM_POINTER);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1227    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1228    else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1229    #endif /* #if (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1230    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1231      /* Vendor ID information */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1232      ((Std_VersionInfoType*)(versioninfo))->vendorID = STM_VENDOR_ID;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1233      /* Stm module ID information */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1234      ((Std_VersionInfoType*)(versioninfo))->moduleID = STM_MODULE_ID;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1235      /* Stm module Software major version information */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1236      ((Std_VersionInfoType*)(versioninfo))->sw_major_version =
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1237        (uint8)STM_SW_MAJOR_VERSION;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1238      /* Stm module Software minor version information */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1239      ((Std_VersionInfoType*)(versioninfo))->sw_minor_version =
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1240        (uint8)STM_SW_MINOR_VERSION;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1241      /* Stm module Software patch version information */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1242      ((Std_VersionInfoType*)(versioninfo))->sw_patch_version =
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1243        (uint8)STM_SW_PATCH_VERSION;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1244    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1245  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1246  #endif /*(STM_VERSION_INFO_API == STD_ON)*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1247  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1248  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1249  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1250  ** Syntax           : LOCAL_INLINE void Stm_lSetBit                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1251  **                                   (uint8* Data,const uint8 BitPn)          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1252  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1253  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1254  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1255  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1256  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1257  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1258  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1259  ** Parameters(in)   : Data - Input variable                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1260  **                    BitPn - Bit number                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1261  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1262  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1263  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1264  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1265  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1266  ** Description      : This function:                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1267  **                    Set the respective bit in the variable                  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1268  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1269  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1270  LOCAL_INLINE void Stm_lSetBit(uint8* Data, const uint8 BitPn)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1271  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1272    *Data |= (uint8)(STM_COMPARE_VAL << BitPn);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1273  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1274  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1275  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1276  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1277  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1278  ** Syntax           : LOCAL_INLINE void Stm_lClrBit(                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1279  **                                     uint8* Data,const uint8 BitPn)         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1280  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1281  ** Service ID       :   NA                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1282  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1283  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1284  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1285  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1286  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1287  ** Parameters(in)   : Data - Input variable                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1288  **                    BitPn - Bit number                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1289  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1290  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1291  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1292  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1293  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1294  ** Description      : This function:                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1295  **                    Clear the respective bit in the variable                **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1296  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1297  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1298  LOCAL_INLINE void Stm_lClrBit(uint8* Data, const uint8 BitPn)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1299  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1300    *Data &= (~(uint8)(STM_COMPARE_VAL << BitPn));
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1301  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1302  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1303  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1304  ** Traceability      : [cover parentID=]                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1305  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1306  ** Syntax           : LOCAL_INLINE void Stm_lGetBit(                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1307  **                                    const uint8 Data,const uint8 BitPn)     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1308  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1309  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1310  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1311  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1312  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1313  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1314  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1315  ** Parameters(in)   : Data - Input variable                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1316  **                    BitPn - Bit number                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1317  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1318  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1319  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1320  ** Return value     : Returns the respective bit                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1321  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1322  ** Description      : This function:                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1323  **                    Get the respective bit in the variable                  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1324  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1325  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1326  LOCAL_INLINE uint8 Stm_lGetBit(const uint8 Data, const uint8 BitPn)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1327  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1328    uint8 Value;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1329    Value = (((uint8)Data >> BitPn) & STM_COMPARE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1330    return Value;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1331  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1332  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1333  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1334  ** Traceability      : [cover parentID=]                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1335  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1336  ** Syntax           : LOCAL_INLINE void Stm_lCopyBit(const uint8 Source,      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1337  **                        uint8* DestinationData, uint8 DestinationPosition)  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1338  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1339  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1340  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1341  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1342  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1343  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1344  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1345  ** Parameters(in)   : Source - Input variable                                 **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1346  **                    DestinationData - Output variable                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1347  **                    DestinationPosition - Bit position in output variable   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1348  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1349  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1350  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1351  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1352  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1353  ** Description      : This function:                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1354  **                    copy the respective bit in the output variable          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1355  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1356  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1357  LOCAL_INLINE void Stm_lCopyBit(const uint8 Source, uint8* DestinationData,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1358                                 uint8 DestinationPosition)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1359  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1360    if(Source == STM_COMPARE_VAL)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1361    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1362      /* Set the passed input value in the passed bit position  */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1363      Stm_lSetBit(DestinationData, DestinationPosition);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1364    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1365    else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1366    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1367      /* clears the passed input value from the passed bit position */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1368      Stm_lClrBit(DestinationData, DestinationPosition);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1369    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1370  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1371  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1372  #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1373  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1374  ** Syntax : LOCAL_INLINE Std_ReturnType Stm_lModnumAndCmpregDetCheck          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1375  **      (const uint8 ModuleNumber,const uint8 CompareRegisterId,              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1376  **                             const uint8 ServiceId,const uint32 CoreId)     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1377  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1378  ** Service ID:        none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1379  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1380  ** Sync/Async:        Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1381  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1382  ** Reentrancy:        Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1383  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1384  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1385  **                    CompareRegisterId - Compare register number             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1386  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1387  ** Parameters (out):  none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1388  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1389  ** Return value:      ErrStatus (Std_ReturnType)                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1390  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1391  ** Description :  Local function to check the module number and compare       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1392  **                register values are valid and report DET in case of wrong   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1393  **                parameter is passed                                         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1394  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1395  ** Traceability:                                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1396  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1397  LOCAL_INLINE Std_ReturnType Stm_lModnumAndCmpregDetCheck
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1398  (
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1399     const uint8 ModuleNumber, const uint8 CompareRegisterId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1400     const uint8 ServiceId, const uint32 CoreId
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1401  )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1402  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1403    Std_ReturnType                      ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1404    ErrStatus = Stm_lModnumberDetCheck(ModuleNumber, ServiceId, CoreId);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1405  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1406    /* Check No DET present */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1407    if (ErrStatus == E_OK)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1408    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1409      /* Check CMP Register value is valid */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1410      if ((Stm_ModuleMap[CoreId].CmpRegId == STM_CMP0_CMP1_USED) && \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1411          (CompareRegisterId > STM_MAX_CMP_REG_NUM))
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1412      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1413        /* Call local function to report DET for invalid CMP reg id is passed */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1414        Stm_lReportError(ServiceId, STM_E_CMPREG_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1415        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1416        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1417      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1418      else if(Stm_ModuleMap[CoreId].CmpRegId == STM_CMP0_CMP1_UNUSED)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1419      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1420        /* Call local function to report DET for invalid CMP reg id is passed */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1421        Stm_lReportError(ServiceId, STM_E_CMPREG_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1422        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1423        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1424      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1425      else if(((Stm_ModuleMap[CoreId].CmpRegId == STM_CMP0_USED) &&  \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1426               (CompareRegisterId != 0x0U)) || \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1427               ((Stm_ModuleMap[CoreId].CmpRegId == STM_CMP1_USED) && \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1428               (CompareRegisterId != STM_COMPARE_VAL)))
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1429      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1430        /* Call local function to report DET for invalid CMP reg id is passed */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1431        Stm_lReportError(ServiceId, STM_E_CMPREG_FAILED);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1432        /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1433        ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1434      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1435      else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1436      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1437        /* added for MISRA */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1438      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1439    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1440    return (ErrStatus);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1441  } /* End of Stm_lModnumAndCmpregDetCheck() function */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1442  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1443  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1444  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1445  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1446  ** Syntax : LOCAL_INLINE Std_ReturnType Stm_lModnumberDetCheck(               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1447  **      const uint8 ModuleNumber,const uint8 ServiceId, const uint32 CoreId)  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1448  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1449  ** Service ID:        none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1450  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1451  ** Sync/Async:        Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1452  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1453  ** Reentrancy:        Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1454  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1455  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1456  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1457  ** Parameters (out):  none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1458  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1459  ** Return value:      ErrStatus (Std_ReturnType)                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1460  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1461  ** Description :  Local function to check the module number is valid and      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1462  **                call DET report error in case of wrong parameter is passed  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1463  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1464  ** Traceability:                                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1465  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1466  LOCAL_INLINE Std_ReturnType Stm_lModnumberDetCheck
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1467  (
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1468    const uint8 ModuleNumber,const uint8 ServiceId,const uint32 CoreId
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1469  )
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1470  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1471    Std_ReturnType  ErrStatus;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1472    ErrStatus = E_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1473  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1474    /* Check STM timer number is matching with timer allocated in core */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1475    if ((ModuleNumber != Stm_ModuleMap[CoreId].StmModID) || \ 
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1476        (ModuleNumber == STM_TIMER_UNUSED))
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1477    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1478      /* Call local function to report DET STM module not
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1479         configured for this Core*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1480      Stm_lReportError(ServiceId, STM_E_CORE_TIMER_MISMATCH );
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1481      /* Update ErrStatus with E_NOT_OK */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1482      ErrStatus = (Std_ReturnType)E_NOT_OK;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1483    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1484    return (ErrStatus);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1485  } /* End of Stm_lModnumberDetCheck() function */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1486  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1487  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1488  ** Traceability:                                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1489  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1490  ** Syntax : LOCAL_INLINE void Stm_lReportError( const uint8 ApiId,            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1491  **                                          const uint8 ErrorId)              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1492  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1493  ** Description :    Function to report DET                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1494  ** [/cover]                                                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1495  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1496  ** Service ID:       None                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1497  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1498  ** Sync/Async:       Synchronous                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1499  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1500  ** Reentrancy:       Reentrant                                                **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1501  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1502  ** Parameters (in):  ApiId - Service ID of the API reporting an error         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1503  **                   ErrorId - ID of the error reported                       **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1504  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1505  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1506  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1507  ** Return value:     None                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1508  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1509  ** Description :  Local function to report DET error                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1510  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1511  ** Traceability:  NA                                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1512  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1513  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1514  LOCAL_INLINE void Stm_lReportError(const uint8 ApiId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1515                                     const uint8 ErrorId)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1516  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1517    #if (STM_DEV_ERROR_DETECT == STD_ON)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1518    (void)Det_ReportError(
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1519      STM_MODULE_ID,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1520      STM_INSTANCE_ID,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1521      ApiId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1522      ErrorId);/* End of report to DET */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1523    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1524  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1525  #endif /* (STM_DEV_ERROR_DETECT == STD_ON) */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1526  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1527  #if (STM_E_CLC_ENABLE_ERR_DEM_REPORT == STM_ENABLE_DEM_REPORT)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1528  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1529  ** Traceability     :                                                         **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1530  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1531  ** Syntax           : static void Stm_lReportDemError(const Dem_EventIdType   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1532  **                           EventId, const Dem_EventStatusType EventStatus)  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1533  ** Service ID:       None                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1534  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1535  ** Sync/Async:       Synchronous                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1536  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1537  ** Reentrancy:       Reentrant                                                **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1538  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1539  ** Parameters (in):  EventId - DEM Event id                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1540  **                   EventStatus - DEM Event status                           **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1541  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1542  ** Parameters (out): None                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1543  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1544  ** Return value:     None                                                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1545  ** Description :    Function to report Production Errors                                   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1546  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1547  **[/cover]                                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1548  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1549  static void Stm_lReportDemError(const Dem_EventIdType EventId,
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1550  const Dem_EventStatusType EventStatus)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1551  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1552    #if (MCAL_AR_VERSION == MCAL_AR_422)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1553    /* Report Production Error for AS422 by calling Mcal_Wrapper_Dem_ReportErrorStatus */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1554    Mcal_Wrapper_Dem_ReportErrorStatus(EventId, EventStatus);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1555    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1556    #if (MCAL_AR_VERSION == MCAL_AR_440)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1557    /*Report Production Error for AS440 by calling Mcal_Wrapper_Dem_SetEventStatus */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1558    (void)Mcal_Wrapper_Dem_SetEventStatus(EventId, EventStatus);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1559    #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1560  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1561  #endif
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1562  /* End of Stm_lReportDemError */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1563  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1564  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1565  ** Syntax             : LOCAL_INLINE Stm_ModuleParameterType* \               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1566  **                           Stm_lGetModNumStatusPtr(void)                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1567  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1568  ** Service ID:        none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1569  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1570  ** Sync/Async:        Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1571  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1572  ** Reentrancy:        Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1573  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1574  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1575  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1576  ** Parameters (out):  none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1577  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1578  ** Return value:  Stm_ModuleParameterType*)Stm_TimerCoreAllocation            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1579  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1580  ** Description :  Local function :Get the STM peripheral core allocation ptr  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1581  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1582  ** Traceability:                                                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1583  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1584  LOCAL_INLINE  Stm_ModuleParameterType* Stm_lGetModNumStatusPtr(void)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1585  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1586    uint32 CoreId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1587    CoreId = Mcal_GetCpuIndex();
	call	Mcal_GetCpuIndex
.L252:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1588    /* MISRA2012_RULE_11_3_JUSTIFICATION: This rule  violation is agreed as
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1589       we need to store the address passed is in the called function in
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1590       many scenarios.   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1591    /* MISRA2012_RULE_11_8_JUSTIFICATION: A cast shall not remove any const
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1592       or volatile qualification from the type pointed to by a pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1593    return Stm_TimerCoreAllocation[CoreId];
	movh.a	a15,#@his(Stm_TimerCoreAllocation)
	lea	a15,[a15]@los(Stm_TimerCoreAllocation)
.L315:
	addsc.a	a15,a15,d2,#2
	ld.a	a4,[a15]
.L109:
	movh.a	a2,#@his(Stm_ModuleMap)
	lea	a2,[a2]@los(Stm_ModuleMap)
.L316:
	addsc.a	a15,a2,d9,#1
.L317:
	ld.bu	d15,[a15]1
.L318:
	jeq	d15,#0,.L3
.L319:
	movh.a	a2,#@his(Stm_ModuleMap)
	lea	a2,[a2]@los(Stm_ModuleMap)
.L320:
	addsc.a	a15,a2,d9,#1
.L321:
	ld.bu	d15,[a15]1
.L322:
	jne	d15,#2,.L4
.L3:
	lea	a2,0xf0001000
.L323:
	sha	d15,d8,#8
.L324:
	addsc.a	a15,a2,d15,#0
.L325:
	mov	d15,#0
.L326:
	st.w	[a15]48,d15
.L327:
	mov	d0,#31
	lea	a2,[a15]56
	
.L253:
	imask e2,d0,d15,#(5) 
 ldmst [a2]0,e2
	
.L328:
	mov	d0,#1
	mov	d1,#0
	lea	a2,0xf0001000
	sha	d15,d8,#8
	addsc.a	a2,a2,d15,#0
	lea	a15,[a2]60
	
	imask e2,d0,d1,#(3) 
 ldmst [a15]0,e2
	
.L329:
	mov	d15,#0
.L330:
	st.w	[a4]8,d15
.L4:
	movh.a	a15,#@his(Stm_ModuleMap)
	lea	a15,[a15]@los(Stm_ModuleMap)
.L331:
	addsc.a	a15,a15,d9,#1
.L332:
	ld.bu	d15,[a15]1
.L333:
	jeq	d15,#1,.L5
.L334:
	movh.a	a15,#@his(Stm_ModuleMap)
	lea	a15,[a15]@los(Stm_ModuleMap)
.L335:
	addsc.a	a15,a15,d9,#1
.L336:
	ld.bu	d15,[a15]1
.L337:
	jne	d15,#2,.L6
.L5:
	lea	a15,0xf0001000
.L338:
	sha	d15,d8,#8
.L339:
	addsc.a	a15,a15,d15,#0
.L340:
	mov	d15,#0
.L341:
	st.w	[a15]52,d15
.L342:
	mov	d15,#31
	mov	d0,#16
	lea	a15,[a15]56
	
	imask e2,d15,d0,#(5) 
 ldmst [a15]0,e2
	
.L343:
	mov	d0,#5
	mov	d1,#4
	lea	a15,0xf0001000
	sha	d15,d8,#8
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]60
	
	imask e2,d0,d1,#(3) 
 ldmst [a15]0,e2
	
.L344:
	mov	d15,#0
.L345:
	st.w	[a4]12,d15
.L6:
	mov	d15,#0
.L346:
	st.b	[a4]17,d15
.L347:
	mov	d15,#2
.L348:
	st.b	[a4]16,d15
.L2:
	ret
.L100:
	
__Stm_EnableModule_function_end:
	.size	Stm_EnableModule,__Stm_EnableModule_function_end-Stm_EnableModule
.L50:
	; End of function
	
	.sdecl	'.text.Stm_EnableAlarm.Code.Cpu0',code,cluster('Stm_EnableAlarm')
	.sect	'.text.Stm_EnableAlarm.Code.Cpu0'
	.align	2
	
	.global	Stm_EnableAlarm
; Function Stm_EnableAlarm
.L29:
Stm_EnableAlarm:	.type	func
	mov	d9,d4
.L255:
	mov	d10,d5
.L256:
	mov	d15,d6
.L257:
	mov	d8,d7
.L259:
	mov.aa	a12,a4
.L130:
	call	Mcal_GetCpuIndex
.L254:
	movh.a	a15,#@his(Stm_TimerCoreAllocation)
	lea	a15,[a15]@los(Stm_TimerCoreAllocation)
.L353:
	addsc.a	a15,a15,d2,#2
	ld.a	a2,[a15]
.L131:
	lea	a15,[a2]17
.L354:
	mov	d1,d10
.L134:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1360    if(Source == STM_COMPARE_VAL)      (inlined)
	jne	d15,#1,.L7
.L143:
	ld.bu	d0,[a15]
.L355:
	mov	d4,#1
.L356:
	sh	d4,d4,d1
.L357:
	or	d0,d4
	st.b	[a15],d0
.L144:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1363      Stm_lSetBit(DestinationData, DestinationPosition);      (inlined)
	j	.L8

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1360    if(Source == STM_COMPARE_VAL)      (inlined)
.L7:
	ld.bu	d15,[a15]
.L258:
	mov	d0,#1
.L358:
	sh	d0,d0,d1
.L359:
	extr.u	d0,d0,#0,#8
.L360:
	xor	d0,d0,#255
.L361:
	and	d15,d0
	st.b	[a15],d15

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1365    else      (inlined)
.L8:
	addsc.a	a15,a2,d10,#2
.L362:
	st.w	[a15]8,d8
.L363:
	st.a	[a15],a12
.L364:
	jne	d10,#0,.L9
.L365:
	lea	a15,0xf0001000
.L366:
	sha	d15,d9,#8
.L367:
	addsc.a	a15,a15,d15,#0
.L368:
	ld.bu	d15,[a15]57
.L369:
	j	.L10
.L9:
	lea	a15,0xf0001000
.L370:
	sha	d15,d9,#8
.L371:
	addsc.a	a15,a15,d15,#0
.L372:
	ld.bu	d15,[a15]59
.L10:
	and	d0,d15,#31
.L157:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1594  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1595  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1596  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1597  ** Traceability      :                                                        **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1598  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1599  ** Syntax           : Stm_TotalTimerCaptureType                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1600  **                     Stm_lReadTotalTimer(const uint8 ModuleNumber)          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1601  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1602  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1603  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1604  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1605  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1606  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1607  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1608  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1609  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1610  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1611  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1612  ** Return value     : Stm_TotalTimerCaptureType : Holds the lower and upper   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1613  **                    32-bit values of a 64-bit STM timer                     **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1614  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1615  ** Description      : This function returns complete 64 bit STM Timer value   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1616  **                    of a particular STM module                              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1617  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1618  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1619  LOCAL_INLINE Stm_TotalTimerCaptureType Stm_lReadTotalTimer(const uint8
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1620  ModuleNumber)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1621  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1622    Stm_TotalTimerCaptureType TotalTimerCapture;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1623  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1624    /* Returns the TIM0 and CAP register values based on requested Mod num */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1625  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1626    TotalTimerCapture.LowerPart = STM_BASE[ModuleNumber].TIM0.U;
	lea	a15,0xf0001000
.L373:
	sha	d15,d9,#8
.L374:
	addsc.a	a15,a15,d15,#0
.L375:
	ld.w	d4,[a15]16
.L376:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1627    TotalTimerCapture.UpperPart = STM_BASE[ModuleNumber].CAP.U;
	ld.w	d7,[a15]44
.L158:
	rsub	d1,d0,#32
.L262:
	addsc.a	a2,a2,d10,#2
	ld.w	d15,[a2]8
.L377:
	rsub	d0,#0
	sh	d4,d4,d0
.L163:
	sh	d7,d7,d1
.L164:
	or	d4,d7
.L264:
	add	d15,d4
.L378:
	addsc.a	a2,a15,d10,#2
.L379:
	st.w	[a2]48,d15
.L380:
	jne	d10,#0,.L11
.L381:
	mov	d15,#1
.L265:
	mov	d0,#0
.L261:
	lea	a15,[a15]60
	
.L260:
	imask e2,d15,d0,#(3) 
 ldmst [a15]0,e2
	
.L382:
	ret
.L11:
	mov	d0,#5
.L268:
	mov	d1,#4
.L263:
	lea	a15,0xf0001000
	sha	d15,d9,#8
.L266:
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]60
	
.L267:
	imask e2,d0,d1,#(3) 
 ldmst [a15]0,e2
	
.L383:
	ret
.L112:
	
__Stm_EnableAlarm_function_end:
	.size	Stm_EnableAlarm,__Stm_EnableAlarm_function_end-Stm_EnableAlarm
.L55:
	; End of function
	
	.sdecl	'.text.Stm_DisableAlarm.Code.Cpu0',code,cluster('Stm_DisableAlarm')
	.sect	'.text.Stm_DisableAlarm.Code.Cpu0'
	.align	2
	
	.global	Stm_DisableAlarm
; Function Stm_DisableAlarm
.L31:
Stm_DisableAlarm:	.type	func
	mov	e8,d5,d4
.L172:
	call	Mcal_GetCpuIndex
.L269:
	movh.a	a15,#@his(Stm_TimerCoreAllocation)
	lea	a15,[a15]@los(Stm_TimerCoreAllocation)
.L388:
	addsc.a	a15,a15,d2,#2
	ld.a	a15,[a15]
.L173:
	jne	d9,#0,.L13
.L271:
	mov	d0,#0
	lea	a2,0xf0001000
.L272:
	sha	d15,d8,#8
.L273:
	addsc.a	a2,a2,d15,#0
	lea	a2,[a2]60
	
.L270:
	imask e2,d0,d0,#(3) 
 ldmst [a2]0,e2
	
	j	.L14
.L13:
	mov	d0,#0
	mov	d1,#4
	lea	a2,0xf0001000
.L275:
	sha	d15,d8,#8
.L276:
	addsc.a	a2,a2,d15,#0
	lea	a2,[a2]60
	
.L274:
	imask e2,d0,d1,#(3) 
 ldmst [a2]0,e2
	
.L14:
	addsc.a	a15,a15,d9,#2
.L277:
	mov.a	a2,#0
.L389:
	st.a	[a15],a2
.L390:
	ret
.L166:
	
__Stm_DisableAlarm_function_end:
	.size	Stm_DisableAlarm,__Stm_DisableAlarm_function_end-Stm_DisableAlarm
.L60:
	; End of function
	
	.sdecl	'.text.Stm_SetCompareMatchControl.Code.Cpu0',code,cluster('Stm_SetCompareMatchControl')
	.sect	'.text.Stm_SetCompareMatchControl.Code.Cpu0'
	.align	2
	
	.global	Stm_SetCompareMatchControl
; Function Stm_SetCompareMatchControl
.L33:
Stm_SetCompareMatchControl:	.type	func
	jne	d5,#0,.L15
.L395:
	mov	d0,#8
	lea	a15,0xf0001000
	sha	d15,d4,#8
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]56
	
	imask e2,d6,d0,#(5) 
 ldmst [a15]0,e2
	
.L396:
	mov	d0,#0
	lea	a15,0xf0001000
	sha	d15,d4,#8
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]56
	
	imask e2,d7,d0,#(5) 
 ldmst [a15]0,e2
	
.L397:
	ret
.L15:
	mov	d0,#24
	lea	a15,0xf0001000
	sha	d15,d4,#8
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]56
	
	imask e2,d6,d0,#(5) 
 ldmst [a15]0,e2
	
.L398:
	mov	d0,#16
	lea	a15,0xf0001000
	sha	d15,d4,#8
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]56
	
	imask e2,d7,d0,#(5) 
 ldmst [a15]0,e2
	
.L399:
	ret
.L175:
	
__Stm_SetCompareMatchControl_function_end:
	.size	Stm_SetCompareMatchControl,__Stm_SetCompareMatchControl_function_end-Stm_SetCompareMatchControl
.L65:
	; End of function
	
	.sdecl	'.text.Stm_ReadTimerValue.Code.Cpu0',code,cluster('Stm_ReadTimerValue')
	.sect	'.text.Stm_ReadTimerValue.Code.Cpu0'
	.align	2
	
	.global	Stm_ReadTimerValue
; Function Stm_ReadTimerValue
.L35:
Stm_ReadTimerValue:	.type	func
	lea	a15,0xf0001010
.L404:
	sh	d15,d4,#8
	insert	d15,d15,#0,#0,#2
.L405:
	addsc.a	a15,a15,d15,#0
.L278:
	addsc.a	a15,a15,d5,#2
.L279:
	ld.w	d2,[a15]
.L280:
	ret
.L184:
	
__Stm_ReadTimerValue_function_end:
	.size	Stm_ReadTimerValue,__Stm_ReadTimerValue_function_end-Stm_ReadTimerValue
.L70:
	; End of function
	
	.sdecl	'.text.Stm_ReadTotalTimerValue.Code.Cpu0',code,cluster('Stm_ReadTotalTimerValue')
	.sect	'.text.Stm_ReadTotalTimerValue.Code.Cpu0'
	.align	2
	
	.global	Stm_ReadTotalTimerValue
; Function Stm_ReadTotalTimerValue
.L37:
Stm_ReadTotalTimerValue:	.type	func
	lea	a15,0xf0001000
.L410:
	sha	d15,d4,#8
.L411:
	addsc.a	a15,a15,d15,#0
.L412:
	ld.w	d2,[a15]16
.L413:
	ld.w	d3,[a15]44
.L196:
	ret
.L192:
	
__Stm_ReadTotalTimerValue_function_end:
	.size	Stm_ReadTotalTimerValue,__Stm_ReadTotalTimerValue_function_end-Stm_ReadTotalTimerValue
.L75:
	; End of function
	
	.sdecl	'.text.Stm_SleepModeHandle.Code.Cpu0',code,cluster('Stm_SleepModeHandle')
	.sect	'.text.Stm_SleepModeHandle.Code.Cpu0'
	.align	2
	
	.global	Stm_SleepModeHandle
; Function Stm_SleepModeHandle
.L39:
Stm_SleepModeHandle:	.type	func
	lea	a15,0xf0001000
	sha	d15,d4,#8
	addsc.a	a4,a15,d15,#0
	sh	d4,d5,#3
.L281:
	j	Mcal_WritePeripEndInitProtReg
.L199:
	
__Stm_SleepModeHandle_function_end:
	.size	Stm_SleepModeHandle,__Stm_SleepModeHandle_function_end-Stm_SleepModeHandle
.L80:
	; End of function
	
	.sdecl	'.text.Stm_Isr.Code.Cpu0',code,cluster('Stm_Isr')
	.sect	'.text.Stm_Isr.Code.Cpu0'
	.align	2
	
	.global	Stm_Isr

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1628  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1629    return TotalTimerCapture;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1630  }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1631  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1632  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1633  /*******************************************************************************
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1634  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1635  ** Syntax           : void Stm_Isr(const uint8 ModuleNumber,                  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1636  **                                              const uint32 InterruptNode)   **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1637  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1638  ** Service ID       : NA                                                      **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1639  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1640  ** Sync/Async       : Synchronous                                             **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1641  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1642  ** Reentrancy       : Reentrant                                               **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1643  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1644  ** Parameters(in)   : ModuleNumber - Stm Peripheral number                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1645  **                    InterruptNode - 0 or 1                                  **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1646  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1647  ** Parameters (out) : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1648  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1649  ** Return value     : none                                                    **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1650  **                                                                            **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1651  ** Description      : This function:                                          **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1652  **                      - is the interrupt handler and collects the interrupt **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1653  **                        node and invoke the call-back function              **
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1654  *******************************************************************************/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1655  void Stm_Isr(const uint32 ModuleNumber, const uint32 InterruptNode)
; Function Stm_Isr
.L41:
Stm_Isr:	.type	func
	mov	e8,d4,d5
.L216:
	call	Mcal_GetCpuIndex
.L282:
	movh.a	a15,#@his(Stm_TimerCoreAllocation)
	lea	a15,[a15]@los(Stm_TimerCoreAllocation)
.L422:
	addsc.a	a15,a15,d2,#2
	ld.a	a4,[a15]
.L217:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1656  {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1657    const Stm_ModuleParameterType      *StmkernelStatusPtr;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1658    uint8 CompareRegisterId;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1659    uint8 MatchStartBit;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1660    uint32 Cmpval;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1661    uint8 shiftval;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1662    Stm_TotalTimerCaptureType Stm_64Bit_Timer_Value;
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1663    /* Get the STM peripheral core allocation pointer */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1664    /* MISRA2012_RULE_11_3_JUSTIFICATION: casting of register address to
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1665       corresponding structure pointer   */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1666    StmkernelStatusPtr = Stm_lGetModNumStatusPtr();
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1667  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1668    /* Identify the Compare register ID mapped to the invoked interrupt node */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1669    CompareRegisterId =
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1670      Stm_lGetBit(StmkernelStatusPtr->InterruptNodeMap, (uint8)InterruptNode);
	ld.bu	d15,[a4]16
.L284:
	extr.u	d0,d8,#0,#8
.L220:
	rsub	d0,#0
	sha	d15,d15,d0
.L423:
	and	d4,d15,#1
.L221:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1671    /* In continuous mode CMP value is udpated and call back notification
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1672         is given continuously */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1673    if(Stm_lGetBit(StmkernelStatusPtr->TimerMode,
	ld.bu	d0,[a4]17
.L237:
	mov	d1,d4
.L286:
	rsub	d1,#0
.L285:
	sha	d0,d0,d1
.L424:
	and	d15,d0,#1
.L287:
	jeq	d15,#0,.L19
.L228:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1674                   CompareRegisterId) == STM_COMPARE_VAL)
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1675    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1676      /* Reload the compare register again as the request is to invoke the call
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1677         back function in continuous mode */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1678      MatchStartBit = (CompareRegisterId == 0x0U) ?(STM_BASE[ModuleNumber].
	jne	d4,#0,.L20
.L229:
	lea	a15,0xf0001000
.L289:
	sh	d15,d9,#8
.L288:
	addsc.a	a15,a15,d15,#0
.L425:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1679      CMCON.B.MSTART0):(STM_BASE[ModuleNumber].CMCON.B.MSTART1);
	ld.bu	d15,[a15]57
.L426:
	j	.L21
.L20:
	lea	a15,0xf0001000
.L291:
	sh	d15,d9,#8
.L290:
	addsc.a	a15,a15,d15,#0
.L427:
	ld.bu	d15,[a15]59
.L21:
	and	d0,d15,#31
.L292:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1680  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1681      /* load 64 bits timer value */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1682      Stm_64Bit_Timer_Value= Stm_lReadTotalTimer((uint8)ModuleNumber);
	extr.u	d1,d9,#0,#8
.L239:
	lea	a2,0xf0001000
.L428:
	sha	d15,d1,#8
.L429:
	addsc.a	a15,a2,d15,#0
.L430:
	ld.w	d2,[a15]16
.L283:
	ld.w	d7,[a15]44
.L240:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1683  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1684      shiftval = STM_MAX_SHIFT_VALUE - MatchStartBit;
	rsub	d1,d0,#32
.L230:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1685  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1686      Cmpval = StmkernelStatusPtr->CompareRegValue[CompareRegisterId]
	addsc.a	a15,a4,d4,#2
.L231:
	ld.w	d15,[a15]8
.L431:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1687               + (((Stm_64Bit_Timer_Value.LowerPart) >> MatchStartBit) |
	rsub	d0,#0
	sh	d2,d2,d0
.L243:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1688               ((Stm_64Bit_Timer_Value.UpperPart) << shiftval));
	sh	d0,d7,d1
.L244:
	or	d2,d0
.L293:
	add	d2,d15
.L294:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1689  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1690      STM_BASE[ModuleNumber].CMP[CompareRegisterId].U  = (Cmpval & STM_SET_MASK);
	sh	d15,d9,#8
.L295:
	addsc.a	a15,a2,d15,#0
.L232:
	addsc.a	a15,a15,d4,#2
.L233:
	st.w	[a15]48,d2
.L432:
	j	.L22
.L19:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1691  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1692    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1693    /* In one shot mode, interrupt is disabled, notification is given once */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1694    else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1695    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1696      if(CompareRegisterId == 0x0U)
	jne	d4,#0,.L23
.L234:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1697      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1698        /* Requested for one shot mode, So disable the service request */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1699        Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP0EN_OFF, \ 
	mov	d0,#0
	lea	a15,0xf0001000
.L299:
	sh	d15,d9,#8
.L297:
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]60
	
.L296:
	imask e2,d0,d0,#(1) 
 ldmst [a15]0,e2
	
	j	.L24
.L23:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1700                          STM_ICR_CMP0_DISABLE_MSK, STM_ICR_CMP0_DISABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1701      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1702      else
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1703      {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1704        /* Requested for one shot mode, So disable the service request */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1705        Mcal_SetBitAtomic((&STM_BASE[ModuleNumber].ICR.U), STM_ICR_CMP1EN_OFF, \ 
	mov	d0,#0
	mov	d1,#4
.L298:
	lea	a15,0xf0001000
.L302:
	sh	d15,d9,#8
.L301:
	addsc.a	a15,a15,d15,#0
	lea	a15,[a15]60
	
.L300:
	imask e2,d0,d1,#(1) 
 ldmst [a15]0,e2
	
.L24:
.L22:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1706                          STM_ICR_CMP1_DISABLE_MSK, STM_ICR_CMP1_DISABLE_VAL);
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1707      }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1708    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1709  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1710    /* Check and invoke the call-back Function */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1711    if (StmkernelStatusPtr->Stm_ArrayFunctionPtr[CompareRegisterId] != NULL_PTR)
	addsc.a	a15,a4,d4,#2
.L235:
	ld.w	d15,[a15]
.L433:
	jeq	d15,#0,.L25
.L434:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1712    {
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1713      StmkernelStatusPtr->Stm_ArrayFunctionPtr[CompareRegisterId]();
	ld.a	a15,[a15]
.L435:
	ji	a15
.L25:

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1714    }
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1715  }
	ret
.L204:
	
__Stm_Isr_function_end:
	.size	Stm_Isr,__Stm_Isr_function_end-Stm_Isr
.L85:
	; End of function
	
	.sdecl	'.bss.Stm_TimerAllocation_Core0.ClearedData.Cpu0.Unspecified',data,cluster('Stm_TimerAllocation_Core0')
	.sect	'.bss.Stm_TimerAllocation_Core0.ClearedData.Cpu0.Unspecified'
	.align	4
Stm_TimerAllocation_Core0:	.type	object
	.size	Stm_TimerAllocation_Core0,20
	.space	20
	.sdecl	'.bss.Stm_TimerAllocation_Core1.ClearedData.Cpu1.Unspecified',data,cluster('Stm_TimerAllocation_Core1')
	.sect	'.bss.Stm_TimerAllocation_Core1.ClearedData.Cpu1.Unspecified'
	.align	4
Stm_TimerAllocation_Core1:	.type	object
	.size	Stm_TimerAllocation_Core1,20
	.space	20
	.sdecl	'.bss.Stm_TimerAllocation_Core2.ClearedData.Cpu2.Unspecified',data,cluster('Stm_TimerAllocation_Core2')
	.sect	'.bss.Stm_TimerAllocation_Core2.ClearedData.Cpu2.Unspecified'
	.align	4
Stm_TimerAllocation_Core2:	.type	object
	.size	Stm_TimerAllocation_Core2,20
	.space	20
	.sdecl	'.bss.Stm_TimerAllocation_Core3.ClearedData.Cpu3.Unspecified',data,cluster('Stm_TimerAllocation_Core3')
	.sect	'.bss.Stm_TimerAllocation_Core3.ClearedData.Cpu3.Unspecified'
	.align	4
Stm_TimerAllocation_Core3:	.type	object
	.size	Stm_TimerAllocation_Core3,20
	.space	20
	.sdecl	'.bss.Stm_TimerAllocation_Core4.ClearedData.Cpu4.Unspecified',data,cluster('Stm_TimerAllocation_Core4')
	.sect	'.bss.Stm_TimerAllocation_Core4.ClearedData.Cpu4.Unspecified'
	.align	4
Stm_TimerAllocation_Core4:	.type	object
	.size	Stm_TimerAllocation_Core4,20
	.space	20
	.sdecl	'.bss.Stm_TimerAllocation_Core5.ClearedData.Cpu5.Unspecified',data,cluster('Stm_TimerAllocation_Core5')
	.sect	'.bss.Stm_TimerAllocation_Core5.ClearedData.Cpu5.Unspecified'
	.align	4
Stm_TimerAllocation_Core5:	.type	object
	.size	Stm_TimerAllocation_Core5,20
	.space	20
	.sdecl	'.rodata.Stm_TimerCoreAllocation.Const.Cpu0.Unspecified',data,rom,cluster('Stm_TimerCoreAllocation')
	.sect	'.rodata.Stm_TimerCoreAllocation.Const.Cpu0.Unspecified'
	.align	4
Stm_TimerCoreAllocation:	.type	object
	.size	Stm_TimerCoreAllocation,24
	.word	Stm_TimerAllocation_Core0,Stm_TimerAllocation_Core1,Stm_TimerAllocation_Core2,Stm_TimerAllocation_Core3
	.word	Stm_TimerAllocation_Core4,Stm_TimerAllocation_Core5
	.calls	'Stm_EnableModule','Mcal_GetCpuIndex'
	.calls	'Stm_EnableModule','Mcal_WritePeripEndInitProtReg'
	.calls	'Stm_EnableAlarm','Mcal_GetCpuIndex'
	.calls	'Stm_DisableAlarm','Mcal_GetCpuIndex'
	.calls	'Stm_SleepModeHandle','Mcal_WritePeripEndInitProtReg'
	.calls	'Stm_Isr','Mcal_GetCpuIndex'
	.calls	'Stm_Isr','__INDIRECT__'
	.calls	'Stm_EnableModule','',0
	.calls	'Stm_EnableAlarm','',0
	.calls	'Stm_DisableAlarm','',0
	.calls	'Stm_SetCompareMatchControl','',0
	.calls	'Stm_ReadTimerValue','',0
	.calls	'Stm_ReadTotalTimerValue','',0
	.calls	'Stm_SleepModeHandle','',0
	.extern	Mcal_WritePeripEndInitProtReg
	.extern	Mcal_GetCpuIndex
	.extern	Stm_ModuleMap
	.extern	__INDIRECT__
	.calls	'Stm_Isr','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L43:
	.word	5672
	.half	3
	.word	.L44
	.byte	4
.L42:
	.byte	1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L45
.L124:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	157
	.byte	4
	.word	157
.L142:
	.byte	5
	.byte	'Stm_lSetBit',0,3,1,246,9,19,1,1
.L145:
	.byte	6
	.byte	'Data',0,1,246,9,38
	.word	174
.L147:
	.byte	6
	.byte	'BitPn',0,1,246,9,56
	.word	179
.L149:
	.byte	7,0,4
	.word	157
.L150:
	.byte	5
	.byte	'Stm_lClrBit',0,3,1,146,10,19,1,1
.L151:
	.byte	6
	.byte	'Data',0,1,146,10,38
	.word	174
.L153:
	.byte	6
	.byte	'BitPn',0,1,146,10,56
	.word	235
.L155:
	.byte	7,0,4
	.word	157
	.byte	4
	.word	157
.L219:
	.byte	8
	.byte	'Stm_lGetBit',0,3,1,174,10,20
	.word	157
	.byte	1,1
.L222:
	.byte	6
	.byte	'Data',0,1,174,10,44
	.word	291
.L224:
	.byte	6
	.byte	'BitPn',0,1,174,10,62
	.word	296
.L226:
	.byte	7,0,4
	.word	157
.L133:
	.byte	5
	.byte	'Stm_lCopyBit',0,3,1,205,10,19,1,1
.L135:
	.byte	6
	.byte	'Source',0,1,205,10,44
	.word	356
.L137:
	.byte	6
	.byte	'DestinationData',0,1,205,10,59
	.word	174
.L139:
	.byte	6
	.byte	'DestinationPosition',0,1,206,10,38
	.word	157
.L141:
	.byte	9,7,7,0,0,10,1,1,3
	.word	457
	.byte	11,8
	.word	460
	.byte	12,1,0
.L105:
	.byte	2
	.byte	'unsigned long int',0,4,7,11,8
	.word	474
	.byte	12,1,0
.L246:
	.byte	13,2,135,1,9,20,14
	.byte	'Stm_ArrayFunctionPtr',0
	.word	465
	.byte	8,2,35,0,14
	.byte	'CompareRegValue',0
	.word	495
	.byte	8,2,35,8,14
	.byte	'InterruptNodeMap',0
	.word	157
	.byte	1,2,35,16,14
	.byte	'TimerMode',0
	.word	157
	.byte	1,2,35,17,0
.L103:
	.byte	3
	.word	504
.L107:
	.byte	8
	.byte	'Stm_lGetModNumStatusPtr',0,3,1,176,12,40
	.word	611
	.byte	1,1
.L110:
	.byte	7,0
.L127:
	.byte	13,2,143,1,9,8,14
	.byte	'LowerPart',0
	.word	474
	.byte	4,2,35,0,14
	.byte	'UpperPart',0
	.word	474
	.byte	4,2,35,4,0,4
	.word	157
.L156:
	.byte	8
	.byte	'Stm_lReadTotalTimer',0,3,1,211,12,40
	.word	654
	.byte	1,1
.L159:
	.byte	6
	.byte	'ModuleNumber',0,1,212,12,1
	.word	699
.L161:
	.byte	7,0
.L101:
	.byte	4
	.word	157
.L113:
	.byte	4
	.word	157
.L115:
	.byte	4
	.word	157
.L117:
	.byte	4
	.word	157
.L119:
	.byte	4
	.word	474
	.byte	15
	.byte	'Stm_CallbackFnPtrType',0,2,158,1,16
	.word	460
.L121:
	.byte	4
	.word	785
	.byte	3
	.word	457
.L167:
	.byte	4
	.word	157
.L169:
	.byte	4
	.word	157
.L176:
	.byte	4
	.word	157
.L178:
	.byte	4
	.word	157
.L180:
	.byte	4
	.word	157
.L182:
	.byte	4
	.word	157
.L185:
	.byte	4
	.word	157
.L187:
	.byte	4
	.word	157
	.byte	2
	.byte	'unsigned int',0,4,7,2
	.byte	'int',0,4,5,16
	.byte	'_Ifx_STM_TIM0_Bits',0,3,218,1,16,4,17
	.byte	'STM_31_0',0,4
	.word	866
	.byte	32,0,2,35,0,0,18,3,255,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	889
	.byte	4,2,35,0,0,4
	.word	935
.L189:
	.byte	3
	.word	975
.L193:
	.byte	4
	.word	157
.L200:
	.byte	4
	.word	157
.L202:
	.byte	4
	.word	157
.L205:
	.byte	4
	.word	474
.L207:
	.byte	4
	.word	474
	.byte	4
	.word	504
.L209:
	.byte	3
	.word	1010
	.byte	19
	.byte	'void',0,20
	.word	1020
	.byte	3
	.word	1026
	.byte	4
	.word	1031
	.byte	4
	.word	474
	.byte	21
	.byte	'Mcal_WritePeripEndInitProtReg',0,4,165,4,13,1,1,1,1,6
	.byte	'RegAddress',0,4,166,4,24
	.word	1036
	.byte	6
	.byte	'DataValue',0,4,166,4,49
	.word	1041
	.byte	0,22
	.byte	'Mcal_GetCpuIndex',0,4,183,6,15
	.word	474
	.byte	1,1,1,1,23
	.word	184
	.byte	24
	.word	204
	.byte	24
	.word	218
	.byte	7,0,23
	.word	240
	.byte	24
	.word	260
	.byte	24
	.word	274
	.byte	7,0,23
	.word	301
	.byte	24
	.word	325
	.byte	24
	.word	339
	.byte	7,0,23
	.word	361
	.byte	24
	.word	382
	.byte	24
	.word	398
	.byte	24
	.word	423
	.byte	9,25
	.word	184
	.byte	24
	.word	204
	.byte	24
	.word	218
	.byte	26
	.word	233
	.byte	0,7,25
	.word	240
	.byte	24
	.word	260
	.byte	24
	.word	274
	.byte	26
	.word	289
	.byte	0,7,0,0,23
	.word	616
	.byte	7,0,23
	.word	704
	.byte	24
	.word	736
	.byte	7,0,27
	.byte	'__INDIRECT__',0,1,1,1,1,1,1,28,1,3
	.word	1312
	.byte	15
	.byte	'__codeptr',0,1,1,1
	.word	1314
	.byte	15
	.byte	'uint8',0,5,106,29
	.word	157
	.byte	2
	.byte	'unsigned short int',0,2,7,15
	.byte	'uint16',0,5,110,29
	.word	1351
	.byte	15
	.byte	'uint32',0,5,114,29
	.word	474
	.byte	15
	.byte	'Stm_ModuleParameterType',0,2,141,1,3
	.word	504
	.byte	15
	.byte	'Stm_TotalTimerCaptureType',0,2,147,1,3
	.word	654
	.byte	13,2,150,1,9,2,14
	.byte	'StmModID',0
	.word	157
	.byte	1,2,35,0,14
	.byte	'CmpRegId',0
	.word	157
	.byte	1,2,35,1,0,15
	.byte	'Stm_ModuleType',0,2,154,1,3
	.word	1471
	.byte	15
	.byte	'Ifx_UReg_8Bit',0,6,79,24
	.word	157
	.byte	15
	.byte	'Ifx_UReg_32Bit',0,6,81,24
	.word	866
	.byte	15
	.byte	'Ifx_SReg_32Bit',0,6,84,24
	.word	882
	.byte	16
	.byte	'_Ifx_STM_ACCEN0_Bits',0,3,70,16,4,17
	.byte	'EN0',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'EN1',0,1
	.word	157
	.byte	1,6,2,35,0,17
	.byte	'EN2',0,1
	.word	157
	.byte	1,5,2,35,0,17
	.byte	'EN3',0,1
	.word	157
	.byte	1,4,2,35,0,17
	.byte	'EN4',0,1
	.word	157
	.byte	1,3,2,35,0,17
	.byte	'EN5',0,1
	.word	157
	.byte	1,2,2,35,0,17
	.byte	'EN6',0,1
	.word	157
	.byte	1,1,2,35,0,17
	.byte	'EN7',0,1
	.word	157
	.byte	1,0,2,35,0,17
	.byte	'EN8',0,1
	.word	157
	.byte	1,7,2,35,1,17
	.byte	'EN9',0,1
	.word	157
	.byte	1,6,2,35,1,17
	.byte	'EN10',0,1
	.word	157
	.byte	1,5,2,35,1,17
	.byte	'EN11',0,1
	.word	157
	.byte	1,4,2,35,1,17
	.byte	'EN12',0,1
	.word	157
	.byte	1,3,2,35,1,17
	.byte	'EN13',0,1
	.word	157
	.byte	1,2,2,35,1,17
	.byte	'EN14',0,1
	.word	157
	.byte	1,1,2,35,1,17
	.byte	'EN15',0,1
	.word	157
	.byte	1,0,2,35,1,17
	.byte	'EN16',0,1
	.word	157
	.byte	1,7,2,35,2,17
	.byte	'EN17',0,1
	.word	157
	.byte	1,6,2,35,2,17
	.byte	'EN18',0,1
	.word	157
	.byte	1,5,2,35,2,17
	.byte	'EN19',0,1
	.word	157
	.byte	1,4,2,35,2,17
	.byte	'EN20',0,1
	.word	157
	.byte	1,3,2,35,2,17
	.byte	'EN21',0,1
	.word	157
	.byte	1,2,2,35,2,17
	.byte	'EN22',0,1
	.word	157
	.byte	1,1,2,35,2,17
	.byte	'EN23',0,1
	.word	157
	.byte	1,0,2,35,2,17
	.byte	'EN24',0,1
	.word	157
	.byte	1,7,2,35,3,17
	.byte	'EN25',0,1
	.word	157
	.byte	1,6,2,35,3,17
	.byte	'EN26',0,1
	.word	157
	.byte	1,5,2,35,3,17
	.byte	'EN27',0,1
	.word	157
	.byte	1,4,2,35,3,17
	.byte	'EN28',0,1
	.word	157
	.byte	1,3,2,35,3,17
	.byte	'EN29',0,1
	.word	157
	.byte	1,2,2,35,3,17
	.byte	'EN30',0,1
	.word	157
	.byte	1,1,2,35,3,17
	.byte	'EN31',0,1
	.word	157
	.byte	1,0,2,35,3,0,15
	.byte	'Ifx_STM_ACCEN0_Bits',0,3,104,3
	.word	1606
	.byte	16
	.byte	'_Ifx_STM_ACCEN1_Bits',0,3,107,16,4,17
	.byte	'reserved_0',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_ACCEN1_Bits',0,3,110,3
	.word	2163
	.byte	16
	.byte	'_Ifx_STM_CAP_Bits',0,3,113,16,4,17
	.byte	'STMCAP_63_32',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_CAP_Bits',0,3,116,3
	.word	2240
	.byte	16
	.byte	'_Ifx_STM_CAPSV_Bits',0,3,119,16,4,17
	.byte	'STMCAP_63_32',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_CAPSV_Bits',0,3,122,3
	.word	2313
	.byte	16
	.byte	'_Ifx_STM_CLC_Bits',0,3,125,16,4,17
	.byte	'DISR',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'DISS',0,1
	.word	157
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,1
	.word	157
	.byte	1,5,2,35,0,17
	.byte	'EDIS',0,1
	.word	157
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	866
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_STM_CLC_Bits',0,3,132,1,3
	.word	2390
	.byte	16
	.byte	'_Ifx_STM_CMCON_Bits',0,3,135,1,16,4,17
	.byte	'MSIZE0',0,1
	.word	157
	.byte	5,3,2,35,0,17
	.byte	'reserved_5',0,1
	.word	157
	.byte	3,0,2,35,0,17
	.byte	'MSTART0',0,1
	.word	157
	.byte	5,3,2,35,1,17
	.byte	'reserved_13',0,1
	.word	157
	.byte	3,0,2,35,1,17
	.byte	'MSIZE1',0,1
	.word	157
	.byte	5,3,2,35,2,17
	.byte	'reserved_21',0,1
	.word	157
	.byte	3,0,2,35,2,17
	.byte	'MSTART1',0,1
	.word	157
	.byte	5,3,2,35,3,17
	.byte	'reserved_29',0,1
	.word	157
	.byte	3,0,2,35,3,0,15
	.byte	'Ifx_STM_CMCON_Bits',0,3,145,1,3
	.word	2532
	.byte	16
	.byte	'_Ifx_STM_CMP_Bits',0,3,148,1,16,4,17
	.byte	'CMPVAL',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_CMP_Bits',0,3,151,1,3
	.word	2752
	.byte	16
	.byte	'_Ifx_STM_ICR_Bits',0,3,154,1,16,4,17
	.byte	'CMP0EN',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'CMP0IR',0,1
	.word	157
	.byte	1,6,2,35,0,17
	.byte	'CMP0OS',0,1
	.word	157
	.byte	1,5,2,35,0,17
	.byte	'reserved_3',0,1
	.word	157
	.byte	1,4,2,35,0,17
	.byte	'CMP1EN',0,1
	.word	157
	.byte	1,3,2,35,0,17
	.byte	'CMP1IR',0,1
	.word	157
	.byte	1,2,2,35,0,17
	.byte	'CMP1OS',0,1
	.word	157
	.byte	1,1,2,35,0,17
	.byte	'reserved_7',0,4
	.word	866
	.byte	25,0,2,35,0,0,15
	.byte	'Ifx_STM_ICR_Bits',0,3,164,1,3
	.word	2821
	.byte	16
	.byte	'_Ifx_STM_ID_Bits',0,3,167,1,16,4,17
	.byte	'MODREV',0,1
	.word	157
	.byte	8,0,2,35,0,17
	.byte	'MODTYPE',0,1
	.word	157
	.byte	8,0,2,35,1,17
	.byte	'MODNUM',0,2
	.word	1351
	.byte	16,0,2,35,2,0,15
	.byte	'Ifx_STM_ID_Bits',0,3,172,1,3
	.word	3024
	.byte	16
	.byte	'_Ifx_STM_ISCR_Bits',0,3,175,1,16,4,17
	.byte	'CMP0IRR',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'CMP0IRS',0,1
	.word	157
	.byte	1,6,2,35,0,17
	.byte	'CMP1IRR',0,1
	.word	157
	.byte	1,5,2,35,0,17
	.byte	'CMP1IRS',0,1
	.word	157
	.byte	1,4,2,35,0,17
	.byte	'reserved_4',0,4
	.word	866
	.byte	28,0,2,35,0,0,15
	.byte	'Ifx_STM_ISCR_Bits',0,3,182,1,3
	.word	3128
	.byte	16
	.byte	'_Ifx_STM_KRST0_Bits',0,3,185,1,16,4,17
	.byte	'RST',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'RSTSTAT',0,1
	.word	157
	.byte	1,6,2,35,0,17
	.byte	'reserved_2',0,4
	.word	866
	.byte	30,0,2,35,0,0,15
	.byte	'Ifx_STM_KRST0_Bits',0,3,190,1,3
	.word	3279
	.byte	16
	.byte	'_Ifx_STM_KRST1_Bits',0,3,193,1,16,4,17
	.byte	'RST',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	866
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_STM_KRST1_Bits',0,3,197,1,3
	.word	3390
	.byte	16
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,3,200,1,16,4,17
	.byte	'CLR',0,1
	.word	157
	.byte	1,7,2,35,0,17
	.byte	'reserved_1',0,4
	.word	866
	.byte	31,0,2,35,0,0,15
	.byte	'Ifx_STM_KRSTCLR_Bits',0,3,204,1,3
	.word	3482
	.byte	16
	.byte	'_Ifx_STM_OCS_Bits',0,3,207,1,16,4,17
	.byte	'reserved_0',0,1
	.word	157
	.byte	3,5,2,35,0,17
	.byte	'reserved_3',0,4
	.word	866
	.byte	21,8,2,35,0,17
	.byte	'SUS',0,1
	.word	157
	.byte	4,4,2,35,3,17
	.byte	'SUS_P',0,1
	.word	157
	.byte	1,3,2,35,3,17
	.byte	'SUSSTA',0,1
	.word	157
	.byte	1,2,2,35,3,17
	.byte	'reserved_30',0,1
	.word	157
	.byte	2,0,2,35,3,0,15
	.byte	'Ifx_STM_OCS_Bits',0,3,215,1,3
	.word	3578
	.byte	15
	.byte	'Ifx_STM_TIM0_Bits',0,3,221,1,3
	.word	889
	.byte	16
	.byte	'_Ifx_STM_TIM0SV_Bits',0,3,224,1,16,4,17
	.byte	'STM_31_0',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM0SV_Bits',0,3,227,1,3
	.word	3773
	.byte	16
	.byte	'_Ifx_STM_TIM1_Bits',0,3,230,1,16,4,17
	.byte	'STM_35_4',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM1_Bits',0,3,233,1,3
	.word	3850
	.byte	16
	.byte	'_Ifx_STM_TIM2_Bits',0,3,236,1,16,4,17
	.byte	'STM_39_8',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM2_Bits',0,3,239,1,3
	.word	3923
	.byte	16
	.byte	'_Ifx_STM_TIM3_Bits',0,3,242,1,16,4,17
	.byte	'STM_43_12',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM3_Bits',0,3,245,1,3
	.word	3996
	.byte	16
	.byte	'_Ifx_STM_TIM4_Bits',0,3,248,1,16,4,17
	.byte	'STM_47_16',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM4_Bits',0,3,251,1,3
	.word	4070
	.byte	16
	.byte	'_Ifx_STM_TIM5_Bits',0,3,254,1,16,4,17
	.byte	'STM_51_20',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM5_Bits',0,3,129,2,3
	.word	4144
	.byte	16
	.byte	'_Ifx_STM_TIM6_Bits',0,3,132,2,16,4,17
	.byte	'STM_63_32',0,4
	.word	866
	.byte	32,0,2,35,0,0,15
	.byte	'Ifx_STM_TIM6_Bits',0,3,135,2,3
	.word	4218
	.byte	18,3,143,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	1606
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ACCEN0',0,3,148,2,3
	.word	4292
	.byte	18,3,151,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2163
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ACCEN1',0,3,156,2,3
	.word	4356
	.byte	18,3,159,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2240
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CAP',0,3,164,2,3
	.word	4420
	.byte	18,3,167,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2313
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CAPSV',0,3,172,2,3
	.word	4481
	.byte	18,3,175,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2390
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CLC',0,3,180,2,3
	.word	4544
	.byte	18,3,183,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2532
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CMCON',0,3,188,2,3
	.word	4605
	.byte	18,3,191,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2752
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_CMP',0,3,196,2,3
	.word	4668
	.byte	18,3,199,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	2821
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ICR',0,3,204,2,3
	.word	4729
	.byte	18,3,207,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3024
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ID',0,3,212,2,3
	.word	4790
	.byte	18,3,215,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3128
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_ISCR',0,3,220,2,3
	.word	4850
	.byte	18,3,223,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3279
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_KRST0',0,3,228,2,3
	.word	4912
	.byte	18,3,231,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3390
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_KRST1',0,3,236,2,3
	.word	4975
	.byte	18,3,239,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3482
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_KRSTCLR',0,3,244,2,3
	.word	5038
	.byte	18,3,247,2,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3578
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_OCS',0,3,252,2,3
	.word	5103
	.byte	15
	.byte	'Ifx_STM_TIM0',0,3,132,3,3
	.word	935
	.byte	18,3,135,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3773
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM0SV',0,3,140,3,3
	.word	5186
	.byte	18,3,143,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3850
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM1',0,3,148,3,3
	.word	5250
	.byte	18,3,151,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3923
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM2',0,3,156,3,3
	.word	5312
	.byte	18,3,159,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	3996
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM3',0,3,164,3,3
	.word	5374
	.byte	18,3,167,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4070
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM4',0,3,172,3,3
	.word	5436
	.byte	18,3,175,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4144
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM5',0,3,180,3,3
	.word	5498
	.byte	18,3,183,3,9,4,14
	.byte	'U',0
	.word	866
	.byte	4,2,35,0,14
	.byte	'I',0
	.word	882
	.byte	4,2,35,0,14
	.byte	'B',0
	.word	4218
	.byte	4,2,35,0,0,15
	.byte	'Ifx_STM_TIM6',0,3,188,3,3
	.word	5560
	.byte	11,12
	.word	1471
	.byte	12,5,0,4
	.word	5622
	.byte	29
	.byte	'Stm_ModuleMap',0,1,242,1,29
	.word	5631
	.byte	1,1,11,24
	.word	611
	.byte	12,5,0
.L247:
	.byte	4
	.word	5661
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,38,0,73,19
	.byte	0,0,5,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,6,5,0,3,8,58,15,59,15,57,15,73,19,0,0,7,11,0,0
	.byte	0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,11,1,0,0,10,21,0,54,15,39,12,0,0,11,1,1,11
	.byte	15,73,19,0,0,12,33,0,47,15,0,0,13,19,1,58,15,59,15,57,15,11,15,0,0,14,13,0,3,8,73,19,11,15,56,9,0,0,15
	.byte	22,0,3,8,58,15,59,15,57,15,73,19,0,0,16,19,1,3,8,58,15,59,15,57,15,11,15,0,0,17,13,0,3,8,11,15,73,19,13
	.byte	15,12,15,56,9,0,0,18,23,1,58,15,59,15,57,15,11,15,0,0,19,59,0,3,8,0,0,20,53,0,73,19,0,0,21,46,1,3,8,58
	.byte	15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,22,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,23,46,1,49,19,0,0,24,5,0,49,19,0,0,25,29,1,49,19,0,0,26,11,0,49,19,0,0,27,46,0,3,8,58,15,59,15,57
	.byte	15,54,15,63,12,60,12,0,0,28,21,0,54,15,0,0,29,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L45:
	.word	.L304-.L303
.L303:
	.half	3
	.word	.L306-.L305
.L305:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform',0,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0
	.byte	'Stm.h',0,1,0,0
	.byte	'IfxStm_regdef.h',0,2,0,0
	.byte	'McalLib.h',0,3,0,0
	.byte	'Platform_Types.h',0,4,0,0
	.byte	'Ifx_TypesReg.h',0,2,0,0,0
.L306:
.L304:
	.sdecl	'.debug_info',debug,cluster('Stm_EnableModule')
	.sect	'.debug_info'
.L46:
	.word	337
	.half	3
	.word	.L47
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L49,.L48
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_EnableModule',0,1,238,4,6,1,1,1
	.word	.L27,.L100,.L26
	.byte	4
	.byte	'ModuleNumber',0,1,238,4,35
	.word	.L101,.L102
	.byte	5
	.word	.L27,.L100
	.byte	6
	.byte	'StmkernelStatusPtr',0,1,240,4,35
	.word	.L103,.L104
	.byte	6
	.byte	'CoreId',0,1,241,4,38
	.word	.L105,.L106
	.byte	7
	.word	.L107,.L108,.L109
	.byte	8
	.word	.L110,.L108,.L109
	.byte	6
	.byte	'CoreId',0,1,178,12,10
	.word	.L105,.L111
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_EnableModule')
	.sect	'.debug_abbrev'
.L47:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_EnableModule')
	.sect	'.debug_line'
.L48:
	.word	.L308-.L307
.L307:
	.half	3
	.word	.L310-.L309
.L309:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L310:
	.byte	5,6,7,0,5,2
	.word	.L27
	.byte	3,237,4,1,5,28,9
	.half	.L249-.L27
	.byte	3,4,1,5,10,9
	.half	.L248-.L249
	.byte	1,5,5,9
	.half	.L251-.L248
	.byte	3,19,1,5,29,9
	.half	.L250-.L251
	.byte	3,3,1,5,38,9
	.half	.L311-.L250
	.byte	1,5,37,9
	.half	.L312-.L311
	.byte	1,5,57,9
	.half	.L313-.L312
	.byte	1,5,5,9
	.half	.L314-.L313
	.byte	1,5,28,7,9
	.half	.L108-.L314
	.byte	3,171,7,1,5,10,9
	.half	.L252-.L108
	.byte	3,6,1,5,33,9
	.half	.L315-.L252
	.byte	1,5,11,9
	.half	.L109-.L315
	.byte	3,220,120,1,5,24,9
	.half	.L316-.L109
	.byte	1,5,32,9
	.half	.L317-.L316
	.byte	1,5,10,9
	.half	.L318-.L317
	.byte	1,5,12,7,9
	.half	.L319-.L318
	.byte	3,1,1,5,25,9
	.half	.L320-.L319
	.byte	1,5,33,9
	.half	.L321-.L320
	.byte	1,5,43,9
	.half	.L322-.L321
	.byte	1,5,9,7,9
	.half	.L3-.L322
	.byte	3,3,1,5,18,9
	.half	.L323-.L3
	.byte	1,5,17,9
	.half	.L324-.L323
	.byte	1,5,43,9
	.half	.L325-.L324
	.byte	1,5,41,9
	.half	.L326-.L325
	.byte	1,5,9,9
	.half	.L327-.L326
	.byte	3,5,1,9
	.half	.L328-.L327
	.byte	3,5,1,5,50,9
	.half	.L329-.L328
	.byte	3,5,1,5,48,9
	.half	.L330-.L329
	.byte	1,5,11,9
	.half	.L4-.L330
	.byte	3,4,1,5,24,9
	.half	.L331-.L4
	.byte	1,5,32,9
	.half	.L332-.L331
	.byte	1,5,10,9
	.half	.L333-.L332
	.byte	1,5,12,7,9
	.half	.L334-.L333
	.byte	3,1,1,5,25,9
	.half	.L335-.L334
	.byte	1,5,33,9
	.half	.L336-.L335
	.byte	1,5,43,9
	.half	.L337-.L336
	.byte	1,5,9,7,9
	.half	.L5-.L337
	.byte	3,3,1,5,18,9
	.half	.L338-.L5
	.byte	1,5,17,9
	.half	.L339-.L338
	.byte	1,5,57,9
	.half	.L340-.L339
	.byte	1,5,55,9
	.half	.L341-.L340
	.byte	1,5,9,9
	.half	.L342-.L341
	.byte	3,4,1,9
	.half	.L343-.L342
	.byte	3,4,1,5,64,9
	.half	.L344-.L343
	.byte	3,4,1,5,62,9
	.half	.L345-.L344
	.byte	1,5,39,9
	.half	.L6-.L345
	.byte	3,4,1,5,37,9
	.half	.L346-.L6
	.byte	1,5,46,9
	.half	.L347-.L346
	.byte	3,2,1,5,44,9
	.half	.L348-.L347
	.byte	1,5,1,9
	.half	.L2-.L348
	.byte	3,10,1,7,9
	.half	.L50-.L2
	.byte	0,1,1
.L308:
	.sdecl	'.debug_ranges',debug,cluster('Stm_EnableModule')
	.sect	'.debug_ranges'
.L49:
	.word	-1,.L27,0,.L50-.L27,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_EnableAlarm')
	.sect	'.debug_info'
.L51:
	.word	762
	.half	3
	.word	.L52
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L54,.L53
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_EnableAlarm',0,1,234,5,6,1,1,1
	.word	.L29,.L112,.L28
	.byte	4
	.byte	'ModuleNumber',0,1,234,5,34
	.word	.L113,.L114
	.byte	4
	.byte	'CompareRegisterId',0,1,235,5,20
	.word	.L115,.L116
	.byte	4
	.byte	'TimerMode',0,1,235,5,51
	.word	.L117,.L118
	.byte	4
	.byte	'Ticks',0,1,235,5,75
	.word	.L119,.L120
	.byte	4
	.byte	'Stm_Applicationfunction',0,1,236,5,36
	.word	.L121,.L122
	.byte	5
	.word	.L29,.L112
	.byte	6
	.byte	'StmkernelStatusPtr',0,1,238,5,35
	.word	.L103,.L123
	.byte	6
	.byte	'MatchStartBit',0,1,239,5,9
	.word	.L124,.L125
	.byte	6
	.byte	'Cmpval',0,1,240,5,10
	.word	.L105,.L126
	.byte	6
	.byte	'Stm_64Bit_Timer_Value',0,1,241,5,29
	.word	.L127,.L128
	.byte	6
	.byte	'shiftval',0,1,242,5,9
	.word	.L124,.L129
	.byte	7
	.word	.L107,.L130,.L131
	.byte	8
	.word	.L110,.L130,.L131
	.byte	6
	.byte	'CoreId',0,1,178,12,10
	.word	.L105,.L132
	.byte	0,0,7
	.word	.L133,.L134,.L8
	.byte	9
	.word	.L135,.L136
	.byte	9
	.word	.L137,.L138
	.byte	9
	.word	.L139,.L140
	.byte	8
	.word	.L141,.L134,.L8
	.byte	7
	.word	.L142,.L143,.L144
	.byte	9
	.word	.L145,.L146
	.byte	9
	.word	.L147,.L148
	.byte	10
	.word	.L149,.L143,.L144
	.byte	0,7
	.word	.L150,.L7,.L8
	.byte	9
	.word	.L151,.L152
	.byte	9
	.word	.L153,.L154
	.byte	10
	.word	.L155,.L7,.L8
	.byte	0,0,0,7
	.word	.L156,.L157,.L158
	.byte	9
	.word	.L159,.L160
	.byte	11
	.word	.L161,.L162
	.byte	6
	.byte	'TotalTimerCapture',0,1,214,12,29
	.word	.L127,.L165
	.byte	0,0,7
	.word	.L156,.L163,.L164
	.byte	9
	.word	.L159,.L160
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_EnableAlarm')
	.sect	'.debug_abbrev'
.L52:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2
	.byte	6,0,0,10,11,0,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_EnableAlarm')
	.sect	'.debug_line'
.L53:
	.word	.L350-.L349
.L349:
	.half	3
	.word	.L352-.L351
.L351:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L352:
	.byte	5,6,7,0,5,2
	.word	.L29
	.byte	3,233,5,1,5,28,9
	.half	.L130-.L29
	.byte	3,201,6,1,5,10,9
	.half	.L254-.L130
	.byte	3,6,1,5,33,9
	.half	.L353-.L254
	.byte	1,5,48,9
	.half	.L131-.L353
	.byte	3,233,121,1,5,61,9
	.half	.L354-.L131
	.byte	1,5,3,9
	.half	.L134-.L354
	.byte	3,174,4,1,5,4,7,9
	.half	.L143-.L134
	.byte	3,168,127,1,5,20,9
	.half	.L355-.L143
	.byte	1,5,36,9
	.half	.L356-.L355
	.byte	1,5,9,9
	.half	.L357-.L356
	.byte	1,5,54,9
	.half	.L144-.L357
	.byte	3,219,0,1,5,4,9
	.half	.L7-.L144
	.byte	3,65,1,5,22,9
	.half	.L258-.L7
	.byte	1,5,38,9
	.half	.L358-.L258
	.byte	1,5,14,9
	.half	.L359-.L358
	.byte	1,5,13,9
	.half	.L360-.L359
	.byte	1,5,9,9
	.half	.L361-.L360
	.byte	1,5,40,9
	.half	.L8-.L361
	.byte	3,144,124,1,5,60,9
	.half	.L362-.L8
	.byte	1,5,7,9
	.half	.L363-.L362
	.byte	3,4,1,5,20,9
	.half	.L364-.L363
	.byte	3,3,1,5,50,7,9
	.half	.L365-.L364
	.byte	1,5,59,9
	.half	.L366-.L365
	.byte	1,5,58,9
	.half	.L367-.L366
	.byte	1,5,80,9
	.half	.L368-.L367
	.byte	1,5,12,9
	.half	.L369-.L368
	.byte	3,1,1,5,14,9
	.half	.L9-.L369
	.byte	1,5,23,9
	.half	.L370-.L9
	.byte	1,5,22,9
	.half	.L371-.L370
	.byte	1,5,44,9
	.half	.L372-.L371
	.byte	1,5,33,9
	.half	.L157-.L372
	.byte	3,174,6,1,5,42,9
	.half	.L373-.L157
	.byte	1,5,41,9
	.half	.L374-.L373
	.byte	1,5,60,9
	.half	.L375-.L374
	.byte	1,5,59,9
	.half	.L376-.L375
	.byte	3,1,1,5,35,9
	.half	.L158-.L376
	.byte	3,214,121,1,5,48,9
	.half	.L262-.L158
	.byte	3,3,1,5,52,9
	.half	.L377-.L262
	.byte	3,1,1,5,49,9
	.half	.L163-.L377
	.byte	3,1,1,5,70,9
	.half	.L164-.L163
	.byte	3,127,1,5,14,9
	.half	.L264-.L164
	.byte	1,5,30,9
	.half	.L378-.L264
	.byte	3,3,1,5,53,9
	.half	.L379-.L378
	.byte	1,5,5,9
	.half	.L380-.L379
	.byte	3,2,1,5,7,7,9
	.half	.L381-.L380
	.byte	3,3,1,5,1,9
	.half	.L382-.L381
	.byte	3,10,1,5,7,7,9
	.half	.L11-.L382
	.byte	3,124,1,5,1,9
	.half	.L383-.L11
	.byte	3,4,1,7,9
	.half	.L55-.L383
	.byte	0,1,1
.L350:
	.sdecl	'.debug_ranges',debug,cluster('Stm_EnableAlarm')
	.sect	'.debug_ranges'
.L54:
	.word	-1,.L29,0,.L55-.L29,0,0
.L162:
	.word	-1,.L29,.L157-.L29,.L158-.L29,.L163-.L29,.L164-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_DisableAlarm')
	.sect	'.debug_info'
.L56:
	.word	348
	.half	3
	.word	.L57
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L59,.L58
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_DisableAlarm',0,1,222,6,6,1,1,1
	.word	.L31,.L166,.L30
	.byte	4
	.byte	'ModuleNumber',0,1,222,6,35
	.word	.L167,.L168
	.byte	4
	.byte	'CompareRegisterId',0,1,222,6,61
	.word	.L169,.L170
	.byte	5
	.word	.L31,.L166
	.byte	6
	.byte	'StmkernelStatusPtr',0,1,224,6,35
	.word	.L103,.L171
	.byte	7
	.word	.L107,.L172,.L173
	.byte	8
	.word	.L110,.L172,.L173
	.byte	6
	.byte	'CoreId',0,1,178,12,10
	.word	.L105,.L174
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_DisableAlarm')
	.sect	'.debug_abbrev'
.L57:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_DisableAlarm')
	.sect	'.debug_line'
.L58:
	.word	.L385-.L384
.L384:
	.half	3
	.word	.L387-.L386
.L386:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L387:
	.byte	5,6,7,0,5,2
	.word	.L31
	.byte	3,221,6,1,5,28,9
	.half	.L172-.L31
	.byte	3,213,5,1,5,10,9
	.half	.L269-.L172
	.byte	3,6,1,5,33,9
	.half	.L388-.L269
	.byte	1,5,5,9
	.half	.L173-.L388
	.byte	3,186,122,1,5,7,7,9
	.half	.L271-.L173
	.byte	3,3,1,9
	.half	.L13-.L271
	.byte	3,6,1,5,45,9
	.half	.L14-.L13
	.byte	3,4,1,5,67,9
	.half	.L277-.L14
	.byte	1,5,65,9
	.half	.L389-.L277
	.byte	1,5,1,9
	.half	.L390-.L389
	.byte	3,4,1,7,9
	.half	.L60-.L390
	.byte	0,1,1
.L385:
	.sdecl	'.debug_ranges',debug,cluster('Stm_DisableAlarm')
	.sect	'.debug_ranges'
.L59:
	.word	-1,.L31,0,.L60-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_SetCompareMatchControl')
	.sect	'.debug_info'
.L61:
	.word	316
	.half	3
	.word	.L62
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L64,.L63
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_SetCompareMatchControl',0,1,159,7,6,1,1,1
	.word	.L33,.L175,.L32
	.byte	4
	.byte	'ModuleNumber',0,1,159,7,45
	.word	.L176,.L177
	.byte	4
	.byte	'CompareRegisterId',0,1,160,7,23
	.word	.L178,.L179
	.byte	4
	.byte	'Mstart',0,1,160,7,54
	.word	.L180,.L181
	.byte	4
	.byte	'MSize',0,1,160,7,74
	.word	.L182,.L183
	.byte	5
	.word	.L33,.L175
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_SetCompareMatchControl')
	.sect	'.debug_abbrev'
.L62:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_SetCompareMatchControl')
	.sect	'.debug_line'
.L63:
	.word	.L392-.L391
.L391:
	.half	3
	.word	.L394-.L393
.L393:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L394:
	.byte	5,7,7,0,5,2
	.word	.L33
	.byte	3,205,7,1,5,9,7,9
	.half	.L395-.L33
	.byte	3,3,1,9
	.half	.L396-.L395
	.byte	3,4,1,5,1,9
	.half	.L397-.L396
	.byte	3,19,1,5,9,7,9
	.half	.L15-.L397
	.byte	3,115,1,9
	.half	.L398-.L15
	.byte	3,4,1,5,1,9
	.half	.L399-.L398
	.byte	3,9,1,7,9
	.half	.L65-.L399
	.byte	0,1,1
.L392:
	.sdecl	'.debug_ranges',debug,cluster('Stm_SetCompareMatchControl')
	.sect	'.debug_ranges'
.L64:
	.word	-1,.L33,0,.L65-.L33,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_ReadTimerValue')
	.sect	'.debug_info'
.L66:
	.word	324
	.half	3
	.word	.L67
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L69,.L68
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_ReadTimerValue',0,1,129,8,8
	.word	.L105
	.byte	1,1,1
	.word	.L35,.L184,.L34
	.byte	4
	.byte	'ModuleNumber',0,1,129,8,39
	.word	.L185,.L186
	.byte	4
	.byte	'TimerNumber',0,1,129,8,65
	.word	.L187,.L188
	.byte	5
	.word	.L35,.L184
	.byte	6
	.byte	'Timer0BaseaddressPtr',0,1,133,8,23
	.word	.L189,.L190
	.byte	6
	.byte	'Timvalue',0,1,134,8,10
	.word	.L105,.L191
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_ReadTimerValue')
	.sect	'.debug_abbrev'
.L67:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_ReadTimerValue')
	.sect	'.debug_line'
.L68:
	.word	.L401-.L400
.L400:
	.half	3
	.word	.L403-.L402
.L402:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L403:
	.byte	5,46,7,0,5,2
	.word	.L35
	.byte	3,165,8,1,5,52,9
	.half	.L404-.L35
	.byte	3,1,1,5,56,9
	.half	.L405-.L404
	.byte	3,127,1,5,38,9
	.half	.L278-.L405
	.byte	3,6,1,5,52,9
	.half	.L279-.L278
	.byte	1,5,1,9
	.half	.L280-.L279
	.byte	3,3,1,7,9
	.half	.L70-.L280
	.byte	0,1,1
.L401:
	.sdecl	'.debug_ranges',debug,cluster('Stm_ReadTimerValue')
	.sect	'.debug_ranges'
.L69:
	.word	-1,.L35,0,.L70-.L35,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_ReadTotalTimerValue')
	.sect	'.debug_info'
.L71:
	.word	347
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_ReadTotalTimerValue',0,1,200,8,27
	.word	.L127
	.byte	1,1,1
	.word	.L37,.L192,.L36
	.byte	4
	.byte	'ModuleNumber',0,1,200,8,63
	.word	.L193,.L194
	.byte	5
	.word	.L37,.L192
	.byte	6
	.byte	'TotalTimerCapture',0,1,202,8,29
	.word	.L127,.L195
	.byte	7
	.word	.L156,.L37,.L196
	.byte	8
	.word	.L159,.L197
	.byte	9
	.word	.L161,.L37,.L196
	.byte	6
	.byte	'TotalTimerCapture',0,1,214,12,29
	.word	.L127,.L198
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_ReadTotalTimerValue')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_ReadTotalTimerValue')
	.sect	'.debug_line'
.L73:
	.word	.L407-.L406
.L406:
	.half	3
	.word	.L409-.L408
.L408:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L409:
	.byte	5,33,7,0,5,2
	.word	.L37
	.byte	3,217,12,1,5,42,9
	.half	.L410-.L37
	.byte	1,5,41,9
	.half	.L411-.L410
	.byte	1,5,60,9
	.half	.L412-.L411
	.byte	1,5,59,9
	.half	.L413-.L412
	.byte	3,1,1,5,1,9
	.half	.L196-.L413
	.byte	3,133,124,1,7,9
	.half	.L75-.L196
	.byte	0,1,1
.L407:
	.sdecl	'.debug_ranges',debug,cluster('Stm_ReadTotalTimerValue')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L37,0,.L75-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_SleepModeHandle')
	.sect	'.debug_info'
.L76:
	.word	269
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L79,.L78
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_SleepModeHandle',0,1,250,8,6,1,1,1
	.word	.L39,.L199,.L38
	.byte	4
	.byte	'ModuleNumber',0,1,250,8,38
	.word	.L200,.L201
	.byte	4
	.byte	'SleepmodeControl',0,1,250,8,64
	.word	.L202,.L203
	.byte	5
	.word	.L39,.L199
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_SleepModeHandle')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_SleepModeHandle')
	.sect	'.debug_line'
.L78:
	.word	.L415-.L414
.L414:
	.half	3
	.word	.L417-.L416
.L416:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L417:
	.byte	5,5,7,0,5,2
	.word	.L39
	.byte	3,155,9,1,5,1,9
	.half	.L80-.L39
	.byte	3,4,0,1,1
.L415:
	.sdecl	'.debug_ranges',debug,cluster('Stm_SleepModeHandle')
	.sect	'.debug_ranges'
.L79:
	.word	-1,.L39,0,.L80-.L39,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_Isr')
	.sect	'.debug_info'
.L81:
	.word	843
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L84,.L83
	.byte	2
	.word	.L42
	.byte	3
	.byte	'Stm_Isr',0,1,247,12,6,1,1,1
	.word	.L41,.L204,.L40
	.byte	4
	.byte	'ModuleNumber',0,1,247,12,27
	.word	.L205,.L206
	.byte	4
	.byte	'InterruptNode',0,1,247,12,54
	.word	.L207,.L208
	.byte	5
	.word	.L41,.L204
	.byte	6
	.byte	'StmkernelStatusPtr',0,1,249,12,39
	.word	.L209,.L210
	.byte	6
	.byte	'CompareRegisterId',0,1,250,12,9
	.word	.L124,.L211
	.byte	6
	.byte	'MatchStartBit',0,1,251,12,9
	.word	.L124,.L212
	.byte	6
	.byte	'Cmpval',0,1,252,12,10
	.word	.L105,.L213
	.byte	6
	.byte	'shiftval',0,1,253,12,9
	.word	.L124,.L214
	.byte	6
	.byte	'Stm_64Bit_Timer_Value',0,1,254,12,29
	.word	.L127,.L215
	.byte	7
	.word	.L107,.L216,.L217
	.byte	8
	.word	.L110,.L216,.L217
	.byte	6
	.byte	'CoreId',0,1,178,12,10
	.word	.L105,.L218
	.byte	0,0,7
	.word	.L219,.L220,.L221
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	10
	.word	.L226,.L227
	.byte	6
	.byte	'Value',0,1,176,10,9
	.word	.L124,.L236
	.byte	0,0,7
	.word	.L219,.L237,.L228
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	8
	.word	.L226,.L237,.L228
	.byte	6
	.byte	'Value',0,1,176,10,9
	.word	.L124,.L238
	.byte	0,0,7
	.word	.L219,.L228,.L229
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	0,7
	.word	.L156,.L239,.L240
	.byte	9
	.word	.L159,.L241
	.byte	10
	.word	.L161,.L242
	.byte	6
	.byte	'TotalTimerCapture',0,1,214,12,29
	.word	.L127,.L245
	.byte	0,0,7
	.word	.L219,.L230,.L231
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	0,7
	.word	.L156,.L243,.L244
	.byte	9
	.word	.L159,.L241
	.byte	0,7
	.word	.L219,.L232,.L233
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	0,7
	.word	.L219,.L19,.L234
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	0,7
	.word	.L219,.L22,.L235
	.byte	9
	.word	.L222,.L223
	.byte	9
	.word	.L224,.L225
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_Isr')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2
	.byte	6,0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Stm_Isr')
	.sect	'.debug_line'
.L83:
	.word	.L419-.L418
.L418:
	.half	3
	.word	.L421-.L420
.L420:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0,0,0,0,0
.L421:
	.byte	5,6,7,0,5,2
	.word	.L41
	.byte	3,246,12,1,5,28,9
	.half	.L216-.L41
	.byte	3,188,127,1,5,10,9
	.half	.L282-.L216
	.byte	3,6,1,5,33,9
	.half	.L422-.L282
	.byte	1,5,35,9
	.half	.L217-.L422
	.byte	3,205,0,1,5,55,9
	.half	.L284-.L217
	.byte	1,5,25,9
	.half	.L220-.L284
	.byte	3,171,125,1,5,35,9
	.half	.L423-.L220
	.byte	1,5,36,9
	.half	.L221-.L423
	.byte	3,216,2,1,5,25,9
	.half	.L237-.L221
	.byte	3,168,125,1,5,35,9
	.half	.L424-.L237
	.byte	1,5,3,9
	.half	.L287-.L424
	.byte	3,216,2,1,5,21,7,9
	.half	.L228-.L287
	.byte	3,5,1,5,51,7,9
	.half	.L229-.L228
	.byte	1,5,60,9
	.half	.L289-.L229
	.byte	1,5,59,9
	.half	.L288-.L289
	.byte	1,5,12,9
	.half	.L425-.L288
	.byte	3,1,1,5,21,9
	.half	.L426-.L425
	.byte	1,5,23,9
	.half	.L20-.L426
	.byte	1,5,32,9
	.half	.L291-.L20
	.byte	1,5,31,9
	.half	.L290-.L291
	.byte	1,5,53,9
	.half	.L427-.L290
	.byte	1,5,48,9
	.half	.L292-.L427
	.byte	3,3,1,5,33,9
	.half	.L239-.L292
	.byte	3,72,1,5,42,9
	.half	.L428-.L239
	.byte	1,5,41,9
	.half	.L429-.L428
	.byte	1,5,60,9
	.half	.L430-.L429
	.byte	1,5,59,9
	.half	.L283-.L430
	.byte	3,1,1,5,36,9
	.half	.L240-.L283
	.byte	3,57,1,5,49,9
	.half	.L230-.L240
	.byte	3,2,1,5,52,9
	.half	.L431-.L230
	.byte	3,1,1,5,49,9
	.half	.L243-.L431
	.byte	3,1,1,5,70,9
	.half	.L244-.L243
	.byte	3,127,1,5,14,9
	.half	.L293-.L244
	.byte	1,9
	.half	.L294-.L293
	.byte	3,3,1,5,13,9
	.half	.L295-.L294
	.byte	1,5,31,9
	.half	.L232-.L295
	.byte	1,5,54,9
	.half	.L233-.L232
	.byte	1,5,62,9
	.half	.L432-.L233
	.byte	3,117,1,5,5,9
	.half	.L19-.L432
	.byte	3,17,1,5,7,7,9
	.half	.L234-.L19
	.byte	3,3,1,9
	.half	.L23-.L234
	.byte	3,6,1,5,47,9
	.half	.L22-.L23
	.byte	3,6,1,5,3,9
	.half	.L433-.L22
	.byte	1,5,45,7,9
	.half	.L434-.L433
	.byte	3,2,1,5,64,9
	.half	.L435-.L434
	.byte	1,5,1,7,9
	.half	.L25-.L435
	.byte	3,2,1,7,9
	.half	.L85-.L25
	.byte	0,1,1
.L419:
	.sdecl	'.debug_ranges',debug,cluster('Stm_Isr')
	.sect	'.debug_ranges'
.L84:
	.word	-1,.L41,0,.L85-.L41,0,0
.L227:
	.word	-1,.L41,.L220-.L41,.L221-.L41,.L228-.L41,.L229-.L41,.L230-.L41,.L231-.L41,.L232-.L41,.L233-.L41,.L19-.L41
	.word	.L234-.L41,.L22-.L41,.L235-.L41,0,0
.L242:
	.word	-1,.L41,.L239-.L41,.L240-.L41,.L243-.L41,.L244-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerAllocation_Core0')
	.sect	'.debug_info'
.L86:
	.word	196
	.half	3
	.word	.L87
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerAllocation_Core0',0,1,174,2,32
	.word	.L246
	.byte	5,3
	.word	Stm_TimerAllocation_Core0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerAllocation_Core0')
	.sect	'.debug_abbrev'
.L87:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerAllocation_Core1')
	.sect	'.debug_info'
.L88:
	.word	196
	.half	3
	.word	.L89
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerAllocation_Core1',0,1,201,2,32
	.word	.L246
	.byte	5,3
	.word	Stm_TimerAllocation_Core1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerAllocation_Core1')
	.sect	'.debug_abbrev'
.L89:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerAllocation_Core2')
	.sect	'.debug_info'
.L90:
	.word	196
	.half	3
	.word	.L91
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerAllocation_Core2',0,1,235,2,32
	.word	.L246
	.byte	5,3
	.word	Stm_TimerAllocation_Core2
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerAllocation_Core2')
	.sect	'.debug_abbrev'
.L91:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerAllocation_Core3')
	.sect	'.debug_info'
.L92:
	.word	196
	.half	3
	.word	.L93
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerAllocation_Core3',0,1,141,3,32
	.word	.L246
	.byte	5,3
	.word	Stm_TimerAllocation_Core3
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerAllocation_Core3')
	.sect	'.debug_abbrev'
.L93:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerAllocation_Core4')
	.sect	'.debug_info'
.L94:
	.word	196
	.half	3
	.word	.L95
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerAllocation_Core4',0,1,175,3,32
	.word	.L246
	.byte	5,3
	.word	Stm_TimerAllocation_Core4
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerAllocation_Core4')
	.sect	'.debug_abbrev'
.L95:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerAllocation_Core5')
	.sect	'.debug_info'
.L96:
	.word	196
	.half	3
	.word	.L97
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerAllocation_Core5',0,1,209,3,32
	.word	.L246
	.byte	5,3
	.word	Stm_TimerAllocation_Core5
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerAllocation_Core5')
	.sect	'.debug_abbrev'
.L97:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Stm_TimerCoreAllocation')
	.sect	'.debug_info'
.L98:
	.word	194
	.half	3
	.word	.L99
	.byte	4,1
	.byte	'..\\Mcal\\Tricore\\Stm\\ssc\\src\\Stm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1,2
	.word	.L42
	.byte	3
	.byte	'Stm_TimerCoreAllocation',0,1,236,3,39
	.word	.L247
	.byte	5,3
	.word	Stm_TimerCoreAllocation
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Stm_TimerCoreAllocation')
	.sect	'.debug_abbrev'
.L99:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_DisableAlarm')
	.sect	'.debug_loc'
.L170:
	.word	-1,.L31,0,.L269-.L31
	.half	1
	.byte	85
	.word	.L173-.L31,.L271-.L31
	.half	1
	.byte	89
	.word	.L14-.L31,.L277-.L31
	.half	1
	.byte	89
	.word	0,0
.L174:
	.word	-1,.L31,.L269-.L31,.L270-.L31
	.half	1
	.byte	82
	.word	.L13-.L31,.L274-.L31
	.half	1
	.byte	82
	.word	0,0
.L168:
	.word	-1,.L31,0,.L269-.L31
	.half	1
	.byte	84
	.word	.L272-.L31,.L273-.L31
	.half	1
	.byte	88
	.word	.L275-.L31,.L276-.L31
	.half	1
	.byte	88
	.word	0,0
.L30:
	.word	-1,.L31,0,.L166-.L31
	.half	2
	.byte	138,0
	.word	0,0
.L171:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_EnableAlarm')
	.sect	'.debug_loc'
.L148:
	.word	0,0
.L154:
	.word	0,0
.L126:
	.word	-1,.L29,.L264-.L29,.L265-.L29
	.half	1
	.byte	95
	.word	.L11-.L29,.L266-.L29
	.half	1
	.byte	95
	.word	0,0
.L116:
	.word	-1,.L29,0,.L254-.L29
	.half	1
	.byte	85
	.word	.L256-.L29,.L112-.L29
	.half	1
	.byte	90
	.word	0,0
.L132:
	.word	-1,.L29,.L254-.L29,.L260-.L29
	.half	1
	.byte	82
	.word	.L11-.L29,.L267-.L29
	.half	1
	.byte	82
	.word	0,0
.L146:
	.word	0,0
.L152:
	.word	0,0
.L138:
	.word	0,0
.L140:
	.word	0,0
.L125:
	.word	-1,.L29,.L157-.L29,.L261-.L29
	.half	5
	.byte	144,32,157,32,0
	.word	.L11-.L29,.L268-.L29
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L114:
	.word	-1,.L29,0,.L254-.L29
	.half	1
	.byte	84
	.word	.L255-.L29,.L112-.L29
	.half	1
	.byte	89
	.word	0,0
.L160:
	.word	0,0
.L136:
	.word	0,0
.L128:
	.word	0,0
.L122:
	.word	-1,.L29,0,.L254-.L29
	.half	1
	.byte	100
	.word	.L130-.L29,.L112-.L29
	.half	1
	.byte	108
	.word	0,0
.L28:
	.word	-1,.L29,0,.L112-.L29
	.half	2
	.byte	138,0
	.word	0,0
.L123:
	.word	0,0
.L120:
	.word	-1,.L29,0,.L254-.L29
	.half	1
	.byte	87
	.word	.L259-.L29,.L112-.L29
	.half	1
	.byte	88
	.word	0,0
.L118:
	.word	-1,.L29,0,.L254-.L29
	.half	1
	.byte	86
	.word	.L257-.L29,.L258-.L29
	.half	1
	.byte	95
	.word	0,0
.L165:
	.word	0,0
.L129:
	.word	-1,.L29,.L262-.L29,.L263-.L29
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_EnableModule')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L27,.L248-.L27,.L250-.L27
	.half	1
	.byte	82
	.word	.L251-.L27,.L100-.L27
	.half	1
	.byte	89
	.word	0,0
.L111:
	.word	-1,.L27,.L252-.L27,.L253-.L27
	.half	1
	.byte	82
	.word	0,0
.L102:
	.word	-1,.L27,0,.L248-.L27
	.half	1
	.byte	84
	.word	.L249-.L27,.L100-.L27
	.half	1
	.byte	88
	.word	0,0
.L26:
	.word	-1,.L27,0,.L100-.L27
	.half	2
	.byte	138,0
	.word	0,0
.L104:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_Isr')
	.sect	'.debug_loc'
.L225:
	.word	0,0
.L213:
	.word	-1,.L41,.L293-.L41,.L19-.L41
	.half	1
	.byte	82
	.word	0,0
.L211:
	.word	0,0
.L218:
	.word	-1,.L41,.L282-.L41,.L283-.L41
	.half	1
	.byte	82
	.word	.L19-.L41,.L296-.L41
	.half	1
	.byte	82
	.word	.L23-.L41,.L300-.L41
	.half	1
	.byte	82
	.word	0,0
.L223:
	.word	0,0
.L208:
	.word	-1,.L41,0,.L282-.L41
	.half	1
	.byte	85
	.word	.L284-.L41,.L220-.L41
	.half	1
	.byte	88
	.word	0,0
.L212:
	.word	-1,.L41,.L292-.L41,.L244-.L41
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L241:
	.word	0,0
.L206:
	.word	-1,.L41,0,.L282-.L41
	.half	1
	.byte	84
	.word	.L289-.L41,.L288-.L41
	.half	1
	.byte	89
	.word	.L291-.L41,.L290-.L41
	.half	1
	.byte	89
	.word	.L292-.L41,.L239-.L41
	.half	1
	.byte	89
	.word	.L294-.L41,.L295-.L41
	.half	1
	.byte	89
	.word	.L299-.L41,.L297-.L41
	.half	1
	.byte	89
	.word	.L302-.L41,.L301-.L41
	.half	1
	.byte	89
	.word	0,0
.L215:
	.word	0,0
.L40:
	.word	-1,.L41,0,.L204-.L41
	.half	2
	.byte	138,0
	.word	0,0
.L210:
	.word	0,0
.L245:
	.word	0,0
.L238:
	.word	-1,.L41,.L287-.L41,.L288-.L41
	.half	1
	.byte	95
	.word	.L20-.L41,.L290-.L41
	.half	1
	.byte	95
	.word	.L19-.L41,.L297-.L41
	.half	1
	.byte	95
	.word	.L23-.L41,.L301-.L41
	.half	1
	.byte	95
	.word	0,0
.L236:
	.word	-1,.L41,.L221-.L41,.L285-.L41
	.half	1
	.byte	84
	.word	.L286-.L41,.L239-.L41
	.half	1
	.byte	81
	.word	.L228-.L41,.L229-.L41
	.half	1
	.byte	84
	.word	.L230-.L41,.L231-.L41
	.half	1
	.byte	84
	.word	.L232-.L41,.L233-.L41
	.half	1
	.byte	84
	.word	.L19-.L41,.L234-.L41
	.half	1
	.byte	84
	.word	.L19-.L41,.L298-.L41
	.half	1
	.byte	81
	.word	.L22-.L41,.L235-.L41
	.half	1
	.byte	84
	.word	0,0
.L214:
	.word	-1,.L41,.L230-.L41,.L19-.L41
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_ReadTimerValue')
	.sect	'.debug_loc'
.L186:
	.word	-1,.L35,0,.L184-.L35
	.half	1
	.byte	84
	.word	0,0
.L34:
	.word	-1,.L35,0,.L184-.L35
	.half	2
	.byte	138,0
	.word	0,0
.L190:
	.word	-1,.L35,.L278-.L35,.L279-.L35
	.half	1
	.byte	111
	.word	0,0
.L188:
	.word	-1,.L35,0,.L184-.L35
	.half	1
	.byte	85
	.word	0,0
.L191:
	.word	-1,.L35,.L280-.L35,.L184-.L35
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_ReadTotalTimerValue')
	.sect	'.debug_loc'
.L194:
	.word	-1,.L37,0,.L192-.L37
	.half	1
	.byte	84
	.word	0,0
.L197:
	.word	0,0
.L36:
	.word	-1,.L37,0,.L192-.L37
	.half	2
	.byte	138,0
	.word	0,0
.L195:
	.word	0,0
.L198:
	.word	-1,.L37,.L196-.L37,.L192-.L37
	.half	2
	.byte	144,33
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_SetCompareMatchControl')
	.sect	'.debug_loc'
.L179:
	.word	-1,.L33,0,.L175-.L33
	.half	1
	.byte	85
	.word	0,0
.L183:
	.word	-1,.L33,0,.L175-.L33
	.half	1
	.byte	87
	.word	0,0
.L177:
	.word	-1,.L33,0,.L175-.L33
	.half	1
	.byte	84
	.word	0,0
.L181:
	.word	-1,.L33,0,.L175-.L33
	.half	1
	.byte	86
	.word	0,0
.L32:
	.word	-1,.L33,0,.L175-.L33
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Stm_SleepModeHandle')
	.sect	'.debug_loc'
.L201:
	.word	-1,.L39,0,.L281-.L39
	.half	1
	.byte	84
	.word	0,0
.L203:
	.word	-1,.L39,0,.L199-.L39
	.half	1
	.byte	85
	.word	0,0
.L38:
	.word	-1,.L39,0,.L199-.L39
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L436:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Stm_EnableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L436,.L27,.L100-.L27
	.sdecl	'.debug_frame',debug,cluster('Stm_EnableAlarm')
	.sect	'.debug_frame'
	.word	12
	.word	.L436,.L29,.L112-.L29
	.sdecl	'.debug_frame',debug,cluster('Stm_DisableAlarm')
	.sect	'.debug_frame'
	.word	12
	.word	.L436,.L31,.L166-.L31
	.sdecl	'.debug_frame',debug,cluster('Stm_SetCompareMatchControl')
	.sect	'.debug_frame'
	.word	24
	.word	.L436,.L33,.L175-.L33
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Stm_ReadTimerValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L436,.L35,.L184-.L35
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Stm_ReadTotalTimerValue')
	.sect	'.debug_frame'
	.word	24
	.word	.L436,.L37,.L192-.L37
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Stm_SleepModeHandle')
	.sect	'.debug_frame'
	.word	12
	.word	.L436,.L39,.L199-.L39
	.sdecl	'.debug_frame',debug,cluster('Stm_Isr')
	.sect	'.debug_frame'
	.word	12
	.word	.L436,.L41,.L204-.L41

; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1716  
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1717  /*Memory Map of the STM Code*/
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1718  #define STM_STOP_SEC_CODE_QM_GLOBAL
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1719  /* MISRA2012_RULE_4_10_JUSTIFICATION: Memmap header is repeatedly included
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1720     without safegaurd. It complies to Autosar guidelines. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1721  /* MISRA2012_RULE_20_1_JUSTIFICATION: Memmap header usage as per Autosar
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1722     guideline. */
; ..\Mcal\Tricore\Stm\ssc\src\Stm.c	  1723  #include "Stm_MemMap.h"

	; Module end
