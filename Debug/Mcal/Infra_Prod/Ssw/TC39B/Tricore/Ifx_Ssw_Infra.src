	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 18041957 SN 09003395"
	.compiler_invocation	"ctc -f cc11404a --dep-file=Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\.Ifx_Ssw_Infra.o.d -c99 --fp-model=3cflnrSTz -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --fp-model=+float -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\EB_Cfg\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Autosar_Srv\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Cfg_Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Integration -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Irq\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Platform\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Adc\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Can_17_McmCan\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Dio\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Eth_17_GEthMacV2\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fee\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Fls_17_Dmu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Gpt\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\I2c\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Icu_17_TimerIp\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\inc\\AS440 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\McalLib\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Mcu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Ocu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Port\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Pwm_17_GtmCcu6\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Smu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Spi\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Stm\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Uart\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\inc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Tricore\\Wdg_17_Scu\\ssc\\src -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Lib -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\App_Func -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\demo -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Adc_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Gtm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\AscLin_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Can_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\EthV2_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Irq\\Stm_Irq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Srval\\Main -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\APP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\BswM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanSm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\CanTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Com -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\ComM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Common -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Crc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dcm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Dem -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Det -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\DoIP -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EcuM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Eth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthSM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTrcv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\EthTSyn -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FiM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\FlsTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\MemIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Nm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\NvM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Kernel -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\OS\\Portable -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\PduR -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\RamTst -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\SoAd -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\StbM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\api -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\arch -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv4 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\core\\ipv6 -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\arpa -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\net -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\posix\\sys -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\compat\\stdc -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\apps -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\priv -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\lwip\\prot -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\include\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\TcpIp\\lwip-2.1.2\\netif\\ppp\\polarssl -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\UdpNm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgIf -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\WdgM -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Cal -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Daq -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pag -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Pgm -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\Std -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\BSW\\Xcp\\XcpOnEth -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Callout -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Config -IF:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\EAS\\Library\\Vfx_ComE2E -g2 --make-target=Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.o -t2 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O1 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.src ..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c"
	.compiler_name		"ctc"
	;source	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c'

	
$TC162
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_getCpuWatchdogPassword',code,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_getCpuWatchdogPassword'
	.align	2
	
	.global	Ifx_Ssw_getCpuWatchdogPassword

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     2   * \file Ifx_Ssw_Infra.c
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    22   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    23  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    24  #include "Ifx_Cfg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    25  #include "Ifx_Ssw_Infra.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    26  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    27  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    28  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    29  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    30  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    31  unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog)
; Function Ifx_Ssw_getCpuWatchdogPassword
.L17:
Ifx_Ssw_getCpuWatchdogPassword:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a4]
	extr.u	d15,d15,#2,#14
.L290:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
	xor	d2,d15,#63
.L137:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    32  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    33      return Ifx_Ssw_getCpuWatchdogPasswordInline(watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    34  }
	ret
.L133:
	
__Ifx_Ssw_getCpuWatchdogPassword_function_end:
	.size	Ifx_Ssw_getCpuWatchdogPassword,__Ifx_Ssw_getCpuWatchdogPassword_function_end-Ifx_Ssw_getCpuWatchdogPassword
.L56:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_getSafetyWatchdogPassword',code,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_getSafetyWatchdogPassword'
	.align	2
	
	.global	Ifx_Ssw_getSafetyWatchdogPassword

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    35  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    36  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    37  unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void)
; Function Ifx_Ssw_getSafetyWatchdogPassword
.L19:
Ifx_Ssw_getSafetyWatchdogPassword:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
	movh.a	a15,#61443
.L238:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
	ld.w	d15,[a15]@los(0xf00362a8)
	extr.u	d15,d15,#2,#14
.L295:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
	xor	d2,d15,#63
.L144:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    38  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    39      return Ifx_Ssw_getSafetyWatchdogPasswordInline();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    40  }
	ret
.L142:
	
__Ifx_Ssw_getSafetyWatchdogPassword_function_end:
	.size	Ifx_Ssw_getSafetyWatchdogPassword,__Ifx_Ssw_getSafetyWatchdogPassword_function_end-Ifx_Ssw_getSafetyWatchdogPassword
.L61:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_clearCpuEndinit',code,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_clearCpuEndinit'
	.align	2
	
	.global	Ifx_Ssw_clearCpuEndinit

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    41  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    42  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    43  void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; Function Ifx_Ssw_clearCpuEndinit
.L21:
Ifx_Ssw_clearCpuEndinit:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   336  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   337      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   338  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   339  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   340  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   341  IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   342  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a4]
.L300:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L4
.L301:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   344      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   345          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   346          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   347                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   348                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sh	d15,d4,#2
	or	d15,#1
.L302:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   349                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a4]
	extr.u	d0,d0,#16,#16
.L303:
	sh	d0,d0,#16
.L304:
	or	d15,d0
.L305:
	st.w	[a4],d15

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)      (inlined)
.L4:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   350      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   351  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   352      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   353      watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   354                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   355                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sh	d4,#2
.L239:
	or	d15,d4,#2
.L306:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   356                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a4]
	extr.u	d0,d0,#16,#16
.L307:
	sh	d0,d0,#16
.L308:
	or	d15,d0
.L309:
	st.w	[a4],d15
.L310:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   357  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   358      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   359      watchdog->CON0.U;
	ld.w	d15,[a4]
.L153:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    44  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    45      Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    46  }
	ret
.L149:
	
__Ifx_Ssw_clearCpuEndinit_function_end:
	.size	Ifx_Ssw_clearCpuEndinit,__Ifx_Ssw_clearCpuEndinit_function_end-Ifx_Ssw_clearCpuEndinit
.L66:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_setCpuEndinit',code,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_setCpuEndinit'
	.align	2
	
	.global	Ifx_Ssw_setCpuEndinit

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    47  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    48  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    49  void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; Function Ifx_Ssw_setCpuEndinit
.L23:
Ifx_Ssw_setCpuEndinit:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   336  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   337      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   338  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   339  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   340  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   341  IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   342  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   344      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   345          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   346          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   347                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   348                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   349                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   350      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   351  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   352      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   353      watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   354                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   355                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   356                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   357  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   358      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   359      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   360  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   361  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   362  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   363  IFX_SSW_INLINE void Ifx_Ssw_clearSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   364  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   366      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   367          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   368          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   369                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   370                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   371                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   372      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   373  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   374      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   375      SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   376                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   377                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   378                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   379  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   380      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   381      SCU_WDTS_CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   382  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   383  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   384  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   385  IFX_SSW_INLINE void Ifx_Ssw_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   386  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a4]
.L315:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L5
.L316:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   388      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   389          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   390          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   391                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   392                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sh	d15,d4,#2
	or	d15,#1
.L317:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   393                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a4]
	extr.u	d0,d0,#16,#16
.L318:
	sh	d0,d0,#16
.L319:
	or	d15,d0
.L320:
	st.w	[a4],d15

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)      (inlined)
.L5:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   394      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   395  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   396      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   397      watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   398                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   399                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sh	d4,#2
.L240:
	or	d15,d4,#3
.L321:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   400                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a4]
	extr.u	d0,d0,#16,#16
.L322:
	sh	d0,d0,#16
.L323:
	or	d15,d0
.L324:
	st.w	[a4],d15
.L325:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   401  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   402      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   403      watchdog->CON0.U;
	ld.w	d15,[a4]
.L163:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    50  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    51      Ifx_Ssw_setCpuEndinitInline(watchdog, password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    52  }
	ret
.L159:
	
__Ifx_Ssw_setCpuEndinit_function_end:
	.size	Ifx_Ssw_setCpuEndinit,__Ifx_Ssw_setCpuEndinit_function_end-Ifx_Ssw_setCpuEndinit
.L71:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_clearSafetyEndinit',code,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_clearSafetyEndinit'
	.align	2
	
	.global	Ifx_Ssw_clearSafetyEndinit

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    53  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    54  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    55  void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
; Function Ifx_Ssw_clearSafetyEndinit
.L25:
Ifx_Ssw_clearSafetyEndinit:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   336  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   337      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   338  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   339  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   340  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   341  IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   342  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   344      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   345          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   346          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   347                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   348                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   349                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   350      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   351  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   352      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   353      watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   354                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   355                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   356                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   357  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   358      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   359      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   360  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   361  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   362  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   363  IFX_SSW_INLINE void Ifx_Ssw_clearSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   364  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00362a8)
.L330:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L6
.L331:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   366      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   367          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   368          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   369                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   370                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sh	d15,d4,#2
	or	d15,#1
.L332:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   371                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]@los(0xf00362a8)
	extr.u	d0,d0,#16,#16
.L333:
	sh	d0,d0,#16
.L334:
	or	d15,d0
.L335:
	st.w	[a15]@los(0xf00362a8),d15

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L6:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   372      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   373  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   374      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   375      SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   376                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   377                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sh	d4,#2
.L241:
	or	d15,d4,#2
.L336:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   378                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]@los(0xf00362a8)
	extr.u	d0,d0,#16,#16
.L337:
	sh	d0,d0,#16
.L338:
	or	d15,d0
.L339:
	st.w	[a15]@los(0xf00362a8),d15
.L340:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   379  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   380      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   381      SCU_WDTS_CON0.U;
	ld.w	d15,[a15]@los(0xf00362a8)
.L172:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    56  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    57      Ifx_Ssw_clearSafetyEndinitInline(password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    58  }
	ret
.L169:
	
__Ifx_Ssw_clearSafetyEndinit_function_end:
	.size	Ifx_Ssw_clearSafetyEndinit,__Ifx_Ssw_clearSafetyEndinit_function_end-Ifx_Ssw_clearSafetyEndinit
.L76:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_setSafetyEndinit',code,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_setSafetyEndinit'
	.align	2
	
	.global	Ifx_Ssw_setSafetyEndinit

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    59  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    60  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    61  void Ifx_Ssw_setSafetyEndinit(unsigned short password)
; Function Ifx_Ssw_setSafetyEndinit
.L27:
Ifx_Ssw_setSafetyEndinit:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   336  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   337      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   338  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   339  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   340  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   341  IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   342  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   344      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   345          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   346          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   347                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   348                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   349                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   350      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   351  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   352      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   353      watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   354                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   355                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   356                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   357  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   358      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   359      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   360  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   361  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   362  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   363  IFX_SSW_INLINE void Ifx_Ssw_clearSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   364  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   366      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   367          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   368          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   369                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   370                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   371                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   372      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   373  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   374      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   375      SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   376                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   377                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   378                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   379  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   380      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   381      SCU_WDTS_CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   382  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   383  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   384  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   385  IFX_SSW_INLINE void Ifx_Ssw_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   386  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   388      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   389          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   390          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   391                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   392                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   393                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   394      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   395  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   396      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   397      watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   398                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   399                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   400                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   401  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   402      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   403      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   404  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   405  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   406  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   407  IFX_SSW_INLINE void Ifx_Ssw_setSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   408  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   409      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00362a8)
.L345:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   409      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L7
.L346:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   410      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   411          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   412          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   413                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   414                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sh	d15,d4,#2
	or	d15,#1
.L347:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   415                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]@los(0xf00362a8)
	extr.u	d0,d0,#16,#16
.L348:
	sh	d0,d0,#16
.L349:
	or	d15,d0
.L350:
	st.w	[a15]@los(0xf00362a8),d15

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   409      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L7:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   416      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   417  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   418      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   419      SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   420                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   421                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sh	d4,#2
.L242:
	or	d15,d4,#3
.L351:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   422                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]@los(0xf00362a8)
	extr.u	d0,d0,#16,#16
.L352:
	sh	d0,d0,#16
.L353:
	or	d15,d0
.L354:
	st.w	[a15]@los(0xf00362a8),d15
.L355:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   423  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   424      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   425      SCU_WDTS_CON0.U;
	ld.w	d15,[a15]@los(0xf00362a8)
.L179:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    62  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    63      Ifx_Ssw_setSafetyEndinitInline(password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    64  }
	ret
.L176:
	
__Ifx_Ssw_setSafetyEndinit_function_end:
	.size	Ifx_Ssw_setSafetyEndinit,__Ifx_Ssw_setSafetyEndinit_function_end-Ifx_Ssw_setSafetyEndinit
.L81:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_serviceCpuWatchdog',code,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_serviceCpuWatchdog'
	.align	2
	
	.global	Ifx_Ssw_serviceCpuWatchdog

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    65  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    66  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    67  void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; Function Ifx_Ssw_serviceCpuWatchdog
.L29:
Ifx_Ssw_serviceCpuWatchdog:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   336  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   337      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   338  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   339  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   340  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   341  IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   342  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   344      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   345          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   346          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   347                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   348                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   349                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   350      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   351  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   352      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   353      watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   354                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   355                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   356                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   357  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   358      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   359      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   360  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   361  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   362  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   363  IFX_SSW_INLINE void Ifx_Ssw_clearSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   364  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   366      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   367          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   368          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   369                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   370                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   371                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   372      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   373  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   374      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   375      SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   376                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   377                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   378                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   379  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   380      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   381      SCU_WDTS_CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   382  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   383  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   384  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   385  IFX_SSW_INLINE void Ifx_Ssw_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   386  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)
	ld.w	d15,[a4]
.L419:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L8
.L420:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   388      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   389          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   390          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   391                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   392                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sh	d15,d4,#2
	or	d15,#1
.L421:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   393                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a4]
	extr.u	d0,d0,#16,#16
.L422:
	sh	d0,d0,#16
.L423:
	or	d15,d0
.L424:
	st.w	[a4],d15

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)      (inlined)
.L8:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   394      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   395  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   396      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   397      watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   398                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   399                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
	sh	d4,#2
.L243:
	or	d15,d4,#3
.L425:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   400                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
	ld.w	d0,[a4]
	extr.u	d0,d0,#16,#16
.L426:
	sh	d0,d0,#16
.L427:
	or	d15,d0
.L428:
	st.w	[a4],d15
.L429:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   401  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   402      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   403      watchdog->CON0.U;
	ld.w	d15,[a4]
.L231:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    68  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    69      Ifx_Ssw_setCpuEndinitInline(watchdog, password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    70  }
	ret
.L228:
	
__Ifx_Ssw_serviceCpuWatchdog_function_end:
	.size	Ifx_Ssw_serviceCpuWatchdog,__Ifx_Ssw_serviceCpuWatchdog_function_end-Ifx_Ssw_serviceCpuWatchdog
.L126:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_serviceSafetyWatchdog',code,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_serviceSafetyWatchdog'
	.align	2
	
	.global	Ifx_Ssw_serviceSafetyWatchdog

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    72  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    73  void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
; Function Ifx_Ssw_serviceSafetyWatchdog
.L31:
Ifx_Ssw_serviceSafetyWatchdog:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     2   * \file Ifx_Ssw_Infra.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     3   * \brief Startup Software support functions.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     8   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	     9   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    11   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    12   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    13   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    14   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    15   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    16   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    17   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    18   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    19   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    20   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    21   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    22   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    23   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    24  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    25  #ifndef IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    26  #define IFX_SSW_INFRA_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    27  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    28  #include "Ifx_Ssw_Compilers.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    29  #include "Ifx_Cfg_Ssw.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    30  #include "IfxScu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    31  #include "IfxCpu_reg.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    32  #include "IfxScu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    33  #include "IfxCpu_bf.h"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    34  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    35  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    36  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    37  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    39  /** \brief PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    40   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    41  #define IFX_SSW_POWERONRESET_MASK                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    42      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    43       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    44       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    45       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    46       ((unsigned int)IFX_SCU_RSTSTAT_CB1_MSK << IFX_SCU_RSTSTAT_CB1_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    47       ((unsigned int)IFX_SCU_RSTSTAT_CB0_MSK << IFX_SCU_RSTSTAT_CB0_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    48       ((unsigned int)IFX_SCU_RSTSTAT_PORST_MSK << IFX_SCU_RSTSTAT_PORST_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    49  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    50  /** \brief Application Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    51   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    52  #define IFX_SSW_APPLICATIONRESET_MASK                                       \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    53      (((unsigned int)IFX_SCU_RSTSTAT_SW_MSK << IFX_SCU_RSTSTAT_SW_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    54       ((unsigned int)IFX_SCU_RSTSTAT_STM5_MSK << IFX_SCU_RSTSTAT_STM5_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    55       ((unsigned int)IFX_SCU_RSTSTAT_STM4_MSK << IFX_SCU_RSTSTAT_STM4_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    56       ((unsigned int)IFX_SCU_RSTSTAT_STM3_MSK << IFX_SCU_RSTSTAT_STM3_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    57       ((unsigned int)IFX_SCU_RSTSTAT_STM2_MSK << IFX_SCU_RSTSTAT_STM2_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    58       ((unsigned int)IFX_SCU_RSTSTAT_STM1_MSK << IFX_SCU_RSTSTAT_STM1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    59       ((unsigned int)IFX_SCU_RSTSTAT_STM0_MSK << IFX_SCU_RSTSTAT_STM0_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    60       ((unsigned int)IFX_SCU_RSTSTAT_SMU_MSK << IFX_SCU_RSTSTAT_SMU_OFF) |   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    61       ((unsigned int)IFX_SCU_RSTSTAT_ESR1_MSK << IFX_SCU_RSTSTAT_ESR1_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    62       ((unsigned int)IFX_SCU_RSTSTAT_ESR0_MSK << IFX_SCU_RSTSTAT_ESR0_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    63  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    64  /** \brief Cold PowerOn Reset Mask
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    65   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    66  #define IFX_SSW_COLD_POWERONRESET_MASK                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    67      (((unsigned int)IFX_SCU_RSTSTAT_STBYR_MSK << IFX_SCU_RSTSTAT_STBYR_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    68       ((unsigned int)IFX_SCU_RSTSTAT_SWD_MSK << IFX_SCU_RSTSTAT_SWD_OFF) |     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    69       ((unsigned int)IFX_SCU_RSTSTAT_EVR33_MSK << IFX_SCU_RSTSTAT_EVR33_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    70       ((unsigned int)IFX_SCU_RSTSTAT_EVRC_MSK << IFX_SCU_RSTSTAT_EVRC_OFF))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    71  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    72  /** \brief Application reset enabled
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    73   * In SCU_RSTCON register, value 2 represents the Application reset
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    74   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    75  #define IFX_SSW_APPLICATIONRESET                  (2U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    77  /** \brief Reload value mask */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    78  #define IFX_SSW_SEICON_REL_VAL_MSK                (unsigned short)(0xFFFCU << IFX_SCU_SEICON0_REL_OFF)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    79  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    80  /** \brief Mask values is used to invert the password value bits */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    81  #define IFX_SSW_WDT_PASSWORD_INVERT_MSK           (0x003FU)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    82  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    83  /** \brief CSA size */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    84  #define IFX_SSW_CSA_SIZE                          16U
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    86  #ifndef IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    87  #define IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS (0.0001)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    88  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    89  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    90  #ifndef IFX_CFG_SSW_EVR_OSC_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    91  #define IFX_CFG_SSW_EVR_OSC_FREQUENCY             (100000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    92  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    94  #ifndef IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    95  #define IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY          (20000000.0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    96  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    98  #ifndef IFX_CFG_SSW_XTAL_FREQUENCY
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	    99  #define IFX_CFG_SSW_XTAL_FREQUENCY                (IFX_CFG_SCU_XTAL_FREQUENCY)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   100  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   102  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   103  /*-------------------------Infrastructure Functions---------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   104  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   105  /** \brief clear safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   106   * Note: IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   107   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   108  #define IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT()                                                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   109      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   110          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   111          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   112                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   113                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   114                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   115          /* Clear ENDINT and set LCK bit in Config_0 register */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   116          SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   117                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   118                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   119                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   120          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   121          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   122      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   124  /** \brief set safety endinit.\n
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   125   * Note: IFX_CFG_SSW_SET_SAFETY_ENDINIT() function macro is added to avoid issues higher optimization is enabled.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   126   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   127  #define IFX_CFG_SSW_SET_SAFETY_ENDINIT()                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   128      {                                                                                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   129          /* see Table 1 (Password Access Bit Pattern Requirements) */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   130          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   131                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   132                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   133                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   134          /* Set ENDINT and set LCK bit in Config_0 register */                                                \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   135          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |                               \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   136                            ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |                                   \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   137                            ((unsigned int)(MODULE_SCU.WDTS.CON0.B.PW ^ 0x003F) << IFX_SCU_WDTS_CON0_PW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   138                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);                  \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   139          /* Read back of the register is mandatory to ensure the register update  */                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   140          SCU_WDTS_CON0.U;                                                                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   141      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   143  /** \brief Fetch current password of CPU Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   144   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   145   * This API will fetch current Watchdog password for CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   146   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   147   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   148   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   149   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   150  extern unsigned short Ifx_Ssw_getCpuWatchdogPassword(Ifx_SCU_WDTCPU *watchdog);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   152  /** \brief Fetch current password of Safety Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   153   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   154   * This API will fetch current Watchdog password for Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   155   * password is needed to be passed with most of the WDT APIs.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   156   * \return password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   157   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   158  extern unsigned short Ifx_Ssw_getSafetyWatchdogPassword(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   159  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   160  /** \brief Clear ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   161   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   162   * This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   163   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   164   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   165   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   166   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   167   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   168   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   169   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   170  extern void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   172  /** \brief Set ENDINIT bit provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   173   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   174   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   175   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   176   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   177   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   178   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   179   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   180  extern void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   181  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   182  /** \brief Clear ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   183   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   184   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   185   * User need to use this API call before modifying any ENDINIT protected register. User must
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   186   * always set the ENDINIT bit using other API Ifx_Ssw_setCpuEndinit. The sequence clear and set
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   187   * ENDINIT shall not be interrupted by another interrupt/call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   188   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   189   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   190   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   191  extern void Ifx_Ssw_clearSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   193  /** \brief Set ENDINIT bit provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   194   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   195   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   197   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   198   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   199   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   200  extern void Ifx_Ssw_setSafetyEndinit(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   201  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   202  /** \brief Disable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   203   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   204   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   205   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   206   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   207   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   208   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   209   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   210  extern void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   211  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   212  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   213   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   214   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   215   *   periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   216   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   217   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   218   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   219   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   220  extern void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   221  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   222  /** \brief Disable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   223   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   224   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   225   * after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   227   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   228   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   229  extern void Ifx_Ssw_disableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   230  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   231  /** \brief Enable Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   232   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   233   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   234   * periodically after this API call.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   235   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   236   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   237   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   238  extern void Ifx_Ssw_enableSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   239  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   240  /** \brief Set the program counter for the CPU specified and start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   241   * \param cpu Pointer to the CPU HW module (register memory map)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   242   * \param programCounter Program counter value to start the CPU
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   243   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   244  extern void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   245  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   246  /** \brief Set CPU0 to idle state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   247  extern void Ifx_Ssw_setCpu0Idle(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   248  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   249  /** \brief Initialise the C runtime environment */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   250  extern void Ifx_Ssw_C_Init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   252  /** \brief Returns the system timer frequency.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   253   * \return the system timer frequency in Hz.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   254   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   255  extern float Ifx_Ssw_getStmFrequency(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   256  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   257  /** \brief SCUWDT API to service CPU Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   258   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   259   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   260   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   261   *   User need to have the password stored locally in the caller function, (use Ifx_Ssw_getCpuWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   262   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   263   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   264   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   265   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   266  extern void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   267  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   268  /** \brief SCUWDT API to service Safety Watchdog functionality.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   269   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   270   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   271   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   272   * User need to have the password stored locally in the caller function, (use Ifx_Ssw_getSafetyWatchdogPassword).
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   273   * \param password Existing (Application specific) password for the Watchdog module.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   274   * \return None
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   275   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   276  extern void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   277  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   278  /*Endinit Functions*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   279  IFX_SSW_INLINE unsigned short Ifx_Ssw_getGlobalSafetyEndinitPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   280  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   281      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   282       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   283       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   284  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   285      unsigned short password = (unsigned short)MODULE_SCU.SEICON0.B.EPW ^ IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   286      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   287  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   288  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   289  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   290  IFX_SSW_INLINE void Ifx_Ssw_clearGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   291  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   292      /* Clear EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   293      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK | ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   294  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   295      /* Read back of the register is mandatory to ensure the register update */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   296      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   297  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   298  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   299  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   300  IFX_SSW_INLINE void Ifx_Ssw_setGlobalSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   301  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   302      /* Set EndInit Watch-dog*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   303      MODULE_SCU.SEICON0.U = IFX_SSW_SEICON_REL_VAL_MSK |                          \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   304                             ((unsigned int)password << IFX_SCU_SEICON0_EPW_OFF) | \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   305                             ((unsigned int)1 << IFX_SCU_SEICON0_ENDINIT_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   306  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   307      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   308      MODULE_SCU.SEICON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   309  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   310  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   311  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   312  IFX_SSW_INLINE unsigned short Ifx_Ssw_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   313  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   314      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   315  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   316      /* Read Password from CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   317       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   318       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   319      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   320      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   321  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   322      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   323  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   324  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   325  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   326  IFX_SSW_INLINE unsigned short Ifx_Ssw_getSafetyWatchdogPasswordInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   327  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   328      unsigned short password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   329      Ifx_SCU_WDTS  *watchdog;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   330      watchdog  = &MODULE_SCU.WDTS;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   331      /* Read Password from Safety WDT CON0 register
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   332       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   333       * to toggle them before returning password */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   334      password  = watchdog->CON0.B.PW;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   335      password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   336  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   337      return password;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   338  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   339  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   340  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   341  IFX_SSW_INLINE void Ifx_Ssw_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   342  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   343      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   344      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   345          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   346          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   347                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   348                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   349                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   350      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   351  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   352      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   353      watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   354                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   355                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   356                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   357  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   358      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   359      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   360  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   361  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   362  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   363  IFX_SSW_INLINE void Ifx_Ssw_clearSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   364  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   365      if (SCU_WDTS_CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   366      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   367          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   368          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   369                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   370                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   371                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   372      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   373  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   374      /* Clear ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   375      SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   376                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   377                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   378                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   379  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   380      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   381      SCU_WDTS_CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   382  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   383  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   384  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   385  IFX_SSW_INLINE void Ifx_Ssw_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   386  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   387      if (watchdog->CON0.B.LCK)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   388      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   389          /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   390          watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   391                             ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   392                             ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   393                             ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   394      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   395  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   396      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   397      watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   398                         ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   399                         ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   400                         ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   401  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   402      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   403      watchdog->CON0.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   404  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   405  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   406  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   407  IFX_SSW_INLINE void Ifx_Ssw_setSafetyEndinitInline(unsigned short password)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   408  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   409      if (SCU_WDTS_CON0.B.LCK)
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00362a8)
.L434:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   409      if (SCU_WDTS_CON0.B.LCK)      (inlined)
	jz.t	d15:1,.L9
.L435:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   410      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   411          /* see Table 1 (Password Access Bit Pattern Requirements) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   412          SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   413                            ((unsigned int)0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   414                            ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sh	d15,d4,#2
	or	d15,#1
.L436:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   415                            ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]@los(0xf00362a8)
	extr.u	d0,d0,#16,#16
.L437:
	sh	d0,d0,#16
.L438:
	or	d15,d0
.L439:
	st.w	[a15]@los(0xf00362a8),d15

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   409      if (SCU_WDTS_CON0.B.LCK)      (inlined)
.L9:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   416      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   417  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   418      /* Set ENDINT and set LCK bit in Config_0 register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   419      SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   420                        ((unsigned int)1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   421                        ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
	sh	d4,#2
.L244:
	or	d15,d4,#3
.L440:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   422                        ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
	ld.w	d0,[a15]@los(0xf00362a8)
	extr.u	d0,d0,#16,#16
.L441:
	sh	d0,d0,#16
.L442:
	or	d15,d0
.L443:
	st.w	[a15]@los(0xf00362a8),d15
.L444:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   423  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   424      /* Read back of the register is mandatory to ensure the register update  */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.h	   425      SCU_WDTS_CON0.U;
	ld.w	d15,[a15]@los(0xf00362a8)
.L236:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    74  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    75      Ifx_Ssw_setSafetyEndinitInline(password);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    76  }
	ret
.L234:
	
__Ifx_Ssw_serviceSafetyWatchdog_function_end:
	.size	Ifx_Ssw_serviceSafetyWatchdog,__Ifx_Ssw_serviceSafetyWatchdog_function_end-Ifx_Ssw_serviceSafetyWatchdog
.L131:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_disableCpuWatchdog',code,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_disableCpuWatchdog'
	.align	2
	
	.global	Ifx_Ssw_disableCpuWatchdog

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    77  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    78  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    79  void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; Function Ifx_Ssw_disableCpuWatchdog
.L33:
Ifx_Ssw_disableCpuWatchdog:	.type	func
	mov	d8,d4
.L247:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    80  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    81      /* Select CPU Watchdog based on Core Id */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    82      unsigned int    cpuIndex;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    83      cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
	mfcr	d15,#65052
.L248:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    84      cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
	and	d15,#7
.L189:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     2   * \file Ifx_Ssw_CompilersTasking.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     3   * \brief Startup Software for Tasking compiler options
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     8   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     9   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    11   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    12   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    13   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    14   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    15   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    16   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    17   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    18   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    19   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    20   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    21   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    22   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    23  #ifndef IFX_SSW_COMPILERSTASKING_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    24  #define IFX_SSW_COMPILERSTASKING_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    25  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    26  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    27  /*----------------------------------Includes----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    28  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    29  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    30  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    31  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    32  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    33  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    34  /*Linker definitions which are specific to Tasking */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    35  /* IFX_CFG_USE_COMPILER_DEFAULT_LINKER shall be defined in Ifx_Cfg.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    36   * to use the default compiler linker varaibles and startup */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    37  #ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    39  /*Start: Common definitions ********************************************** */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    40  #define IFX_SSW_COMMON_LINKER_SYMBOLS()                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    41      __asm("\t .extern _SMALL_DATA_, _LITERAL_DATA_, _A8_DATA_, _A9_DATA_"); \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    42      extern unsigned int __START0[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    43      extern unsigned int __START1[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    44      extern unsigned int __START2[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    45      extern unsigned int __START3[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    46      extern unsigned int __START4[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    47      extern unsigned int __START5[];     /**< Pointer to the startup code */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    48  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    49  /*End: Common definitions ************************************************ */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    50  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    51  /*Start: Core 0 definitions ********************************************** */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    52  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    53  /*C extern defintions */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    54  #define IFX_SSW_CORE_LINKER_SYMBOLS(cpu)                                                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    55      __asm("\t .extern __USTACK"#cpu);         /**< user stack end is required as asm to be used with setreg macro */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    56      extern unsigned int __ISTACK##cpu[];      /**< interrupt stack end */                                            \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    57      extern unsigned int __INTTAB_CPU##cpu[];  /**< interrupt vector table */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    58      extern unsigned int __TRAPTAB_CPU##cpu[]; /**< trap vector table */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    59      extern unsigned int __CSA##cpu[];         /**< context save area begin */                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    60      extern unsigned int __CSA##cpu##_END[];   /**< context save area end   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    61  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    62  #define __USTACK(cpu)      __USTACK##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    63  #define __ISTACK(cpu)      __ISTACK##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    64  #define __INTTAB_CPU(cpu)  __INTTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    65  #define __TRAPTAB_CPU(cpu) __TRAPTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    66  #define __CSA(cpu)         __CSA##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    67  #define __CSA_END(cpu)     __CSA##cpu##_END
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    68  #define __START(cpu)       __START##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    69  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    70  /*Wrapper macros for the tool specific definitions */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    71  #if defined(IFX_USE_SW_MANAGED_INT)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    72  #define __INTTAB(cpu)      ((unsigned int)__INTTAB_CPU##cpu | (unsigned int)0x1FE0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    73  #else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    74  #define __INTTAB(cpu)      __INTTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    75  #endif /*defined(IFX_USE_SW_MANAGED_INT) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    77  #define __TRAPTAB(cpu)     __TRAPTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    78  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    79  #define __SDATA1(cpu)      _SMALL_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    80  #define __SDATA2(cpu)      _LITERAL_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    81  #define __SDATA3(cpu)      _A8_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    82  #define __SDATA4(cpu)      _A9_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    83  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    84  #endif /*IFX_CFG_USE_COMPILER_DEFAULT_LINKER*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    86  #ifdef __cplusplus
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    87  #define IFX_SSW_INLINE   static inline
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    88  #else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    89  #define IFX_SSW_INLINE   inline
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    90  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    91  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    92  #define IFX_SSW_NULL_PTR ((void *)0x0U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    94  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    95  /*----------------------------   GNU Intrinsics  -----------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    96  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    98  #define Ifx_Ssw_MTCR(reg, val) __mtcr(reg, val);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    99  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   100  #define Ifx_Ssw_MFCR(reg)      __mfcr(reg);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   102  IFX_SSW_INLINE void Ifx_Ssw_NOP(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   103  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   104      __nop();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   105  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   106  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   107  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   108  IFX_SSW_INLINE void Ifx_Ssw_DSYNC(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   109  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   110      __dsync();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   111  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   112  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   113  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   114  IFX_SSW_INLINE void Ifx_Ssw_ISYNC(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   115  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   116      __isync();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   117  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   118  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   119  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   120  IFX_SSW_INLINE unsigned int Ifx_Ssw_MINU(unsigned int a, unsigned int b)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   121  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   122      return __minu(a, b);
	min.u	d15,d15,#5
.L190:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    85      cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    86      Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]25164
.L249:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    87  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    88      Ifx_Ssw_clearCpuEndinit(wdt, password);
	mov.aa	a4,a15
.L246:
	call	Ifx_Ssw_clearCpuEndinit
.L245:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    89      wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
	ld.bu	d15,[a15]4
.L360:
	or	d15,#8
	st.b	[a15]4,d15
.L361:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    90      Ifx_Ssw_setCpuEndinit(wdt, password);
	mov.aa	a4,a15
.L250:
	mov	d4,d8
.L251:
	j	Ifx_Ssw_setCpuEndinit
.L183:
	
__Ifx_Ssw_disableCpuWatchdog_function_end:
	.size	Ifx_Ssw_disableCpuWatchdog,__Ifx_Ssw_disableCpuWatchdog_function_end-Ifx_Ssw_disableCpuWatchdog
.L86:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_enableCpuWatchdog',code,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_enableCpuWatchdog'
	.align	2
	
	.global	Ifx_Ssw_enableCpuWatchdog

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    91  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    92  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    94  void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
; Function Ifx_Ssw_enableCpuWatchdog
.L35:
Ifx_Ssw_enableCpuWatchdog:	.type	func
	mov	d8,d4
.L254:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    95  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    96      /* Select CPU Watchdog based on Core Id */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    97      unsigned int    cpuIndex;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    98      cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
	mfcr	d15,#65052
.L255:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	    99      cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
	and	d15,#7
.L201:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     2   * \file Ifx_Ssw_CompilersTasking.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     3   * \brief Startup Software for Tasking compiler options
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     8   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     9   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    11   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    12   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    13   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    14   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    15   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    16   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    17   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    18   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    19   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    20   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    21   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    22   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    23  #ifndef IFX_SSW_COMPILERSTASKING_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    24  #define IFX_SSW_COMPILERSTASKING_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    25  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    26  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    27  /*----------------------------------Includes----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    28  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    29  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    30  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    31  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    32  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    33  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    34  /*Linker definitions which are specific to Tasking */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    35  /* IFX_CFG_USE_COMPILER_DEFAULT_LINKER shall be defined in Ifx_Cfg.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    36   * to use the default compiler linker varaibles and startup */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    37  #ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    39  /*Start: Common definitions ********************************************** */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    40  #define IFX_SSW_COMMON_LINKER_SYMBOLS()                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    41      __asm("\t .extern _SMALL_DATA_, _LITERAL_DATA_, _A8_DATA_, _A9_DATA_"); \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    42      extern unsigned int __START0[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    43      extern unsigned int __START1[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    44      extern unsigned int __START2[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    45      extern unsigned int __START3[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    46      extern unsigned int __START4[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    47      extern unsigned int __START5[];     /**< Pointer to the startup code */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    48  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    49  /*End: Common definitions ************************************************ */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    50  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    51  /*Start: Core 0 definitions ********************************************** */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    52  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    53  /*C extern defintions */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    54  #define IFX_SSW_CORE_LINKER_SYMBOLS(cpu)                                                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    55      __asm("\t .extern __USTACK"#cpu);         /**< user stack end is required as asm to be used with setreg macro */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    56      extern unsigned int __ISTACK##cpu[];      /**< interrupt stack end */                                            \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    57      extern unsigned int __INTTAB_CPU##cpu[];  /**< interrupt vector table */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    58      extern unsigned int __TRAPTAB_CPU##cpu[]; /**< trap vector table */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    59      extern unsigned int __CSA##cpu[];         /**< context save area begin */                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    60      extern unsigned int __CSA##cpu##_END[];   /**< context save area end   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    61  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    62  #define __USTACK(cpu)      __USTACK##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    63  #define __ISTACK(cpu)      __ISTACK##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    64  #define __INTTAB_CPU(cpu)  __INTTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    65  #define __TRAPTAB_CPU(cpu) __TRAPTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    66  #define __CSA(cpu)         __CSA##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    67  #define __CSA_END(cpu)     __CSA##cpu##_END
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    68  #define __START(cpu)       __START##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    69  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    70  /*Wrapper macros for the tool specific definitions */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    71  #if defined(IFX_USE_SW_MANAGED_INT)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    72  #define __INTTAB(cpu)      ((unsigned int)__INTTAB_CPU##cpu | (unsigned int)0x1FE0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    73  #else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    74  #define __INTTAB(cpu)      __INTTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    75  #endif /*defined(IFX_USE_SW_MANAGED_INT) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    77  #define __TRAPTAB(cpu)     __TRAPTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    78  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    79  #define __SDATA1(cpu)      _SMALL_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    80  #define __SDATA2(cpu)      _LITERAL_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    81  #define __SDATA3(cpu)      _A8_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    82  #define __SDATA4(cpu)      _A9_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    83  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    84  #endif /*IFX_CFG_USE_COMPILER_DEFAULT_LINKER*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    86  #ifdef __cplusplus
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    87  #define IFX_SSW_INLINE   static inline
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    88  #else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    89  #define IFX_SSW_INLINE   inline
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    90  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    91  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    92  #define IFX_SSW_NULL_PTR ((void *)0x0U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    94  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    95  /*----------------------------   GNU Intrinsics  -----------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    96  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    98  #define Ifx_Ssw_MTCR(reg, val) __mtcr(reg, val);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    99  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   100  #define Ifx_Ssw_MFCR(reg)      __mfcr(reg);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   102  IFX_SSW_INLINE void Ifx_Ssw_NOP(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   103  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   104      __nop();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   105  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   106  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   107  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   108  IFX_SSW_INLINE void Ifx_Ssw_DSYNC(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   109  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   110      __dsync();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   111  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   112  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   113  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   114  IFX_SSW_INLINE void Ifx_Ssw_ISYNC(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   115  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   116      __isync();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   117  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   118  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   119  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   120  IFX_SSW_INLINE unsigned int Ifx_Ssw_MINU(unsigned int a, unsigned int b)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   121  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   122      return __minu(a, b);
	min.u	d15,d15,#5
.L202:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   100      cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   101      Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
	mul	d15,d15,#12
	mov.a	a15,d15
	movh.a	a3,#61443
	add.a	a3,a15
	lea	a15,[a3]25164
.L256:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   102  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   103      Ifx_Ssw_clearCpuEndinit(wdt, password);
	mov.aa	a4,a15
.L253:
	call	Ifx_Ssw_clearCpuEndinit
.L252:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   104      wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
	ld.bu	d15,[a15]4
.L366:
	insert	d15,d15,#0,#3,#1
	st.b	[a15]4,d15
.L367:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   105      Ifx_Ssw_setCpuEndinit(wdt, password);
	mov.aa	a4,a15
.L257:
	mov	d4,d8
.L258:
	j	Ifx_Ssw_setCpuEndinit
.L197:
	
__Ifx_Ssw_enableCpuWatchdog_function_end:
	.size	Ifx_Ssw_enableCpuWatchdog,__Ifx_Ssw_enableCpuWatchdog_function_end-Ifx_Ssw_enableCpuWatchdog
.L91:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_disableSafetyWatchdog',code,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_disableSafetyWatchdog'
	.align	2
	
	.global	Ifx_Ssw_disableSafetyWatchdog

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   106  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   107  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   108  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   109  void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
; Function Ifx_Ssw_disableSafetyWatchdog
.L37:
Ifx_Ssw_disableSafetyWatchdog:	.type	func
	mov	d8,d4
.L260:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   110  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   111      Ifx_Ssw_clearSafetyEndinit(password);
	call	Ifx_Ssw_clearSafetyEndinit
.L259:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   112      SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf00362ac)
.L372:
	or	d15,#8
	st.b	[a15]@los(0xf00362ac),d15
.L373:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   113      Ifx_Ssw_setSafetyEndinit(password);
	mov	d4,d8
.L261:
	j	Ifx_Ssw_setSafetyEndinit
.L206:
	
__Ifx_Ssw_disableSafetyWatchdog_function_end:
	.size	Ifx_Ssw_disableSafetyWatchdog,__Ifx_Ssw_disableSafetyWatchdog_function_end-Ifx_Ssw_disableSafetyWatchdog
.L96:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_enableSafetyWatchdog',code,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_enableSafetyWatchdog'
	.align	2
	
	.global	Ifx_Ssw_enableSafetyWatchdog

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   114  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   115  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   116  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   117  void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
; Function Ifx_Ssw_enableSafetyWatchdog
.L39:
Ifx_Ssw_enableSafetyWatchdog:	.type	func
	mov	d15,d4
.L263:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   118  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   119      Ifx_Ssw_clearSafetyEndinit(password);
	call	Ifx_Ssw_clearSafetyEndinit
.L262:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   120      SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
	movh.a	a15,#61443
	ld.bu	d0,[a15]@los(0xf00362ac)
.L378:
	insert	d0,d0,#0,#3,#1
	st.b	[a15]@los(0xf00362ac),d0
.L379:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   121      Ifx_Ssw_setSafetyEndinit(password);
	mov	d4,d15
.L264:
	j	Ifx_Ssw_setSafetyEndinit
.L208:
	
__Ifx_Ssw_enableSafetyWatchdog_function_end:
	.size	Ifx_Ssw_enableSafetyWatchdog,__Ifx_Ssw_enableSafetyWatchdog_function_end-Ifx_Ssw_enableSafetyWatchdog
.L101:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_startCore',code,cluster('Ifx_Ssw_startCore')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_startCore'
	.align	2
	
	.global	Ifx_Ssw_startCore

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   122  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   123  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   124  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   125  void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
; Function Ifx_Ssw_startCore
.L41:
Ifx_Ssw_startCore:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   126  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   127      /* Set the PC */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   128      cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
	movh.a	a3,#2
	add.a	a3,a4
	ld.w	d15,[+a3]-504
.L384:
	sh	d4,#-1
.L265:
	insert	d15,d15,d4,#1,#31
	movh.a	a3,#2
	add.a	a3,a4
	st.w	[+a3]-504,d15
.L214:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   129  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   130      /* release boot halt mode if required */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   131      Ifx_CPU_SYSCON syscon;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   132      syscon = cpu->SYSCON;
	movh.a	a3,#2
	add.a	a3,a4
	ld.w	d15,[+a3]-492
.L266:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   133  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   134      if (syscon.B.BHALT)
	jz.t	d15:24,.L10
.L385:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   135      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   136          syscon.B.BHALT = 0U;
	insert	d15,d15,#0,#24,#1
.L386:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   137          cpu->SYSCON    = syscon;
	movh.a	a3,#2
	add.a	a3,a4
	st.w	[+a3]-492,d15
.L10:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   138      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   139  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   140  }
	ret
.L210:
	
__Ifx_Ssw_startCore_function_end:
	.size	Ifx_Ssw_startCore,__Ifx_Ssw_startCore_function_end-Ifx_Ssw_startCore
.L106:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_setCpu0Idle',code,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_setCpu0Idle'
	.align	2
	
	.global	Ifx_Ssw_setCpu0Idle

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   141  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   142  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   143  void Ifx_Ssw_setCpu0Idle(void)
; Function Ifx_Ssw_setCpu0Idle
.L43:
Ifx_Ssw_setCpu0Idle:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   144  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   145      Ifx_SCU_WDTCPU *wdt      = &MODULE_SCU.WDTCPU[0];
	movh.a	a15,#61443
.L267:
	lea	a15,[a15]@los(0xf003624c)
.L391:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   146      unsigned short  cpuWdtPw = Ifx_Ssw_getCpuWatchdogPassword(wdt);
	mov.aa	a4,a15
.L268:
	call	Ifx_Ssw_getCpuWatchdogPassword
.L269:
	mov	d15,d2
.L271:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   147      Ifx_Ssw_clearCpuEndinit(wdt, cpuWdtPw);
	mov.aa	a4,a15
.L272:
	mov	d4,d15
.L270:
	call	Ifx_Ssw_clearCpuEndinit
.L273:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   148      SCU_PMCSR0.B.REQSLP = 1U;
	movh.a	a2,#61443
	ld.bu	d0,[a2]@los(0xf00360c8)
.L392:
	insert	d0,d0,#1,#0,#2
	st.b	[a2]@los(0xf00360c8),d0
.L393:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   149      Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
	mov.aa	a4,a15
.L274:
	mov	d4,d15
.L275:
	j	Ifx_Ssw_setCpuEndinit
.L217:
	
__Ifx_Ssw_setCpu0Idle_function_end:
	.size	Ifx_Ssw_setCpu0Idle,__Ifx_Ssw_setCpu0Idle_function_end-Ifx_Ssw_setCpu0Idle
.L111:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_getStmFrequency',code,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_getStmFrequency'
	.align	2
	
	.global	Ifx_Ssw_getStmFrequency

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   150  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   152  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   153  float Ifx_Ssw_getStmFrequency(void)
; Function Ifx_Ssw_getStmFrequency
.L45:
Ifx_Ssw_getStmFrequency:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   154  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   155      float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   156      float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
	mov.u	d0,#48160
.L276:
	addih	d0,d0,#19646
.L402:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   157      unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf003601b)
	extr.u	d15,d15,#6,#2
.L278:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   158  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   159      if (insel == 2U)
	jeq	d15,#2,.L11
.L403:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   160      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   161          oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   162      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   163      else if (insel == 1U)
	jne	d15,#1,.L12
.L11:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   164      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   165          oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
	mov.u	d1,#38528
.L280:
	addih	d1,d1,#19352
.L404:
	j	.L13
.L12:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   166      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   167      else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   168      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   169          oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
	mov	d1,d0
.L13:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   170      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   171  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   172      if (SCU_CCUCON0.B.CLKSEL != 0U)
	ld.bu	d15,[a15]@los(0xf0036033)
.L279:
	extr.u	d15,d15,#4,#2
.L405:
	jeq	d15,#0,.L14
.L406:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   173      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   174          sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
	ld.bu	d15,[a15]@los(0xf0036019)
	extr.u	d15,d15,#1,#7
.L407:
	add	d15,#1
	utof	d15,d15
.L408:
	mul.f	d1,d1,d15
.L281:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   175                       ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
	ld.bu	d15,[a15]@los(0xf003601b)
	and	d15,#7
.L409:
	add	d0,d15,#1
.L277:
	ld.bu	d15,[a15]@los(0xf003601c)
	and	d15,#7
.L410:
	add	d15,#1
.L411:
	mul	d0,d15
	utof	d15,d0
.L412:
	div.f	d0,d1,d15
.L14:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   176      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   177  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   178      return sourcefreq / SCU_CCUCON0.B.STMDIV;
	ld.bu	d15,[a15]@los(0xf0036030)
	and	d15,#15
	itof	d15,d15
.L413:
	div.f	d2,d0,d15
.L414:

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   179  }
	ret
.L224:
	
__Ifx_Ssw_getStmFrequency_function_end:
	.size	Ifx_Ssw_getStmFrequency,__Ifx_Ssw_getStmFrequency_function_end-Ifx_Ssw_getStmFrequency
.L121:
	; End of function
	
	.sdecl	'.text.Ifx_Ssw_Infra.Ifx_Ssw_C_Init',code,cluster('Ifx_Ssw_C_Init')
	.sect	'.text.Ifx_Ssw_Infra.Ifx_Ssw_C_Init'
	.align	2
	
	.global	Ifx_Ssw_C_Init

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   180  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   181  void Ifx_Ssw_C_Init(void)
; Function Ifx_Ssw_C_Init
.L47:
Ifx_Ssw_C_Init:	.type	func

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     1  /**
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     2   * \file Ifx_Ssw_CompilersTasking.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     3   * \brief Startup Software for Tasking compiler options
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     4   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     5   * \version iLLD_1_0_1_11_0
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     7   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     8   *                                 IMPORTANT NOTICE
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	     9   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    10   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    11   * Infineon Technologies AG (Infineon) is supplying this file for use
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    12   * exclusively with Infineon's microcontroller products. This file can be freely
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    13   * distributed within development tools that are supporting such microcontroller
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    14   * products.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    15   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    16   * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    17   * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    18   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    19   * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    20   * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    21   *
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    22   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    23  #ifndef IFX_SSW_COMPILERSTASKING_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    24  #define IFX_SSW_COMPILERSTASKING_H_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    25  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    26  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    27  /*----------------------------------Includes----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    28  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    29  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    30  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    31  /*-----------------------------------Macros-----------------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    32  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    33  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    34  /*Linker definitions which are specific to Tasking */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    35  /* IFX_CFG_USE_COMPILER_DEFAULT_LINKER shall be defined in Ifx_Cfg.h
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    36   * to use the default compiler linker varaibles and startup */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    37  #ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    38  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    39  /*Start: Common definitions ********************************************** */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    40  #define IFX_SSW_COMMON_LINKER_SYMBOLS()                                     \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    41      __asm("\t .extern _SMALL_DATA_, _LITERAL_DATA_, _A8_DATA_, _A9_DATA_"); \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    42      extern unsigned int __START0[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    43      extern unsigned int __START1[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    44      extern unsigned int __START2[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    45      extern unsigned int __START3[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    46      extern unsigned int __START4[];     /**< Pointer to the startup code */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    47      extern unsigned int __START5[];     /**< Pointer to the startup code */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    48  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    49  /*End: Common definitions ************************************************ */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    50  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    51  /*Start: Core 0 definitions ********************************************** */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    52  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    53  /*C extern defintions */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    54  #define IFX_SSW_CORE_LINKER_SYMBOLS(cpu)                                                                             \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    55      __asm("\t .extern __USTACK"#cpu);         /**< user stack end is required as asm to be used with setreg macro */ \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    56      extern unsigned int __ISTACK##cpu[];      /**< interrupt stack end */                                            \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    57      extern unsigned int __INTTAB_CPU##cpu[];  /**< interrupt vector table */                                         \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    58      extern unsigned int __TRAPTAB_CPU##cpu[]; /**< trap vector table */                                              \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    59      extern unsigned int __CSA##cpu[];         /**< context save area begin */                                        \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    60      extern unsigned int __CSA##cpu##_END[];   /**< context save area end   */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    61  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    62  #define __USTACK(cpu)      __USTACK##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    63  #define __ISTACK(cpu)      __ISTACK##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    64  #define __INTTAB_CPU(cpu)  __INTTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    65  #define __TRAPTAB_CPU(cpu) __TRAPTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    66  #define __CSA(cpu)         __CSA##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    67  #define __CSA_END(cpu)     __CSA##cpu##_END
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    68  #define __START(cpu)       __START##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    69  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    70  /*Wrapper macros for the tool specific definitions */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    71  #if defined(IFX_USE_SW_MANAGED_INT)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    72  #define __INTTAB(cpu)      ((unsigned int)__INTTAB_CPU##cpu | (unsigned int)0x1FE0)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    73  #else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    74  #define __INTTAB(cpu)      __INTTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    75  #endif /*defined(IFX_USE_SW_MANAGED_INT) */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    76  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    77  #define __TRAPTAB(cpu)     __TRAPTAB_CPU##cpu
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    78  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    79  #define __SDATA1(cpu)      _SMALL_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    80  #define __SDATA2(cpu)      _LITERAL_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    81  #define __SDATA3(cpu)      _A8_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    82  #define __SDATA4(cpu)      _A9_DATA_
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    83  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    84  #endif /*IFX_CFG_USE_COMPILER_DEFAULT_LINKER*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    85  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    86  #ifdef __cplusplus
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    87  #define IFX_SSW_INLINE   static inline
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    88  #else
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    89  #define IFX_SSW_INLINE   inline
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    90  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    91  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    92  #define IFX_SSW_NULL_PTR ((void *)0x0U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    93  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    94  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    95  /*----------------------------   GNU Intrinsics  -----------------------------*/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    96  /******************************************************************************/
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    97  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    98  #define Ifx_Ssw_MTCR(reg, val) __mtcr(reg, val);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	    99  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   100  #define Ifx_Ssw_MFCR(reg)      __mfcr(reg);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   101  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   102  IFX_SSW_INLINE void Ifx_Ssw_NOP(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   103  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   104      __nop();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   105  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   106  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   107  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   108  IFX_SSW_INLINE void Ifx_Ssw_DSYNC(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   109  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   110      __dsync();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   111  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   112  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   113  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   114  IFX_SSW_INLINE void Ifx_Ssw_ISYNC(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   115  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   116      __isync();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   117  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   118  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   119  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   120  IFX_SSW_INLINE unsigned int Ifx_Ssw_MINU(unsigned int a, unsigned int b)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   121  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   122      return __minu(a, b);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   123  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   124  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   125  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   126  #define Ifx_Ssw_CLZ(a)                     __clz(a)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   127  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   128  #define Ifx_Ssw___setAddressReg(aReg, val) \ 
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   129      {__asm(" movh.a\t "#aReg ",#@his("#val ")\n lea\t "#aReg ",["#aReg "]@los("#val ")"); }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   130  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   131  #define Ifx_Ssw_setAddressReg(regNum, val) Ifx_Ssw___setAddressReg(regNum, val)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   132  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   133  IFX_SSW_INLINE void Ifx_Ssw_moveToDataParam0(unsigned int var)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   134  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   135      __asm("mov d2, %0" ::"d" (var));
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   136  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   137  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   138  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   139  IFX_SSW_INLINE unsigned int Ifx_Ssw_getDataParam0(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   140  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   141      unsigned int var;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   142      __asm(" mov\t %0, d2" : "=d" (var));
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   143      return var;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   144  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   145  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   146  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   147  IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void *fun)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   148  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   149      __asm("ji %0" ::"a" (fun));
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   150  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   151  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   152  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   153  IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   154  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   155      __asm("jli %0" ::"a" (fun));
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   156  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   157  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   158  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   159  IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   160  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   161      __asm("ji a11");
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   162  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   163  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   164  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   165  IFX_SSW_INLINE void Ifx_Ssw_C_InitInline(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   166  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   167      extern void _c_init(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_CompilersTasking.h	   168      _c_init();                  /* initialize data */
	j	_c_init
.L220:
	
__Ifx_Ssw_C_Init_function_end:
	.size	Ifx_Ssw_C_Init,__Ifx_Ssw_C_Init_function_end-Ifx_Ssw_C_Init
.L116:
	; End of function
	
	.calls	'Ifx_Ssw_disableCpuWatchdog','Ifx_Ssw_clearCpuEndinit'
	.calls	'Ifx_Ssw_disableCpuWatchdog','Ifx_Ssw_setCpuEndinit'
	.calls	'Ifx_Ssw_enableCpuWatchdog','Ifx_Ssw_clearCpuEndinit'
	.calls	'Ifx_Ssw_enableCpuWatchdog','Ifx_Ssw_setCpuEndinit'
	.calls	'Ifx_Ssw_disableSafetyWatchdog','Ifx_Ssw_clearSafetyEndinit'
	.calls	'Ifx_Ssw_disableSafetyWatchdog','Ifx_Ssw_setSafetyEndinit'
	.calls	'Ifx_Ssw_enableSafetyWatchdog','Ifx_Ssw_clearSafetyEndinit'
	.calls	'Ifx_Ssw_enableSafetyWatchdog','Ifx_Ssw_setSafetyEndinit'
	.calls	'Ifx_Ssw_setCpu0Idle','Ifx_Ssw_getCpuWatchdogPassword'
	.calls	'Ifx_Ssw_setCpu0Idle','Ifx_Ssw_clearCpuEndinit'
	.calls	'Ifx_Ssw_setCpu0Idle','Ifx_Ssw_setCpuEndinit'
	.calls	'Ifx_Ssw_C_Init','_c_init'
	.calls	'Ifx_Ssw_getCpuWatchdogPassword','',0
	.calls	'Ifx_Ssw_getSafetyWatchdogPassword','',0
	.calls	'Ifx_Ssw_clearCpuEndinit','',0
	.calls	'Ifx_Ssw_setCpuEndinit','',0
	.calls	'Ifx_Ssw_clearSafetyEndinit','',0
	.calls	'Ifx_Ssw_setSafetyEndinit','',0
	.calls	'Ifx_Ssw_serviceCpuWatchdog','',0
	.calls	'Ifx_Ssw_serviceSafetyWatchdog','',0
	.calls	'Ifx_Ssw_disableCpuWatchdog','',0
	.calls	'Ifx_Ssw_enableCpuWatchdog','',0
	.calls	'Ifx_Ssw_disableSafetyWatchdog','',0
	.calls	'Ifx_Ssw_enableSafetyWatchdog','',0
	.calls	'Ifx_Ssw_startCore','',0
	.calls	'Ifx_Ssw_setCpu0Idle','',0
	.calls	'Ifx_Ssw_getStmFrequency','',0
	.extern	_c_init
	.calls	'Ifx_Ssw_C_Init','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L49:
	.word	59928
	.half	3
	.word	.L50
	.byte	4
.L48:
	.byte	1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L51
	.byte	2
	.byte	'Ifx_Ssw_DSYNC',0,3,1,108,21,1,1,3,0
.L186:
	.byte	4
	.byte	'unsigned int',0,4,7
.L188:
	.byte	5
	.byte	'Ifx_Ssw_MINU',0,3,1,120,29
	.word	199
	.byte	1,1
.L191:
	.byte	6
	.byte	'a',0,1,120,55
	.word	199
.L193:
	.byte	6
	.byte	'b',0,1,120,71
	.word	199
.L195:
	.byte	3,0
.L221:
	.byte	2
	.byte	'Ifx_Ssw_C_InitInline',0,3,1,165,1,21,1,1
.L222:
	.byte	3,0
.L132:
	.byte	4
	.byte	'unsigned short int',0,2,7,4
	.byte	'int',0,4,5,4
	.byte	'unsigned int',0,4,7,7
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,3,240,9,16,4,8
	.byte	'ENDINIT',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'LCK',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'PW',0,4
	.word	321
	.byte	14,16,2,35,0,8
	.byte	'REL',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,3,191,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	337
	.byte	4,2,35,0,0,4
	.byte	'unsigned char',0,1,8,7
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,3,249,9,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IR0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DR',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IR1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'UR',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'PAR',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'TCR',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'TCTR',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,9,3,199,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	490
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,3,137,10,16,4,8
	.byte	'AE',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'OE',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IS0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DS',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'TO',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IS1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'US',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'PAS',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'TCS',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'TCT',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'TIM',0,2
	.word	292
	.byte	16,0,2,35,2,0,9,3,207,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	756
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_SCU_WDTCPU',0,3,138,17,25,12,10
	.byte	'CON0',0
	.word	433
	.byte	4,2,35,0,10
	.byte	'CON1',0
	.word	716
	.byte	4,2,35,4,10
	.byte	'SR',0
	.word	947
	.byte	4,2,35,8,0,11
	.word	987
.L134:
	.byte	12
	.word	1050
.L136:
	.byte	5
	.byte	'Ifx_Ssw_getCpuWatchdogPasswordInline',0,3,2,184,2,31
	.word	292
	.byte	1,1
.L138:
	.byte	6
	.byte	'watchdog',0,2,184,2,84
	.word	1055
.L140:
	.byte	3,0
.L143:
	.byte	5
	.byte	'Ifx_Ssw_getSafetyWatchdogPasswordInline',0,3,2,198,2,31
	.word	292
	.byte	1,1
.L145:
	.byte	3,0
.L152:
	.byte	2
	.byte	'Ifx_Ssw_clearCpuEndinitInline',0,3,2,213,2,21,1,1
.L154:
	.byte	6
	.byte	'watchdog',0,2,213,2,67
	.word	1055
.L156:
	.byte	6
	.byte	'password',0,2,213,2,92
	.word	292
.L158:
	.byte	3,0
.L171:
	.byte	2
	.byte	'Ifx_Ssw_clearSafetyEndinitInline',0,3,2,235,2,21,1,1
.L173:
	.byte	6
	.byte	'password',0,2,235,2,69
	.word	292
.L175:
	.byte	3,0
.L162:
	.byte	2
	.byte	'Ifx_Ssw_setCpuEndinitInline',0,3,2,129,3,21,1,1
.L164:
	.byte	6
	.byte	'watchdog',0,2,129,3,65
	.word	1055
.L166:
	.byte	6
	.byte	'password',0,2,129,3,90
	.word	292
.L168:
	.byte	3,0
.L178:
	.byte	2
	.byte	'Ifx_Ssw_setSafetyEndinitInline',0,3,2,151,3,21,1,1
.L180:
	.byte	6
	.byte	'password',0,2,151,3,67
	.word	292
.L182:
	.byte	3,0,13
	.byte	'__minu',0
	.word	199
	.byte	1,1,1,1,14
	.word	199
	.byte	14
	.word	199
	.byte	0,11
	.word	314
	.byte	13
	.byte	'__mfcr',0
	.word	1480
	.byte	1,1,1,1,14
	.word	314
	.byte	0,15
	.word	176
	.byte	3,0,15
	.word	215
	.byte	16
	.word	239
	.byte	16
	.word	249
	.byte	3,0,15
	.word	261
	.byte	3,0,7
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,3,153,10,16,4,8
	.byte	'ENDINIT',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'LCK',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'PW',0,4
	.word	321
	.byte	14,16,2,35,0,8
	.byte	'REL',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,3,215,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1538
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,3,162,10,16,4,8
	.byte	'CLRIRF',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IR0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DR',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IR1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'UR',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'PAR',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'TCR',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'TCTR',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,9,3,223,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1672
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,3,178,10,16,4,8
	.byte	'AE',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'OE',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IS0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DS',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'TO',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IS1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'US',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'PAS',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'TCS',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'TCT',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'TIM',0,2
	.word	292
	.byte	16,0,2,35,2,0,9,3,231,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	1932
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_SCU_WDTS',0,3,158,17,25,12,10
	.byte	'CON0',0
	.word	1632
	.byte	4,2,35,0,10
	.byte	'CON1',0
	.word	1892
	.byte	4,2,35,4,10
	.byte	'SR',0
	.word	2121
	.byte	4,2,35,8,0,11
	.word	2161
.L147:
	.byte	12
	.word	2222
	.byte	17,128,34
	.word	473
	.byte	18,255,33,0,7
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,4,146,4,16,4,8
	.byte	'TAG1',0,4
	.word	321
	.byte	6,26,2,35,0,8
	.byte	'reserved_6',0,4
	.word	321
	.byte	2,24,2,35,0,8
	.byte	'TAG2',0,4
	.word	321
	.byte	6,18,2,35,0,8
	.byte	'reserved_14',0,4
	.word	321
	.byte	2,16,2,35,0,8
	.byte	'TAG3',0,4
	.word	321
	.byte	6,10,2,35,0,8
	.byte	'reserved_22',0,4
	.word	321
	.byte	2,8,2,35,0,8
	.byte	'TAG4',0,4
	.word	321
	.byte	6,2,2,35,0,8
	.byte	'reserved_30',0,4
	.word	321
	.byte	2,0,2,35,0,0,9,4,238,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2243
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,4,159,4,16,4,8
	.byte	'STALL',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'reserved_1',0,4
	.word	321
	.byte	15,16,2,35,0,8
	.byte	'MASKUECC',0,4
	.word	321
	.byte	2,14,2,35,0,8
	.byte	'reserved_18',0,4
	.word	321
	.byte	6,8,2,35,0,8
	.byte	'reserved_24',0,4
	.word	321
	.byte	2,6,2,35,0,8
	.byte	'reserved_26',0,4
	.word	321
	.byte	6,0,2,35,0,0,9,4,246,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2469
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,4,170,4,16,4,8
	.byte	'RECDIS',0,4
	.word	321
	.byte	2,30,2,35,0,8
	.byte	'ECCCORDIS',0,4
	.word	321
	.byte	2,28,2,35,0,8
	.byte	'reserved_4',0,4
	.word	321
	.byte	4,24,2,35,0,8
	.byte	'HMARGIN',0,4
	.word	321
	.byte	2,22,2,35,0,8
	.byte	'MSEL',0,4
	.word	321
	.byte	2,20,2,35,0,8
	.byte	'reserved_12',0,4
	.word	321
	.byte	4,16,2,35,0,8
	.byte	'ECCSCLR',0,4
	.word	321
	.byte	2,14,2,35,0,8
	.byte	'reserved_18',0,4
	.word	321
	.byte	6,8,2,35,0,8
	.byte	'SBABCLR',0,4
	.word	321
	.byte	2,6,2,35,0,8
	.byte	'DBABCLR',0,4
	.word	321
	.byte	2,4,2,35,0,8
	.byte	'MBABCLR',0,4
	.word	321
	.byte	2,2,2,35,0,8
	.byte	'ZBABCLR',0,4
	.word	321
	.byte	2,0,2,35,0,0,9,4,254,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2668
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,4,187,4,16,4,8
	.byte	'ECCERRINJ',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EDCERRINJ',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'SBABERRINJ',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'DBABERRINJ',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'MBABERRINJ',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'ZBABERRINJ',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'SBERERRINJ',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'DBERERRINJ',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'NVMCERRINJ',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'FLCONERRINJ',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'reserved_10',0,4
	.word	321
	.byte	22,0,2,35,0,0,9,4,134,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	2976
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,4,203,4,16,4,8
	.byte	'DDIS',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'reserved_1',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,142,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3289
	.byte	4,2,35,0,0,17,236,253,2
	.word	473
	.byte	18,235,253,2,0,7
	.byte	'_Ifx_CPU_KRST0_Bits',0,4,161,5,16,4,8
	.byte	'RST',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'RSTSTAT',0,4
	.word	321
	.byte	2,29,2,35,0,8
	.byte	'reserved_3',0,4
	.word	321
	.byte	29,0,2,35,0,0,9,4,222,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3411
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_KRST1_Bits',0,4,169,5,16,4,8
	.byte	'RST',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'reserved_1',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,230,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3534
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,4,176,5,16,4,8
	.byte	'CLR',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'reserved_1',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,238,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3638
	.byte	4,2,35,0,0,17,244,31
	.word	473
	.byte	18,243,31,0,7
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,4,224,7,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'ADDR',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,158,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3755
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,4,231,7,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'ADDR',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,166,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3861
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,4,150,7,16,4,8
	.byte	'EN0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN8',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN9',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN10',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN11',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN12',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN16',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN17',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN18',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN19',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN20',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN21',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN22',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN23',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN24',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN25',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN26',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN27',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN28',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN29',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN30',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,142,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	3967
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,4,187,7,16,4,8
	.byte	'EN32',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN33',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN34',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN35',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN36',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN37',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN38',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN39',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN40',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN41',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN42',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN43',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN44',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN45',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN46',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN47',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN48',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN49',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN50',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN51',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN52',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN53',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN54',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN55',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN56',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN57',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN58',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN59',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN60',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN61',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN62',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN63',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,150,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	4541
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_RGN',0,4,223,16,25,16,10
	.byte	'LA',0
	.word	3821
	.byte	4,2,35,0,10
	.byte	'UA',0
	.word	3927
	.byte	4,2,35,4,10
	.byte	'ACCENA',0
	.word	4501
	.byte	4,2,35,8,10
	.byte	'ACCENB',0
	.word	5085
	.byte	4,2,35,12,0,17,128,1
	.word	5125
	.byte	18,7,0,11
	.word	5201
	.byte	17,8
	.word	473
	.byte	18,7,0,7
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,4,201,8,16,4,8
	.byte	'EN0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN8',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN9',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN10',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN11',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN12',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN16',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN17',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN18',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN19',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN20',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN21',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN22',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN23',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN24',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN25',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN26',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN27',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN28',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN29',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN30',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,206,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5225
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,4,238,8,16,4,8
	.byte	'EN32',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN33',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN34',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN35',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN36',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN37',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN38',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN39',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN40',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN41',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN42',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN43',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN44',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN45',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN46',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN47',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN48',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN49',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN50',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN51',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN52',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN53',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN54',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN55',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN56',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN57',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN58',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN59',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN60',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN61',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN62',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN63',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,214,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	5810
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,4,247,7,16,4,8
	.byte	'EN0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN8',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN9',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN10',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN11',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN12',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN16',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN17',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN18',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN19',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN20',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN21',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN22',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN23',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN24',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN25',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN26',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN27',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN28',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN29',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN30',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,182,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	6405
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,4,156,8,16,4,8
	.byte	'EN32',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN33',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN34',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN35',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN36',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN37',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN38',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN39',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN40',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN41',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN42',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN43',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN44',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN45',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN46',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN47',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN48',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN49',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN50',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN51',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN52',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN53',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN54',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN55',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN56',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN57',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN58',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN59',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN60',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN61',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN62',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN63',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,190,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	6987
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,4,191,5,16,4,8
	.byte	'EN0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN8',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN9',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN10',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN11',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN12',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN16',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN17',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN18',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN19',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN20',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN21',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN22',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN23',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN24',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN25',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN26',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN27',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN28',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN29',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN30',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,254,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	7579
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,4,228,5,16,4,8
	.byte	'EN32',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN33',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN34',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN35',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN36',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN37',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN38',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN39',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN40',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN41',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN42',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN43',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN44',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN45',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN46',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN47',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN48',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN49',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN50',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN51',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN52',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN53',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN54',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN55',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN56',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN57',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN58',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN59',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN60',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN61',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN62',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN63',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,134,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	8161
	.byte	4,2,35,0,0,17,232,1
	.word	473
	.byte	18,231,1,0,7
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,4,184,3,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'ADDR',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,158,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	8764
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,4,191,3,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'ADDR',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,166,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	8880
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,4,201,2,16,4,8
	.byte	'EN0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN8',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN9',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN10',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN11',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN12',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN16',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN17',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN18',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN19',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN20',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN21',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN22',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN23',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN24',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN25',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN26',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN27',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN28',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN29',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN30',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,134,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	8996
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,4,147,3,16,4,8
	.byte	'EN32',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN33',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN34',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN35',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN36',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN37',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN38',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN39',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN40',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN41',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN42',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN43',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN44',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN45',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN46',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN47',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN48',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN49',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN50',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN51',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN52',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN53',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN54',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN55',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN56',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN57',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN58',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN59',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN60',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN61',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN62',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN63',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,150,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	9582
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,4,164,2,16,4,8
	.byte	'EN0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN8',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN9',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN10',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN11',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN12',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN16',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN17',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN18',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN19',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN20',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN21',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN22',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN23',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN24',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN25',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN26',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN27',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN28',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN29',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN30',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,254,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	10178
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,4,238,2,16,4,8
	.byte	'EN32',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'EN33',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EN34',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'EN35',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'EN36',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'EN37',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'EN38',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'EN39',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EN40',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'EN41',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'EN42',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'EN43',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'EN44',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'EN45',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'EN46',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'EN47',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'EN48',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'EN49',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'EN50',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'EN51',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'EN52',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'EN53',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'EN54',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'EN55',0,4
	.word	321
	.byte	1,8,2,35,0,8
	.byte	'EN56',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'EN57',0,4
	.word	321
	.byte	1,6,2,35,0,8
	.byte	'EN58',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'EN59',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'EN60',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'EN61',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'EN62',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'EN63',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,142,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	10764
	.byte	4,2,35,0,0,17,128,48
	.word	473
	.byte	18,255,47,0,7
	.byte	'_Ifx_CPU_OSEL_Bits',0,4,158,6,16,4,8
	.byte	'SHOVEN_X',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,166,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	11371
	.byte	4,2,35,0,0,17,12
	.word	473
	.byte	18,11,0,7
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,4,100,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'OBASE',0,4
	.word	321
	.byte	17,10,2,35,0,8
	.byte	'reserved_22',0,4
	.word	321
	.byte	2,8,2,35,0,8
	.byte	'OMEM',0,4
	.word	321
	.byte	4,4,2,35,0,8
	.byte	'reserved_28',0,4
	.word	321
	.byte	3,1,2,35,0,8
	.byte	'OVEN',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,206,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	11466
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,4,92,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'TBASE',0,4
	.word	321
	.byte	23,4,2,35,0,8
	.byte	'reserved_28',0,4
	.word	321
	.byte	4,0,2,35,0,0,9,4,198,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	11652
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,4,83,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'OMASK',0,4
	.word	321
	.byte	12,15,2,35,0,8
	.byte	'ONE',0,4
	.word	321
	.byte	11,4,2,35,0,8
	.byte	'reserved_28',0,4
	.word	321
	.byte	4,0,2,35,0,0,9,4,190,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	11783
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_BLK',0,4,244,16,25,12,10
	.byte	'RABR',0
	.word	11612
	.byte	4,2,35,0,10
	.byte	'OTAR',0
	.word	11743
	.byte	4,2,35,4,10
	.byte	'OMASK',0
	.word	11890
	.byte	4,2,35,8,0,17,128,3
	.word	11930
	.byte	18,31,0,11
	.word	11993
	.byte	17,160,39
	.word	473
	.byte	18,159,39,0,7
	.byte	'_Ifx_CPU_SEGEN_Bits',0,4,238,7,16,4,8
	.byte	'ADFLIP',0,4
	.word	321
	.byte	8,24,2,35,0,8
	.byte	'ADTYPE',0,4
	.word	321
	.byte	2,22,2,35,0,8
	.byte	'reserved_10',0,4
	.word	321
	.byte	21,1,2,35,0,8
	.byte	'AE',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,174,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12019
	.byte	4,2,35,0,0,17,208,223,1
	.word	473
	.byte	18,207,223,1,0,7
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,4,176,9,16,4,8
	.byte	'ASI',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'reserved_5',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,238,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12172
	.byte	4,2,35,0,0,17,248,1
	.word	473
	.byte	18,247,1,0,7
	.byte	'_Ifx_CPU_PMA0_Bits',0,4,229,6,16,4,8
	.byte	'DAC',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'reserved_16',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,230,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12290
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PMA1_Bits',0,4,236,6,16,4,8
	.byte	'CAC',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'reserved_16',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,238,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12394
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PMA2_Bits',0,4,243,6,16,4,8
	.byte	'PSI',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'reserved_16',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,246,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12498
	.byte	4,2,35,0,0,17,244,29
	.word	473
	.byte	18,243,29,0,7
	.byte	'_Ifx_CPU_DCON2_Bits',0,4,248,1,16,4,8
	.byte	'DCACHE_SZE',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'DSCRATCH_SZE',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,214,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12613
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_SMACON_Bits',0,4,193,8,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	24,8,2,35,0,8
	.byte	'IODT',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'reserved_25',0,4
	.word	321
	.byte	7,0,2,35,0,0,9,4,198,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12726
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DSTR_Bits',0,4,233,3,16,4,8
	.byte	'SRE',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'GAE',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'LBE',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'DRE',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'reserved_4',0,4
	.word	321
	.byte	2,26,2,35,0,8
	.byte	'CRE',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'reserved_7',0,4
	.word	321
	.byte	7,18,2,35,0,8
	.byte	'DTME',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'LOE',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'SDE',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'SCE',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'CAC',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'MPE',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'CLE',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'reserved_21',0,4
	.word	321
	.byte	3,8,2,35,0,8
	.byte	'ALN',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'reserved_25',0,4
	.word	321
	.byte	7,0,2,35,0,0,9,4,214,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	12855
	.byte	4,2,35,0,0,17,4
	.word	473
	.byte	18,3,0,7
	.byte	'_Ifx_CPU_DATR_Bits',0,4,205,1,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'SBE',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'reserved_4',0,4
	.word	321
	.byte	5,23,2,35,0,8
	.byte	'CWE',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'CFE',0,4
	.word	321
	.byte	1,21,2,35,0,8
	.byte	'reserved_11',0,4
	.word	321
	.byte	3,18,2,35,0,8
	.byte	'SOE',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'reserved_15',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'reserved_16',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,182,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	13216
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DEADD_Bits',0,4,134,2,16,4,8
	.byte	'ERROR_ADDRESS',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,230,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	13455
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DIEAR_Bits',0,4,140,2,16,4,8
	.byte	'TA',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,238,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	13547
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DIETR_Bits',0,4,146,2,16,4,8
	.byte	'IED',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'IE_T',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'IE_C',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'IE_S',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'IE_BI',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'E_INFO',0,4
	.word	321
	.byte	6,21,2,35,0,8
	.byte	'IE_UNC',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'IE_SP',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'IE_BS',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'IE_DLMU',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'IE_LPB',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'IE_MTMV',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'reserved_17',0,4
	.word	321
	.byte	15,0,2,35,0,0,9,4,246,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	13628
	.byte	4,2,35,0,0,17,24
	.word	473
	.byte	18,23,0,7
	.byte	'_Ifx_CPU_DCON0_Bits',0,4,240,1,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'DCBYP',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'reserved_2',0,4
	.word	321
	.byte	30,0,2,35,0,0,9,4,206,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	13933
	.byte	4,2,35,0,0,17,188,3
	.word	473
	.byte	18,187,3,0,7
	.byte	'_Ifx_CPU_PSTR_Bits',0,4,250,6,16,4,8
	.byte	'FRE',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'reserved_1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'FBE',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'reserved_3',0,4
	.word	321
	.byte	9,20,2,35,0,8
	.byte	'FPE',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'reserved_13',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'FME',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'reserved_15',0,4
	.word	321
	.byte	17,0,2,35,0,0,9,4,254,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	14072
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PCON1_Bits',0,4,179,6,16,4,8
	.byte	'PCINV',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'PBINV',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'reserved_2',0,4
	.word	321
	.byte	30,0,2,35,0,0,9,4,190,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	14288
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PCON2_Bits',0,4,187,6,16,4,8
	.byte	'PCACHE_SZE',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'PSCRATCH_SZE',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,198,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	14411
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PCON0_Bits',0,4,171,6,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'PCBYP',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'reserved_2',0,4
	.word	321
	.byte	30,0,2,35,0,0,9,4,182,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	14524
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PIEAR_Bits',0,4,205,6,16,4,8
	.byte	'TA',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,214,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	14652
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PIETR_Bits',0,4,211,6,16,4,8
	.byte	'IED',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'IE_T',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'IE_C',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'IE_S',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'IE_BI',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'E_INFO',0,4
	.word	321
	.byte	6,21,2,35,0,8
	.byte	'IE_UNC',0,4
	.word	321
	.byte	1,20,2,35,0,8
	.byte	'IE_SP',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'IE_BS',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'IE_ADDR',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'IE_LPB',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'IE_MTMV',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'reserved_17',0,4
	.word	321
	.byte	15,0,2,35,0,0,9,4,222,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	14733
	.byte	4,2,35,0,0,17,232,3
	.word	473
	.byte	18,231,3,0,7
	.byte	'_Ifx_CPU_COMPAT_Bits',0,4,136,1,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'RM',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'SP',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'reserved_5',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,238,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15040
	.byte	4,2,35,0,0,17,252,23
	.word	473
	.byte	18,251,23,0,7
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,4,210,4,16,4,8
	.byte	'TST',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'TCL',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'reserved_2',0,4
	.word	321
	.byte	6,24,2,35,0,8
	.byte	'RM',0,4
	.word	321
	.byte	2,22,2,35,0,8
	.byte	'reserved_10',0,4
	.word	321
	.byte	8,14,2,35,0,8
	.byte	'FXE',0,4
	.word	321
	.byte	1,13,2,35,0,8
	.byte	'FUE',0,4
	.word	321
	.byte	1,12,2,35,0,8
	.byte	'FZE',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'FVE',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'FIE',0,4
	.word	321
	.byte	1,9,2,35,0,8
	.byte	'reserved_23',0,4
	.word	321
	.byte	3,6,2,35,0,8
	.byte	'FX',0,4
	.word	321
	.byte	1,5,2,35,0,8
	.byte	'FU',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'FZ',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'FV',0,4
	.word	321
	.byte	1,2,2,35,0,8
	.byte	'FI',0,4
	.word	321
	.byte	1,1,2,35,0,8
	.byte	'reserved_31',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,150,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15191
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,4,242,4,16,4,8
	.byte	'PC',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,166,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15545
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,4,232,4,16,4,8
	.byte	'OPC',0,4
	.word	321
	.byte	8,24,2,35,0,8
	.byte	'FMT',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'reserved_9',0,4
	.word	321
	.byte	7,16,2,35,0,8
	.byte	'DREG',0,4
	.word	321
	.byte	4,12,2,35,0,8
	.byte	'reserved_20',0,4
	.word	321
	.byte	12,0,2,35,0,0,9,4,158,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15632
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,4,248,4,16,4,8
	.byte	'SRC1',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,174,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15797
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,4,254,4,16,4,8
	.byte	'SRC2',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,182,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15888
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,4,132,5,16,4,8
	.byte	'SRC3',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,190,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	15979
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FPU_TRAP',0,4,136,17,25,28,10
	.byte	'CON',0
	.word	15505
	.byte	4,2,35,0,10
	.byte	'PC',0
	.word	15592
	.byte	4,2,35,4,10
	.byte	'OPC',0
	.word	15757
	.byte	4,2,35,8,10
	.byte	'reserved_C',0
	.word	13207
	.byte	4,2,35,12,10
	.byte	'SRC1',0
	.word	15848
	.byte	4,2,35,16,10
	.byte	'SRC2',0
	.word	15939
	.byte	4,2,35,20,10
	.byte	'SRC3',0
	.word	16030
	.byte	4,2,35,24,0,11
	.word	16070
	.byte	17,228,63
	.word	473
	.byte	18,227,63,0,7
	.byte	'_Ifx_CPU_DPR_L_Bits',0,4,212,3,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'LOWBND',0,4
	.word	321
	.byte	29,0,2,35,0,0,9,4,190,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16211
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DPR_U_Bits',0,4,219,3,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'UPPBND',0,4
	.word	321
	.byte	29,0,2,35,0,0,9,4,198,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16318
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DPR',0,4,160,17,25,8,10
	.byte	'L',0
	.word	16278
	.byte	4,2,35,0,10
	.byte	'U',0
	.word	16385
	.byte	4,2,35,4,0,17,144,1
	.word	16425
	.byte	18,17,0,11
	.word	16467
	.byte	17,240,30
	.word	473
	.byte	18,239,30,0,7
	.byte	'_Ifx_CPU_CPR_L_Bits',0,4,152,1,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'LOWBND',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,254,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16493
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CPR_U_Bits',0,4,159,1,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	5,27,2,35,0,8
	.byte	'UPPBND',0,4
	.word	321
	.byte	27,0,2,35,0,0,9,4,134,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16600
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CPR',0,4,179,17,25,8,10
	.byte	'L',0
	.word	16560
	.byte	4,2,35,0,10
	.byte	'U',0
	.word	16667
	.byte	4,2,35,4,0,17,80
	.word	16707
	.byte	18,9,0,11
	.word	16749
	.byte	17,176,31
	.word	473
	.byte	18,175,31,0,7
	.byte	'_Ifx_CPU_CPXE_Bits',0,4,174,1,16,4,8
	.byte	'XE_N',0,4
	.word	321
	.byte	10,22,2,35,0,8
	.byte	'reserved_10',0,4
	.word	321
	.byte	22,0,2,35,0,0,9,4,150,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16774
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DPRE_Bits',0,4,205,3,16,4,8
	.byte	'RE_N',0,4
	.word	321
	.byte	18,14,2,35,0,8
	.byte	'reserved_18',0,4
	.word	321
	.byte	14,0,2,35,0,0,9,4,182,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16879
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DPWE_Bits',0,4,226,3,16,4,8
	.byte	'WE_N',0,4
	.word	321
	.byte	18,14,2,35,0,8
	.byte	'reserved_18',0,4
	.word	321
	.byte	14,0,2,35,0,0,9,4,206,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	16984
	.byte	4,2,35,0,0,17,16
	.word	473
	.byte	18,15,0,17,152,7
	.word	473
	.byte	18,151,7,0,7
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,4,183,9,16,4,8
	.byte	'TEXP0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'TEXP1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'TEXP2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'reserved_3',0,4
	.word	321
	.byte	13,16,2,35,0,8
	.byte	'TTRAP',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'reserved_17',0,4
	.word	321
	.byte	15,0,2,35,0,0,9,4,246,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17109
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,4,251,9,16,4,8
	.byte	'TIMER',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,182,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17291
	.byte	4,2,35,0,0,17,12
	.word	17339
	.byte	18,2,0,7
	.byte	'_Ifx_CPU_TPS',0,4,198,17,25,16,10
	.byte	'CON',0
	.word	17251
	.byte	4,2,35,0,10
	.byte	'TIMER',0
	.word	17379
	.byte	12,2,35,4,0,11
	.word	17388
	.byte	17,48
	.word	473
	.byte	18,47,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,4,208,9,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	4,28,2,35,0,8
	.byte	'ENTRY_LVAL',0,4
	.word	321
	.byte	8,20,2,35,0,8
	.byte	'reserved_12',0,4
	.word	321
	.byte	20,0,2,35,0,0,9,4,142,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17450
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,4,201,9,16,4,8
	.byte	'ENTRY_CVAL',0,4
	.word	321
	.byte	12,20,2,35,0,8
	.byte	'reserved_12',0,4
	.word	321
	.byte	20,0,2,35,0,0,9,4,134,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17599
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,4,223,9,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	4,28,2,35,0,8
	.byte	'EXIT_LVAL',0,4
	.word	321
	.byte	20,8,2,35,0,8
	.byte	'reserved_24',0,4
	.word	321
	.byte	8,0,2,35,0,0,9,4,158,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17726
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,4,216,9,16,4,8
	.byte	'EXIT_CVAL',0,4
	.word	321
	.byte	24,8,2,35,0,8
	.byte	'reserved_24',0,4
	.word	321
	.byte	8,0,2,35,0,0,9,4,150,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17873
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,4,194,9,16,4,8
	.byte	'EXTIM_CLASS_EN',0,4
	.word	321
	.byte	8,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	24,0,2,35,0,0,9,4,254,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	17998
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,4,238,9,16,4,8
	.byte	'EXIT_TIN',0,4
	.word	321
	.byte	8,24,2,35,0,8
	.byte	'EXIT_CLASS',0,4
	.word	321
	.byte	3,21,2,35,0,8
	.byte	'reserved_11',0,4
	.word	321
	.byte	4,17,2,35,0,8
	.byte	'EXIT_AT',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'ENTRY_TIN',0,4
	.word	321
	.byte	8,8,2,35,0,8
	.byte	'ENTRY_CLASS',0,4
	.word	321
	.byte	3,5,2,35,0,8
	.byte	'reserved_27',0,4
	.word	321
	.byte	4,1,2,35,0,8
	.byte	'ENTRY_AT',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,174,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	18126
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,4,231,9,16,4,8
	.byte	'EXIT_FCX',0,4
	.word	321
	.byte	20,12,2,35,0,8
	.byte	'reserved_20',0,4
	.word	321
	.byte	12,0,2,35,0,0,9,4,166,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	18373
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TPS_EXTIM',0,4,217,17,25,28,10
	.byte	'ENTRY_LVAL',0
	.word	17559
	.byte	4,2,35,0,10
	.byte	'ENTRY_CVAL',0
	.word	17686
	.byte	4,2,35,4,10
	.byte	'EXIT_LVAL',0
	.word	17833
	.byte	4,2,35,8,10
	.byte	'EXIT_CVAL',0
	.word	17958
	.byte	4,2,35,12,10
	.byte	'CLASS_EN',0
	.word	18086
	.byte	4,2,35,16,10
	.byte	'STAT',0
	.word	18333
	.byte	4,2,35,20,10
	.byte	'FCX',0
	.word	18451
	.byte	4,2,35,24,0,11
	.word	18491
	.byte	17,164,23
	.word	473
	.byte	18,163,23,0,7
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,4,149,10,16,4,8
	.byte	'EVTA',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'BBM',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'BOD',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'SUSP',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'CNT',0,4
	.word	321
	.byte	2,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	4,20,2,35,0,8
	.byte	'TYP',0,4
	.word	321
	.byte	1,19,2,35,0,8
	.byte	'RNG',0,4
	.word	321
	.byte	1,18,2,35,0,8
	.byte	'reserved_14',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'ASI_EN',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'ASI',0,4
	.word	321
	.byte	5,11,2,35,0,8
	.byte	'reserved_21',0,4
	.word	321
	.byte	6,5,2,35,0,8
	.byte	'AST',0,4
	.word	321
	.byte	1,4,2,35,0,8
	.byte	'ALD',0,4
	.word	321
	.byte	1,3,2,35,0,8
	.byte	'reserved_29',0,4
	.word	321
	.byte	3,0,2,35,0,0,9,4,206,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	18656
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,4,143,10,16,4,8
	.byte	'ADDR',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,198,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	18985
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_TR',0,4,241,17,25,8,10
	.byte	'EVT',0
	.word	18945
	.byte	4,2,35,0,10
	.byte	'ADR',0
	.word	19029
	.byte	4,2,35,4,0,17,64
	.word	19069
	.byte	18,7,0,11
	.word	19114
	.byte	17,192,23
	.word	473
	.byte	18,191,23,0,7
	.byte	'_Ifx_CPU_CCTRL_Bits',0,4,125,16,4,8
	.byte	'CM',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'CE',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'M1',0,4
	.word	321
	.byte	3,27,2,35,0,8
	.byte	'M2',0,4
	.word	321
	.byte	3,24,2,35,0,8
	.byte	'M3',0,4
	.word	321
	.byte	3,21,2,35,0,8
	.byte	'reserved_11',0,4
	.word	321
	.byte	21,0,2,35,0,0,9,4,230,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19139
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CCNT_Bits',0,4,118,16,4,8
	.byte	'COUNTVALUE',0,4
	.word	321
	.byte	31,1,2,35,0,8
	.byte	'SOVF',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,222,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19298
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_ICNT_Bits',0,4,138,5,16,4,8
	.byte	'COUNTVALUE',0,4
	.word	321
	.byte	31,1,2,35,0,8
	.byte	'SOVF',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,198,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19401
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_M1CNT_Bits',0,4,137,6,16,4,8
	.byte	'COUNTVALUE',0,4
	.word	321
	.byte	31,1,2,35,0,8
	.byte	'SOVF',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,142,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19505
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_M2CNT_Bits',0,4,144,6,16,4,8
	.byte	'COUNTVALUE',0,4
	.word	321
	.byte	31,1,2,35,0,8
	.byte	'SOVF',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,150,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19610
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_M3CNT_Bits',0,4,151,6,16,4,8
	.byte	'COUNTVALUE',0,4
	.word	321
	.byte	31,1,2,35,0,8
	.byte	'SOVF',0,4
	.word	321
	.byte	1,0,2,35,0,0,9,4,158,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19715
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DBGSR_Bits',0,4,219,1,16,4,8
	.byte	'DE',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'HALT',0,4
	.word	321
	.byte	2,29,2,35,0,8
	.byte	'SIH',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'SUSP',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'reserved_5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'PREVSUSP',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'PEVT',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'EVTSRC',0,4
	.word	321
	.byte	5,19,2,35,0,8
	.byte	'reserved_13',0,4
	.word	321
	.byte	19,0,2,35,0,0,9,4,190,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	19820
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_EXEVT_Bits',0,4,255,3,16,4,8
	.byte	'EVTA',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'BBM',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'BOD',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'SUSP',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'CNT',0,4
	.word	321
	.byte	2,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	24,0,2,35,0,0,9,4,222,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20047
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CREVT_Bits',0,4,181,1,16,4,8
	.byte	'EVTA',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'BBM',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'BOD',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'SUSP',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'CNT',0,4
	.word	321
	.byte	2,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	24,0,2,35,0,0,9,4,158,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20213
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_SWEVT_Bits',0,4,147,9,16,4,8
	.byte	'EVTA',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'BBM',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'BOD',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'SUSP',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'CNT',0,4
	.word	321
	.byte	2,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	24,0,2,35,0,0,9,4,222,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20379
	.byte	4,2,35,0,0,17,28
	.word	473
	.byte	18,27,0,7
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,4,129,10,16,4,8
	.byte	'T0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'T1',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'T2',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'T3',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'T4',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'T5',0,4
	.word	321
	.byte	1,26,2,35,0,8
	.byte	'T6',0,4
	.word	321
	.byte	1,25,2,35,0,8
	.byte	'T7',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	24,0,2,35,0,0,9,4,190,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20554
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DMS_Bits',0,4,198,3,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'DMSVALUE',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,174,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20758
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DCX_Bits',0,4,255,1,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	6,26,2,35,0,8
	.byte	'DCXVALUE',0,4
	.word	321
	.byte	26,0,2,35,0,0,9,4,222,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20865
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,4,233,1,16,4,8
	.byte	'DTA',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'reserved_1',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,198,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	20972
	.byte	4,2,35,0,0,17,180,1
	.word	473
	.byte	18,179,1,0,7
	.byte	'_Ifx_CPU_PCXI_Bits',0,4,194,6,16,4,8
	.byte	'PCXO',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'PCXS',0,4
	.word	321
	.byte	4,12,2,35,0,8
	.byte	'UL',0,4
	.word	321
	.byte	1,11,2,35,0,8
	.byte	'PIE',0,4
	.word	321
	.byte	1,10,2,35,0,8
	.byte	'PCPN',0,4
	.word	321
	.byte	8,2,2,35,0,8
	.byte	'reserved_30',0,4
	.word	321
	.byte	2,0,2,35,0,0,9,4,206,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	21088
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PSW_Bits',0,4,135,7,16,4,8
	.byte	'CDC',0,4
	.word	321
	.byte	7,25,2,35,0,8
	.byte	'CDE',0,4
	.word	321
	.byte	1,24,2,35,0,8
	.byte	'GW',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'IS',0,4
	.word	321
	.byte	1,22,2,35,0,8
	.byte	'IO',0,4
	.word	321
	.byte	2,20,2,35,0,8
	.byte	'PRS',0,4
	.word	321
	.byte	2,18,2,35,0,8
	.byte	'S',0,4
	.word	321
	.byte	1,17,2,35,0,8
	.byte	'PRS2',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'reserved_16',0,4
	.word	321
	.byte	8,8,2,35,0,8
	.byte	'USB',0,4
	.word	321
	.byte	8,0,2,35,0,0,9,4,134,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	21254
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_PC_Bits',0,4,164,6,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'PC',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,174,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	21473
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_SYSCON_Bits',0,4,158,9,16,4,8
	.byte	'FCDSF',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'PROTEN',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'TPROTEN',0,4
	.word	321
	.byte	1,29,2,35,0,8
	.byte	'IS',0,4
	.word	321
	.byte	1,28,2,35,0,8
	.byte	'TS',0,4
	.word	321
	.byte	1,27,2,35,0,8
	.byte	'reserved_5',0,4
	.word	321
	.byte	3,24,2,35,0,8
	.byte	'ESDIS',0,4
	.word	321
	.byte	1,23,2,35,0,8
	.byte	'reserved_9',0,4
	.word	321
	.byte	7,16,2,35,0,8
	.byte	'U1_IED',0,4
	.word	321
	.byte	1,15,2,35,0,8
	.byte	'U1_IOS',0,4
	.word	321
	.byte	1,14,2,35,0,8
	.byte	'reserved_18',0,4
	.word	321
	.byte	6,8,2,35,0,8
	.byte	'BHALT',0,4
	.word	321
	.byte	1,7,2,35,0,8
	.byte	'reserved_25',0,4
	.word	321
	.byte	7,0,2,35,0,0
.L215:
	.byte	9,4,230,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	21573
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,4,166,1,16,4,8
	.byte	'MOD_REV',0,4
	.word	321
	.byte	8,24,2,35,0,8
	.byte	'MOD_32B',0,4
	.word	321
	.byte	8,16,2,35,0,8
	.byte	'MOD',0,4
	.word	321
	.byte	16,0,2,35,0,0,9,4,142,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	21883
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,4,145,1,16,4,8
	.byte	'CORE_ID',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'reserved_3',0,4
	.word	321
	.byte	29,0,2,35,0,0,9,4,246,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22004
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_BIV_Bits',0,4,76,16,4,8
	.byte	'VSS',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'BIV',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,182,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22114
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_BTV_Bits',0,4,111,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'BTV',0,4
	.word	321
	.byte	31,0,2,35,0,0,9,4,214,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22208
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_ISP_Bits',0,4,155,5,16,4,8
	.byte	'ISP',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,214,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22309
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_ICR_Bits',0,4,145,5,16,4,8
	.byte	'CCPN',0,4
	.word	321
	.byte	8,24,2,35,0,8
	.byte	'reserved_8',0,4
	.word	321
	.byte	7,17,2,35,0,8
	.byte	'IE',0,4
	.word	321
	.byte	1,16,2,35,0,8
	.byte	'PIPN',0,4
	.word	321
	.byte	8,8,2,35,0,8
	.byte	'reserved_24',0,4
	.word	321
	.byte	8,0,2,35,0,0,9,4,206,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22389
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_FCX_Bits',0,4,138,4,16,4,8
	.byte	'FCXO',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'FCXS',0,4
	.word	321
	.byte	4,12,2,35,0,8
	.byte	'reserved_20',0,4
	.word	321
	.byte	12,0,2,35,0,0,9,4,230,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22545
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_LCX_Bits',0,4,183,5,16,4,8
	.byte	'LCXO',0,4
	.word	321
	.byte	16,16,2,35,0,8
	.byte	'LCXS',0,4
	.word	321
	.byte	4,12,2,35,0,8
	.byte	'reserved_20',0,4
	.word	321
	.byte	12,0,2,35,0,0,9,4,246,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22665
	.byte	4,2,35,0,0,7
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,4,192,1,16,4,8
	.byte	'CID',0,4
	.word	321
	.byte	3,29,2,35,0,8
	.byte	'reserved_3',0,4
	.word	321
	.byte	29,0,2,35,0,0,9,4,166,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22785
	.byte	4,2,35,0,0,17,172,1
	.word	473
	.byte	18,171,1,0,7
	.byte	'_Ifx_CPU_D_Bits',0,4,199,1,16,4,8
	.byte	'DATA',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,174,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22901
	.byte	4,2,35,0,0,17,64
	.word	22940
	.byte	18,15,0,17,64
	.word	473
	.byte	18,63,0,7
	.byte	'_Ifx_CPU_A_Bits',0,4,70,16,4,8
	.byte	'ADDR',0,4
	.word	321
	.byte	32,0,2,35,0,0,9,4,174,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	22998
	.byte	4,2,35,0,0,17,64
	.word	23036
	.byte	18,15,0,7
	.byte	'_Ifx_CPU',0,4,132,18,25,128,128,8,10
	.byte	'reserved_0',0
	.word	2232
	.byte	128,34,2,35,0,10
	.byte	'FLASHCON0',0
	.word	2429
	.byte	4,3,35,128,34,10
	.byte	'FLASHCON1',0
	.word	2628
	.byte	4,3,35,132,34,10
	.byte	'FLASHCON2',0
	.word	2936
	.byte	4,3,35,136,34,10
	.byte	'FLASHCON3',0
	.word	3249
	.byte	4,3,35,140,34,10
	.byte	'FLASHCON4',0
	.word	3358
	.byte	4,3,35,144,34,10
	.byte	'reserved_1114',0
	.word	3398
	.byte	236,253,2,3,35,148,34,10
	.byte	'KRST0',0
	.word	3494
	.byte	4,4,35,128,160,3,10
	.byte	'KRST1',0
	.word	3598
	.byte	4,4,35,132,160,3,10
	.byte	'KRSTCLR',0
	.word	3704
	.byte	4,4,35,136,160,3,10
	.byte	'reserved_D00C',0
	.word	3744
	.byte	244,31,4,35,140,160,3,10
	.byte	'RGN',0
	.word	5211
	.byte	128,1,4,35,128,192,3,10
	.byte	'reserved_E080',0
	.word	5216
	.byte	8,4,35,128,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	5770
	.byte	4,4,35,136,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	6365
	.byte	4,4,35,140,193,3,10
	.byte	'reserved_E090',0
	.word	5216
	.byte	8,4,35,144,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	5770
	.byte	4,4,35,152,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	6365
	.byte	4,4,35,156,193,3,10
	.byte	'reserved_E0A0',0
	.word	5216
	.byte	8,4,35,160,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	5770
	.byte	4,4,35,168,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	6365
	.byte	4,4,35,172,193,3,10
	.byte	'reserved_E0B0',0
	.word	5216
	.byte	8,4,35,176,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	5770
	.byte	4,4,35,184,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	6365
	.byte	4,4,35,188,193,3,10
	.byte	'reserved_E0C0',0
	.word	5216
	.byte	8,4,35,192,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	5770
	.byte	4,4,35,200,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	6365
	.byte	4,4,35,204,193,3,10
	.byte	'reserved_E0D0',0
	.word	5216
	.byte	8,4,35,208,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	5770
	.byte	4,4,35,216,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	6365
	.byte	4,4,35,220,193,3,10
	.byte	'reserved_E0E0',0
	.word	5216
	.byte	8,4,35,224,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	5770
	.byte	4,4,35,232,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	6365
	.byte	4,4,35,236,193,3,10
	.byte	'reserved_E0F0',0
	.word	5216
	.byte	8,4,35,240,193,3,10
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	5770
	.byte	4,4,35,248,193,3,10
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	6365
	.byte	4,4,35,252,193,3,10
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	6947
	.byte	4,4,35,128,194,3,10
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	7539
	.byte	4,4,35,132,194,3,10
	.byte	'reserved_E108',0
	.word	5216
	.byte	8,4,35,136,194,3,10
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	8121
	.byte	4,4,35,144,194,3,10
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	8713
	.byte	4,4,35,148,194,3,10
	.byte	'reserved_E118',0
	.word	8753
	.byte	232,1,4,35,152,194,3,10
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	8840
	.byte	4,4,35,128,196,3,10
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	8956
	.byte	4,4,35,132,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	9542
	.byte	4,4,35,136,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	10138
	.byte	4,4,35,140,196,3,10
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	8840
	.byte	4,4,35,144,196,3,10
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	8956
	.byte	4,4,35,148,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	9542
	.byte	4,4,35,152,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	10138
	.byte	4,4,35,156,196,3,10
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	8840
	.byte	4,4,35,160,196,3,10
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	8956
	.byte	4,4,35,164,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	9542
	.byte	4,4,35,168,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	10138
	.byte	4,4,35,172,196,3,10
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	8840
	.byte	4,4,35,176,196,3,10
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	8956
	.byte	4,4,35,180,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	9542
	.byte	4,4,35,184,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	10138
	.byte	4,4,35,188,196,3,10
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	8840
	.byte	4,4,35,192,196,3,10
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	8956
	.byte	4,4,35,196,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	9542
	.byte	4,4,35,200,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	10138
	.byte	4,4,35,204,196,3,10
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	8840
	.byte	4,4,35,208,196,3,10
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	8956
	.byte	4,4,35,212,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	9542
	.byte	4,4,35,216,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	10138
	.byte	4,4,35,220,196,3,10
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	8840
	.byte	4,4,35,224,196,3,10
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	8956
	.byte	4,4,35,228,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	9542
	.byte	4,4,35,232,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	10138
	.byte	4,4,35,236,196,3,10
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	8840
	.byte	4,4,35,240,196,3,10
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	8956
	.byte	4,4,35,244,196,3,10
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	9542
	.byte	4,4,35,248,196,3,10
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	10138
	.byte	4,4,35,252,196,3,10
	.byte	'reserved_E280',0
	.word	5216
	.byte	8,4,35,128,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	10724
	.byte	4,4,35,136,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	11320
	.byte	4,4,35,140,197,3,10
	.byte	'reserved_E290',0
	.word	5216
	.byte	8,4,35,144,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	10724
	.byte	4,4,35,152,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	11320
	.byte	4,4,35,156,197,3,10
	.byte	'reserved_E2A0',0
	.word	5216
	.byte	8,4,35,160,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	10724
	.byte	4,4,35,168,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	11320
	.byte	4,4,35,172,197,3,10
	.byte	'reserved_E2B0',0
	.word	5216
	.byte	8,4,35,176,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	10724
	.byte	4,4,35,184,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	11320
	.byte	4,4,35,188,197,3,10
	.byte	'reserved_E2C0',0
	.word	5216
	.byte	8,4,35,192,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	10724
	.byte	4,4,35,200,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	11320
	.byte	4,4,35,204,197,3,10
	.byte	'reserved_E2D0',0
	.word	5216
	.byte	8,4,35,208,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	10724
	.byte	4,4,35,216,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	11320
	.byte	4,4,35,220,197,3,10
	.byte	'reserved_E2E0',0
	.word	5216
	.byte	8,4,35,224,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	10724
	.byte	4,4,35,232,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	11320
	.byte	4,4,35,236,197,3,10
	.byte	'reserved_E2F0',0
	.word	5216
	.byte	8,4,35,240,197,3,10
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	10724
	.byte	4,4,35,248,197,3,10
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	11320
	.byte	4,4,35,252,197,3,10
	.byte	'reserved_E300',0
	.word	11360
	.byte	128,48,4,35,128,198,3,10
	.byte	'OSEL',0
	.word	11417
	.byte	4,4,35,128,246,3,10
	.byte	'reserved_FB04',0
	.word	11457
	.byte	12,4,35,132,246,3,10
	.byte	'BLK',0
	.word	12003
	.byte	128,3,4,35,144,246,3,10
	.byte	'reserved_FC90',0
	.word	12008
	.byte	160,39,4,35,144,249,3,10
	.byte	'SEGEN',0
	.word	12119
	.byte	4,4,35,176,160,4,10
	.byte	'reserved_11034',0
	.word	12159
	.byte	208,223,1,4,35,180,160,4,10
	.byte	'TASK_ASI',0
	.word	12239
	.byte	4,4,35,132,128,6,10
	.byte	'reserved_18008',0
	.word	12279
	.byte	248,1,4,35,136,128,6,10
	.byte	'PMA0',0
	.word	12354
	.byte	4,4,35,128,130,6,10
	.byte	'PMA1',0
	.word	12458
	.byte	4,4,35,132,130,6,10
	.byte	'PMA2',0
	.word	12562
	.byte	4,4,35,136,130,6,10
	.byte	'reserved_1810C',0
	.word	12602
	.byte	244,29,4,35,140,130,6,10
	.byte	'DCON2',0
	.word	12686
	.byte	4,4,35,128,160,6,10
	.byte	'reserved_19004',0
	.word	5216
	.byte	8,4,35,132,160,6,10
	.byte	'SMACON',0
	.word	12815
	.byte	4,4,35,140,160,6,10
	.byte	'DSTR',0
	.word	13167
	.byte	4,4,35,144,160,6,10
	.byte	'reserved_19014',0
	.word	13207
	.byte	4,4,35,148,160,6,10
	.byte	'DATR',0
	.word	13415
	.byte	4,4,35,152,160,6,10
	.byte	'DEADD',0
	.word	13507
	.byte	4,4,35,156,160,6,10
	.byte	'DIEAR',0
	.word	13588
	.byte	4,4,35,160,160,6,10
	.byte	'DIETR',0
	.word	13884
	.byte	4,4,35,164,160,6,10
	.byte	'reserved_19028',0
	.word	13924
	.byte	24,4,35,168,160,6,10
	.byte	'DCON0',0
	.word	14021
	.byte	4,4,35,192,160,6,10
	.byte	'reserved_19044',0
	.word	14061
	.byte	188,3,4,35,196,160,6,10
	.byte	'PSTR',0
	.word	14248
	.byte	4,4,35,128,164,6,10
	.byte	'PCON1',0
	.word	14371
	.byte	4,4,35,132,164,6,10
	.byte	'PCON2',0
	.word	14484
	.byte	4,4,35,136,164,6,10
	.byte	'PCON0',0
	.word	14612
	.byte	4,4,35,140,164,6,10
	.byte	'PIEAR',0
	.word	14693
	.byte	4,4,35,144,164,6,10
	.byte	'PIETR',0
	.word	14989
	.byte	4,4,35,148,164,6,10
	.byte	'reserved_19218',0
	.word	15029
	.byte	232,3,4,35,152,164,6,10
	.byte	'COMPAT',0
	.word	15140
	.byte	4,4,35,128,168,6,10
	.byte	'reserved_19404',0
	.word	15180
	.byte	252,23,4,35,132,168,6,10
	.byte	'FPU_TRAP',0
	.word	16195
	.byte	28,4,35,128,192,6,10
	.byte	'reserved_1A01C',0
	.word	16200
	.byte	228,63,4,35,156,192,6,10
	.byte	'DPR',0
	.word	16477
	.byte	144,1,4,35,128,128,7,10
	.byte	'reserved_1C090',0
	.word	16482
	.byte	240,30,4,35,144,129,7,10
	.byte	'CPR',0
	.word	16758
	.byte	80,4,35,128,160,7,10
	.byte	'reserved_1D050',0
	.word	16763
	.byte	176,31,4,35,208,160,7,10
	.byte	'CPXE_0',0
	.word	16839
	.byte	4,4,35,128,192,7,10
	.byte	'CPXE_1',0
	.word	16839
	.byte	4,4,35,132,192,7,10
	.byte	'CPXE_2',0
	.word	16839
	.byte	4,4,35,136,192,7,10
	.byte	'CPXE_3',0
	.word	16839
	.byte	4,4,35,140,192,7,10
	.byte	'DPRE_0',0
	.word	16944
	.byte	4,4,35,144,192,7,10
	.byte	'DPRE_1',0
	.word	16944
	.byte	4,4,35,148,192,7,10
	.byte	'DPRE_2',0
	.word	16944
	.byte	4,4,35,152,192,7,10
	.byte	'DPRE_3',0
	.word	16944
	.byte	4,4,35,156,192,7,10
	.byte	'DPWE_0',0
	.word	17049
	.byte	4,4,35,160,192,7,10
	.byte	'DPWE_1',0
	.word	17049
	.byte	4,4,35,164,192,7,10
	.byte	'DPWE_2',0
	.word	17049
	.byte	4,4,35,168,192,7,10
	.byte	'DPWE_3',0
	.word	17049
	.byte	4,4,35,172,192,7,10
	.byte	'reserved_1E030',0
	.word	17089
	.byte	16,4,35,176,192,7,10
	.byte	'CPXE_4',0
	.word	16839
	.byte	4,4,35,192,192,7,10
	.byte	'CPXE_5',0
	.word	16839
	.byte	4,4,35,196,192,7,10
	.byte	'reserved_1E048',0
	.word	5216
	.byte	8,4,35,200,192,7,10
	.byte	'DPRE_4',0
	.word	16944
	.byte	4,4,35,208,192,7,10
	.byte	'DPRE_5',0
	.word	16944
	.byte	4,4,35,212,192,7,10
	.byte	'reserved_1E058',0
	.word	5216
	.byte	8,4,35,216,192,7,10
	.byte	'DPWE_4',0
	.word	17049
	.byte	4,4,35,224,192,7,10
	.byte	'DPWE_5',0
	.word	17049
	.byte	4,4,35,228,192,7,10
	.byte	'reserved_1E068',0
	.word	17098
	.byte	152,7,4,35,232,192,7,10
	.byte	'TPS',0
	.word	17436
	.byte	16,4,35,128,200,7,10
	.byte	'reserved_1E410',0
	.word	17441
	.byte	48,4,35,144,200,7,10
	.byte	'TPS_EXTIM',0
	.word	18640
	.byte	28,4,35,192,200,7,10
	.byte	'reserved_1E45C',0
	.word	18645
	.byte	164,23,4,35,220,200,7,10
	.byte	'TR',0
	.word	19123
	.byte	64,4,35,128,224,7,10
	.byte	'reserved_1F040',0
	.word	19128
	.byte	192,23,4,35,192,224,7,10
	.byte	'CCTRL',0
	.word	19258
	.byte	4,4,35,128,248,7,10
	.byte	'CCNT',0
	.word	19361
	.byte	4,4,35,132,248,7,10
	.byte	'ICNT',0
	.word	19465
	.byte	4,4,35,136,248,7,10
	.byte	'M1CNT',0
	.word	19570
	.byte	4,4,35,140,248,7,10
	.byte	'M2CNT',0
	.word	19675
	.byte	4,4,35,144,248,7,10
	.byte	'M3CNT',0
	.word	19780
	.byte	4,4,35,148,248,7,10
	.byte	'reserved_1FC18',0
	.word	8753
	.byte	232,1,4,35,152,248,7,10
	.byte	'DBGSR',0
	.word	20007
	.byte	4,4,35,128,250,7,10
	.byte	'reserved_1FD04',0
	.word	13207
	.byte	4,4,35,132,250,7,10
	.byte	'EXEVT',0
	.word	20173
	.byte	4,4,35,136,250,7,10
	.byte	'CREVT',0
	.word	20339
	.byte	4,4,35,140,250,7,10
	.byte	'SWEVT',0
	.word	20505
	.byte	4,4,35,144,250,7,10
	.byte	'reserved_1FD14',0
	.word	20545
	.byte	28,4,35,148,250,7,10
	.byte	'TRIG_ACC',0
	.word	20718
	.byte	4,4,35,176,250,7,10
	.byte	'reserved_1FD34',0
	.word	11457
	.byte	12,4,35,180,250,7,10
	.byte	'DMS',0
	.word	20825
	.byte	4,4,35,192,250,7,10
	.byte	'DCX',0
	.word	20932
	.byte	4,4,35,196,250,7,10
	.byte	'DBGTCR',0
	.word	21037
	.byte	4,4,35,200,250,7,10
	.byte	'reserved_1FD4C',0
	.word	21077
	.byte	180,1,4,35,204,250,7,10
	.byte	'PCXI',0
	.word	21214
	.byte	4,4,35,128,252,7,10
	.byte	'PSW',0
	.word	21433
	.byte	4,4,35,132,252,7,10
	.byte	'PC',0
	.word	21533
	.byte	4,4,35,136,252,7,10
	.byte	'reserved_1FE0C',0
	.word	5216
	.byte	8,4,35,140,252,7,10
	.byte	'SYSCON',0
	.word	21843
	.byte	4,4,35,148,252,7,10
	.byte	'CPU_ID',0
	.word	21964
	.byte	4,4,35,152,252,7,10
	.byte	'CORE_ID',0
	.word	22074
	.byte	4,4,35,156,252,7,10
	.byte	'BIV',0
	.word	22168
	.byte	4,4,35,160,252,7,10
	.byte	'BTV',0
	.word	22269
	.byte	4,4,35,164,252,7,10
	.byte	'ISP',0
	.word	22349
	.byte	4,4,35,168,252,7,10
	.byte	'ICR',0
	.word	22505
	.byte	4,4,35,172,252,7,10
	.byte	'reserved_1FE30',0
	.word	5216
	.byte	8,4,35,176,252,7,10
	.byte	'FCX',0
	.word	22625
	.byte	4,4,35,184,252,7,10
	.byte	'LCX',0
	.word	22745
	.byte	4,4,35,188,252,7,10
	.byte	'reserved_1FE40',0
	.word	17089
	.byte	16,4,35,192,252,7,10
	.byte	'CUS_ID',0
	.word	22850
	.byte	4,4,35,208,252,7,10
	.byte	'reserved_1FE54',0
	.word	22890
	.byte	172,1,4,35,212,252,7,10
	.byte	'D',0
	.word	22980
	.byte	64,4,35,128,254,7,10
	.byte	'reserved_1FF40',0
	.word	22989
	.byte	64,4,35,192,254,7,10
	.byte	'A',0
	.word	23076
	.byte	64,4,35,128,255,7,10
	.byte	'reserved_1FFC0',0
	.word	22989
	.byte	64,4,35,192,255,7,0,11
	.word	23085
.L211:
	.byte	12
	.word	28183
.L223:
	.byte	4
	.byte	'float',0,4,4,15
	.word	1060
	.byte	16
	.word	1109
	.byte	3,0,15
	.word	1129
	.byte	3,0,15
	.word	1183
	.byte	16
	.word	1221
	.byte	16
	.word	1239
	.byte	3,0,15
	.word	1259
	.byte	16
	.word	1300
	.byte	3,0,15
	.word	1320
	.byte	16
	.word	1356
	.byte	16
	.word	1374
	.byte	3,0,15
	.word	1394
	.byte	16
	.word	1433
	.byte	3,0,19
	.byte	'_c_init',0,1,167,1,17,1,1,1,1,20,1,12
	.word	28296
	.byte	21
	.byte	'__codeptr',0,5,1,1
	.word	28298
	.byte	21
	.byte	'Ifx_UReg_8Bit',0,6,79,24
	.word	473
	.byte	21
	.byte	'Ifx_UReg_32Bit',0,6,81,24
	.word	199
	.byte	21
	.byte	'Ifx_SReg_32Bit',0,6,84,24
	.word	314
	.byte	7
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,3,70,16,4,8
	.byte	'EN0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'EN1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'EN2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'EN3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'EN4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'EN5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'EN6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'EN7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'EN8',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'EN9',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'EN10',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'EN11',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'EN12',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'EN13',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'EN14',0,1
	.word	473
	.byte	1,1,2,35,1,8
	.byte	'EN15',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'EN16',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'EN17',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'EN18',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'EN19',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'EN20',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'EN21',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'EN22',0,1
	.word	473
	.byte	1,1,2,35,2,8
	.byte	'EN23',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'EN24',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'EN25',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'EN26',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'EN27',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'EN28',0,1
	.word	473
	.byte	1,3,2,35,3,8
	.byte	'EN29',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'EN30',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'EN31',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_ACCEN00_Bits',0,3,104,3
	.word	28389
	.byte	7
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,3,107,16,4,8
	.byte	'reserved_0',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN01_Bits',0,3,110,3
	.word	28948
	.byte	7
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,3,113,16,4,8
	.byte	'EN0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'EN1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'EN2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'EN3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'EN4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'EN5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'EN6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'EN7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'EN8',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'EN9',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'EN10',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'EN11',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'EN12',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'EN13',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'EN14',0,1
	.word	473
	.byte	1,1,2,35,1,8
	.byte	'EN15',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'EN16',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'EN17',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'EN18',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'EN19',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'EN20',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'EN21',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'EN22',0,1
	.word	473
	.byte	1,1,2,35,2,8
	.byte	'EN23',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'EN24',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'EN25',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'EN26',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'EN27',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'EN28',0,1
	.word	473
	.byte	1,3,2,35,3,8
	.byte	'EN29',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'EN30',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'EN31',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_ACCEN10_Bits',0,3,147,1,3
	.word	29027
	.byte	7
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,3,150,1,16,4,8
	.byte	'reserved_0',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN11_Bits',0,3,153,1,3
	.word	29587
	.byte	7
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,3,156,1,16,4,8
	.byte	'STM0DIS',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'STM1DIS',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'STM2DIS',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'STM3DIS',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'STM4DIS',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'STM5DIS',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	2,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	199
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,3,166,1,3
	.word	29668
	.byte	7
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,3,169,1,16,4,8
	.byte	'STMDIV',0,1
	.word	473
	.byte	4,4,2,35,0,8
	.byte	'GTMDIV',0,1
	.word	473
	.byte	4,0,2,35,0,8
	.byte	'SRIDIV',0,1
	.word	473
	.byte	4,4,2,35,1,8
	.byte	'LPDIV',0,1
	.word	473
	.byte	3,1,2,35,1,8
	.byte	'reserved_15',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'SPBDIV',0,1
	.word	473
	.byte	4,4,2,35,2,8
	.byte	'BBBDIV',0,1
	.word	473
	.byte	4,0,2,35,2,8
	.byte	'FSIDIV',0,1
	.word	473
	.byte	2,6,2,35,3,8
	.byte	'FSI2DIV',0,1
	.word	473
	.byte	2,4,2,35,3,8
	.byte	'CLKSEL',0,1
	.word	473
	.byte	2,2,2,35,3,8
	.byte	'UP',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'LCK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON0_Bits',0,3,183,1,3
	.word	29885
	.byte	7
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,3,186,1,16,4,8
	.byte	'MCANDIV',0,1
	.word	473
	.byte	4,4,2,35,0,8
	.byte	'CLKSELMCAN',0,1
	.word	473
	.byte	2,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'PLL1DIVDIS',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'I2CDIV',0,1
	.word	473
	.byte	4,4,2,35,1,8
	.byte	'reserved_12',0,1
	.word	473
	.byte	4,0,2,35,1,8
	.byte	'MSCDIV',0,1
	.word	473
	.byte	4,4,2,35,2,8
	.byte	'CLKSELMSC',0,1
	.word	473
	.byte	2,2,2,35,2,8
	.byte	'reserved_22',0,1
	.word	473
	.byte	2,0,2,35,2,8
	.byte	'QSPIDIV',0,1
	.word	473
	.byte	4,4,2,35,3,8
	.byte	'CLKSELQSPI',0,1
	.word	473
	.byte	2,2,2,35,3,8
	.byte	'reserved_30',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'LCK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON1_Bits',0,3,201,1,3
	.word	30158
	.byte	7
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,3,204,1,16,4,8
	.byte	'CPU4DIV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON10_Bits',0,3,208,1,3
	.word	30484
	.byte	7
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,3,211,1,16,4,8
	.byte	'CPU5DIV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON11_Bits',0,3,215,1,3
	.word	30586
	.byte	7
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,3,218,1,16,4,8
	.byte	'ASCLINFDIV',0,1
	.word	473
	.byte	4,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	4,0,2,35,0,8
	.byte	'ASCLINSDIV',0,1
	.word	473
	.byte	4,4,2,35,1,8
	.byte	'CLKSELASCLINS',0,1
	.word	473
	.byte	2,2,2,35,1,8
	.byte	'reserved_14',0,4
	.word	199
	.byte	10,8,2,35,0,8
	.byte	'EBUPERON',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'ERAYPERON',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'HSPDMPERON',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'reserved_27',0,1
	.word	473
	.byte	4,1,2,35,3,8
	.byte	'LCK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON2_Bits',0,3,230,1,3
	.word	30688
	.byte	7
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,3,233,1,16,4,8
	.byte	'PLL0MONEN',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PLL1MONEN',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'PLL2MONEN',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'SPBMONEN',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'BACKMONEN',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'reserved_5',0,1
	.word	473
	.byte	3,0,2,35,0,8
	.byte	'PLL0MONTST',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'PLL1MONTST',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'PLL2MONTST',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'SPBMONTST',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'BACKMONTST',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'reserved_13',0,4
	.word	199
	.byte	11,8,2,35,0,8
	.byte	'reserved_24',0,1
	.word	473
	.byte	6,2,2,35,3,8
	.byte	'UP',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'LCK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON3_Bits',0,3,250,1,3
	.word	30962
	.byte	7
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,3,253,1,16,4,8
	.byte	'LOTHR',0,2
	.word	292
	.byte	12,4,2,35,0,8
	.byte	'UPTHR',0,4
	.word	199
	.byte	12,8,2,35,0,8
	.byte	'MONEN',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'MONTST',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'reserved_26',0,1
	.word	473
	.byte	4,2,2,35,3,8
	.byte	'UP',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'LCK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON4_Bits',0,3,134,2,3
	.word	31331
	.byte	7
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,3,137,2,16,4,8
	.byte	'GETHDIV',0,1
	.word	473
	.byte	4,4,2,35,0,8
	.byte	'MCANHDIV',0,1
	.word	473
	.byte	4,0,2,35,0,8
	.byte	'ADASDIV',0,1
	.word	473
	.byte	4,4,2,35,1,8
	.byte	'reserved_12',0,4
	.word	199
	.byte	18,2,2,35,0,8
	.byte	'UP',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'LCK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CCUCON5_Bits',0,3,145,2,3
	.word	31511
	.byte	7
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,3,148,2,16,4,8
	.byte	'CPU0DIV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON6_Bits',0,3,152,2,3
	.word	31680
	.byte	7
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,3,155,2,16,4,8
	.byte	'CPU1DIV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON7_Bits',0,3,159,2,3
	.word	31780
	.byte	7
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,3,162,2,16,4,8
	.byte	'CPU2DIV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON8_Bits',0,3,166,2,3
	.word	31880
	.byte	7
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,3,169,2,16,4,8
	.byte	'CPU3DIV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON9_Bits',0,3,173,2,3
	.word	31980
	.byte	7
	.byte	'_Ifx_SCU_CHIPID_Bits',0,3,176,2,16,4,8
	.byte	'CHREV',0,1
	.word	473
	.byte	6,2,2,35,0,8
	.byte	'CHTEC',0,1
	.word	473
	.byte	2,0,2,35,0,8
	.byte	'CHPK',0,1
	.word	473
	.byte	4,4,2,35,1,8
	.byte	'CHID',0,1
	.word	473
	.byte	4,0,2,35,1,8
	.byte	'EEA',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'UCODE',0,1
	.word	473
	.byte	7,0,2,35,2,8
	.byte	'FSIZE',0,1
	.word	473
	.byte	4,4,2,35,3,8
	.byte	'VART',0,1
	.word	473
	.byte	3,1,2,35,3,8
	.byte	'SEC',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_CHIPID_Bits',0,3,187,2,3
	.word	32080
	.byte	7
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,3,190,2,16,4,8
	.byte	'LOWER',0,2
	.word	292
	.byte	12,4,2,35,0,8
	.byte	'reserved_12',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'BGPOK',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'EN',0,1
	.word	473
	.byte	1,1,2,35,1,8
	.byte	'LLU',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'UPPER',0,2
	.word	292
	.byte	12,4,2,35,2,8
	.byte	'INTEN',0,1
	.word	473
	.byte	1,3,2,35,3,8
	.byte	'reserved_29',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'INT',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'UOF',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,3,202,2,3
	.word	32283
	.byte	7
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,3,205,2,16,4,8
	.byte	'RESULT',0,2
	.word	292
	.byte	12,4,2,35,0,8
	.byte	'reserved_12',0,4
	.word	199
	.byte	20,0,2,35,0,0,21
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,3,209,2,3
	.word	32515
	.byte	7
	.byte	'_Ifx_SCU_EICON0_Bits',0,3,212,2,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'ENDINIT',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EPW',0,4
	.word	321
	.byte	14,16,2,35,0,8
	.byte	'REL',0,4
	.word	321
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_SCU_EICON0_Bits',0,3,218,2,3
	.word	32617
	.byte	7
	.byte	'_Ifx_SCU_EICON1_Bits',0,3,221,2,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IR0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DR',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IR1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_EICON1_Bits',0,3,230,2,3
	.word	32745
	.byte	7
	.byte	'_Ifx_SCU_EICR_Bits',0,3,233,2,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	4,4,2,35,0,8
	.byte	'EXIS0',0,1
	.word	473
	.byte	3,1,2,35,0,8
	.byte	'reserved_7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'FEN0',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'REN0',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'LDEN0',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'EIEN0',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'INP0',0,1
	.word	473
	.byte	3,1,2,35,1,8
	.byte	'reserved_15',0,4
	.word	199
	.byte	5,12,2,35,0,8
	.byte	'EXIS1',0,1
	.word	473
	.byte	3,1,2,35,2,8
	.byte	'reserved_23',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'FEN1',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'REN1',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'LDEN1',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'EIEN1',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'INP1',0,1
	.word	473
	.byte	3,1,2,35,3,8
	.byte	'reserved_31',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_EICR_Bits',0,3,252,2,3
	.word	32934
	.byte	7
	.byte	'_Ifx_SCU_EIFILT_Bits',0,3,255,2,16,4,8
	.byte	'FILRQ0A',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'FILRQ5A',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'FILRQ2A',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'FILRQ3A',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'FILRQ0C',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'FILRQ1C',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'FILRQ3C',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'FILRQ2C',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'FILRQ4A',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'FILRQ6A',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'FILRQ1A',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'FILRQ7A',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'FILRQ6D',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'FILRQ4D',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'FILRQ2B',0,1
	.word	473
	.byte	1,1,2,35,1,8
	.byte	'FILRQ3B',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'FILRQ7C',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'reserved_17',0,1
	.word	473
	.byte	7,0,2,35,2,8
	.byte	'FILTDIV',0,1
	.word	473
	.byte	4,4,2,35,3,8
	.byte	'DEPTH',0,1
	.word	473
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_EIFILT_Bits',0,3,149,3,3
	.word	33298
	.byte	7
	.byte	'_Ifx_SCU_EIFR_Bits',0,3,152,3,16,4,8
	.byte	'INTF0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'INTF1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'INTF2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'INTF3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'INTF4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'INTF5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'INTF6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'INTF7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	199
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_EIFR_Bits',0,3,163,3,3
	.word	33737
	.byte	7
	.byte	'_Ifx_SCU_EISR_Bits',0,3,166,3,16,4,8
	.byte	'AE',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'OE',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IS0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DS',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'TO',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IS1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	10,0,2,35,0,8
	.byte	'TIM',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_EISR_Bits',0,3,176,3,3
	.word	33948
	.byte	7
	.byte	'_Ifx_SCU_EMSR_Bits',0,3,179,3,16,4,8
	.byte	'POL',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'MODE',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'ENON',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'PSEL',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,2
	.word	292
	.byte	12,0,2,35,0,8
	.byte	'EMSF',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'SEMSF',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'reserved_18',0,2
	.word	292
	.byte	14,0,2,35,2,0,21
	.byte	'Ifx_SCU_EMSR_Bits',0,3,189,3,3
	.word	34124
	.byte	7
	.byte	'_Ifx_SCU_EMSSW_Bits',0,3,192,3,16,4,8
	.byte	'reserved_0',0,4
	.word	199
	.byte	24,8,2,35,0,8
	.byte	'EMSFM',0,1
	.word	473
	.byte	2,6,2,35,3,8
	.byte	'SEMSFM',0,1
	.word	473
	.byte	2,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	473
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_EMSSW_Bits',0,3,198,3,3
	.word	34318
	.byte	7
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,3,201,3,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	7,1,2,35,0,8
	.byte	'EDCON',0,2
	.word	292
	.byte	2,7,2,35,0,8
	.byte	'reserved_9',0,4
	.word	199
	.byte	23,0,2,35,0,0,21
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,3,206,3,3
	.word	34453
	.byte	7
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,3,209,3,16,4,8
	.byte	'ARI',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'ARC',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,4
	.word	199
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_ESROCFG_Bits',0,3,214,3,3
	.word	34589
	.byte	7
	.byte	'_Ifx_SCU_EXTCON_Bits',0,3,217,3,16,4,8
	.byte	'EN0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'SEL0',0,1
	.word	473
	.byte	4,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	10,0,2,35,0,8
	.byte	'EN1',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'NSEL',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'SEL1',0,1
	.word	473
	.byte	4,2,2,35,2,8
	.byte	'reserved_22',0,1
	.word	473
	.byte	2,0,2,35,2,8
	.byte	'DIV1',0,1
	.word	473
	.byte	8,0,2,35,3,0,21
	.byte	'Ifx_SCU_EXTCON_Bits',0,3,228,3,3
	.word	34700
	.byte	7
	.byte	'_Ifx_SCU_FDR_Bits',0,3,231,3,16,4,8
	.byte	'STEP',0,2
	.word	292
	.byte	10,6,2,35,0,8
	.byte	'reserved_10',0,1
	.word	473
	.byte	4,2,2,35,1,8
	.byte	'DM',0,1
	.word	473
	.byte	2,0,2,35,1,8
	.byte	'RESULT',0,2
	.word	292
	.byte	10,6,2,35,2,8
	.byte	'reserved_26',0,1
	.word	473
	.byte	5,1,2,35,3,8
	.byte	'DISCLK',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_FDR_Bits',0,3,239,3,3
	.word	34918
	.byte	7
	.byte	'_Ifx_SCU_FMR_Bits',0,3,242,3,16,4,8
	.byte	'FS0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'FS1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'FS2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'FS3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'FS4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'FS5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'FS6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'FS7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	473
	.byte	8,0,2,35,1,8
	.byte	'FC0',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'FC1',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'FC2',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'FC3',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'FC4',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'FC5',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'FC6',0,1
	.word	473
	.byte	1,1,2,35,2,8
	.byte	'FC7',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	473
	.byte	8,0,2,35,3,0,21
	.byte	'Ifx_SCU_FMR_Bits',0,3,134,4,3
	.word	35081
	.byte	7
	.byte	'_Ifx_SCU_ID_Bits',0,3,137,4,16,4,8
	.byte	'MODREV',0,1
	.word	473
	.byte	8,0,2,35,0,8
	.byte	'MODTYPE',0,1
	.word	473
	.byte	8,0,2,35,1,8
	.byte	'MODNUMBER',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_ID_Bits',0,3,142,4,3
	.word	35417
	.byte	7
	.byte	'_Ifx_SCU_IGCR_Bits',0,3,145,4,16,4,8
	.byte	'IPEN00',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'IPEN01',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IPEN02',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'IPEN03',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'IPEN04',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IPEN05',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'IPEN06',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'IPEN07',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	473
	.byte	5,3,2,35,1,8
	.byte	'GEEN0',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'IGP0',0,1
	.word	473
	.byte	2,0,2,35,1,8
	.byte	'IPEN10',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'IPEN11',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'IPEN12',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'IPEN13',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'IPEN14',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'IPEN15',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'IPEN16',0,1
	.word	473
	.byte	1,1,2,35,2,8
	.byte	'IPEN17',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'reserved_24',0,1
	.word	473
	.byte	5,3,2,35,3,8
	.byte	'GEEN1',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'IGP1',0,1
	.word	473
	.byte	2,0,2,35,3,0,21
	.byte	'Ifx_SCU_IGCR_Bits',0,3,169,4,3
	.word	35524
	.byte	7
	.byte	'_Ifx_SCU_IN_Bits',0,3,172,4,16,4,8
	.byte	'P0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'P1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,4
	.word	199
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_IN_Bits',0,3,177,4,3
	.word	35976
	.byte	7
	.byte	'_Ifx_SCU_IOCR_Bits',0,3,180,4,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	4,4,2,35,0,8
	.byte	'PC0',0,1
	.word	473
	.byte	4,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	473
	.byte	4,4,2,35,1,8
	.byte	'PC1',0,1
	.word	473
	.byte	4,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_IOCR_Bits',0,3,187,4,3
	.word	36075
	.byte	7
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,3,190,4,16,4,8
	.byte	'LBISTREQ',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'LBISTRES',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'PATTERNS',0,4
	.word	199
	.byte	18,12,2,35,0,8
	.byte	'reserved_20',0,2
	.word	292
	.byte	8,4,2,35,2,8
	.byte	'LBISTDONE',0,1
	.word	473
	.byte	1,3,2,35,3,8
	.byte	'reserved_29',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'LBISTERRINJ',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'LBISTREQRED',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,3,200,4,3
	.word	36225
	.byte	7
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,3,203,4,16,4,8
	.byte	'SEED',0,4
	.word	199
	.byte	19,13,2,35,0,8
	.byte	'reserved_19',0,1
	.word	473
	.byte	5,0,2,35,2,8
	.byte	'SPLITSH',0,1
	.word	473
	.byte	3,5,2,35,3,8
	.byte	'BODY',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'LBISTFREQU',0,1
	.word	473
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,3,210,4,3
	.word	36463
	.byte	7
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,3,213,4,16,4,8
	.byte	'LENGTH',0,2
	.word	292
	.byte	12,4,2,35,0,8
	.byte	'reserved_12',0,4
	.word	199
	.byte	20,0,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,3,217,4,3
	.word	36624
	.byte	7
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,3,220,4,16,4,8
	.byte	'SIGNATURE',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,3,223,4,3
	.word	36730
	.byte	7
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,3,226,4,16,4,8
	.byte	'LS2',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,2
	.word	292
	.byte	14,1,2,35,0,8
	.byte	'LSEN2',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'LS0',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'reserved_17',0,2
	.word	292
	.byte	14,1,2,35,2,8
	.byte	'LSEN0',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_LCLCON0_Bits',0,3,234,4,3
	.word	36816
	.byte	7
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,3,237,4,16,4,8
	.byte	'LS3',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,2
	.word	292
	.byte	14,1,2,35,0,8
	.byte	'LSEN3',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'LS1',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'reserved_17',0,2
	.word	292
	.byte	14,1,2,35,2,8
	.byte	'LSEN1',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_LCLCON1_Bits',0,3,245,4,3
	.word	36984
	.byte	7
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,3,248,4,16,4,8
	.byte	'LCLT0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'LCLT1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'LCLT2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'LCLT3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'LCLT4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'LCLT5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	10,0,2,35,0,8
	.byte	'PLCLT0',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'PLCLT1',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'PLCLT2',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'PLCLT3',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'PLCLT4',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'PLCLT5',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'reserved_22',0,2
	.word	292
	.byte	10,0,2,35,2,0,21
	.byte	'Ifx_SCU_LCLTEST_Bits',0,3,136,5,3
	.word	37152
	.byte	7
	.byte	'_Ifx_SCU_MANID_Bits',0,3,139,5,16,4,8
	.byte	'DEPT',0,1
	.word	473
	.byte	5,3,2,35,0,8
	.byte	'MANUF',0,2
	.word	292
	.byte	11,0,2,35,0,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_MANID_Bits',0,3,144,5,3
	.word	37466
	.byte	7
	.byte	'_Ifx_SCU_OMR_Bits',0,3,147,5,16,4,8
	.byte	'PS0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PS1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,2
	.word	292
	.byte	14,0,2,35,0,8
	.byte	'PCL0',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'PCL1',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'reserved_18',0,2
	.word	292
	.byte	14,0,2,35,2,0,21
	.byte	'Ifx_SCU_OMR_Bits',0,3,155,5,3
	.word	37577
	.byte	7
	.byte	'_Ifx_SCU_OSCCON_Bits',0,3,158,5,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PLLLV',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'OSCRES',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'GAINSEL',0,1
	.word	473
	.byte	2,3,2,35,0,8
	.byte	'MODE',0,1
	.word	473
	.byte	2,1,2,35,0,8
	.byte	'SHBY',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'PLLHV',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'HYSEN',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'HYSCTL',0,1
	.word	473
	.byte	2,4,2,35,1,8
	.byte	'AMPCTL',0,1
	.word	473
	.byte	2,2,2,35,1,8
	.byte	'reserved_14',0,1
	.word	473
	.byte	2,0,2,35,1,8
	.byte	'OSCVAL',0,1
	.word	473
	.byte	5,3,2,35,2,8
	.byte	'reserved_21',0,1
	.word	473
	.byte	2,1,2,35,2,8
	.byte	'APREN',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'CAP0EN',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'CAP1EN',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'CAP2EN',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'CAP3EN',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	473
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_OSCCON_Bits',0,3,179,5,3
	.word	37735
	.byte	7
	.byte	'_Ifx_SCU_OUT_Bits',0,3,182,5,16,4,8
	.byte	'P0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'P1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,4
	.word	199
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_OUT_Bits',0,3,187,5,3
	.word	38146
	.byte	7
	.byte	'_Ifx_SCU_OVCCON_Bits',0,3,190,5,16,4,8
	.byte	'CSEL0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'CSEL1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'CSEL2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'CSEL3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'CSEL4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'CSEL5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	10,0,2,35,0,8
	.byte	'OVSTRT',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'OVSTP',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'DCINVAL',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'reserved_19',0,1
	.word	473
	.byte	5,0,2,35,2,8
	.byte	'OVCONF',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'POVCONF',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'reserved_26',0,1
	.word	473
	.byte	6,0,2,35,3,0,21
	.byte	'Ifx_SCU_OVCCON_Bits',0,3,206,5,3
	.word	38247
	.byte	7
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,3,209,5,16,4,8
	.byte	'OVEN0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'OVEN1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'OVEN2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'OVEN3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'OVEN4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'OVEN5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,3,218,5,3
	.word	38565
	.byte	7
	.byte	'_Ifx_SCU_PDISC_Bits',0,3,221,5,16,4,8
	.byte	'PDIS0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PDIS1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,4
	.word	199
	.byte	30,0,2,35,0,0,21
	.byte	'Ifx_SCU_PDISC_Bits',0,3,226,5,3
	.word	38752
	.byte	7
	.byte	'_Ifx_SCU_PDR_Bits',0,3,229,5,16,4,8
	.byte	'PD0',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'PL0',0,1
	.word	473
	.byte	2,4,2,35,0,8
	.byte	'PD1',0,1
	.word	473
	.byte	2,2,2,35,0,8
	.byte	'PL1',0,1
	.word	473
	.byte	2,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	199
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_PDR_Bits',0,3,236,5,3
	.word	38863
	.byte	7
	.byte	'_Ifx_SCU_PDRR_Bits',0,3,239,5,16,4,8
	.byte	'PDR0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PDR1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'PDR2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'PDR3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'PDR4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'PDR5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'PDR6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'PDR7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	199
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_PDRR_Bits',0,3,250,5,3
	.word	38996
	.byte	7
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,3,253,5,16,4,8
	.byte	'DIVBY',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,2
	.word	292
	.byte	8,7,2,35,0,8
	.byte	'NDIV',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'PLLPWD',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'reserved_17',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'RESLD',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'reserved_19',0,1
	.word	473
	.byte	5,0,2,35,2,8
	.byte	'PDIV',0,1
	.word	473
	.byte	3,5,2,35,3,8
	.byte	'reserved_27',0,1
	.word	473
	.byte	5,0,2,35,3,0,21
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,3,136,6,3
	.word	39199
	.byte	7
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,3,139,6,16,4,8
	.byte	'K2DIV',0,1
	.word	473
	.byte	3,5,2,35,0,8
	.byte	'reserved_3',0,1
	.word	473
	.byte	5,0,2,35,0,8
	.byte	'K3DIV',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,3,145,6,3
	.word	39439
	.byte	7
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,3,148,6,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PWDSTAT',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'LOCK',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'reserved_3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'K3RDY',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'K2RDY',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'reserved_7',0,4
	.word	199
	.byte	25,0,2,35,0,0,21
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,3,158,6,3
	.word	39583
	.byte	7
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,3,161,6,16,4,8
	.byte	'REQSLP',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'PMST',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR0_Bits',0,3,167,6,3
	.word	39805
	.byte	7
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,3,170,6,16,4,8
	.byte	'REQSLP',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'PMST',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR1_Bits',0,3,176,6,3
	.word	39941
	.byte	7
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,3,179,6,16,4,8
	.byte	'REQSLP',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'PMST',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR2_Bits',0,3,185,6,3
	.word	40077
	.byte	7
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,3,188,6,16,4,8
	.byte	'REQSLP',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'PMST',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR3_Bits',0,3,194,6,3
	.word	40213
	.byte	7
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,3,197,6,16,4,8
	.byte	'REQSLP',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'PMST',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR4_Bits',0,3,203,6,3
	.word	40349
	.byte	7
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,3,206,6,16,4,8
	.byte	'REQSLP',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'PMST',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,4
	.word	199
	.byte	21,0,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR5_Bits',0,3,212,6,3
	.word	40485
	.byte	7
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,3,215,6,16,4,8
	.byte	'CPU0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'CPU1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'CPU2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'CPU3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'CPU4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'CPU5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	10,0,2,35,0,8
	.byte	'CPU0LS',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'CPU1LS',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'CPU2LS',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'CPU3LS',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'reserved_20',0,2
	.word	292
	.byte	12,0,2,35,2,0,21
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,3,229,6,3
	.word	40621
	.byte	7
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,3,232,6,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	8,0,2,35,0,8
	.byte	'CPUIDLSEL',0,1
	.word	473
	.byte	3,5,2,35,1,8
	.byte	'reserved_11',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'IRADIS',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'reserved_13',0,4
	.word	199
	.byte	11,8,2,35,0,8
	.byte	'CPUSEL',0,1
	.word	473
	.byte	3,5,2,35,3,8
	.byte	'STBYEVEN',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'STBYEV',0,1
	.word	473
	.byte	3,1,2,35,3,8
	.byte	'reserved_31',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,3,243,6,3
	.word	40893
	.byte	7
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,3,246,6,16,4,8
	.byte	'LJTEN',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'LJTOVEN',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'LJTOVIEN',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'LJTSTRT',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'LJTSTP',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'LJTCLR',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	6,4,2,35,0,8
	.byte	'SDSTEP',0,1
	.word	473
	.byte	4,0,2,35,1,8
	.byte	'VDTEN',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'VDTOVEN',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'VDTOVIEN',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'VDTSTRT',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'VDTSTP',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'VDTCLR',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'reserved_22',0,2
	.word	292
	.byte	7,3,2,35,2,8
	.byte	'LPSLPEN',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'reserved_30',0,1
	.word	473
	.byte	2,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,3,137,7,3
	.word	41138
	.byte	7
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,3,140,7,16,4,8
	.byte	'LJTCV',0,2
	.word	292
	.byte	16,0,2,35,0,8
	.byte	'VDTCV',0,2
	.word	292
	.byte	10,6,2,35,2,8
	.byte	'reserved_26',0,1
	.word	473
	.byte	6,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,3,145,7,3
	.word	41526
	.byte	7
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,3,148,7,16,4,8
	.byte	'LDJMPREQ',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	2,4,2,35,0,8
	.byte	'LJTRUN',0,1
	.word	473
	.byte	2,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	2,0,2,35,0,8
	.byte	'LJTOV',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'reserved_9',0,1
	.word	473
	.byte	3,4,2,35,1,8
	.byte	'LJTOVCLR',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'reserved_13',0,1
	.word	473
	.byte	3,0,2,35,1,8
	.byte	'LJTCNT',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,3,159,7,3
	.word	41644
	.byte	7
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,3,162,7,16,4,8
	.byte	'VDROOPREQ',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	2,4,2,35,0,8
	.byte	'VDTRUN',0,1
	.word	473
	.byte	2,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	2,0,2,35,0,8
	.byte	'VDTOV',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'reserved_9',0,1
	.word	473
	.byte	3,4,2,35,1,8
	.byte	'VDTOVCLR',0,1
	.word	473
	.byte	1,3,2,35,1,8
	.byte	'reserved_13',0,1
	.word	473
	.byte	3,0,2,35,1,8
	.byte	'VDTCNT',0,2
	.word	292
	.byte	10,6,2,35,2,8
	.byte	'reserved_26',0,1
	.word	473
	.byte	6,0,2,35,3,0,21
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,3,174,7,3
	.word	41887
	.byte	7
	.byte	'_Ifx_SCU_RSTCON_Bits',0,3,177,7,16,4,8
	.byte	'ESR0',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'ESR1',0,1
	.word	473
	.byte	2,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	2,2,2,35,0,8
	.byte	'SMU',0,1
	.word	473
	.byte	2,0,2,35,0,8
	.byte	'SW',0,1
	.word	473
	.byte	2,6,2,35,1,8
	.byte	'STM0',0,1
	.word	473
	.byte	2,4,2,35,1,8
	.byte	'STM1',0,1
	.word	473
	.byte	2,2,2,35,1,8
	.byte	'STM2',0,1
	.word	473
	.byte	2,0,2,35,1,8
	.byte	'STM3',0,1
	.word	473
	.byte	2,6,2,35,2,8
	.byte	'STM4',0,1
	.word	473
	.byte	2,4,2,35,2,8
	.byte	'STM5',0,1
	.word	473
	.byte	2,2,2,35,2,8
	.byte	'reserved_22',0,2
	.word	292
	.byte	10,0,2,35,2,0,21
	.byte	'Ifx_SCU_RSTCON_Bits',0,3,191,7,3
	.word	42154
	.byte	7
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,3,194,7,16,4,8
	.byte	'FRTO',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'CLRC',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'reserved_3',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'reserved_5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'CSSX',0,2
	.word	292
	.byte	6,3,2,35,0,8
	.byte	'reserved_13',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'reserved_14',0,1
	.word	473
	.byte	1,1,2,35,1,8
	.byte	'reserved_15',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'USRINFO',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_RSTCON2_Bits',0,3,208,7,3
	.word	42413
	.byte	7
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,3,211,7,16,4,8
	.byte	'reserved_0',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_RSTCON3_Bits',0,3,214,7,3
	.word	42718
	.byte	7
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,3,217,7,16,4,8
	.byte	'ESR0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'ESR1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'SMU',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'SW',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'STM0',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'STM1',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'STM2',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'STM3',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'STM4',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'STM5',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'reserved_11',0,1
	.word	473
	.byte	5,0,2,35,1,8
	.byte	'PORST',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'reserved_17',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'CB0',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'CB1',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'CB3',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'reserved_21',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'reserved_22',0,1
	.word	473
	.byte	1,1,2,35,2,8
	.byte	'EVRC',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'EVR33',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'SWD',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'HSMS',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'HSMA',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'STBYR',0,1
	.word	473
	.byte	1,3,2,35,3,8
	.byte	'LBPORST',0,1
	.word	473
	.byte	1,2,2,35,3,8
	.byte	'LBTERM',0,1
	.word	473
	.byte	1,1,2,35,3,8
	.byte	'reserved_31',0,1
	.word	473
	.byte	1,0,2,35,3,0,21
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,3,247,7,3
	.word	42799
	.byte	7
	.byte	'_Ifx_SCU_SEICON0_Bits',0,3,250,7,16,4,8
	.byte	'reserved_0',0,4
	.word	321
	.byte	1,31,2,35,0,8
	.byte	'ENDINIT',0,4
	.word	321
	.byte	1,30,2,35,0,8
	.byte	'EPW',0,4
	.word	321
	.byte	14,16,2,35,0,8
	.byte	'REL',0,4
	.word	321
	.byte	16,0,2,35,0,0,21
	.byte	'Ifx_SCU_SEICON0_Bits',0,3,128,8,3
	.word	43348
	.byte	7
	.byte	'_Ifx_SCU_SEICON1_Bits',0,3,131,8,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IR0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DR',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IR1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,4
	.word	199
	.byte	26,0,2,35,0,0,21
	.byte	'Ifx_SCU_SEICON1_Bits',0,3,140,8,3
	.word	43478
	.byte	7
	.byte	'_Ifx_SCU_SEISR_Bits',0,3,143,8,16,4,8
	.byte	'AE',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'OE',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'IS0',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'DS',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'TO',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'IS1',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,2
	.word	292
	.byte	10,0,2,35,0,8
	.byte	'TIM',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_SEISR_Bits',0,3,153,8,3
	.word	43669
	.byte	7
	.byte	'_Ifx_SCU_STCON_Bits',0,3,156,8,16,4,8
	.byte	'reserved_0',0,2
	.word	292
	.byte	13,3,2,35,0,8
	.byte	'SFCBAE',0,1
	.word	473
	.byte	1,2,2,35,1,8
	.byte	'CFCBAE',0,1
	.word	473
	.byte	1,1,2,35,1,8
	.byte	'STP',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_STCON_Bits',0,3,163,8,3
	.word	43847
	.byte	7
	.byte	'_Ifx_SCU_STMEM1_Bits',0,3,166,8,16,4,8
	.byte	'MEM',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM1_Bits',0,3,169,8,3
	.word	43998
	.byte	7
	.byte	'_Ifx_SCU_STMEM2_Bits',0,3,172,8,16,4,8
	.byte	'MEM',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM2_Bits',0,3,175,8,3
	.word	44070
	.byte	7
	.byte	'_Ifx_SCU_STMEM3_Bits',0,3,178,8,16,4,8
	.byte	'MEM',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM3_Bits',0,3,181,8,3
	.word	44142
	.byte	7
	.byte	'_Ifx_SCU_STMEM4_Bits',0,3,184,8,16,4,8
	.byte	'MEM',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM4_Bits',0,3,187,8,3
	.word	44214
	.byte	7
	.byte	'_Ifx_SCU_STMEM5_Bits',0,3,190,8,16,4,8
	.byte	'MEM',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM5_Bits',0,3,193,8,3
	.word	44286
	.byte	7
	.byte	'_Ifx_SCU_STMEM6_Bits',0,3,196,8,16,4,8
	.byte	'MEM',0,4
	.word	199
	.byte	32,0,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM6_Bits',0,3,199,8,3
	.word	44358
	.byte	7
	.byte	'_Ifx_SCU_STSTAT_Bits',0,3,202,8,16,4,8
	.byte	'HWCFG',0,1
	.word	473
	.byte	8,0,2,35,0,8
	.byte	'FTM',0,1
	.word	473
	.byte	7,1,2,35,1,8
	.byte	'MODE',0,1
	.word	473
	.byte	1,0,2,35,1,8
	.byte	'FCBAE',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'LUDIS',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'reserved_18',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'TRSTL',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'SPDEN',0,1
	.word	473
	.byte	1,3,2,35,2,8
	.byte	'reserved_21',0,1
	.word	473
	.byte	1,2,2,35,2,8
	.byte	'reserved_22',0,1
	.word	473
	.byte	1,1,2,35,2,8
	.byte	'reserved_23',0,1
	.word	473
	.byte	1,0,2,35,2,8
	.byte	'RAMINT',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'reserved_25',0,1
	.word	473
	.byte	3,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	473
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_STSTAT_Bits',0,3,218,8,3
	.word	44430
	.byte	7
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,3,221,8,16,4,8
	.byte	'ADDRCFG',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'SPARE',0,2
	.word	292
	.byte	14,0,2,35,0,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,3,226,8,3
	.word	44759
	.byte	7
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,3,229,8,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'SWRSTREQ',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'reserved_2',0,1
	.word	473
	.byte	6,0,2,35,0,8
	.byte	'reserved_8',0,1
	.word	473
	.byte	8,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,3,236,8,3
	.word	44879
	.byte	7
	.byte	'_Ifx_SCU_SYSCON_Bits',0,3,239,8,16,4,8
	.byte	'CCTRIG0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'reserved_1',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'RAMINTM',0,1
	.word	473
	.byte	2,4,2,35,0,8
	.byte	'SETLUDIS',0,1
	.word	473
	.byte	1,3,2,35,0,8
	.byte	'reserved_5',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'reserved_7',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'DDC',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'reserved_9',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_SYSCON_Bits',0,3,251,8,3
	.word	45049
	.byte	7
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,3,254,8,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	2,6,2,35,0,8
	.byte	'MODEN',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'reserved_3',0,2
	.word	292
	.byte	6,7,2,35,0,8
	.byte	'NDIV',0,1
	.word	473
	.byte	7,0,2,35,1,8
	.byte	'PLLPWD',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'reserved_17',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'RESLD',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'reserved_19',0,1
	.word	473
	.byte	5,0,2,35,2,8
	.byte	'PDIV',0,1
	.word	473
	.byte	3,5,2,35,3,8
	.byte	'reserved_27',0,1
	.word	473
	.byte	3,2,2,35,3,8
	.byte	'INSEL',0,1
	.word	473
	.byte	2,0,2,35,3,0,21
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,3,139,9,3
	.word	45312
	.byte	7
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,3,142,9,16,4,8
	.byte	'K2DIV',0,1
	.word	473
	.byte	3,5,2,35,0,8
	.byte	'reserved_3',0,4
	.word	199
	.byte	29,0,2,35,0,0,21
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,3,146,9,3
	.word	45591
	.byte	7
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,3,149,9,16,4,8
	.byte	'MODCFG',0,2
	.word	292
	.byte	16,0,2,35,0,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,3,153,9,3
	.word	45695
	.byte	7
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,3,156,9,16,4,8
	.byte	'reserved_0',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'PWDSTAT',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'LOCK',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'reserved_3',0,1
	.word	473
	.byte	2,3,2,35,0,8
	.byte	'K2RDY',0,1
	.word	473
	.byte	1,2,2,35,0,8
	.byte	'reserved_6',0,1
	.word	473
	.byte	1,1,2,35,0,8
	.byte	'MODRUN',0,1
	.word	473
	.byte	1,0,2,35,0,8
	.byte	'reserved_8',0,4
	.word	199
	.byte	24,0,2,35,0,0,21
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,3,166,9,3
	.word	45801
	.byte	7
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,3,169,9,16,4,8
	.byte	'ESR0T',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'ESR1T',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'TRAP2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'SMUT',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,4
	.word	199
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,3,176,9,3
	.word	46024
	.byte	7
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,3,179,9,16,4,8
	.byte	'CPU0ESR0T',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'CPU0ESR1T',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'CPU0TRAP2T',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'CPU0SMUT',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	4,0,2,35,0,8
	.byte	'CPU1ESR0T',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'CPU1ESR1T',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'CPU1TRAP2T',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'CPU1SMUT',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'reserved_12',0,1
	.word	473
	.byte	4,0,2,35,1,8
	.byte	'CPU2ESR0T',0,1
	.word	473
	.byte	1,7,2,35,2,8
	.byte	'CPU2ESR1T',0,1
	.word	473
	.byte	1,6,2,35,2,8
	.byte	'CPU2TRAP2T',0,1
	.word	473
	.byte	1,5,2,35,2,8
	.byte	'CPU2SMUT',0,1
	.word	473
	.byte	1,4,2,35,2,8
	.byte	'reserved_20',0,1
	.word	473
	.byte	4,0,2,35,2,8
	.byte	'CPU3ESR0T',0,1
	.word	473
	.byte	1,7,2,35,3,8
	.byte	'CPU3ESR1T',0,1
	.word	473
	.byte	1,6,2,35,3,8
	.byte	'CPU3TRAP2T',0,1
	.word	473
	.byte	1,5,2,35,3,8
	.byte	'CPU3SMUT',0,1
	.word	473
	.byte	1,4,2,35,3,8
	.byte	'reserved_28',0,1
	.word	473
	.byte	4,0,2,35,3,0,21
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,3,201,9,3
	.word	46172
	.byte	7
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,3,204,9,16,4,8
	.byte	'CPU4ESR0T',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'CPU4ESR1T',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'CPU4TRAP2T',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'CPU4SMUT',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,1
	.word	473
	.byte	4,0,2,35,0,8
	.byte	'CPU5ESR0T',0,1
	.word	473
	.byte	1,7,2,35,1,8
	.byte	'CPU5ESR1T',0,1
	.word	473
	.byte	1,6,2,35,1,8
	.byte	'CPU5TRAP2T',0,1
	.word	473
	.byte	1,5,2,35,1,8
	.byte	'CPU5SMUT',0,1
	.word	473
	.byte	1,4,2,35,1,8
	.byte	'reserved_12',0,1
	.word	473
	.byte	4,0,2,35,1,8
	.byte	'reserved_16',0,2
	.word	292
	.byte	16,0,2,35,2,0,21
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,3,217,9,3
	.word	46660
	.byte	7
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,3,220,9,16,4,8
	.byte	'ESR0T',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'ESR1T',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'TRAP2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'SMUT',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,4
	.word	199
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSET_Bits',0,3,227,9,3
	.word	46957
	.byte	7
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,3,230,9,16,4,8
	.byte	'ESR0T',0,1
	.word	473
	.byte	1,7,2,35,0,8
	.byte	'ESR1T',0,1
	.word	473
	.byte	1,6,2,35,0,8
	.byte	'TRAP2',0,1
	.word	473
	.byte	1,5,2,35,0,8
	.byte	'SMUT',0,1
	.word	473
	.byte	1,4,2,35,0,8
	.byte	'reserved_4',0,4
	.word	199
	.byte	28,0,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,3,237,9,3
	.word	47105
	.byte	21
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,3,246,9,3
	.word	337
	.byte	21
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,3,134,10,3
	.word	490
	.byte	21
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,3,150,10,3
	.word	756
	.byte	21
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,3,159,10,3
	.word	1538
	.byte	21
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,3,175,10,3
	.word	1672
	.byte	21
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,3,191,10,3
	.word	1932
	.byte	9,3,199,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	28389
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN00',0,3,204,10,3
	.word	47449
	.byte	9,3,207,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	28948
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN01',0,3,212,10,3
	.word	47514
	.byte	9,3,215,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	29027
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN10',0,3,220,10,3
	.word	47579
	.byte	9,3,223,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	29587
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ACCEN11',0,3,228,10,3
	.word	47644
	.byte	9,3,231,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	29668
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ARSTDIS',0,3,236,10,3
	.word	47709
	.byte	9,3,239,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	29885
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON0',0,3,244,10,3
	.word	47774
	.byte	9,3,247,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	30158
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON1',0,3,252,10,3
	.word	47839
	.byte	9,3,255,10,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	30484
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON10',0,3,132,11,3
	.word	47904
	.byte	9,3,135,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	30586
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON11',0,3,140,11,3
	.word	47970
	.byte	9,3,143,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	30688
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON2',0,3,148,11,3
	.word	48036
	.byte	9,3,151,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	30962
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON3',0,3,156,11,3
	.word	48101
	.byte	9,3,159,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	31331
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON4',0,3,164,11,3
	.word	48166
	.byte	9,3,167,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	31511
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON5',0,3,172,11,3
	.word	48231
	.byte	9,3,175,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	31680
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON6',0,3,180,11,3
	.word	48296
	.byte	9,3,183,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	31780
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON7',0,3,188,11,3
	.word	48361
	.byte	9,3,191,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	31880
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON8',0,3,196,11,3
	.word	48426
	.byte	9,3,199,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	31980
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CCUCON9',0,3,204,11,3
	.word	48491
	.byte	9,3,207,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	32080
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_CHIPID',0,3,212,11,3
	.word	48556
	.byte	9,3,215,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	32283
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_DTSCLIM',0,3,220,11,3
	.word	48620
	.byte	9,3,223,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	32515
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_DTSCSTAT',0,3,228,11,3
	.word	48685
	.byte	9,3,231,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	32617
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EICON0',0,3,236,11,3
	.word	48751
	.byte	9,3,239,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	32745
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EICON1',0,3,244,11,3
	.word	48815
	.byte	9,3,247,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	32934
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EICR',0,3,252,11,3
	.word	48879
	.byte	9,3,255,11,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	33298
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EIFILT',0,3,132,12,3
	.word	48941
	.byte	9,3,135,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	33737
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EIFR',0,3,140,12,3
	.word	49005
	.byte	9,3,143,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	33948
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EISR',0,3,148,12,3
	.word	49067
	.byte	9,3,151,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	34124
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EMSR',0,3,156,12,3
	.word	49129
	.byte	9,3,159,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	34318
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EMSSW',0,3,164,12,3
	.word	49191
	.byte	9,3,167,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	34453
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,3,172,12,3
	.word	49254
	.byte	9,3,175,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	34589
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ESROCFG',0,3,180,12,3
	.word	49327
	.byte	9,3,183,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	34700
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_EXTCON',0,3,188,12,3
	.word	49392
	.byte	9,3,191,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	34918
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_FDR',0,3,196,12,3
	.word	49456
	.byte	9,3,199,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	35081
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_FMR',0,3,204,12,3
	.word	49517
	.byte	9,3,207,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	35417
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_ID',0,3,212,12,3
	.word	49578
	.byte	9,3,215,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	35524
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_IGCR',0,3,220,12,3
	.word	49638
	.byte	9,3,223,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	35976
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_IN',0,3,228,12,3
	.word	49700
	.byte	9,3,231,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36075
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_IOCR',0,3,236,12,3
	.word	49760
	.byte	9,3,239,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36225
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL0',0,3,244,12,3
	.word	49822
	.byte	9,3,247,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36463
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL1',0,3,252,12,3
	.word	49890
	.byte	9,3,255,12,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36624
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL2',0,3,132,13,3
	.word	49958
	.byte	9,3,135,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36730
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LBISTCTRL3',0,3,140,13,3
	.word	50026
	.byte	9,3,143,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36816
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LCLCON0',0,3,148,13,3
	.word	50094
	.byte	9,3,151,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	36984
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LCLCON1',0,3,156,13,3
	.word	50159
	.byte	9,3,159,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	37152
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_LCLTEST',0,3,164,13,3
	.word	50224
	.byte	9,3,167,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	37466
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_MANID',0,3,172,13,3
	.word	50289
	.byte	9,3,175,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	37577
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OMR',0,3,180,13,3
	.word	50352
	.byte	9,3,183,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	37735
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OSCCON',0,3,188,13,3
	.word	50413
	.byte	9,3,191,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	38146
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OUT',0,3,196,13,3
	.word	50477
	.byte	9,3,199,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	38247
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OVCCON',0,3,204,13,3
	.word	50538
	.byte	9,3,207,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	38565
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_OVCENABLE',0,3,212,13,3
	.word	50602
	.byte	9,3,215,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	38752
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PDISC',0,3,220,13,3
	.word	50669
	.byte	9,3,223,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	38863
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PDR',0,3,228,13,3
	.word	50732
	.byte	9,3,231,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	38996
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PDRR',0,3,236,13,3
	.word	50793
	.byte	9,3,239,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	39199
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PERPLLCON0',0,3,244,13,3
	.word	50855
	.byte	9,3,247,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	39439
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PERPLLCON1',0,3,252,13,3
	.word	50923
	.byte	9,3,255,13,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	39583
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PERPLLSTAT',0,3,132,14,3
	.word	50991
	.byte	9,3,135,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	39805
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR0',0,3,140,14,3
	.word	51059
	.byte	9,3,143,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	39941
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR1',0,3,148,14,3
	.word	51123
	.byte	9,3,151,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	40077
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR2',0,3,156,14,3
	.word	51187
	.byte	9,3,159,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	40213
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR3',0,3,164,14,3
	.word	51251
	.byte	9,3,167,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	40349
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR4',0,3,172,14,3
	.word	51315
	.byte	9,3,175,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	40485
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMCSR5',0,3,180,14,3
	.word	51379
	.byte	9,3,183,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	40621
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMSTAT0',0,3,188,14,3
	.word	51443
	.byte	9,3,191,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	40893
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMSWCR1',0,3,196,14,3
	.word	51508
	.byte	9,3,199,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	41138
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMTRCSR0',0,3,204,14,3
	.word	51573
	.byte	9,3,207,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	41526
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMTRCSR1',0,3,212,14,3
	.word	51639
	.byte	9,3,215,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	41644
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMTRCSR2',0,3,220,14,3
	.word	51705
	.byte	9,3,223,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	41887
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_PMTRCSR3',0,3,228,14,3
	.word	51771
	.byte	9,3,231,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	42154
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTCON',0,3,236,14,3
	.word	51837
	.byte	9,3,239,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	42413
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTCON2',0,3,244,14,3
	.word	51901
	.byte	9,3,247,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	42718
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTCON3',0,3,252,14,3
	.word	51966
	.byte	9,3,255,14,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	42799
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_RSTSTAT',0,3,132,15,3
	.word	52031
	.byte	9,3,135,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	43348
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SEICON0',0,3,140,15,3
	.word	52096
	.byte	9,3,143,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	43478
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SEICON1',0,3,148,15,3
	.word	52161
	.byte	9,3,151,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	43669
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SEISR',0,3,156,15,3
	.word	52226
	.byte	9,3,159,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	43847
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STCON',0,3,164,15,3
	.word	52289
	.byte	9,3,167,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	43998
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM1',0,3,172,15,3
	.word	52352
	.byte	9,3,175,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44070
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM2',0,3,180,15,3
	.word	52416
	.byte	9,3,183,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44142
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM3',0,3,188,15,3
	.word	52480
	.byte	9,3,191,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44214
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM4',0,3,196,15,3
	.word	52544
	.byte	9,3,199,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44286
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM5',0,3,204,15,3
	.word	52608
	.byte	9,3,207,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44358
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STMEM6',0,3,212,15,3
	.word	52672
	.byte	9,3,215,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44430
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_STSTAT',0,3,220,15,3
	.word	52736
	.byte	9,3,223,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44759
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SWAPCTRL',0,3,228,15,3
	.word	52800
	.byte	9,3,231,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	44879
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SWRSTCON',0,3,236,15,3
	.word	52866
	.byte	9,3,239,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	45049
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SYSCON',0,3,244,15,3
	.word	52932
	.byte	9,3,247,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	45312
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SYSPLLCON0',0,3,252,15,3
	.word	52996
	.byte	9,3,255,15,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	45591
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SYSPLLCON1',0,3,132,16,3
	.word	53064
	.byte	9,3,135,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	45695
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SYSPLLCON2',0,3,140,16,3
	.word	53132
	.byte	9,3,143,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	45801
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_SYSPLLSTAT',0,3,148,16,3
	.word	53200
	.byte	9,3,151,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	46024
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPCLR',0,3,156,16,3
	.word	53268
	.byte	9,3,159,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	46172
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPDIS0',0,3,164,16,3
	.word	53333
	.byte	9,3,167,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	46660
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPDIS1',0,3,172,16,3
	.word	53399
	.byte	9,3,175,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	46957
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSET',0,3,180,16,3
	.word	53465
	.byte	9,3,183,16,9,4,10
	.byte	'U',0
	.word	199
	.byte	4,2,35,0,10
	.byte	'I',0
	.word	314
	.byte	4,2,35,0,10
	.byte	'B',0
	.word	47105
	.byte	4,2,35,0,0,21
	.byte	'Ifx_SCU_TRAPSTAT',0,3,188,16,3
	.word	53530
	.byte	21
	.byte	'Ifx_SCU_WDTCPU_CON0',0,3,196,16,3
	.word	433
	.byte	21
	.byte	'Ifx_SCU_WDTCPU_CON1',0,3,204,16,3
	.word	716
	.byte	21
	.byte	'Ifx_SCU_WDTCPU_SR',0,3,212,16,3
	.word	947
	.byte	21
	.byte	'Ifx_SCU_WDTS_CON0',0,3,220,16,3
	.word	1632
	.byte	21
	.byte	'Ifx_SCU_WDTS_CON1',0,3,228,16,3
	.word	1892
	.byte	21
	.byte	'Ifx_SCU_WDTS_SR',0,3,236,16,3
	.word	2121
	.byte	7
	.byte	'_Ifx_SCU_ESRCFGX',0,3,248,16,25,4,10
	.byte	'ESRCFGX',0
	.word	49254
	.byte	4,2,35,0,0,11
	.word	53760
	.byte	21
	.byte	'Ifx_SCU_ESRCFGX',0,3,251,16,3
	.word	53801
	.byte	11
	.word	987
	.byte	21
	.byte	'Ifx_SCU_WDTCPU',0,3,143,17,3
	.word	53831
	.byte	11
	.word	2161
	.byte	21
	.byte	'Ifx_SCU_WDTS',0,3,163,17,3
	.word	53860
	.byte	21
	.byte	'Ifx_CPU_A_Bits',0,4,73,3
	.word	22998
	.byte	21
	.byte	'Ifx_CPU_BIV_Bits',0,4,80,3
	.word	22114
	.byte	21
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,4,89,3
	.word	11783
	.byte	21
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,4,97,3
	.word	11652
	.byte	21
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,4,108,3
	.word	11466
	.byte	21
	.byte	'Ifx_CPU_BTV_Bits',0,4,115,3
	.word	22208
	.byte	21
	.byte	'Ifx_CPU_CCNT_Bits',0,4,122,3
	.word	19298
	.byte	21
	.byte	'Ifx_CPU_CCTRL_Bits',0,4,133,1,3
	.word	19139
	.byte	21
	.byte	'Ifx_CPU_COMPAT_Bits',0,4,142,1,3
	.word	15040
	.byte	21
	.byte	'Ifx_CPU_CORE_ID_Bits',0,4,149,1,3
	.word	22004
	.byte	21
	.byte	'Ifx_CPU_CPR_L_Bits',0,4,156,1,3
	.word	16493
	.byte	21
	.byte	'Ifx_CPU_CPR_U_Bits',0,4,163,1,3
	.word	16600
	.byte	21
	.byte	'Ifx_CPU_CPU_ID_Bits',0,4,171,1,3
	.word	21883
	.byte	21
	.byte	'Ifx_CPU_CPXE_Bits',0,4,178,1,3
	.word	16774
	.byte	21
	.byte	'Ifx_CPU_CREVT_Bits',0,4,189,1,3
	.word	20213
	.byte	21
	.byte	'Ifx_CPU_CUS_ID_Bits',0,4,196,1,3
	.word	22785
	.byte	21
	.byte	'Ifx_CPU_D_Bits',0,4,202,1,3
	.word	22901
	.byte	21
	.byte	'Ifx_CPU_DATR_Bits',0,4,216,1,3
	.word	13216
	.byte	21
	.byte	'Ifx_CPU_DBGSR_Bits',0,4,230,1,3
	.word	19820
	.byte	21
	.byte	'Ifx_CPU_DBGTCR_Bits',0,4,237,1,3
	.word	20972
	.byte	21
	.byte	'Ifx_CPU_DCON0_Bits',0,4,245,1,3
	.word	13933
	.byte	21
	.byte	'Ifx_CPU_DCON2_Bits',0,4,252,1,3
	.word	12613
	.byte	21
	.byte	'Ifx_CPU_DCX_Bits',0,4,131,2,3
	.word	20865
	.byte	21
	.byte	'Ifx_CPU_DEADD_Bits',0,4,137,2,3
	.word	13455
	.byte	21
	.byte	'Ifx_CPU_DIEAR_Bits',0,4,143,2,3
	.word	13547
	.byte	21
	.byte	'Ifx_CPU_DIETR_Bits',0,4,161,2,3
	.word	13628
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,4,198,2,3
	.word	10178
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,4,235,2,3
	.word	8996
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,4,144,3,3
	.word	10764
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,4,181,3,3
	.word	9582
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,4,188,3,3
	.word	8764
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,4,195,3,3
	.word	8880
	.byte	21
	.byte	'Ifx_CPU_DMS_Bits',0,4,202,3,3
	.word	20758
	.byte	21
	.byte	'Ifx_CPU_DPRE_Bits',0,4,209,3,3
	.word	16879
	.byte	21
	.byte	'Ifx_CPU_DPR_L_Bits',0,4,216,3,3
	.word	16211
	.byte	21
	.byte	'Ifx_CPU_DPR_U_Bits',0,4,223,3,3
	.word	16318
	.byte	21
	.byte	'Ifx_CPU_DPWE_Bits',0,4,230,3,3
	.word	16984
	.byte	21
	.byte	'Ifx_CPU_DSTR_Bits',0,4,252,3,3
	.word	12855
	.byte	21
	.byte	'Ifx_CPU_EXEVT_Bits',0,4,135,4,3
	.word	20047
	.byte	21
	.byte	'Ifx_CPU_FCX_Bits',0,4,143,4,3
	.word	22545
	.byte	21
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,4,156,4,3
	.word	2243
	.byte	21
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,4,167,4,3
	.word	2469
	.byte	21
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,4,184,4,3
	.word	2668
	.byte	21
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,4,200,4,3
	.word	2976
	.byte	21
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,4,207,4,3
	.word	3289
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,4,229,4,3
	.word	15191
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,4,239,4,3
	.word	15632
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,4,245,4,3
	.word	15545
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,4,251,4,3
	.word	15797
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,4,129,5,3
	.word	15888
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,4,135,5,3
	.word	15979
	.byte	21
	.byte	'Ifx_CPU_ICNT_Bits',0,4,142,5,3
	.word	19401
	.byte	21
	.byte	'Ifx_CPU_ICR_Bits',0,4,152,5,3
	.word	22389
	.byte	21
	.byte	'Ifx_CPU_ISP_Bits',0,4,158,5,3
	.word	22309
	.byte	21
	.byte	'Ifx_CPU_KRST0_Bits',0,4,166,5,3
	.word	3411
	.byte	21
	.byte	'Ifx_CPU_KRST1_Bits',0,4,173,5,3
	.word	3534
	.byte	21
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,4,180,5,3
	.word	3638
	.byte	21
	.byte	'Ifx_CPU_LCX_Bits',0,4,188,5,3
	.word	22665
	.byte	21
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,4,225,5,3
	.word	7579
	.byte	21
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,4,134,6,3
	.word	8161
	.byte	21
	.byte	'Ifx_CPU_M1CNT_Bits',0,4,141,6,3
	.word	19505
	.byte	21
	.byte	'Ifx_CPU_M2CNT_Bits',0,4,148,6,3
	.word	19610
	.byte	21
	.byte	'Ifx_CPU_M3CNT_Bits',0,4,155,6,3
	.word	19715
	.byte	21
	.byte	'Ifx_CPU_OSEL_Bits',0,4,161,6,3
	.word	11371
	.byte	21
	.byte	'Ifx_CPU_PC_Bits',0,4,168,6,3
	.word	21473
	.byte	21
	.byte	'Ifx_CPU_PCON0_Bits',0,4,176,6,3
	.word	14524
	.byte	21
	.byte	'Ifx_CPU_PCON1_Bits',0,4,184,6,3
	.word	14288
	.byte	21
	.byte	'Ifx_CPU_PCON2_Bits',0,4,191,6,3
	.word	14411
	.byte	21
	.byte	'Ifx_CPU_PCXI_Bits',0,4,202,6,3
	.word	21088
	.byte	21
	.byte	'Ifx_CPU_PIEAR_Bits',0,4,208,6,3
	.word	14652
	.byte	21
	.byte	'Ifx_CPU_PIETR_Bits',0,4,226,6,3
	.word	14733
	.byte	21
	.byte	'Ifx_CPU_PMA0_Bits',0,4,233,6,3
	.word	12290
	.byte	21
	.byte	'Ifx_CPU_PMA1_Bits',0,4,240,6,3
	.word	12394
	.byte	21
	.byte	'Ifx_CPU_PMA2_Bits',0,4,247,6,3
	.word	12498
	.byte	21
	.byte	'Ifx_CPU_PSTR_Bits',0,4,132,7,3
	.word	14072
	.byte	21
	.byte	'Ifx_CPU_PSW_Bits',0,4,147,7,3
	.word	21254
	.byte	21
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,4,184,7,3
	.word	3967
	.byte	21
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,4,221,7,3
	.word	4541
	.byte	21
	.byte	'Ifx_CPU_RGN_LA_Bits',0,4,228,7,3
	.word	3755
	.byte	21
	.byte	'Ifx_CPU_RGN_UA_Bits',0,4,235,7,3
	.word	3861
	.byte	21
	.byte	'Ifx_CPU_SEGEN_Bits',0,4,244,7,3
	.word	12019
	.byte	21
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,4,153,8,3
	.word	6405
	.byte	21
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,4,190,8,3
	.word	6987
	.byte	21
	.byte	'Ifx_CPU_SMACON_Bits',0,4,198,8,3
	.word	12726
	.byte	21
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,4,235,8,3
	.word	5225
	.byte	21
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,4,144,9,3
	.word	5810
	.byte	21
	.byte	'Ifx_CPU_SWEVT_Bits',0,4,155,9,3
	.word	20379
	.byte	21
	.byte	'Ifx_CPU_SYSCON_Bits',0,4,173,9,3
	.word	21573
	.byte	21
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,4,180,9,3
	.word	12172
	.byte	21
	.byte	'Ifx_CPU_TPS_CON_Bits',0,4,191,9,3
	.word	17109
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,4,198,9,3
	.word	17998
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,4,205,9,3
	.word	17599
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,4,213,9,3
	.word	17450
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,4,220,9,3
	.word	17873
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,4,228,9,3
	.word	17726
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,4,235,9,3
	.word	18373
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,4,248,9,3
	.word	18126
	.byte	21
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,4,254,9,3
	.word	17291
	.byte	21
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,4,140,10,3
	.word	20554
	.byte	21
	.byte	'Ifx_CPU_TR_ADR_Bits',0,4,146,10,3
	.word	18985
	.byte	21
	.byte	'Ifx_CPU_TR_EVT_Bits',0,4,166,10,3
	.word	18656
	.byte	21
	.byte	'Ifx_CPU_A',0,4,179,10,3
	.word	23036
	.byte	21
	.byte	'Ifx_CPU_BIV',0,4,187,10,3
	.word	22168
	.byte	21
	.byte	'Ifx_CPU_BLK_OMASK',0,4,195,10,3
	.word	11890
	.byte	21
	.byte	'Ifx_CPU_BLK_OTAR',0,4,203,10,3
	.word	11743
	.byte	21
	.byte	'Ifx_CPU_BLK_RABR',0,4,211,10,3
	.word	11612
	.byte	21
	.byte	'Ifx_CPU_BTV',0,4,219,10,3
	.word	22269
	.byte	21
	.byte	'Ifx_CPU_CCNT',0,4,227,10,3
	.word	19361
	.byte	21
	.byte	'Ifx_CPU_CCTRL',0,4,235,10,3
	.word	19258
	.byte	21
	.byte	'Ifx_CPU_COMPAT',0,4,243,10,3
	.word	15140
	.byte	21
	.byte	'Ifx_CPU_CORE_ID',0,4,251,10,3
	.word	22074
	.byte	21
	.byte	'Ifx_CPU_CPR_L',0,4,131,11,3
	.word	16560
	.byte	21
	.byte	'Ifx_CPU_CPR_U',0,4,139,11,3
	.word	16667
	.byte	21
	.byte	'Ifx_CPU_CPU_ID',0,4,147,11,3
	.word	21964
	.byte	21
	.byte	'Ifx_CPU_CPXE',0,4,155,11,3
	.word	16839
	.byte	21
	.byte	'Ifx_CPU_CREVT',0,4,163,11,3
	.word	20339
	.byte	21
	.byte	'Ifx_CPU_CUS_ID',0,4,171,11,3
	.word	22850
	.byte	21
	.byte	'Ifx_CPU_D',0,4,179,11,3
	.word	22940
	.byte	21
	.byte	'Ifx_CPU_DATR',0,4,187,11,3
	.word	13415
	.byte	21
	.byte	'Ifx_CPU_DBGSR',0,4,195,11,3
	.word	20007
	.byte	21
	.byte	'Ifx_CPU_DBGTCR',0,4,203,11,3
	.word	21037
	.byte	21
	.byte	'Ifx_CPU_DCON0',0,4,211,11,3
	.word	14021
	.byte	21
	.byte	'Ifx_CPU_DCON2',0,4,219,11,3
	.word	12686
	.byte	21
	.byte	'Ifx_CPU_DCX',0,4,227,11,3
	.word	20932
	.byte	21
	.byte	'Ifx_CPU_DEADD',0,4,235,11,3
	.word	13507
	.byte	21
	.byte	'Ifx_CPU_DIEAR',0,4,243,11,3
	.word	13588
	.byte	21
	.byte	'Ifx_CPU_DIETR',0,4,251,11,3
	.word	13884
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,4,131,12,3
	.word	10724
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,4,139,12,3
	.word	9542
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,4,147,12,3
	.word	11320
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,4,155,12,3
	.word	10138
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,4,163,12,3
	.word	8840
	.byte	21
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,4,171,12,3
	.word	8956
	.byte	21
	.byte	'Ifx_CPU_DMS',0,4,179,12,3
	.word	20825
	.byte	21
	.byte	'Ifx_CPU_DPRE',0,4,187,12,3
	.word	16944
	.byte	21
	.byte	'Ifx_CPU_DPR_L',0,4,195,12,3
	.word	16278
	.byte	21
	.byte	'Ifx_CPU_DPR_U',0,4,203,12,3
	.word	16385
	.byte	21
	.byte	'Ifx_CPU_DPWE',0,4,211,12,3
	.word	17049
	.byte	21
	.byte	'Ifx_CPU_DSTR',0,4,219,12,3
	.word	13167
	.byte	21
	.byte	'Ifx_CPU_EXEVT',0,4,227,12,3
	.word	20173
	.byte	21
	.byte	'Ifx_CPU_FCX',0,4,235,12,3
	.word	22625
	.byte	21
	.byte	'Ifx_CPU_FLASHCON0',0,4,243,12,3
	.word	2429
	.byte	21
	.byte	'Ifx_CPU_FLASHCON1',0,4,251,12,3
	.word	2628
	.byte	21
	.byte	'Ifx_CPU_FLASHCON2',0,4,131,13,3
	.word	2936
	.byte	21
	.byte	'Ifx_CPU_FLASHCON3',0,4,139,13,3
	.word	3249
	.byte	21
	.byte	'Ifx_CPU_FLASHCON4',0,4,147,13,3
	.word	3358
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,4,155,13,3
	.word	15505
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,4,163,13,3
	.word	15757
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,4,171,13,3
	.word	15592
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,4,179,13,3
	.word	15848
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,4,187,13,3
	.word	15939
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,4,195,13,3
	.word	16030
	.byte	21
	.byte	'Ifx_CPU_ICNT',0,4,203,13,3
	.word	19465
	.byte	21
	.byte	'Ifx_CPU_ICR',0,4,211,13,3
	.word	22505
	.byte	21
	.byte	'Ifx_CPU_ISP',0,4,219,13,3
	.word	22349
	.byte	21
	.byte	'Ifx_CPU_KRST0',0,4,227,13,3
	.word	3494
	.byte	21
	.byte	'Ifx_CPU_KRST1',0,4,235,13,3
	.word	3598
	.byte	21
	.byte	'Ifx_CPU_KRSTCLR',0,4,243,13,3
	.word	3704
	.byte	21
	.byte	'Ifx_CPU_LCX',0,4,251,13,3
	.word	22745
	.byte	21
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,4,131,14,3
	.word	8121
	.byte	21
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,4,139,14,3
	.word	8713
	.byte	21
	.byte	'Ifx_CPU_M1CNT',0,4,147,14,3
	.word	19570
	.byte	21
	.byte	'Ifx_CPU_M2CNT',0,4,155,14,3
	.word	19675
	.byte	21
	.byte	'Ifx_CPU_M3CNT',0,4,163,14,3
	.word	19780
	.byte	21
	.byte	'Ifx_CPU_OSEL',0,4,171,14,3
	.word	11417
	.byte	21
	.byte	'Ifx_CPU_PC',0,4,179,14,3
	.word	21533
	.byte	21
	.byte	'Ifx_CPU_PCON0',0,4,187,14,3
	.word	14612
	.byte	21
	.byte	'Ifx_CPU_PCON1',0,4,195,14,3
	.word	14371
	.byte	21
	.byte	'Ifx_CPU_PCON2',0,4,203,14,3
	.word	14484
	.byte	21
	.byte	'Ifx_CPU_PCXI',0,4,211,14,3
	.word	21214
	.byte	21
	.byte	'Ifx_CPU_PIEAR',0,4,219,14,3
	.word	14693
	.byte	21
	.byte	'Ifx_CPU_PIETR',0,4,227,14,3
	.word	14989
	.byte	21
	.byte	'Ifx_CPU_PMA0',0,4,235,14,3
	.word	12354
	.byte	21
	.byte	'Ifx_CPU_PMA1',0,4,243,14,3
	.word	12458
	.byte	21
	.byte	'Ifx_CPU_PMA2',0,4,251,14,3
	.word	12562
	.byte	21
	.byte	'Ifx_CPU_PSTR',0,4,131,15,3
	.word	14248
	.byte	21
	.byte	'Ifx_CPU_PSW',0,4,139,15,3
	.word	21433
	.byte	21
	.byte	'Ifx_CPU_RGN_ACCENA',0,4,147,15,3
	.word	4501
	.byte	21
	.byte	'Ifx_CPU_RGN_ACCENB',0,4,155,15,3
	.word	5085
	.byte	21
	.byte	'Ifx_CPU_RGN_LA',0,4,163,15,3
	.word	3821
	.byte	21
	.byte	'Ifx_CPU_RGN_UA',0,4,171,15,3
	.word	3927
	.byte	21
	.byte	'Ifx_CPU_SEGEN',0,4,179,15,3
	.word	12119
	.byte	21
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,4,187,15,3
	.word	6947
	.byte	21
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,4,195,15,3
	.word	7539
	.byte	21
	.byte	'Ifx_CPU_SMACON',0,4,203,15,3
	.word	12815
	.byte	21
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,4,211,15,3
	.word	5770
	.byte	21
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,4,219,15,3
	.word	6365
	.byte	21
	.byte	'Ifx_CPU_SWEVT',0,4,227,15,3
	.word	20505
	.byte	21
	.byte	'Ifx_CPU_SYSCON',0,4,235,15,3
	.word	21843
	.byte	21
	.byte	'Ifx_CPU_TASK_ASI',0,4,243,15,3
	.word	12239
	.byte	21
	.byte	'Ifx_CPU_TPS_CON',0,4,251,15,3
	.word	17251
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,4,131,16,3
	.word	18086
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,4,139,16,3
	.word	17686
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,4,147,16,3
	.word	17559
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,4,155,16,3
	.word	17958
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,4,163,16,3
	.word	17833
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,4,171,16,3
	.word	18451
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,4,179,16,3
	.word	18333
	.byte	21
	.byte	'Ifx_CPU_TPS_TIMER',0,4,187,16,3
	.word	17339
	.byte	21
	.byte	'Ifx_CPU_TRIG_ACC',0,4,195,16,3
	.word	20718
	.byte	21
	.byte	'Ifx_CPU_TR_ADR',0,4,203,16,3
	.word	19029
	.byte	21
	.byte	'Ifx_CPU_TR_EVT',0,4,211,16,3
	.word	18945
	.byte	11
	.word	5125
	.byte	21
	.byte	'Ifx_CPU_RGN',0,4,229,16,3
	.word	59691
	.byte	11
	.word	11930
	.byte	21
	.byte	'Ifx_CPU_BLK',0,4,249,16,3
	.word	59717
	.byte	11
	.word	16070
	.byte	21
	.byte	'Ifx_CPU_FPU_TRAP',0,4,145,17,3
	.word	59743
	.byte	11
	.word	16425
	.byte	21
	.byte	'Ifx_CPU_DPR',0,4,164,17,3
	.word	59774
	.byte	11
	.word	16707
	.byte	21
	.byte	'Ifx_CPU_CPR',0,4,183,17,3
	.word	59800
	.byte	11
	.word	17388
	.byte	21
	.byte	'Ifx_CPU_TPS',0,4,202,17,3
	.word	59826
	.byte	11
	.word	18491
	.byte	21
	.byte	'Ifx_CPU_TPS_EXTIM',0,4,226,17,3
	.word	59852
	.byte	11
	.word	19069
	.byte	21
	.byte	'Ifx_CPU_TR',0,4,245,17,3
	.word	59884
	.byte	11
	.word	23085
	.byte	21
	.byte	'Ifx_CPU',0,4,212,19,3
	.word	59909
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L50:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	0,0,0,4,36,0,3,8,11,15,62,15,0,0,5,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,6,5,0,3,8,58
	.byte	15,59,15,57,15,73,19,0,0,7,19,1,3,8,58,15,59,15,57,15,11,15,0,0,8,13,0,3,8,11,15,73,19,13,15,12,15,56
	.byte	9,0,0,9,23,1,58,15,59,15,57,15,11,15,0,0,10,13,0,3,8,73,19,11,15,56,9,0,0,11,53,0,73,19,0,0,12,15,0,73
	.byte	19,0,0,13,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,14,5,0,73,19,0,0,15,46,1,49,19,0,0,16,5,0,49,19,0
	.byte	0,17,1,1,11,15,73,19,0,0,18,33,0,47,15,0,0,19,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,20
	.byte	21,0,54,15,0,0,21,22,0,3,8,58,15,59,15,57,15,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L51:
	.word	.L283-.L282
.L282:
	.half	3
	.word	.L285-.L284
.L284:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Mcal\\Infra_Prod\\Sfr\\TC39xB\\_Reg',0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_CompilersTasking.h',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0
	.byte	'IfxScu_regdef.h',0,1,0,0
	.byte	'IfxCpu_regdef.h',0,1,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'Ifx_TypesReg.h',0,1,0,0,0
.L285:
.L283:
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.debug_info'
.L52:
	.word	327
	.half	3
	.word	.L53
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L55,.L54
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_getCpuWatchdogPassword',0,1,31,16
	.word	.L132
	.byte	1,1,1
	.word	.L17,.L133,.L16
	.byte	4
	.byte	'watchdog',0,1,31,63
	.word	.L134,.L135
	.byte	5
	.word	.L17,.L133
	.byte	6
	.word	.L136,.L17,.L137
	.byte	7
	.word	.L138,.L139
	.byte	8
	.word	.L140,.L17,.L137
	.byte	9
	.byte	'password',0,2,186,2,20
	.word	.L132,.L141
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.debug_abbrev'
.L53:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73
	.byte	16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.debug_line'
.L54:
	.word	.L287-.L286
.L286:
	.half	3
	.word	.L289-.L288
.L288:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L289:
	.byte	4,2,5,33,7,0,5,2
	.word	.L17
	.byte	3,190,2,1,5,14,9
	.half	.L290-.L17
	.byte	3,1,1,4,1,5,1,9
	.half	.L137-.L290
	.byte	3,226,125,1,7,9
	.half	.L56-.L137
	.byte	0,1,1
.L287:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.debug_ranges'
.L55:
	.word	-1,.L17,0,.L56-.L17,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.debug_info'
.L57:
	.word	322
	.half	3
	.word	.L58
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L60,.L59
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_getSafetyWatchdogPassword',0,1,37,16
	.word	.L132
	.byte	1,1,1
	.word	.L19,.L142,.L18
	.byte	4
	.word	.L19,.L142
	.byte	5
	.word	.L143,.L19,.L144
	.byte	6
	.word	.L145,.L19,.L144
	.byte	7
	.byte	'password',0,2,200,2,20
	.word	.L132,.L146
	.byte	7
	.byte	'watchdog',0,2,201,2,20
	.word	.L147,.L148
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.debug_abbrev'
.L58:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.debug_line'
.L59:
	.word	.L292-.L291
.L291:
	.half	3
	.word	.L294-.L293
.L293:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L294:
	.byte	4,2,5,28,7,0,5,2
	.word	.L19
	.byte	3,201,2,1,5,33,9
	.half	.L238-.L19
	.byte	3,4,1,5,14,9
	.half	.L295-.L238
	.byte	3,1,1,4,1,5,1,9
	.half	.L144-.L295
	.byte	3,217,125,1,7,9
	.half	.L61-.L144
	.byte	0,1,1
.L292:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.debug_ranges'
.L60:
	.word	-1,.L19,0,.L61-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.debug_info'
.L62:
	.word	323
	.half	3
	.word	.L63
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L65,.L64
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_clearCpuEndinit',0,1,43,6,1,1,1
	.word	.L21,.L149,.L20
	.byte	4
	.byte	'watchdog',0,1,43,46
	.word	.L134,.L150
	.byte	4
	.byte	'password',0,1,43,71
	.word	.L132,.L151
	.byte	5
	.word	.L21,.L149
	.byte	6
	.word	.L152,.L21,.L153
	.byte	7
	.word	.L154,.L155
	.byte	7
	.word	.L156,.L157
	.byte	8
	.word	.L158,.L21,.L153
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.debug_abbrev'
.L63:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.debug_line'
.L64:
	.word	.L297-.L296
.L296:
	.half	3
	.word	.L299-.L298
.L298:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L299:
	.byte	4,2,5,25,7,0,5,2
	.word	.L21
	.byte	3,214,2,1,5,5,9
	.half	.L300-.L21
	.byte	1,5,52,7,9
	.half	.L301-.L300
	.byte	3,5,1,5,59,9
	.half	.L302-.L301
	.byte	3,1,1,5,64,9
	.half	.L303-.L302
	.byte	1,5,83,9
	.half	.L304-.L303
	.byte	3,127,1,5,26,9
	.half	.L305-.L304
	.byte	3,126,1,5,48,9
	.half	.L4-.L305
	.byte	3,9,1,5,55,9
	.half	.L306-.L4
	.byte	3,1,1,5,60,9
	.half	.L307-.L306
	.byte	1,5,79,9
	.half	.L308-.L307
	.byte	3,127,1,5,22,9
	.half	.L309-.L308
	.byte	3,126,1,5,19,9
	.half	.L310-.L309
	.byte	3,6,1,4,1,5,1,9
	.half	.L153-.L310
	.byte	3,199,125,1,7,9
	.half	.L66-.L153
	.byte	0,1,1
.L297:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.debug_ranges'
.L65:
	.word	-1,.L21,0,.L66-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.debug_info'
.L67:
	.word	321
	.half	3
	.word	.L68
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L70,.L69
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_setCpuEndinit',0,1,49,6,1,1,1
	.word	.L23,.L159,.L22
	.byte	4
	.byte	'watchdog',0,1,49,44
	.word	.L134,.L160
	.byte	4
	.byte	'password',0,1,49,69
	.word	.L132,.L161
	.byte	5
	.word	.L23,.L159
	.byte	6
	.word	.L162,.L23,.L163
	.byte	7
	.word	.L164,.L165
	.byte	7
	.word	.L166,.L167
	.byte	8
	.word	.L168,.L23,.L163
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.debug_abbrev'
.L68:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.debug_line'
.L69:
	.word	.L312-.L311
.L311:
	.half	3
	.word	.L314-.L313
.L313:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L314:
	.byte	4,2,5,25,7,0,5,2
	.word	.L23
	.byte	3,130,3,1,5,5,9
	.half	.L315-.L23
	.byte	1,5,52,7,9
	.half	.L316-.L315
	.byte	3,5,1,5,59,9
	.half	.L317-.L316
	.byte	3,1,1,5,64,9
	.half	.L318-.L317
	.byte	1,5,83,9
	.half	.L319-.L318
	.byte	3,127,1,5,26,9
	.half	.L320-.L319
	.byte	3,126,1,5,48,9
	.half	.L5-.L320
	.byte	3,9,1,5,55,9
	.half	.L321-.L5
	.byte	3,1,1,5,60,9
	.half	.L322-.L321
	.byte	1,5,79,9
	.half	.L323-.L322
	.byte	3,127,1,5,22,9
	.half	.L324-.L323
	.byte	3,126,1,5,19,9
	.half	.L325-.L324
	.byte	3,6,1,4,1,5,1,9
	.half	.L163-.L325
	.byte	3,161,125,1,7,9
	.half	.L71-.L163
	.byte	0,1,1
.L312:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.debug_ranges'
.L70:
	.word	-1,.L23,0,.L71-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.debug_info'
.L72:
	.word	296
	.half	3
	.word	.L73
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L75,.L74
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_clearSafetyEndinit',0,1,55,6,1,1,1
	.word	.L25,.L169,.L24
	.byte	4
	.byte	'password',0,1,55,48
	.word	.L132,.L170
	.byte	5
	.word	.L25,.L169
	.byte	6
	.word	.L171,.L25,.L172
	.byte	7
	.word	.L173,.L174
	.byte	8
	.word	.L175,.L25,.L172
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.debug_abbrev'
.L73:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.debug_line'
.L74:
	.word	.L327-.L326
.L326:
	.half	3
	.word	.L329-.L328
.L328:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L329:
	.byte	4,2,5,24,7,0,5,2
	.word	.L25
	.byte	3,236,2,1,5,5,9
	.half	.L330-.L25
	.byte	1,5,51,7,9
	.half	.L331-.L330
	.byte	3,5,1,5,57,9
	.half	.L332-.L331
	.byte	3,1,1,5,62,9
	.half	.L333-.L332
	.byte	1,5,80,9
	.half	.L334-.L333
	.byte	3,127,1,5,25,9
	.half	.L335-.L334
	.byte	3,126,1,5,47,9
	.half	.L6-.L335
	.byte	3,9,1,5,53,9
	.half	.L336-.L6
	.byte	3,1,1,5,58,9
	.half	.L337-.L336
	.byte	1,5,76,9
	.half	.L338-.L337
	.byte	3,127,1,5,21,9
	.half	.L339-.L338
	.byte	3,126,1,5,18,9
	.half	.L340-.L339
	.byte	3,6,1,4,1,5,1,9
	.half	.L172-.L340
	.byte	3,189,125,1,7,9
	.half	.L76-.L172
	.byte	0,1,1
.L327:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.debug_ranges'
.L75:
	.word	-1,.L25,0,.L76-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.debug_info'
.L77:
	.word	294
	.half	3
	.word	.L78
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L80,.L79
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_setSafetyEndinit',0,1,61,6,1,1,1
	.word	.L27,.L176,.L26
	.byte	4
	.byte	'password',0,1,61,46
	.word	.L132,.L177
	.byte	5
	.word	.L27,.L176
	.byte	6
	.word	.L178,.L27,.L179
	.byte	7
	.word	.L180,.L181
	.byte	8
	.word	.L182,.L27,.L179
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.debug_abbrev'
.L78:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.debug_line'
.L79:
	.word	.L342-.L341
.L341:
	.half	3
	.word	.L344-.L343
.L343:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L344:
	.byte	4,2,5,24,7,0,5,2
	.word	.L27
	.byte	3,152,3,1,5,5,9
	.half	.L345-.L27
	.byte	1,5,51,7,9
	.half	.L346-.L345
	.byte	3,5,1,5,57,9
	.half	.L347-.L346
	.byte	3,1,1,5,62,9
	.half	.L348-.L347
	.byte	1,5,80,9
	.half	.L349-.L348
	.byte	3,127,1,5,25,9
	.half	.L350-.L349
	.byte	3,126,1,5,47,9
	.half	.L7-.L350
	.byte	3,9,1,5,53,9
	.half	.L351-.L7
	.byte	3,1,1,5,58,9
	.half	.L352-.L351
	.byte	1,5,76,9
	.half	.L353-.L352
	.byte	3,127,1,5,21,9
	.half	.L354-.L353
	.byte	3,126,1,5,18,9
	.half	.L355-.L354
	.byte	3,6,1,4,1,5,1,9
	.half	.L179-.L355
	.byte	3,151,125,1,7,9
	.half	.L81-.L179
	.byte	0,1,1
.L342:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.debug_ranges'
.L80:
	.word	-1,.L27,0,.L81-.L27,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.debug_info'
.L82:
	.word	373
	.half	3
	.word	.L83
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L85,.L84
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_disableCpuWatchdog',0,1,79,6,1,1,1
	.word	.L33,.L183,.L32
	.byte	4
	.byte	'watchdog',0,1,79,49
	.word	.L134,.L184
	.byte	4
	.byte	'password',0,1,79,74
	.word	.L132,.L185
	.byte	5
	.word	.L33,.L183
	.byte	6
	.byte	'cpuIndex',0,1,82,21
	.word	.L186,.L187
	.byte	7
	.word	.L188,.L189,.L190
	.byte	8
	.word	.L191,.L192
	.byte	8
	.word	.L193,.L194
	.byte	9
	.word	.L195,.L189,.L190
	.byte	0,5
	.word	.L190,.L183
	.byte	6
	.byte	'wdt',0,1,86,21
	.word	.L134,.L196
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.debug_abbrev'
.L83:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.debug_line'
.L84:
	.word	.L357-.L356
.L356:
	.half	3
	.word	.L359-.L358
.L358:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_CompilersTasking.h',0,0,0,0,0
.L359:
	.byte	5,6,7,0,5,2
	.word	.L33
	.byte	3,206,0,1,5,16,9
	.half	.L247-.L33
	.byte	3,4,1,5,86,9
	.half	.L248-.L247
	.byte	3,1,1,4,2,5,18,9
	.half	.L189-.L248
	.byte	3,38,1,4,1,5,45,9
	.half	.L190-.L189
	.byte	3,92,1,5,34,9
	.half	.L249-.L190
	.byte	3,2,1,5,16,9
	.half	.L245-.L249
	.byte	3,1,1,5,20,9
	.half	.L360-.L245
	.byte	1,5,32,9
	.half	.L361-.L360
	.byte	3,1,1,5,1,9
	.half	.L86-.L361
	.byte	3,1,0,1,1
.L357:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.debug_ranges'
.L85:
	.word	-1,.L33,0,.L86-.L33,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.debug_info'
.L87:
	.word	372
	.half	3
	.word	.L88
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L90,.L89
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_enableCpuWatchdog',0,1,94,6,1,1,1
	.word	.L35,.L197,.L34
	.byte	4
	.byte	'watchdog',0,1,94,48
	.word	.L134,.L198
	.byte	4
	.byte	'password',0,1,94,73
	.word	.L132,.L199
	.byte	5
	.word	.L35,.L197
	.byte	6
	.byte	'cpuIndex',0,1,97,21
	.word	.L186,.L200
	.byte	7
	.word	.L188,.L201,.L202
	.byte	8
	.word	.L191,.L203
	.byte	8
	.word	.L193,.L204
	.byte	9
	.word	.L195,.L201,.L202
	.byte	0,5
	.word	.L202,.L197
	.byte	6
	.byte	'wdt',0,1,101,21
	.word	.L134,.L205
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.debug_abbrev'
.L88:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.debug_line'
.L89:
	.word	.L363-.L362
.L362:
	.half	3
	.word	.L365-.L364
.L364:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_CompilersTasking.h',0,0,0,0,0
.L365:
	.byte	5,6,7,0,5,2
	.word	.L35
	.byte	3,221,0,1,5,16,9
	.half	.L254-.L35
	.byte	3,4,1,5,86,9
	.half	.L255-.L254
	.byte	3,1,1,4,2,5,18,9
	.half	.L201-.L255
	.byte	3,23,1,4,1,5,45,9
	.half	.L202-.L201
	.byte	3,107,1,5,34,9
	.half	.L256-.L202
	.byte	3,2,1,5,16,9
	.half	.L252-.L256
	.byte	3,1,1,5,20,9
	.half	.L366-.L252
	.byte	1,5,32,9
	.half	.L367-.L366
	.byte	3,1,1,5,1,9
	.half	.L91-.L367
	.byte	3,1,0,1,1
.L363:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.debug_ranges'
.L90:
	.word	-1,.L35,0,.L91-.L35,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.debug_info'
.L92:
	.word	262
	.half	3
	.word	.L93
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L95,.L94
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_disableSafetyWatchdog',0,1,109,6,1,1,1
	.word	.L37,.L206,.L36
	.byte	4
	.byte	'password',0,1,109,51
	.word	.L132,.L207
	.byte	5
	.word	.L37,.L206
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.debug_abbrev'
.L93:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.debug_line'
.L94:
	.word	.L369-.L368
.L368:
	.half	3
	.word	.L371-.L370
.L370:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0,0
.L371:
	.byte	5,6,7,0,5,2
	.word	.L37
	.byte	3,236,0,1,5,32,9
	.half	.L260-.L37
	.byte	3,2,1,5,20,9
	.half	.L259-.L260
	.byte	3,1,1,5,24,9
	.half	.L372-.L259
	.byte	1,5,30,9
	.half	.L373-.L372
	.byte	3,1,1,5,1,9
	.half	.L96-.L373
	.byte	3,1,0,1,1
.L369:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.debug_ranges'
.L95:
	.word	-1,.L37,0,.L96-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.debug_info'
.L97:
	.word	261
	.half	3
	.word	.L98
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L100,.L99
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_enableSafetyWatchdog',0,1,117,6,1,1,1
	.word	.L39,.L208,.L38
	.byte	4
	.byte	'password',0,1,117,50
	.word	.L132,.L209
	.byte	5
	.word	.L39,.L208
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.debug_abbrev'
.L98:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.debug_line'
.L99:
	.word	.L375-.L374
.L374:
	.half	3
	.word	.L377-.L376
.L376:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0,0
.L377:
	.byte	5,6,7,0,5,2
	.word	.L39
	.byte	3,244,0,1,5,32,9
	.half	.L263-.L39
	.byte	3,2,1,5,20,9
	.half	.L262-.L263
	.byte	3,1,1,5,24,9
	.half	.L378-.L262
	.byte	1,5,30,9
	.half	.L379-.L378
	.byte	3,1,1,5,1,9
	.half	.L101-.L379
	.byte	3,1,0,1,1
.L375:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.debug_ranges'
.L100:
	.word	-1,.L39,0,.L101-.L39,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_startCore')
	.sect	'.debug_info'
.L102:
	.word	303
	.half	3
	.word	.L103
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L105,.L104
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_startCore',0,1,125,6,1,1,1
	.word	.L41,.L210,.L40
	.byte	4
	.byte	'cpu',0,1,125,33
	.word	.L211,.L212
	.byte	4
	.byte	'programCounter',0,1,125,51
	.word	.L186,.L213
	.byte	5
	.word	.L41,.L210
	.byte	5
	.word	.L214,.L210
	.byte	6
	.byte	'syscon',0,1,131,1,20
	.word	.L215,.L216
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_startCore')
	.sect	'.debug_abbrev'
.L103:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_startCore')
	.sect	'.debug_line'
.L104:
	.word	.L381-.L380
.L380:
	.half	3
	.word	.L383-.L382
.L382:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0,0
.L383:
	.byte	5,14,7,0,5,2
	.word	.L41
	.byte	3,255,0,1,5,49,9
	.half	.L384-.L41
	.byte	1,5,18,9
	.half	.L265-.L384
	.byte	1,5,17,9
	.half	.L214-.L265
	.byte	3,4,1,5,5,9
	.half	.L266-.L214
	.byte	3,2,1,5,24,7,9
	.half	.L385-.L266
	.byte	3,2,1,9
	.half	.L386-.L385
	.byte	3,1,1,5,1,9
	.half	.L10-.L386
	.byte	3,3,1,7,9
	.half	.L106-.L10
	.byte	0,1,1
.L381:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_startCore')
	.sect	'.debug_ranges'
.L105:
	.word	-1,.L41,0,.L106-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.debug_info'
.L107:
	.word	272
	.half	3
	.word	.L108
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L110,.L109
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_setCpu0Idle',0,1,143,1,6,1,1,1
	.word	.L43,.L217,.L42
	.byte	4
	.word	.L43,.L217
	.byte	5
	.byte	'wdt',0,1,145,1,21
	.word	.L134,.L218
	.byte	5
	.byte	'cpuWdtPw',0,1,146,1,21
	.word	.L132,.L219
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.debug_abbrev'
.L108:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.debug_line'
.L109:
	.word	.L388-.L387
.L387:
	.half	3
	.word	.L390-.L389
.L389:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0,0
.L390:
	.byte	5,50,7,0,5,2
	.word	.L43
	.byte	3,144,1,1,5,63,9
	.half	.L391-.L43
	.byte	3,1,1,5,30,9
	.half	.L269-.L391
	.byte	1,5,34,9
	.half	.L271-.L269
	.byte	3,1,1,5,17,9
	.half	.L273-.L271
	.byte	3,1,1,5,25,9
	.half	.L392-.L273
	.byte	1,5,32,9
	.half	.L393-.L392
	.byte	3,1,1,5,1,9
	.half	.L111-.L393
	.byte	3,1,0,1,1
.L388:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.debug_ranges'
.L110:
	.word	-1,.L43,0,.L111-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_C_Init')
	.sect	'.debug_info'
.L112:
	.word	255
	.half	3
	.word	.L113
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L115,.L114
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_C_Init',0,1,181,1,6,1,1,1
	.word	.L47,.L220,.L46
	.byte	4
	.word	.L47,.L220
	.byte	5
	.word	.L221,.L47,.L220
	.byte	6
	.word	.L222,.L47,.L220
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_C_Init')
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,0,49,16,17,1,18,1
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_C_Init')
	.sect	'.debug_line'
.L114:
	.word	.L395-.L394
.L394:
	.half	3
	.word	.L397-.L396
.L396:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_CompilersTasking.h',0,0,0,0,0
.L397:
	.byte	4,2,5,12,7,0,5,2
	.word	.L47
	.byte	3,167,1,1,4,1,5,1,7,9
	.half	.L116-.L47
	.byte	3,16,0,1,1
.L395:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_C_Init')
	.sect	'.debug_ranges'
.L115:
	.word	-1,.L47,0,.L116-.L47,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.debug_info'
.L117:
	.word	305
	.half	3
	.word	.L118
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L120,.L119
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_getStmFrequency',0,1,153,1,7
	.word	.L223
	.byte	1,1,1
	.word	.L45,.L224,.L44
	.byte	4
	.word	.L45,.L224
	.byte	5
	.byte	'oscFreq',0,1,155,1,18
	.word	.L223,.L225
	.byte	5
	.byte	'sourcefreq',0,1,156,1,18
	.word	.L223,.L226
	.byte	5
	.byte	'insel',0,1,157,1,18
	.word	.L186,.L227
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.debug_abbrev'
.L118:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.debug_line'
.L119:
	.word	.L399-.L398
.L398:
	.half	3
	.word	.L401-.L400
.L400:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0,0
.L401:
	.byte	5,31,7,0,5,2
	.word	.L45
	.byte	3,155,1,1,5,47,9
	.half	.L402-.L45
	.byte	3,1,1,5,5,9
	.half	.L278-.L402
	.byte	3,2,1,5,10,7,9
	.half	.L403-.L278
	.byte	3,4,1,5,19,7,9
	.half	.L11-.L403
	.byte	3,2,1,5,45,9
	.half	.L404-.L11
	.byte	1,5,19,9
	.half	.L12-.L404
	.byte	3,4,1,5,22,9
	.half	.L13-.L12
	.byte	3,3,1,5,5,9
	.half	.L405-.L13
	.byte	1,5,50,7,9
	.half	.L406-.L405
	.byte	3,2,1,5,56,9
	.half	.L407-.L406
	.byte	1,5,31,9
	.half	.L408-.L407
	.byte	1,5,40,9
	.half	.L281-.L408
	.byte	3,1,1,5,46,9
	.half	.L409-.L281
	.byte	1,5,71,9
	.half	.L277-.L409
	.byte	1,5,78,9
	.half	.L410-.L277
	.byte	1,5,52,9
	.half	.L411-.L410
	.byte	1,5,63,9
	.half	.L412-.L411
	.byte	3,127,1,5,38,9
	.half	.L14-.L412
	.byte	3,4,1,5,23,9
	.half	.L413-.L14
	.byte	1,5,1,9
	.half	.L414-.L413
	.byte	3,1,1,7,9
	.half	.L121-.L414
	.byte	0,1,1
.L399:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.debug_ranges'
.L120:
	.word	-1,.L45,0,.L121-.L45,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.debug_info'
.L122:
	.word	326
	.half	3
	.word	.L123
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L125,.L124
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_serviceCpuWatchdog',0,1,67,6,1,1,1
	.word	.L29,.L228,.L28
	.byte	4
	.byte	'watchdog',0,1,67,49
	.word	.L134,.L229
	.byte	4
	.byte	'password',0,1,67,74
	.word	.L132,.L230
	.byte	5
	.word	.L29,.L228
	.byte	6
	.word	.L162,.L29,.L231
	.byte	7
	.word	.L164,.L232
	.byte	7
	.word	.L166,.L233
	.byte	8
	.word	.L168,.L29,.L231
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.debug_abbrev'
.L123:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.debug_line'
.L124:
	.word	.L416-.L415
.L415:
	.half	3
	.word	.L418-.L417
.L417:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L418:
	.byte	4,2,5,25,7,0,5,2
	.word	.L29
	.byte	3,130,3,1,5,5,9
	.half	.L419-.L29
	.byte	1,5,52,7,9
	.half	.L420-.L419
	.byte	3,5,1,5,59,9
	.half	.L421-.L420
	.byte	3,1,1,5,64,9
	.half	.L422-.L421
	.byte	1,5,83,9
	.half	.L423-.L422
	.byte	3,127,1,5,26,9
	.half	.L424-.L423
	.byte	3,126,1,5,48,9
	.half	.L8-.L424
	.byte	3,9,1,5,55,9
	.half	.L425-.L8
	.byte	3,1,1,5,60,9
	.half	.L426-.L425
	.byte	1,5,79,9
	.half	.L427-.L426
	.byte	3,127,1,5,22,9
	.half	.L428-.L427
	.byte	3,126,1,5,19,9
	.half	.L429-.L428
	.byte	3,6,1,4,1,5,1,9
	.half	.L231-.L429
	.byte	3,179,125,1,7,9
	.half	.L126-.L231
	.byte	0,1,1
.L416:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.debug_ranges'
.L125:
	.word	-1,.L29,0,.L126-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.debug_info'
.L127:
	.word	299
	.half	3
	.word	.L128
	.byte	4,1
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'F:\\LC_SWC_Projiectend\\TC397_PROJECT_NEW\\TC397_DemoProj\\Debug\\',0,12,1
	.word	.L130,.L129
	.byte	2
	.word	.L48
	.byte	3
	.byte	'Ifx_Ssw_serviceSafetyWatchdog',0,1,73,6,1,1,1
	.word	.L31,.L234,.L30
	.byte	4
	.byte	'password',0,1,73,51
	.word	.L132,.L235
	.byte	5
	.word	.L31,.L234
	.byte	6
	.word	.L178,.L31,.L236
	.byte	7
	.word	.L180,.L237
	.byte	8
	.word	.L182,.L31,.L236
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.debug_abbrev'
.L128:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.debug_line'
.L129:
	.word	.L431-.L430
.L430:
	.half	3
	.word	.L433-.L432
.L432:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.c',0,0,0,0
	.byte	'..\\Mcal\\Infra_Prod\\Ssw\\TC39B\\Tricore\\Ifx_Ssw_Infra.h',0,0,0,0,0
.L433:
	.byte	4,2,5,24,7,0,5,2
	.word	.L31
	.byte	3,152,3,1,5,5,9
	.half	.L434-.L31
	.byte	1,5,51,7,9
	.half	.L435-.L434
	.byte	3,5,1,5,57,9
	.half	.L436-.L435
	.byte	3,1,1,5,62,9
	.half	.L437-.L436
	.byte	1,5,80,9
	.half	.L438-.L437
	.byte	3,127,1,5,25,9
	.half	.L439-.L438
	.byte	3,126,1,5,47,9
	.half	.L9-.L439
	.byte	3,9,1,5,53,9
	.half	.L440-.L9
	.byte	3,1,1,5,58,9
	.half	.L441-.L440
	.byte	1,5,76,9
	.half	.L442-.L441
	.byte	3,127,1,5,21,9
	.half	.L443-.L442
	.byte	3,126,1,5,18,9
	.half	.L444-.L443
	.byte	3,6,1,4,1,5,1,9
	.half	.L236-.L444
	.byte	3,163,125,1,7,9
	.half	.L131-.L236
	.byte	0,1,1
.L431:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.debug_ranges'
.L130:
	.word	-1,.L31,0,.L131-.L31,0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_C_Init')
	.sect	'.debug_loc'
.L46:
	.word	-1,.L47,0,.L220-.L47
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.debug_loc'
.L20:
	.word	-1,.L21,0,.L149-.L21
	.half	2
	.byte	138,0
	.word	0,0
.L151:
	.word	-1,.L21,0,.L239-.L21
	.half	1
	.byte	84
	.word	0,0
.L157:
	.word	0,0
.L150:
	.word	-1,.L21,0,.L149-.L21
	.half	1
	.byte	100
	.word	0,0
.L155:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.debug_loc'
.L24:
	.word	-1,.L25,0,.L169-.L25
	.half	2
	.byte	138,0
	.word	0,0
.L170:
	.word	-1,.L25,0,.L241-.L25
	.half	1
	.byte	84
	.word	0,0
.L174:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.debug_loc'
.L32:
	.word	-1,.L33,0,.L183-.L33
	.half	2
	.byte	138,0
	.word	0,0
.L192:
	.word	0,0
.L194:
	.word	0,0
.L187:
	.word	-1,.L33,.L248-.L33,.L190-.L33
	.half	1
	.byte	95
	.word	0,0
.L185:
	.word	-1,.L33,0,.L245-.L33
	.half	1
	.byte	84
	.word	.L247-.L33,.L183-.L33
	.half	1
	.byte	88
	.word	.L251-.L33,.L183-.L33
	.half	1
	.byte	84
	.word	0,0
.L184:
	.word	-1,.L33,0,.L246-.L33
	.half	1
	.byte	100
	.word	0,0
.L196:
	.word	-1,.L33,.L249-.L33,.L183-.L33
	.half	1
	.byte	111
	.word	.L246-.L33,.L245-.L33
	.half	1
	.byte	100
	.word	.L250-.L33,.L183-.L33
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.debug_loc'
.L36:
	.word	-1,.L37,0,.L206-.L37
	.half	2
	.byte	138,0
	.word	0,0
.L207:
	.word	-1,.L37,0,.L259-.L37
	.half	1
	.byte	84
	.word	.L260-.L37,.L206-.L37
	.half	1
	.byte	88
	.word	.L261-.L37,.L206-.L37
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.debug_loc'
.L34:
	.word	-1,.L35,0,.L197-.L35
	.half	2
	.byte	138,0
	.word	0,0
.L203:
	.word	0,0
.L204:
	.word	0,0
.L200:
	.word	-1,.L35,.L255-.L35,.L202-.L35
	.half	1
	.byte	95
	.word	0,0
.L199:
	.word	-1,.L35,0,.L252-.L35
	.half	1
	.byte	84
	.word	.L254-.L35,.L197-.L35
	.half	1
	.byte	88
	.word	.L258-.L35,.L197-.L35
	.half	1
	.byte	84
	.word	0,0
.L198:
	.word	-1,.L35,0,.L253-.L35
	.half	1
	.byte	100
	.word	0,0
.L205:
	.word	-1,.L35,.L256-.L35,.L197-.L35
	.half	1
	.byte	111
	.word	.L253-.L35,.L252-.L35
	.half	1
	.byte	100
	.word	.L257-.L35,.L197-.L35
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.debug_loc'
.L38:
	.word	-1,.L39,0,.L208-.L39
	.half	2
	.byte	138,0
	.word	0,0
.L209:
	.word	-1,.L39,0,.L262-.L39
	.half	1
	.byte	84
	.word	.L263-.L39,.L208-.L39
	.half	1
	.byte	95
	.word	.L264-.L39,.L208-.L39
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.debug_loc'
.L16:
	.word	-1,.L17,0,.L133-.L17
	.half	2
	.byte	138,0
	.word	0,0
.L141:
	.word	-1,.L17,.L137-.L17,.L133-.L17
	.half	1
	.byte	82
	.word	0,0
.L135:
	.word	-1,.L17,0,.L133-.L17
	.half	1
	.byte	100
	.word	0,0
.L139:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,0,.L142-.L19
	.half	2
	.byte	138,0
	.word	0,0
.L146:
	.word	-1,.L19,.L144-.L19,.L142-.L19
	.half	1
	.byte	82
	.word	0,0
.L148:
	.word	-1,.L19,.L238-.L19,.L142-.L19
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.debug_loc'
.L44:
	.word	-1,.L45,0,.L224-.L45
	.half	2
	.byte	138,0
	.word	0,0
.L227:
	.word	-1,.L45,.L278-.L45,.L279-.L45
	.half	1
	.byte	95
	.word	0,0
.L225:
	.word	-1,.L45,.L280-.L45,.L12-.L45
	.half	1
	.byte	81
	.word	.L13-.L45,.L281-.L45
	.half	1
	.byte	81
	.word	0,0
.L226:
	.word	-1,.L45,.L276-.L45,.L277-.L45
	.half	5
	.byte	144,32,157,32,0
	.word	.L14-.L45,.L224-.L45
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.debug_loc'
.L28:
	.word	-1,.L29,0,.L228-.L29
	.half	2
	.byte	138,0
	.word	0,0
.L230:
	.word	-1,.L29,0,.L243-.L29
	.half	1
	.byte	84
	.word	0,0
.L233:
	.word	0,0
.L229:
	.word	-1,.L29,0,.L228-.L29
	.half	1
	.byte	100
	.word	0,0
.L232:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.debug_loc'
.L30:
	.word	-1,.L31,0,.L234-.L31
	.half	2
	.byte	138,0
	.word	0,0
.L235:
	.word	-1,.L31,0,.L244-.L31
	.half	1
	.byte	84
	.word	0,0
.L237:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L217-.L43
	.half	2
	.byte	138,0
	.word	0,0
.L219:
	.word	-1,.L43,.L269-.L43,.L270-.L43
	.half	1
	.byte	82
	.word	.L271-.L43,.L217-.L43
	.half	1
	.byte	95
	.word	.L270-.L43,.L273-.L43
	.half	1
	.byte	84
	.word	.L275-.L43,.L217-.L43
	.half	1
	.byte	84
	.word	0,0
.L218:
	.word	-1,.L43,.L267-.L43,.L217-.L43
	.half	1
	.byte	111
	.word	.L268-.L43,.L269-.L43
	.half	1
	.byte	100
	.word	.L272-.L43,.L273-.L43
	.half	1
	.byte	100
	.word	.L274-.L43,.L217-.L43
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.debug_loc'
.L22:
	.word	-1,.L23,0,.L159-.L23
	.half	2
	.byte	138,0
	.word	0,0
.L161:
	.word	-1,.L23,0,.L240-.L23
	.half	1
	.byte	84
	.word	0,0
.L167:
	.word	0,0
.L160:
	.word	-1,.L23,0,.L159-.L23
	.half	1
	.byte	100
	.word	0,0
.L165:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.debug_loc'
.L26:
	.word	-1,.L27,0,.L176-.L27
	.half	2
	.byte	138,0
	.word	0,0
.L177:
	.word	-1,.L27,0,.L242-.L27
	.half	1
	.byte	84
	.word	0,0
.L181:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Ssw_startCore')
	.sect	'.debug_loc'
.L40:
	.word	-1,.L41,0,.L210-.L41
	.half	2
	.byte	138,0
	.word	0,0
.L212:
	.word	-1,.L41,0,.L210-.L41
	.half	1
	.byte	100
	.word	0,0
.L213:
	.word	-1,.L41,0,.L265-.L41
	.half	1
	.byte	84
	.word	0,0
.L216:
	.word	-1,.L41,.L266-.L41,.L10-.L41
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L445:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_getCpuWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L17,.L133-.L17
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_getSafetyWatchdogPassword')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L19,.L142-.L19
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_clearCpuEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L21,.L149-.L21
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_setCpuEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L23,.L159-.L23
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_clearSafetyEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L25,.L169-.L25
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_setSafetyEndinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L27,.L176-.L27
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_serviceCpuWatchdog')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L29,.L228-.L29
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_serviceSafetyWatchdog')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L31,.L234-.L31
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_disableCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L445,.L33,.L183-.L33
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_enableCpuWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L445,.L35,.L197-.L35
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_disableSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L445,.L37,.L206-.L37
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_enableSafetyWatchdog')
	.sect	'.debug_frame'
	.word	12
	.word	.L445,.L39,.L208-.L39
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_startCore')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L41,.L210-.L41
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_setCpu0Idle')
	.sect	'.debug_frame'
	.word	12
	.word	.L445,.L43,.L217-.L43
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_getStmFrequency')
	.sect	'.debug_frame'
	.word	24
	.word	.L445,.L45,.L224-.L45
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Ssw_C_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L445,.L47,.L220-.L47

; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   182  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   183      Ifx_Ssw_C_InitInline();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   184  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   185  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   186  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   187  #if defined(__TASKING__)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   188  #pragma optimize RL
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   189  #elif defined(__HIGHTEC__)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   190  #pragma GCC optimize "O2"
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   191  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   192  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   193  #if (IFX_CFG_SSW_ENABLE_MONBIST == 1U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   194  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   195  static void Ifx_Ssw_MonbistCheck(void);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   196  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   197  void Ifx_Ssw_Monbist(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   198  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   199       uint32 timeout;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   200  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   201       /* Disable the write-protection for registers */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   202      IFX_CFG_SSW_CLEAR_SAFETY_ENDINIT();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   203      /* Enable SMU Standby */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   204      PMS_CMD_STDBY.U    = 0x40000001U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   205      /* clears the TSTEN, TSTRUN, TSTDONE, TSTOK, SMUERR and PMSERR flags */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   206      PMS_MONBISTCTRL.U  = 0x40000002U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   207      /* Clear the filter */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   208      PMS_MONFILT.U = 0x20000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   209      /* Wait until register is updated */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   210      timeout = 0x1000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   211      while ((PMS_MONFILT.U != 0x20000000U) && (timeout--))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   212      {};
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   213      /* Activate under voltage and over voltage alarms */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   214      PMS_MONCTRL.U = 0xa5a5a5U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   215      /* Wait until register is updated */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   216      timeout = 0x1000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   217      while ((PMS_MONCTRL.U != 0xa5a5a5U) && (timeout--))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   218      {};
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   219      /* corresponding Over-voltage and Under-voltage interrupts are disabled */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   220      PMS_PMSIEN.U &= ~0x00000FFFU;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   221      /* Fault Signal reaction on alarms are disabled */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   222      PMS_AGFSP_STDBY0.U = 0x40000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   223      PMS_AGFSP_STDBY1.U = 0x40000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   224      /* FSP0EN and FSP1EN configuration bits are cleared to avoid spurious Error pin activation */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   225      PMS_CMD_STDBY.U |= 0x40000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   226      PMS_CMD_STDBY.U |= 0x40000008U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   227      /* Reset the MONFILT register */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   228      PMS_MONFILT.U = 0x00000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   229      /* Start MONBIST test */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   230      PMS_MONBISTCTRL.U = 0x40000001U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   231  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   232      /* Wait until MONBIST execution is done */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   233      timeout = 0x1000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   234      while (((PMS_MONBISTSTAT.B.TSTRUN == 1) || (PMS_MONBISTSTAT.B.TSTDONE == 0)) && (timeout--))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   235      {};
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   236  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   237      /* Disable SMU Standby */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   238      PMS_CMD_STDBY.U    = 0x40000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   239      IFX_CFG_SSW_SET_SAFETY_ENDINIT();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   240  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   241      Ifx_Ssw_jumpToFunction(&Ifx_Ssw_MonbistCheck);
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   242  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   243  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   244  void Ifx_Ssw_MonbistCheck(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   245  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   246      /* Check for MONBIST error state */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   247      if ((PMS_MONBISTSTAT.B.TSTOK == 0U) || (PMS_MONBISTSTAT.B.SMUERR == 1U) || (PMS_MONBISTSTAT.B.PMSERR == 1U))
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   248      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   249          __debug();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   250      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   251  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   252      Ifx_Ssw_jumpBackToLink();
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   253  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   254  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   255  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   256  #if (IFX_CFG_SSW_ENABLE_EMEM_INIT == 1U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   257  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   258  void Ifx_Ssw_UnlockEmem(void)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   259  {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   260      if(SCU_CHIPID.B.EEA == 1U)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   261      {
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   262        /* Enable EMEM clock */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   263        EMEM_CLC.U = 0x00000000U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   264        /* sync access */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   265        EMEM_CLC.U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   266        /* Disable Lock */
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   267        EMEM_SBRCTR.U = 0x00000002U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   268        EMEM_SBRCTR.U = 0x00000006U;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   269        EMEM_SBRCTR.U = 0x0000000EU;
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   270      }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   271  }
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   272  #endif
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   273  
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   274  #if defined(__TASKING__)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   275  #pragma endoptimize
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   276  #elif defined(__HIGHTEC__)
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   277  #pragma GCC reset_options
; ..\Mcal\Infra_Prod\Ssw\TC39B\Tricore\Ifx_Ssw_Infra.c	   278  #endif

	; Module end
